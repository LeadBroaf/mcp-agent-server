TITLE: Restarting Nginx
DESCRIPTION: This command restarts the Nginx service to apply the changes made to the configuration file (nginx.conf). This is required after loading the module and enabling App Protect WAF. Requires sudo and systemctl.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/installing-nginx-plus-with-dos-and-waf-on-amazon-web-services.md#_snippet_10

LANGUAGE: shell
CODE:
```
sudo systemctl restart nginx
```

----------------------------------------

TITLE: Configuring SSL Certificate and Protocols (Nginx)
DESCRIPTION: This snippet configures the SSL certificate, private key, and allowed SSL/TLS protocols within the 'server' block for HTTPS traffic. It specifies the paths to the certificate and key files and disables protocols less secure than TLS version 1.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/microsoft-exchange.md#_snippet_34

LANGUAGE: nginx
CODE:
```
# In the 'server' block for HTTPS traffic
ssl_certificate /etc/nginx/ssl/company.com.crt;
ssl_certificate_key /etc/nginx/ssl/company.com.key;
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
```

----------------------------------------

TITLE: Full Nginx Configuration for Basic Load Balancing
DESCRIPTION: This is a complete Nginx configuration example for basic load balancing across multiple Tomcat application servers. It configures caching, HTTP/2 support, redirects HTTP to HTTPS, sets up upstream servers, and handles WebSocket connections, demonstrating a comprehensive setup for a Tomcat application.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_25

LANGUAGE: nginx
CODE:
```
proxy_cache_path /tmp/NGINX_cache/ keys_zone=backcache:10m;

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

upstream tomcat {
    # Use IP Hash for session persistence
    ip_hash;
    # List of Tomcat application servers
    server 10.100.100.11:8080;
    server 10.100.100.12:8080;
}

server {
    listen 80;
    server_name example.com;
    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl;
    http2  on;

    server_name example.com;
    ssl_certificate     /etc/nginx/ssl/example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;
    ssl_session_cache   shared:SSL:1m;
    ssl_prefer_server_ciphers on;

    # Load balance requests for '/tomcat-app/' across Tomcat application
    # servers
    location /tomcat-app/ {
        proxy_pass http://tomcat;
        proxy_cache backcache;
    }

    # Return a temporary redirect to '/tomcat-app/' when user requests '/'
    location = / {
        return 302 /tomcat-app/;
    }

    # WebSocket configuration
    location /wstunnel/ {
        proxy_pass https://tomcat;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
}
```

----------------------------------------

TITLE: Reload NGINX Configuration
DESCRIPTION: This command reloads the NGINX configuration without interrupting service.  It is used to apply changes made to the configuration file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/auth0.md#_snippet_10

LANGUAGE: nginx
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Reload NGINX Configuration (Shell)
DESCRIPTION: This command reloads the NGINX service, applying any new configuration changes without stopping the NGINX process. It ensures that updates take effect immediately while maintaining service availability.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/admin-guide/authentication/oidc/getting-started.md#_snippet_1

LANGUAGE: Shell
CODE:
```
sudo nginx -s reload
```

----------------------------------------

TITLE: Configuring NGINX as SSL/TLS Reverse Proxy with Upstream Load Balancing
DESCRIPTION: This NGINX configuration demonstrates setting up a reverse proxy with SSL/TLS for upstream servers. It includes defining an upstream group, configuring a server block to proxy requests to this group with client certificate authentication and SSL session reuse, and setting up backend servers with optional client certificate verification. It highlights the use of proxy_ssl_certificate, proxy_ssl_certificate_key, proxy_ssl_protocols, proxy_ssl_ciphers, proxy_ssl_trusted_certificate, proxy_ssl_verify, proxy_ssl_verify_depth, and proxy_ssl_session_reuse directives for secure upstream communication.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/securing-http-traffic-upstream.md#_snippet_7

LANGUAGE: nginx
CODE:
```
http {
    #...
    upstream backend.example.com {
        server backend1.example.com:443;
        server backend2.example.com:443;
   }

    server {
        listen      80;
        server_name www.example.com;
        #...

        location /upstream {
            proxy_pass                    https://backend.example.com;
            proxy_ssl_certificate         /etc/nginx/client.pem;
            proxy_ssl_certificate_key     /etc/nginx/client.key;
            proxy_ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
            proxy_ssl_ciphers             HIGH:!aNULL:!MD5;
            proxy_ssl_trusted_certificate /etc/nginx/trusted_ca_cert.crt;

            proxy_ssl_verify        on;
            proxy_ssl_verify_depth  2;
            proxy_ssl_session_reuse on;
        }
    }

    server {
        listen      443 ssl;
        server_name backend1.example.com;

        ssl_certificate        /etc/ssl/certs/server.crt;
        ssl_certificate_key    /etc/ssl/certs/server.key;
        ssl_client_certificate /etc/ssl/certs/ca.crt;
        ssl_verify_client      optional;

        location /yourapp {
            proxy_pass https://url_to_app.com;
        #...
        }

    server {
        listen      443 ssl;
        server_name backend2.example.com;

        ssl_certificate        /etc/ssl/certs/server.crt;
        ssl_certificate_key    /etc/ssl/certs/server.key;
        ssl_client_certificate /etc/ssl/certs/ca.crt;
        ssl_verify_client      optional;

        location /yourapp {
            proxy_pass https://url_to_app.com;
        #...
        }
    }
}
```

----------------------------------------

TITLE: Updating TrafficSplit for Canary Deployment (10% v2.0, 90% v1.0)
DESCRIPTION: This YAML configuration updates the TrafficSplit resource to implement a canary deployment strategy. It directs 90% of the traffic to `target-v1-0` and 10% to `target-v2-0`. This allows for testing the new version with a small subset of users before a full rollout. The weights control the proportion of traffic sent to each backend service.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/tutorials/trafficsplit-deployments.md#_snippet_11

LANGUAGE: yaml
CODE:
```
apiVersion: split.smi-spec.io/v1alpha3
kind: TrafficSplit
metadata:
  name: target-ts
spec:
  service: target-svc
  backends:
  - service: target-v1-0
    weight: 90
  - service: target-v2-0
    weight: 10
```

----------------------------------------

TITLE: Installing NGINX from Ubuntu Repository
DESCRIPTION: This command installs the NGINX web server package from the Ubuntu repositories using the apt-get package manager. It downloads and installs the package along with its dependencies.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/installing-nginx/installing-nginx-open-source.md#_snippet_19

LANGUAGE: shell
CODE:
```
sudo apt-get install nginx
```

----------------------------------------

TITLE: Verifying and Reloading NGINX Configuration
DESCRIPTION: These shell commands verify the validity of the Nginx configuration using 'nginx -t' and then reload the Nginx service to apply the new configuration using 'nginx -s reload'.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/amazon-web-services/route-53-global-server-load-balancing.md#_snippet_8

LANGUAGE: Shell
CODE:
```
nginx -t
nginx -s reload
```

----------------------------------------

TITLE: Full Configuration for Enhanced Load Balancing - Nginx
DESCRIPTION: This is a full Nginx configuration demonstrating enhanced load balancing features. It includes proxy caching, websocket support, session persistence using cookies and the jvmRoute parameter, application health checks, and a secure API endpoint. It requires the http context and includes definitions for upstream tomcat servers, server blocks for HTTP and HTTPS traffic, and map directives for managing cookies and URIs.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_44

LANGUAGE: nginx
CODE:
```
proxy_cache_path /tmp/NGINX_cache/ keys_zone=backcache:10m;

# WebSocket configuration
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# Extract the data after the final period (.) in the
# JSESSIONID cookie and store it in the $route_cookie variable.
map $cookie_jsessionid $route_cookie {
    ~.+\.(?P<route>w+)$ $route;
}

# Search the URL for a trailing jsessionid parameter, extract the
# data after the final period (.), and store it in
# the $route_uri variable.
map $request_uri $route_uri {
    jsessionid=.+\.(?P<route>w+)$ $route;
}

# Application health checks
match tomcat_check {
    status 200;
    header Content-Type = text/html;
    body ~ "Apache Tomcat/8";
}

upstream tomcat {
    # Shared memory zone for application health checks, live activity
    # monitoring, and dynamic reconfiguration
    zone tomcat 64k;

    # List of Tomcat application servers
    server 10.100.100.11:8080 slow_start=30s;
    server 10.100.100.12:8080 slow_start=30s;

    # Session persistence based on the jvmRoute value in
    # the JSESSION ID cookie
    sticky route $route_cookie $route_uri;

    # Uncomment the following directive (and comment the preceding
    # 'sticky route' and JSESSIONID 'map' directives) for session
    # persistence based on the JSESSIONID
    #sticky learn create=$upstream_cookie_JSESSIONID
    #             lookup=$cookie_JSESSIONID
    #             zone=client_sessions:1m;
}

server {
    listen 80;
    server_name example.com;
    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
     }
}

server {
    listen 443 ssl;
    http2  on;

    server_name example.com;

    # Required for live activity monitoring of HTTPS traffic
    status_zone tomcat;

    ssl_certificate     /etc/nginx/ssl/example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;
    ssl_session_cache         shared:SSL:1m;
    ssl_prefer_server_ciphers on;

    # Load balance requests for '/tomcat-app/' across Tomcat application
    # servers
    location /tomcat-app/ {
        proxy_pass http://tomcat;
        proxy_cache backcache;

        # Active health checks
        health_check interval=2s fails=1 passes=5 uri=/ match=tomcat_check;
    }

    # Return a 302 redirect to '/tomcat-app/' when user requests '/'
    location = / {
        return 302 /tomcat-app/;
    }

    # WebSocket configuration
    location /wstunnel/ {
        proxy_pass http://tomcat;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # Secured access to the NGINX Plus API
    location /api {
        api write=on;
        allow 127.0.0.1; # Permit access from localhost
        deny all;        # Deny access from everywhere else
    }
}

```

----------------------------------------

TITLE: Configuring NGINX Location with Prefix String
DESCRIPTION: This snippet demonstrates a basic NGINX `location` block using a prefix string. It matches request URIs that begin with the specified path, such as `/some/path/document.html`. Directives within this block would define how to handle such requests.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/web-server.md#_snippet_4

LANGUAGE: nginx
CODE:
```
location /some/path/ {
    #...
}
```

----------------------------------------

TITLE: Configuring Error Log for Debugging to a File
DESCRIPTION: This NGINX configuration directive sets the error logging level to `debug` and specifies the path to the log file. This enables detailed debugging information to be written to the specified file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/monitoring/debugging.md#_snippet_6

LANGUAGE: nginx
CODE:
```
error_log  /var/log/nginx/error.log debug;
```

----------------------------------------

TITLE: Test Nginx configuration
DESCRIPTION: This snippet demonstrates how to test the Nginx configuration using the `nginx -t` command. This command checks the syntax of the configuration file and reports any errors.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/nginscript.md#_snippet_7

LANGUAGE: Shell
CODE:
```
nginx -t
```

----------------------------------------

TITLE: Complete NGINX Configuration for JWT Authentication with Subrequest and Key Caching
DESCRIPTION: This complete NGINX configuration enables JWT authentication for a backend service. It configures a location block for authentication, specifies a local JWK file, configures a subrequest to fetch keys from Microsoft Entra, enables key caching, and proxies requests to the backend. The subrequest is marked as `internal` to prevent external access and the output buffer size is increased.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/quickstart/security-controls/jwt.md#_snippet_1

LANGUAGE: nginx
CODE:
```
http {
   upstream my_backend {
      server 10.0.0.1;
      server 10.0.0.2;
   }

   server {
      listen 80;

      location / {
         auth_jwt "API";
         auth_jwt_key_file conf/key.jwk;
         auth_jwt_key_request /_jwks_uri;
         auth_jwt_key_cache 1h;
         proxy_pass http://my_backend;
      }

      location = /_jwks_uri {
         internal;
         proxy_method GET;
         proxy_pass https://login.microsoftonline.com/common/discovery/keys;
         subrequest_output_buffer_size 12k;
      }
   }
}
```

----------------------------------------

TITLE: Configure Rate Limiting with Burst (YAML)
DESCRIPTION: This YAML configuration defines a RateLimit resource with a burst setting for traffic from a specific source deployment. It allows a burst of 10 requests to get through to the `dest-svc` only if the requests are from `bursty-src`. All other requests will be limited according to a default rate limit policy if present.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/guides/smi-traffic-policies.md#_snippet_4

LANGUAGE: yaml
CODE:
```
apiVersion: specs.smi.nginx.com/v1alpha2
kind: RateLimit
metadata:
  name: dest-svc-bursty
  namespace: default
spec:
  destination:
    kind: Service
    name: dest-svc
    namespace: default
  sources:
    kind: Deployment
    name: bursty-src
    namespace: default
  name: 10rs
  rate: 10r/s
  burst: 10
```

----------------------------------------

TITLE: Full Nginx Configuration for Basic Load Balancing
DESCRIPTION: This comprehensive Nginx configuration demonstrates basic load balancing for a Node.js application. It includes configurations for proxy caching, mapping upgrade headers, upstream server definitions, HTTP to HTTPS redirection, HTTP/2 support, SSL certificate settings, and WebSocket proxying. The configuration shows a complete setup including multiple server blocks and directives.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/node-js.md#_snippet_23

LANGUAGE: nginx
CODE:
```
proxy_cache_path /tmp/NGINX_cache/ keys_zone=backcache:10m;

map $http_upgrade $connection_upgrade {
    default upgrade;
    ' '     close;
}

upstream nodejs {
    # Use IP Hash for session persistence
    ip_hash;

    # List of Node.js application servers
    server 192.168.33.11:8080;
    server 192.168.33.12:8080;
}

server {
    listen 80;
    server_name example.com;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl;
    http2  on;

    server_name example.com;

    ssl_certificate           /etc/nginx/ssl/certificate-name;
    ssl_certificate_key       /etc/nginx/ssl/private-key;
    ssl_session_cache         shared:SSL:1m;
    ssl_prefer_server_ciphers on;

    # Return a temporary redirect to '/webapp/' when user requests '/'
    location = / {
         return 302 /webapp/;
    }

    # Load balance requests for '/webapp/' across Node.js app servers
    location /webapp/ {
        proxy_pass http://nodejs;
        proxy_cache backcache;
    }

    # WebSocket configuration
    location /wstunnel/ {
        proxy_pass https://nodejs;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
}
```

----------------------------------------

TITLE: Redirecting HTTP to HTTPS - Nginx
DESCRIPTION: This snippet configures a server block to listen for HTTP requests on port 80 and redirect them to the HTTPS version of the same domain. It uses a 'return' directive within a 'location' block to achieve this redirection.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_14

LANGUAGE: nginx
CODE:
```
server {
    listen 80;
    server_name example.com;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}
```

----------------------------------------

TITLE: NGINX Proxy Pass Directive
DESCRIPTION: This snippet shows the `proxy_pass` directive, which is used within a location block to forward requests to an upstream server. It is a fundamental part of reverse proxy configurations in NGINX. The directive specifies the address of the upstream server that will handle the request.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/nginx-configs/config-templates/tutorials/round-robin-reverse-proxy.md#_snippet_7

LANGUAGE: nginx
CODE:
```
proxy_pass http://users_backend;
```

----------------------------------------

TITLE: Reload Nginx Configuration
DESCRIPTION: This shell command reloads the Nginx configuration without downtime. It uses the `nginx -s reload` command, which signals the Nginx master process to reload the configuration. This applies any changes made to the configuration file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/headers-more.md#_snippet_8

LANGUAGE: shell
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Reload Nginx Configuration
DESCRIPTION: This command reloads the Nginx configuration without downtime, applying the changes made to the configuration file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/cognito.md#_snippet_9

LANGUAGE: nginx
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Kubectl Get Pods
DESCRIPTION: Retrieves a list of pods within a given Kubernetes namespace. Replace <namespace> with the actual Kubernetes namespace.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/admin-guide/deploy-with-helm.md#_snippet_6

LANGUAGE: shell
CODE:
```
kubectl get pods -n <namespace>
```

----------------------------------------

TITLE: Configuring upstream API server in Nginx
DESCRIPTION: This snippet demonstrates how to configure an upstream block in Nginx to define multiple API servers for load balancing. It sets up two servers, 10.0.0.1 and 10.0.0.2, that will handle requests proxied from the `location /products/` block.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-jwt-authentication.md#_snippet_0

LANGUAGE: nginx
CODE:
```
upstream api_server {
    server 10.0.0.1;
    server 10.0.0.2;
}

server {
    listen 80;

    location /products/ {
        proxy_pass http://api_server;
        #...
    }
}
```

----------------------------------------

TITLE: Reloading NGINX Configuration (nginx -s reload) (Shell)
DESCRIPTION: This shell command snippet provides the 'nginx -s reload' command, which instructs NGINX to gracefully reload its configuration. This method applies changes without dropping active connections, ensuring continuous service availability.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_11

LANGUAGE: none
CODE:
```
root# nginx -s reload
```

----------------------------------------

TITLE: Reload Nginx configuration
DESCRIPTION: This command reloads the Nginx configuration after changes have been made. This is required for the changes to take effect.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx-one/getting-started.md#_snippet_5

LANGUAGE: shell
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Full NGINX Deployment Configuration with Read-Only Root Filesystem (YAML)
DESCRIPTION: This YAML configuration provides a complete example of deploying NGINX with App Protect in Kubernetes, including a read-only root filesystem, volume mounts for writable directories, and security context settings. It defines the deployment, containers, volumes, and image pull secrets necessary for running NGINX with enhanced security.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/nap-k8s-readonly-context.md#_snippet_2

LANGUAGE: yaml
CODE:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nap5-deployment
spec:
  selector:
    matchLabels:
      app: nap5
  replicas: 2
  template:
    metadata:
      labels:
        app: nap5
    spec:
      imagePullSecrets:
        - name: regcred
      containers:
        - name: nginx
          image: <your-private-registry>/nginx-app-protect-5:<your-tag>
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: app-protect-bd-config
              mountPath: /opt/app_protect/bd_config
            - name: app-protect-config
              mountPath: /opt/app_protect/config
            - name: tmp-volume
              mountPath: /tmp
            - name: nginx-log
              mountPath: /var/log/nginx
            - name: app-protect-bundles
              mountPath: /etc/app_protect/bundles
        - name: waf-enforcer
          image: private-registry.nginx.com/nap/waf-enforcer:<version-tag>
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
          env:
            - name: ENFORCER_PORT
              value: "50000"
          volumeMounts:
            - name: app-protect-bd-config
              mountPath: /opt/app_protect/bd_config
        - name: waf-config-mgr
          image: private-registry.nginx.com/nap/waf-config-mgr:<version-tag>
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - all
          volumeMounts:
            - name: app-protect-bd-config
              mountPath: /opt/app_protect/bd_config
            - name: app-protect-config
              mountPath: /opt/app_protect/config
            - name: app-protect-bundles
              mountPath: /etc/app_protect/bundles
      volumes:
        - name: app-protect-bd-config
          emptyDir: {}
        - name: app-protect-config
          emptyDir: {}
        - name: nginx-log
          emptyDir: {}
        - name: tmp-volume
          emptyDir: {}
        - name: app-protect-bundles
          persistentVolumeClaim:
            claimName: nap5-bundles-pvc 
```

----------------------------------------

TITLE: Reload NGINX Configuration
DESCRIPTION: This command reloads the NGINX configuration without downtime. This is used to apply the changes made to the NGINX configuration file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/active-directory-federation-services.md#_snippet_11

LANGUAGE: nginx
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Comprehensive NGINX Configuration Example with PROXY Protocol and Logging
DESCRIPTION: This extensive NGINX configuration example demonstrates a complete setup for handling client IP addresses via the PROXY protocol. It includes defining custom log_format directives for both HTTP and Stream, configuring server blocks to listen with the proxy_protocol parameter, managing SSL termination, and setting proxy_set_header for HTTP and proxy_protocol on for Stream to ensure client IP forwarding to backends. This setup is ideal when NGINX is behind a load balancer that supports the PROXY protocol.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/using-proxy-protocol.md#_snippet_8

LANGUAGE: Nginx
CODE:
```
http {
    log_format combined '$proxy_protocol_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent"';
    #...

    server {
        server_name localhost;

        listen 80   proxy_protocol;
        listen 443  ssl proxy_protocol;

        ssl_certificate      /etc/nginx/ssl/public.example.com.pem;
        ssl_certificate_key  /etc/nginx/ssl/public.example.com.key;

        location /app/ {
            proxy_pass       http://backend1;
            proxy_set_header Host            $host;
            proxy_set_header X-Real-IP       $proxy_protocol_addr;
            proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        }
    }
}

stream {
    log_format basic '$proxy_protocol_addr - $remote_user [$time_local] '
                     '$protocol $status $bytes_sent $bytes_received '
                     '$session_time';
    #...
    server {
        listen              12345 ssl proxy_protocol;

        ssl_certificate     /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/cert.key;

        proxy_pass          backend.example.com:12345;
        proxy_protocol      on;
    }
}
```

----------------------------------------

TITLE: Complete NGINX Configuration Example
DESCRIPTION: This example shows a complete Nginx configuration with the stream module for mTLS, basic HTTP configuration, and App Protect integration. It defines the user, worker processes, modules, logging, events, and the server configurations for both stream and HTTP traffic.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/configuration-guide/configuration.md#_snippet_17

LANGUAGE: nginx
CODE:
```
user nginx;
    worker_processes auto;
    worker_shutdown_timeout 10s; # NGINX gives worker processes 10 seconds to gracefully terminate before it will actively close connections
    load_module modules/ngx_http_app_protect_module.so;
    error_log /var/log/nginx/error.log notice;

    events {
            worker_connections 65536;
        }

    stream {
    upstream enforcer {
        server 127.0.0.1:4431;
    }

    server {
        listen 5000;
        proxy_pass enforcer;
        proxy_ssl_server_name on;
        proxy_timeout 60m;
        proxy_ssl on;
        proxy_ssl_certificate /etc/ssl/certs/app_protect_client.crt;
	    proxy_ssl_certificate_key /etc/ssl/certs/app_protect_client.key;
	    proxy_ssl_trusted_certificate /etc/ssl/certs/app_protect_server_ca.crt;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        sendfile on;
        keepalive_timeout 65;

        app_protect_enforcer_address 127.0.0.1:5000;

        server {
            listen 80;
            server_name localhost;
            proxy_http_version 1.1;

            app_protect_enable on;
            app_protect_policy_file app_protect_default_policy;
            app_protect_security_log_enable on;
            app_protect_security_log log_all syslog:server=127.0.0.1:514;

            location / {
                client_max_body_size 0;
                default_type text/html;
                # Pass traffic to backend
                proxy_pass http://127.0.0.1:8080/;
            }
        }
    }
    
```

----------------------------------------

TITLE: Complete Load Balancer Configuration NGINX
DESCRIPTION: This snippet presents a complete NGINX Plus configuration, including upstream definitions with zones, server blocks for HTTP and HTTPS, health checks, and status monitoring setup. It configures sticky sessions, keepalive connections, proxy settings, and live activity monitoring via the NGINX Plus API.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/migrate-hardware-adc/f5-big-ip-configuration.md#_snippet_19

LANGUAGE: nginx
CODE:
```
upstream test_pool {
    zone test_pool_zone 64k;
    server 10.10.10.10:80;
    server 10.10.10.20:80;
    sticky cookie mysession expires=1h;
    keepalive 32;
}

upstream ssl_test_pool {
    zone ssl_test_pool_zone 64k;
    server 10.10.10.10:443;
    server 10.10.10.20:443;
    sticky cookie mysession expires=1h;
    keepalive 32;
}

server {
    listen 192.168.10.10:80 default_server;
    proxy_set_header Host $host;

    location / {
         proxy_pass http://test_pool;
         health_check;
         proxy_http_version 1.1;
    }

    location ~ /favicon.ico {
        root /usr/share/nginx/images;
    }
}

server {
    listen 192.168.10.10:443 ssl default_server;
    ssl_certificate     test.crt;
    ssl_certificate_key test.key;
    proxy_set_header    Host $host;

    location / {
        proxy_pass https://ssl_test_pool;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        health_check;
    }

    location ~ /favicon.ico {
        root /usr/share/nginx/images;
    }
}

server {
    listen 8080;
    status_zone status-page;
    root /usr/share/nginx/html;

    location /api {
        api write=on;
        # directives controlling access, such as 'allow' and 'deny'
    }

    location = /dashboard.html {
        root /usr/share/nginx/html;
    }

    # Redirect requests made to the old (pre-R14) dashboard
    location = /status.html {
        return 301 /dashboard.html;
    }

    location ~ /favicon.ico {
        root /usr/share/nginx/images;
    }
}
```

----------------------------------------

TITLE: Handling Missing Files with `try_files` in NGINX
DESCRIPTION: This NGINX configuration uses the `try_files` directive to check for the existence of a file corresponding to the request URI. If the file is not found, it internally redirects the request to a default image file (`/images/default.gif`). The `root` directive defines the base path for file resolution.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/serving-static-content.md#_snippet_4

LANGUAGE: nginx
CODE:
```
server {
    root /www/data;

    location /images/ {
        try_files $uri /images/default.gif;
    }
}
```

----------------------------------------

TITLE: Handling Index Files with Internal Redirects and PHP Processing in NGINX
DESCRIPTION: This NGINX configuration demonstrates how index file resolution can lead to internal redirects and subsequent processing by different `location` blocks. If `index.html` is not found, NGINX attempts `index.php`, which triggers an internal redirect to the `.php` location, passing the request to a FastCGI server for processing.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/serving-static-content.md#_snippet_3

LANGUAGE: Nginx
CODE:
```
location / {
    root /data;
    index index.html index.php;
}

location ~ \.php {
    fastcgi_pass localhost:8000;
    #...
}
```

----------------------------------------

TITLE: Full Nginx Configuration for WebLogic Load Balancing
DESCRIPTION: This NGINX configuration provides enhanced load balancing for WebLogic Server applications. It includes features like caching, WebSocket support, health checks, and session persistence. To use this configuration, include it in the http context of your main nginx.conf file using an `include` directive.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-weblogic-server.md#_snippet_44

LANGUAGE: nginx
CODE:
```
proxy_cache_path /tmp/NGINX_cache/ keys_zone=backcache:10m;

# WebSocket configuration
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# Map the PURGE method to the request method, for cache purging
map $request_method $purge_method {
    PURGE 1;
    default 0;
}

# Application health checks
match health_check {
    status 200;
    header Content-Type = text/html;
    body ~ "Welcome To Dizzyworld";
}

upstream weblogic {
    # Shared memory zone for application health checks, live activity
    # monitoring, and dynamic reconfiguration
    zone weblogic 64k;

    # List of WebLogic Server application servers
    server 192.168.25.33:7001 slow_start=30s;
    server 192.168.25.69:7001 slow_start=30s;

    # Session persistence based on JSESSIONID
    sticky learn create=$upstream_cookie_JSESSIONID
                 lookup=$cookie_JSESSIONID
                 zone=client_sessions:1m;
}

server {
    listen 80;
    server_name example.com;

    # Required for live activity monitoring of HTTP traffic
    status_zone weblogic;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
     }
}

server {
    listen 443 ssl;
    http2  on;

    server_name example.com;

    # Required for live activity monitoring of HTTPS traffic
    status_zone weblogic-ssl;
    ssl_certificate     /etc/nginx/ssl/certificate-name;
    ssl_certificate_key /etc/nginx/ssl/private-key;
    ssl_session_cache shared:SSL:1m;
    ssl_prefer_server_ciphers on;

    # Load balance requests for '/weblogic-app/' across WebLogic Server
    # application servers
    location /weblogic-app/ {
        proxy_pass http://weblogic;
        proxy_cache backcache;

        # Enable purging of the content cache
        proxy_cache_purge $purge_method;

        # Active health checks
        health_check uri=/benefits match=health_check;
    }

    # Return a 302 redirect to '/weblogic-app/' when user requests '/'
    location = / {
        return 302 /weblogic-app/;
    }

    # WebSocket configuration
    location /wstunnel/ {
        proxy_pass http://weblogic;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # Secured access to the NGINX Plus API
    location /api {
        api write=on;
        allow 127.0.0.1; # Permit access from localhost
        deny all;        # Deny access from everywhere else
    }
}

```

----------------------------------------

TITLE: Reload NGINX Configuration
DESCRIPTION: Command to reload the NGINX Plus configuration to apply the changes made to the CRS rules. This ensures that the revised rule set is active.
SOURCE: https://github.com/nginx/documentation/blob/main/content/modsec-waf/admin-guide/nginx-plus-modsecurity-waf-owasp-crs.md#_snippet_13

LANGUAGE: none
CODE:
```
sudo nginx -s reload
```

----------------------------------------

TITLE: Enabling HTTP/2 and SSL in NGINX Server Block
DESCRIPTION: This snippet configures an NGINX server block to listen on port 443 for HTTPS traffic and enables HTTP/2 protocol support. It is typically placed within a `server` block to handle secure connections.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_22

LANGUAGE: Nginx
CODE:
```
listen 443 ssl;
http2  on;
```

----------------------------------------

TITLE: Configure Reverse Proxy with Proxy Pass in Nginx
DESCRIPTION: This snippet configures a location block that proxies all traffic to the 'oracle' upstream group. It sets the 'Host' header to the value of the incoming request's host header. This allows Nginx to forward requests to the backend servers in the upstream group.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-e-business-suite.md#_snippet_22

LANGUAGE: nginx
CODE:
```
# In the 'server' block for HTTPS traffic
location / {
     proxy_pass http://oracle;
     proxy_set_header Host $host;
}
```

----------------------------------------

TITLE: Testing NGINX Plus Configuration - Shell
DESCRIPTION: This command tests the syntax of the NGINX Plus configuration file and verifies its validity. It is crucial to run this command after making any changes to the configuration to ensure stability before reloading.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/uninstall.md#_snippet_5

LANGUAGE: shell
CODE:
```
nginx -t
```

----------------------------------------

TITLE: Configure DNS Resolver in NGINX
DESCRIPTION: This configuration snippet sets up a DNS resolver within the `http` context of the NGINX configuration.  It specifies the resolver IP address, enables IPv4 resolution, and sets a TTL of 300 seconds for DNS record re-resolution.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/auth0.md#_snippet_3

LANGUAGE: nginx
CODE:
```
http {
    resolver 10.0.0.1 ipv4=on valid=300s;

    # ...
}
```

----------------------------------------

TITLE: Create secure-app application
DESCRIPTION: This YAML configuration creates a Deployment, Service, ConfigMap, and Secret for the secure-app application. The Deployment defines a pod with an nginx-hello image that serves HTTPS traffic on port 8443. The Service exposes the application, and the ConfigMap configures Nginx. The Secret stores the TLS certificate and key.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-management/tls-passthrough.md#_snippet_0

LANGUAGE: yaml
CODE:
```
kubectl apply -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: secure-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: secure-app
  template:
    metadata:
      labels:
        app: secure-app
    spec:
      containers:
        - name: secure-app
          image: nginxdemos/nginx-hello:plain-text
          ports:
            - containerPort: 8443
          volumeMounts:
            - name: secret
              mountPath: /etc/nginx/ssl
              readOnly: true
            - name: config-volume
              mountPath: /etc/nginx/conf.d
      volumes:
        - name: secret
          secret:
            secretName: app-tls-secret
        - name: config-volume
          configMap:
            name: secure-config
---
apiVersion: v1
kind: Service
metadata:
  name: secure-app
spec:
  ports:
    - port: 8443
      targetPort: 8443
      protocol: TCP
      name: https
  selector:
    app: secure-app
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: secure-config
data:
  app.conf: |-
    server {
      listen 8443 ssl;
      listen [::]:8443 ssl;

      server_name app.example.com;

      ssl_certificate /etc/nginx/ssl/tls.crt;
      ssl_certificate_key /etc/nginx/ssl/tls.key;

      default_type text/plain;

      location / {
        return 200 "hello from pod \$hostname\n";
      }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: app-tls-secret
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ3Q0NRQ3EzQWxhdnJiaWpqQU5CZ2txaGtpRzl3MEJBUXNGQURCTU1Rc3dDUVlEVlFRR0V3SlYKVXpFTE1Ba0dBMVVFQ0F3Q1EwRXhGakFVQmdOVkJBY01EVk5oYmlCR2NtRnVZMmx6WTI4eEdEQVdCZ05WQkFNTQpEMkZ3Y0M1bGVHRnRjR3hsTG1OdmJUQWVGdzB5TURBek1qTXlNekl3TkROYUZ3MHlNekF6TWpNeU16SXdORE5hCk1Fd3hDekFKQmdOVkJBWVRBbFZUTVFzd0NRWURWUVFJREFKRFFURVdNQlFHQTFVRUJ3d05VMkZ1SUVaeVlXNWoKYVhOamJ6RVlNQllHQTFVRUF3d1BZWEJ3TG1WNFlXMXdiR1V1WTI5dE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRgpBQU9DQVE4QU1JSUJDZ0tDQVFFQTJCRXhZR1JPRkhoN2VPMVlxeCtWRHMzRzMrVEhyTEZULzdEUFFEQlkza3pDCi9oZlprWCt3OW1NNkQ1RU9uK2lpVlNhUWlQMm1aNFA3N29pR0dmd3JrNjJ0eEQ5cHphODM5NC9aSjF5Q0dXZ1QKK2NWUEVZbkxjQktzSTRMcktJZ21oWVIwUjNzWWRjR1JkSXJWUFZlNUVUQlk1Z1U0RGhhMDZOUEIraitmK0krWgphWGIvMlRBekJhNHozMWpIQzg2amVQeTFMdklGazFiY3I2cSsxRGR5eklxcWxkRDYvU3Q4Q2t3cDlOaDFCUGFhCktZZ1ZVd010UVBib2s1cFFmbVMrdDg4NHdSM0dTTEU4VkxRbzgyYnJhNUR3emhIamlzOTlJRGhzbUt0U3lWOXMKaWNJbXp5dHBnSXlhTS9zWEhRQU9KbVFJblFteWgyekd1WFhTQ0lkRGtRSURBUUFCTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ0tsVkhOZ1k5VHZLaW9Xb0tvdllCdnNRMmYrcmFOOEJwdWNDcnRvRm15NUczcGIzU2lPTndaCkF2cnhtSm4vR3lsa3JKTHBpQVA1eUNBNGI2Y2lYMnRGa3pQRmhJVFZKRTVBeDlpaEF2WWZwTUFSdWVqM29HN2UKd0xwQk1iUnlGbHJYV29NWUVBMGxsV0JueHRQQXZYS2Y4SVZGYTRSSDhzV1JJSDB4M2hFdjVtQ3VUZjJTRTg0QwpiNnNjS3Z3MW9CQU5VWGxXRVZVYTFmei9rWWZBa1lrdHZyV2JUcTZTWGxodXRJYWY4WEYzSUMrL2x1b3gzZThMCjBBcEFQVE5sZ0JwOTkvcXMrOG9PMWthSmQ1TmV6TnlJeXhSdUtJMzlDWkxuQm9OYmkzdlFYY1NzRCtYU2lYT0cKcEVnTjNtci8xRms4OVZMSENhTnkyKzBqMjZ0eWpiclcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRRFlFVEZnWkU0VWVIdDQKN1Zpckg1VU96Y2JmNU1lc3NWUC9zTTlBTUZqZVRNTCtGOW1SZjdEMll6b1BrUTZmNktKVkpwQ0kvYVpuZy92dQppSVlaL0N1VHJhM0VQMm5OcnpmM2o5a25YSUlaYUJQNXhVOFJpY3R3RXF3amd1c29pQ2FGaEhSSGV4aDF3WkYwCml0VTlWN2tSTUZqbUJUZ09GclRvMDhINlA1LzRqNWxwZHYvWk1ETUZyalBmV01jTHpxTjQvTFV1OGdXVFZ0eXYKcXI3VU4zTE1pcXFWMFByOUszd0tUQ24wMkhVRTlwb3BpQlZUQXkxQTl1aVRtbEIrWkw2M3p6akJIY1pJc1R4VQp0Q2p6WnV0cmtQRE9FZU9LejMwZ09HeVlxMUxKWDJ5SndpYlBLMm1Bakpveit4Y2RBQTRtWkFpZENiS0hiTWE1CmRkSUloME9SQWdNQkFBRUNnZ0VCQUxYaW16ODZrT1A0bkhBcTFPYVEyb2l3dndhQTczbTNlUytZSm84eFk4NFcKcmxyNXRzUWR5dGxPcEhTd05yQjBSQnNNTU1XeFNPQ0JJWlltUlVVZ200cGd2Uk9rRWl2OG9VOThQMkE4SnFTKwprWHBFRjVCNi84K2pXRmM0Z1Q4SWhlMEZtR0VJQllvelhYL08wejBsV0h4WXg2MHluWUoycU9vS1FKT3A5YjlsCmpiUVBkaC9mN2ErRWF0RzZNUFlrNG5xSEY3a0FzcmNsRXo2SGUvaEx6NmRkSTJ1N2RMRjB6QlN0QjM5WDFRZysKZ1JzTittOXg1S1FVTXYxMktvajdLc2hEelozOG5hSjd5bDgycGhBV1lGZzBOZHlzRlBRbmt0WmlNSUxOblFjNwpOeUt0cHNQaUxIRE9ha05hdEZLU2lOaUJrUk1lY1ZUMlJNMzMzUG54bFVFQ2dZRUEvYTY5MEEralU4VFJNbVZyCk4vRnlYWkxYa1c5b2NxVjBRbTA0TDMrSExybFNCTlRWSzk2U1pVT203VjViTzIxNmd4S2dJK3IwYm5kdE5GTUQKLzFncDhsdlJNcUlIeGZTeUo4SHpsSzViT0lnaUpxRGhzK3BKWTZmLytIVzZ1QkZyN3NGS3lxbVlIQlA0SC9BdApsT3lLeEVjMHFXazFlT2tCMWNNSGx0WDRwemtDZ1lFQTJncDhDVDVYWjNMSWRQN2M1SHpDS1YwczBYS1hGNmYyCkxzclhPVlZaTmJCN1NIS1NsOTBIU2VWVGx3czdqSnNxcC9yWFY2aHF0eUdEaTg4aTFZekthcEF6dXl3b0U3TnEKMUJpd2ZYSURQeTlPNUdGNXFYNXFUeENzSWNIcmo2Z21XMEZVQWhoS1lQcDRxd1JMdzFMZkJsd3U1VmhuN3I3ego0SkZBTEFpdlp4a0NnWUJicnpuKzVvZjdFSmtqQTdDYWlYTHlDczVLUzkrTi8rcGl6NktNMkNSOWFKRVNHZkhwClp3bTErNXRyRXIwYVgxajE0bGRxWTlKdjBrM3ZxVWs2a2h5bThUUk1mbThjeG5GVkdTMzF3SVpMaWpmOWlndkkKd0paQnBFaEkvaE83enVBWmJGYWhwR1hMVUJSUFJyalNxQ01IQ1UwcEpWTWtIZUtCNVhqcXRPNm5VUUtCZ0NJUAp6VHlzYm44TW9XQVZpSEJ4Uk91dFVKa1BxNmJZYUU3N0JSQkIwd1BlSkFRM1VjdERqaVh2RzFYWFBXQkR4VEFrCnNZdFNGZ214eEprTXJNWnJqaHVEbDNFLy9xckZOb1VYcmtxS2l4Tk4wcWMreXdDOWJPSVpHcXJUWG5jOHIzRkcKRFZlZWI5QWlrTU0ya3BkYTFOaHJnaS8xMVphb1lmVE0vQmRrNi9IUkFvR0JBSnFzTmFZYzE2clVzYzAzUEwybApXUGNzRnZxZGI3SEJyakVSRkhFdzQ0Vkt2MVlxK0ZWYnNNN1FTQVZ1V1llcGxGQUpDYzcrSEt1jRsa1hRM1RkCndSajJLK2pOUzJtUXp1Y2hOQnlBZ1hXVnYveHhMZEE3NnpuWmJYdjl5cXhnTVVjTVZwZGRuSkxVZm9QVVZ1dTcKS0tlVVU3TTNIblRKUStrcldtbUxraUlSCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
EOF
```

----------------------------------------

TITLE: Launching Nginx Plus Docker Container with Agent
DESCRIPTION: This command starts a Docker container for NGINX Plus with NGINX Agent, configured to connect to NGINX Instance Manager.  It sets environment variables for the Agent's gRPC port, Instance Manager host, and TLS settings.  Replace `<my-docker-registry>` and `<my-version-tag>` with the appropriate values for your private registry and image version.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/deploy/docker/deploy-nginx-plus-and-agent-docker.md#_snippet_7

LANGUAGE: Shell
CODE:
```
sudo docker run \
--env=NGINX_AGENT_SERVER_GRPCPORT=443 \
--env=NGINX_AGENT_SERVER_HOST=127.0.0.1 \
--env=NGINX_AGENT_TLS_ENABLE=true \
--env=NGINX_AGENT_TLS_SKIP_VERIFY=false \
--restart=always \
--runtime=runc \
-d <my-docker-registry>/nginx-plus/agent:<my-version-tag>
```

----------------------------------------

TITLE: Restarting NGINX Service with systemctl (Bash)
DESCRIPTION: This command fully stops and then starts the NGINX service. It's used for significant changes like software upgrades or clearing memory, as it drops all active connections and reinitializes worker processes. A failed restart due to configuration errors can lead to service downtime.
SOURCE: https://github.com/nginx/documentation/blob/main/templates/style-guide.md#_snippet_3

LANGUAGE: bash
CODE:
```
sudo systemctl restart nginx
```

----------------------------------------

TITLE: Combined Upstream and Proxy Configuration
DESCRIPTION: Combines the upstream group definition and the proxy configuration. This complete configuration sets up load balancing for HTTP traffic to a group of backend servers.  The default Round Robin algorithm is used as no other method is specified.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/http-load-balancer.md#_snippet_2

LANGUAGE: nginx
CODE:
```
http {
    upstream backend {
        server backend1.example.com;
        server backend2.example.com;
        server 192.0.0.1 backup;
    }

    server {
        location / {
            proxy_pass http://backend;
        }
    }
}
```

----------------------------------------

TITLE: Configuring Global NGINX Settings
DESCRIPTION: This snippet shows the recommended global settings for the main NGINX configuration file.  These settings define the user, worker processes, error logging, process ID file, and event handling. These are core Nginx settings.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/microsoft-exchange.md#_snippet_24

LANGUAGE: nginx
CODE:
```
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log info;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

# If using the standard configuration scheme, the 'http' and 'stream' blocks are
# usually placed here and enclose 'include' directives that refer to files in
# the conf.d directory.
```

----------------------------------------

TITLE: Defining Basic NGINX Directives
DESCRIPTION: This snippet demonstrates basic, single-line NGINX directives. `user` sets the user and group credentials for worker processes, `error_log` configures the error log file path and logging level, and `worker_processes` specifies the number of worker processes NGINX will use.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/basic-functionality/managing-configuration-files.md#_snippet_0

LANGUAGE: nginx
CODE:
```
user             nobody;
error_log        logs/error.log notice;
worker_processes 1;
```

----------------------------------------

TITLE: Start Nginx service
DESCRIPTION: This command starts the Nginx service using systemctl.  It is executed if the Nginx service is not already running.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx-one/getting-started.md#_snippet_1

LANGUAGE: shell
CODE:
```
sudo systemctl start nginx
```

----------------------------------------

TITLE: Checking NGINX Plus Server Status (Shell)
DESCRIPTION: This command is used to verify the operational status of the NGINX Plus server. It should be executed directly on the VM instance where NGINX Plus is installed. The output indicates whether the NGINX Plus service is running or stopped.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/installing-nginx/installing-nginx-plus-google-cloud-platform.md#_snippet_0

LANGUAGE: shell
CODE:
```
/etc/init.d/nginx status
```

----------------------------------------

TITLE: Configuring HTTP Basic Authentication in Nginx
DESCRIPTION: This snippet configures HTTP Basic authentication for a specific location in Nginx.  It specifies the `auth_basic` directive to enable authentication and sets a message for the authentication prompt. The `auth_basic_user_file` directive points to the password file containing the user credentials.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-http-basic-authentication.md#_snippet_3

LANGUAGE: nginx
CODE:
```
location /api {
    auth_basic "Administrator’s Area";
    #...
}
```

----------------------------------------

TITLE: Configuring NGINX stub_status Module using Bash
DESCRIPTION: This snippet provides a step-by-step guide to enable the `stub_status` module in NGINX. It involves navigating to the NGINX configuration directory, verifying include directives, creating a `stub_status.conf` file with a server block to expose metrics on `127.0.0.1:80/nginx_status`, and finally testing the NGINX configuration syntax. This configuration is crucial for the F5 NGINX Amplify Agent to collect key NGINX metrics.
SOURCE: https://github.com/nginx/documentation/blob/main/content/amplify/nginx-amplify-agent/configuring-metric-collection.md#_snippet_0

LANGUAGE: bash
CODE:
```
# cd /etc/nginx

# grep -i include\.*conf nginx.conf
    include /etc/nginx/conf.d/*.conf;

# cat > conf.d/stub_status.conf
server {
    listen 127.0.0.1:80;
    server_name 127.0.0.1;
    location /nginx_status {
        stub_status on;
        allow 127.0.0.1;
        deny all;
    }
}
<Ctrl-D>

# ls -la conf.d/stub_status.conf
-rw-r--r-- 1 root root 162 Nov  4 02:40 conf.d/stub_status.conf

# nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
```

----------------------------------------

TITLE: Configuring Root Directories for Static Content in NGINX
DESCRIPTION: This NGINX configuration defines the root directory for serving static content. It sets a default root for the server block and overrides it for specific `location` blocks based on the request URI, allowing different content types (e.g., images, media) to be served from distinct file system paths.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/serving-static-content.md#_snippet_0

LANGUAGE: Nginx
CODE:
```
server {
    root /www/data;

    location / {
    }

    location /images/ {
    }

    location ~ \.(mp3|mp4) {
        root /www/media;
    }
}
```

----------------------------------------

TITLE: Sending Signals to NGINX Master Process
DESCRIPTION: This snippet demonstrates how to send signals to the NGINX master process using the `nginx` command. The `<SIGNAL>` placeholder should be replaced with a valid signal like `quit`, `reload`, `reopen`, or `stop`. This command is used to control the NGINX server's behavior without interrupting service.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/basic-functionality/runtime-control.md#_snippet_0

LANGUAGE: none
CODE:
```
nginx -s <SIGNAL>
```

----------------------------------------

TITLE: OpenTelemetry Collector Configuration Example
DESCRIPTION: This is an example configuration for OpenTelemetry Collector that receives OTLP data on HTTP, HTTPS, gRPC, and gRPC+TLS endpoints and forwards it to DataDog. It defines the receivers, exporters, and the service pipeline to process metrics.
SOURCE: https://github.com/nginx/documentation/blob/main/content/controller/platform/integrations/otlp-integration.md#_snippet_0

LANGUAGE: YAML
CODE:
```
receivers:
  otlp/https:
    protocols:
      http:
        endpoint: "0.0.0.0:4318"
        tls_settings:
          cert_file: /etc/otel/server.crt
          key_file: /etc/otel/server.key
  otlp/http:
    protocols:
      http:
        endpoint: "0.0.0.0:4319"
  otlp/grpc_tls:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4418"
        tls_settings:
          cert_file: /etc/otel/server.crt
          key_file: /etc/otel/server.key
  otlp/grpc:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4419"
exporters:
    datadog:
        api:
          key: key
service:
  pipelines:
    metrics/1:
      receivers: [otlp/http, otlp/https, otlp/grpc_tls, otlp/grpc]
      exporters: [datadog]
```

----------------------------------------

TITLE: Create BackendTLSPolicy (YAML)
DESCRIPTION: This snippet creates a Kubernetes BackendTLSPolicy named `backend-tls` using the Gateway API. This policy configures TLS termination for the `secure-app` Service. It references the `backend-cert` ConfigMap created earlier for CA certificate validation and specifies `secure-app.example.com` as the hostname.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-security/securing-backend-traffic.md#_snippet_8

LANGUAGE: yaml
CODE:
```
kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1alpha3
kind: BackendTLSPolicy
metadata:
  name: backend-tls
spec:
  targetRefs:
  - group: ''
    kind: Service
    name: secure-app
  validation:
    caCertificateRefs:
    - name: backend-cert
      group: ''
      kind: ConfigMap
    hostname: secure-app.example.com
EOF
```

----------------------------------------

TITLE: Launching NGINX Open Source Container - Shell
DESCRIPTION: This command launches an NGINX Open Source instance in a Docker container. It names the container `mynginx1`, maps port 80 from the host to port 80 in the container, and runs the container in detached mode, allowing it to run in the background.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/installing-nginx/installing-nginx-docker.md#_snippet_15

LANGUAGE: sh
CODE:
```
docker run --name mynginx1 -p 80:80 -d nginx
```

----------------------------------------

TITLE: Shared SSL Certificate Configuration - Nginx
DESCRIPTION: This configuration shows how to use a certificate with multiple names to share a single IP address among several HTTPS servers. The ssl_certificate and ssl_certificate_key directives are placed at the http level to allow them inherit single memory copy across all servers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/terminating-ssl-http.md#_snippet_12

LANGUAGE: nginx
CODE:
```
ssl_certificate     common.crt;
ssl_certificate_key common.key;

server {
    listen          443 ssl;
    server_name     www.example.com;
    #...
}

server {
    listen          443 ssl;
    server_name     www.example.org;
    #...
}
```

----------------------------------------

TITLE: Reload NGINX Configuration (Shell)
DESCRIPTION: This command reloads the NGINX configuration without interrupting existing connections. It's essential to reload the configuration after making changes to apply the new settings.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/entra-id.md#_snippet_10

LANGUAGE: nginx
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Reloading Nginx Configuration
DESCRIPTION: This shell command gracefully reloads the Nginx configuration without interrupting existing connections. It sends the reload signal to the Nginx master process, which then restarts the worker processes with the new configuration. This requires Nginx to be installed and the nginx executable to be in the system's PATH.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/use-cases/monitoring/enable-nginx-oss-stub-status.md#_snippet_1

LANGUAGE: shell
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Deploying Coffee Application and Service (YAML)
DESCRIPTION: This YAML manifest defines a Kubernetes Deployment and Service for a simple coffee application. The Deployment ensures a single replica of the `nginxdemos/nginx-hello:plain-text` image is running, while the Service exposes the application on port 80, forwarding traffic to the container's port 8080.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-security/integrating-cert-manager.md#_snippet_5

LANGUAGE: yaml
CODE:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coffee
spec:
  replicas: 1
  selector:
    matchLabels:
      app: coffee
  template:
    metadata:
      labels:
        app: coffee
    spec:
      containers:
      - name: coffee
        image: nginxdemos/nginx-hello:plain-text
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: coffee
spec:
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: coffee
```

----------------------------------------

TITLE: SSL/TLS Termination Configuration on NGINX Plus
DESCRIPTION: This code snippet demonstrates how to configure SSL/TLS termination on NGINX Plus. It defines an upstream pool and a server block that listens on port 443 with SSL enabled, specifying the certificate and key files.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/migrate-hardware-adc/f5-big-ip-configuration.md#_snippet_5

LANGUAGE: nginx
CODE:
```
upstream ssl_test_pool {
        server 10.10.10.10:443;
        server 10.10.10.20:443;
   }

   server {
        listen 192.168.10.10:443 ssl;
        ssl_certificate     /etc/nginx/ssl/test.crt;
        ssl_certificate_key /etc/nginx/ssl/test.key;

        location / {
            proxy_pass http://ssl_test_pool;
        }
   }
```

----------------------------------------

TITLE: Configuring Upstream Group with Shared Memory Zone - Nginx
DESCRIPTION: This configuration snippet defines an upstream group named 'tomcat' with a shared memory zone. The zone directive enables sharing of the group's configuration and run-time state across worker processes. It is required for dynamic reconfiguration and other advanced features like health checks and live activity monitoring. The snippet also includes server definitions for the upstream.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_40

LANGUAGE: nginx
CODE:
```
# In the 'http' block
upstream tomcat {
    zone tomcat 64k;
    server 192.168.33.11:8080;
    server 192.168.33.12:8080;
    # ...
}
```

----------------------------------------

TITLE: Check Nginx Service Status (systemctl)
DESCRIPTION: This command checks the status of the nginx.service using systemctl.  It provides details on the service's current state (running, stopped, failed) and any recent logs.  This helps determine if Nginx itself is the source of the problem.
SOURCE: https://github.com/nginx/documentation/blob/main/content/controller/infrastructure/instances/manage-instances.md#_snippet_7

LANGUAGE: bash
CODE:
```
sudo systemctl status nginx.service
```

----------------------------------------

TITLE: Start NGINX service - Debian and Ubuntu
DESCRIPTION: This command starts the NGINX service. `sudo systemctl start nginx` initiates the Nginx web server process.
SOURCE: https://github.com/nginx/documentation/blob/main/content/controller/admin-guides/install/install-for-controller.md#_snippet_25

LANGUAGE: shell
CODE:
```
sudo systemctl start nginx
```

----------------------------------------

TITLE: Complete mTLS Configuration Example
DESCRIPTION: This snippet provides a complete example of configuring mTLS within the `mgmt` block.  It sets the resolver, SSL protocols, ciphers, client certificate, private key, trusted CA certificate, and verification depth. This is a comprehensive configuration for securing communication.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nginx-plus/usage-tracking/agentless-reporting.md#_snippet_3

LANGUAGE: nginx
CODE:
```
mgmt {
    resolver 10.0.0.1;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers   DEFAULT;

    ssl_certificate     client_cert.pem;
    ssl_certificate_key client_cert.key;

    ssl_trusted_certificate  trusted_ca_cert.crt;
    ssl_verify               on;
    ssl_verify_depth         2;
}
```

----------------------------------------

TITLE: Configuring mTLS in NGINX mgmt block
DESCRIPTION: This snippet demonstrates how to configure mutual TLS (mTLS) for secure communication between NGINX Plus and NGINX Instance Manager. It includes specifying SSL protocols, ciphers, client certificate, private key, trusted CA certificate, and SSL verification settings.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nginx-plus/usage-tracking/agentless-reporting.md#_snippet_1

LANGUAGE: nginx
CODE:
```
mgmt {
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers   DEFAULT;

    ssl_certificate     client_cert.pem;
    ssl_certificate_key client_cert.key;
    #...
}
```

----------------------------------------

TITLE: Configuring HTTP Headers for Original IP Logging in NGINX
DESCRIPTION: This NGINX HTTP configuration snippet demonstrates how to set the X-Real-IP and X-Forwarded-For headers using the $proxy_protocol_addr variable. This ensures that the client's original IP address, received via the PROXY protocol, is correctly passed to upstream HTTP servers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/using-proxy-protocol.md#_snippet_4

LANGUAGE: Nginx
CODE:
```
http {
    proxy_set_header X-Real-IP       $proxy_protocol_addr;
    proxy_set_header X-Forwarded-For $proxy_protocol_addr;
}
```

----------------------------------------

TITLE: Update Telemetry Configuration in MeshConfig (YAML)
DESCRIPTION: This YAML snippet demonstrates how to update the `meshconfig` resource to configure telemetry exporters and the sampler ratio at runtime. It configures an OTLP exporter with a specified host and port, and sets the sampler ratio to `0.1` (10% probability).
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/guides/monitoring-and-tracing.md#_snippet_4

LANGUAGE: yaml
CODE:
```
telemetry:
   exporters:
      otlp:
         host: otel-collector.example-namespace.svc
         port: 4317
   samplerRatio: 0.1
```

----------------------------------------

TITLE: Limiting Connections to Upstream Servers in NGINX Plus
DESCRIPTION: This snippet configures a limit on the number of active connections to an upstream server using the `max_conns` parameter in NGINX Plus. If the limit is reached, requests are placed in a queue with a maximum size of 100 and a timeout of 70 seconds. Clients receive an error if the queue is full or the timeout expires.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/http-load-balancer.md#_snippet_16

LANGUAGE: nginx
CODE:
```
upstream backend {
    server backend1.example.com max_conns=3;
    server backend2.example.com;
    queue 100 timeout=70;
}
```

----------------------------------------

TITLE: Reloading NGINX Configuration with systemctl (Bash)
DESCRIPTION: This command reloads the NGINX configuration without interrupting active connections or stopping the service. It's the recommended method for applying most configuration changes as it ensures zero downtime. This command leverages `systemd` for service management, making it suitable for modern Linux distributions.
SOURCE: https://github.com/nginx/documentation/blob/main/templates/style-guide.md#_snippet_2

LANGUAGE: bash
CODE:
```
sudo systemctl reload nginx
```

----------------------------------------

TITLE: Starting NGINX Service on NGINX Controller
DESCRIPTION: This command starts the NGINX service on a system running NGINX Controller. It is used to re-enable NGINX after it has been stopped, typically following maintenance or troubleshooting steps to restore normal operation.
SOURCE: https://github.com/nginx/documentation/blob/main/content/controller/releases/release-notes.md#_snippet_9

LANGUAGE: bash
CODE:
```
systemctl start nginx
```

----------------------------------------

TITLE: NGINX Configuration with Strict Policy
DESCRIPTION: This snippet showcases a minimal Nginx configuration enabling App Protect with the strict policy. It enables App Protect, specifies the `app_protect_strict_policy`, enables security logging, and configures a proxy pass.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/configuration-guide/configuration.md#_snippet_2

LANGUAGE: nginx
CODE:
```
location / {

        # NGINX App Protect WAF
        app_protect_enable on;
        app_protect_policy_file app_protect_strict_policy;
        app_protect_security_log_enable on;
        app_protect_security_log log_all stderr;

        proxy_pass http://127.0.0.1:8080/;
    }
```

----------------------------------------

TITLE: Configuring Strict-Transport-Security header in Nginx
DESCRIPTION: This snippet shows how to configure the Strict-Transport-Security header in Nginx to force browsers to access the site only via HTTPS. It sets the max-age to 31536000 seconds (1 year) and includes subdomains, ensuring that all subdomains are also accessed via HTTPS.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/policies/proxy-response-headers.md#_snippet_0

LANGUAGE: nginx
CODE:
```
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" [always]
```

----------------------------------------

TITLE: Configuring NGINX Server with Multiple Locations for Static Files and Proxying
DESCRIPTION: This NGINX `server` block defines two `location` contexts. The first `location /images/` serves static files from the `/data` directory for URIs starting with `/images/`. The second `location /` acts as a fallback, proxying all other requests to `http://www.example.com`. This demonstrates how NGINX can handle different request types within a single virtual server.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/web-server.md#_snippet_7

LANGUAGE: nginx
CODE:
```
server {
    location /images/ {
        root /data;
    }

    location / {
        proxy_pass http://www.example.com;
    }
}
```

----------------------------------------

TITLE: Reload NGINX Configuration
DESCRIPTION: This command reloads the NGINX configuration, applying any changes made to the configuration files without requiring a full restart of the NGINX service. This minimizes downtime.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/admin-guide/authentication/oidc/microsoft-entra-setup.md#_snippet_6

LANGUAGE: bash
CODE:
```
sudo nginx -s reload
```

----------------------------------------

TITLE: Illustrating NGINX Configuration Contexts and Virtual Servers
DESCRIPTION: This comprehensive example demonstrates the hierarchical structure of an NGINX configuration file using multiple top-level contexts: `main`, `events`, `http`, and `stream`. It shows how `server` blocks define virtual servers within `http` and `stream` contexts, and how `location` blocks further refine HTTP request processing for specific URIs.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/basic-functionality/managing-configuration-files.md#_snippet_2

LANGUAGE: nginx
CODE:
```
user nobody; # a directive in the 'main' context

events {
    # configuration of connection processing
}

http {
    # Configuration specific to HTTP and affecting all virtual servers

    server {
        # configuration of HTTP virtual server 1
        location /one {
            # configuration for processing URIs starting with '/one'
        }
        location /two {
            # configuration for processing URIs starting with '/two'
        }
    }

    server {
        # configuration of HTTP virtual server 2
    }
}

stream {
    # Configuration specific to TCP/UDP and affecting all virtual servers
    server {
        # configuration of TCP virtual server 1
    }
}
```

----------------------------------------

TITLE: Configuring Upstream Group for Load Balancing Nginx
DESCRIPTION: This snippet configures an upstream group named 'nodejs' containing two Node.js application servers listening on port 8080.  This group is used for load balancing between the two specified servers. The 'upstream' block defines the backend servers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/node-js.md#_snippet_14

LANGUAGE: nginx
CODE:
```
# In the 'http' block
upstream nodejs {
    server 192.168.33.11:8080;
    server 192.168.33.12:8080;
}
```

----------------------------------------

TITLE: Setting up a basic HTTPS Server with Nginx
DESCRIPTION: This snippet demonstrates the basic configuration for an HTTPS server in Nginx. It includes the `listen` directive with the `ssl` parameter, the server name, and the paths to the SSL certificate and private key files. It also sets the supported SSL/TLS protocols and cipher suites.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/terminating-ssl-http.md#_snippet_0

LANGUAGE: nginx
CODE:
```
server {
    listen              443 ssl;
    server_name         www.example.com;
    ssl_certificate     www.example.com.crt;
    ssl_certificate_key www.example.com.key;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    #...
}
```

----------------------------------------

TITLE: Reload NGINX Configuration
DESCRIPTION: This shell command shows how to reload the NGINX configuration after making changes to the configuration files.
This is necessary to apply the changes without restarting the NGINX server.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/oidc-njs/onelogin.md#_snippet_5

LANGUAGE: Shell
CODE:
```
sudo nginx -s reload
```

----------------------------------------

TITLE: Reloading NGINX configuration
DESCRIPTION: This command reloads the NGINX configuration without requiring a full restart. It ensures that any changes made to the configuration file are applied without interrupting service.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/lua.md#_snippet_9

LANGUAGE: shell
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Provisioning Azure Upstream Application Servers with Terraform
DESCRIPTION: This Terraform configuration provisions a dedicated subnet and two Linux virtual machines to act as upstream application servers in the primary region. Each VM is configured with a network interface and includes a `custom_data` script to install NGINX, create a simple `index.html` page, and start the NGINX service, preparing them to serve content for the NGINXaaS deployment.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/disaster-recovery.md#_snippet_4

LANGUAGE: HCL (Terraform)
CODE:
```
resource "azurerm_subnet" "primary_subnet_2" {
  # ...
  virtual_network_name = azurerm_virtual_network.primary_virtual_network.name
  address_prefixes     = [cidrsubnet(var.vnet_addr_space, 8, 1)] # - 10.0.1.0/24
}

resource "azurerm_network_interface" "app_server_nic" {
  # ...
  count               = 2
  name                = "nginx-vm${count.index + 1}-nic"
  location            = "eastus"

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.upstreams.id
    private_ip_address_allocation = "Dynamic"
  }
}

resource "azurerm_linux_virtual_machine" "nginx_upstream_vm" {
  # ...
  count               = 2
  name                = "nginx-upstream${count.index + 1}"

  network_interface_ids = [
    azurerm_network_interface.app_server_nic[count.index].id,
  ]

  source_image_reference {
    publisher = "Canonical"
    offer     = "0001-com-ubuntu-server-jammy"
    sku       = "22_04-lts-gen2"
    version   = "latest"
  }

  custom_data = base64encode(<<-EOF
    #!/bin/bash
    sudo apt update
    sudo apt install nginx -y
    VM_ID=$(hostname)
    IP=$(ip addr show $(ip route show default | awk '/default/ {print $5}') | awk '/inet / {print $2}' | cut -d/ -f1)
    echo "Hello from $VM_ID: $IP" | sudo tee /var/www/html/index.html
    sudo systemctl enable nginx
    sudo systemctl restart nginx
  EOF
  )
}
```

LANGUAGE: Bash
CODE:
```
#!/bin/bash
sudo apt update
sudo apt install nginx -y
VM_ID=$(hostname)
IP=$(ip addr show $(ip route show default | awk '/default/ {print $5}') | awk '/inet / {print $2}' | cut -d/ -f1)
echo "Hello from $VM_ID: $IP" | sudo tee /var/www/html/index.html
sudo systemctl enable nginx
sudo systemctl restart nginx
```

----------------------------------------

TITLE: Building NGINX Image with Custom Content and Configuration (Dockerfile)
DESCRIPTION: This Dockerfile defines a custom NGINX image. It starts from the official NGINX base image, removes the default NGINX configuration file to prevent conflicts, and then copies custom content to /usr/share/nginx/html and custom configuration files to /etc/nginx from the build context.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/installing-nginx/installing-nginx-docker.md#_snippet_23

LANGUAGE: dockerfile
CODE:
```
FROM nginx
RUN rm /etc/nginx/conf.d/default.conf
COPY content /usr/share/nginx/html
COPY conf /etc/nginx
```

----------------------------------------

TITLE: Validate NGINX Configuration (Shell)
DESCRIPTION: This command validates the NGINX configuration files for syntax errors and ensures they are correctly structured before applying them. It's a crucial step to prevent service interruptions due to misconfigurations.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/admin-guide/authentication/oidc/getting-started.md#_snippet_0

LANGUAGE: Shell
CODE:
```
sudo nginx -t
```

----------------------------------------

TITLE: Testing NGINX Configuration
DESCRIPTION: This shell command tests the Nginx configuration file for syntax errors. It is used to verify that the configuration file is valid before reloading Nginx. Requires `sudo` privileges.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/http-substitutions-filter.md#_snippet_6

LANGUAGE: shell
CODE:
```
nginx -t
```

----------------------------------------

TITLE: Rewriting URIs with Regular Expressions and `break` Flag in NGINX
DESCRIPTION: This configuration snippet illustrates how to rewrite a request URI using a regular expression and the `rewrite` directive. It captures part of the original URI (`(.*)`) and uses it to construct a new URI (`/show?user=$1`), with the `break` flag stopping further `rewrite` processing within the current `location` context.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/web-server.md#_snippet_10

LANGUAGE: nginx
CODE:
```
location /users/ {
    rewrite ^/users/(.*)$ /show?user=$1 break;
}
```

----------------------------------------

TITLE: NGINX Full Configuration for Enhanced Load Balancing
DESCRIPTION: This Nginx configuration provides enhanced load balancing for a Node.js application. It includes features such as HTTP to HTTPS redirection, load balancing using upstream groups, sticky sessions, caching, WebSocket support, health checks, and secured API access. It utilizes directives like `proxy_pass`, `proxy_cache`, `upstream`, `location`, `health_check`, `sticky`, and `ssl_*` to manage traffic and ensure high availability.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/node-js.md#_snippet_37

LANGUAGE: nginx
CODE:
```
proxy_cache_path /tmp/NGINX_cache/ keys_zone=backcache:10m;

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

match nodejs_check {
    status 200;
    header Content-Type ~ "text/html";
    body ~ "Hello world";
}

upstream nodejs {
    # Health-monitored upstream groups must have a zone defined
    zone nodejs 64k;

    # List of Node.js application servers
    server 192.168.33.11:8080 slow_start=30s;
    server 192.168.33.12:8080 slow_start=30s;

    # Session persistence using sticky cookie
    sticky cookie srv_id expires=1h domain=.example.com path=/;
}

server {
    listen 80;
    server_name example.com;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl;
    http2  on;

    server_name example.com;

    # Required for NGINX Plus to provide extended status information
    status_zone nodejs;

    ssl_certificate            /etc/nginx/ssl/certificate-name;
    ssl_certificate_key        /etc/nginx/ssl/private-key;
    ssl_session_cache          shared:SSL:1m;
    ssl_prefer_server_ciphers  on;

    # Return a 302 redirect to '/webapp/' when user requests '/'
    location = / {
        return 302 /webapp/;
    }

    # Load balance requests for '/webapp/' across Node.js app servers
    location /webapp/ {
        proxy_pass http://nodejs;
        proxy_cache backcache;
        # Set up active health checks
        health_check match=nodejs_check;
    }

    # WebSocket configuration
    location /wstunnel/ {
        proxy_pass https://nodejs;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # Secured access to the NGINX Plus API
    location /api {
        api write=on;
        allow 127.0.0.1; # Permit access from localhost
        deny all;        # Deny access from everywhere else
    }
}
```

----------------------------------------

TITLE: Configuring HTTPS Virtual Server - Nginx
DESCRIPTION: This Nginx configuration defines a virtual server that listens for HTTPS requests on port 443 for the domain `company.com`. It specifies the SSL certificate and private key files, and sets the SSL protocol to TLSv1.2. This block should reside within the `http` block.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-e-business-suite.md#_snippet_17

LANGUAGE: nginx
CODE:
```
# In the 'http' block
server {
    listen 443 ssl;
    server_name company.com;

    ssl_certificate     /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;
    ssl_protocols       TLSv1.2;
}
```

----------------------------------------

TITLE: Reload Nginx Configuration (ModSecurity)
DESCRIPTION: This command reloads the Nginx configuration after the ModSecurity settings have been added to the proxy configuration (proxy.conf).
SOURCE: https://github.com/nginx/documentation/blob/main/content/modsec-waf/admin-guide/nginx-plus-modsecurity-waf-installation-logging.md#_snippet_17

LANGUAGE: none
CODE:
```
sudo nginx -s reload
```

----------------------------------------

TITLE: Defining a Virtual Server in NGINX
DESCRIPTION: This snippet demonstrates the basic structure for defining a virtual server within the NGINX configuration. The `server` directive is placed inside the `http` context and acts as a container for server-specific configurations, such as listening ports and server names.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/web-server.md#_snippet_0

LANGUAGE: nginx
CODE:
```
http {
    server {
        # Server configuration
    }
}
```

----------------------------------------

TITLE: Renew Kubernetes Certificates - Bash
DESCRIPTION: This command renews all Kubernetes certificates using the `kubeadm` tool. It's a key step in the workaround for expired Kubernetes kubelet certificates.
SOURCE: https://github.com/nginx/documentation/blob/main/content/controller/releases/adc/adc-release-notes-3.20.md#_snippet_2

LANGUAGE: bash
CODE:
```
sudo kubeadm alpha certs renew all
```

----------------------------------------

TITLE: Reloading NGINX Configuration via Service Command
DESCRIPTION: These commands reload the NGINX configuration without downtime.  The first uses the nginx command-line tool, and the second uses the service command.  Both achieve the same result: applying the new configuration.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/microsoft-exchange.md#_snippet_23

LANGUAGE: none
CODE:
```
root# service nginx reload
```

----------------------------------------

TITLE: Reloading NGINX Service
DESCRIPTION: This bash command reloads the NGINX service, applying any changes made to its configuration files. It ensures that new settings, such as updated log directives, take effect without stopping the NGINX server entirely.
SOURCE: https://github.com/nginx/documentation/blob/main/content/amplify/nginx-amplify-agent/configuring-metric-collection.md#_snippet_5

LANGUAGE: bash
CODE:
```
# service nginx reload
```

----------------------------------------

TITLE: Test Nginx Configuration
DESCRIPTION: This command tests the Nginx configuration file (/etc/nginx/nginx.conf) for syntax errors.  It ensures that the configuration is valid before reloading or restarting Nginx.
SOURCE: https://github.com/nginx/documentation/blob/main/content/modsec-waf/admin-guide/nginx-plus-modsecurity-waf-installation-logging.md#_snippet_5

LANGUAGE: none
CODE:
```
$ sudo nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
```

----------------------------------------

TITLE: Testing NGINX Configuration Syntax (Shell)
DESCRIPTION: This shell command snippet shows how to use 'nginx -t' to test the syntax and validity of the NGINX configuration file. Running this command before reloading ensures that any updates are syntactically correct, preventing potential service interruptions.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_10

LANGUAGE: none
CODE:
```
root# nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
```

----------------------------------------

TITLE: Configuring NGINX Server Listen Address and Port
DESCRIPTION: This configuration snippet shows how to specify the IP address and port on which an NGINX virtual server listens for incoming requests. The `listen` directive is used within the `server` block to bind the server to a particular network interface (127.0.0.1) and port (8080).
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/web-server.md#_snippet_1

LANGUAGE: nginx
CODE:
```
server {
    listen 127.0.0.1:8080;
    # Additional server configuration
}
```

----------------------------------------

TITLE: Reload Nginx Configuration
DESCRIPTION: This command reloads the Nginx configuration without interrupting existing connections. It's necessary after making changes to the Nginx configuration files to apply the new settings.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/infrastructure/enable-create-credentials.md#_snippet_1

LANGUAGE: bash
CODE:
```
sudo nginx -s reload
```

----------------------------------------

TITLE: Testing Nginx configuration
DESCRIPTION: This shell command tests the Nginx configuration file for syntax errors.  It verifies that the configuration file is valid before reloading Nginx.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/encrypted-session.md#_snippet_7

LANGUAGE: Shell
CODE:
```
nginx -t
```

----------------------------------------

TITLE: Configuring HTTP to HTTPS Redirection Nginx
DESCRIPTION: This snippet configures an HTTP server block, listening on port 80 for 'example.com'. It redirects all HTTP requests to the HTTPS version of the site using a 301 redirect. The `location` block handles the redirection.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/node-js.md#_snippet_13

LANGUAGE: nginx
CODE:
```
# In the 'http' block
server {
     listen 80;
     server_name example.com;

     proxy_http_version 1.1;
     proxy_set_header Host $host;
     proxy_set_header Connection "";

     # Redirect all HTTP requests to HTTPS
     location / {
         return 301 https://$server_name$request_uri;
     }
 }
```

----------------------------------------

TITLE: Reloading Nginx Configuration
DESCRIPTION: This command gracefully reloads the Nginx configuration without interrupting service. This applies the changes made to the configuration file without requiring a full restart of the Nginx server.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/brotli.md#_snippet_11

LANGUAGE: shell
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Reloading NGINX configuration
DESCRIPTION: This command gracefully reloads the NGINX configuration without interrupting existing connections. It applies changes made to the configuration file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/passenger-open-source.md#_snippet_9

LANGUAGE: shell
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Testing Nginx Configuration
DESCRIPTION: This command tests the Nginx configuration file for syntax errors. It is recommended to run this command after making changes to the configuration.  It validates the `nginx.conf` file and reports any errors.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/node-js.md#_snippet_10

LANGUAGE: none
CODE:
```
root# nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
```

----------------------------------------

TITLE: Configuring Upstream and Server blocks Nginx
DESCRIPTION: This Nginx configuration defines upstream blocks for two applications (app1 and app2) and a server block to handle incoming requests.  It sets up load balancing for the applications using proxy_pass and configures locations for different resources, including an API and status dashboard.  The upstream directives require replacing the placeholder IP addresses with the actual IP addresses of your application servers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/setting-up-nginx-demo-environment.md#_snippet_7

LANGUAGE: nginx
CODE:
```
# in the 'http' context
   upstream app1 {
       server <internal IP address of NGINX Open Source instance serving App 1>;
       # 'server' directives for additional App 1 servers, if using
       zone app1 64k;
   }

   upstream app2 {
       server <internal IP address of NGINX Open Source instance serving App 2>;
       # 'server' directives for additional App 2 servers, if using
       zone app2 64k;
   }

   server {
       listen 80;
       status_zone backend;
       root /usr/share/nginx/html;

       location / {
           # directives for serving the site's HTML landing page
       }

       location /application1 {
           proxy_set_header Host $host;
           proxy_set_header X-Forwarded-For $remote_addr;
           proxy_pass http://app1/;
       }

       location /application2 {
           proxy_set_header Host $host;
           proxy_set_header X-Forwarded-For $remote_addr;
           proxy_pass http://app2/;
       }

       location /api {
           api write=on;
           # directives to control access, such as 'allow' and 'deny'
       }

       location = /dashboard.html {
           root /usr/share/nginx/html;
       }

       location = /status.html {  # redirect requests that are made to pre-R14 dashboard
           return 301 /dashboard.html;
       }
   }
```

----------------------------------------

TITLE: SSL/TLS Termination in NGINX Plus
DESCRIPTION: This snippet demonstrates SSL/TLS termination in NGINX Plus.  It configures the server to listen on port 443 with SSL enabled, and specifies the SSL certificate and key files.  The ssl_certificate and ssl_certificate_key directives point to the certificate and key files, respectively.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/migrate-hardware-adc/citrix-adc-configuration.md#_snippet_1

LANGUAGE: nginx
CODE:
```
server {
    listen 10.0.0.98:443 ssl;
    ssl_certificate     test.crt;
    ssl_certificate_key test.key;
    #...
}
```

----------------------------------------

TITLE: Verify NGINX Configuration
DESCRIPTION: This command verifies the NGINX configuration file for any syntax errors before applying the changes. It helps to prevent service disruptions due to incorrect configurations.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/admin-guide/authentication/oidc/microsoft-entra-setup.md#_snippet_5

LANGUAGE: bash
CODE:
```
sudo nginx -t
```

----------------------------------------

TITLE: Reload Nginx Configuration
DESCRIPTION: This command reloads the Nginx configuration. This is necessary to apply any changes made to the nginx.conf file.  It uses the `nginx` command with the `-s reload` option to signal the Nginx master process to reload the configuration without downtime.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/use-cases/monitoring/enable-nginx-plus-api.md#_snippet_1

LANGUAGE: shell
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Test HTTPS Connection with OpenSSL (Shell)
DESCRIPTION: This command tests HTTPS connectivity to the NGINX Plus server using `openssl s_client`. It sends a 'GET /' request and displays the SSL/TLS cipher negotiated during the connection. This allows verification that the server is accessible and uses the expected cipher.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/fips-compliance-nginx-plus.md#_snippet_7

LANGUAGE: shell
CODE:
```
(echo "GET /" ; sleep 1) | openssl s_client -connect <NGINX-Plus-address>:443
```

----------------------------------------

TITLE: Proxying requests to HTTP server with URI in Nginx
DESCRIPTION: This example demonstrates how to configure NGINX to proxy requests to an HTTP server, replacing the matched location with a specified URI. The `proxy_pass` directive is used within a `location` block to forward requests to the defined server and URI. When a request matches the location, the URI part of the request is replaced with the URI specified in `proxy_pass` before being sent to the proxied server.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/reverse-proxy.md#_snippet_0

LANGUAGE: nginx
CODE:
```
location /some/path/ {
    proxy_pass http://www.example.com/link/;
}
```

----------------------------------------

TITLE: Configuring NGINX HTTPS Server with Load Balancing and API
DESCRIPTION: Configures an NGINX server block for HTTPS traffic on port 443, enabling HTTP/2. It includes SSL certificate settings, a status zone for monitoring, and defines multiple location blocks for load balancing `/webapp/` to the `jboss` upstream with health checks and caching, redirecting the root path, handling WebSocket tunnels, and securing access to the NGINX Plus API.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_45

LANGUAGE: nginx
CODE:
```
server {
    listen 443 ssl;
    http2  on;

    server_name example.com;

    # Required for live activity monitoring of HTTPS traffic
    status_zone jboss;
    ssl_certificate            /etc/nginx/ssl/<certificate-name>;
    ssl_certificate_key        /etc/nginx/ssl/<private-key>;
    ssl_session_cache          shared:SSL:1m;
    ssl_prefer_server_ciphers  on;

    # Load balance requests for '/webapp/' across Wildfly application servers
    location /webapp/ {
        proxy_pass http://jboss;
        proxy_cache backcache;

        # Active health checks
        health_check match=jboss_check;
    }

    # Return a 302 redirect to '/webapp/' when user requests '/'
    location = / {
        return 302 /webapp/;
    }

    # WebSocket configuration
    location /wstunnel/ {
        proxy_pass http://jboss;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # Secured access to the NGINX Plus API
    location /api {
        api write=on;
        allow 127.0.0.1; # Permit access from localhost
        deny all;        # Deny access from everywhere else;
    }
}
```

----------------------------------------

TITLE: Configuring DNS Resolver and Upstream with Resolve - Nginx
DESCRIPTION: This configuration snippet configures the DNS resolver and enables dynamic resolution of the upstream server's domain name. The 'resolver' directive specifies the IP address of the DNS server. The 'resolve' parameter in the 'server' directive instructs NGINX Plus to periodically re-resolve the domain name using DNS. The zone directive creates shared memory for upstream configuration.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_42

LANGUAGE: nginx
CODE:
```
# In the 'http' block
resolver <IP-address-of-DNS-server>;

upstream tomcat {
    zone tomcat 64k;
    server example.com resolve;
}
```

----------------------------------------

TITLE: Configure Server Block with SSL in NGINX
DESCRIPTION: This code configures a server block to listen on port 443 with SSL enabled. It specifies the SSL certificate and key files, and proxies requests to a backend application running on `http://127.0.0.1:8080`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/auth0.md#_snippet_6

LANGUAGE: nginx
CODE:
```
http {

    # ...

    server {
        listen      443 ssl;
        server_name demo.example.com;

        ssl_certificate     /etc/ssl/certs/fullchain.pem;
        ssl_certificate_key /etc/ssl/private/key.pem;

        location / {

            # ...

            proxy_pass http://127.0.0.1:8080;
        }
    }
    # ...
}
```

----------------------------------------

TITLE: Create Gateway and HTTPRoute for the application
DESCRIPTION: Creates a Gateway and HTTPRoute resource to route traffic to the 'coffee' application. The Gateway listens on port 80, and the HTTPRoute routes traffic for the 'cafe.example.com' hostname and '/coffee' path to the 'coffee' service.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/monitoring/tracing.md#_snippet_11

LANGUAGE: yaml
CODE:
```
kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: cafe
spec:
  gatewayClassName: nginx
  listeners:
  - name: http
    port: 80
    protocol: HTTP
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: coffee
spec:
  parentRefs:
  - name: cafe
  hostnames:
  - "cafe.example.com"
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /coffee
    backendRefs:
    - name: coffee
      port: 80
EOF
```

----------------------------------------

TITLE: Testing and Reloading NGINX Configuration
DESCRIPTION: This snippet demonstrates how to test the NGINX configuration for syntax errors and then reload NGINX to apply the changes.  This command ensures that the updated configuration is valid before being applied, preventing service disruptions.  Requires `sudo` privileges.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/monitoring/live-activity-monitoring.md#_snippet_5

LANGUAGE: shell
CODE:
```
sudo nginx -t && sudo nginx -s reload
```

----------------------------------------

TITLE: Testing Nginx Configuration Syntax (Shell)
DESCRIPTION: This command tests the Nginx configuration file for syntactic validity. It's recommended to run this command after any changes to the configuration.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_10

LANGUAGE: none
CODE:
```
root# nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
```

----------------------------------------

TITLE: Complete Nginx Configuration Example
DESCRIPTION: This snippet provides a complete example of an Nginx configuration, including HTTP and Stream contexts, integrating the Prometheus module, defining upstreams, and setting up the `/metrics` endpoint for Prometheus. It demonstrates how to load the `ngx_http_js_module`, configure dynamic key-value replacements, and disable specific metrics using the `$prom_metrics_disabled` variable.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/prometheus-njs.md#_snippet_15

LANGUAGE: nginx
CODE:
```
load_module modules/ngx_http_js_module.so;

#...

http {

    js_import /usr/share/nginx-plus-module-prometheus/prometheus.js;

    subrequest_output_buffer_size 32k;

    upstream backend {
        zone   backend 64k;
        server backend1.example.com;
        server backend2.example.com;
    }

    server {
        listen 80;

        location / {
            proxy_pass http://backend;
        }

        location /api {
            api;
        }

        location = /metrics {
            set $prom_keyval           "http_upstream_keyval";
            set $prom_keyval_stream    "stream_upstream_keyval";
            set $prom_metrics_disabled "stream/upstreams, resolvers";
            js_content                 prometheus.metrics;
        }

        status_zone backend_zone;
    }
}

stream {

    keyval_zone zone=stream_keyval:32k;

    upstream stream_backend {
        zone   stream_backend 64k;
        server backend1.example.com:12345;
        server backend2.example.com:12345;
    }

    server {
        listen 12345;

        proxy_pass  stream_backend;
        status_zone backend_stream_zone;
}

```

----------------------------------------

TITLE: Redirecting HTTP to HTTPS in NGINX
DESCRIPTION: This NGINX server block is configured to listen for HTTP requests on port 80 for 'example.com' and permanently redirect them (HTTP 301) to the corresponding HTTPS URL. This ensures that all client traffic is secured via SSL/TLS, enhancing security and improving search engine optimization. The 'return' directive is crucial for this redirection, and should be omitted if SSL/TLS is not in use.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_14

LANGUAGE: nginx
CODE:
```
# In the 'http' block
server {
    listen 80;
    server_name example.com;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}
```

----------------------------------------

TITLE: Configuring NGINX HTTP to HTTPS Redirection
DESCRIPTION: Sets up an NGINX server block listening on port 80 for `example.com`. Its primary purpose is to redirect all incoming HTTP requests to their corresponding HTTPS URLs using a 301 permanent redirect, enforcing secure communication.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_44

LANGUAGE: nginx
CODE:
```
server {
    listen 80;
    server_name example.com;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}
```

----------------------------------------

TITLE: Checking NGINX Configuration Syntax
DESCRIPTION: This shell command is used to check the syntactic validity of the NGINX Plus configuration file. It helps identify any errors before reloading the server, preventing service interruptions.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/installing-nginx/installing-nginx-plus.md#_snippet_33

LANGUAGE: shell
CODE:
```
nginx -t
```

----------------------------------------

TITLE: Test NGINX Configuration
DESCRIPTION: This shell command tests the NGINX configuration file for syntax errors before reloading the configuration.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/geoip.md#_snippet_5

LANGUAGE: shell
CODE:
```
nginx -t
```

----------------------------------------

TITLE: Testing Nginx Configuration
DESCRIPTION: This command tests the Nginx configuration file for syntax errors before reloading the configuration. This prevents service disruptions caused by invalid configurations.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/brotli.md#_snippet_9

LANGUAGE: shell
CODE:
```
nginx -t
```

----------------------------------------

TITLE: TCP/UDP Load Balancing Example NGINX
DESCRIPTION: This snippet provides a comprehensive configuration example for TCP and UDP load balancing with NGINX.  It includes upstream definitions, server configurations for TCP and UDP, and proxy settings.  It demonstrates the use of the `stream` block for non-HTTP traffic.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/tcp-udp-load-balancer.md#_snippet_24

LANGUAGE: nginx
CODE:
```
stream {
    upstream stream_backend {
        least_conn;
        server backend1.example.com:12345 weight=5;
        server backend2.example.com:12345 max_fails=2 fail_timeout=30s;
        server backend3.example.com:12345 max_conns=3;
    }

    upstream dns_servers {
        least_conn;
        server 192.168.136.130:53;
        server 192.168.136.131:53;
        server 192.168.136.132:53;
    }

    server {
        listen        12345;
        proxy_pass    stream_backend;
        proxy_timeout 3s;
        proxy_connect_timeout 1s;
    }

    server {
        listen     53 udp;
        proxy_pass dns_servers;
    }

    server {
        listen     12346;
        proxy_pass backend4.example.com:12346;
    }
}
```

----------------------------------------

TITLE: Redirecting HTTP to HTTPS (Nginx)
DESCRIPTION: This snippet configures a server block to permanently redirect HTTP requests received on port 80 to the HTTPS server within the 'http' block. It uses a `return` directive with a 301 redirect to `https://$host$request_uri`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/microsoft-exchange.md#_snippet_37

LANGUAGE: nginx
CODE:
```
# In the 'http' block
server {
    listen 80;
    location / {
        return 301 https://$host$request_uri;
    }
}
```

----------------------------------------

TITLE: Complete Nginx Configuration
DESCRIPTION: This complete Nginx configuration sets up load balancing, session persistence, SSL, and health checks.  It includes defining an upstream block with a shared memory zone, backend servers, and cookie-based session persistence. It also configures a server block listening on port 443 with SSL, sets the 'Host' header, proxies requests to the upstream, enables health checks, and sets the HTTP version to 1.1.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/migrate-hardware-adc/citrix-adc-configuration.md#_snippet_13

LANGUAGE: nginx
CODE:
```
upstream myapp {
    zone myapp 64k;
    server 10.0.0.100:80;
    server 10.0.0.101:80;
    server 10.0.0.102:80;
    sticky cookie mysession expires=1h;
}

server {
    listen 10.0.0.98:443 ssl default_server;
    ssl_certificate     test.crt;
    ssl_certificate_key test.key;
    proxy_set_header Host $host;
    location / {
        proxy_pass http://myapp;
        health_check;
        proxy_http_version 1.1;
    }
}
```

----------------------------------------

TITLE: Filter Control Plane Logs for Errors
DESCRIPTION: This command retrieves logs from the `nginx-gateway` container, then filters the logs to show only lines that contain the word `error`. Replace `<ngf-pod-name>` with the actual name of the NGINX Gateway Fabric pod.  This helps to quickly identify error messages within the control plane logs.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/monitoring/troubleshooting.md#_snippet_5

LANGUAGE: shell
CODE:
```
kubectl -n nginx-gateway logs <ngf-pod-name> -c nginx-gateway | grep error
```

----------------------------------------

TITLE: Complete Gzip Configuration in NGINX Server Block
DESCRIPTION: This snippet shows a complete gzip configuration within a server block, including enabling gzip, setting MIME types, configuring proxied requests, and setting the minimum compression length.  This configuration should be placed within the http, server, or location context.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/compression.md#_snippet_4

LANGUAGE: nginx
CODE:
```
server {
    gzip on;
    gzip_types      text/plain application/xml;
    gzip_proxied    no-cache no-store private expired auth;
    gzip_min_length 1000;
    ...
}
```

----------------------------------------

TITLE: Redirecting HTTP to HTTPS Nginx
DESCRIPTION: This snippet configures a virtual server listening on port 80 for HTTP traffic and redirects all requests to the HTTPS server. It ensures all unencrypted traffic is redirected to the secure HTTPS version of the website. It needs to be placed inside the 'http' block.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-weblogic-server.md#_snippet_15

LANGUAGE: nginx
CODE:
```
# In the 'http' block
server {
    listen 80;
    server_name example.com;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}
```

----------------------------------------

TITLE: Port-Forwarding to Productpage Service
DESCRIPTION: This command creates a local port forward to the `productpage` service running within the Kubernetes cluster. This allows you to access the service from your local machine via `localhost:9080`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/tutorials/deploy-example-app.md#_snippet_3

LANGUAGE: bash
CODE:
```
kubectl port-forward svc/productpage 9080
```

----------------------------------------

TITLE: Restarting NGINX Web Server Service - Bash
DESCRIPTION: This command restarts the NGINX web server service. It is necessary to restart NGINX after modifying its configuration files, including those related to OIDC, to load the updated settings and ensure proper operation.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/releases/release-notes.md#_snippet_1

LANGUAGE: bash
CODE:
```
sudo systemctl restart nginx
```

----------------------------------------

TITLE: Deploying a Secure Application with Kubernetes
DESCRIPTION: This snippet deploys a secure application within a Kubernetes environment. It includes a Deployment, Service, ConfigMap, and Secret resource to configure an Nginx instance that only accepts HTTPS traffic on port 8443. The secret contains the TLS certificate and key used by the application.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-security/securing-backend-traffic.md#_snippet_0

LANGUAGE: yaml
CODE:
```
kubectl apply -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: secure-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: secure-app
  template:
    metadata:
      labels:
        app: secure-app
    spec:
      containers:
        - name: secure-app
          image: nginxinc/nginx-unprivileged:latest
          ports:
            - containerPort: 8443
          volumeMounts:
            - name: secret
              mountPath: /etc/nginx/ssl
              readOnly: true
            - name: config-volume
              mountPath: /etc/nginx/conf.d
      volumes:
        - name: secret
          secret:
            secretName: app-tls-secret
        - name: config-volume
          configMap:
            name: secure-config
---
apiVersion: v1
kind: Service
metadata:
  name: secure-app
spec:
  ports:
    - port: 8443
      targetPort: 8443
      protocol: TCP
      name: https
  selector:
    app: secure-app
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: secure-config
data:
  app.conf: |-
    server {
      listen 8443 ssl;
      listen [::]:8443 ssl;

      server_name secure-app.example.com;

      ssl_certificate /etc/nginx/ssl/tls.crt;
      ssl_certificate_key /etc/nginx/ssl/tls.key;

      default_type text/plain;

      location / {
        return 200 "hello from pod secure-app\n";
      }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: app-tls-secret
type: Opaque
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQwRENDQXJpZ0F3SUJBZ0lVVDQwYTFYd3doUHVBdDJNMkdZZUovYXluZlFBd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1JqRWZNQjBHQTFVRUF3d1djMlZqZFhKbExXRndjQzVsZUdGdGNHeGxMbU52YlRFTE1Ba0dBMVVFQmhNQwpWVk14RmpBVUJnTlZCQWNNRFZOaGJpQkdjbUZ1YzJselkyOHdIaGNOTWpRd01URTRNVGd3TVRBeFdoY05NalV3Ck1URTNNVGd3TVRBeFdqQi9NUXN3Q1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ0F3S1EyRnNhV1p2Y201cFlURVcKTUJRR0ExVUVCd3dOVTJGdUlFWnlZVzV6YVhOamJ6RU9NQXdHQTFVRUNnd0ZUa2RKVGxneEVqQVFCZ05WQkFzTQpDVTVIU1U1WUlFUmxkakVmTUIwR0ExVUVBd3dXYzJWamRYSmxMV0Z3Y0M1bGVHRnRjR3hsTG1OdmJUQ0NBU0l3CkRRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMeUx0eURNbTZ4M0ZEUFJsOGZ0azNweCtrRWQKYTVpTGZOQ3lDbUVjYktBQVBDNEhZckl5b1B5QXpSTlJCMWErekE0UTlrbzJZRG5vR0dkeFJaMEdydldKZUV2Mgo3MWlHNGxhbHRVTS9WOWNvSktQY0UyTEI0R3R6cFA3ckdIWXNvRDlOUXFpV3YwZ0lOdE42MjdrWGg4UW41V1hYCk92Y2FkS2h0bjJER3RvU0VzT3dpNzR5NEt3SmFkWnlwLzJaM0hPakRTNjVIVmxydmUxUXpBMVRzTEp6S3cva3gKbHBSR0lWK0lhUjZXbXZsaVFVdDJxWFg0L3hGeVVEM2Vic05TeXpHUk5mQ0NOTWxlWlV3MTR3ZUdhOEVnc2tDcQprOGdYSmpFZXQxMlR4OGxkY3BpVWlxYVpkOStYZjJmUS8yL2Y5c1IzM3Q4K0VVUWpoZ2ZIbHlsLzV1RUNBd0VBCkFhTjlNSHN3SHdZRFZSMGpCQmd3Rm9BVTRUT096c1d0Q3ZWdGJlWXFSU0FqN2tXajFkb3dDUVlEVlIwVEJBSXcKQURBTEJnTlZIUThFQkFNQ0JQQXdJUVlEVlIwUkJCb3dHSUlXYzJWamRYSmxMV0Z3Y0M1bGVHRnRjR3hsTG1OdgpiVEFkQmdOVkhRNEVGZ1FVZmtWREFFWmIwcjRTZ2swck10a0FvQ2c2RjRnd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBQWFiQit6RzVSODl6WitBT2RsRy9wWE9nYjF6VkJsQ0dMSkhyYTl1cTMvcXRPR1VacDlnd2dZSWJ4VnkKUkVLbWVRa05pV0haSDNCSlNTZ3czbE9abGNxcW5xbUJ2OFAxTUxDZ3JqbDJSN1d2NVhkb2RlQkJxc0lvZkNxVgp3ZG51THJUU3RTbmd2MGhDcldBNlBmTnlQeXMzSGJva1k3RExNREhuNmhBQWcwMUNDT0pWWGpNZjFqLzNIMFNCClBQSWxtek5aRUpEd0JMR2hyb1V3aUY3NkNUV1Fudi8yc1pvWHMwUlFiRTY3TmNraXc2Z0svaWRwVTVzMmlkOEQKVExjVjNxenVFaE1ZeUlua0ZWNEJLZlFkTWxDQnE1QWdyU1Jqb2FoaCszbFRwYVpUalJGUGFVd3VZYXVsQXRzNgpra1ROaGltWWQ3Ym1aVk5MK2I0MzhmN1RMaGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRQzhpN2Nnekp1c2R4UXoKMFpmSDdaTjZjZnBCSFd1WWkzelFzZ3BoSEd5Z0FEd3VCMkt5TXFEOGdNMFRVUWRXdnN3T0VQWktObUE1NkJobgpjVVdkQnE3MWlYaEw5dTlZaHVKV3BiVkRQMWZYS0NTajNCTml3ZUJyYzZUKzZ4aDJMS0EvVFVLb2xyOUlDRGJUCmV0dTVGNGZFSitWbDF6cjNHblNvYlo5Z3hyYUVoTERzSXUrTXVDc0NXbldjcWY5bWR4em93MHV1UjFaYTczdFUKTXdOVTdDeWN5c1A1TVphVVJpRmZpR2tlbHByNVlrRkxkcWwxK1A4UmNsQTkzbTdEVXNzeGtUWHdnalRKWG1WTQpOZU1IaG12QklMSkFxcFBJRnlZeEhyZGRrOGZKWFhLWWxJcW1tWGZmbDM5bjBQOXYzL2JFZDk3ZlBoRkVJNFlICng1Y3BmK2JoQWdNQkFBRUNnZ0VBUXJucGJleXJmVTVKTW91Ty9UenBrQkJ0UWdVZzhvUVBBS2E1d0tONEYrbnQKWWxiUHlZUGNjSEErNDRLdUo3ZHZiTno0NU11NG8xV3Q2Vkh2a29KdWdjd01iRW53YTdLVXdKaDFmVjZaL2pXaApQZkpoVS9hTUwwcm1qaWJ5YWNRaVZEVEtEZk1Ici96a05sVEpGUWlzVGpIV1lBUGJSTjh5Z1BjR3pBK1hRVzg5CmxsOFdoeWwrZndjRVAzNTM4TUdKYUpHVmV4Q2d5cVRyKzZwQ29yRUpFL1pSNytiMTNyejRsbmxpZXVYa2pCVkcKSnYvUVI0RVhTSDhuRit3K2FvWTFQaGd2QnFJTnFQZjJMT1V0MzNiN3FDTkFmSVBRdFZFejJsN3NqbmJlcElTTwpvTkhNUFY0N21XTzY2dzhFMzJVMjNjVEtUbytJcWovM0d1eGhweXlYaHdLQmdRRDVNRDhmY3ZyM0xVZHkvZ3I0Ci82MVBqUXNSaWRYdjN0Mk1MVEk4UkduNzJWcGxvVVExNDZHV2xGTGVVVDY1L1ZVMjNsZFUrUWt2eFNMK3U1bW4KRUJIdXUyVmtBUWVYcUJXWkpPTmFSZG9Ia1YzK2Fyc0U4Qld0SWVtZHJ0MWN6bHFjc1VzMWdGdG1COGI3RHB3UwpHKzRoZDlzZG0weDBNS2hoOFVGOUQrZytUd0tCZ1FEQnN4dUpoZ1hnck14S0dVMHJ5MW9WWTJtMGpDUEpJcTkzCmNZRUZGY3lYZ0U4OWlDVmlob3dVVE8yMXpTZ3o0SVVKNUxoc2M5N3VIVER1VXdwcVI5NFBsdjlyaXJvakowM1UKT3FyWHgwbWdNN2xibVM1L1RwS0czZG1QblZ0WEZMektISFgyWDVnUW56emYvdXVKK3NtbDVLQW5WN0VZc1oxcgpkVXJvRm8zcnp3S0JnUUNZdjM5aUdzeEdLaVpMRWZqTjY0UmthRFBwdTFFOTZhSnE0K1dRVmV1VnF3V2ptTGhFClJGWHdCTm5MVjRnWTRIYVUzTFF4N1RvNVl5RnhmclBRV2FSMGI4RFdEVitIRWt5ekJJNnM3bmFZL3YzY0Q3YTIKYnlrS2FPaFlkVEZTUzFmMkJ5UHdGczl2K3NKNWNOb3dxNWhNUWJrNks5RXd4QWJqaXN5M0NjSTJOd0tCZ1FDbwo2c2pZNVVlNjV2WkFxRS9rSVRJdDlNUDU3enhGNnptWnNDSVRqUzhkNzRjcTRjKzRYQjFNbHNtMkFYTk55ajQ2Cm9uc3lHTm9RVE9TZThVdmo0MGlEeitwdW5rdzAyOUhEZ21YNlJwQ3VaRzBBdEZVWU1DMFg3K0FLbmU5SndZdmgKdFhBcHFyT3h5eXdMS3dPOUVEZEp0RmIxK0VNNGhhd0NTZ2RJM21KbGdRS0JnRzIxeEJNRXRzMFBVN3lDYTZ0YwpadDc1NUV4aEdkR3F5MmtHYmtmdzBEaHBQQVVUZmdncVF3NVBYdGVIS1ZBSDlKaG5kVnBBZFFxNmZ1MER1MDNKCkl0cGpxNWluZXVoR0x0alpMR1Nhd0dwY0FUU3h4Z3dCM0l0Z29LKzBCRFhteWxId0lEcUc5Z2crRU5KK0VhL0MKeTFOMmV0ZG1sQ01hNjM4cVJlNFlTWk55Ci0tLS0tRU5EIFFSSVZBVEUgS0VZLS0tLS0=

EOF
```

----------------------------------------

TITLE: Configure Nginx as Reverse Proxy
DESCRIPTION: This Nginx configuration sets up a reverse proxy that listens on port 80 and forwards all requests to the demo application running on localhost:8085. It also sets the Host header to the value of the incoming request's Host header.
SOURCE: https://github.com/nginx/documentation/blob/main/content/modsec-waf/admin-guide/nginx-plus-modsecurity-waf-installation-logging.md#_snippet_9

LANGUAGE: nginx
CODE:
```
server {
    listen 80;
    location / {
        proxy_pass http://localhost:8085;
        proxy_set_header Host $host;
    }
}
```

----------------------------------------

TITLE: Complete NGINX OIDC Configuration Example
DESCRIPTION: This is a complete example configuration that includes the resolver, oidc provider setup, and test application. It provides a functional configuration file that can be adapted to work with any Identity provider.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-oidc.md#_snippet_10

LANGUAGE: nginx
CODE:
```
http {
    # Use a public DNS resolver for Issuer discovery, etc.
    resolver 10.0.0.1 ipv4=on valid=300s;

    oidc_provider my_idp {
        # The 'issuer' typically matches your IdP's base URL
        issuer https://<idp-server>/idp;

        # Provide a CA bundle for certificate validation
        ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

        # Replace with your actual IdP's client_id and secret
        client_id <client_id>;
        client_secret <client_secret>;

        # If the .well-known endpoint cannot be derived automatically,
        # specify config_url:
        # config_url https://<idp-server>/auth/realms/main/.well-known/openid-configuration;
    }

    server {
        listen 443 ssl;
        server_name demo.example.com;
x
        ssl_certificate     /etc/ssl/certs/fullchain.pem;
        ssl_certificate_key /etc/ssl/private/key.pem;

        location / {
            # Protect this location with OIDC
            auth_oidc my_idp;

            # Forward OIDC claims as headers if desired
            proxy_set_header sub   $oidc_claim_sub;
            proxy_set_header email $oidc_claim_email;
            proxy_set_header name  $oidc_claim_name;

            proxy_pass http://127.0.0.1:8080;
        }
    }

    server {
        # simple test oidc-protected application
        listen 8080;

        location / {
            return 200 "Hello, $http_name!\nEmail: $http_email\nIdP sub: $http_sub\n";
            default_type text/plain;
        }
    }
}
```

----------------------------------------

TITLE: NGINX: Full Configuration for Single Web Entry Point
DESCRIPTION: This configuration sets up NGINX for a single web entry point, including user, worker processes, error logging, and PID configuration. It defines an upstream for Oracle servers, configures HTTP to HTTPS redirection, and sets up an HTTPS server with SSL/TLS, caching, and health checks. It also includes live activity monitoring configuration with API access and a built-in dashboard.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-e-business-suite.md#_snippet_40

LANGUAGE: nginx
CODE:
```
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log info;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type text/html;
    proxy_cache_path /var/oracle-cache keys_zone=cache_oracle:50m max_size=500m;

    # Custom logging configuration
    log_format main '$remote_addr - $remote_user [$time_local]
                    "$request" $status $body_bytes_sent "$http_referer"
                    "$http_user_agent" $upstream_addr';
    access_log /var/log/nginx/access.log main;

    upstream oracle {
        zone oracle 64k;

        # Production servers
        server 172.31.11.210:8000 max_fails=0;
        server 172.31.0.146:8000 max_fails=0;

        # Disaster recovery servers
        server 172.33.111.210:8000 max_fails=0 backup;
        server 172.33.100.146:8000 max_fails=0 backup;

        # Session persistence
        sticky cookie ngxcookie;
    }

    server {
        listen 80;
        status_zone oracle-http-redirect;
        return 302 https://$http_host$request_uri;
    }

    server {
        listen 443 ssl;
        http2  on;
        server_name company.com;
        ssl_certificate     /etc/nginx/ssl/certificate-name.crt;
        ssl_certificate_key /etc/nginx/ssl/private-key.key;
        ssl_protocols       TLSv1.2;
        status_zone oracle-ssl;
        proxy_cache cache_oracle;

        location / {
            proxy_pass http://oracle;
            proxy_set_header Host $host;
            proxy_cache_valid any 1h;
        }

        location @health_check {
            internal;
            proxy_connect_timeout 3s;
            proxy_read_timeout 3s;
            proxy_pass http://oracle;
            proxy_set_header Host "oracle.company.com";
            health_check match=oracleok interval=4s
                         uri=/OA_HTML/AppsLocalLogin.jsp;
        }
    }

    match oracleok {
        status 200-399;
        header X-ORACLE-DMS-ECID;
    }

    # Live activity monitoring configuration
    server {
        # Status zone required for live activity monitoring. Enable it for
        # every 'server' block in other configuration files.
        status_zone status-page;

        # If NGINX Plus is listening on multiple IP addresses, uncomment this
        # directive to restrict access to the live activity monitoring
        # dashboard to a single IP address (substitute the appropriate
        # address).
        # listen 10.2.3.4:8080;
        # Live activity monitoring is enabled on port 8080 by default.
        listen 8080;

        # HTTP Basic authentication is enabled by default. Use an htpasswd
        # generator to add users, or command-line and other management tools are
        # readily available online. If you have Apache HTTP Server installed, you
        # can reuse its htpasswd file.
        #auth_basic on;
        #auth_basic_user_file /etc/nginx/users;

        # Limit access to the dashboard to users on admin networks only.
        # Uncomment the "allow" directive and change the IP address.
        #allow 10.0.0.0/8;
        deny all;

        # Enable the NGINX Plus API for metrics collection.
        location /api {
            api write=on;
            access_log off;
        }

        # NGINX Plus includes a built-in dashboard.
        location = /dashboard.html {
            root /usr/share/nginx/html;
        }

        # Redirect requests made to the pre-R14 dashboard.
        location = /status.html {
            return 301 /dashboard.html;
        }

        # Standard HTTP features are fully supported with the dashboard.
        # Redirect request for '/' to '/dashboard.html'.
        location = / {
            return 301 /dashboard.html;
        }
    }
}
```

----------------------------------------

TITLE: OpenSSL Intermediate CA Configuration
DESCRIPTION: This YAML configuration file defines settings for creating an Intermediate Certificate Authority (CA) using OpenSSL. It specifies parameters such as key size (4096 bits), distinguished name fields (country, state, locality, organization, common name), and extensions for the intermediate CA certificate, including basic constraints (CA:true) and key usage (keyCertSign, cRLSign). This configuration is used by the `openssl req` command to generate the intermediate CA certificate, which is signed by the root CA.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/system-configuration/secure-traffic.md#_snippet_3

LANGUAGE: yaml
CODE:
```
[req]
default_bits        = 4096
distinguished_name  = req_distinguished_name
prompt              = no
default_md          = sha256
req_extensions      = v3_req

# recommend changing these to your needs
[req_distinguished_name]
countryName                 = US
stateOrProvinceName         = California
localityName                = San Francisco
organizationName            = NGINX, Inc.
commonName                  = nms-int-ca

[v3_req]
basicConstraints = critical, CA:true
keyUsage = critical, keyCertSign, cRLSign
subjectKeyIdentifier = hash
```

----------------------------------------

TITLE: Test Nginx Configuration
DESCRIPTION: This shell command tests the Nginx configuration file for syntax errors. It helps ensure that the configuration is valid before reloading or restarting Nginx.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/ndk.md#_snippet_7

LANGUAGE: shell
CODE:
```
nginx -t
```

----------------------------------------

TITLE: SSL/TLS Proxy Configuration on NGINX Plus
DESCRIPTION: This code snippet demonstrates how to configure SSL/TLS proxy on NGINX Plus. It defines an upstream pool and a server block that listens on port 443 with SSL enabled, specifying the certificate and key files. It also configures proxy settings for SSL, including certificates, protocols, ciphers, and verification.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/migrate-hardware-adc/f5-big-ip-configuration.md#_snippet_6

LANGUAGE: nginx
CODE:
```
upstream ssl_test_pool {
        server 10.10.10.10:443;
   }

   server {
        listen 192.168.10.10:443 ssl;
        ssl_certificate     /etc/nginx/ssl/test.crt;
        ssl_certificate_key /etc/nginx/ssl/test.key;

        location / {
            proxy_pass https://ssl_test_pool;
            proxy_ssl_certificate /etc/nginx/ssl/client.pem;
            proxy_ssl_certificate_key /etc/nginx/ssl/client.key;
            proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
            proxy_ssl_ciphers HIGH:!aNULL:!MD5;
            proxy_ssl_trusted_certificate /etc/nginx/ssl/trusted_ca_cert.crt;
            proxy_ssl_verify on;
            proxy_ssl_verify_depth 2;
        }
   }
```

----------------------------------------

TITLE: Kubernetes Deployment for NGINX App Protect DoS (YAML)
DESCRIPTION: This YAML defines a Kubernetes Deployment for the NGINX App Protect DoS application. It specifies container image, resource limits, port mappings, liveness/readiness probes, and volume mounts for configuration, scripts, and logs.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/learn-about-deployment.md#_snippet_189

LANGUAGE: yaml
CODE:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appprotect-dos
  namespace: appprotect-dos-wp-diff
  labels:
    app: appprotect-dos
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: appprotect-dos
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: appprotect-dos
    spec:
    containers:
    - name: centos-bados
      image: example.com/centos_app_protect_dos_r24:latest
      imagePullPolicy: Always
      resources:
        requests:
            cpu: "200m"
            memory: "500Mi"
        limits:
            cpu:  "900m"
            memory: "800Mi"
      ports:
        - containerPort: 80
          name: web
        - containerPort: 8090
          name: probe
        - containerPort: 8091
          name: probe500
        livenessProbe:
          httpGet:
            path: /app_protect_dos_liveness
            port: 8090
          initialDelaySeconds: 0
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /app_protect_dos_readiness
            port: 8090
          initialDelaySeconds: 0
          periodSeconds: 10
        volumeMounts:
        - name: shared
          mountPath: /shared/
        - name: conf
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: root-script
          mountPath: /root/entrypoint.sh
          subPath: entrypoint.sh
        - name: log-default
          mountPath: /etc/app_protect_dos/log-default.json
          subPath: log-default.json
    volumes:
    - name: shared
      persistentVolumeClaim:
        claimName: pvc-appprotect-dos-shared
    - name: conf
      configMap:
        name: cm-appprotect-dos-nginx
        items:
        - key: nginx.conf
          path: nginx.conf
    - name: root-script
      configMap:
          name: cm-appprotect-dos-entry
          defaultMode: 0755
          items:
          - key: entrypoint.sh
            path: entrypoint.sh
    - name: log-default
      configMap:
        name: cm-appprotect-dos-log-default
        defaultMode: 0755
        items:
        - key: log-default.json
          path: log-default.json
```

----------------------------------------

TITLE: Configuring Server Block in Nginx
DESCRIPTION: Configures a server block in Nginx to listen on port 80, sets the server name, defines the root directory for serving files, configures error logging, sets the index file, disables caching, and configures sub_filter directives to replace placeholders with server information. This configuration defines how the server responds to HTTP requests.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/setting-up-nginx-demo-environment.md#_snippet_2

LANGUAGE: nginx
CODE:
```
server {
    listen 80 default_server;
    server_name app_server;

    root /usr/share/nginx/html;
    error_log /var/log/nginx/app-server-error.log notice;
    index demo-index.html index.html;
    expires -1;

    sub_filter_once off;
    sub_filter 'server_hostname' '$hostname';
    sub_filter 'server_address'  '$server_addr:$server_port';
    sub_filter 'server_url'      '$request_uri';
    sub_filter 'remote_addr'     '$remote_addr:$remote_port';
    sub_filter 'server_date'     '$time_local';
    sub_filter 'client_browser'  '$http_user_agent';
    sub_filter 'request_id'      '$request_id';
    sub_filter 'nginx_version'   '$nginx_version';
    sub_filter 'document_root'   '$document_root';
    sub_filter 'proxied_for_ip'  '$http_x_forwarded_for';
}
	
```

----------------------------------------

TITLE: Configuring buffers for Nginx proxy
DESCRIPTION: This snippet demonstrates how to configure the buffering settings for responses from proxied servers. `proxy_buffers` sets the number and size of the buffers used for storing the response, while `proxy_buffer_size` sets the size of the buffer used for the first part of the response. Adjusting these values can help optimize performance based on the characteristics of the backend server and the clients.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/reverse-proxy.md#_snippet_4

LANGUAGE: nginx
CODE:
```
location /some/path/ {
    proxy_buffers 16 4k;
    proxy_buffer_size 2k;
    proxy_pass http://localhost:8000;
}
```

----------------------------------------

TITLE: Reload Nginx Configuration
DESCRIPTION: This command reloads the Nginx configuration without downtime. It's necessary to apply any changes made to the nginx.conf file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx-one/how-to/proxy-setup/set-up-nginx-proxy-for-nginx-one.md#_snippet_1

LANGUAGE: sh
CODE:
```
sudo nginx -s reload
```

----------------------------------------

TITLE: Reload NGINX Configuration
DESCRIPTION: This shell command reloads the NGINX configuration, applying any changes made to the configuration files.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/rtmp.md#_snippet_8

LANGUAGE: shell
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Reload Nginx Configuration (Demo App)
DESCRIPTION: This command reloads the Nginx configuration, applying any changes made to the configuration files (e.g., after creating echo.conf).
SOURCE: https://github.com/nginx/documentation/blob/main/content/modsec-waf/admin-guide/nginx-plus-modsecurity-waf-installation-logging.md#_snippet_7

LANGUAGE: none
CODE:
```
$ sudo nginx -s reload
```

----------------------------------------

TITLE: Setting request headers in Nginx proxy
DESCRIPTION: This snippet demonstrates how to set custom request headers when proxying requests to a backend server. The `proxy_set_header` directive allows modifying the 'Host' and 'X-Real-IP' headers, and these modified requests are sent to the proxied server. The `$host` variable represents the original host requested by the client, and `$remote_addr` is the client's IP address.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/reverse-proxy.md#_snippet_2

LANGUAGE: nginx
CODE:
```
location /some/path/ {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_pass http://localhost:8000;
}
```

----------------------------------------

TITLE: Configuring HTTPS Server Block Nginx
DESCRIPTION: This snippet configures an HTTPS server block, listening on port 443 for 'example.com'. It sets up SSL certificate paths, configures the SSL session cache, and prefers server ciphers.  The SSL certificate and key directives are required for secure HTTPS connections.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/node-js.md#_snippet_12

LANGUAGE: nginx
CODE:
```
# In the 'http' block
server {
    listen 443 ssl;
    server_name example.com;

    ssl_certificate           /etc/nginx/ssl/<certificate-name>;
    ssl_certificate_key       /etc/nginx/ssl/<private-key>;
    ssl_session_cache         shared:SSL:1m;
    ssl_prefer_server_ciphers on;
 }
```

----------------------------------------

TITLE: Arbitrary JWT Claims Validation - Nginx Configuration
DESCRIPTION: This snippet demonstrates how to validate custom JWT claims using the `map` and `auth_jwt_require` directives. It defines mappings to check the audience, issuer, and scope of the JWT, and then uses `auth_jwt_require` to ensure that all conditions are met before granting access. The upstream block defines the backend servers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-jwt-authentication.md#_snippet_12

LANGUAGE: nginx
CODE:
```
upstream api_server {
    server 10.0.0.1;
    server 10.0.0.2;
}

map $jwt_claim_aud $valid_app_id {    #map rule 1:
    "~api\d.example.com" 1;           #token issued only for target apps
}

map $jwt_claim_iss $valid_issuer {    #map rule 2:
    "https://idp.example.com/sts" 1;  #token issued by trusted CA
}

map $jwt_claim_scope $valid_scope {   #map rule 3:
    "access_as_admin" 1;              #access as admin only
}

server {
    listen 80;

    location /products/ {
        auth_jwt          "API";
        auth_jwt_key_file conf/api_secret.jwk;
        auth_jwt_require  $valid_app_id $valid_issuer $valid_scope;
        proxy_pass        http://api_server;
    }
}
```

----------------------------------------

TITLE: Update Proxy with Introspection Policy Configuration (PUT)
DESCRIPTION: This code snippet shows how to update a proxy configuration with an OAuth2 Introspection policy. The policy is configured to forward specific claims from the token introspection response as headers to the backend service. It demonstrates the use of nested claim paths (e.g., `resource_access.account.roles`) and the inclusion of a non-existent claim to illustrate error handling.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/tutorials/introspection-keycloak.md#_snippet_47

LANGUAGE: bash
CODE:
```
PUT https://192.0.2.2/api/acm/v1/services/workspaces/service-ws/proxies/test-proxy
```

----------------------------------------

TITLE: Reload NGINX Configuration
DESCRIPTION: This shell command reloads the NGINX configuration without interrupting existing connections. It is used to apply changes made to the configuration file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/perl.md#_snippet_9

LANGUAGE: shell
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Implementing 301 Permanent Redirect in NGINX
DESCRIPTION: This example shows how to use the `return` directive to issue a 301 (Moved Permanently) HTTP redirect. When a request matches `/permanently/moved/url`, NGINX will redirect the client to the specified new URL, informing browsers and search engines of the permanent move.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/web-server.md#_snippet_9

LANGUAGE: nginx
CODE:
```
location /permanently/moved/url {
    return 301 http://www.example.com/moved/here;
}
```

----------------------------------------

TITLE: Virtual Server Configuration in NGINX Plus
DESCRIPTION: This snippet configures a virtual server in NGINX Plus. It listens on a specific IP address and port, and uses the server_name directive to match the Host header for requests ending in .example.com.  The listen directive specifies the IP address and port to listen on, and the server_name directive specifies the hostname(s) to match.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/migrate-hardware-adc/citrix-adc-configuration.md#_snippet_0

LANGUAGE: nginx
CODE:
```
server {
    listen 10.0.0.99:80;
    server_name .example.com;
    #...
}
```

----------------------------------------

TITLE: Configuring HTTP Server Blocks for Exchange (nginx)
DESCRIPTION: This snippet configures server blocks for handling HTTP and HTTPS traffic for Microsoft Exchange. It includes configurations for redirecting HTTP to HTTPS, setting up SSL certificates, configuring proxy passes for various Exchange applications, and setting up health checks.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/microsoft-exchange.md#_snippet_58

LANGUAGE: nginx
CODE:
```
server {
        listen 80;

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        http2  on;

        client_max_body_size 2G;
        ssl_certificate /etc/nginx/ssl/company.com.crt;
        ssl_certificate_key /etc/nginx/ssl/company.com.key;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        status_zone exchange-combined;

        location = / {
            return 301 "/owa/";
        }

        location = /favicon.ico {
            empty_gif;
            access_log off;
        }

        location / {
            proxy_pass https://exchange;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        location /ecp {
            # Grant access to admin users only, by uncommenting the 'allow'
            # and 'deny' directives and substituting the IP address and
            # prefix of your admin network. Or configure more sophisticated
            # access control.

            #allow 172.16.0.0/16; # Replace with your admin network
            #deny all;

            proxy_pass https://exchange-ecp;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            health_check uri=/ecp/healthcheck.htm interval=3s
                         match=exchange-health;
        }

        location /mapi {
            proxy_pass https://exchange-mapi;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            health_check uri=/mapi/healthcheck.htm interval=3s
                         match=exchange-health;
        }

        location /Microsoft-Server-ActiveSync {
            proxy_pass https://exchange-active-sync;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        location /owa {
            proxy_pass https://exchange-owa;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            health_check uri=/owa/healthcheck.htm interval=3s
                         match=exchange-health;
        }

        location /rpc/rpcproxy.dll {
            proxy_pass https://exchange-rpc;
            proxy_buffering off;
            proxy_http_version 1.1;
            proxy_request_buffering off;
            proxy_set_header Connection "Keep-Alive";
            health_check uri=/rpc/rpcproxy.dll interval=3s
                         match=exchange-auth;
        }
    }
```

----------------------------------------

TITLE: Installing NGINX Open Source on Ubuntu
DESCRIPTION: This command updates the apt package lists and then installs the NGINX Open Source package.  The `apt update` command ensures that the package manager is aware of the latest versions available, and `apt install nginx` installs the NGINX package.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/installing-nginx/installing-nginx-open-source.md#_snippet_27

LANGUAGE: shell
CODE:
```
sudo apt update
sudo apt install nginx
```

----------------------------------------

TITLE: Apply Kubernetes Manifests
DESCRIPTION: This shell command applies Kubernetes manifests from a specified directory.  It is used to create, update, or delete resources in the Kubernetes cluster based on the definitions in the YAML files.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/admin-guide/deploy-with-manifests.md#_snippet_8

LANGUAGE: shell
CODE:
```
kubectl apply -f /home/user/k8s
```

----------------------------------------

TITLE: Validating and Reloading NGINX Configuration
DESCRIPTION: These commands validate the NGINX configuration file for syntax errors and then gracefully reload the NGINX service to apply the changes without downtime. `nginx -t` tests the configuration and `nginx -s reload` sends a reload signal to the Nginx master process.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/google-cloud-platform/high-availability-all-active.md#_snippet_15

LANGUAGE: shell
CODE:
```
nginx -t
nginx -s reload
```

----------------------------------------

TITLE: Reloading NGINX Plus Configuration (Shell)
DESCRIPTION: This command reloads the NGINX configuration, applying any changes, including the newly placed license file, without stopping the service. It's a standard way to apply NGINX configuration updates efficiently.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/licensing-and-reporting/apply-jwt.md#_snippet_0

LANGUAGE: shell
CODE:
```
systemctl reload nginx
```

----------------------------------------

TITLE: Setting Real IP Header to PROXY Protocol in HTTP Context
DESCRIPTION: This configuration snippet demonstrates how to use the 'real_ip_header proxy_protocol' directive within the HTTP context. This directive instructs NGINX to use the PROXY protocol header to determine the client's real IP address, effectively replacing the load balancer's IP in variables like '$remote_addr'.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/using-proxy-protocol.md#_snippet_3

LANGUAGE: nginx
CODE:
```
http {
       server {
           #...
           real_ip_header proxy_protocol;
         }
   }
```

----------------------------------------

TITLE: Configuring NGINX Server Block
DESCRIPTION: This NGINX configuration defines a server block listening on port 80 for any application. It configures root directories for two applications, 'app1' and 'app2', based on the requested URI. This setup is used for distributing requests to different applications on the same NGINX instance.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/high-availability/ha-keepalived-nodes.md#_snippet_4

LANGUAGE: nginx
CODE:
```
server {
    listen *:80;

    location /app1 {
        root /application1;
    }

    location /app2 {
        root /application2;
    }
}
```

----------------------------------------

TITLE: Reloading Nginx configuration
DESCRIPTION: This shell command reloads the Nginx configuration.  It applies any changes made to the configuration file without restarting Nginx.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/encrypted-session.md#_snippet_8

LANGUAGE: Shell
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Configuring NGINX Error Log
DESCRIPTION: This example shows how to configure the NGINX error log, including the file path and debug level, using the `error_log` directive in `nginx.conf`. The log level can be set to `debug` for more verbose output, useful for troubleshooting App Protect DoS configuration issues.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/monitoring/types-of-logs.md#_snippet_1

LANGUAGE: shell
CODE:
```
error_log /var/log/nginx/error.log debug;
```

----------------------------------------

TITLE: Reload Nginx Configuration (nginx command)
DESCRIPTION: Reloads the Nginx configuration using the `nginx -s reload` command. This applies the new configuration without restarting the server.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-weblogic-server.md#_snippet_12

LANGUAGE: none
CODE:
```
root# nginx -s reload
```

----------------------------------------

TITLE: Reload Nginx Configuration (mTLS)
DESCRIPTION: Reloads the Nginx configuration to apply the mTLS settings.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/devportals/installation/install-dev-portal.md#_snippet_17

LANGUAGE: shell
CODE:
```
sudo nginx -s reload
```

----------------------------------------

TITLE: Traffic Splitting with HTTPRouteGroup Matches in SMI - YAML
DESCRIPTION: This example shows how to configure traffic splitting based on HTTPRouteGroup matches using the SMI TrafficSplit and HTTPRouteGroup specifications. It allows splitting traffic based on the path, HTTP methods, and headers of a request, enabling A/B testing or canary deployments. The code defines a TrafficSplit resource named 'target' that distributes traffic to different service versions based on matches defined in 'target-route-group'.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/guides/smi-traffic-policies.md#_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: split.smi-spec.io/v1alpha3
kind: TrafficSplit
metadata:
  name: target
spec:
  service: target-svc
  backends:
  - service: target-v1
    weight: 0
  - service: target-v2
    weight: 1
  - service: target-v3
    weight: 0
  matches:
  - kind: HTTPRouteGroup
    name: target-route-group
---
apiVersion: specs.smi-spec.io/v1alpha3
kind: HTTPRouteGroup
metadata:
  name: target-route-group
  namespace: default
spec:
  matches:
  - name: metrics
    pathRegex: "/metrics"
    methods:
    - GET
  - name: test-header
    headers:
      x-test: "^true$"
```

----------------------------------------

TITLE: Test Nginx Configuration
DESCRIPTION: This shell command tests the Nginx configuration file for syntax errors and ensures that the configuration is valid before reloading Nginx.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/xslt.md#_snippet_7

LANGUAGE: shell
CODE:
```
nginx -t
```

----------------------------------------

TITLE: Configuring NGINX Proxy for WebSocket Traffic
DESCRIPTION: This snippet provides the NGINX configuration necessary to correctly proxy WebSocket traffic. It includes a `map` directive to dynamically set the `Connection` header based on the `Upgrade` header, and a `location` block that specifies `proxy_http_version 1.1` and sets the `Upgrade` and `Connection` headers, which are crucial for establishing and maintaining WebSocket connections through NGINX. This setup ensures proper HTTP/1.1 communication for WebSocket handshakes and data transfer.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_19

LANGUAGE: nginx
CODE:
```
# In the 'http' block
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# In the 'server' block for HTTPS traffic
location /wstunnel/ {
    proxy_pass http://jboss;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
}
```

----------------------------------------

TITLE: Restart NGINX web server
DESCRIPTION: This command restarts the NGINX web server using systemctl. This is needed to ensure that the web server picks up any new configurations or changes related to NGINX Instance Manager.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/deploy/vm-bare-metal/install.md#_snippet_12

LANGUAGE: bash
CODE:
```
sudo systemctl restart nginx
```

----------------------------------------

TITLE: Checking NGINX status with systemctl
DESCRIPTION: This command is used to check the status of the NGINX service. It uses `systemctl`, which is a systemd utility to manage system services. The output will indicate whether NGINX is running, stopped, or in a failed state.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/admin-guide/upgrade-nap-waf.md#_snippet_1

LANGUAGE: bash
CODE:
```
sudo systemctl status nginx
```

----------------------------------------

TITLE: Configuring SSL Termination in Nginx
DESCRIPTION: This code snippet demonstrates how to configure SSL termination for NGINX Instance Manager within an NGINX configuration file. It includes settings for listening on port 443 with SSL, enabling HTTP/2, specifying SSL protocols and ciphers, setting up session caching, and defining the paths to the SSL certificate, key, and client certificate. These directives ensure secure communication between clients and the NGINX Instance Manager server.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/system-configuration/secure-traffic.md#_snippet_0

LANGUAGE: nginx
CODE:
```
# Main external HTTPS server, needs port 443
server {
    listen 443 ssl;
    http2  on;
    root   /var/www/nms;

    server_name _;

    ssl_protocols       TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;

    ssl_certificate         /etc/nms/certs/manager-server.pem;
    ssl_certificate_key     /etc/nms/certs/manager-server.key;
    ssl_client_certificate  /etc/nms/certs/ca.pem;
}
```

----------------------------------------

TITLE: Logging Upstream and Request Times in NGINX
DESCRIPTION: This NGINX configuration defines an 'upstream_time' `log_format` to capture detailed timing metrics, including `$request_time`, `$upstream_connect_time`, `$upstream_header_time`, and `$upstream_response_time`. This format is then applied to the `access_log` within a server block, providing valuable data for diagnosing website slowdowns related to upstream server interactions.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/monitoring/logging.md#_snippet_2

LANGUAGE: nginx
CODE:
```
http {
    log_format upstream_time '$remote_addr - $remote_user [$time_local] '
                             '"$request" $status $body_bytes_sent '
                             '"$http_referer" "$http_user_agent"'
                             'rt="$request_time" uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

    server {
        access_log /spool/logs/nginx-access.log upstream_time;
        ...
    }
}
```

----------------------------------------

TITLE: Configuring NGINX Access Log Format
DESCRIPTION: This NGINX configuration snippet defines a custom log format named 'main' and configures the access log to use this format. It specifies various variables to be included in the log, such as remote address, user, request details, status code, bytes sent, referer, user agent, forwarded for, bytes sent, request length, request time, gzip ratio, and server protocol.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/monitoring/overview-metrics.md#_snippet_0

LANGUAGE: nginx
CODE:
```
log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for" '
                  '"$bytes_sent" "$request_length" "$request_time" '
                  '"$gzip_ratio" $server_protocol ';

access_log  /var/log/nginx/access.log  main;
```

----------------------------------------

TITLE: Dockerfile Setup for Nginx with App Protect
DESCRIPTION: This Dockerfile configures Nginx OSS and Nginx App Protect WAF v5 within a Debian container. It begins by setting the OS codename via an ARG. It installs necessary dependencies like apt-transport-https, lsb-release, and ca-certificates. Crucially, it adds the Nginx and Nginx App Protect repositories, imports signing keys using gpg, and installs the specified Nginx and app-protect-module-oss packages.  It uses secrets for repository authentication.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/v5/build-nginx-image-oss/build-debian.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1

# Supported OS_CODENAME's are: bullseye/bookworm
ARG OS_CODENAME=bookworm

# Base image
FROM debian:${OS_CODENAME}

# Install NGINX OSS and NGINX App Protect WAF v5 module
RUN --mount=type=secret,id=nginx-crt,dst=/etc/ssl/nginx/nginx-repo.crt,mode=0644 \
    --mount=type=secret,id=nginx-key,dst=/etc/ssl/nginx/nginx-repo.key,mode=0644 \
    apt-get update \
    && apt-get install -y \
      apt-transport-https \
      lsb-release \
      ca-certificates \
      wget \
      gnupg2 \
      debian-archive-keyring \
    && wget -qO - https://nginx.org/keys/nginx_signing.key | gpg --dearmor | \
      tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null \
    && gpg --dry-run --quiet --no-keyring --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg \
    && printf "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \
      http://nginx.org/packages/mainline/debian `lsb_release -cs` nginx\n" | \
      tee /etc/apt/sources.list.d/nginx.list \
    && wget -qO - https://cs.nginx.com/static/keys/nginx_signing.key | gpg --dearmor | \
      tee /usr/share/keyrings/nginx-static-archive-keyring.gpg >/dev/null \
    && gpg --dry-run --quiet --no-keyring --import --import-options import-show /usr/share/keyrings/nginx-static-archive-keyring.gpg \
    && printf "deb [signed-by=/usr/share/keyrings/nginx-static-archive-keyring.gpg] \
      https://pkgs.nginx.com/app-protect-x-oss/debian `lsb_release -cs` nginx-plus\n" | \
      tee /etc/apt/sources.list.d/nginx-app-protect.list \
    && wget -P /etc/apt/apt.conf.d https://cs.nginx.com/static/files/90pkgs-nginx \
    && apt-get update \
    && DEBIAN_FRONTEND="noninteractive" apt-get install -y nginx=1.25.5-1~`lsb_release -cs` app-protect-module-oss \
    && ln -sf /dev/stdout /var/log/nginx/access.log \
    && ln -sf /dev/stderr /var/log/nginx/error.log \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Expose port
EXPOSE 80

# Define stop signal
STOPSIGNAL SIGQUIT

# Set default command
CMD ["nginx", "-g", "daemon off;"]
```

----------------------------------------

TITLE: Enabling mTLS via Config File - YAML
DESCRIPTION: This snippet demonstrates how to enable mTLS by modifying the `/etc/nginx-agent/nginx-agent.conf` configuration file. It sets the `tls.enable`, `tls.cert`, `tls.key`, and `tls.ca` options to enable mTLS using the specified certificate and key files. The `server.metrics` and `server.command` values are set to `cert-sni-name` which should match the SubjectAltName of the server certificate.
SOURCE: https://github.com/nginx/documentation/blob/main/content/agent/configuration/encrypt-communication.md#_snippet_0

LANGUAGE: yaml
CODE:
```
server:
  metrics: "cert-sni-name"
  command: "cert-sni-name"
tls:
  enable: true
  cert: "path-to-cert"
  key: "path-to-key"
  ca: "path-to-ca-cert"
  skip_verify: false
```

----------------------------------------

TITLE: Reloading Nginx Configuration - Shell (service)
DESCRIPTION: These commands reload the Nginx configuration, instructing Nginx to start using the new configuration settings without restarting the server. The first option uses the `nginx` command with the `-s reload` option, and the second option uses the `service` command. Both achieve the same result.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-e-business-suite.md#_snippet_15

LANGUAGE: none
CODE:
```
root# service nginx reload
```

----------------------------------------

TITLE: Configuring Nginx Upstream Block
DESCRIPTION: This Nginx configuration snippet defines an upstream block named `upstream_app_pool` for load balancing between two application servers.  It configures each server with its internal IP address and enables sticky sessions using a cookie named GCPPersist with an expiration time of 300 seconds. It requires the internal IP addresses of the two application servers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/google-cloud-platform/high-availability-all-active.md#_snippet_8

LANGUAGE: nginx
CODE:
```
upstream upstream_app_pool {
    server <internal IP address of nginx-plus-app-1-vm>;
    server <internal IP address of nginx-plus-app-2-vm>;
    zone upstream-apps 64k;
    sticky cookie GCPPersist expires=300;
}
```

----------------------------------------

TITLE: Pass OIDC Claims as Headers to Application
DESCRIPTION: This snippet passes OIDC claims from the ID token as HTTP headers to the backend application. The `proxy_set_header` directive is used to set the `sub`, `email`, and `name` headers with corresponding OIDC claim values.  The application receives these headers and can use them to identify the user.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/active-directory-federation-services.md#_snippet_9

LANGUAGE: nginx
CODE:
```
# ...
location / {

     auth_oidc adfs;

     proxy_set_header sub   $oidc_claim_sub;
     proxy_set_header email $oidc_claim_email;
     proxy_set_header name  $oidc_claim_name;

     proxy_pass http://127.0.0.1:8080;
}
# ...
```

----------------------------------------

TITLE: Proxying requests to HTTP server with port in Nginx
DESCRIPTION: This example shows how to proxy requests to an HTTP server running on a specific port. The `location` block uses a regular expression to match PHP files, and the `proxy_pass` directive forwards the requests to the specified IP address and port. This allows NGINX to handle requests for PHP files by proxying them to a backend server.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/reverse-proxy.md#_snippet_1

LANGUAGE: nginx
CODE:
```
location ~ \.php {
    proxy_pass http://127.0.0.1:8000;
}
```

----------------------------------------

TITLE: Defining NGINX Cache Path and Zone
DESCRIPTION: This snippet defines the `proxy_cache_path` directive within the `http` context. It specifies `/data/nginx/cache` as the local filesystem path for cached content and `mycache:10m` for the `keys_zone`, which creates a 10MB shared memory zone named 'mycache' to store metadata about cached items. This is the foundational step to enable caching.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/content-cache/content-caching.md#_snippet_0

LANGUAGE: nginx
CODE:
```
http {
    # ...
    proxy_cache_path /data/nginx/cache keys_zone=mycache:10m;
}
```

----------------------------------------

TITLE: NGINX Securing Traffic to Upstream Servers Configuration
DESCRIPTION: This NGINX configuration snippet demonstrates how to secure traffic to upstream servers by encrypting the traffic between the NGINXaaS deployment and the backend servers. It requires the `proxy_ssl_certificate` and `proxy_ssl_certificate_key` directives to be configured with the paths to the client certificate and key files. The backend server address and port must also be configured to use HTTPS.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/quickstart/security-controls/certificates.md#_snippet_1

LANGUAGE: nginx
CODE:
```
http {
    upstream backend {
        server backend1.example.com:8443; # replace with your backend server address and port
    }

    server {
        listen 80;

        location / {
            proxy_pass https://backend;
            proxy_ssl_certificate /etc/nginx/ssl/client.crt;     # must match the Certificate path
            proxy_ssl_certificate_key /etc/nginx/ssl/client.key; # must match the Key path
        }
    }
}
```

----------------------------------------

TITLE: Reloading Nginx Configuration (Shell)
DESCRIPTION: This command reloads the Nginx configuration without interrupting service.  This ensures that the new configuration is applied without downtime.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_11

LANGUAGE: none
CODE:
```
root# nginx -s reload
```

----------------------------------------

TITLE: Reloading NGINX Configuration
DESCRIPTION: These commands reload the NGINX configuration without downtime.  The first uses the nginx command-line tool, and the second uses the service command.  Both achieve the same result: applying the new configuration.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/microsoft-exchange.md#_snippet_22

LANGUAGE: none
CODE:
```
root# nginx -s reload
```

----------------------------------------

TITLE: Configuring Custom Headers in Nginx
DESCRIPTION: This snippet adds a custom header to the response using the add_header directive. Replace `<custom-header-name>` with the name of the custom header and `<custom-header-value>` with the desired value. The '[always]' option ensures the header is always added, regardless of the response code.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/policies/proxy-response-headers.md#_snippet_10

LANGUAGE: nginx
CODE:
```
add_header `<custom-header-name> <custom-header-value> [always]`
```

----------------------------------------

TITLE: Implementing HTTP Basic Authentication Nginx
DESCRIPTION: This snippet implements HTTP basic authentication for all methods except GET within the API location. It requires a username and password from the specified user file for PATCH, POST, and DELETE requests.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/monitoring/live-activity-monitoring.md#_snippet_10

LANGUAGE: nginx
CODE:
```
http {
    # ...
    server {
        listen 192.168.1.23;
        # ...
        location /api {
            limit_except GET {
                auth_basic "NGINX Plus API";
                auth_basic_user_file /path/to/passwd/file;
            }
            api   write=on;
            allow 192.168.1.0/24;
            deny  all;
        }
    }
}
```

----------------------------------------

TITLE: Create a Gateway (YAML)
DESCRIPTION: This YAML configuration defines a Gateway resource in Kubernetes. The gateway uses the `nginx` gateway class and listens on port 80 for HTTP traffic with a hostname of `*.example.com`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-management/upstream-settings.md#_snippet_3

LANGUAGE: yaml
CODE:
```
kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: gateway
spec:
  gatewayClassName: nginx
  listeners:
    - name: http
      port: 80
      protocol: HTTP
      hostname: "*.example.com"
EOF
```

----------------------------------------

TITLE: Configuring TLS Protocol Versions in NGINXaaS
DESCRIPTION: This snippet references the NGINX documentation on how to overwrite the default TLS/SSL policy in NGINX. It describes how to configure desired TLS protocol versions.  The configuration is done by overwriting the NGINX default protocol to configure the desired TLS/SSL policy, using the ssl_protocols directive.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/faq.md#_snippet_0

LANGUAGE: text
CODE:
```
Module ngx_http_ssl_module (http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_protocols)
```

----------------------------------------

TITLE: NGINX Full Configuration
DESCRIPTION: This snippet provides the full Nginx configuration for two web entry points, including user, worker processes, event settings, HTTP configuration, upstream servers, server configurations with SSL/TLS, proxy caching, and live activity monitoring. It defines upstream groups for load balancing between production and disaster recovery servers, and configures SSL termination and caching for each web entry point.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-e-business-suite.md#_snippet_41

LANGUAGE: nginx
CODE:
```
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log info;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type text/html;
    proxy_cache_path /var/oracle-cache-one
                     keys_zone=cache_oracle_one:50m max_size=500m;
    proxy_cache_path /var/oracle-cache-two
                     keys_zone=cache_oracle_two:50m max_size=500m;

    # Custom logging configuration
    log_format main '$remote_addr - $remote_user [$time_local]
                    "$request" $status $body_bytes_sent "$http_referer"
                    "$http_user_agent" $upstream_addr';
    access_log /var/log/nginx/access.log main;

    upstream oracle_one {
        zone oracle_one 64k;

        # Production servers
        server 172.31.11.210:8000 max_fails=0;
        server 172.31.0.146:8000 max_fails=0;

        # Disaster recovery servers
        server 172.33.111.210:8000 max_fails=0 backup;
        server 172.33.100.146:8000 max_fails=0 backup;

        # Session persistence
        sticky cookie ngxcookie;
    }

    upstream oracle_two {
        zone oracle_two 64k;

        # Production servers
        server 172.31.11.211:8000 max_fails=0;
        server 172.31.0.147:8000 max_fails=0;

        # Disaster recovery servers
        server 172.33.111.211:8000 max_fails=0 backup;
        server 172.33.100.147:8000 max_fails=0 backup;

        # Session persistence
        sticky cookie ngxcookie;
    }

    server {
        listen 80;
        status_zone oracle-http-redirect;
        return 302 https://$http_host$request_uri;
    }

    server {
        listen 192.168.210.10:443 ssl;
        http2  on;
        server_name oracle-one.company.com;
        ssl_certificate     /etc/nginx/ssl/server_one.crt;
        ssl_certificate_key /etc/nginx/ssl/server_one.key;
        ssl_protocols       TLSv1.2;
        status_zone oracle-ssl-one;
        proxy_cache cache_oracle_one;

        location / {
            proxy_pass http://oracle_one;
            proxy_set_header Host $host;
            proxy_cache_valid any 1h;
        }

        location @health_check {
            internal;
            proxy_connect_timeout 3s;
            proxy_read_timeout 3s;
            proxy_pass http://oracle_one;
            proxy_set_header Host "oracle-one.company.com";
            health_check match=oracleok interval=4s
                         uri=/OA_HTML/AppsLocalLogin.jsp;
        }
    }

    server {
        listen 192.168.210.11:443 ssl;
        http2  on;
        server_name oracle-two.company.com;
        ssl_certificate     /etc/nginx/ssl/server_two.crt;
        ssl_certificate_key /etc/nginx/ssl/server_two.key;
        ssl_protocols       TLSv1.2;
        status_zone oracle-ssl-two;
        proxy_cache cache_oracle_two;

        location / {
            proxy_pass http://oracle_two;
            proxy_set_header Host $host;
            proxy_cache_valid any 1h;
        }

        location @health_check {
            internal;
            proxy_connect_timeout 3s;
            proxy_read_timeout 3s;
            proxy_pass http://oracle_two;
            proxy_set_header Host "oracle-two.company.com";
            health_check match=oracleok interval=4s
                         uri=/OA_HTML/AppsLocalLogin.jsp;
        }
    }

    match oracleok {
        status 200-399;
        header X-ORACLE-DMS-ECID;
    }

    # Live activity monitoring configuration
    server {
        # Status zone required for live activity monitoring. Enable it for
        # every 'server' block in other configuration files.
        status_zone status-page;

        # If NGINX Plus is listening on multiple IP addresses, uncomment this
        # directive to restrict access to the live activity monitoring
        # dashboard to a single IP address (substitute the appropriate
        # address).
        # listen 10.2.3.4:8080;
        # Live activity monitoring is enabled on port 8080 by default.
        listen 8080;

        # HTTP Basic authentication is enabled by default. Use an htpasswd
        # generator to add users, or command-line and other management tools are
        # readily available online. If you have Apache HTTP Server installed, you
        # can reuse its htpasswd file.
        #auth_basic on;
        #auth_basic_user_file /etc/nginx/users;

        # Limit access to the dashboard to users on admin networks only.
        # Uncomment the "allow" directive and change the IP address.
        #allow 10.0.0.0/8;
        deny all;

        # Enable the NGINX Plus API for metrics collection.
        location /api {
            api write=on;
            access_log off;
        }

        # NGINX Plus includes a built-in dashboard.
        location = /dashboard.html {
            root /usr/share/nginx/html;
        }

        # Redirect requests made to the pre-R14 dashboard.
        location = /status.html {
            return 301 /dashboard.html;
        }

        # Standard HTTP features are fully supported with the dashboard.
        # Redirect request for '/' to '/dashboard.html'.
        location = / {
            return 301 /dashboard.html;
        }
    }
}

```

----------------------------------------

TITLE: Configure HTTPS proxy_pass in NGINX
DESCRIPTION: This snippet demonstrates how to configure the `proxy_pass` directive to use the HTTPS protocol, enabling SSL connections to the backend server.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/quickstart/security-controls/securing-upstream-traffic.md#_snippet_0

LANGUAGE: nginx
CODE:
```
location /upstream {
    proxy_pass https://backend.example.com;
}
```

----------------------------------------

TITLE: Configure gRPC HTTPS server with mTLS in Nginx
DESCRIPTION: Configures a gRPC HTTPS server with mTLS by setting up SSL certificates, enabling client certificate verification, and defining locations for metric ingestion and DPM services. Requires SSL certificates and keys to be generated and placed in `/etc/nms/certs/`. The `server_name` should match the CN or SAN in the server certificate.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/system-configuration/secure-traffic.md#_snippet_10

LANGUAGE: nginx
CODE:
```
# gRPC HTTPS server, needs port 443
    server {
        listen 443 ssl;
        http2  on;
        root   /var/www/nms;

        server_name nginx-instance-manager.example.com;

        ssl_protocols       TLSv1.1 TLSv1.2;
        ssl_ciphers         HIGH:!aNULL:!MD5;
        ssl_session_cache   shared:SSL:10m;
        ssl_session_timeout 10m;

        ssl_certificate         /etc/nms/certs/server.crt;
        ssl_certificate_key     /etc/nms/certs/server.key;
        ssl_client_certificate  /etc/nms/certs/ca.pem;
        ssl_verify_client on;

        # gRPC service for metric ingestion
        location /f5.nginx.agent.sdk.MetricsService {
            include /etc/nms/nginx/errors-grpc.loc_conf;
            grpc_socket_keepalive on;
            grpc_read_timeout 5m;
            grpc_send_timeout 5m;
            client_body_timeout 10m;
            grpc_pass grpc://ingestion-grpc-service;
        }

        # gRPC service for DPM
        location /f5.nginx.agent.sdk.Commander {
            include /etc/nms/nginx/errors-grpc.loc_conf;
            grpc_socket_keepalive on;
            grpc_read_timeout 5m;
            grpc_send_timeout 5m;
            client_body_timeout 10m;
            grpc_pass grpc://dpm-grpc-service;
        }
    }
```

----------------------------------------

TITLE: Configuring Upstream Server for HTTPS
DESCRIPTION: This example demonstrates how to configure an upstream server to accept HTTPS connections. It specifies the listening port (443) with `ssl`, and defines the paths to the server's SSL certificate and private key using `ssl_certificate` and `ssl_certificate_key` respectively, enabling secure communication.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/securing-http-traffic-upstream.md#_snippet_5

LANGUAGE: nginx
CODE:
```
server {
    listen              443 ssl;
    server_name         backend1.example.com;

    ssl_certificate     /etc/ssl/certs/server.crt;
    ssl_certificate_key /etc/ssl/certs/server.key;
    #...
    location /yourapp {
        proxy_pass https://url_to_app.com;
        #...
    }
}
```

----------------------------------------

TITLE: TrafficSplit Configuration for Target v1.0
DESCRIPTION: This YAML configuration defines a TrafficSplit resource named `target-ts` that directs 100% of traffic to the `target-v1-0` service. It is configured using SMI's TrafficSplit CRD, specifying the target service and the backends that will receive traffic, along with their respective weights. This configuration is used as a starting point before introducing newer versions of the application.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/tutorials/trafficsplit-deployments.md#_snippet_9

LANGUAGE: yaml
CODE:
```
apiVersion: split.smi-spec.io/v1alpha3
kind: TrafficSplit
metadata:
  name: target-ts
spec:
  service: target-svc
  backends:
  - service: target-v1-0
    weight: 100
```

----------------------------------------

TITLE: Reload Nginx Configuration - Bash
DESCRIPTION: Reloads the Nginx configuration using the `service nginx reload` command. This command applies the changes made to the Nginx configuration without interrupting service.
SOURCE: https://github.com/nginx/documentation/blob/main/content/controller/admin-guides/config-agent/configure-metrics-collection.md#_snippet_3

LANGUAGE: bash
CODE:
```
service nginx reload
```

----------------------------------------

TITLE: Configuring Single HTTP/HTTPS Server - NGINX
DESCRIPTION: This configuration allows a single NGINX server to handle both HTTP (port 80) and HTTPS (port 443) requests. The `listen` directives specify the ports and the `ssl` parameter enables HTTPS.  The `ssl_certificate` and `ssl_certificate_key` directives specify the paths to the SSL certificate and private key files respectively.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/terminating-ssl-http.md#_snippet_9

LANGUAGE: nginx
CODE:
```
server {
    listen              80;
    listen              443 ssl;
    server_name         www.example.com;
    ssl_certificate     www.example.com.crt;
    ssl_certificate_key www.example.com.key;
    #...
}
```

----------------------------------------

TITLE: Enabling NGINX Service for L4 Mitigation at Boot (Shell)
DESCRIPTION: This command enables the NGINX service to start automatically at boot. Although the surrounding text refers to `app-protect-dos-ebpf-manager`, the command explicitly targets `nginx.service`. This ensures the core NGINX functionality, which is a prerequisite for L4 mitigation, is always running.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/learn-about-deployment.md#_snippet_137

LANGUAGE: shell
CODE:
```
sudo systemctl enable nginx.service
```

----------------------------------------

TITLE: Inspect NGINX Configuration (Shell)
DESCRIPTION: This command executes `nginx -T` inside the NGINX Gateway Fabric pod to print the complete NGINX configuration. This allows verification of whether the `UpstreamSettingsPolicy` has been applied correctly to the NGINX configuration.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-management/upstream-settings.md#_snippet_12

LANGUAGE: shell
CODE:
```
kubectl exec -it -n nginx-gateway $NGF_POD_NAME -c nginx -- nginx -T
```

----------------------------------------

TITLE: Configuring NGINX Server Names for Host Matching
DESCRIPTION: This example illustrates how to define exact server names using the `server_name` directive within a `server` block. NGINX uses these names to match the `Host` header of incoming HTTP requests, allowing it to route requests for specific domains (e.g., example.org, www.example.org) to the correct virtual server.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/web-server.md#_snippet_2

LANGUAGE: nginx
CODE:
```
server {
    listen      80;
    server_name example.org www.example.org;
    #...
}
```

----------------------------------------

TITLE: Test NGINX Configuration
DESCRIPTION: This snippet provides the command to test the NGINX configuration file for syntax errors before reloading. It is essential to ensure that the configuration is valid before applying any changes.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/set-misc.md#_snippet_7

LANGUAGE: shell
CODE:
```
nginx -t
```

----------------------------------------

TITLE: Install NGINX Controller Agent with Non-Root User (Bash)
DESCRIPTION: This snippet demonstrates how to modify the curl or wget command to install the NGINX Controller Agent as a non-root user, including specifying the user and optional group. It utilizes API_KEY, instance name and instance location parameters for installation.
SOURCE: https://github.com/nginx/documentation/blob/main/content/controller/admin-guides/install/install-agent-non-root.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl -sS -L https://<controller FQDN>/install/controller-agent > install.sh && API_KEY='<API KEY>' CONTROLLER_USER='<non-root user>' CONTROLLER_GROUP='<optional group>' -i <instance name> -l <instance location>
```

----------------------------------------

TITLE: Removing SPIFFEID finalizers
DESCRIPTION: This command removes `finalizers` from each `spiffeid` resource within a given namespace, which resolves namespace deletion issues after removing NGINX Service Mesh.  The namespace must be specified in place of `<namespace>`. This allows the namespace to be fully removed.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/releases/release-notes-0.6.0.md#_snippet_2

LANGUAGE: bash
CODE:
```
kubectl patch spiffeid $SPIFFEIDS --type='merge' -p '{"metadata":{"finalizers":null}}' -n <namespace>
```

----------------------------------------

TITLE: Configuring NGINX with App Protect WAF
DESCRIPTION: This code configures the NGINX web server and integrates the NGINX App Protect WAF module. It sets parameters for user, worker processes, logging, event handling, HTTP server settings, and the App Protect enforcer address. This configuration prepares NGINX to handle web traffic and provides a base configuration for security rules.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/nginx-conf-hostname-docker.md#_snippet_0

LANGUAGE: nginx
CODE:
```
user  nginx;
worker_processes  auto;

# NGINX App Protect WAF
load_module modules/ngx_http_app_protect_module.so;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # NGINX App Protect WAF
    app_protect_enforcer_address waf-enforcer:50000;

    include /etc/nginx/conf.d/*.conf;
}
```

----------------------------------------

TITLE: Defining an HTTPRoute in YAML
DESCRIPTION: This YAML snippet defines an HTTPRoute named 'coffee' that matches requests with the path prefix '/coffee' for the hostname 'cafe.example.com'. It directs traffic to the 'coffee' backend service on port 80.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/monitoring/troubleshooting.md#_snippet_8

LANGUAGE: yaml
CODE:
```
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: coffee
spec:
  parentRefs:
    - name: gateway
      sectionName: http
  hostnames:
    - "cafe.example.com"
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /coffee
      backendRefs:
        - name: coffee
          port: 80
```

----------------------------------------

TITLE: Configuring Health Checks for Tomcat Application
DESCRIPTION: This snippet configures NGINX Plus to send out-of-band requests to the /tomcat-app/ URI every 2 seconds to check server health. It marks a server down if it fails once and brings it back up after five successful checks. Requires the proxy_pass and proxy_cache directives. Uses the tomcat_check match block to determine server health.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_30

LANGUAGE: nginx
CODE:
```
# In the 'server' block for HTTPS traffic
location /tomcat-app/ {
    proxy_pass http://tomcat;
    proxy_cache backcache;
    health_check interval=2s fails=1 passes=5 uri=/ match=tomcat_check;
}
```

----------------------------------------

TITLE: Create HTTPRoutes for Coffee and Tea (YAML)
DESCRIPTION: This YAML configuration creates two HTTPRoute resources, `coffee` and `tea`.  Each route is associated with the `gateway` and forwards traffic to the respective backend service based on the path `/coffee` or `/tea` and the hostname `cafe.example.com`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-management/upstream-settings.md#_snippet_4

LANGUAGE: yaml
CODE:
```
kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: coffee
spec:
  parentRefs:
    - name: gateway
      sectionName: http
  hostnames:
    - "cafe.example.com"
  rules:
    - matches:
        - path:
            type: Exact
            value: /coffee
      backendRefs:
        - name: coffee
          port: 80
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: tea
spec:
  parentRefs:
    - name: gateway
      sectionName: http
  hostnames:
    - "cafe.example.com"
  rules:
    - matches:
        - path:
            type: Exact
            value: /tea
      backendRefs:
        - name: tea
          port: 80
EOF
```

----------------------------------------

TITLE: Configuring NGINX Security Log with Custom Escaping and List Formatting (JSON)
DESCRIPTION: This JSON configuration defines how NGINX App Protect WAF logs security events. It sets the log format to 'default', specifies maximum request and message sizes, and customizes character escaping (replacing '/' with '|') and list formatting (using '[' as prefix, '::' as delimiter, and ']' as suffix). This ensures specific characters are transformed and lists are presented in a custom bracketed, double-colon-separated format.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/logging-overview/security-log.md#_snippet_6

LANGUAGE: json
CODE:
```
{
    "filter": {
        "request_type": "all"
    },
    "content": {
        "format": "default",
        "max_request_size": "2k",
        "max_message_size": "32k",
        "escaping_characters": [
            {
                "from": "/",
                "to": "|"
            }
        ],
        "list_prefix": "[",
        "list_delimiter": "::",
        "list_suffix": "]"
    }
}
```

----------------------------------------

TITLE: Configuring Security Log with Escaped Characters and Custom List Format (JSON)
DESCRIPTION: This JSON configuration defines how NGINX App Protect WAF should log security events. It sets the `request_type` to `all`, specifies `default` content format, and customizes log message sizes. Crucially, it configures character escaping to replace '/' with '|' and defines custom prefixes, delimiters, and suffixes for list elements in the log output, such as `[first::second::third]`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v4/logging-overview/security-log.md#_snippet_11

LANGUAGE: json
CODE:
```
{
    "filter": {
        "request_type": "all"
    },
    "content": {
        "format": "default",
        "max_request_size": "2k",
        "max_message_size": "5k",
        "escaping_characters": [
      	    {
                "from": "/",
                "to": "|"
            }
        ],
        "list_prefix": "[",
        "list_delimiter": "::",
        "list_suffix": "]"
    }
}
```

----------------------------------------

TITLE: Define Upstream Server Group - Nginx
DESCRIPTION: This Nginx configuration block defines an upstream server group named `appservers`.  It includes several server directives specifying the backend servers and their associated parameters like weight, fail_timeout, and backup status. This configuration lacks the `zone` directive, which is essential for dynamic configuration with the Nginx Plus API.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/dynamic-configuration-api.md#_snippet_0

LANGUAGE: nginx
CODE:
```
http {
    # ...
    upstream appservers {
        server appserv1.example.com      weight=5;
        server appserv2.example.com:8080 fail_timeout=5s;
        server reserve1.example.com:8080 backup;
        server reserve2.example.com:8080 backup;
    }

    server {
    # Location that proxies requests to the upstream group
        location / {
            proxy_pass http://appservers;
            health_check;
         }
    }
}
```

----------------------------------------

TITLE: Using the Chained Certificate in Nginx
DESCRIPTION: This snippet shows how to configure Nginx to use the chained SSL certificate file created in the previous step. The `ssl_certificate` directive is updated to point to the chained certificate file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/terminating-ssl-http.md#_snippet_7

LANGUAGE: nginx
CODE:
```
server {
    listen              443 ssl;
    server_name         www.example.com;
    ssl_certificate     www.example.com.chained.crt;
    ssl_certificate_key www.example.com.key;
    #...
}
```

----------------------------------------

TITLE: Configuring WebSocket Proxy
DESCRIPTION: This configuration snippet sets up NGINX to correctly proxy WebSocket connections to a WebLogic Server backend. It defines a map to set the Connection header based on the presence of the Upgrade header and configures the proxy to use HTTP/1.1 and forward the Upgrade and Connection headers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-weblogic-server.md#_snippet_20

LANGUAGE: nginx
CODE:
```
# In the 'http' block
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# In the 'server' block for HTTPS traffic
location /wstunnel/ {
    proxy_pass http://weblogic;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
}
```

----------------------------------------

TITLE: NGINX Configuration for Serving Static Content
DESCRIPTION: This Nginx configuration sets up a simple web server that listens on port 80 and serves static content from the `/srv` directory.  It configures the root directory and sets `index.html` as the default index file. This configuration is required to tell Nginx where to find and how to serve the static files.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/quickstart/hosting-static-content.md#_snippet_0

LANGUAGE: nginx
CODE:
```
http {
	server {
		listen 80;
		location / {
			root /srv;
			index index.html;
		}
	}
}
```

----------------------------------------

TITLE: Defining Key-Value Zone in Nginx
DESCRIPTION: This configuration defines a key-value zone named 'one' with a size of 1MB. It's used to store the list of denylisted and allowlisted IP addresses. The `type=ip` parameter enables matching IP addresses against subnets/network ranges, and `state=one.keyval` persists the database across reloads and restarts.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/denylisting-ip-addresses.md#_snippet_0

LANGUAGE: nginx
CODE:
```
http {
    # ...
    keyval_zone zone=one:1m;
 }
```

----------------------------------------

TITLE: Configuring Proxy Cache Path in NGINX
DESCRIPTION: This Nginx configuration block sets the path for the proxy cache, defining levels, keys zone, and maximum size.  It is used for caching JWTs and requires a directory accessible to the Nginx worker processes.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/quickstart/security-controls/oidc.md#_snippet_1

LANGUAGE: nginx
CODE:
```
proxy_cache_path /var/cache/nginx/jwt levels=1 keys_zone=jwk:64k max_size=1m;
```

----------------------------------------

TITLE: Configure HTTPS server with SSL certificate and key
DESCRIPTION: This snippet demonstrates how to configure an HTTPS server with SSL certificate and key. The `ssl_certificate` and `ssl_certificate_key` directives specify the paths to the server certificate and private key, respectively. These files must be added to the NGINXaaS Deployment.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/quickstart/security-controls/securing-upstream-traffic.md#_snippet_3

LANGUAGE: nginx
CODE:
```
server {
    listen              443 ssl;
    server_name         backend1.example.com;

    ssl_certificate     /etc/ssl/certs/server.crt;
    ssl_certificate_key /etc/ssl/certs/server.key;
    #...
    location /upstream {
        proxy_pass http://url_to_app.com;
        # ...
    }
}
```

----------------------------------------

TITLE: Configuring WebSocket Proxying with Nginx
DESCRIPTION: This snippet configures Nginx as a reverse proxy for WebSocket connections to a Tomcat application. It sets necessary headers for WebSocket communication, including `Upgrade` and `Connection`, and defines the target server for the proxy.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_20

LANGUAGE: nginx
CODE:
```
location /wstunnel/ {
    proxy_pass http://tomcat;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
}
```

----------------------------------------

TITLE: Configuring Virtual Server on NGINX Plus
DESCRIPTION: This code snippet shows how to configure a virtual server in NGINX Plus to listen on port 80 and proxy traffic to an upstream pool.  It defines an upstream block with two servers and a server block that listens on a specific IP and port.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/migrate-hardware-adc/f5-big-ip-configuration.md#_snippet_1

LANGUAGE: nginx
CODE:
```
http {
    upstream test_pool {
        server 10.10.10.10:80;
        server 10.10.10.20:80;
    }

    server {
        listen 192.168.10.10:80;
        location / {
            proxy_pass http://test_pool;
        }
        #...
     }
 }
```

----------------------------------------

TITLE: Installing NGINX on Alpine
DESCRIPTION: This command installs the NGINX web server package using the apk package manager. It downloads and installs the package along with its dependencies.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/installing-nginx/installing-nginx-open-source.md#_snippet_43

LANGUAGE: shell
CODE:
```
sudo apk add nginx
```

----------------------------------------

TITLE: Test NGINX Configuration
DESCRIPTION: This shell command tests the NGINX configuration file for syntax errors and general validity. It is used to verify the configuration before reloading NGINX.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/perl.md#_snippet_7

LANGUAGE: shell
CODE:
```
nginx -t
```

----------------------------------------

TITLE: Complete Example: Authentication and IP Restriction in Nginx
DESCRIPTION: This is a complete Nginx configuration example that demonstrates how to protect a specific location (`/api`) with both HTTP Basic authentication and IP address-based access control. It includes setting up the server, defining IP address restrictions, and configuring the authentication prompt and user file. It uses `satisfy all` which means that both conditions need to be met.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-http-basic-authentication.md#_snippet_8

LANGUAGE: nginx
CODE:
```
http {
    server {
        listen 192.168.1.23:8080;
        root   /usr/share/nginx/html;

        location /api {
            api;
            satisfy all;

            deny  192.168.1.2;
            allow 192.168.1.1/24;
            allow 127.0.0.1;
            deny  all;

            auth_basic           "Administrator’s Area";
            auth_basic_user_file /etc/apache2/.htpasswd;
        }
    }
}
```

----------------------------------------

TITLE: Configuring PROXY Protocol and RewriteClientIP with NginxProxy (YAML)
DESCRIPTION: This example demonstrates configuring `RewriteClientIP` settings within the `NginxProxy` resource to preserve the original client IP address when requests pass through multiple proxies. It sets the `mode` to `ProxyProtocol` and specifies a `trustedAddresses` CIDR, ensuring NGINX correctly identifies the source IP from trusted proxies.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/data-plane-configuration.md#_snippet_9

LANGUAGE: yaml
CODE:
```
kubectl apply -f - <<EOF
apiVersion: gateway.nginx.org/v1alpha1
kind: NginxProxy
metadata:
  name: ngf-proxy-config
spec:
  config:
    rewriteClientIP:
      mode: ProxyProtocol
      trustedAddresses:
      - type: CIDR
        value: "76.89.90.11/24"
EOF
```

----------------------------------------

TITLE: Configuring Server Weights in NGINX
DESCRIPTION: This snippet configures server weights for an NGINX upstream, distributing requests based on the specified `weight` parameter. `backend1.example.com` receives 5 out of 6 requests, while `backend2.example.com` receives 1. `192.0.0.1` acts as a backup server, only receiving requests when the other servers are unavailable.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/http-load-balancer.md#_snippet_10

LANGUAGE: nginx
CODE:
```
upstream backend {
    server backend1.example.com weight=5;
    server backend2.example.com;
    server 192.0.0.1 backup;
}
```

----------------------------------------

TITLE: Pulling NGINX Plus with NGINX Agent Image (Shell)
DESCRIPTION: This command pulls the NGINX Plus container image that includes the NGINX Agent, designed for enhanced monitoring and management. The <version-tag> placeholder should be replaced with the specific NGINX Plus version.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/installing-nginx/installing-nginx-docker.md#_snippet_5

LANGUAGE: Shell
CODE:
```
docker pull private-registry.nginx.com/nginx-plus/agent:<version-tag>
```

----------------------------------------

TITLE: OpenAPI Specification for NGINX Controller WorkloadGroup
DESCRIPTION: This OpenAPI Specification provides the detailed schema for `WebWorkloadGroup`, `TcpUdpWorkloadGroup`, `WorkloadGroupCommon`, and `WorkloadUri` objects, which are missing from the NGINX Controller REST API guide. It defines the structure, properties, and relationships for configuring workload groups in NGINX Controller, including proxy settings, session persistence, and URI formats for both web and TCP/UDP applications.
SOURCE: https://github.com/nginx/documentation/blob/main/content/controller/releases/release-notes.md#_snippet_0

LANGUAGE: YAML
CODE:
```
WebWorkloadGroup:
        description: Group of servers hosting a part of a Web application represented by a Component.
        allOf:
          - $ref: '#/components/schemas/WorkloadGroupCommon' # Settings common to Web and TCP/UDP workloadGroups.
          - type: object
            properties:
              proxy:
                $ref: '#/components/schemas/WebProxy' # Proxy retry and timeout settings applicable to servers in a Web workloadGroup.
              sessionPersistence:
                $ref: '#/components/schemas/SessionPersistence' # SessionPersistence settings in a Web workloadGroup.
              uris:
                type: object
                description: |
                  The URI for a server hosting a part of a Web application.
                  It must conform to the format `schema://address[:port]`
                  where schema is chosen from http or https, address is IP or hostname,
                  schema and address must be provided.
                  For example:
                  - `http://192.0.2.247`
                  - `https://192.0.2.247:8443`
                  - `https://www.f5workload.com`
                additionalProperties:
                  $ref: '#/components/schemas/WorkloadUri'
  TcpUdpWorkloadGroup:
        description: Group of servers hosting a part of a TCP/UDP application represented by a Component.
        allOf:
          - $ref: '#/components/schemas/WorkloadGroupCommon' # Settings common to Web and TCP/UDP workloadGroups.
          - type: object
            properties:
              proxy:
                $ref: '#/components/schemas/TcpUdpProxy' # Proxy retry and timeout settings applicable to servers in a TcpUdp workloadGroup.
              uris:
                type: object
                description: |
                  The URI for a server hosting a part of a TCP/UDP application.
                  The URI must conform to the format `schema://address:port`
                  where schema is chosen from tcp, udp, or tcp+tls, address is IP or hostname.
                  All three of schema, address, and port must be provided.
                  For example:
                  - `tcp://192.0.2.247:8443`
                  - `tcp+tls://192.0.2.247:8449`
                  - `udp://www.f5workload.com:989`
                additionalProperties:
                  $ref: '#/components/schemas/WorkloadUri'
      WorkloadGroupCommon:
        description: Settings common to Web and TCP/UDP workloadGroups.
        type: object
        properties:
          locationRefs:
            type: array
            items:
              $ref: 'https://gitlab.com/f5/nginx/controller/product/api-common/raw/master/schema/resource-common.yaml#/components/schemas/ResourceRef'
          loadBalancingMethod:
            $ref: '#/components/schemas/LoadBalancingMethod'
          dnsServiceDiscovery:
            $ref: '#/components/schemas/DNSServiceDiscovery'
      WorkloadUri:
        type: object
        properties:
          weight:
            type: integer
            minimum: 1
            default: 1
          maxConns:
            type: integer
            minimum: 0
            default: 0
          maxFails:
            type: integer
            minimum: 0
            default: 1
          failTimeout:
            x-f5-experimental: true
            type: string
            default: 10s
            pattern: '^[0-9]+[h|m|s]{1}$'
          isBackup:
            type: boolean
            default: false
          isDown:
            type: boolean
            default: false
          route:
            x-f5-experimental: true
            type: string
          srvService:
            type: string
          slowStart:
            x-f5-experimental: true
            type: integer
            minimum: 0
            default: 0
          isDrain:
            type: boolean
            default: false
```

----------------------------------------

TITLE: NGINX Reload Command
DESCRIPTION: This command reloads the NGINX configuration without restarting the server. This is used to apply configuration changes made to the NGINX configuration file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/releases/known-issues.md#_snippet_9

LANGUAGE: bash
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Enabling NGINX Caching for a Server Block
DESCRIPTION: This configuration snippet extends the previous example by enabling caching for a specific server block. It includes the `proxy_cache` directive within the `server` context, referencing the `mycache` zone defined earlier. All requests proxied through the `/` location to `http://localhost:8000` will now utilize the defined cache.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/content-cache/content-caching.md#_snippet_1

LANGUAGE: nginx
CODE:
```
http {
    # ...
    proxy_cache_path /data/nginx/cache keys_zone=mycache:10m;
    server {
        proxy_cache mycache;
        location / {
            proxy_pass http://localhost:8000;
        }
    }
}
```

----------------------------------------

TITLE: gRPC Bidirectional Stream Definition (protobuf)
DESCRIPTION: Defines a gRPC service method where both the client and server send and receive streams of messages. The client and server can send messages independently. This uses the protobuf syntax.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/how-to/bidirectional-configuration.md#_snippet_2

LANGUAGE: shell
CODE:
```
rpc BidiHello(stream HelloRequest) returns (stream HelloResponse);
```

----------------------------------------

TITLE: Defining Custom NGINX Log Format for TLS Parameters
DESCRIPTION: This NGINX configuration snippet defines a custom log format named `sslparams`. It captures the SSL protocol version (`$ssl_protocol`), the cipher used (`$ssl_cipher`), the client's remote IP address (`$remote_addr`), and the `User-Agent` HTTP header (`$http_user_agent`). This format is used for logging detailed TLS connection information to assess client compatibility.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/monitoring/logging.md#_snippet_4

LANGUAGE: nginx
CODE:
```
log_format sslparams '$ssl_protocol $ssl_cipher '
                     '$remote_addr "$http_user_agent"';
```

----------------------------------------

TITLE: Prometheus Query for P90 Latency (Excluding 301)
DESCRIPTION: This Prometheus query calculates the p90 latency of requests, excluding 301 responses, sent from `productpage-v1` in the `prod` namespace to the `details` service, calculated over 30 seconds. It relies on `nginxplus_upstream_server_response_latency_ms_bucket`, filtering by namespace, deployment, destination service, and excluding 301 response codes.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/guides/prometheus-metrics.md#_snippet_11

LANGUAGE: promQL
CODE:
```
histogram_quantile(0.90, sum(irate(nginxplus_upstream_server_response_latency_ms_bucket{namespace="prod",deployment="productpage-v1",dst_service="details",code!="301"}[30s])) by (le))
```

----------------------------------------

TITLE: Updating Deployment YAML for mTLS Configuration
DESCRIPTION: This YAML configuration defines a Kubernetes deployment for NGINX App Protect, including the NGINX instance, WAF Enforcer, and WAF Config Manager. It mounts the `enforcer-certificates` secret as a volume, sets environment variables for the enforcer to point to the certificate and key files, and configures necessary image pull secrets, volumes, and volume mounts.  The containers use the mounted certificates to establish a secure mTLS connection.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/nap-k8s-mtls-deployment.md#_snippet_1

LANGUAGE: yaml
CODE:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nap5-deployment
spec:
  selector:
    matchLabels:
      app: nap5
  replicas: 2
  template:
    metadata:
      labels:
        app: nap5
    spec:
      imagePullSecrets:
          - name: regcred
      containers:
        - name: nginx
          image: <your-private-registry>/nginx-app-protect-5:<your-tag>
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: app-protect-bd-config
              mountPath: /opt/app_protect/bd_config
            - name: app-protect-config
              mountPath: /opt/app_protect/config
            - name: certs
              mountPath: /etc/ssl/certs
              readOnly: true
            - name: waf-enforcer
              image: private-registry.nginx.com/nap/waf-enforcer:<version-tag>
              imagePullPolicy: IfNotPresent
              env:
                - name: ENFORCER_PORT
                  value: "4431"
                - name: ENFORCER_SERVER_CERT
                  value: "/etc/ssl/certs/app_protect_server.crt"
                - name: ENFORCER_SERVER_KEY
                  value: "/etc/ssl/certs/app_protect_server.key"
                - name: ENFORCER_CA_FILE
                  value: "/etc/ssl/certs/app_protect_client_ca.crt"
              volumeMounts:
                - name: app-protect-bd-config
                  mountPath: /opt/app_protect/bd_config
                - name: certs
                  mountPath: /etc/ssl/certs
                  readOnly: true
            - name: waf-config-mgr
              image: private-registry.nginx.com/nap/waf-config-mgr:<version-tag>
              imagePullPolicy: IfNotPresent
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - all
              volumeMounts:
                - name: app-protect-bd-config
                  mountPath: /opt/app_protect/bd_config
                - name: app-protect-config
                  mountPath: /opt/app_protect/config
                - name: app-protect-bundles
                  mountPath: /etc/app_protect/bundles
          volumes:
            - name: app-protect-bd-config
              emptyDir: {}
            - name: app-protect-config
              emptyDir: {}
            - name: app-protect-bundles
              persistentVolumeClaim:
                claimName: nap5-bundles-pvc
            - name: certs
              secret:
                secretName: enforcer-certificates
```

----------------------------------------

TITLE: Introspection Policy Configuration (JSON)
DESCRIPTION: This JSON snippet represents the configuration for an introspection policy. It defines how NGINX will verify claims in the introspected token, including the claim name, data type, and expected value. The configuration specifies the introspection endpoint, response type and verification rules for claims like `aud`, `scope`, `acr`, `email_verified`, and `resource_access.account.roles`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/tutorials/introspection-keycloak.md#_snippet_52

LANGUAGE: json
CODE:
```
{
    "name": "test-proxy",
    "version": "v1",
    "proxyConfig": {
        "hostname": "data-host",
        "ingress": {
            "basePath": "/",
            "basePathVersionAppendRule": "NONE"
        },
        "backends": [
            {
                "serviceName": "backend-echo-svc",
                "serviceTargets": [
                    {
                        "hostname": "192.0.2.4",
                        "listener": {
                            "enableTLS": false,
                            "port": 10000,
                            "transportProtocol": "HTTP"
                        }
                    }
                ]
            }
        ],
        "policies": {
            "oauth2-introspection": [
                {
                    "action": {
                        "introspectionEndpoint": "http://192.0.2.5:8080/realms/nginx/protocol/openid-connect/token/introspect",
                        "introspectionResponse": "application/json",
                        "verifyClaims": [
                            {
                                "claim": "aud",
                                "type": "STRING",
                                "value": "account"
                            },
                            {
                                "claim": "scope",
                                "type": "STRING",
                                "value": "openid profile email",
                                "delimiter": "SPACE"
                            },
                            {
                                "claim": "acr",
                                "type": "INTEGER",
                                "value": 1
                            },
                            {
                                "claim": "email_verified",
                                "type": "BOOLEAN",
                                "value": true
                            },
                            {
                                "claim": "resource_access.account.roles",
                                "type": "ARRAY",
                                "value": [
                                    "manage-account",
                                    "manage-account-links",
                                    "view-profile"
                                ]
                            }
                        ]
                    },
                    "data": [
                        {
                            "clientAppID": "nginx-plus",
                            "clientSecret": "<client secret>"
                        }
                    ]
                }
            ]
        }
    }
}
```

----------------------------------------

TITLE: Setting Global Cache Validity in NGINX
DESCRIPTION: This snippet configures a global cache validity period for all HTTP status codes using the `proxy_cache_valid` directive with the `any` parameter. All cached responses will be considered valid for 5 minutes, providing a general freshness policy for the cache.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/content-cache/content-caching.md#_snippet_7

LANGUAGE: Nginx
CODE:
```
proxy_cache_valid any 5m;
```

----------------------------------------

TITLE: Start Nginx Agent (systemctl)
DESCRIPTION: This command starts the nginx-agent service using systemctl.
SOURCE: https://github.com/nginx/documentation/blob/main/content/agent/installation-upgrade/upgrade.md#_snippet_3

LANGUAGE: shell
CODE:
```
sudo systemctl start nginx-agent
```

----------------------------------------

TITLE: Configuring NGINX Stream SSL Proxy for Upstream Servers
DESCRIPTION: This NGINX configuration snippet demonstrates how to set up a stream block to proxy TCP traffic to multiple backend servers with SSL/TLS encryption. It defines an 'upstream' group for load balancing and a 'server' block that listens for incoming connections, enabling SSL for the proxy connection, specifying certificate paths, protocols, ciphers, and enabling certificate verification and session reuse for secure and efficient communication with the backend.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/securing-tcp-traffic-upstream.md#_snippet_5

LANGUAGE: nginx
CODE:
```
stream {

    upstream backend {
        server backend1.example.com:12345;
        server backend2.example.com:12345;
        server backend3.example.com:12345;
   }

    server {
        listen     12345;
        proxy_pass backend;
        proxy_ssl  on;

        proxy_ssl_certificate         /etc/ssl/certs/backend.crt;
        proxy_ssl_certificate_key     /etc/ssl/certs/backend.key;
        proxy_ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
        proxy_ssl_ciphers             HIGH:!aNULL:!MD5;
        proxy_ssl_trusted_certificate /etc/ssl/certs/trusted_ca_cert.crt;

        proxy_ssl_verify        on;
        proxy_ssl_verify_depth  2;
        proxy_ssl_session_reuse on;
    }
}
```

----------------------------------------

TITLE: YAML Snippet for ImagePullSecrets
DESCRIPTION: This YAML snippet demonstrates how to inject `imagePullSecrets` into a Pod's specification. This ensures that Kubernetes will use the specified secret to pull images from the private registry. The `name` refers to the Kubernetes Secret containing the registry credentials.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/guides/private-registry.md#_snippet_5

LANGUAGE: yaml
CODE:
```
imagePullSecrets:
- name: nginx-mesh-registry-key
```

----------------------------------------

TITLE: Complete Nested JWT Example - Nginx Configuration
DESCRIPTION: This configuration provides a complete example of handling nested JWTs. It defines an upstream block, sets the `auth_jwt_type` to `nested`, specifies the key file, and passes the decrypted JWT payload to the backend application via the `Authorization` header.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-jwt-authentication.md#_snippet_16

LANGUAGE: nginx
CODE:
```
upstream api_server {
    server 10.0.0.1;
    server 10.0.0.2;
}

http {
    server {
        listen 80;

        auth_jwt          "API";
        auth_jwt_type     nested;
        auth_jwt_key_file conf/api_secret.jwk;

        proxy_pass       http://api_server;
        proxy_set_header Authorization "Bearer $jwt_payload";
    }
}
```

----------------------------------------

TITLE: Configuring SSL Protocols and Ciphers
DESCRIPTION: This snippet demonstrates how to configure SSL protocols and ciphers for the TCP stream to ensure a secure connection. It utilizes the `ssl_protocols` and `ssl_ciphers` directives to limit connections to strong versions and ciphers of SSL/TLS.  This helps prevent the use of weaker, more vulnerable protocols and ciphers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/terminating-ssl-tcp.md#_snippet_2

LANGUAGE: nginx
CODE:
```
server {
    #...
    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers    HIGH:!aNULL:!MD5;
}
```

----------------------------------------

TITLE: Configuring X-Content-Type-Options header in Nginx
DESCRIPTION: This snippet configures the X-Content-Type-Options header to prevent MIME sniffing. Setting it to 'nosniff' instructs the browser to strictly adhere to the MIME types specified in the Content-Type headers, avoiding potential security vulnerabilities.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/policies/proxy-response-headers.md#_snippet_2

LANGUAGE: nginx
CODE:
```
add_header X-Content-Type-Options nosniff [always]
```

----------------------------------------

TITLE: Get OpenID Configuration with curl
DESCRIPTION: This command retrieves the OpenID Connect configuration metadata from Auth0 using curl. It requires the tenant ID and optionally uses jq for formatting the JSON output.  The output includes the issuer, authorization endpoint, token endpoint, and jwks_uri.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/auth0.md#_snippet_0

LANGUAGE: shell
CODE:
```
curl https://yourTenantId.us.auth0.com/.well-known/openid-configuration | jq
```

----------------------------------------

TITLE: Enabling SSL/TLS for TCP Proxying in NGINX
DESCRIPTION: This snippet demonstrates how to enable SSL/TLS encryption for TCP traffic proxied by NGINX to an upstream `backend` server. The `proxy_ssl on;` directive within the `server` block at the `stream` level activates SSL/TLS for the connection to the upstream. It requires NGINX to be compiled with `with-stream` and `with-stream_ssl_module`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/securing-tcp-traffic-upstream.md#_snippet_0

LANGUAGE: nginx
CODE:
```
stream {
    server {
        ...
        proxy_pass backend;
        proxy_ssl  on;
    }
}
```

----------------------------------------

TITLE: Bypassing Cache in NGINX
DESCRIPTION: This snippet uses the `proxy_cache_bypass` directive to specify conditions under which NGINX Plus will not serve a cached response. If the `$cookie_nocache` variable, or the combined `$arg_nocache$arg_comment` variable, is non-empty and not '0', the request will be forwarded directly to the backend server, ensuring fresh content.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/content-cache/content-caching.md#_snippet_8

LANGUAGE: Nginx
CODE:
```
proxy_cache_bypass $cookie_nocache $arg_nocache$arg_comment;
```

----------------------------------------

TITLE: Applying OpenID Connect Policy via REST API with JSON Payload
DESCRIPTION: This JSON snippet defines an OpenID Connect (OIDC) authorization policy, specifying endpoints for authorization, token, and user info services, along with URIs for login, logout, and redirect. It configures the client ID, scopes, and error handling, returning 403 for no match and 401 when data is not supplied.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/policies/openID-connect.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "policies": {
    "oidc-authz": [
      {
        "action": {
          "authFlowType": "PKCE",
          "authorizationEndpoint": "https://<IDP Domain>/v1/Authorize",
          "jwksURI": "https://<IDP Domain>/v1/keys",
          "logOffEndpoint": "https://<IDP Domain>/v1/logout",
          "tokenEndpoint": "https://<IDP Domain>/v1/Token",
          "userInfoEndpoint": "https://<IDP Domain>/v1/userinfo",
          "uris": {
            "loginURI": "/login",
            "logoutURI": "/logout",
            "redirectURI": "/_codexch",
            "userInfoURI": "/userinfo"
          },
          "returnTokenToClientOnLogin": "none",
          "forwardTokenToBackend": "access_token",
          "errorReturnConditions": {
            "noMatch": {
              "returnCode": 403
            },
            "notSupplied": {
              "returnCode": 401
            }
          }
        },
        "data": [
          {
            "clientID": "myclientID1234",
            "scopes": "email+openid+profile"
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Including Feature-Specific NGINX Configuration Files
DESCRIPTION: This snippet shows how to use the `include` directive to incorporate external configuration files into the main `nginx.conf`. This practice helps organize the configuration by splitting it into feature-specific files, improving maintainability and readability.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/basic-functionality/managing-configuration-files.md#_snippet_1

LANGUAGE: nginx
CODE:
```
include conf.d/http;
include conf.d/stream;
include conf.d/exchange-enhanced;
```

----------------------------------------

TITLE: Reload Nginx configuration
DESCRIPTION: Reloads the Nginx configuration using the `nginx -s reload` command. This command applies changes to the Nginx configuration without interrupting service.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/system-configuration/secure-traffic.md#_snippet_11

LANGUAGE: bash
CODE:
```
sudo nginx -s reload
```

----------------------------------------

TITLE: Reloading NGINX configuration
DESCRIPTION: This shell command reloads the Nginx configuration, applying any changes made to the configuration file without restarting the server.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/fips.md#_snippet_9

LANGUAGE: shell
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Building NGINX Image with Defined Volumes (Dockerfile)
DESCRIPTION: This Dockerfile extends the NGINX base image by copying custom content and configuration files, and crucially, defines Docker volumes for /usr/share/nginx/html and /etc/nginx. These volumes ensure that data in these directories can be shared and persisted, enabling easier management via helper containers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/installing-nginx/installing-nginx-docker.md#_snippet_26

LANGUAGE: dockerfile
CODE:
```
FROM nginx
COPY content /usr/share/nginx/html
COPY conf /etc/nginx
VOLUME /usr/share/nginx/html
VOLUME /etc/nginx
```

----------------------------------------

TITLE: Configuring NGINX Plus Load Balancer
DESCRIPTION: This Nginx configuration block configures a load balancer. It defines an upstream group named 'backend-servers' containing two backend servers.  The server block proxies requests to the upstream group.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/amazon-web-services/route-53-global-server-load-balancing.md#_snippet_9

LANGUAGE: Nginx
CODE:
```
upstream backend-servers {
    server <public DNS name of Backend 1>; # Backend 1
    server <public DNS name of Backend 2>; # Backend 2
}
server {
    location / {
        proxy_pass http://backend-servers;
    }
}
```

----------------------------------------

TITLE: Protect Location with OIDC
DESCRIPTION: This snippet protects a specific location with OIDC using the `auth_oidc` directive. It points to the previously defined OIDC provider `my_idp`. Any requests to this location will be authenticated against the configured IdP.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-oidc.md#_snippet_6

LANGUAGE: nginx
CODE:
```
# ...
location / {
     auth_oidc my_idp;

     # ...

     proxy_pass http://127.0.0.1:8080;

}
# ...
```

----------------------------------------

TITLE: Add TLS Policies to External Developer Portal - JSON
DESCRIPTION: This JSON configuration defines the TLS policies to be added to the external developer portal, including both TLS inbound and TLS backend policies.  It specifies cipher suites, protocols, session cache settings, server certificates, and client certificates. The `{{environmentName}}`, `{{portalInstanceGName}}`, `{{portalEnvironmentHostname}}`, `{{tlsServerKey}}`, `{{tlsServerCert}}`, `{{caCert}}`, `{{tlsClientKey}}`, and `{{tlsClientCert}}` are placeholders for the actual environment details and certificate data.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/policies/tls-policies.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "name": "{{environmentName}}",
    "functions": [
        "DEVPORTAL"
    ],
    "proxies": [
        {
            "proxyClusterName": "{{portalInstanceGName}}",
            "hostnames": [
                "{{portalEnvironmentHostname}}"
            ],
            "runtime": "PORTAL-PROXY",
            "policies": {
                "tls-inbound": [
                    {
                        "action": {
                            "cipher": "ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5",
                            "protocols": [
                                "TLSv1.2"
                            ],
                            "sessionCache": {
                                "enable": "on",
                                "size": "10M",
                                "type": "shared"
                            },
                            "sessionTimeout": "5m"
                        },
                        "data": {
                            "trustedRootCACerts": {
                                    "clientId": "clientId1",
                                    "cert": "{{}}"
                            },
                            "serverCerts": [
                                {
                                    "key": {{tlsServerKey}},
                                    "cert": {{tlsServerCert}}
                                }
                            ]
                        }
                    }
                ],
                "tls-backend": [
                    {
                        "action": {
                            "cipher": "HIGH:!aNULL:!MD5",
                            "sessionReuse": false,
                            "proxyServerName": false,
                            "protocols": [
                                "TLSv1.2"
                            ]
                        },
                        "data": {
                            "trustedRootCACerts":"{{caCert}}",
                            "clientCerts": [
                                {
                                    "key": {{tlsClientKey}},
                                    "cert": {{tlsClientCert}}
                                }
                            ]
                        }
                    }
                ]
            }
        }
    ]
}
```

----------------------------------------

TITLE: Redirecting 404 Errors to a New URL with 301 in NGINX
DESCRIPTION: This NGINX configuration handles `404` errors for a specific URI (`/old/path.html`) by substituting the error code with `301` and redirecting the client to a new URL (`http:/example.com/new/path.html`). This is useful for permanently moved content, informing browsers to update their cached links.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/web-server.md#_snippet_15

LANGUAGE: Nginx
CODE:
```
location /old/path.html {
    error_page 404 =301 http:/example.com/new/path.html;
}
```

----------------------------------------

TITLE: Restricting Access to NGINX Plus API
DESCRIPTION: This snippet restricts access to the NGINX Plus API location. It uses `limit_except` to require authentication for all methods except GET, and `allow` and `deny` directives to restrict access by IP address.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/high-availability/zone_sync.md#_snippet_13

LANGUAGE: nginx
CODE:
```
# ...
    server {
        listen 80;
        server_name www.example.com;

        location /api {
            limit_except GET {
                auth_basic "NGINX Plus API";
                auth_basic_user_file /path/to/passwd/file;
            }

            api   write=on;

            allow 127.0.0.1;
            deny  all;
        }
    }
```

----------------------------------------

TITLE: Configuring NGINX with App Protect WAF
DESCRIPTION: This snippet configures Nginx to use the App Protect WAF module by loading it and setting the address of the enforcer.  It also sets up user, worker processes, error logging, events, and the HTTP context with include directives for MIME types and custom configurations.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/nginx-conf-localhost.md#_snippet_0

LANGUAGE: nginx
CODE:
```
user  nginx;
worker_processes  auto;

# NGINX App Protect WAF
load_module modules/ngx_http_app_protect_module.so;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # NGINX App Protect WAF
    app_protect_enforcer_address 127.0.0.1:50000;

    include /etc/nginx/conf.d/*.conf;
}
```

----------------------------------------

TITLE: Restricting NGINX Cache Purge Access by IP
DESCRIPTION: This NGINX configuration snippet restricts access to the cache purge command based on the client's IP address. The `geo` block defines allowed IP ranges, and the `map` directive uses this to set `$purge_method` to `1` (allow) or `0` (deny) if the `PURGE` method is used, ensuring only whitelisted IPs can initiate a purge.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/content-cache/content-caching.md#_snippet_13

LANGUAGE: nginx
CODE:
```
geo $purge_allowed {
   default         0;  # deny from other
   10.0.0.1        1;  # allow from 10.0.0.1 address
   192.168.0.0/24  1;  # allow from 192.168.0.0/24
}

map $request_method $purge_method {
   PURGE   $purge_allowed;
   default 0;
}
```

----------------------------------------

TITLE: Nginx Reverse Proxy Configuration
DESCRIPTION: This configuration sets up Nginx as a reverse proxy for the domain 'domain.com'. It listens on port 80, enables NGINX App Protect WAF, sets the client maximum body size to 0, configures the default content type, and forwards requests to a backend server running on localhost:8080 using HTTP/1.1.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/default-conf-localhost.md#_snippet_0

LANGUAGE: nginx
CODE:
```
server {
    listen 80;
    server_name domain.com;

    proxy_http_version 1.1;

    location / {

        # NGINX App Protect WAF
        app_protect_enable on;

        client_max_body_size 0;
        default_type text/html;
        proxy_pass http://127.0.0.1:8080/;
    }
}
```

----------------------------------------

TITLE: Full NGINX Configuration for Basic Exchange Load Balancing
DESCRIPTION: This comprehensive Nginx configuration snippet provides a full example setup for basic load balancing of Microsoft Exchange. It encompasses the `http` and `stream` blocks to handle both HTTP/HTTPS and other protocols (IMAPS, SMTP). It includes upstream definitions for Exchange CAS servers, HTTP to HTTPS redirection, SSL configuration, HTTP/2 enabling, and specific location blocks for handling different requests including RPC Over HTTP.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/microsoft-exchange.md#_snippet_41

LANGUAGE: nginx
CODE:
```
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log info;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

# If placing all directives in the main nginx.conf file, copy the following
# 'http' block into it, including the initial and final lines which open
# and close the 'http' context.

# If creating a separate conf.d/exchange-http.conf file, either exclude the
# initial and final lines from the copied region, or copy them but comment
# them out in the exchange-http.conf file.

http {
    log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_user_agent" "$upstream_addr"';
    access_log /var/log/nginx/access.log main;
    keepalive_timeout 3h;
    proxy_read_timeout 3h;
    tcp_nodelay on;

    upstream exchange {
        zone exchange-general 64k;
        ntlm;

        server 10.0.0.237:443; # Replace with IP address of a CAS
        server 10.0.0.238:443; # Replace with IP address of a CAS
        sticky learn create=$remote_addr lookup=$remote_addr
                     zone=client_sessions:10m timeout=3h;
    }

    server {
        listen 80;

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        http2  on;
        client_max_body_size 2G;
        ssl_certificate /etc/nginx/ssl/company.com.crt;
        ssl_certificate_key /etc/nginx/ssl/company.com.key;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        status_zone exchange-combined;

        location = / {
            return 301 "/owa/";
        }

        location = /favicon.ico {
            empty_gif;
            access_log off;
        }

        location / {
            proxy_pass https://exchange;
            proxy_buffering off;
            proxy_http_version 1.1;
            proxy_request_buffering off;
            proxy_set_header Connection "Keep-Alive";
        }
    }
}

# If placing all directives in the main nginx.conf file, copy the following
# 'stream' block into it, including the initial and final lines which open
# and close the 'stream' context.

# If using a separate conf.d/exchange-stream.conf file, either exclude
# the initial and final lines from the copied region, or copy them but
# comment them out in the exchange-stream.conf file.

stream {
    upstream exchange-imaps {
        zone exchange-imaps 64k;

        server 10.0.0.237:993; # Replace with IP address of a CAS
        server 10.0.0.238:993; # Replace with IP address of a CAS
    }

    upstream exchange-smtp {
        zone exchange-smtp 64k;

        server 10.0.0.237:25; # Replace with IP address of a CAS
        server 10.0.0.238:25; # Replace with IP address of a CAS
    }

    server {
        listen 993;
        status_zone exchange-imaps;
        proxy_pass exchange-imaps;
    }

    server {
        listen 25; # SMTP port can be changed here (to 587, for example)
        status_zone exchange-smtp;
        proxy_pass exchange-smtp;
    }
}
```

----------------------------------------

TITLE: Proxying Requests to Backend with `try_files` and Named Location in NGINX
DESCRIPTION: This NGINX configuration uses `try_files` to first check for the original URI or the URI with a trailing slash. If neither exists, the request is internally redirected to a named location (`@backend`). This named location then proxies the request to an upstream backend server, effectively handling dynamic content or applications.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/serving-static-content.md#_snippet_6

LANGUAGE: nginx
CODE:
```
location / {
    try_files $uri $uri/ @backend;
}

location @backend {
    proxy_pass http://backend.example.com;
}
```

----------------------------------------

TITLE: Optimizing NGINX Mail Proxy Worker Processes
DESCRIPTION: This NGINX directive sets the number of worker processes, ideally equal to the number of CPU cores, to optimize performance for the mail proxy. Using `auto` allows NGINX to automatically determine the optimal number based on available processors.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/mail-proxy/mail-proxy.md#_snippet_13

LANGUAGE: nginx
CODE:
```
worker_processes auto;
mail {
    #...
}
```

----------------------------------------

TITLE: NGINX: Pass OIDC Claims as Headers
DESCRIPTION: This configuration adds `proxy_set_header` directives to pass OIDC claims as headers to the proxied application. It extracts the 'sub', 'email', and 'name' claims from the ID token returned by Keycloak and sets them as HTTP headers. The application can then use these headers to identify the authenticated user.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/keycloak.md#_snippet_5

LANGUAGE: nginx
CODE:
```
# ...
location / {
     auth_oidc keycloak;

     proxy_set_header sub   $oidc_claim_sub;
     proxy_set_header email $oidc_claim_email;
     proxy_set_header name  $oidc_claim_name;

     proxy_pass http://127.0.0.1:8080;
}
# ...
```

----------------------------------------

TITLE: Configure Server Block for OIDC
DESCRIPTION: This snippet configures a server block in NGINX for the application being protected by OIDC. It listens on port 443 with SSL enabled, specifies the server name, and sets the SSL certificate and key. The `location /` block defines how requests to the root path are handled, including proxying them to the backend application.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/onelogin.md#_snippet_5

LANGUAGE: nginx
CODE:
```
http {
    # ...

    server {
        listen      443 ssl;
        server_name demo.example.com;

        ssl_certificate     /etc/ssl/certs/fullchain.pem;
        ssl_certificate_key /etc/ssl/private/key.pem;

        location / {
            # ...

            proxy_pass http://127.0.0.1:8080;
        }
    }
    # ...
}
```

----------------------------------------

TITLE: Configuring SSL Protocols with ssl_protocols in Nginx
DESCRIPTION: This configuration directive allows enabling or disabling specific SSL/TLS protocols. It's crucial for controlling the security level of connections. Requires Nginx to be properly installed and configured.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/technical-specs.md#_snippet_0

LANGUAGE: nginx
CODE:
```
ssl_protocols TLSv1.2 TLSv1.3;
```

----------------------------------------

TITLE: Proxy Traffic to Upstream Group
DESCRIPTION: Configures a virtual server to proxy all requests to the 'backend' upstream group. The `proxy_pass` directive specifies the target upstream group. This server block directs incoming traffic to the load-balanced backend servers defined in the upstream block.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/http-load-balancer.md#_snippet_1

LANGUAGE: nginx
CODE:
```
server {
    location / {
        proxy_pass http://backend;
    }
}
```

----------------------------------------

TITLE: Configuring Secondary NGINXaaS Deployment and NGINX Configuration (Terraform)
DESCRIPTION: This Terraform snippet defines a secondary NGINXaaS deployment in Azure, including its network interface. It also configures the NGINX instance with a custom `nginx.conf` file, setting up worker processes, error logging, and an HTTP block with upstream backend servers and a `/health` endpoint for monitoring. This configuration is crucial for the secondary region's NGINXaaS instance to function correctly and be monitored by Azure Traffic Manager.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/disaster-recovery.md#_snippet_7

LANGUAGE: HCL
CODE:
```
resource "azurerm_nginx_deployment" "secondary_nginxaas_deployment" {
  name                = var.secondary_deployment_name
  resource_group_name = var.secondary_resource_group
  location            = "centralus"
  # ...
  network_interface {
    subnet_id = azurerm_subnet.secondary_subnet_1.id
  }
}

resource "azurerm_nginx_configuration" "secondary_nginxaas_config" {
  nginx_deployment_id = azurerm_nginx_deployment.secondary_nginxaas_deployment.id
  root_file           = "/etc/nginx/nginx.conf"

  config_file {
    content = base64encode(<<-EOT
user nginx;
worker_processes auto;
worker_rlimit_nofile 8192;
pid /run/nginx/nginx.pid;

events {
    worker_connections 4000;
}

error_log /var/log/nginx/error.log error;

http {
    upstream backend_servers {
        server <Upstream-1-private-ip>:80;
        server <Upstream-2-private-ip>:80;
        keepalive 16;
    }
    server {
        listen 80 default_server;
        # /health will be used for Azure Traffic Manager Profile
        location /health {
            return 200 'nginx proxy alive';
        }
        location / {
            proxy_pass http://backend_servers;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_next_upstream error timeout http_500;
            proxy_http_version 1.1;
            proxy_set_header   "Connection" "";
        }
    }
}
EOT
    )
    virtual_path = "/etc/nginx/nginx.conf"
  }
}
```

----------------------------------------

TITLE: Modify Server Parameter - Shell
DESCRIPTION: This `curl` command modifies the `down` parameter of the first server (ID `0`) in the `appservers` upstream group using the Nginx Plus API. It sends a PATCH request with a JSON payload to the API endpoint, setting the `down` parameter to `true`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/dynamic-configuration-api.md#_snippet_6

LANGUAGE: shell
CODE:
```
curl -X PATCH -d '{ "down": true }' -s 'http://127.0.0.1/api/9/http/upstreams/appservers/servers/0'
```

----------------------------------------

TITLE: Installing NGINX and App Protect on Ubuntu 24.04
DESCRIPTION: This snippet installs NGINX and App Protect on Ubuntu 24.04 systems. It creates a directory, updates the package index, and installs nginx and app-protect-module-oss package.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/admin-guide/install.md#_snippet_30

LANGUAGE: shell
CODE:
```
sudo mkdir -p /etc/packages/
cd /etc/packages/
sudo apt-get update
sudo apt-get install nginx app-protect-module-oss
```

----------------------------------------

TITLE: Start NGINX Service (Shell)
DESCRIPTION: This command starts the NGINX service using `systemctl`. This makes NGINX available to serve web traffic.
SOURCE: https://github.com/nginx/documentation/blob/main/content/controller/admin-guides/install/install-for-controller.md#_snippet_9

LANGUAGE: shell
CODE:
```
sudo systemctl start nginx
```

----------------------------------------

TITLE: Installing Latest NGINX Plus App Protect DoS (Fresh Install) - Shell
DESCRIPTION: These commands update the package list and then install the latest version of the app-protect-dos package, which includes NGINX Plus. This is for a fresh installation scenario.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/learn-about-deployment.md#_snippet_93

LANGUAGE: shell
CODE:
```
sudo apt-get update
sudo apt-get install app-protect-dos
```

----------------------------------------

TITLE: Define HTTPRouteGroup for Rate Limiting (YAML)
DESCRIPTION: This YAML configuration defines an HTTPRouteGroup resource, which is referenced by the RateLimit resource. It specifies two matches: 'get-only' which matches GET requests, and 'v2' which matches GET requests to the '/configuration-v2' path with the 'X-DEMO: ^true$' header.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/guides/smi-traffic-policies.md#_snippet_2

LANGUAGE: yaml
CODE:
```
apiVersion: specs.smi-spec.io/v1alpha3
kind: HTTPRouteGroup
metadata:
  name: hrg
  namespace: default
spec:
  matches:
    - name: get-only
      methods:
        - GET
    - name: v2
      pathRegex: "/configuration-v2"
      headers:
        X-DEMO: "^true$"
      methods:
        - GET
```

----------------------------------------

TITLE: Configuring Debug Logging for Specific IPs
DESCRIPTION: These Nginx configuration directives enable debug logging for connections originating from the specified IP addresses or IP address ranges. This allows targeted debugging without impacting overall server performance.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/monitoring/debugging.md#_snippet_12

LANGUAGE: nginx
CODE:
```
error_log /path/to/log;
...
events {
    debug_connection 192.168.1.1;
    debug_connection 192.168.10.0/24;
}
```

----------------------------------------

TITLE: Backup Kubernetes Custom Resources
DESCRIPTION: These commands back up various Kubernetes Custom Resources (TrafficSplits, TrafficTargets, RateLimits, etc.) to YAML files before a manual upgrade. This ensures that these resources can be restored after the mesh is redeployed.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/get-started/upgrade/upgrade.md#_snippet_2

LANGUAGE: bash
CODE:
```
kubectl get trafficsplits.split.smi-spec.io -A -o yaml > trafficsplits.yaml
kubectl get traffictargets.access.smi-spec.io -A -o yaml > traffictargets.yaml
kubectl get httproutegroups.specs.smi-spec.io -A -o yaml > httproutegroups.yaml
kubectl get tcproutes.specs.smi-spec.io -A -o yaml > tcproutes.yaml
kubectl get ratelimits.specs.smi.nginx.com -A -o yaml > ratelimits.yaml
kubectl get circuitbreakers.specs.smi.nginx.com -A -o yaml > circuitbreakers.yaml
```

----------------------------------------

TITLE: Configuring gRPC Content Profile in NGINX App Protect Policy
DESCRIPTION: This JSON snippet defines an NGINX App Protect policy named `my-grpc-service-policy` that includes a gRPC content profile for a photo service. The profile enables attack signature and metacharacter checks, sets a maximum message length of 100KB, disallows unknown fields, and specifies the primary and imported IDL files for the gRPC service. It also deletes the default wildcard URL to restrict traffic to gRPC services.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/common/grpc-content-profiles.md#_snippet_1

LANGUAGE: json
CODE:
```
{
    "policy": {
        "name": "my-grpc-service-policy",
        "grpc-profiles": [
            {
                "name": "photo_service_profile",
                "associateUrls": true,
                "defenseAttributes": {
                    "maximumDataLength": 100000,
                    "allowUnknownFields": false
                },
                "attackSignaturesCheck": true,
                "signatureOverrides": [
                    {
                        "signatureId": 200001213,
                        "enabled": false
                    },
                    {
                        "signatureId": 200089779,
                        "enabled": false
                    }
                ],
                "metacharCheck": true,
                "idlFiles": [
                    {
                        "idlFile": {
                            "$ref": "file:///grpc_files/album.proto"
                        },
                        "isPrimary": true
                    },
                    {
                        "idlFile": {
                            "$ref": "file:///grpc_files/common/messages.proto"
                        },
                        "importUrl": "common"
                    }
                ]
            }
        ],
        "urls": [
            {
                "name": "*",
                "type": "wildcard",
                "method": "*",
                "$action": "delete"
            }
        ]
    }
}
```

----------------------------------------

TITLE: Configure Server Block for OIDC Protection
DESCRIPTION: This snippet configures a server block to listen on port 443 with SSL enabled. It defines the server name and specifies the SSL certificate and key files. The `location /` block is configured to proxy requests to the application running on `http://127.0.0.1:8080`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-oidc.md#_snippet_5

LANGUAGE: nginx
CODE:
```
http {
    # ...

    server {
        listen      443 ssl;
        server_name demo.example.com;

        ssl_certificate     /etc/ssl/certs/fullchain.pem;
        ssl_certificate_key /etc/ssl/private/key.pem;

        location / {
            # ...

            proxy_pass http://127.0.0.1:8080;
        }
    }
    # ...
}
```

----------------------------------------

TITLE: Starting NGINX Server
DESCRIPTION: This command starts the NGINX web server. It requires NGINX to be installed on the system. After executing this command, Nginx should be running and serving web traffic.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/admin-guide/install.md#_snippet_45

LANGUAGE: shell
CODE:
```
sudo nginx
```

----------------------------------------

TITLE: Configuring Upstream Servers in NGINX
DESCRIPTION: This code snippet demonstrates how to configure upstream servers in NGINX to define a pool of application servers for load balancing. The `upstream` block specifies the server addresses and uses `sticky cookie` for session persistence.  It is used within the gce-all-active-lb.conf file to direct traffic to the backend application servers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/google-cloud-platform/high-availability-all-active.md#_snippet_14

LANGUAGE: nginx
CODE:
```
upstream upstream_app_pool {
    zone upstream-apps 64k;

    server 10.10.10.1;
    server 10.10.10.2;
    server 10.10.10.3;
    server 10.10.10.4;

    sticky cookie GCPPersist expires=300;
}
```

----------------------------------------

TITLE: Configuring Azure Traffic Manager for NGINXaaS Failover (Terraform)
DESCRIPTION: This Terraform snippet configures an Azure Traffic Manager profile with a "Priority" routing method to direct traffic to either a primary or secondary NGINXaaS deployment. It defines a DNS configuration and a health monitor that probes the `/health` endpoint of the NGINXaaS instances, along with external endpoints for both primary and secondary deployments. This setup enables automatic DNS-based failover for high availability.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/disaster-recovery.md#_snippet_8

LANGUAGE: HCL
CODE:
```
resource "azurerm_traffic_manager_profile" "nginxaas_failover_monitor" {
  ...
  traffic_routing_method = "Priority" # Chooses one deployment or the other

  dns_config {
    # relative_name needs to be globally unique
    # <relative_name>.trafficmanager.net resolves to the public IP of either NGINXaaS deployment
    relative_name = "nginxaas-global-record"
    ttl           = 60
  }

  monitor_config {
    protocol                     = "HTTP"
    port                         = 80
    path                         = "/health" #endpoint implemented in NGINXaaS configuration
    interval_in_seconds          = 30
    timeout_in_seconds           = 9
    tolerated_number_of_failures = 3
  }
}

resource "azurerm_traffic_manager_external_endpoint" "primary" {
  name                = "nginx-primary"
  profile_id          = azurerm_traffic_manager_profile.nginxaas_failover_monitor.id
  priority            = 10 # Lower number results in higher priority
  target              = azurerm_nginx_deployment.primary_nginxaas_deployment.ip_address
}

resource "azurerm_traffic_manager_external_endpoint" "secondary" {
  name                = "nginx-secondary"
  profile_id          = azurerm_traffic_manager_profile.nginxaas_failover_monitor.id
  priority            = 20
  target              = azurerm_nginx_deployment.secondary_nginxaas_deployment.ip_address
}
```

----------------------------------------

TITLE: Specifying SSL/TLS Protocols and Ciphers for NGINX Upstream
DESCRIPTION: This snippet configures the specific SSL/TLS protocols (`proxy_ssl_protocols`) and ciphers (`proxy_ssl_ciphers`) that NGINX will use when establishing a secure connection to the upstream server. This allows for enhanced security by restricting the connection to strong, modern encryption standards and avoiding deprecated ones.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/securing-tcp-traffic-upstream.md#_snippet_2

LANGUAGE: nginx
CODE:
```
server {
        ...
        proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        proxy_ssl_ciphers   HIGH:!aNULL:!MD5;
}
```

----------------------------------------

TITLE: Full JWKs Subrequest Example - Nginx Configuration
DESCRIPTION: This configuration provides a complete example of fetching JWKs from a subrequest and caching them. It sets up the cache path, defines a server block with a location that requires JWT authentication, and an internal location to fetch the keys from an external identity provider. Caching is used to minimize the load on the IdP.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-jwt-authentication.md#_snippet_11

LANGUAGE: nginx
CODE:
```
#
proxy_cache_path /var/cache/nginx/jwk levels=1 keys_zone=jwk:1m max_size=10m;

server {
    listen 80; # Use SSL/TLS in production

    location / {
        auth_jwt             "closed site";
        auth_jwt_key_cache   1h;
        auth_jwt_key_request /_jwks_uri;    # Keys will be fetched by subrequest

        proxy_pass http://my_backend;
    }

    location = /_jwks_uri {
        internal;
        proxy_method      GET;
        proxy_cache       jwk; # Cache responses
        proxy_cache_valid 200 12h;
        proxy_pass        https://idp.example.com/oauth2/keys; # Obtain keys from here
    }
}
```

----------------------------------------

TITLE: Configure Backend Upstream in frontend.conf
DESCRIPTION: This snippet configures the upstream server `my_backend` in the `frontend.conf` file. This upstream should point to the application server that NGINX Plus is proxying and protecting with OpenID Connect. The zone directive sets up a shared memory zone for load balancing.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/oidc-njs/auth0.md#_snippet_3

LANGUAGE: Nginx configuration file
CODE:
```
upstream my_backend {
    zone my_backend 64k;
    server my-backend-app.com:80;
}
```

----------------------------------------

TITLE: Create ConfigMap for CA Certificate (YAML)
DESCRIPTION: This snippet creates a Kubernetes ConfigMap named `backend-cert` to store the CA certificate (`ca.crt`) used for verifying self-signed certificates for backend TLS termination. The ConfigMap is applied using `kubectl apply`. The certificate is embedded within the YAML definition.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-security/securing-backend-traffic.md#_snippet_7

LANGUAGE: yaml
CODE:
```
kubectl apply -f - <<EOF
kind: ConfigMap
apiVersion: v1
metadata:
  name: backend-cert
data:
  ca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIDbTCCAlWgAwIBAgIUPA3fFnkLl63GZ7noUjb5NoLhSYkwDQYJKoZIhvcNAQEL
    BQAwRjEfMB0GA1UEAwwWc2VjdXJlLWFwcC5leGFtcGxlLmNvbTELMAkGA1UEBhMC
    VVMxFjAUBgNVBAcMDVNhbiBGcmFuc2lzY28wHhcNMjQwMTE4MTgwMTAxWhcNMjUw
    MTA4MTgwMTAxWjBGMR8wHQYDVQQDDBZzZWN1cmUtYXBwLmV4YW1wbGUuY29tMQsw
    CQYDVQQGEwJVUzEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzCCASIwDQYJKoZIhvcN
    AQEBBQADggEPADCCAQoCggEBAJGgn81BrqzmI4aQmGrg7RgkO5oYwlThQ9X/xVHB
    YVFptjRPAZz9g92g5birI/NZ43C6nEbZrJrSCqN3wgvV84jJmBAgpAvW+LhF4caa
    nhAnecJCcTbwrd542vCDoDRsNV5ffbpESgC4FxPGkRVbSa0KHQz8qCLqS2+uaB7X
    t76iw6y4pQ3klobVp1XtUpzZMGMBqZFnsAdl+PWMmSTvqjixkSlfcUY6Crnk9W6d
    Sns5cpzKdUs+2ZkBe6VkBgSs8xbaz8Y2YC1GhRqGlxYLT3WBaIlSCKPuRrGjwE3r
    AsW6gSL919H1O1a+MjQuLuQ4lnCbCpNzM9OV1JISMWfwifMCAwEAAaNTMFEwHQYD
    VR0OBBYEFOEzjs7FrQr1bW3mKkUgI+5Fo9XaMB8GA1UdIwQYMBaAFOEzjs7FrQr1
    bW3mKkUgI+5Fo9XaMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEB
    AG/eX4pctINIrHvRyHOusdac5iXSJbQRZgWvP1F2p95qoIDESciAU1Sh1oJv+As5
    IlJOZPJNuZFpDLjc8kzSoEbc1Q5+QyTBlyNNsagWYYwK0CEJ6KJt80vytffmdOIg
    z8/a+2Ax829vcn1w1SUi5V6ea/l8K74f2SL/zSSHgtEiz8V0TlvT7J6wurgmnk4t
    yQRmsXlDGefuijMNCVf7jWwLx2BODfKoEA1pJkthnNvdizlikmz+9elxhV9bRf3Y
    NnubytWPfO1oeHjVGvxVjCouIYine+VlskvwHmMi/dYod6yd7aFYu4CU3g/hjwKo
    LY2WNv5j3JhDnEYK9Zj3z7A=
    -----END CERTIFICATE-----
EOF
```

----------------------------------------

TITLE: Enabling NGINX Access Logs
DESCRIPTION: This code snippet demonstrates how to enable NGINX access logs by defining a custom log format and specifying the log file path. The `log_format` directive defines the format, and the `access_log` directive specifies the path to the log file and the format to use.  The log path is configured within /var/log/nginx.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nginxaas-azure/logging-config-access-logs.md#_snippet_0

LANGUAGE: nginx
CODE:
```
http {
	log_format myfmt '$remote_addr - $remote_user [$time_local] '
						   '"$request" $status $body_bytes_sent '
						   '"$http_referer" "$http_user_agent" "$gzip_ratio"';

	access_log /var/log/nginx/nginx-access.log myfmt;
	# ...
}
```

----------------------------------------

TITLE: Testing Nginx Configuration
DESCRIPTION: This command tests the Nginx configuration file for syntax errors.  It is used to confirm that the configuration is valid before reloading Nginx.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/geoip2.md#_snippet_6

LANGUAGE: shell
CODE:
```
nginx -t
```

----------------------------------------

TITLE: Restarting NGINX Agent Service (Shell)
DESCRIPTION: This shell command restarts the NGINX Agent service using `sudo systemctl restart nginx-agent`. This action is crucial for applying any changes made to the NGINX Agent's configuration, ensuring the new settings take effect.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/nginx-app-protect/setup-waf-config-management.md#_snippet_32

LANGUAGE: shell
CODE:
```
sudo systemctl restart nginx-agent
```

----------------------------------------

TITLE: Configuring NGINX with App Protect DoS Modules
DESCRIPTION: This NGINX configuration file enables NGINX App Protect DoS, loading necessary modules and defining security logging. It includes server blocks for HTTP/1 and gRPC with SSL, demonstrating how to apply DoS policies and monitor applications. It also sets up access logging with a custom format.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/learn-about-deployment.md#_snippet_166

LANGUAGE: nginx
CODE:
```
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log error;
worker_rlimit_nofile 65535;
working_directory /tmp/cores;

load_module modules/ngx_http_app_protect_module.so;
load_module modules/ngx_http_app_protect_dos_module.so;

events {
    worker_connections 65535;

}

http {
    include         /etc/nginx/mime.types;

    log_format log_napd ', vs_name_al=$app_protect_dos_vs_name, ip=$remote_addr, tls_fp=$app_protect_dos_tls_fp, ' 
                        'outcome=$app_protect_dos_outcome, reason=$app_protect_dos_outcome_reason, ' 
                        'ip_tls=$remote_addr:$app_protect_dos_tls_fp, ';

    app_protect_dos_security_log_enable on;
    app_protect_dos_security_log "/etc/app_protect_dos/log-default.json" /var/log/adm/logger.log;
    #app_protect_dos_security_log "/etc/app_protect_dos/log-default.json" syslog:server=1.2.3.4:5261;

    # HTTP/1 server
    server {
        default_type        application/octet-stream;
        listen              80 reuseport;
        server_name         serv80;
        proxy_http_version  1.1;

        app_protect_policy_file "/etc/app_protect/conf/NginxDefaultPolicy.json";
        app_protect_security_log_enable on;

        set $loggable '0';
        access_log /var/log/nginx/access.log log_napd if=$loggable;
        #access_log syslog:server=1.1.1.1:5561 log_napd if=$loggable;
        app_protect_dos_policy_file "/etc/app_protect_dos/BADOSDefaultPolicy.json";

        location / {
            app_protect_dos_enable on;
            app_protect_dos_name "App80";
            app_protect_dos_monitor uri=http://serv80/;

            proxy_pass http://1.2.3.4:80;
        }
    }

    # gRPC server with ssl
    server {
        default_type    application/grpc;
        listen          443 http2 ssl reuseport;
        server_name     serv_grpc;

        # TLS config
        ssl_certificate      /etc/ssl/certs/grpc.example.com.crt;
        ssl_certificate_key  /etc/ssl/private/grpc.example.com.key;
        ssl_session_cache    shared:SSL:10m;
        ssl_session_timeout  5m;
        ssl_ciphers          HIGH:!aNULL:!MD5;
        ssl_protocols        TLSv1.2 TLSv1.3;

        set $loggable '0';
        access_log /var/log/nginx/access.log log_napd if=$loggable;
        #access_log syslog:server=1.1.1.1:5561 log_napd if=$loggable;

        location / {
            app_protect_dos_enable on;
            app_protect_dos_name "AppGRPC";
            app_protect_dos_monitor uri=https://serv_grpc:443/service/method protocol=grpc; # mandatory for gRPC
            grpc_pass grpc://1.2.3.4:1001;
        }
    }

    sendfile            on;
    tcp_nopush          on;
    keepalive_timeout   65;
}
```

----------------------------------------

TITLE: Configuring DNS Resolver and Upstream in Nginx
DESCRIPTION: This code snippet demonstrates how to configure a DNS resolver and an upstream server with automatic re-resolution of the domain name in Nginx. It specifies a DNS server, defines an upstream group, and configures a server within that group to automatically resolve its domain name. This is useful for dynamic environments where upstream server IPs may change.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/faq.md#_snippet_4

LANGUAGE: nginx
CODE:
```
resolver 10.0.0.2 valid=10s;
upstream backends {
    zone backends 64k;
    server backends.example.com:8080 resolve;
}

server {
    location / {
        proxy_pass http://backends;
    }
}
```

----------------------------------------

TITLE: Setting SSL Protocols and Ciphers for NGINX Mail Proxy
DESCRIPTION: This NGINX configuration block defines the allowed SSL/TLS protocols (`ssl_protocols`) and ciphers (`ssl_ciphers`) for the mail proxy. It ensures that only strong, secure versions and ciphers are used, enhancing the security of mail traffic.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/mail-proxy/mail-proxy.md#_snippet_12

LANGUAGE: nginx
CODE:
```
mail {
    #...
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers   HIGH:!aNULL:!MD5;
}
```

----------------------------------------

TITLE: HTTPRoute Traffic Splitting - YAML
DESCRIPTION: This YAML snippet configures traffic splitting between two backend services (old and new versions of an application). The `weight` parameter in the `backendRefs` section determines the proportion of traffic directed to each service, enabling canary releases or A/B testing.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/upgrade-apps-without-downtime.md#_snippet_1

LANGUAGE: yaml
CODE:
```
- matches:
    - path:
        type: PathPrefix
        value: /
  backendRefs:
    - name: my-app-old
      port: 80
      weight: 95
    - name: my-app-new
      port: 80
      weight: 5
```

----------------------------------------

TITLE: Reloading Nginx Configuration
DESCRIPTION: These commands reload the Nginx configuration without restarting the server.  This allows Nginx to start using the new configuration changes immediately.  The first command uses the `nginx` executable, while the second uses the `service` command.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/node-js.md#_snippet_11

LANGUAGE: none
CODE:
```
root# nginx -s reload
```

LANGUAGE: none
CODE:
```
root# service nginx reload
```

----------------------------------------

TITLE: Reloading NGINX Configuration
DESCRIPTION: This shell command reloads the NGINX Plus configuration gracefully. It applies any changes made to the configuration file without stopping the NGINX service, ensuring continuous operation.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/opentelemetry.md#_snippet_18

LANGUAGE: shell
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Backing Up NGINX Configurations and Logs (Shell)
DESCRIPTION: This command backs up existing NGINX configuration files and logs to a new directory before installation or upgrade, ensuring data preservation. It uses `cp -a` for archival copy, preserving file attributes.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/learn-about-deployment.md#_snippet_0

LANGUAGE: shell
CODE:
```
sudo cp -a /etc/nginx /etc/nginx-plus-backup
sudo cp -a /var/log/nginx /var/log/nginx-plus-backup
```

----------------------------------------

TITLE: Configuring Location Blocks for Proxying and Redirects in NGINX
DESCRIPTION: This snippet defines two location blocks within an NGINX server block. The first block proxies requests starting with '/webapp/' to the 'jboss' upstream group, enabling load balancing for that specific path. The second block redirects root path requests ('/') to '/webapp/', ensuring all traffic is funneled through the load-balanced path.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_16

LANGUAGE: nginx
CODE:
```
# In the 'server' block for HTTPS traffic
location /webapp/ {
    proxy_pass http://jboss;
}

location = / {
    return 302 /webapp/;
}
```

----------------------------------------

TITLE: Configuring Correlation ID header in Nginx
DESCRIPTION: This snippet configures a correlation ID header in Nginx to track requests across different services. Replace `<correlation-id-header-name>` with the name of the header and `<correlation-id>` with the desired value. A request-correlation-id policy will determine the header name and value, often using $request_id.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/policies/proxy-response-headers.md#_snippet_11

LANGUAGE: nginx
CODE:
```
add_header `<correlation-id-header-name> <correlation-id> [always]`
```

----------------------------------------

TITLE: Restart NGINX web server
DESCRIPTION: Restarts the NGINX web server. This ensures that any configuration changes related to NGINX Instance Manager are applied.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/deploy/vm-bare-metal/install-nim-deprecated.md#_snippet_15

LANGUAGE: bash
CODE:
```
sudo systemctl restart nginx
```

----------------------------------------

TITLE: NGINX Plus SSL Configuration (nginx)
DESCRIPTION: This configuration snippet sets up a simple SSL/TLS-protected website using NGINX Plus. It configures the server to listen on port 443, specifies the SSL certificate and key, sets allowed SSL protocols, and defines the root directory and index files for the website.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/fips-compliance-nginx-plus.md#_snippet_5

LANGUAGE: nginx
CODE:
```
server {
    listen 443 ssl;

    ssl_certificate     /etc/nginx/ssl/test.crt;
    ssl_certificate_key /etc/nginx/ssl/test.key;

    ssl_protocols   	TLSv1 TLSv1.1 TLSv1.2;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }
}
```

----------------------------------------

TITLE: Complete NGINX Configuration Example
DESCRIPTION: This is a complete NGINX configuration example that combines all the steps outlined in the document. It includes the DNS resolver, OIDC provider definition, server configuration with SSL, and proxy settings for the application. It assumes the existence of SSL certificates.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/entra-id.md#_snippet_11

LANGUAGE: nginx
CODE:
```
http {
    # Use a public DNS resolver for Issuer discovery, etc.
    resolver 10.0.0.1 ipv4=on valid=300s;

    oidc_provider entra {
        # The issuer is typically something like:
        # https://login.microsoftonline.com/<tenant_id>/v2.0
        issuer https://login.microsoftonline.com/<tenant_id>/v2.0;

        # Replace with your actual Entra client_id and client_secret
        client_id <client_id>;
        client_secret <client_secret>;
    }

    server {
        listen 443 ssl;
        server_name demo.example.com;

        ssl_certificate /etc/ssl/certs/fullchain.pem;
        ssl_certificate_key /etc/ssl/private/key.pem;

        location / {
            # Protect this location with Entra OIDC
            auth_oidc entra;

            # Forward OIDC claims as headers if desired
            proxy_set_header sub $oidc_claim_sub;
            proxy_set_header email $oidc_claim_email;
            proxy_set_header name $oidc_claim_name;

            proxy_pass http://127.0.0.1:8080;
        }
    }

    server {
        listen 8080;

        location / {
            return 200 "Hello, $http_username!\n Your email is $http_email\n Your unique id is $http_sub\n";
            default_type text/plain;
        }
    }
}
```

----------------------------------------

TITLE: NGINX: Server Configuration
DESCRIPTION: This configures an Nginx server block to listen on port 443 with SSL enabled, specifying the server name and SSL certificate paths. It sets up a location block that will proxy requests to an application running on `http://127.0.0.1:8080`. This is the basic server setup before OIDC is applied.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/keycloak.md#_snippet_3

LANGUAGE: nginx
CODE:
```
http {
    # ...

    server {
        listen      443 ssl;
        server_name demo.example.com;

        ssl_certificate     /etc/ssl/certs/fullchain.pem;
        ssl_certificate_key /etc/ssl/private/key.pem;

        location / {

            # ...

            proxy_pass http://127.0.0.1:8080;
        }
    }
    # ...
}
```

----------------------------------------

TITLE: Create Kind Cluster
DESCRIPTION: This command creates a Kubernetes cluster using kind, based on the configuration provided in the cluster-config.yaml file. It ensures a node image, prepares nodes, writes configuration, starts the control-plane, installs CNI, and installs a StorageClass.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/get-started.md#_snippet_1

LANGUAGE: shell
CODE:
```
kind create cluster --config cluster-config.yaml
```

----------------------------------------

TITLE: Backing Up NGINX Configurations and Logs (Shell)
DESCRIPTION: These shell commands create backup copies of existing NGINX configuration files (/etc/nginx) and log files (/var/log/nginx) before an upgrade or reinstallation. The -a flag ensures that directory structures and file attributes are preserved.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/learn-about-deployment.md#_snippet_111

LANGUAGE: shell
CODE:
```
sudo cp -a /etc/nginx /etc/nginx-plus-backup
sudo cp -a /var/log/nginx /var/log/nginx-plus-backup
```

----------------------------------------

TITLE: Defining NGINX App Protect DoS Allowlist Policy (Standard Format)
DESCRIPTION: This JSON snippet illustrates the standard format for an allowlist file used by NGINX App Protect DoS. It includes a list of IPv4 and IPv6 addresses/ranges, with `blockRequests` set to 'transparent'. It also shows how to reference additional IP lists using `$ref`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/directives-and-policy/learn-about-directives-and-policy.md#_snippet_33

LANGUAGE: json
CODE:
```
{
    "policy": {
        "ip-address-lists": [
            {
                "ipAddresses": [
                    { "ipAddress": "1.1.1.1" },
                    { "ipAddress": "1.1.1.1/32" },
                    { "ipAddress": "3.3.3.0/24" },
                    { "ipAddress": "2023::4ef3/128" },
                    { "ipAddress": "2034::2300/120" }
                ],
                "blockRequests": "transparent"
            },
            {
                "$ref": "/etc/app_protect_dos/additional_ips.json",
                "blockRequests": "transparent"
            }
        ]
    }
}
```

----------------------------------------

TITLE: Configuring X-Frame-Options header in Nginx
DESCRIPTION: This snippet configures the X-Frame-Options header to prevent clickjacking attacks by restricting whether a browser can render a page in an iframe. Setting it to SAMEORIGIN allows the page to be displayed in an iframe only if the origin matches the origin of the top-level browsing context.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/policies/proxy-response-headers.md#_snippet_1

LANGUAGE: nginx
CODE:
```
add_header X-Frame-Options SAMEORIGIN [always]
```

----------------------------------------

TITLE: Configuring HTTPS Virtual Server - Nginx
DESCRIPTION: This snippet configures a server block to listen for HTTPS requests on port 443 for a specific domain. It includes directives for specifying the SSL certificate, private key, session cache, and preferred server ciphers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_13

LANGUAGE: nginx
CODE:
```
server {
    listen 443 ssl;
    server_name example.com;

    ssl_certificate     /etc/nginx/ssl/example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;
    ssl_session_cache   shared:SSL:1m;
    ssl_prefer_server_ciphers on;
}
```

----------------------------------------

TITLE: Plan Terraform Deployment
DESCRIPTION: This command creates an execution plan, showing the changes that Terraform will apply to the infrastructure. It allows you to preview the effects of the Terraform configuration before making any actual changes. It requires a properly initialized Terraform working directory.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/getting-started/ssl-tls-certificates/ssl-tls-certificates-terraform.md#_snippet_1

LANGUAGE: bash
CODE:
```
terraform plan
```

----------------------------------------

TITLE: Shell: Reload NGINX Configuration
DESCRIPTION: This command instructs NGINX to reload its configuration without interrupting existing connections. After modifying the Nginx configuration file (`nginx.conf`), this command applies the changes.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/keycloak.md#_snippet_7

LANGUAGE: nginx
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: HTTPRoute Traffic Splitting - Complete Switch - YAML
DESCRIPTION: This YAML snippet configures a complete traffic switch to the new version of an application.  By setting the weight of the old version to 0 and the new version to 1, all traffic is routed to the new deployment.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/upgrade-apps-without-downtime.md#_snippet_2

LANGUAGE: yaml
CODE:
```
- matches:
    - path:
        type: PathPrefix
        value: /
  backendRefs:
    - name: my-app-old
      port: 80
      weight: 0
    - name: my-app-new
      port: 80
      weight: 1
```

----------------------------------------

TITLE: Configuring NGINX App Protect WAF for gRPC Security Logging
DESCRIPTION: This configuration snippet demonstrates how to enable NGINX App Protect WAF for a gRPC service, apply a security policy with a gRPC profile, enable security logging, and configure the `app_protect_security_log` directive with the `log_grpc_all` bundle. It also specifies the `grpc_pass` to the backend service.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/concept/grpc-logging.md#_snippet_0

LANGUAGE: nginx
CODE:
```
server {
    server_name my_grpc_service.com;
    location / {
        app_protect_enable on;
        app_protect_policy_file "/etc/app_protect/conf/policy_with_grpc_profile.tgz";
        app_protect_security_log_enable on;
        app_protect_security_log "/etc/app_protect/conf/log_grpc_all.tgz" stderr;
        grpc_pass grpcs://grpc_backend;
    }
}
```

----------------------------------------

TITLE: Query HTTP Request Rate with Prometheus
DESCRIPTION: This Prometheus query calculates the rate of HTTP requests flowing through the NGINX Service Mesh. It uses the `irate` function to compute the per-second average rate of increase of the `nginxplus_http_requests_total` counter over a 30-second window.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/guides/prometheus-metrics.md#_snippet_0

LANGUAGE: promQL
CODE:
```
irate(nginxplus_http_requests_total[30s])
```

----------------------------------------

TITLE: Upstream Status Code Metrics
DESCRIPTION: Describes the 'plus.upstream.status.1xx', 'plus.upstream.status.2xx', 'plus.upstream.status.3xx', 'plus.upstream.status.4xx', and 'plus.upstream.status.5xx' metrics, which are counters tracking the number of responses from the upstream servers with corresponding status codes. These metrics offer insight into the success/failure rates of upstream requests.
SOURCE: https://github.com/nginx/documentation/blob/main/content/amplify/metrics-metadata/nginx-metrics.md#_snippet_10

LANGUAGE: none
CODE:
```
Type:        counter, integer
Description: Number of responses from the upstream servers with status codes 1xx, 2xx,
               3xx, 4xx, and 5xx.
Source:      NGINX Plus status API
```

----------------------------------------

TITLE: Configure NGINX Server Block for OIDC Protection
DESCRIPTION: This configuration sets up a server block in Nginx to listen on port 443 with SSL enabled. It defines a location that is protected by Entra ID OIDC using the `auth_oidc` directive and forwards the requests to an internal application.  It also passes OIDC claims as headers to the application.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/entra-id.md#_snippet_6

LANGUAGE: nginx
CODE:
```
http {

    # ...

    server {
        listen      443 ssl;
        server_name demo.example.com;

        ssl_certificate     /etc/ssl/certs/fullchain.pem;
        ssl_certificate_key /etc/ssl/private/key.pem;

        location / {

            # ...

            proxy_pass http://127.0.0.1:8080;
        }
    }
    # ...
}
```

----------------------------------------

TITLE: Configuring HTTP to HTTPS Redirect - Nginx
DESCRIPTION: This Nginx configuration defines a virtual server that listens for HTTP requests on port 80 and redirects them to the HTTPS version of the site.  It uses a 301 redirect, which is a permanent redirect, and the `$http_host` and `$request_uri` variables to construct the new HTTPS URL. This block should reside within the `http` block.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-e-business-suite.md#_snippet_19

LANGUAGE: nginx
CODE:
```
# In the 'http' block
server {
     listen 80;
     status_zone oracle-http-redirect;
     return 301 https://$http_host$request_uri;
}
```

----------------------------------------

TITLE: Configure Access Control Routing Policy via API
DESCRIPTION: This JSON snippet demonstrates how to define an access control routing policy using the API Connectivity Manager's REST API. It shows how to specify conditions based on JWT claims ('token.role' and 'token.sub') to allow access to the API's GET method. Requests must satisfy all conditions to be granted access. The `matchType` field defines how the values will be compared.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/policies/access-control-routing.md#_snippet_0

LANGUAGE: json
CODE:
```
"policies": {
    "access-control-routing": [
            {
                "action": {
                    "conditions": [
                        {
                            "allowAccess": {
                                "httpMethods": ["GET"]
                            },
                            "when": [
                                {
                                    "key": "token.role",
                                    "matchType": "STRING",
                                    "matchOneOf": {
                                        "values": [
                                            "admin"
                                        ]
                                    }
                                },
                                {
                                    "key": "token.sub",
                                    "matchType": "REGEX",
                                    "matchOneOf": {
                                        "values": [
                                            "^.*test.com"
                                        ]
                                    }
                                }
                            ]
                        }
                    ]
                }
            }
        ]
}
```

----------------------------------------

TITLE: Reverse Proxy Configuration with Nginx App Protect WAF
DESCRIPTION: This Nginx server configuration listens on port 80 and acts as a reverse proxy. It enables Nginx App Protect WAF to protect the application. It forwards incoming requests to the upstream server at 127.0.0.1:8080. The client_max_body_size is set to 0, and the proxy_http_version is set to 1.1.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/default-conf-hostname.md#_snippet_0

LANGUAGE: nginx
CODE:
```
server {
    listen 80;
    server_name domain.com;

    proxy_http_version 1.1;

    location / {

        # NGINX App Protect WAF
        app_protect_enable on;

        client_max_body_size 0;
        default_type text/html;
        proxy_pass http://127.0.0.1:8080/;
    }
}
```

----------------------------------------

TITLE: Backing Up NGINX Configuration and Logs (Shell)
DESCRIPTION: This command backs up existing NGINX configuration files from `/etc/nginx` and log files from `/var/log/nginx` to respective backup directories. This is a crucial step before performing any installation or upgrade to prevent data loss.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/learn-about-deployment.md#_snippet_17

LANGUAGE: shell
CODE:
```
sudo cp -a /etc/nginx /etc/nginx-plus-backup
sudo cp -a /var/log/nginx /var/log/nginx-plus-backup
```

----------------------------------------

TITLE: Creating Certificate Signing Request (CSR) (OpenSSL)
DESCRIPTION: This command creates a Certificate Signing Request (CSR) file using the private key. The -sha256 parameter specifies the SHA256 hashing algorithm for the request.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_5

LANGUAGE: shell
CODE:
```
root# openssl req -new -sha256 -key ~/example.com.key -out ~/example.com.csr
```

----------------------------------------

TITLE: Loading NGINX OpenTelemetry Dynamic Module
DESCRIPTION: This NGINX configuration snippet demonstrates how to load the `ngx_otel_module.so` dynamic module. The `load_module` directive is typically placed in the top-level or 'main' context of the NGINX configuration file to enable the module's functionality.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/opentelemetry.md#_snippet_15

LANGUAGE: nginx
CODE:
```
load_module modules/ngx_otel_module.so;

http {
#...
}
```

----------------------------------------

TITLE: Apply NodePort Config with Kubectl
DESCRIPTION: This command applies the NodePort configuration defined in the `nodeport-config.yaml` file to the Kubernetes cluster. It creates or updates the `nginx-gateway` service in the `nginx-gateway` namespace, exposing NGINX Gateway Fabric through NodePort.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/get-started.md#_snippet_6

LANGUAGE: shell
CODE:
```
kubectl apply -f nodeport-config.yaml
```

----------------------------------------

TITLE: Defining Health Check for Specific Content in Nginx
DESCRIPTION: This snippet defines a `match` block named `welcome` to check for a specific HTTP status code (200), `Content-Type` header value (`text/html`), and content within the response body (`Welcome to nginx!`). All conditions must be met for the health check to pass.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/http-health-check.md#_snippet_10

LANGUAGE: nginx
CODE:
```
match welcome {
    status 200;
    header Content-Type = text/html;
    body   ~ "Welcome to nginx!";
}
```

----------------------------------------

TITLE: Install NGINX OSS and App Protect WAF
DESCRIPTION: This snippet installs NGINX OSS and the NGINX App Protect WAF v5 module within a Docker container. It mounts secrets for repository authentication, updates package lists, adds NGINX repositories, installs necessary packages like `apt-transport-https`, `lsb-release`, `ca-certificates`, `wget`, `gnupg2`, and `ubuntu-keyring`, and configures the NGINX and App Protect repositories.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/v5/build-nginx-image-oss/build-ubuntu.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
RUN --mount=type=secret,id=nginx-crt,dst=/etc/ssl/nginx/nginx-repo.crt,mode=0644 \
    --mount=type=secret,id=nginx-key,dst=/etc/ssl/nginx/nginx-repo.key,mode=0644 \
    apt-get update \
    && apt-get install -y \
      apt-transport-https \
      lsb-release \
      ca-certificates \
      wget \
      gnupg2 \
      ubuntu-keyring \
    && wget -qO - https://nginx.org/keys/nginx_signing.key | gpg --dearmor | \
      tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null \
    && gpg --dry-run --quiet --no-keyring --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg \
    && printf "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \
      http://nginx.org/packages/mainline/ubuntu `lsb_release -cs` nginx\n" | \
      tee /etc/apt/sources.list.d/nginx.list \
    && wget -qO - https://cs.nginx.com/static/keys/nginx_signing.key | gpg --dearmor | \
      tee /usr/share/keyrings/nginx-static-archive-keyring.gpg >/dev/null \
    && gpg --dry-run --quiet --no-keyring --import --import-options import-show /usr/share/keyrings/nginx-static-archive-keyring.gpg \
    && printf "deb [signed-by=/usr/share/keyrings/nginx-static-archive-keyring.gpg] \
      https://pkgs.nginx.com/app-protect-x-oss/ubuntu `lsb_release -cs` nginx-plus\n" | \
      tee /etc/apt/sources.list.d/nginx-app-protect.list \
    && wget -P /etc/apt/apt.conf.d https://cs.nginx.com/static/files/90pkgs-nginx \
    && apt-get update \
    && DEBIAN_FRONTEND="noninteractive" apt-get install -y nginx=1.25.5-1~`lsb_release -cs` app-protect-module-oss \
    && ln -sf /dev/stdout /var/log/nginx/access.log \
    && ln -sf /dev/stderr /var/log/nginx/error.log \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*
```

----------------------------------------

TITLE: Rate Limit Policy Configuration (YAML)
DESCRIPTION: This YAML configuration defines a rate limit policy named `ratelimit-v1` in the `default` namespace. It limits traffic from `client-v1` to `dest-svc` to 10 requests per minute. The `destination` specifies the target service, and the `sources` list specifies the clients to which the rate limit applies.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/tutorials/ratelimit-walkthrough.md#_snippet_7

LANGUAGE: yaml
CODE:
```
apiVersion: specs.smi.nginx.com/v1alpha2
kind: RateLimit
metadata:
  name: ratelimit-v1
  namespace: default
spec:
  destination:
    kind: Service
    name: dest-svc
    namespace: default
  sources:
  - kind: Deployment
    name: client-v1
    namespace: default
  name: 10rm
  rate: 10r/m
```

----------------------------------------

TITLE: Configure OIDC Provider Details
DESCRIPTION: This snippet configures specific details for the OIDC provider, including the issuer URL, client ID, client secret, and SSL trusted certificate. These values are essential for NGINX Plus to communicate with and trust the IdP. Ensure the paths to the certificate file is correct and accessible by NGINX.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-oidc.md#_snippet_4

LANGUAGE: nginx
CODE:
```
http {
    resolver 10.0.0.1 ipv4=on valid=300s;

    oidc_provider my_idp {
        issuer        https://your-idp-domain/idp;
        client_id     <client_id>;
        client_secret <client_secret>;

        ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    }

    # ...
}
```

----------------------------------------

TITLE: Configuring Cache Zone in NGINX
DESCRIPTION: This snippet demonstrates how to configure a cache zone using the `proxy_cache_path` directive in the `http` block in NGINX.  This enables caching and statistics collection for the cache zone, allowing it to be monitored in the live activity monitoring dashboard. The `keys_zone` parameter defines the shared memory zone for storing cache keys and metadata.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/monitoring/live-activity-monitoring.md#_snippet_2

LANGUAGE: nginx
CODE:
```
http {
    # ...
    proxy_cache_path /data/nginx/cache keys_zone=one:10m;
}
```

----------------------------------------

TITLE: Configuring IP address-based ACLs in NGINX
DESCRIPTION: This snippet configures IP address-based access control lists (ACLs) to restrict access to the NGINX Plus dashboard. It allows access from a specified network (10.0.0.0/8 in this example) and denies access from all other networks.  Uncommenting and adapting 'allow' and 'deny' directives is necessary within the server configuration block.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/node-js.md#_snippet_30

LANGUAGE: nginx
CODE:
```
allow 10.0.0.0/8;
deny all;
```

----------------------------------------

TITLE: Restricting NGINX Plus API Access by IP Address (NGINX)
DESCRIPTION: This NGINX configuration snippet demonstrates how to restrict access to the NGINX Plus API using IP address-based access control lists (ACLs). The `allow` directive permits access from the specified network (`10.0.0.0/8`), while the `deny all` directive blocks all other access. This enhances security by limiting who can view the monitoring dashboard.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_32

LANGUAGE: nginx
CODE:
```
allow 10.0.0.0/8;
deny all;
```

----------------------------------------

TITLE: Keepalived Configuration File Example
DESCRIPTION: This is an example of a keepalived configuration file generated by the `nginx-ha-setup` script. It configures VRRP, health checks, and notification settings for NGINX Plus high availability.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/high-availability/ha-keepalived.md#_snippet_0

LANGUAGE: none
CODE:
```
global_defs {
    vrrp_version 3
}

vrrp_script chk_manual_failover {
    script   "/usr/libexec/keepalived/nginx-ha-manual-failover"
    interval 10
    weight   50
}

vrrp_script chk_nginx_service {
    script   "/usr/libexec/keepalived/nginx-ha-check"
    interval 3
    weight   50
}

vrrp_instance VI_1 {
    interface                  eth0
    priority                   101
    virtual_router_id          51
    advert_int                 1
    accept
    garp_master_refresh        5
    garp_master_refresh_repeat 1
    unicast_src_ip             192.168.100.100

    unicast_peer {
        192.168.100.101
    }

    virtual_ipaddress {
        192.168.100.150
    }

    track_script {
        chk_nginx_service
        chk_manual_failover
    }

    notify "/usr/libexec/keepalived/nginx-ha-notify"
}

```

----------------------------------------

TITLE: Configuring Upstream Group with Shared Memory Zone
DESCRIPTION: This snippet configures an upstream group named 'tomcat' and defines a shared memory zone for storing the group's configuration and runtime state, which are shared among worker processes. This shared memory is necessary for the health check and live activity monitoring features.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_32

LANGUAGE: nginx
CODE:
```
# In the 'http' block
upstream tomcat {
   zone tomcat 64k;

   server 10.100.100.11:8080;
   server 10.100.100.12:8080;
   # ...
}
```

----------------------------------------

TITLE: Restrict Access to Swagger UI
DESCRIPTION: This snippet restricts access to the Swagger UI location to a specific network.  It uses the `allow` and `deny` directives to control which IP addresses can access the UI.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/monitoring/live-activity-monitoring.md#_snippet_26

LANGUAGE: nginx
CODE:
```
location /swagger-ui {
    root   /usr/share/nginx/html;
    allow  192.168.1.0/24;
    deny   all;
}
```

----------------------------------------

TITLE: Updating Nginx PID and Temporary Paths
DESCRIPTION: This snippet shows the essential fields in the `nginx.conf` file that need to be updated to point to writable volumes. This is crucial for Nginx to function correctly in a Kubernetes environment with a read-only file system. The updated paths typically reside under the /tmp directory which has been mounted as a writable volume.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/nap-k8s-readonly-paths.md#_snippet_0

LANGUAGE: nginx
CODE:
```
pid        /tmp/nginx.pid;
...
http {
...
    # Temporary directories for kubernetes "readonlyfilesystem"
    client_body_temp_path /tmp/nginx-client-body;
    proxy_temp_path       /tmp/nginx-proxy;    
    fastcgi_temp_path     /tmp/nginx-fastcgi;    
    uwsgi_temp_path       /tmp/nginx-uwsgi;    
    scgi_temp_path        /tmp/nginx-scgi;
...
}
```

----------------------------------------

TITLE: Running NGINX Container from Custom Image (Shell)
DESCRIPTION: This shell command creates and runs a Docker container named mynginx3 in detached mode (-d) from the mynginx_image1 image. It maps port 80 of the host to port 80 of the container, making the NGINX server accessible from the host.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/installing-nginx/installing-nginx-docker.md#_snippet_25

LANGUAGE: shell
CODE:
```
docker run --name mynginx3 -p 80:80 -d mynginx_image1
```

----------------------------------------

TITLE: Configuring JWK File and Request in Nginx
DESCRIPTION: This snippet demonstrates how to combine a local JWK file (`private_jwe_keys.jwk`) with a subrequest to an external identity provider (`https_//idp.example.com/keys`) to obtain public keys.  This setup allows Nginx to use both local and remote key sources for JWT validation.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-jwt-authentication.md#_snippet_5

LANGUAGE: nginx
CODE:
```
server {
    listen 80;

    location /products/ {
        proxy_pass           http://api_server;
        auth_jwt             "API";
        auth_jwt_type        encrypted;
        auth_jwt_key_file    private_jwe_keys.jwk;
        auth_jwt_key_request /public_jws_keys;
    }

    location /public_jws_keys {
        proxy_pass "https_//idp.example.com/keys";
    }
}
```

----------------------------------------

TITLE: NGINX Plus and App Protect Docker Deployment for Debian
DESCRIPTION: This comprehensive Dockerfile outlines the process for building a Docker image with NGINX Plus, NGINX App Protect, and NGINX App Protect DoS on Debian (Buster, Bullseye, Bookworm). It includes steps for setting up the base image, copying NGINX repository credentials and license, installing system dependencies, adding NGINX official package repositories, and finally installing the NGINX App Protect packages.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/learn-about-deployment.md#_snippet_178

LANGUAGE: Dockerfile
CODE:
```
ARG OS_CODENAME
# Where OS_CODENAME can be: buster/bullseye/bookworm

FROM debian:${OS_CODENAME}

# Download certificate, key, and JWT license from the customer portal (https://my.f5.com)
# and copy to the build context:
RUN mkdir -p /etc/ssl/nginx/
RUN mkdir -p /etc/nginx/
COPY nginx-repo.crt nginx-repo.key /etc/ssl/nginx/
COPY nginx-repo.crt license.jwt /etc/nginx/

# Install prerequisite packages:
RUN apt-get update && apt-get install -y apt-transport-https lsb-release ca-certificates wget gnupg2 debian-archive-keyring

# Download and add the NGINX signing key:
RUN wget -qO - https://cs.nginx.com/static/keys/nginx_signing.key | gpg --dearmor | tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null

# Add NGINX Plus, NGINX App Protect and NGINX App Protect DoS repository:
RUN printf "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] https://pkgs.nginx.com/plus/debian `lsb_release -cs` nginx-plus\n" | tee /etc/apt/sources.list.d/nginx-plus.list
RUN printf "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] https://pkgs.nginx.com/app-protect-dos/debian `lsb_release -cs` nginx-plus\n" | tee /etc/apt/sources.list.d/nginx-app-protect-dos.list
RUN printf "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] https://pkgs.nginx.com/app-protect/debian `lsb_release -cs` nginx-plus\n" | tee /etc/apt/sources.list.d/nginx-app-protect.list

# Download the apt configuration to `/etc/apt/apt.conf.d`:
RUN wget -P /etc/apt/apt.conf.d https://cs.nginx.com/static/files/90pkgs-nginx

# Update the repository and install the most recent version of the NGINX App Protect DoS and NGINX App Protect package (which includes NGINX Plus):
RUN apt-get update && apt-get install -y app-protect-dos app-protect

# Remove nginx repository key/cert from docker
RUN rm -rf /etc/ssl/nginx

# Copy configuration files:
COPY nginx.conf custom_log_format.json /etc/nginx/
COPY entrypoint.sh  /root/

CMD /root/entrypoint.sh && tail -f /dev/null
```

----------------------------------------

TITLE: Configuring NGINX for HTTPS Proxy Pass
DESCRIPTION: This snippet shows how to configure NGINX to proxy requests to an upstream server using the HTTPS protocol. By specifying `https://` in the `proxy_pass` directive, NGINX initiates an SSL/TLS encrypted connection to the backend.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/securing-http-traffic-upstream.md#_snippet_0

LANGUAGE: nginx
CODE:
```
location /upstream {
    proxy_pass https://backend.example.com;
}
```

----------------------------------------

TITLE: Configure NGINX Stream Module for mTLS
DESCRIPTION: This snippet configures the NGINX stream module to proxy requests to the App Protect Enforcer with mTLS enabled. It specifies the client certificate, key, and trusted CA certificate for secure communication. It listens on port 5000 and forwards traffic to the enforcer on port 4431.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/configuration-guide/configuration.md#_snippet_15

LANGUAGE: nginx
CODE:
```
stream {
	    upstream enforcer {
	        # Replace with the actual App Protect Enforcer address and port if different
	        server 127.0.0.1:4431;
	    }

	    server {
	        listen 5000;
	        proxy_pass enforcer;
	        proxy_ssl_server_name on;
	        proxy_timeout 60m;
	        proxy_ssl on;
            proxy_ssl_certificate /etc/ssl/certs/app_protect_client.crt;
		    proxy_ssl_certificate_key /etc/ssl/certs/app_protect_client.key;
		    proxy_ssl_trusted_certificate /etc/ssl/certs/app_protect_server_ca.crt;
	    }
	}
```

----------------------------------------

TITLE: Configuring HTTPS Virtual Server with SSL/TLS in NGINX
DESCRIPTION: This NGINX server block defines a virtual server to handle HTTPS traffic on port 443 for 'example.com'. It requires 'ssl_certificate' and 'ssl_certificate_key' directives to specify the SSL/TLS certificate and private key files, enabling secure communication. Optional directives like 'ssl_session_cache' and 'ssl_prefer_server_ciphers' are included for performance and security best practices.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_13

LANGUAGE: nginx
CODE:
```
# In the 'http' block
server {
    listen 443 ssl;
    server_name example.com;

    ssl_certificate     /etc/nginx/ssl/example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;
    ssl_session_cache   shared:SSL:1m;
    ssl_prefer_server_ciphers on;
}
```

----------------------------------------

TITLE: Complete NGINX Configuration Example
DESCRIPTION: This complete example summarizes the steps outlined above. It includes specifying the DNS resolver, defining the OIDC provider, configuring SSL, and proxying requests to an internal server. Replace `<client_id>` and `<client_secret>` with your actual AD FS Client ID and Secret.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/active-directory-federation-services.md#_snippet_12

LANGUAGE: nginx
CODE:
```
http {
    # Use a public DNS resolver for Issuer discovery, etc.
    resolver 10.0.0.1 ipv4=on valid=300s;

    oidc_provider adfs {

        # The 'issuer' is typically your AD FS OIDC URL
        # e.g. https://adfs.example.com/adfs
        issuer https://adfs.example.com/adfs;

        # Replace with your actual AD FS Client ID and Secret
        client_id     <client_id>;
        client_secret <client_secret>;
    }

    server {
        listen      443 ssl;
        server_name demo.example.com;

        ssl_certificate     /etc/ssl/certs/fullchain.pem;
        ssl_certificate_key /etc/ssl/private/key.pem;

        location / {
            # Protect this location with AD FS OIDC
            auth_oidc adfs;

            # Forward OIDC claims as headers if desired
            proxy_set_header sub   $oidc_claim_sub;
            proxy_set_header email $oidc_claim_email;
            proxy_set_header name  $oidc_claim_name;

            proxy_pass http://127.0.0.1:8080;
        }
    }

    server {
        listen 8080;

        location / {
            return 200 "Hello, $http_name!\nEmail: $http_email\nAD FS sub: $http_sub\n";
            default_type text/plain;
        }
    }
}
```

----------------------------------------

TITLE: Nginx Configuration for Percentage-Based Cache Splitting
DESCRIPTION: This Nginx configuration snippet is generated based on the percentage-based cache splitting configuration. It includes the split_clients directive, proxy_cache_path directives for each disk store, and configures the location block with proxy_cache, add_header, and proxy_cache_valid directives. The hl_lines attribute highlights key lines related to the cache splitting configuration.
SOURCE: https://github.com/nginx/documentation/blob/main/content/controller/app-delivery/about-caching.md#_snippet_3

LANGUAGE: Nginx configuration file
CODE:
```
split_clients $request_uri $cache_bdfa5d91f97d37dbb97a42dde6a5f4ff {
    20% app_centric_env|app|split_cache_percentage|/tmp/hdd1;
    50% app_centric_env|app|split_cache_percentage|/tmp/hdd2;
    * app_centric_env|app|split_cache_percentage|/tmp/default;
}
proxy_cache_path /tmp/hdd1/app_centric_env|app|split_cache_percentage| max_size=5G min_free=10k keys_zone=app_centric_env|app|split_cache_percentage|/tmp/hdd1: 100m purger=off inactive=1m;
proxy_cache_path /tmp/hdd2/app_centric_env|app|split_cache_percentage| max_size=5g min_free=10k keys_zone=app_centric_env|app|split_cache_percentage|/tmp/hdd2: 100m purger=off inactive=10s;
proxy_cache_path /tmp/default/app_centric_env|app|split_cache_percentage| max_size=2g min_free=10k keys_zone=app_centric_env|app|split_cache_percentage|/tmp/default: 100m purger=off inactive=15s;
upstream split_p_http_7ec84d9e-373e-4d90-bcaa-0e33dcc4b906 {
    zone split_p_http_7ec84d9e-373e-4d90-bcaa-0e33dcc4b906 160k;
    server 10.146.187.154: 80;
    keepalive 64;
    keepalive_requests 100;
    keepalive_timeout 60s;
}
server {
    server_name test.example.com;
    listen 80 reuseport;
    status_zone server_4d1ee345-cf08-354e-93dc-1c3a844a04e3;
    set $f5_gateway gw;
    f5_metrics_marker gateway $f5_gateway;
    set $f5_environment env;
    f5_metrics_marker environment $f5_environment;
    location /aaa {
        error_log /dev/null;
        access_log off;
        proxy_cache $cache_bdfa5d91f97d37dbb97a42dde6a5f4ff;
        set $f5_app app;
        f5_metrics_marker app $f5_app;
        set $f5_component split_cache_percentage;
        f5_metrics_marker component $f5_component;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header Connection '';
        proxy_http_version 1.1;
        add_header Cache $upstream_cache_status;
        proxy_cache_valid any 1m;
        proxy_pass http: //split_p_http_7ec84d9e-373e-4d90-bcaa-0e33dcc4b906;
}

```

----------------------------------------

TITLE: Health Check Configuration
DESCRIPTION: This snippet enables health checks for the '/weblogic-app/' location using the `health_check` directive.  It specifies a URI and a named `match` block to define the criteria for a successful health check.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-weblogic-server.md#_snippet_30

LANGUAGE: nginx
CODE:
```
# In the 'server' block for HTTPS traffic
location /weblogic-app/ {
    proxy_pass http://weblogic;
    proxy_cache backcache;
    health_check uri=/benefits match=health_check;
}
```

----------------------------------------

TITLE: Checking NGINX Configuration Syntax (Bash)
DESCRIPTION: This command checks the syntax of the NGINX configuration files. It's a crucial step before performing a reload or restart to prevent service interruptions due to invalid configurations. The command will report any syntax errors or confirm that the configuration is valid.
SOURCE: https://github.com/nginx/documentation/blob/main/templates/style-guide.md#_snippet_1

LANGUAGE: bash
CODE:
```
sudo nginx -t
```

----------------------------------------

TITLE: Restricting API Access in Nginx
DESCRIPTION: This configuration restricts access to the NGINX Plus API location, allowing access only from localhost (127.0.0.1) and requiring HTTP basic authentication for `PATCH`, `POST`, and `DELETE` methods. This enhances the security of the API endpoint.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/denylisting-ip-addresses.md#_snippet_4

LANGUAGE: nginx
CODE:
```
# ...
 server {
  listen 80;
  server_name www.example.com;

  location /api {
   api   write=on;

   allow 127.0.0.1;
   deny  all;

   limit_except GET {
    auth_basic "NGINX Plus API";
    auth_basic_user_file /path/to/passwd/file;
   }
  }
 }
```

----------------------------------------

TITLE: Verify redirect with curl for soda application (Shell)
DESCRIPTION: This `curl` command sends a request to `http://cafe.example.com/soda` and includes the response headers to verify the redirect. The `--resolve` maps hostname to the specified IP and Port, and the `--include` option is used to show the response headers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-management/redirects-and-rewrites.md#_snippet_13

LANGUAGE: shell
CODE:
```
curl --resolve cafe.example.com:$GW_PORT:$GW_IP http://cafe.example.com:$GW_PORT/soda --include
```

----------------------------------------

TITLE: Generating Self-Signed Certificate (OpenSSL)
DESCRIPTION: This command generates a self-signed certificate using the private key. The -new and -x509 parameters create a new self-signed certificate. The -days parameter sets the validity period for the certificate.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_2

LANGUAGE: none
CODE:
```
root# openssl req -new -x509 -key ~/private-key.pem -out ~/self-cert.pem -days 10950
```

----------------------------------------

TITLE: Setting App Protect Failure Mode Action in Nginx
DESCRIPTION: This snippet demonstrates how to set the `app_protect_failure_mode_action` directive within the `http` block of the nginx.conf file.  It configures the behavior of App Protect WAF when the daemons are down or disconnected, either to 'pass' traffic without inspection (fail open) or 'drop' traffic (fail closed).
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/configuration-guide/configuration.md#_snippet_21

LANGUAGE: nginx
CODE:
```
...
http {
    ...
    app_protect_failure_mode_action drop;
    ...
    server {
        listen       80;
...
    }
...

```

----------------------------------------

TITLE: Configuring keepalived for All-Active HA
DESCRIPTION: This keepalived configuration is designed for an active-active-active setup. It defines three vrrp_instance blocks, each responsible for managing a virtual IP address. The priority, virtual_router_id, and unicast_peer settings are crucial for proper failover and load balancing across multiple active nodes. A script is defined to check the nginx service to maintain the node status.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/high-availability/ha-keepalived-nodes.md#_snippet_5

LANGUAGE: yaml
CODE:
```
vrrp_script chk_nginx_service {
    script   "/usr/lib/keepalived/nginx-ha-check"
    interval 3
    weight   50
}

vrrp_instance VI_1 {
    interface         eth0
    state             BACKUP
    priority          101
    virtual_router_id 51
    advert_int        1
    accept
    unicast_src_ip    192.168.10.10

    unicast_peer {
        192.168.10.11
        192.168.10.12
        192.168.10.13
    }

    virtual_ipaddress {
        192.168.10.100
    }

    track_script {
        chk_nginx_service
    }

    notify "/usr/lib/keepalived/nginx-ha-notify"
}

vrrp_instance VI_2 {
    interface         eth0
    state             BACKUP
    priority          100
    virtual_router_id 61
    advert_int        1
    accept
    unicast_src_ip    192.168.10.10

    unicast_peer {
        192.168.10.11
        192.168.10.12
        192.168.10.13
    }

    virtual_ipaddress {
        192.168.10.101
    }

    track_script {
        chk_nginx_service
    }

    notify "/usr/lib/keepalived/nginx-ha-notify"
}

vrrp_instance VI_3 {
    interface         eth0
    state             BACKUP
    priority          99
    virtual_router_id 71
    advert_int        1
    accept
    unicast_src_ip    192.168.10.10

    unicast_peer {
        192.168.10.11
        192.168.10.12
        192.168.10.13
    }

    virtual_ipaddress {
        192.168.10.102
    }

    track_script {
        chk_nginx_service
    }

    notify "/usr/lib/keepalived/nginx-ha-notify"
}
```

----------------------------------------

TITLE: Bookinfo Ingress Definition
DESCRIPTION: Defines a Kubernetes Ingress resource for the Bookinfo application.  It routes requests to `bookinfo.example.com` to the `productpage` service on port 9080. It includes an optional `ingressClassName` for Kubernetes versions 1.18.0 and greater.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/tutorials/kic/ingress-walkthrough.md#_snippet_5

LANGUAGE: yaml
CODE:
```
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bookinfo-ingress
spec:
  ingressClassName: nginx # use only with k8s version >= 1.18.0
  tls:
  rules:
  - host: bookinfo.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: productpage
            port:
              number: 9080
```

----------------------------------------

TITLE: Brute Force Protection Policy - Universal in JSON
DESCRIPTION: This JSON snippet defines a brute force protection policy that applies universally to all login pages. It configures thresholds for login attempts from the same IP and the same user, with the action set to 'alarm'. It also sets a re-enable login time and a source-based protection detection period.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/configuration-guide/configuration.md#_snippet_19

LANGUAGE: json
CODE:
```
{
    "policy": {
        "name": "BruteForcePolicy",
        "template": {
            "name": "POLICY_TEMPLATE_NGINX_BASE"
        },
        "applicationLanguage": "utf-8",
        "enforcementMode": "blocking",
        "brute-force-attack-preventions" : [
            {
               "bruteForceProtectionForAllLoginPages" : true,
               "loginAttemptsFromTheSameIp" : {
                  "action" : "alarm",
                  "enabled" : true,
                  "threshold" : 20
               },
               "loginAttemptsFromTheSameUser" : {
                  "action" : "alarm",
                  "enabled" : true,
                  "threshold" : 3
               },
               "reEnableLoginAfter" : 3600,
               "sourceBasedProtectionDetectionPeriod" : 3600
            }
        ]
    }
}
```

----------------------------------------

TITLE: Setting Cache Validity for Specific Status Codes in NGINX
DESCRIPTION: This snippet uses the `proxy_cache_valid` directive to define the validity period for cached responses based on their HTTP status codes. Responses with status codes 200 and 302 are valid for 10 minutes, while 404 responses are valid for 1 minute, allowing fine-grained control over cache freshness.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/content-cache/content-caching.md#_snippet_6

LANGUAGE: Nginx
CODE:
```
proxy_cache_valid 200 302 10m;
proxy_cache_valid 404      1m;
```

----------------------------------------

TITLE: Configure Active Cookie Session Persistence in Nginx
DESCRIPTION: This snippet adds the `sticky cookie` directive to the upstream block, enabling active-cookie session persistence. Nginx adds a cookie called `ngxcookie` to every new user session, recording a hash of the backend server that was selected for the first request from the user. The cookie expires when the browser restarts.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-e-business-suite.md#_snippet_23

LANGUAGE: nginx
CODE:
```
# In the 'http' block
upstream oracle {
    zone oracle 64k;
    server 172.31.11.210:8000 max_fails=0;
    server 172.31.0.146:8000 max_fails=0;
    sticky cookie ngxcookie;
}
```

----------------------------------------

TITLE: Configuring Petstore API Gateway Service and Routes
DESCRIPTION: This JSON snippet defines a service named 'petstore-svc' with its backend target 'petstore3.swagger.io' and various ingress routes. It includes configurations for adding, updating, finding, and deleting pets, specifying HTTP methods, URIs, and required parameters (path, query, header) along with their schemas.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/tutorials/oas-security-schemes.md#_snippet_32

LANGUAGE: JSON
CODE:
```
                  "targetName": "default"
                },
                "serviceContextRoot": "/",
                "serviceName": "petstore-svc",
                "serviceTargets": [
                  {
                    "failTimeout": "10s",
                    "hostname": "petstore3.swagger.io",
                    "listener": {
                      "enableTLS": true,
                      "port": 443,
                      "transportProtocol": "HTTP"
                    },
                    "maxConnections": 0,
                    "maxFails": 1,
                    "serverDown": false
                  }
                ]
              }
            ],
            "hostname": "apim-devenv-agent",
            "ingress": {
              "basePath": "/api/v3",
              "basePathVersionAppendRule": "NONE",
              "matchRule": "PREFIX",
              "routes": [
                {
                  "description": "Add a new pet to the store",
                  "httpMethod": "POST",
                  "parameters": [],
                  "targetBackendServiceLabel": "default",
                  "targetPolicyLabel": "default",
                  "uri": "/pet"
                },
                {
                  "description": "Update an existing pet by Id",
                  "httpMethod": "PUT",
                  "parameters": [],
                  "targetBackendServiceLabel": "default",
                  "targetPolicyLabel": "default",
                  "uri": "/pet"
                },
                {
                  "description": "Multiple status values can be provided with comma separated strings",
                  "httpMethod": "GET",
                  "parameters": [
                    {
                      "description": "Status values that need to be considered for filter",
                      "in": "QUERY",
                      "name": "status",
                      "required": false,
                      "schema": {
                        "type": "STRING"
                      }
                    }
                  ],
                  "targetBackendServiceLabel": "default",
                  "targetPolicyLabel": "default",
                  "uri": "/pet/findByStatus"
                },
                {
                  "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                  "httpMethod": "GET",
                  "parameters": [
                    {
                      "description": "Tags to filter by",
                      "in": "QUERY",
                      "name": "tags",
                      "required": false,
                      "schema": {
                        "type": "ARRAY"
                      }
                    }
                  ],
                  "targetBackendServiceLabel": "default",
                  "targetPolicyLabel": "default",
                  "uri": "/pet/findByTags"
                },
                {
                  "description": "",
                  "httpMethod": "POST",
                  "parameters": [
                    {
                      "description": "ID of pet that needs to be updated",
                      "in": "PATH",
                      "name": "petId",
                      "required": true,
                      "schema": {
                        "type": "INTEGER"
                      }
                    },
                    {
                      "description": "Name of pet that needs to be updated",
                      "in": "QUERY",
                      "name": "name",
                      "required": false,
                      "schema": {
                        "type": "STRING"
                      }
                    },
                    {
                      "description": "Status of pet that needs to be updated",
                      "in": "QUERY",
                      "name": "status",
                      "required": false,
                      "schema": {
                        "type": "STRING"
                      }
                    }
                  ],
                  "targetBackendServiceLabel": "default",
                  "targetPolicyLabel": "default",
                  "uri": "/pet/{petId}"
                },
                {
                  "description": "",
                  "httpMethod": "DELETE",
                  "parameters": [
                    {
                      "description": "",
                      "in": "HEADER",
                      "name": "api_key",
                      "required": false,
                      "schema": {
                        "type": "STRING"
                      }
                    },
                    {
                      "description": "Pet id to delete",
                      "in": "PATH",
                      "name": "petId",
                      "required": true,
                      "schema": {

```

----------------------------------------

TITLE: Getting Security Policy Bundle and Decode Content - Bash
DESCRIPTION: This snippet retrieves a specific security policy bundle and decodes its content using `jq` and `base64`. It pipes the output of the `curl` command to `jq` to extract the `content` field, then pipes the extracted content to `base64 -d` to decode the base64 encoded content and save it as `security-policy-bundle.tgz`.  Requires `jq` and `base64` utilities.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/nginx-app-protect/manage-waf-security-policies.md#_snippet_13

LANGUAGE: bash
CODE:
```
curl -X GET "https://{{NIM_FQDN}}/api/platform/v1/security/policies/<policy-uid>/bundles/<bundle-uid>" \
    -H "Authorization: Bearer <access token>" | jq -r '.content' | base64 -d > security-policy-bundle.tgz
```

----------------------------------------

TITLE: Check Service Status
DESCRIPTION: This bash command retrieves the status of the Services in the cluster, ensuring that the target-v3-0 Service is available. It helps verify that the new application version is correctly exposed.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/tutorials/trafficsplit-deployments.md#_snippet_21

LANGUAGE: bash
CODE:
```
$ kubectl get svc
NAME          TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)        AGE
gateway-svc   LoadBalancer   10.0.0.2        1.2.3.4         80:30975/TCP   2m
target-svc    ClusterIP      10.0.0.3        <none>          80/TCP         2m
target-v2-1   ClusterIP      10.0.0.4        <none>          80/TCP         2m
target-v3-0   ClusterIP      10.0.0.5        <none>          80/TCP         2m
```

----------------------------------------

TITLE: Backing Up Private Key File
DESCRIPTION: This command creates a backup copy of the generated private key file. It is crucial to store this backup in a secure location, as losing the key renders the associated certificate unusable.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_1

LANGUAGE: shell
CODE:
```
root# cp ~/private-key.pem <SECURE-DIR>/private-key.pem.backup
```

----------------------------------------

TITLE: Configuring HTTPS Virtual Server (Nginx)
DESCRIPTION: This snippet configures a virtual server for HTTPS traffic on port 443 within the 'http' block. It enables SSL/TLS and sets up a status zone for monitoring. The `listen` directive specifies the port and the `ssl` parameter.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/microsoft-exchange.md#_snippet_32

LANGUAGE: nginx
CODE:
```
# In the 'http' block
server {
    listen 443 ssl;
    status_zone exchange-combined;
}
```

----------------------------------------

TITLE: Configuring NGINX App Protect WAF Directives in NGINX
DESCRIPTION: This NGINX configuration snippet demonstrates how to enable NGINX App Protect WAF within a `location` block. It includes directives for enabling the WAF, referencing a custom security policy bundle, enabling security logging, and specifying the log profile bundle and output file. This configuration applies WAF protection and logging to requests matching the `/` location.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/nginx-app-protect/setup-waf-config-management.md#_snippet_42

LANGUAGE: nginx
CODE:
```
server {
  ...

  location / {
    # Enable NGINX App Protect WAF
    app_protect_enable on;

    # Reference a custom security policy bundle
    app_protect_policy_file /etc/nms/ignore-xss.tgz;

    # Enable security logging
    app_protect_security_log_enable on;

    # Reference the log profile bundle
    app_protect_security_log /etc/nms/log-default.tgz /var/log/nginx/security-violations.log;

    ...
  }
}
```

----------------------------------------

TITLE: CORS Policy Configuration via REST API - JSON Request
DESCRIPTION: This JSON payload demonstrates how to configure a CORS policy using the NGINX Management Suite API Connectivity Manager REST API. It specifies various CORS settings such as allowed credentials, methods, origins, exposed headers, and maximum age. The request should be sent as part of a `PUT` request to the Proxies endpoint (`/services/workspaces/{SERVICE_WORKSPACE_NAME}/proxies`).
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/policies/cors.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "policies": {
    "cors": [
      {
        "action": {
          "allowCredentials": true,
          "allowMethods": [
            "GET", "HEAD", "PUT", "PATCH", "POST"
          ],
          "allowOrigins": [
            {
              "exact": "example.com"
            }
          ],
          "exposedHeaders": [
            "header-name", "x-correlation-id"
          ],
          "maxAge": 30000
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: NGINX App Protect WAF Authorization Rules
DESCRIPTION: This JSON snippet defines authorization rules within a Nginx App Protect WAF policy for a specific URL. The 'authorizationRules' entity allows access to the URL based on the JWT claims. The example includes rules to check for specific scopes, roles, and email domain.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/configuration-guide/configuration.md#_snippet_10

LANGUAGE: json
CODE:
```
{
    "urls": [
        {
            "name": "/api/v3/shops/items/*",
            "accessProfile": {
                "name": "my_jwt"
            },
            "authorizationRules": [
                {
                    "condition": "claims['scope'].contains('pet:read') and claims['scope'].contains('pet:write')",
                    "name": "auth_scope"
                },
                {
                    "condition": "claims['roles'].contains('admin') or claims['roles'].contains('inventory-manager')",
                    "name": "auth_roles"
                },
                {
                    "condition": "claims['email'].endsWith('petshop.com')",
                    "name": "auth_email"
                }
            ]
        }
    ]
}
```

----------------------------------------

TITLE: Specifying SSL Protocols and Ciphers for NGINX Proxy
DESCRIPTION: This snippet shows how to explicitly define the SSL/TLS protocols and ciphers that NGINX will use when connecting to upstream servers. `proxy_ssl_protocols` restricts the allowed protocol versions, and `proxy_ssl_ciphers` specifies the acceptable cipher suites, enhancing security by excluding weak options.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/securing-http-traffic-upstream.md#_snippet_4

LANGUAGE: nginx
CODE:
```
location /upstream {
        #...
        proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        proxy_ssl_ciphers   HIGH:!aNULL:!MD5;
}
```

----------------------------------------

TITLE: Proxy Set Header for Nested JWT - Nginx Configuration
DESCRIPTION: This snippet configures Nginx Plus to pass the decrypted payload of a nested JWT to the backend application as the Bearer token value in the `Authorization` header. The `$jwt_payload` contains the JWS payload after JWE decryption.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-jwt-authentication.md#_snippet_15

LANGUAGE: nginx
CODE:
```
proxy_set_header Authorization "Bearer $jwt_payload";
```

----------------------------------------

TITLE: Referring to a match block in Nginx health_check
DESCRIPTION: This snippet shows how to refer to a previously defined `match` block within the `health_check` directive. The `match` parameter is set to the name of the `match` block (`tcp_test`) to specify which health check tests should be applied.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/tcp-health-check.md#_snippet_10

LANGUAGE: nginx
CODE:
```
stream {
    #...
    server {
        listen       12345;
        health_check match=tcp_test;
        proxy_pass   stream_backend;
    }
    #...
}
```

----------------------------------------

TITLE: Defining Writable Volumes for NGINX in Kubernetes (YAML)
DESCRIPTION: This snippet configures writable volumes for specific directories required by NGINX and App Protect when running with a read-only root filesystem. It mounts volumes to directories like `/tmp` and `/var/log/nginx`, which are essential for logs and temporary files. It also defines the volumes using `emptyDir` and `persistentVolumeClaim`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/nap-k8s-readonly-context.md#_snippet_1

LANGUAGE: yaml
CODE:
```
containers:
    - name: nginx
      ...
      volumeMounts:
           - name: app-protect-bd-config
             mountPath: /opt/app_protect/bd_config
           - name: app-protect-config
             mountPath: /opt/app_protect/config
           - name: tmp-volume
             mountPath: /tmp
           - name: nginx-log
             mountPath: /var/log/nginx
           - name: app-protect-bundles
             mountPath: /etc/app_protect/bundles
...

volumes:
        - name: app-protect-bd-config
          emptyDir: {}
        - name: app-protect-config
          emptyDir: {}
        - name: nginx-log
          emptyDir: {}
        - name: tmp-volume
          emptyDir: {}
        - name: app-protect-bundles
          persistentVolumeClaim:
            claimName: nap5-bundles-pvc 
```

----------------------------------------

TITLE: Testing NGINX Stub Status with Curl (Bash)
DESCRIPTION: This snippet demonstrates how to use the `curl` command to test the reachability and output of the NGINX `stub_status` endpoint. It shows the expected format of the metrics, including active connections, server statistics, and connection states (reading, writing, waiting).
SOURCE: https://github.com/nginx/documentation/blob/main/content/amplify/nginx-amplify-agent/configuring-metric-collection.md#_snippet_2

LANGUAGE: bash
CODE:
```
$ curl http://127.0.0.1/nginx_status
Active connections: 2
server accepts handled requests
 344014 344014 661581
Reading: 0 Writing: 1 Waiting: 1
```

----------------------------------------

TITLE: Configuring WebSocket Proxy Nginx
DESCRIPTION: This snippet defines a map to set the $connection_upgrade variable based on the $http_upgrade header, used for WebSocket proxying. It defaults to 'upgrade' if $http_upgrade is set, otherwise 'close'. This map is used to properly handle WebSocket connections.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/node-js.md#_snippet_18

LANGUAGE: nginx
CODE:
```
# In the 'http' block
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}
```

----------------------------------------

TITLE: Least Connections Load Balancing
DESCRIPTION: Configures Least Connections load balancing for the 'backend' upstream group. The `least_conn` directive ensures that requests are sent to the server with the fewest active connections.  This method helps balance the load based on real-time connection counts.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/http-load-balancer.md#_snippet_4

LANGUAGE: nginx
CODE:
```
upstream backend {
    least_conn;
    server backend1.example.com;
    server backend2.example.com;
}
```

----------------------------------------

TITLE: Complete NGINX Cache Purge Configuration Example
DESCRIPTION: This comprehensive NGINX configuration example integrates cache purging functionalities within the `http` context. It includes defining the cache path with the `purger=on` option, mapping the `PURGE` method, and configuring a server block to use the cache and apply the purge method. It also incorporates IP-based access restriction for the purge command.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/content-cache/content-caching.md#_snippet_15

LANGUAGE: nginx
CODE:
```
http {
    # ...
    proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=mycache:10m purger=on;

    map $request_method $purge_method {
        PURGE 1;
        default 0;
    }

    server {
        listen      80;
        server_name www.example.com;

        location / {
            proxy_pass        https://localhost:8002;
            proxy_cache       mycache;
            proxy_cache_purge $purge_method;
        }
    }

    geo $purge_allowed {
       default         0;
       10.0.0.1        1;
       192.168.0.0/24  1;
    }

    map $request_method $purge_method {
       PURGE   $purge_allowed;
       default 0;
    }
}
```

----------------------------------------

TITLE: Upstream gRPC server group configuration in Nginx
DESCRIPTION: Configures an upstream group of servers that handles gRPC network traffic and specifies a shared memory zone. This allows Nginx to keep track of the servers' states. It defines two servers as part of the grpc_backend group listening on port 50051.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/grpc-health-check.md#_snippet_0

LANGUAGE: nginx
CODE:
```
stream {
    #...
    upstream grpc_backend {
        zone   grpc_backend 64k;
        server 10.0.0.1:50051;
        server 10.0.0.2:50051;
    }
    #...
}
```

----------------------------------------

TITLE: Configuring Health Check with Status and Body Condition in Nginx
DESCRIPTION: This code configures a health check that verifies the HTTP status code is within the range of 200-399 and that the response body does not contain 'maintenance mode'. It then associates this check with a specific location using the `health_check` directive with the `match` parameter.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/http-health-check.md#_snippet_9

LANGUAGE: nginx
CODE:
```
http {
    #...
    match server_ok {
        status 200-399;
        body   !~ "maintenance mode";
    }
    server {
        #...
        location / {
            proxy_pass   http://backend;
            health_check match=server_ok;
        }
    }
}
```

----------------------------------------

TITLE: Setting 'down' Parameter for a Server via API with PATCH Method (Shell)
DESCRIPTION: This command sets the `down` parameter for a specific server in the upstream group using the PATCH method via curl. It updates the server configuration by sending a JSON payload with the `down` parameter set to true. The target server is identified by its ID.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/monitoring/live-activity-monitoring.md#_snippet_23

LANGUAGE: shell
CODE:
```
curl -X PATCH -d '{ "down": true }' -s 'http://192.168.1.23/api/9/http/upstreams/appservers/servers/0'
```

----------------------------------------

TITLE: Configuring Authorization Rules in URLs (JSON)
DESCRIPTION: This JSON configuration snippet illustrates how to define authorization rules within URL settings for JWT validation in NGINX App Protect WAF. The example demonstrates setting up conditions based on JWT claims, such as checking for specific scopes (e.g., 'pet:read', 'pet:write'), roles (e.g., 'admin', 'inventory-manager'), and email domain (e.g., ending with 'petshop.com'). This configuration allows for fine-grained access control based on claims embedded within the JWT.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v4/configuration-guide/configuration.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
    "urls": [
        {
            "name": "/api/v3/shops/items/*",
            "accessProfile": {
                "name": "my_jwt"
            },
            "authorizationRules": [
                {
                    "condition": "claims['scope'].contains('pet:read') and claims['scope'].contains('pet:write')",
                    "name": "auth_scope"
                },
                {
                    "condition": "claims['roles'].contains('admin') or claims['roles'].contains('inventory-manager')",
                    "name": "auth_roles"
                },
                {
                    "condition": "claims['email'].endsWith('petshop.com')",
                    "name": "auth_email"
                }
            ]
        }
    ]
}
```

----------------------------------------

TITLE: Creating NGINX Configuration with Dynamic Upstream
DESCRIPTION: This NGINX configuration defines an `http` block with an `upstream` named `my-service` for dynamic server management by the NLK controller. It includes required `zone` and `state` directives, and a `server` block that proxies requests to this dynamic upstream. The `upstream` must not list any static servers, as they are managed dynamically.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/loadbalancer-kubernetes.md#_snippet_7

LANGUAGE: nginx
CODE:
```
http {
  upstream my-service {
    # NOTE: There are no servers defined here as they will be managed dynamically by the controller.
    zone my-service 64K;          # required
    state /tmp/my-service.state;  # required
  }

  server {
    listen 80;
    location / {
        proxy_pass http://my-service;
    }
  }
}
```

----------------------------------------

TITLE: Describe Kubernetes Pod
DESCRIPTION: This command retrieves detailed information about a specific Kubernetes Pod, including its status, events, and configuration. It is useful for diagnosing issues related to pod startup, readiness, and resource allocation. Replace <ngf-pod-name> with the actual name of the NGINX Gateway Fabric pod.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/monitoring/troubleshooting.md#_snippet_13

LANGUAGE: shell
CODE:
```
kubectl describe pod <ngf-pod-name> -n nginx-gateway
```

----------------------------------------

TITLE: Kubernetes Service for NGINX App Protect DoS (YAML)
DESCRIPTION: This YAML defines a Kubernetes Service of type NodePort for the NGINX App Protect DoS application. It exposes port 80, mapping it to the container's port 80, allowing external access to the application.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/learn-about-deployment.md#_snippet_190

LANGUAGE: yaml
CODE:
```
apiVersion: v1
kind: Service
metadata:
  name: svc-appprotect-dos
  namespace: appprotect-dos-wp-diff
  labels:
    app: appprotect-dos
spec:
  ports:
    - name: app
      port: 80
      protocol: TCP
      nodePort: 80
  selector:
    app: appprotect-dos
  type: NodePort
```

----------------------------------------

TITLE: Configuring Custom Cache Key for Nginx Proxy
DESCRIPTION: This snippet configures a custom cache key for Nginx. It includes the `$proxy_host`, `$request_uri`, and `$cookie_jessionid` variables in the key to create a unique cache entry for each user based on their session.  This ensures that cached content is specific to each user's session.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_23

LANGUAGE: nginx
CODE:
```
proxy_cache_key $proxy_host$request_uri$cookie_jessionid;
```

----------------------------------------

TITLE: Enable HTTP/2 Support in Nginx
DESCRIPTION: This snippet enables HTTP/2 support by adding the `http2` directive in the `server` block for HTTPS traffic. The `listen` directive specifies that the server should listen on port 443 for SSL connections.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-e-business-suite.md#_snippet_24

LANGUAGE: nginx
CODE:
```
# In the 'server' block for HTTPS traffic
listen 443 ssl;
http2  on;
```

----------------------------------------

TITLE: Reload NGINX Configuration
DESCRIPTION: This snippet demonstrates the command to reload the NGINX configuration after making changes. This applies the updated configuration without requiring a full restart of the NGINX service.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/set-misc.md#_snippet_9

LANGUAGE: shell
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Creating Certificate Signing Request (CSR) with OpenSSL
DESCRIPTION: This command generates a new Certificate Signing Request (CSR) using the specified private key. The CSR is signed with SHA256 and saved to `~/example.com.csr`. This file is then provided to a Certificate Authority (CA) to obtain a signed certificate.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_5

LANGUAGE: shell
CODE:
```
root# openssl req -new -sha256 -key ~/example.com.key -out ~/example.com.csr
```

----------------------------------------

TITLE: Enabling Simple NGINX OpenTelemetry Tracing
DESCRIPTION: This NGINX configuration enables basic request tracing using `otel_trace on`. It captures tracing information for every incoming request, even in non-distributed environments, providing fundamental observability.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/opentelemetry.md#_snippet_19

LANGUAGE: nginx
CODE:
```
http {
    otel_trace on;
    server {
        location / {
        proxy_pass http://backend;
        }
    }
}
```

----------------------------------------

TITLE: Adding Client Certificate for Upstream Authentication in NGINX
DESCRIPTION: This configuration demonstrates how to enable NGINX to present a client certificate to the upstream server for mutual TLS authentication. The `proxy_ssl_certificate` and `proxy_ssl_certificate_key` directives specify the path to NGINX's client certificate and its corresponding private key, respectively.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/securing-http-traffic-upstream.md#_snippet_1

LANGUAGE: nginx
CODE:
```
location /upstream {
    proxy_pass                https://backend.example.com;
    proxy_ssl_certificate     /etc/nginx/client.pem;
    proxy_ssl_certificate_key /etc/nginx/client.key;
}
```

----------------------------------------

TITLE: Defining Introspection Policy Configuration (YAML/JSON)
DESCRIPTION: This snippet showcases the structure for configuring an OAuth2 Introspection policy. It defines parameters such as introspection endpoint, SNI settings, token forwarding, claim verification, DNS resolver configuration, error return conditions, and client credentials. The configuration is intended to be used within a YAML or JSON file for configuring the NGINX data plane.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/policies/introspection.md#_snippet_1

LANGUAGE: json
CODE:
```
{
   "introspectionEndpoint": "https://idp.com/introspect",
   "enableSNI": false,
   "proxyTLSName": "test.oauth.com",
   "introspectionResponse": "application/json",
   "cacheIntrospectionResponse": "5m",
   "clientTokenSuppliedIn": "HEADER",
   "clientTokenName": "Authorization",
   "authzServerTokenHint": "ACCESS_TOKEN",
   "forwardToken": true,
   "forwardedClaimsInProxyHeader": [
       "scope",
       "username",
       "exp"
   ],
   "verifyClaims": [
       {
           "claim": "resource_access.account.roles",
           "type": "STRING",
           "delimiter": "SPACE",
           "value": "test-user-1"
       }
   ],
   "resolver": {
       "valid": "30s",
       "timeout": "30s",
       "servers": [
           {
               "hostname": "example.com"
           },
           {
               "hostname": "10.0.0.11",
               "port": 53
           }
       ]
   },
   "errorReturnConditions": {
       "noMatch": {
           "returnCode": 403
       },
       "notSupplied": {
           "returnCode": 401
       }
   },
   "data": [
       {
           "clientAppID": "idp-client-app-id",
           "clientSecret": "dbdaa3e1-f100-420x-bfd0-875bd8a77cd7"
       }
   ]
}
```

----------------------------------------

TITLE: Docker Compose Log Collection
DESCRIPTION: Collects logs from Docker Compose deployments for troubleshooting NGINX App Protect WAF. This command redirects the output of `docker compose logs` to a text file for analysis.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/troubleshooting-guide/troubleshooting.md#_snippet_0

LANGUAGE: Shell
CODE:
```
sudo docker compose logs > docker_compose_logs.txt
```

----------------------------------------

TITLE: Defining Multiple Index Files with Custom Variable in NGINX
DESCRIPTION: This NGINX configuration specifies multiple possible index filenames for the root location. NGINX searches for these files in the defined order and serves the first one found. It also demonstrates the use of a custom variable (`$geo`) in an index filename, allowing for dynamic index file selection based on client attributes.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/serving-static-content.md#_snippet_2

LANGUAGE: Nginx
CODE:
```
location / {
    index index.$geo.html index.htm index.html;
}
```

----------------------------------------

TITLE: Brute Force Protection Policy - Specific Login Page in JSON
DESCRIPTION: This JSON snippet defines a brute force protection policy for a specific login page, identified by its URL.  It configures thresholds for login attempts from the same IP and the same user, with the action set to 'alarm'. It also sets a re-enable login time, a source-based protection detection period, and specifies the target URL.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/configuration-guide/configuration.md#_snippet_20

LANGUAGE: json
CODE:
```
{
    "policy": {
        "name": "BruteForcePolicySpec",
        "template": {
            "name": "POLICY_TEMPLATE_NGINX_BASE"
        },
        "applicationLanguage": "utf-8",
        "enforcementMode": "blocking",
        "brute-force-attack-preventions" : [
            {
               "bruteForceProtectionForAllLoginPages" : false,
               "loginAttemptsFromTheSameIp" : {
                  "action" : "alarm",
                  "enabled" : true,
                  "threshold" : 20
               },
               "loginAttemptsFromTheSameUser" : {
                  "action" : "alarm",
                  "enabled" : true,
                  "threshold" : 3
               },
               "reEnableLoginAfter" : 3600,
               "sourceBasedProtectionDetectionPeriod" : 3600,
               "url": {
                 "method": "*",
                 "name": "/html_login",
                 "protocol": "http"
		       }
            }
        ],

    }
}
```

----------------------------------------

TITLE: Enabling Mandatory Health Checks in Nginx
DESCRIPTION: This code configures mandatory and persistent health checks for an upstream server. The `mandatory` parameter ensures that newly added servers pass all health checks before receiving traffic. The `persistent` parameter ensures the health check state is remembered across configuration reloads.  `slow_start` gives the server time to warm up.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/http-health-check.md#_snippet_12

LANGUAGE: nginx
CODE:
```
upstream my_upstream {
    zone   my_upstream 64k;
    server backend1.example.com slow_start=30s;
}

server {
    location / {
        proxy_pass   http://my_upstream;
        health_check mandatory persistent;
    }
}
```

----------------------------------------

TITLE: NGINX App Protect WAF Basic Configuration
DESCRIPTION: This example demonstrates a basic NGINX configuration with App Protect WAF enabled. It includes enabling App Protect, referencing a security policy file, enabling security logging, and defining a remote logger. The configuration also includes a server block with a proxy pass to a backend server.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v4/configuration-guide/configuration.md#_snippet_0

LANGUAGE: nginx
CODE:
```
user nginx;
worker_processes  4;

load_module modules/ngx_http_app_protect_module.so;

error_log /var/log/nginx/error.log debug;

events {
    worker_connections  65536;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    app_protect_enable on; # This is how you enable NGINX App Protect WAF in the relevant context/block
    app_protect_policy_file "/etc/app_protect/conf/NginxDefaultPolicy.json"; # This is a reference to the policy file to use. If not defined, the default policy is used
    app_protect_security_log_enable on; # This section enables the logging capability
    app_protect_security_log "/etc/app_protect/conf/log_default.json" syslog:server=127.0.0.1:514; # This is where the remote logger is defined in terms of: logging options (defined in the referenced file), log server IP, log server port

    server {
        listen       80;
        server_name  localhost;
        proxy_http_version 1.1;

        location / {
            client_max_body_size 0;
            default_type text/html;
            proxy_pass http://172.29.38.211:80$request_uri;
        }
    }
}
```

----------------------------------------

TITLE: Kubernetes Secret Definition for Registry Credentials
DESCRIPTION: This YAML snippet defines a Kubernetes Secret used to store the private registry credentials. The secret is created in the `nginx-mesh` namespace and labeled for identification. The `.dockerconfigjson` field contains the base64 encoded configuration.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/guides/private-registry.md#_snippet_3

LANGUAGE: yaml
CODE:
```
apiVersion: v1
kind: Secret
metadata:
    name: nginx-mesh-registry-key
    namespace: nginx-mesh
    labels:
        usage: nginx-mesh-registry-key
data:
    .dockerconfigjson: <base64-encoded-config>
type: kubernetes.io/dockerconfigjson
```

----------------------------------------

TITLE: Configuring WebSocket Proxy - Nginx
DESCRIPTION: This snippet configures the necessary settings for proxying WebSocket traffic. It defines a map to set the 'connection_upgrade' variable based on the 'http_upgrade' header, enabling the upgrade to HTTP/1.1.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_19

LANGUAGE: nginx
CODE:
```
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}
```

----------------------------------------

TITLE: Defining Health Check Criteria
DESCRIPTION: This snippet defines the criteria for a server to be considered healthy. It checks for a 200 status code, a Content-Type header of text/html, and a response body matching the regex 'Apache Tomcat/8'. This match block is referenced in the health_check directive.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_31

LANGUAGE: nginx
CODE:
```
# In the 'http' block
match health_check {
    status 200;
    header Content-Type = text/html;
    body ~ "Apache Tomcat/8";
}
```

----------------------------------------

TITLE: Nginx Server Block Configuration
DESCRIPTION: This Nginx configuration snippet represents a server block listening on port 80 with the server name "cafe.example.com". It contains a location block for the root path ('/') that proxy passes requests to an upstream named 'default_coffee_80'. This configuration ensures that traffic to cafe.example.com is routed to the appropriate upstream servers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-management/routing-traffic-to-your-app.md#_snippet_11

LANGUAGE: nginx
CODE:
```
server {
  listen 80;

  server_name cafe.example.com;

  location / {
    ...
    proxy_pass http://default_coffee_80$request_uri; # the upstream is named default_coffee_80
    ...
  }
}
```

----------------------------------------

TITLE: Defining Internal Authentication Location with Proxy Pass
DESCRIPTION: This NGINX configuration defines an internal location (`/auth`) that handles the authentication subrequests. The `internal` directive prevents direct client access, and `proxy_pass` forwards these subrequests to the external authentication server (`http://auth-server`).
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-subrequest-authentication.md#_snippet_2

LANGUAGE: nginx
CODE:
```
location = /auth {
    internal;
    proxy_pass http://auth-server;
    #...
}
```

----------------------------------------

TITLE: Verify Nginx signing key on Ubuntu
DESCRIPTION: This command verifies the integrity of the Nginx signing key that was downloaded, by checking its fingerprint.  It confirms that the key is the correct one before adding the Nginx repository.
SOURCE: https://github.com/nginx/documentation/blob/main/content/agent/installation-upgrade/installation-oss.md#_snippet_5

LANGUAGE: shell
CODE:
```
gpg --dry-run --quiet --no-keyring --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg
```

----------------------------------------

TITLE: Building Docker Image for NGINX App Protect
DESCRIPTION: This command builds a Docker image for NGINX App Protect WAF v5 using the provided Dockerfile, certificate (nginx-repo.crt), and key (nginx-repo.key). It utilizes Docker secrets to securely pass the certificate and key during the build process, avoiding their inclusion in the image itself. The resulting image is tagged as `nginx-app-protect-5`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/build-nginx-image-cmd.md#_snippet_0

LANGUAGE: shell
CODE:
```
sudo docker build --no-cache --platform linux/amd64 \
  --secret id=nginx-crt,src=nginx-repo.crt \
  --secret id=nginx-key,src=nginx-repo.key \
  -t nginx-app-protect-5 .
```

----------------------------------------

TITLE: NGINX Security Configuration - JSON
DESCRIPTION: This JSON configuration defines security settings for an NGINX application. It specifies the enforcement mode, blocking settings for different types of violations (empty parameter value, repeated parameter, mandatory parameter missing, parameter violation), and defines several parameters with attributes like name, type, location, sensitivity, and value type.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/common/do-nothing-and-user-defined-parameters.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "enforcementMode": "blocking",
  "blocking-settings": {
    "violations": [
      {
        "name": "VIOL_PARAMETER_EMPTY_VALUE",
        "alarm": true,
        "block": true
      },
      {
        "name": "VIOL_PARAMETER_REPEATED",
        "alarm": true,
        "block": true
      },
      {
        "name": "VIOL_MANDATORY_PARAMETER",
        "alarm": true,
        "block": true
      },
      {
        "name": "VIOL_PARAMETER",
        "alarm": true,
        "block": true
      }
    ]
  },
  "parameters": [
    {
      "name": "mypass",
      "type": "explicit",
      "parameterLocation": "any",
      "sensitiveParameter": true,
      "valueType": "auto-detect"
    },
    {
      "name": "empty",
      "type": "explicit",
      "parameterLocation": "any",
      "mandatory": false,
      "allowEmptyValue": true,
      "allowRepeatedParameterName": false,
      "sensitiveParameter": false,
      "valueType": "auto-detect"
    },
    {
      "name": "repeated",
      "type": "explicit",
      "parameterLocation": "any",
      "mandatory": false,
      "allowEmptyValue": false,
      "allowRepeatedParameterName": true,
      "sensitiveParameter": false,
      "valueType": "auto-detect"
    },
    {
      "name": "mandatory",
      "type": "explicit",
      "parameterLocation": "any",
      "mandatory": true,
      "allowEmptyValue": false,
      "allowRepeatedParameterName": false,
      "sensitiveParameter": false,
      "valueType": "auto-detect"
    }
  ]
}

```

----------------------------------------

TITLE: NGINX App Protect DoS Docker Deployment (Ubuntu)
DESCRIPTION: This Dockerfile provides a comprehensive example for deploying NGINX Plus with NGINX App Protect DoS on Ubuntu (18.04, 20.04, 22.04, 24.04). It covers setting up the base image, copying license files, installing prerequisites, adding NGINX signing keys, configuring NGINX Plus and App Protect DoS repositories, installing packages, and setting up NGINX configuration and entrypoint.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/learn-about-deployment.md#_snippet_161

LANGUAGE: Dockerfile
CODE:
```

ARG OS_CODENAME
# Where OS_CODENAME can be: bionic/focal/jammy/noble

FROM ubuntu:${OS_CODENAME}

# Download certificate, key, and JWT license from the customer portal (https://my.f5.com)
# and copy to the build context:
RUN mkdir -p /etc/ssl/nginx/
RUN mkdir -p /etc/nginx/
COPY nginx-repo.crt nginx-repo.key /etc/ssl/nginx/
COPY nginx-repo.crt license.jwt /etc/nginx/

# Install prerequisite packages:
RUN apt-get update && apt-get install -y apt-transport-https lsb-release ca-certificates wget gnupg2 ubuntu-keyring

# Download and add the NGINX signing key:
RUN wget -qO - https://cs.nginx.com/static/keys/nginx_signing.key | gpg --dearmor | tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null

# Add NGINX Plus and NGINX App Protect DoS repository:
RUN printf "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] https://pkgs.nginx.com/plus/ubuntu `lsb_release -cs` nginx-plus\n" | tee /etc/apt/sources.list.d/nginx-plus.list
RUN printf "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] https://pkgs.nginx.com/app-protect-dos/ubuntu `lsb_release -cs` nginx-plus\n" | tee /etc/apt/sources.list.d/nginx-app-protect-dos.list

# Download the apt configuration to `/etc/apt/apt.conf.d`:
RUN wget -P /etc/apt/apt.conf.d https://cs.nginx.com/static/files/90pkgs-nginx

# Update the repository and install the most recent version of the NGINX App Protect DoS package (which includes NGINX Plus):
RUN apt-get update && apt-get install -y app-protect-dos

# Remove nginx repository key/cert from docker
RUN rm -rf /etc/ssl/nginx

# Copy configuration files:
COPY nginx.conf /etc/nginx/
COPY entrypoint.sh /root/

CMD /root/entrypoint.sh && tail -f /dev/null
```

----------------------------------------

TITLE: Docker Compose Configuration
DESCRIPTION: Defines the Docker Compose configuration for deploying NGINX App Protect WAF services. It specifies the services (waf-enforcer and waf-config-mgr), their images, environment variables, ports, volumes, and network settings. The configuration also defines dependencies between the services.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/admin-guide/install.md#_snippet_8

LANGUAGE: yaml
CODE:
```
services:
  waf-enforcer:
    container_name: waf-enforcer
    image: private-registry.nginx.com/nap/waf-enforcer:5.2.0
    environment:
      - ENFORCER_PORT=50000
    ports:
      - "50000:50000"
    volumes:
      - /opt/app_protect/bd_config:/opt/app_protect/bd_config
    networks:
      - waf_network
    restart: always

  waf-config-mgr:
    container_name: waf-config-mgr
    image: private-registry.nginx.com/nap/waf-config-mgr:5.2.0
    volumes:
      - /opt/app_protect/bd_config:/opt/app_protect/bd_config
      - /opt/app_protect/config:/opt/app_protect/config
      - /etc/app_protect/conf:/etc/app_protect/conf
    restart: always
    network_mode: none
    depends_on:
      waf-enforcer:
        condition: service_started

networks:
  waf_network:
    driver: bridge
```

----------------------------------------

TITLE: Test service with curl
DESCRIPTION: This curl command tests the 'coffee' service using local port forwarding. The `--resolve` option maps the hostname cafe.example.com to 127.0.0.1:8080. This sends an HTTP GET request to /coffee to verify the service is reachable and returns the expected response.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/get-started.md#_snippet_14

LANGUAGE: shell
CODE:
```
curl --resolve cafe.example.com:8080:127.0.0.1 http://cafe.example.com:8080/coffee
```

----------------------------------------

TITLE: Nginx Configuration for gRPC with App Protect
DESCRIPTION: This Nginx configuration enables gRPC capability with HTTP/2, applying an application protection policy using `app_protect_policy_file` and logging all gRPC messages to the security log. The configuration also includes settings for timeouts, keepalive, and proxy parameters.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/how-to/bidirectional-configuration.md#_snippet_4

LANGUAGE: nginx
CODE:
```
user nginx;
worker_processes auto;

load_module modules/ngx_http_app_protect_module.so;

error_log /var/log/nginx/error.log debug;
working_directory /tmp/cores;
worker_rlimit_core 1000M;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    keepalive_timeout  30m;
    client_body_timeout 30m;
    client_max_body_size 0;
    send_timeout 30m;

    proxy_connect_timeout  30m;
    proxy_send_timeout  30m;
    proxy_read_timeout  30m;
    proxy_socket_keepalive on;

    server {
        listen       80 default_server http2;
        server_name  localhost;
        app_protect_enable on;
        app_protect_policy_file "/etc/app_protect/conf/grpc_policy.json";
        app_protect_security_log_enable on;
        app_protect_security_log "/opt/app_protect/share/defaults/log_grpc_all.json" /tmp/grpc.log;

        grpc_socket_keepalive on;
        grpc_read_timeout 30m;
        grpc_send_timeout 30m;

        location / {
            default_type text/html;
            grpc_pass grpc://<GRPC_BACKEND_SERVER_IP>:<PORT>;
        }
    }
}
```

----------------------------------------

TITLE: Applying Multiple URI Rewrites and Fallback Return in NGINX Server Block
DESCRIPTION: This advanced example demonstrates a sequence of `rewrite` directives within a `server` block, each using the `last` flag to re-evaluate location matching after a rewrite. If a URI doesn't match either rewrite pattern, a `return 403` directive acts as a fallback, denying access to the client.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/web-server.md#_snippet_11

LANGUAGE: nginx
CODE:
```
server {
    #...
    rewrite ^(/download/.*)/media/(\w+)\.?.*$ $1/mp3/$2.mp3 last;
    rewrite ^(/download/.*)/audio/(\w+)\.?.*$ $1/mp3/$2.ra  last;
    return  403;
    #...
}
```

----------------------------------------

TITLE: Add SSL client certificate and key to NGINX config
DESCRIPTION: This snippet shows how to add the client certificate and key to the NGINX configuration to authenticate NGINX to upstream servers using `proxy_ssl_certificate` and `proxy_ssl_certificate_key` directives. Ensure the filepaths match those assigned to the certificate and key added to the NGINXaaS Deployment.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/quickstart/security-controls/securing-upstream-traffic.md#_snippet_1

LANGUAGE: nginx
CODE:
```
location /upstream {
    proxy_pass                https://backend.example.com;
    proxy_ssl_certificate     /etc/nginx/client.pem;
    proxy_ssl_certificate_key /etc/nginx/client.key;
}
```

----------------------------------------

TITLE: TransportServer YAML
DESCRIPTION: This YAML configuration defines a TransportServer resource that routes UDP traffic from the `accept-udp` listener (defined in the GlobalConfiguration) to the `udp-listener-upstream` upstream. The upstream is configured to pass traffic to the `udp-listener` service at port 5005. It specifies parameters for UDP requests and the action to pass the traffic to the upstream.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/tutorials/kic/ingress-udp-walkthrough.md#_snippet_7

LANGUAGE: yaml
CODE:
```
apiVersion: k8s.nginx.org/v1alpha1
kind: TransportServer
metadata:
  name: udp-listener
spec:
  listener:
    name: accept-udp
    protocol: UDP
  upstreams:
  - name: udp-listener-upstream
    service: udp-listener
    port: 5005
  upstreamParameters:
    udpRequests: 1
  action:
    pass: udp-listener-upstream
```

----------------------------------------

TITLE: Inline JSON Schema in NGINX App Protect Policy (JSON)
DESCRIPTION: This policy snippet demonstrates how to embed a JSON schema directly within an NGINX App Protect policy. The schema is included in the `json-validation-files` array, and the `json-profiles` section associates the schema with a specific profile used for URL validation.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/common/handling-xml-and-json-content.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "policy": {
        "name": "json_form_policy_inline_schema",
        "template": {
            "name": "POLICY_TEMPLATE_NGINX_BASE"
        },
        "json-validation-files": [
            {
                "fileName": "person_schema.json",
                "contents": "{\r\n \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n \"title\": \"Person\",\r\n \"type\": \"object\",\r\n \"properties\": {\r\n \"firstName\": {\r\n \"type\": \"string\",\r\n \"description\": \"The person's first name.\"\r\n },\r\n \"lastName\": {\r\n \"type\": \"string\",\r\n \"description\": \"The person's last name.\"\r\n },\r\n \"age\": {\r\n \"description\": \"Age in years which must be equal to or greater than zero.\",\r\n \"type\": \"integer\",\r\n \"minimum\": 0\r\n }\r\n }\r\n}"
            }
        ],
        "json-profiles": [
            {
                "name": "reg_form_prof",
                "defenseAttributes": {
                    "maximumArrayLength": "any",
                    "maximumStructureDepth": "any",
                    "maximumTotalLengthOfJSONData": 1000,
                    "maximumValueLength": "any",
                    "tolerateJSONParsingWarnings": false
                },
                "validationFiles": [
                    {
                        "isPrimary": true,
                        "jsonValidationFile": {
                            "fileName": "person_schema.json"
                        }
                    }
                ]
            }
        ],
        "urls": [
            {
                "name": "/register",
                "type": "explicit",
                "method": "POST",
                "attackSignaturesCheck": true,
                "clickjackingProtection": false,
                "disallowFileUploadOfExecutables": false,
                "isAllowed": true,
                "mandatoryBody": false,
                "methodsOverrideOnUrlCheck": false,
                "urlContentProfiles": [
                    {
                        "contentProfile": {
                            "name": "reg_form_prof"
                        },
                        "headerName": "*",
                        "headerOrder": "default",
                        "headerValue": "*",
                        "type": "json"
                    }
                ]
            }
        ]
    }
}
```

----------------------------------------

TITLE: Reloading NGINX Configuration via systemctl
DESCRIPTION: This command reloads the NGINX service, applying any changes made to its configuration file without interrupting active connections. It's essential to run this command after modifying the NGINX configuration to ensure the new settings take effect.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/licensing-and-reporting/configure-nginx-plus-report-to-nim.md#_snippet_1

LANGUAGE: bash
CODE:
```
systemctl reload nginx
```

----------------------------------------

TITLE: Backup Key File
DESCRIPTION: Creates a backup of the generated key file to a secure location. This is important in case the original key file is lost or corrupted.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-weblogic-server.md#_snippet_4

LANGUAGE: shell
CODE:
```
root# cp ~/company.com.key secure-dir/example.com.key.backup
```

----------------------------------------

TITLE: Designating a Default NGINX Virtual Server
DESCRIPTION: This snippet demonstrates how to explicitly designate a virtual server as the default for a given port (80) by adding the `default_server` parameter to the `listen` directive. This server will handle requests that arrive on the specified port but do not match any other `server_name` configured for that port.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/web-server.md#_snippet_3

LANGUAGE: nginx
CODE:
```
server {
    listen 80 default_server;
    #...
}
```

----------------------------------------

TITLE: Caching JWKs - Nginx Configuration
DESCRIPTION: This snippet shows how to configure caching for JSON Web Keys (JWKs) fetched via subrequest. The `proxy_cache_path` directive defines the cache location, key zone, and maximum size. The `proxy_cache`, `proxy_cache_valid`, and `proxy_pass` directives within the internal location (`/_jwks_uri`) control the caching behavior and the remote source from which to obtain the keys.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-jwt-authentication.md#_snippet_10

LANGUAGE: nginx
CODE:
```
http {
    proxy_cache_path /var/cache/nginx/jwk levels=1 keys_zone=jwk:1m max_size=10m;
    #...

    server {
        listen 80;
            #...

        location = /_jwks_uri {
            internal;
            proxy_method      GET;
            proxy_cache       jwk; # Cache responses
            proxy_cache_valid 200 12h;
            proxy_pass        https://idp.example.com/oauth2/keys; # Obtain keys from here
        }
    }
}
```

----------------------------------------

TITLE: Delaying Excessive Requests in Nginx
DESCRIPTION: This snippet configures Nginx to pass the first 3 excessive requests without delay, delay the next 2 requests, and reject any further excessive requests beyond the configured burst limit.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/controlling-access-proxied-http.md#_snippet_8

LANGUAGE: nginx
CODE:
```
http {
    #...

    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

    server {
        #...

        location /search/ {
            limit_req zone=one burst=5 delay=3;
        }
    }
}
```

----------------------------------------

TITLE: Complete NGINX Subrequest Authentication Configuration
DESCRIPTION: This comprehensive NGINX configuration example combines all previous steps, showing how to set up a protected location (`/private/`) that uses an internal `/auth` location to proxy authentication requests to an external server, including body handling and URI passing.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-subrequest-authentication.md#_snippet_6

LANGUAGE: nginx
CODE:
```
http {
    #...
    server {
    #...
        location /private/ {
            auth_request     /auth;
            auth_request_set $auth_status $upstream_status;
        }

        location = /auth {
            internal;
            proxy_pass              http://auth-server;
            proxy_pass_request_body off;
            proxy_set_header        Content-Length "";
            proxy_set_header        X-Original-URI $request_uri;
        }
    }
}
```

----------------------------------------

TITLE: Limiting API access with allow and deny in Nginx
DESCRIPTION: This snippet demonstrates how to restrict access to the API location using `allow` and `deny` directives, allowing only local network access. Securing the API endpoint is crucial for preventing unauthorized access.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/monitoring/live-activity-monitoring.md#_snippet_2

LANGUAGE: nginx
CODE:
```
http {
    # ...
    server {
        listen 192.168.1.23;
        # ...
        location /api {
            app_protect_dos_api;
            allow 192.168.1.0/24;
            deny all;
        }
    }
}
```

----------------------------------------

TITLE: Enabling JWT Authentication in Nginx
DESCRIPTION: This snippet demonstrates how to enable JWT authentication for a specific location in Nginx. It uses the `auth_jwt` directive to specify the authentication realm (API).  Requests to `/products/` will require a valid JWT.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-jwt-authentication.md#_snippet_1

LANGUAGE: nginx
CODE:
```
server {
    listen 80;

    location /products/ {
        proxy_pass http://api_server;
        auth_jwt   "API";
        #...
    }
}
```

----------------------------------------

TITLE: Applying Request Header Specification Policy via REST API (JSON)
DESCRIPTION: This JSON snippet demonstrates how to apply the Request Header Specification policy using the REST API. It defines the policy to allow all invalid header characters. The snippet shows the structure for a POST request to the environment endpoint to update the environment's policies.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/policies/request-header-specification.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "policies": {
    "request-correlation-id": [
      {
        "action": {
          "invalidHeadersBehaviour": "ALLOW_ALL"
        }
      }
    ]
  }
}
```

----------------------------------------

TITLE: Create a Developer Portal Environment (HTTPS) - JSON
DESCRIPTION: This snippet shows the JSON payload for creating a Developer Portal environment using HTTPS. It includes the TLS Inbound policy with base64 encoded server certificate and key. The environment name, function, proxy details, and runtime are also defined.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/getting-started/add-devportal.md#_snippet_1

LANGUAGE: json
CODE:
```
{
    "name": "{{environmentName}}",
    "functions": [
        "DEVPORTAL"
    ],
    "proxies": [
        {
            "proxyClusterName": "{{portalInstanceGroupName}}",
            "hostnames": [
                "{{portalClusterHostname}}"
            ],
            "runtime": "PORTAL-PROXY",
            "policies": {
                "tls-inbound": [
                    {
                        "data": {
                            "serverCerts": [
                                {
                                    "key": "{{tls key}}",
                                    "cert": "{{tls cert}}"
                                }
                            ]
                        }
                    }
                ]
            }
        }
    ]
}
```

----------------------------------------

TITLE: Create Gateway for TLS Passthrough
DESCRIPTION: This YAML configuration creates a Gateway resource that configures NGINX Gateway Fabric for TLS passthrough. It defines a TLS listener on port 443 with hostname `*.example.com`, allowing traffic to be routed to backend services without decryption, based on SNI. The allowedRoutes specifies that only TLSRoute resources are allowed, ensuring routing is managed appropriately.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-management/tls-passthrough.md#_snippet_2

LANGUAGE: yaml
CODE:
```
kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: gateway
  namespace: default
spec:
  gatewayClassName: nginx
  listeners:
  - name: tls
    port: 443
    protocol: TLS
    hostname: "*.example.com"
    allowedRoutes:
      namespaces:
        from: All
      kinds:
        - kind: TLSRoute
    tls:
      mode: Passthrough
EOF
```

----------------------------------------

TITLE: Enabling PROXY Protocol in NGINX Ingress Controller ConfigMap
DESCRIPTION: These YAML keys are added to the `nginx-config.yaml` ConfigMap to enable the PROXY Protocol and configure real IP handling for the NGINX Plus Ingress Controller. `proxy-protocol: "True"` activates the protocol, `real-ip-header: "proxy_protocol"` specifies the header, and `set-real-ip-from: "0.0.0.0/0"` allows all IPs to be considered for real IP extraction.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/amazon-web-services/ingress-controller-elastic-kubernetes-services.md#_snippet_6

LANGUAGE: yaml
CODE:
```
proxy-protocol: "True"
real-ip-header: "proxy_protocol"
set-real-ip-from: "0.0.0.0/0"
```

----------------------------------------

TITLE: Defining NGINX WebSocket Upgrade Map
DESCRIPTION: Creates a map to handle WebSocket upgrade requests. It sets the `Connection` header to `upgrade` if the `Upgrade` header is present, otherwise to `close`, ensuring proper WebSocket handshake and persistent connections.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_41

LANGUAGE: nginx
CODE:
```
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}
```

----------------------------------------

TITLE: Defining Upstream Groups in NGINX Stream
DESCRIPTION: This code snippet demonstrates how to define upstream groups for TCP and UDP servers within the `stream` context. The `upstream` blocks define a group of servers to which traffic will be load balanced.  The `proxy_pass` directive is used to reference these upstream groups.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/tcp-udp-load-balancer.md#_snippet_5

LANGUAGE: nginx
CODE:
```
stream {

    upstream stream_backend {
        # ...
    }

    upstream dns_servers {
        # ...
    }

    # ...
}
```

----------------------------------------

TITLE: Creating Private Key for Certificate Request with OpenSSL
DESCRIPTION: This command generates an unencrypted RSA private key for use in a Certificate Signing Request (CSR). The key is saved to `~/example.com.key` with a size of 2048 bits. This key will be packaged within the CSR.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_3

LANGUAGE: shell
CODE:
```
root# openssl genrsa -out ~/example.com.key 2048
```

----------------------------------------

TITLE: Configuring keepalived for Active-Active-Passive HA
DESCRIPTION: This keepalived configuration defines the passive node for an active-active-passive setup. It uses two vrrp_instance blocks to handle two virtual IP addresses. The lower priority (99) ensures that this node remains passive until one of the active nodes fails. The configuration includes a script to check the nginx service status.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/high-availability/ha-keepalived-nodes.md#_snippet_6

LANGUAGE: none
CODE:
```
vrrp_script chk_nginx_service {
    script   "/usr/lib/keepalived/nginx-ha-check"
    interval 3
    weight   50
}

vrrp_instance VI_1 {
    interface         eth0
    state             BACKUP
    priority          99
    virtual_router_id 51
    advert_int        1
    accept
    unicast_src_ip    192.168.10.12

    unicast_peer {
        192.168.10.10
        192.168.10.11
    }

    virtual_ipaddress {
        192.168.10.100
    }

    track_script {
        chk_nginx_service
    }

    notify "/usr/lib/keepalived/nginx-ha-notify"
}

vrrp_instance VI_2 {
    interface         eth0
    state             BACKUP
    priority          99
    virtual_router_id 61
    advert_int        1
    accept
    unicast_src_ip    192.168.10.12

    unicast_peer {
        192.168.10.10
        192.168.10.11
    }

    virtual_ipaddress {
        192.168.10.101
    }

    track_script {
        chk_nginx_service
    }

    notify "/usr/lib/keepalived/nginx-ha-notify"
}
```

----------------------------------------

TITLE: Update HTTPRoute with ResponseHeaderModifier - YAML
DESCRIPTION: This YAML configuration updates an HTTPRoute to modify response headers using the ResponseHeaderModifier filter. It sets the value of 'X-Header-Set', adds a value to 'X-Header-Add', and removes the 'X-Header-Remove' header for requests matching the '/headers' path prefix.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-management/request-response-headers.md#_snippet_11

LANGUAGE: yaml
CODE:
```
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: headers
spec:
  parentRefs:
  - name: gateway
    sectionName: http
  hostnames:
  - "cafe.example.com"
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /headers
    filters:
    - type: ResponseHeaderModifier
      responseHeaderModifier:
        set:
        - name: X-Header-Set
          value: overwritten-value
        add:
        - name: X-Header-Add
          value: this-is-the-appended-value
        remove:
        - X-Header-Remove
    backendRefs:
    - name: headers
      port: 80
```

----------------------------------------

TITLE: Backing Up Certificate Request Private Key
DESCRIPTION: This command creates a backup of the private key generated for the certificate request. It is essential to secure this backup, as the certificate will become unusable if the key is lost.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_4

LANGUAGE: shell
CODE:
```
root# cp ~/example.com.key secure-dir/example.com.key.backup
```

----------------------------------------

TITLE: Deploy NGINX Service Mesh with Prometheus Address
DESCRIPTION: This command deploys NGINX Service Mesh and configures it to connect to an existing Prometheus deployment. The `--prometheus-address` flag specifies the address of the Prometheus service in the format `<service-name>.<namespace>:<port>`. This allows NGINX Service Mesh to expose metrics to Prometheus.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/guides/monitoring-and-tracing.md#_snippet_0

LANGUAGE: bash
CODE:
```
nginx-meshctl deploy ...  --prometheus-address "my-prometheus.example-namespace:9090"
```

----------------------------------------

TITLE: Define GitLab CI/CD Pipeline Stages (YAML)
DESCRIPTION: This YAML configuration defines a GitLab CI/CD pipeline stage named 'publish'. It specifies the Docker image to use, the script to execute, and the rule that triggers the stage based on changes in the 'instance' directory. The 'needs: []' indicates that this stage does not depend on any previous stages.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/nginx-configs/publish-configs-version-control.md#_snippet_1

LANGUAGE: YAML
CODE:
```
stages:
  - publish

publish-config-to-instance:
  image: ${BUILD_IMAGE}
  stage: publish
  script:
    # Run the script that prepares the payload with config changes and required variables
    # ./prepare-payload.sh ${CTRL_IP} ${AUTH_TOKEN} ${SYSTEM_UID} ${NGINX_UID}
  only:
    <<: *_run_only_when_change_in_instance_directory
  needs: []
```

----------------------------------------

TITLE: Testing NGINX configuration
DESCRIPTION: This shell command tests the Nginx configuration file for syntax errors. The expected output indicates whether the configuration file is valid.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/fips.md#_snippet_7

LANGUAGE: shell
CODE:
```
nginx -t
```

----------------------------------------

TITLE: Disabling Signature in Policy JSON (modifications property)
DESCRIPTION: This JSON snippet demonstrates disabling an attack signature (ID 200001834) using the `modifications` property. The `modifications` array contains changes applied to the policy after evaluating the `policy` block, providing a generic schema to manipulate any policy element. The `action` is set to `add-or-update` and `enabled` is set to false in the `entityChanges`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/common/policy-authoring-and-tuning.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "policy": {
        "name": "signature_exclude_2"
    },
    "modifications": [
        {
            "entityChanges": {
                "enabled": false
            },
            "entity": {
                "signatureId": 200001834
            },
            "entityType": "signature",
            "action": "add-or-update"
        }
    ]
}
```

----------------------------------------

TITLE: Policy Configuration with Signature Modification Reference JSON
DESCRIPTION: This JSON defines an App Protect policy that references an external file containing signature modifications using a URL. It configures attack signatures and references a file to exclude specific signatures.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/common/types-of-references.md#_snippet_4

LANGUAGE: json
CODE:
```
{
    "policy": {
        "name": "external_resources_signature_modification",
        "template": {
            "name": "POLICY_TEMPLATE_NGINX_BASE"
        },
        "applicationLanguage": "utf-8",
        "enforcementMode": "blocking",
        "signature-sets": [
            {
                "name": "All Signatures",
                "block": true,
                "alarm": true
            }
        ]
    },
    "modificationsReference": {
        "link": "http://my-domain.com:8081/modifications.txt"
    }
}
```

----------------------------------------

TITLE: Configure worker connections and file descriptors in NGINX
DESCRIPTION: Modifies the `worker_connections` and `worker_rlimit_nofile` settings within the Nginx configuration file. This increases the number of concurrent connections and file descriptors available to Nginx worker processes. The values should be adjusted based on the number of Nginx agents.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/system-configuration/configure-gateway.md#_snippet_1

LANGUAGE: nginx
CODE:
```
events {
    worker_connections 2000;
}

worker_rlimit_nofile 2000;
```

----------------------------------------

TITLE: Install and Run Echo Server (shell)
DESCRIPTION: This snippet shows how to install and run the Echo Server using Go. It first configures the Go environment by disabling modules temporarily, then downloads, installs, and executes the Echo Server, which is useful for testing HTTP proxies. It configures the server to listen on port 10000 and log HTTP headers and bodies.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/tutorials/enable-metrics.md#_snippet_3

LANGUAGE: shell
CODE:
```
go env -w GO111MODULE=off
go get -u github.com/jmalloc/echo-server/...
PORT=10000 LOG_HTTP_BODY=true LOG_HTTP_HEADERS=true echo-server
```

----------------------------------------

TITLE: Attempting Unauthorized API Access (Bash)
DESCRIPTION: This `curl` command attempts a GET request to the `/v1/pet` endpoint without providing an API key. It demonstrates a scenario leading to an unauthorized `401` response.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/tutorials/oas-security-schemes.md#_snippet_31

LANGUAGE: Bash
CODE:
```
curl -X GET -H "Content-Type: application/json" http://<ip address>/v1/pet
```

----------------------------------------

TITLE: Configuring DNS Resolver and Resolve Parameter in Nginx
DESCRIPTION: This snippet configures the DNS resolver and the `resolve` parameter for dynamic reconfiguration of upstream servers. The `resolver` directive specifies the IP address of the DNS server. The `resolve` parameter in the `server` directive instructs Nginx to periodically re-resolve the domain name with DNS, enabling dynamic updates to the upstream server list.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/node-js.md#_snippet_35

LANGUAGE: nginx
CODE:
```
# In the 'http' block
resolver <IP-address-of-DNS-server>;

upstream nodejs {
    zone nodejs 64k;
    server example.com resolve;
}
```

----------------------------------------

TITLE: Create Coffee and Tea Deployments and Services (YAML)
DESCRIPTION: This YAML configuration creates two deployments and services: `coffee` and `tea`. Each deployment runs a single replica of the `nginxdemos/nginx-hello:plain-text` image, exposing port 8080.  The services expose these deployments on port 80.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-management/upstream-settings.md#_snippet_0

LANGUAGE: yaml
CODE:
```
kubectl apply -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coffee
spec:
  replicas: 1
  selector:
    matchLabels:
      app: coffee
  template:
    metadata:
      labels:
        app: coffee
    spec:
      containers:
      - name: coffee
        image: nginxdemos/nginx-hello:plain-text
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: coffee
spec:
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: coffee
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tea
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tea
  template:
    metadata:
      labels:
        app: tea
    spec:
      containers:
      - name: tea
        image: nginxdemos/nginx-hello:plain-text
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: tea
spec:
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: tea
EOF
```

----------------------------------------

TITLE: Install NGINX Instance Manager with Helm
DESCRIPTION: This command installs NGINX Instance Manager using Helm.  It sets the admin password hash, specifies the chart, creates the namespace, uses a custom values.yaml file, and waits for the deployment to complete.  It's a crucial step in deploying NGINX Instance Manager in a Kubernetes environment.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/deploy/kubernetes/deploy-using-helm.md#_snippet_11

LANGUAGE: shell
CODE:
```
helm install -n nms \
--set adminPasswordHash=$(openssl passwd -6 'YourPassword123#') \
nms nginx-stable/nms-hybrid \
--create-namespace \
-f <path-to-your-values.yaml> \
[--version <chart-version>] \
--wait
```

----------------------------------------

TITLE: Configure Access Control Lists in Nginx
DESCRIPTION: This snippet demonstrates configuring IP address-based access control lists (ACLs) to restrict access to the monitoring dashboard. It allows traffic from a specific network (10.0.0.0/8) and denies all other traffic.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/microsoft-exchange.md#_snippet_54

LANGUAGE: nginx
CODE:
```
allow 10.0.0.0/8;
deny all;
```

----------------------------------------

TITLE: Customize Helm Chart Values (values.yaml)
DESCRIPTION: This YAML snippet demonstrates the structure of a `values.yaml` file, used to customize the NGINX Instance Manager Helm chart deployment. It sets the `imagePullSecrets` to use the 'regcred' secret and defines the Docker image repository and tag for each NGINX Instance Manager component (apigw, core, dpm, ingestion, integrations, secmon, utility). Replace `<version>` with the desired NGINX Instance Manager version tag.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/deploy/kubernetes/deploy-using-helm.md#_snippet_8

LANGUAGE: yaml
CODE:
```
imagePullSecrets:
    - name: regcred
apigw:
    image:
        repository: private-registry.nginx.com/nms/apigw
        tag: <version>
core:
    image:
        repository: private-registry.nginx.com/nms/core
        tag: <version>
dpm:
    image:
        repository: private-registry.nginx.com/nms/dpm
        tag: <version>
ingestion:
    image:
        repository: private-registry.nginx.com/nms/ingestion
        tag: <version>
integrations:
    image:
        repository: private-registry.nginx.com/nms/integrations
        tag: <version>
secmon:
    image:
        repository: private-registry.nginx.com/nms/secmon
        tag: <version>
utility:
    image:
        repository: private-registry.nginx.com/nms/utility
        tag: <version>
```

----------------------------------------

TITLE: Configuring Custom 404 Error Page in NGINX
DESCRIPTION: This NGINX configuration uses the `error_page` directive to specify a custom page (`/404.html`) to be returned when a `404` (Not Found) error occurs. This allows NGINX to serve a user-friendly error page instead of its default.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/web-server.md#_snippet_14

LANGUAGE: Nginx
CODE:
```
error_page 404 /404.html;
```

----------------------------------------

TITLE: Full NGINX Configuration for Basic Load Balancing
DESCRIPTION: This comprehensive NGINX configuration demonstrates basic load balancing for Wildfly application servers, including HTTP to HTTPS redirection, SSL setup, and WebSocket proxying. It defines an upstream group, cache path, and two server blocks for HTTP and HTTPS traffic, intended to be placed in the `http` context.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_23

LANGUAGE: Nginx
CODE:
```
proxy_cache_path /tmp/NGINX_cache/ keys_zone=backcache:10m;

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

upstream jboss {
    # Use IP Hash for session persistence
    ip_hash;

    # List of Wildfly application servers
    server 192.168.33.11:8080;
    server 192.168.33.12:8080;
}

server {
    listen 80;
    server_name example.com;

    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl;
    http2  on;

    server_name example.com;

    ssl_certificate     /etc/nginx/ssl/<certificate-name>;
    ssl_certificate_key /etc/nginx/ssl/<private-key>;
    ssl_session_cache   shared:SSL:1m;
    ssl_prefer_server_ciphers on;

    # Load balance requests for '/webapp/' across Wildfly application servers
    location /webapp/ {
        proxy_pass http://jboss;
        proxy_cache backcache;
    }

    # Return a temporary redirect to '/webapp/' when user requests '/'
    location = / {
        return 302 /webapp/;
    }

    # WebSocket configuration
    location /wstunnel/ {
        proxy_pass https://jboss;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
}
```

----------------------------------------

TITLE: Verify WAF Enforcement
DESCRIPTION: Verifies that the NGINX App Protect WAF is enforcing security policies. This command sends a request to localhost containing a potentially malicious script tag. If the WAF is properly configured, the request should be rejected.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/admin-guide/install.md#_snippet_11

LANGUAGE: shell
CODE:
```
curl "localhost/<script>"
```

----------------------------------------

TITLE: Installing NGINX Plus Package on Debian/Ubuntu
DESCRIPTION: This command installs the `nginx-plus` package using `apt`. The `-y` flag automatically confirms prompts, making the installation non-interactive. If an older NGINX Plus package is present, it will be automatically replaced by this command.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/installing-nginx/installing-nginx-plus.md#_snippet_11

LANGUAGE: shell
CODE:
```
sudo apt install -y nginx-plus
```

----------------------------------------

TITLE: NMS Proxy Creation Request Body with API Key Auth
DESCRIPTION: This JSON object defines the configuration for creating a new NGINX Management Suite (NMS) proxy. It specifies the proxy's name, version, and references an OpenAPI spec (`specRef`). Crucially, it configures backend services, ingress rules (basePath), and includes an `apikey-authn` policy with a placeholder for the API key and client ID, enabling API key authentication for the proxy.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/tutorials/oas-security-schemes.md#_snippet_27

LANGUAGE: json
CODE:
```
    {
      "name": "petstore-proxy",
      "version": "v1",
      "specRef": "swagger-petstore-openapi-3-0-1-0-17",
      "proxyConfig": {
        "hostname": "{{environmentHostname}}",
        "ingress": {
          "basePath": "/api/v3",
          "basePathVersionAppendRule": "NONE"
        },
        "backends": [
          {
            "serviceName": "petstore-svc",
            "serviceTargets": [
              {
                "hostname": "petstore3.swagger.io",
                "listener": {
                  "enableTLS": true,
                  "port": 443,
                  "transportProtocol": "HTTP"
                }
              }
            ]
          }
        ],
        "policies": {
          "proxy-request-headers": [
            {
              "action": {
                "proxyHeaders": {
                  "proxyDefaultHeadersToBackend": false,
                  "proxyCustomHeadersToBackend": [
                    {
                      "key": "Host",
                      "value": "stringValue.petstore3.swagger.io"
                    }
                  ]
                }
              }
            }
          ],
          "apikey-authn": [
            {
              "data": [
                {
                  "apiKey": "<API key>",
                  "clientID": "userA"
                }
              ]
            }
          ]
        }
      }
    }
```

----------------------------------------

TITLE: Defining Monitored NGINX Instance Manager Services for Keepalived (Shell)
DESCRIPTION: This snippet defines an array of NGINX Instance Manager services that `keepalived` will monitor to determine the health of a node. This configuration is part of the `/etc/nms/scripts/nms-notify-keepalived.sh` script and ensures that `keepalived` can detect failures in critical NGINX Instance Manager components, triggering a failover if necessary.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/system-configuration/configure-high-availability.md#_snippet_2

LANGUAGE: sh
CODE:
```
check_nms_services=(
  "clickhouse-server"
  "nginx"
  "nms-core"
  "nms-dpm"
  "nms-integrations"
  "nms-ingestion"
)
```

----------------------------------------

TITLE: Configuring SNI for Health Checks via NGINX Controller API
DESCRIPTION: This JSON snippet demonstrates how to configure Server Name Indication (SNI) settings within a TLS object using the NGINX Controller REST API. Setting `isServerNameEnabled` to `true` and `name` to `$host` ensures that SNI information is provided in data plane traffic and inherited by health checks, supporting multiple virtual hosts per workload group member.
SOURCE: https://github.com/nginx/documentation/blob/main/content/controller/releases/release-notes.md#_snippet_3

LANGUAGE: json
CODE:
```
"tls":{"isServerNameEnabled": true, "name": "$host"}
```

----------------------------------------

TITLE: Configuring Basic Rate Limiting Nginx
DESCRIPTION: This snippet demonstrates configuring basic rate limiting in Nginx. It defines a limit_req_zone and applies it to the /login/ location. It uses the $binary_remote_addr variable as the key for limiting and sets a rate of 1 request per second, storing state in a shared memory zone named mylimit with a size of 10MB.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/quickstart/rate-limiting.md#_snippet_0

LANGUAGE: nginx
CODE:
```
http {
    #...

    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=1r/s;

    server {
        #...

        location /login/ {
            limit_req zone=mylimit;

        }
}
```

----------------------------------------

TITLE: Creating HTTPRoute resources
DESCRIPTION: This YAML configuration creates two HTTPRoute resources. The first, 'cafe-tls-redirect', redirects all HTTP traffic on port 80 to HTTPS on port 443 for the hostname 'cafe.example.com'. The second, 'coffee', routes traffic to the 'coffee' service on the HTTPS listener when the path prefix is '/coffee'.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-management/https-termination.md#_snippet_6

LANGUAGE: yaml
CODE:
```
kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: cafe-tls-redirect
spec:
  parentRefs:
  - name: cafe
    sectionName: http
  hostnames:
  - "cafe.example.com"
  rules:
  - filters:
    - type: RequestRedirect
      requestRedirect:
        scheme: https
        port: 443
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: coffee
spec:
  parentRefs:
  - name: cafe
    sectionName: https
  hostnames:
  - "cafe.example.com"
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /coffee
    backendRefs:
    - name: coffee
      port: 80
EOF
```

----------------------------------------

TITLE: Enable Access and Error Logs in Nginx
DESCRIPTION: Enables access and error logs in the `http` block of the main Nginx configuration file.  These logs are crucial for troubleshooting communication issues between Nginx Agent and Nginx Instance Manager. The access log records all client requests and the error log captures any errors during request processing.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/system-configuration/secure-traffic.md#_snippet_15

LANGUAGE: nginx
CODE:
```
# nginx.conf
    http {
        ...
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
        ...
    }
```

----------------------------------------

TITLE: Configuring mTLS Mode for NGINX Deployment via Annotation
DESCRIPTION: This YAML snippet shows how to configure the mTLS mode for an Nginx deployment by adding the `config.nsm.nginx.com/mtls-mode: strict` annotation to the Pod template specification. This ensures that the deployed Nginx pods will enforce strict mTLS settings.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/get-started/install/configuration.md#_snippet_5

LANGUAGE: yaml
CODE:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
      annotations:
        config.nsm.nginx.com/mtls-mode: strict
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
```

----------------------------------------

TITLE: Configuring NGINX App Protect WAF Security Log Attributes
DESCRIPTION: This directive defines the attributes for the security log, including the logging profile and destination. Multiple instances are allowed per context, and values are inherited from parent contexts if not specified. It supports built-in profiles or custom compiled log bundles, and destinations can be `stderr`, a local file path, or a syslog server.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/logging-overview/security-log.md#_snippet_1

LANGUAGE: nginx
CODE:
```
app_protect_security_log log_default stderr;
app_protect_security_log /mounted_host_dir/logging_profile_01.tgz /mounted_host_dir/security.log;
app_protect_security_log log_all syslog:server=localhost:514;
app_protect_security_log log_grpc_all syslog:server=my-specific-machine-name:514;
app_protect_security_log log_illegal syslog:server=192.168.12.34:51400;
app_protect_security_log /shared_volume/logging_profile_02.tgz syslog:server=my.domain.com:514;
```

----------------------------------------

TITLE: Enable ModSecurity in Nginx Proxy Configuration
DESCRIPTION: This Nginx configuration enables ModSecurity for the reverse proxy. It turns ModSecurity on and specifies the location of the ModSecurity rules file. This configuration protects the application by enabling the ModSecurity WAF.
SOURCE: https://github.com/nginx/documentation/blob/main/content/modsec-waf/admin-guide/nginx-plus-modsecurity-waf-installation-logging.md#_snippet_16

LANGUAGE: nginx
CODE:
```
server {
    listen 80;
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsec/main.conf;
    location / {
        proxy_pass http://localhost:8085;
        proxy_set_header Host $host;
    }
}
```

----------------------------------------

TITLE: Scale Kubernetes Deployment (Bash)
DESCRIPTION: This snippet shows how to scale a Kubernetes deployment using the `kubectl scale deployments` command. This allows you to increase or decrease the number of replicas for the deployment. Requires `kubectl` command-line tool to be installed and configured.
SOURCE: https://github.com/nginx/documentation/blob/main/content/controller/infrastructure/instances/manage-containerized-instances.md#_snippet_9

LANGUAGE: Bash
CODE:
```
kubectl scale deployments/hello-node --replicas=2
```

----------------------------------------

TITLE: Check Kubernetes Services
DESCRIPTION: This shell command retrieves a list of services in the Kubernetes cluster and displays their status. It allows you to verify that the services are running and configured as expected.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/admin-guide/deploy-with-manifests.md#_snippet_11

LANGUAGE: shell
CODE:
```
kubectl get services
```

----------------------------------------

TITLE: Configuring Zone directive in Nginx Upstream Block
DESCRIPTION: This snippet configures the `zone` directive within an Nginx upstream block. The `zone` directive creates a shared memory zone for storing the upstream group's configuration and runtime state, making it accessible to all worker processes. It is crucial for enabling features like session persistence, health checks, and dynamic reconfiguration.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/node-js.md#_snippet_32

LANGUAGE: nginx
CODE:
```
# In the 'http' block
upstream nodejs {
    zone nodejs 64k;
    server 192.168.33.11:8080;
    server 192.168.33.12:8080;
    # ...
}
```

----------------------------------------

TITLE: Configuring DNS Resolver for Dynamic Load Balancing in NGINX
DESCRIPTION: This configuration snippet demonstrates how to configure DNS resolution for dynamic load balancing in NGINX. It uses the `resolver` directive to specify the DNS server and the `resolve` parameter in the `server` directive to enable periodic re-resolution of domain names to IP addresses. The `zone` directive enables sharing of the upstream configuration across worker processes.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/http-load-balancer.md#_snippet_17

LANGUAGE: nginx
CODE:
```
http {
    resolver 10.0.0.1 valid=300s ipv6=off;
    resolver_timeout 10s;
    server {
        location / {
            proxy_pass http://backend;
        }
    }
    upstream backend {
        zone backend 32k;
        least_conn;
        # ...
        server backend1.example.com resolve;
        server backend2.example.com resolve;
    }
}
```

----------------------------------------

TITLE: Protect Location with OIDC in NGINX
DESCRIPTION: This snippet enables OIDC protection for the specified location.  The `auth_oidc onelogin` directive instructs NGINX to authenticate requests to this location using the `onelogin` OIDC provider configured earlier.  Requests are proxied to the backend application only after successful authentication.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/onelogin.md#_snippet_6

LANGUAGE: nginx
CODE:
```
# ...
location / {
     auth_oidc onelogin;

     # ...

     proxy_pass http://127.0.0.1:8080;
}
# ...
```

----------------------------------------

TITLE: Protect Location with Auth0 OIDC in NGINX
DESCRIPTION: This code snippet protects a specific location (`/`) with Auth0 OIDC by using the `auth_oidc` directive and referencing the `auth0` provider configuration.  All requests to this location will be authenticated against Auth0.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/auth0.md#_snippet_7

LANGUAGE: nginx
CODE:
```
# ...
location / {
     auth_oidc auth0;

     # ...

     proxy_pass http://127.0.0.1:8080;
}
# ...
```

----------------------------------------

TITLE: Limiting API Access with Allow/Deny NGINX
DESCRIPTION: This snippet restricts access to the `/api` location using the `allow` and `deny` directives.  It allows access only from localhost (127.0.0.1) and denies access from all other IP addresses. This is a security measure to prevent unauthorized access.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/tcp-udp-load-balancer.md#_snippet_17

LANGUAGE: nginx
CODE:
```
http {
    server {
        location /api {
            api   write=on;
            allow 127.0.0.1; # permit access from localhost
            deny  all;       # deny access from everywhere else
        }
    }
}
```

----------------------------------------

TITLE: OpenSSL CA Configuration
DESCRIPTION: This YAML configuration file defines settings for creating a Certificate Authority (CA) using OpenSSL.  It sets parameters such as key size (4096 bits), distinguished name fields (country, state, locality, organization, common name), and extensions for the CA certificate, including basic constraints (CA:true) and key usage (keyCertSign, cRLSign).  This configuration is used by the `openssl req` command to generate the CA certificate.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/system-configuration/secure-traffic.md#_snippet_2

LANGUAGE: yaml
CODE:
```
[req]
default_bits        = 4096
distinguished_name  = req_distinguished_name
prompt              = no
default_md          = sha256
req_extensions      = v3_req

# recommend changing these to your needs
[req_distinguished_name]
countryName                 = US
stateOrProvinceName         = California
localityName                = San Francisco
organizationName            = NGINX, Inc.
commonName                  = nms-ca

[v3_req]
basicConstraints = critical, CA:true
keyUsage = critical, keyCertSign, cRLSign
subjectKeyIdentifier = hash
```

----------------------------------------

TITLE: Extracting Private Key from PFX OpenSSL
DESCRIPTION: This snippet extracts the private key from a .pfx file using OpenSSL.  The command prompts for the .pfx file's password and then prompts for a password to encrypt the newly created private key. `-nocerts` option prevents extracting the certificates.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-e-business-suite.md#_snippet_6

LANGUAGE: shell
CODE:
```
root# openssl pkcs12 -in exported-certs.pfx -nocerts -out company.com.key.encrypted
```

----------------------------------------

TITLE: Initialize Terraform Configuration
DESCRIPTION: This command initializes the Terraform working directory, downloading any necessary providers and modules.  It prepares the environment for subsequent Terraform commands. It must be run before `terraform plan` or `terraform apply`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/getting-started/ssl-tls-certificates/ssl-tls-certificates-terraform.md#_snippet_0

LANGUAGE: bash
CODE:
```
terraform init
```

----------------------------------------

TITLE: Define Upstream Group
DESCRIPTION: Defines an upstream group named 'backend' with three servers. The `upstream` directive is placed within the `http` context.  The 'backend1.example.com' server has a weight of 5, 'backend2.example.com' has the default weight, and '192.0.0.1' is designated as a backup server. This configuration is used to load balance traffic across multiple backend servers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/http-load-balancer.md#_snippet_0

LANGUAGE: nginx
CODE:
```
http {
    upstream backend {
        server backend1.example.com weight=5;
        server backend2.example.com;
        server 192.0.0.1 backup;
    }
}
```

----------------------------------------

TITLE: Generate Certificates using OpenSSL script
DESCRIPTION: This script generates certificates for a Certificate Authority (CA), an intermediate CA, an NGINX Manager server, and an agent. It uses OpenSSL commands to create keys, certificate signing requests (CSRs), and certificates, configuring them for specific purposes such as server authentication and client authentication. The script creates a self-signed root CA, then an intermediate CA signed by the root CA, a server certificate signed by the intermediate CA, and an agent certificate signed by the root CA.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/system-configuration/secure-traffic.md#_snippet_1

LANGUAGE: bash
CODE:
```
#!/bin/bash
set -e

make_ca() {
    echo "Creating Self-Signed Root CA certificate and key"
    openssl req \
        -new \
        -nodes \
        -x509 \
        -keyout ca.key \
        -out ca.crt \
        -config ca.cnf \
        -extensions v3_req \
        -days 1826  # 5 years
}

make_int() {
    echo "Creating Intermediate CA certificate and key"
    openssl req \
        -new \
        -nodes \
        -keyout ca_int.key \
        -out ca_int.csr \
        -config ca-intermediate.cnf \
        -extensions v3_req
    openssl req -in ca_int.csr -noout -verify
    openssl x509 \
        -req \
        -CA ca.crt \
        -CAkey ca.key \
        -CAcreateserial \
        -in ca_int.csr \
        -out ca_int.crt \
        -extfile ca-intermediate.cnf \
        -extensions v3_req \
        -days 365 # 1 year
    openssl verify -CAfile ca.crt ca_int.crt
    echo "Creating CA chain"
    cat ca_int.crt ca.crt > ca.pem
}

make_server() {
    echo "Creating nginx-manager certificate and key"
    openssl req \
        -new \
        -nodes \
        -keyout server.key \
        -out server.csr \
        -config server.cnf
    openssl req -in server.csr -noout -verify
    openssl x509 \
        -req \
        -CA ca_int.crt \
        -CAkey ca_int.key \
        -CAcreateserial \
        -in server.csr \
        -out server.crt \
        -extfile server.cnf \
        -extensions v3_req \
        -days 365 # 1 year
    openssl verify -CAfile ca.pem server.crt
}

make_agent() {
    echo "Creating Agent certificate and key"
    openssl req \
        -new \
        -nodes \
        -keyout agent.key \
        -out agent.csr \
        -config agent.cnf
    openssl req -in agent.csr -noout -verify
    openssl x509 \
        -req \
        -CA ca.crt \
        -CAkey ca.key \
        -CAcreateserial \
        -in agent.csr \
        -out agent.crt \
        -extfile agent.cnf \
        -extensions v3_req \
        -days 365 # 1 year
    openssl verify -CAfile ca.pem agent.crt
}

# MAIN
make_ca
make_int
make_server
make_agent
```

----------------------------------------

TITLE: Complete Nginx Configuration for GeoIP2 Redirection
DESCRIPTION: This example demonstrates a complete Nginx configuration using GeoIP2 and upstream server groups for continent-based redirection. It includes the `geoip2`, `map`, `server`, and `upstream` blocks required to implement this functionality within either the `http {}` or `stream {}` contexts.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/controlling-access-by-geoip.md#_snippet_17

LANGUAGE: nginx
CODE:
```
# can be either "http {}" or "stream {}"
#...
geoip2 GeoIP2/GeoLite2-Country.mmdb {
    $geoip2_data_continent_code continent code;
}

map $geoip2_data_continent_code $nearest_server {
    default all;
    EU      eu;
    NA      na;
    AS      as;
    AF      af;
}

server {
    listen 12346;
    proxy_pass http://$nearest_server;
    }

upstream all {
    server all1.example.com:12345;
    server all2.example.com:12345;
}

upstream eu {
    server eu1.example.com:12345;
    server eu2.example.com:12345;
}

upstream na {
    server na1.example.com:12345;
    server na2.example.com:12345;
}
```

----------------------------------------

TITLE: Reloading NGINX Configuration in Docker (Shell)
DESCRIPTION: This command sends the `HUP` signal to a specified Docker container, which instructs the NGINX process inside the container to gracefully reload its configuration without downtime. This is the standard way to apply configuration changes to NGINX in a Dockerized environment.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/installing-nginx/installing-nginx-docker.md#_snippet_36

LANGUAGE: shell
CODE:
```
docker kill -s HUP container-name
```

----------------------------------------

TITLE: Configuring UDP Upstream Group - NGINX
DESCRIPTION: Defines an upstream group named `dns_upstream` with three servers listening on port 53, which are commonly used for DNS services. This upstream group is used to load balance UDP traffic across these servers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/udp-health-check.md#_snippet_0

LANGUAGE: nginx
CODE:
```
stream {
    #...
    upstream dns_upstream {
        server 192.168.136.130:53;
        server 192.168.136.131:53;
        server 192.168.136.132:53;
    }
    #...
}
```

----------------------------------------

TITLE: Configuring HTTPS Virtual Server with IP - Nginx
DESCRIPTION: This Nginx configuration defines a virtual server that listens for HTTPS requests on a specific IP address (10.210.15.20) and port 443.  The `ssl` parameter indicates that it is an HTTPS server. This example shows restricting listening to a specific IP address.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-e-business-suite.md#_snippet_18

LANGUAGE: nginx
CODE:
```
listen 10.210.15.20:443 ssl;
```

----------------------------------------

TITLE: Configure Developer Portal TLS Certificates
DESCRIPTION: Configures the location of the server certificate and certificate key in the Dev Portal configuration file, used for securing API communication. It includes setting `INSECURE_MODE` to false and configuring `CA_FILE` and `CLIENT_VERIFY` for mTLS.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/devportals/installation/install-dev-portal.md#_snippet_14

LANGUAGE: yaml
CODE:
```
CERT_FILE="/path/to/devportal-server.crt"
KEY_FILE="/path/to/devportal-server.key"
INSECURE_MODE=false
CA_FILE="/path/to/ca.pem"  # If using mTLS
CLIENT_VERIFY=true # If using mTLS
```

----------------------------------------

TITLE: Route gRPC requests to upstream server group in Nginx
DESCRIPTION: Configures a server location that routes gRPC requests to the upstream server group defined as `grpc_backend`. Any requests to the `/grpc` location will be proxied to the gRPC backend servers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/grpc-health-check.md#_snippet_1

LANGUAGE: nginx
CODE:
```
location /grpc {
    grpc_pass grpc://grpc_backend;
}
```

----------------------------------------

TITLE: Creating an SSL Certificate Chain
DESCRIPTION: This snippet shows how to create a chained SSL certificate file by concatenating the server certificate and the intermediate certificate bundle. The server certificate must appear before the chained certificates in the combined file.  This ensures that browsers can properly validate the certificate.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/terminating-ssl-http.md#_snippet_6

LANGUAGE: shell
CODE:
```
cat www.example.com.crt bundle.crt > www.example.com.chained.crt
```

----------------------------------------

TITLE: NGINX Configuration with Multiple Listen IPs and Wildcard IP
DESCRIPTION: This configuration demonstrates a known issue in NGINX where using multiple specific listen IPs alongside a wildcard IP on the same port can lead to traffic misrouting due to reuseport behavior.  The issue occurs because traffic intended for IP:port pairs using `reuseport` is incorrectly forwarded to the server block with the wildcard IP. The first IP:port pair does not get affected. A workaround is to use a unique port for each HTTP URI when both listenIP and wildcard IP are used on the same instance.
SOURCE: https://github.com/nginx/documentation/blob/main/content/controller/releases/apim/apim-release-notes-3.19.md#_snippet_0

LANGUAGE: bash
CODE:
```
server {
  listen ip1:port;
  listen ip2:port reuseport;
  listen ip3:port reuseport;
}
server {
  listen port reuseport;  <-- wildcard IP
}
```

----------------------------------------

TITLE: Reloading NGINX Configuration (Shell)
DESCRIPTION: Reloads the NGINX configuration within the running NGINX container.  It executes the `nginx -s reload` command inside the container named `nginx`.  This requires the `docker` command-line tool to be installed and configured and for the Nginx container to be running.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/admin-guide/deploy-on-docker.md#_snippet_12

LANGUAGE: Shell
CODE:
```
sudo docker exec nginx  nginx -s reload
```

----------------------------------------

TITLE: Limiting Connections and Bandwidth - Nginx
DESCRIPTION: This snippet combines connection limiting and bandwidth limiting. It limits both the number of connections to 1 and the download/upload speeds. This ensures that a single client cannot consume excessive resources by opening multiple connections. A shared memory zone `ip_addr` is defined to track connection counts.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/controlling-access-proxied-tcp.md#_snippet_4

LANGUAGE: nginx
CODE:
```
stream {
    #...
    limit_conn_zone $binary_remote_addr zone=ip_addr:10m;

    server {
        #...
        limit_conn ip_addr  1;
        proxy_download_rate 100k;
        proxy_upload_rate   50k;
    }
}
```

----------------------------------------

TITLE: Creating API Location Block NGINX
DESCRIPTION: This snippet defines a location block `/api` within the `http` and `server` blocks in the Nginx configuration.  This location will handle API requests.  It's required to specify where the API endpoint will be exposed.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/tcp-udp-load-balancer.md#_snippet_14

LANGUAGE: nginx
CODE:
```
http {
    server {
        location /api {
            # ...
        }
    }
}
```

----------------------------------------

TITLE: Extracting Docker Container Logs via CLI (Shell)
DESCRIPTION: This command extracts all log messages (both access and error logs) from a specified Docker container using the Docker command line interface. It provides a simple way to view the combined `stdout` and `stderr` output of the container.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/installing-nginx/installing-nginx-docker.md#_snippet_33

LANGUAGE: shell
CODE:
```
docker logs container-name
```

----------------------------------------

TITLE: Building NGINX Plus API Gateway Dockerfile
DESCRIPTION: This Dockerfile builds an NGINX Plus-based API Gateway image with NGINX Agent. It installs necessary dependencies, configures APT repositories, and installs NGINX Plus and the agent. The Dockerfile uses multi-stage builds to minimize the final image size. It requires secrets for the NGINX Plus repository certificate and key.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/devportals/installation/devportal-helm-chart.md#_snippet_2

LANGUAGE: Dockerfile
CODE:
```
FROM ubuntu:focal

# NGINX Plus release e.g 27
ARG NGINX_PLUS_VERSION

# DEVPORTAL release e.g 1.3.0
ARG DEVPORTAL_UI_VERSION

ARG CONTROL_PLANE_IP

# Install NGINX Plus
RUN --mount=type=secret,id=nginx-crt,dst=/etc/ssl/nginx/nginx-repo.crt,mode=0644 \
    --mount=type=secret,id=nginx-key,dst=/etc/ssl/nginx/nginx-repo.key,mode=0644 \
set -ex \
&& apt-get update \
&& apt-get upgrade -y \
&& apt-get install --no-install-recommends --no-install-suggests -y \
    curl \
    gnupg \
    ca-certificates \
    apt-transport-https \
    lsb-release \
    procps \
&& \
NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \
for server in \
    hkp://keyserver.ubuntu.com:80 \
    pgp.mit.edu; do \
    echo "Fetching GPG key $NGINX_GPGKEY from $server"; \
    gpg --keyserver "$server" \
        --recv-keys "$NGINX_GPGKEY" \
        && break; \
done
# Configure APT repos
&& gpg --export "$NGINX_GPGKEY" > /etc/apt/trusted.gpg.d/nginx.gpg \
&& printf "Acquire::https::pkgs.nginx.com::SslCert \"/etc/ssl/nginx/nginx-repo.crt\";\n" >> /etc/apt/apt.conf.d/90pkgs-nginx \
&& printf "Acquire::https::pkgs.nginx.com::SslKey  \"/etc/ssl/nginx/nginx-repo.key\";\n" >> /etc/apt/apt.conf.d/90pkgs-nginx \
&& printf "deb https://pkgs.nginx.com/plus/$(lsb_release -is | tr '[:upper:]' '[:lower:]') $(lsb_release -cs) nginx-plus\n" > /etc/apt/sources.list.d/nginx-plus.list \
&& printf "deb https://pkgs.nginx.com/nms/$(lsb_release -is | tr '[:upper:]' '[:lower:]') $(lsb_release -cs) nginx-plus\n" > /etc/apt/sources.list.d/nms.list \
&& apt-get update \
# Install NGINX Plus & agent\
&& apt-get install -y \
        nginx-plus=${NGINX_PLUS_VERSION}* \
        nginx-plus-module-njs=${NGINX_PLUS_VERSION}* \
        nginx-devportal-ui=${DEVPORTAL_UI_VERSION}* \
&& curl --insecure https://$CONTROL_PLANE_IP/install/nginx-agent | PACKAGE_HOST=${CONTROL_PLANE_IP} sh \
# Forward request and error logs to docker log collector \
&& ln -sf /dev/stdout /var/log/nginx/access.log \
&& ln -sf /dev/stderr /var/log/nginx/error.log \
# Cleanup \
&& apt-get autoremove --purge -y \
    curl \
    gnupg \
    apt-transport-https \
    lsb-release \
&& rm -rf /root/.gnupg \
&& rm -rf /etc/apt/sources.list.d/nginx-plus.list /etc/apt/sources.list.d/nms.list /etc/apt/apt.conf.d/90pkgs-nginx \
&& rm -rf /var/lib/apt/lists/*

COPY /entrypoint.sh /

STOPSIGNAL SIGTERM

CMD bash /entrypoint.sh
```

----------------------------------------

TITLE: Setting Failure Mode Action - Nginx
DESCRIPTION: This code snippet demonstrates how to set the `app_protect_failure_mode_action` directive in the `http` block of the nginx.conf file.  This directive controls how NGINX App Protect WAF handles traffic when the App Protect daemons are down or disconnected. The possible values are "pass" (fail open, prioritize availability) and "drop" (fail closed, prioritize security).
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v4/configuration-guide/configuration.md#_snippet_10

LANGUAGE: nginx
CODE:
```
...
http {
    ...
    app_protect_failure_mode_action drop;
    ...
    server {
        listen       80;
...
    }
...

```

----------------------------------------

TITLE: Querying Security Violation Events by Request Outcome
DESCRIPTION: This example shows how to get all security violation events where the request was rejected by WAF using the NGINX Controller REST API.  The startTime is set to 0 and endTime to now.
SOURCE: https://github.com/nginx/documentation/blob/main/content/controller/app-delivery/security/tutorials/view-app-security-analytics.md#_snippet_4

LANGUAGE: curl
CODE:
```
GET https://{{host}}/api/v1/analytics/events?
        startTime=0&
        endTime=now&
        filter=(
            category='security violation' and
            request_outcome='REJECTED')
```

----------------------------------------

TITLE: Define HTTPRouteGroup for Firefox Users
DESCRIPTION: This YAML snippet defines an HTTPRouteGroup named `target-hrg` that matches traffic with the `user-agent` header containing 'Firefox'. This HTTPRouteGroup is used to direct traffic to specific backends based on the user agent.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/tutorials/trafficsplit-deployments.md#_snippet_17

LANGUAGE: yaml
CODE:
```
apiVersion: specs.smi-spec.io/v1alpha3
kind: HTTPRouteGroup
metadata:
  name: target-hrg
  namespace: default
spec:
  matches:
  - name: firefox-users
    headers:
      user-agent: ".*Firefox.*"
```

----------------------------------------

TITLE: Dockerfile for Nginx OSS and App Protect WAF Setup
DESCRIPTION: This Dockerfile sets up an Nginx environment with Nginx App Protect WAF v5 on a Red Hat Universal Base Image. It installs necessary packages, configures Nginx repositories, and sets up certificates for accessing protected resources. The UBI_VERSION argument allows selection of the base OS version.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/v5/build-nginx-image-oss/build-rhel.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1

# Supported UBI_VERSION's are 7/8/9
ARG UBI_VERSION=9

# Base Image
FROM registry.access.redhat.com/ubi${UBI_VERSION}/ubi

# Define the ARG again after FROM to use it in this stage
ARG UBI_VERSION

# Install NGINX OSS and NGINX App Protect WAF v5 module
RUN --mount=type=secret,id=nginx-crt,dst=/etc/ssl/nginx/nginx-repo.crt,mode=0644 \
    --mount=type=secret,id=nginx-key,dst=/etc/ssl/nginx/nginx-repo.key,mode=0644 \
    PKG_MANAGER=dnf; \
    if [ "${UBI_VERSION}" = "7" ]; then \
        PKG_MANAGER=yum; \
    fi \
    && $PKG_MANAGER -y install wget ca-certificates yum-utils \
    && wget -P /etc/yum.repos.d https://cs.nginx.com/static/files/dependencies.repo \
    && echo "[nginx-mainline]" > /etc/yum.repos.d/nginx.repo \
    && echo "name=nginx mainline repo" >> /etc/yum.repos.d/nginx.repo \
    && echo "baseurl=http://nginx.org/packages/mainline/centos/\$releasever/\$basearch/" >> /etc/yum.repos.d/nginx.repo \
    && echo "gpgcheck=1" >> /etc/yum.repos.d/nginx.repo \
    && echo "enabled=1" >> /etc/yum.repos.d/nginx.repo \
    && echo "gpgkey=https://nginx.org/keys/nginx_signing.key" >> /etc/yum.repos.d/nginx.repo \
    && echo "module_hotfixes=true" >> /etc/yum.repos.d/nginx.repo \
    && echo "[app-protect-x-oss]" > /etc/yum.repos.d/app-protect-${UBI_VERSION}-x-oss.repo \
    && echo "name=nginx-app-protect repo" >> /etc/yum.repos.d/app-protect-${UBI_VERSION}-x-oss.repo \
    && echo "baseurl=https://pkgs.nginx.com/app-protect-x-oss/centos/${UBI_VERSION}/\$basearch/" >> /etc/yum.repos.d/app-protect-${UBI_VERSION}-x-oss.repo \
    && echo "sslclientcert=/etc/ssl/nginx/nginx-repo.crt" >> /etc/yum.repos.d/app-protect-${UBI_VERSION}-x-oss.repo \
    && echo "sslclientkey=/etc/ssl/nginx/nginx-repo.key" >> /etc/yum.repos.d/app-protect-${UBI_VERSION}-x-oss.repo \
    && echo "gpgcheck=0" >> /etc/yum.repos.d/app-protect-${UBI_VERSION}-x-oss.repo \
    && echo "enabled=1" >> /etc/yum.repos.d/app-protect-${UBI_VERSION}-x-oss.repo \
    && $PKG_MANAGER clean all \
    && $PKG_MANAGER install -y app-protect-module-oss \
    && $PKG_MANAGER clean all \
    && rm -rf /var/cache/$PKG_MANAGER \
    && ln -sf /dev/stdout /var/log/nginx/access.log \
    && ln -sf /dev/stderr /var/log/nginx/error.log

# Expose port
EXPOSE 80

# Define stop signal
STOPSIGNAL SIGQUIT

# Set default command
CMD ["nginx", "-g", "daemon off;"]
```

----------------------------------------

TITLE: Configuring HTTP Compliance Violations in Policy JSON
DESCRIPTION: This JSON snippet demonstrates configuring HTTP compliance violations. It enables the `VIOL_HTTP_PROTOCOL` violation and configures its sub-violations, such as checking for header names with no header value, chunked requests with Content-Length header, and the maximum number of parameters and headers.  The `maxParams` and `maxHeaders` properties can be adjusted.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/common/policy-authoring-and-tuning.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
    "policy": {
        "name": "policy_name",
        "template": { "name": "POLICY_TEMPLATE_NGINX_BASE" },
        "applicationLanguage": "utf-8",
        "enforcementMode": "blocking",
        "blocking-settings": {
            "violations": [
                {
                    "name": "VIOL_HTTP_PROTOCOL",
                    "alarm": true,
                    "block": true
                }
            ],
            "http-protocols": [
                {
                    "description": "Header name with no header value",
                    "enabled": true
                },
                {
                    "description": "Chunked request with Content-Length header",
                    "enabled": true
                },
                {
                    "description": "Check maximum number of parameters",
                    "enabled": true,
                    "maxParams": 5
                },
                {
                    "description": "Check maximum number of headers",
                    "enabled": true,
                    "maxHeaders": 20
                },
                {
                    "description": "Body in GET or HEAD requests",
                    "enabled": true
                },
                {
                    "description": "Bad multipart/form-data request parsing",
                    "enabled": true
                },
                {
                    "description": "Bad multipart parameters parsing",
                    "enabled": true
                },
                {
                    "description": "Unescaped space in URL",
                    "enabled": true
                }
            ]
        }
    }
}
```

----------------------------------------

TITLE: Install NGINX Service Mesh via Helm Repository
DESCRIPTION: Installs the NGINX Service Mesh chart using the Helm repository. This command creates a new namespace for the mesh, installs the chart with the release name `nsm` in the `nginx-mesh` namespace, and waits for the installation to complete. Requires the Helm repository to be added first.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/get-started/install/install-with-helm.md#_snippet_2

LANGUAGE: bash
CODE:
```
helm install nsm nginx-stable/nginx-service-mesh --namespace nginx-mesh --create-namespace --wait
```

----------------------------------------

TITLE: View Kubernetes Pod Logs (Bash)
DESCRIPTION: This command streams the logs from the `egress-driver` container within a specified Pod.  It's used to verify that the `egress-driver` application is attempting to send requests to the `target` service and to observe any connection errors.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/tutorials/kic/egress-walkthrough.md#_snippet_7

LANGUAGE: bash
CODE:
```
kubectl logs -f -c egress-driver <EGRESS_DRIVER_POD>
```

----------------------------------------

TITLE: Pass OIDC Claims as Headers in NGINX
DESCRIPTION: This configuration snippet shows how to pass OIDC claims as HTTP headers to the upstream application. It uses the `proxy_set_header` directive to set the 'sub', 'email', and 'name' headers based on the corresponding OIDC claims. This allows the application to identify the authenticated user.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/entra-id.md#_snippet_8

LANGUAGE: nginx
CODE:
```
# ...
location / {

     auth_oidc entra;

     proxy_set_header sub   $oidc_claim_sub;
     proxy_set_header email $oidc_claim_email;
     proxy_set_header name  $oidc_claim_name;

     proxy_pass http://127.0.0.1:8080;
}
# ...
```

----------------------------------------

TITLE: Configuring HTTPRoute for Coffee Application (YAML)
DESCRIPTION: This YAML manifest configures an HTTPRoute for the coffee application.  It defines routing rules that direct traffic to the coffee service when the path prefix `/coffee` is matched on the hostname `cafe.example.com`. The `parentRefs` section links this route to the 'https' listener on a Gateway resource named 'gateway'.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-security/integrating-cert-manager.md#_snippet_6

LANGUAGE: yaml
CODE:
```
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: coffee
spec:
  parentRefs:
  - name: gateway
    sectionName: https
  hostnames: # Update the hostname to match what is configured in the Gateway resource
  - "cafe.example.com"
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /coffee
    backendRefs:
    - name: coffee
      port: 80
```

----------------------------------------

TITLE: Validating and Reloading Nginx Configuration
DESCRIPTION: This shell script first validates the Nginx configuration using `nginx -t`, then reloads Nginx using `nginx -s reload`. This ensures that any configuration changes are applied without interrupting traffic.  It requires Nginx to be installed and accessible in the system's PATH.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/google-cloud-platform/high-availability-all-active.md#_snippet_12

LANGUAGE: shell
CODE:
```
nginx -t
nginx -s reload
```

----------------------------------------

TITLE: Configuring NGINX Data Guard Policy with Custom Patterns
DESCRIPTION: This JSON configuration defines an NGINX policy with Data Guard enabled for masking data based on custom patterns. The `customPatternsList` specifies the regular expressions to match, while `firstCustomCharactersToExpose` and `lastCustomCharactersToExpose` define the number of characters to leave unmasked at the beginning and end of the matched patterns, respectively. The `enforcementMode` is set to ignore URLs in the `enforcementUrls` list.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/common/partial-masking-of-data.md#_snippet_0

LANGUAGE: json
CODE:
```
{
    "policy": {
        "name": "custom_pattern_mask_policy",
        "template": { "name": "POLICY_TEMPLATE_NGINX_BASE" },
        "applicationLanguage": "utf-8",
        "enforcementMode": "blocking",
        "blocking-settings": {
            "violations": [
                {
                    "name": "VIOL_DATA_GUARD",
                    "alarm": true,
                    "block": false
                }
            ]
        },
        "data-guard": {
            "enabled": true,
            "maskData": true,
            "creditCardNumbers": false,
            "usSocialSecurityNumbers": true,
            "enforcementMode": "ignore-urls-in-list",
            "enforcementUrls": [],
            "customPatterns": true,
            "firstCustomCharactersToExpose": 2,
            "lastCustomCharactersToExpose": 4,
            "customPatternsList": [
               "....-....-....-....",
               "siteTk_[0-9]+"
            ]
        }
    }
}
```

----------------------------------------

TITLE: Deploy NGINX Gateway Fabric CRDs (Stable)
DESCRIPTION: This command deploys the NGINX Gateway Fabric Custom Resource Definitions (CRDs) using a stable release manifest from the nginx-gateway-fabric repository. Applying these CRDs is a prerequisite for deploying NGINX Gateway Fabric itself. It utilizes `kubectl apply` to apply the configurations defined in the remote YAML file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/installation/installing-ngf/manifests.md#_snippet_0

LANGUAGE: shell
CODE:
```
kubectl apply -f https://raw.githubusercontent.com/nginx/nginx-gateway-fabric/v{{< version-ngf >}}/deploy/crds.yaml
```

----------------------------------------

TITLE: Configuring the Server Block for the Application
DESCRIPTION: This snippet configures the NGINX server block for the application being protected by OIDC. It listens on port 443 (HTTPS), specifies the server name (`demo.example.com`), and configures the SSL certificate and key. A `location` block is defined that proxies requests to the backend application running on `http://127.0.0.1:8080`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/okta.md#_snippet_5

LANGUAGE: nginx
CODE:
```
http {
    # ...

    server {
        listen      443 ssl;
        server_name demo.example.com;

        ssl_certificate     /etc/ssl/certs/fullchain.pem;
        ssl_certificate_key /etc/ssl/private/key.pem;

        location / {
            # ...

            proxy_pass http://127.0.0.1:8080;
        }
    }
    # ...
}
```

----------------------------------------

TITLE: Handling Excessive Requests with Burst in Nginx
DESCRIPTION: This configuration buffers up to 5 excessive requests beyond the defined rate limit in the `/search/` location.  Requests are delayed to comply with the configured rate.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/controlling-access-proxied-http.md#_snippet_6

LANGUAGE: nginx
CODE:
```
http {
    #...

    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

    server {
        #...

        location /search/ {
            limit_req zone=one burst=5;
        }
    }
}
```

----------------------------------------

TITLE: Configuring Nginx Plus API Location Block
DESCRIPTION: This snippet configures a location block for the Nginx Plus API.  The `api` directive enables the API within the location. The `allow` and `deny` directives are used to restrict access to the API location, allowing only authorized administrators (in this case, localhost) to access the API.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/node-js.md#_snippet_34

LANGUAGE: nginx
CODE:
```
# In the 'server' block for HTTPS traffic
location /api {
    api write=on;
    allow 127.0.0.1;
    deny all;
}
```

----------------------------------------

TITLE: NGINX Configuration with App Protect Enabled
DESCRIPTION: This example demonstrates how to enable NGINX App Protect WAF in the HTTP context of an NGINX configuration file. It includes enabling the module, specifying the policy bundle file, and configuring security logging. The configuration also shows how to define a proxy pass.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/configuration-guide/configuration.md#_snippet_1

LANGUAGE: nginx
CODE:
```
user nginx;
worker_processes  4;

load_module modules/ngx_http_app_protect_module.so;

error_log /var/log/nginx/error.log debug;

events {
    worker_connections  65536;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    app_protect_enable on; # This is how you enable NGINX App Protect WAF in the relevant context/block
    app_protect_policy_file "/etc/app_protect/conf/policy1.tgz"; # This is a reference to the policy bundle file to use. If not defined, the default policy is used
    app_protect_security_log_enable on; # This section enables the logging capability
    app_protect_security_log "/etc/app_protect/conf/log_all.tgz" syslog:server=127.0.0.1:514; # This is where the remote logger is defined in terms of: logging options (defined in the referenced file), log server IP, log server port

    server {
        listen       80;
        server_name  localhost;
        proxy_http_version 1.1;

        location / {
            client_max_body_size 0;
            default_type text/html;
            proxy_pass http://172.29.38.211/;
        }
    }
}
```

----------------------------------------

TITLE: SELinux Policy for NGINX App Protect DoS (SELinux Policy)
DESCRIPTION: This SELinux policy defines the necessary permissions and types for NGINX App Protect DoS. It allows the `httpd_t` domain to interact with various resources, including shared memory and files, which is critical for the module's operation under SELinux.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/learn-about-deployment.md#_snippet_32

LANGUAGE: SELinux Policy
CODE:
```
module app-protect-dos 2.0;
require {
    type unconfined_t;
    type unconfined_service_t;
    type httpd_t;
    type tmpfs_t;
    type initrc_t;
    type initrc_state_t;
    class capability sys_resource;
    class shm { associate read unix_read unix_write write };
    class file { read write };
}
allow httpd_t initrc_state_t:file { read write };
allow httpd_t self:capability sys_resource;
allow httpd_t tmpfs_t:file { read write };
allow httpd_t unconfined_service_t:shm { associate read unix_read unix_write write };
```

----------------------------------------

TITLE: Reload Nginx Configuration (Shell)
DESCRIPTION: This command reloads the Nginx configuration without downtime. It applies any changes made to the configuration file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/ping-identity.md#_snippet_7

LANGUAGE: nginx
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Reload Nginx Configuration
DESCRIPTION: This command reloads the Nginx configuration without downtime.  This ensures that the changes made to the configuration file are applied immediately without interrupting existing connections.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/onelogin.md#_snippet_9

LANGUAGE: nginx
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Reloading Nginx Configuration
DESCRIPTION: This shell command reloads the Nginx configuration without interrupting existing connections. This is used to apply changes made to the `nginx.conf` file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/image-filter.md#_snippet_8

LANGUAGE: shell
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Setting up Port-Forwarding for Bookinfo Service
DESCRIPTION: This bash command sets up port forwarding for the `productpage` service within the `bookinfo` application, mapping local port 9080 to the service. This enables access to the application through a web browser for verification and testing purposes.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/guides/secure-traffic-mtls.md#_snippet_12

LANGUAGE: bash
CODE:
```
kubectl port-forward svc/productpage 9080
```

----------------------------------------

TITLE: Starting NGINX Service Immediately
DESCRIPTION: This command initiates the nginx.service immediately, making the NGINX web server active and ready to process incoming requests without requiring a system reboot.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/learn-about-deployment.md#_snippet_58

LANGUAGE: shell
CODE:
```
sudo systemctl start nginx
```

----------------------------------------

TITLE: Configuring Session Persistence with Hash Directive - Nginx
DESCRIPTION: This snippet configures session persistence using the 'hash' directive and the '$remote_addr' variable. This ensures that requests from the same client IP address are consistently routed to the same backend server.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_18

LANGUAGE: nginx
CODE:
```
upstream tomcat {
    hash $remote_addr;
    server 10.100.100.11:8080;
    server 10.100.100.12:8080;
}
```

----------------------------------------

TITLE: Reloading NGINX Configuration (Bash)
DESCRIPTION: This command gracefully reloads the NGINX configuration without interrupting active connections. It sends a HUP signal to the NGINX master process, prompting it to re-read its configuration files and apply changes.
SOURCE: https://github.com/nginx/documentation/blob/main/content/amplify/nginx-amplify-agent/configuring-metric-collection.md#_snippet_1

LANGUAGE: bash
CODE:
```
kill -HUP `cat /var/run/nginx.pid`
```

----------------------------------------

TITLE: Configure DNS Resolver in NGINX
DESCRIPTION: This configuration sets up a DNS resolver within the `http` context of the NGINX configuration. It's essential for NGINX Plus to resolve DNS records for the Entra ID provider and other external services. The `valid` parameter overrides the TTL value for DNS records.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/entra-id.md#_snippet_4

LANGUAGE: nginx
CODE:
```
http {
    resolver 10.0.0.1 ipv4=on valid=300s;

    # ...
}
```

----------------------------------------

TITLE: Adding a Server to Upstream Group via API with POST Method (Shell)
DESCRIPTION: This command adds a new server to the specified upstream group using the POST method via curl. It configures various server parameters such as server address, weight, connection limits, failover settings, and backup/down status.  The request body is in JSON format.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/monitoring/live-activity-monitoring.md#_snippet_21

LANGUAGE: shell
CODE:
```
curl -X POST -d '{ \
   "server": "10.0.0.1:8089", \
   "weight": 4, \
   "max_conns": 0, \
   "max_fails": 0, \
   "fail_timeout": "10s", \
   "slow_start": "10s", \
   "backup": true, \
   "down": true \
 }' -s 'http://192.168.1.23/api/9/http/upstreams/appservers/servers'
```

----------------------------------------

TITLE: Round Robin Load Balancing
DESCRIPTION: Configures Round Robin load balancing for the 'backend' upstream group. Round Robin distributes requests evenly across the available servers.  No specific directive is required to enable Round Robin, as it is the default method.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/http-load-balancer.md#_snippet_3

LANGUAGE: nginx
CODE:
```
upstream backend {
   # no load balancing method is specified for Round Robin
   server backend1.example.com;
   server backend2.example.com;
}
```

----------------------------------------

TITLE: Filtering logs for specific processes
DESCRIPTION: This command demonstrates how to filter the `nms.log` file using `grep` to view entries belonging to a specific Instance Manager process (nms-core in this example).  The `nms.log` file contains entries for multiple processes, so filtering is often necessary.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/support/support-package.md#_snippet_3

LANGUAGE: bash
CODE:
```
cat nms.log | grep 'COR'
```

----------------------------------------

TITLE: Combined Configuration: Connection and Bandwidth Limiting in NGINX
DESCRIPTION: This example shows a combined configuration for limiting both the number of connections and the bandwidth. It allows a maximum of 5 connections per client IP globally and limits the `/download/` location to 1 connection, applying a rate limit of 50k after 1MB has been transferred.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/controlling-access-proxied-http.md#_snippet_12

LANGUAGE: nginx
CODE:
```
http {
    limit_conn_zone $binary_remote_address zone=addr:10m;

    server {
        root /www/data;
        limit_conn addr 5;

        location / {
        }

        location /download/ {
            limit_conn       addr 1;
            limit_rate_after 1m;
            limit_rate       50k;
        }
    }
}
```

----------------------------------------

TITLE: Nginx Upstream Block Configuration
DESCRIPTION: This Nginx configuration snippet represents an upstream block named 'default_coffee_80'. It defines the backend servers, which are the pod IPs of the 'coffee' pods, listening on port 8080. The proxy_pass directive in the server block directs traffic to these backend servers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-management/routing-traffic-to-your-app.md#_snippet_12

LANGUAGE: nginx
CODE:
```
upstream default_coffee_80 {
  ...
  server 10.12.0.18:8080; # these should be the pod IPs of the coffee pods
  server 10.12.0.19:8080;
  ...
}
```

----------------------------------------

TITLE: Create tracing namespace in Kubernetes
DESCRIPTION: Creates a namespace named 'tracing' in the Kubernetes cluster. This namespace will be used to deploy the OpenTelemetry Collector and Jaeger instances.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/monitoring/tracing.md#_snippet_0

LANGUAGE: shell
CODE:
```
kubectl create namespace tracing
```

----------------------------------------

TITLE: Apply Target v3.0 Deployment
DESCRIPTION: This bash command applies the `target-v3.0.yaml` configuration file to deploy the target-v3-0 Pod and Service. This is a prerequisite step for A/B testing scenarios where different versions of the application are deployed.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/tutorials/trafficsplit-deployments.md#_snippet_19

LANGUAGE: bash
CODE:
```
kubectl apply -f target-v3.0.yaml
```

----------------------------------------

TITLE: Implementing Conditional Logging in NGINX Access Log
DESCRIPTION: This NGINX configuration demonstrates conditional logging by using the `map` directive to create a `$loggable` variable. Requests with HTTP status codes 2xx or 3xx are mapped to `0` (not loggable), while others are mapped to `1`. The `access_log` directive then uses the `if=$loggable` parameter to exclude successful and redirection responses from the log.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/monitoring/logging.md#_snippet_3

LANGUAGE: nginx
CODE:
```
map $status $loggable {
    ~^[23]  0;
    default 1;
}

access_log /path/to/access.log combined if=$loggable;
```

----------------------------------------

TITLE: Configuring JWT Authentication with Key File and Request in NGINX
DESCRIPTION: This NGINX configuration snippet sets up a location block that enables JWT authentication. It defines the authentication realm, specifies the path to a local JWK file, and configures a subrequest to fetch keys from a remote service. The `subrequest_output_buffer_size` is increased to accommodate the Microsoft Entra signing keys.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/quickstart/security-controls/jwt.md#_snippet_0

LANGUAGE: nginx
CODE:
```
server {
   listen 80;

   location / {
      auth_jwt "API";
      auth_jwt_key_file /srv/key.jwk;
      auth_jwt_key_request /_jwks_uri;
   }

   location = /_jwks_uri {
      proxy_pass https://login.microsoftonline.com/common/discovery/keys;
      subrequest_output_buffer_size 12k;
   }
}
```

----------------------------------------

TITLE: Configuring Error Logging with Syslog in Nginx
DESCRIPTION: This snippet configures Nginx to send error logs to a syslog server. It uses the `error_log` directive with the `syslog` parameter to specify the server address and severity level.  The configuration can be placed in the main, http, server, or location block.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-e-business-suite.md#_snippet_33

LANGUAGE: nginx
CODE:
```
# In the main, 'http', 'server', or 'location' block
error_log syslog:server=192.168.1.1 info;
```

----------------------------------------

TITLE: Install Nginx OSS and Nginx App Protect WAF module
DESCRIPTION: This Dockerfile snippet installs Nginx Open Source Software (OSS) and the Nginx App Protect WAF v5 module on an Amazon Linux 2 base image. It uses yum to install the necessary packages and configures repositories for both Nginx mainline and App Protect. The snippet mounts secrets for repository authentication, enables EPEL, and configures logging to stdout/stderr.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/v5/build-nginx-image-oss/build-amazon.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1

# Base image
FROM amazonlinux:2

# Install NGINX OSS and NGINX App Protect WAF v5 module
RUN --mount=type=secret,id=nginx-crt,dst=/etc/ssl/nginx/nginx-repo.crt,mode=0644 \
    --mount=type=secret,id=nginx-key,dst=/etc/ssl/nginx/nginx-repo.key,mode=0644 \
    amazon-linux-extras enable epel \
    && yum clean metadata \
    && yum -y install wget ca-certificates epel-release shadow-utils yum-utils \
    && echo "[nginx-mainline]" > /etc/yum.repos.d/nginx.repo \
    && echo "name=nginx mainline repo" >> /etc/yum.repos.d/nginx.repo \
    && echo "baseurl=http://nginx.org/packages/mainline/amzn2/$releasever/$basearch/" >> /etc/yum.repos.d/nginx.repo \
    && echo "gpgcheck=1" >> /etc/yum.repos.d/nginx.repo \
    && echo "enabled=1" >> /etc/yum.repos.d/nginx.repo \
    && echo "gpgkey=https://nginx.org/keys/nginx_signing.key" >> /etc/yum.repos.d/nginx.repo \
    && echo "module_hotfixes=true" >> /etc/yum.repos.d/nginx.repo \
    && echo "priority=9" >> /etc/yum.repos.d/nginx.repo \
    && echo "[app-protect-x-oss]" > /etc/yum.repos.d/app-protect-7-x-oss.repo \
    && echo "name=nginx-app-protect repo" >> /etc/yum.repos.d/app-protect-7-x-oss.repo \
    && echo "baseurl=https://pkgs.nginx.com/app-protect-x-oss/centos/7/$basearch/" >> /etc/yum.repos.d/app-protect-7-x-oss.repo \
    && echo "sslclientcert=/etc/ssl/nginx/nginx-repo.crt" >> /etc/yum.repos.d/app-protect-7-x-oss.repo \
    && echo "sslclientkey=/etc/ssl/nginx/nginx-repo.key" >> /etc/yum.repos.d/app-protect-7-x-oss.repo \
    && echo "gpgcheck=0" >> /etc/yum.repos.d/app-protect-7-x-oss.repo \
    && echo "enabled=1" >> /etc/yum.repos.d/app-protect-7-x-oss.repo \
    && yum -y install app-protect-module-oss \
    && yum clean all \
    && rm -rf /var/cache/yum \
    && ln -sf /dev/stdout /var/log/nginx/access.log \
    && ln -sf /dev/stderr /var/log/nginx/error.log
```

----------------------------------------

TITLE: OAS Server Configuration (JSON)
DESCRIPTION: This JSON configuration details server URL templating within an Open API Specification (OAS) for use with NGINX Management Suite API Connectivity Manager. It uses variables for server and version to dynamically construct the URL. The x-acm-* extensions configure backend services, including upstreams with properties like maxFails and failTimeout.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/getting-started/publish-api-proxy.md#_snippet_3

LANGUAGE: json
CODE:
```
{
    "url": "https://{server}.example.com/api/{version}",
    "variables": {
      "version": {
        "default": "v1"
      },
      "server": {
        "default": "staging"
      }
    },
    "x-acm-append-rule": "NONE",
    "x-acm-strip-basepath": false,
    "x-acm-backends": [
      {
        "serviceName": "pets-backend",
        "serviceVersion": "pets-backend-v1",
        "serviceLabel": "default",
        "contextRoot": "/dev",
        "upstreams": [
          {
            "url": "https://gecho1.null.ie",
            "maxFails": 10,
            "maxConnections": 5,
            "failTimeout": "5s",
            "slowStart": "10s"
          },
          {
            "url": "https://gecho2.null.ie",
            "maxFails": 5,
            "maxConnections": 8,
            "failTimeout": "15s",
            "slowStart": "3s"
          },
          {
            "url": "https://gecho3.null.ie",
            "maxFails": 7,
            "maxConnections": 33,
            "failTimeout": "35s",
            "slowStart": "1s"
          }
        ]
      }
    ]
  }
```

----------------------------------------

TITLE: Returning 404 for Missing Files with `try_files` in NGINX
DESCRIPTION: This NGINX configuration demonstrates using `try_files` to attempt to serve the original URI, the URI with a trailing slash, or the URI with a `.html` extension. If none of these paths resolve to an existing file or directory, the directive returns a `404` Not Found status code directly.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/serving-static-content.md#_snippet_5

LANGUAGE: nginx
CODE:
```
location / {
    try_files $uri $uri/ $uri.html =404;
}
```

----------------------------------------

TITLE: Reloading NGINX Configuration
DESCRIPTION: This command reloads the NGINX configuration without downtime.  It's used to apply the changes made to the configuration file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/okta.md#_snippet_9

LANGUAGE: nginx
CODE:
```
nginx -s reload
```

----------------------------------------

TITLE: Deploy Coffee HTTPRoute
DESCRIPTION: Deploys the `coffee` HTTPRoute using `kubectl apply`. This HTTPRoute configures traffic routing for the coffee applications based on path, headers, and query parameters. It references the 'cafe' gateway and defines rules for routing requests to `coffee-v1-svc` and `coffee-v2-svc`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-management/advanced-routing.md#_snippet_3

LANGUAGE: yaml
CODE:
```
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: coffee
spec:
  parentRefs:
  - name: cafe
    sectionName: http
  hostnames:
  - cafe.example.com
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /coffee
    backendRefs:
    - name: coffee-v1-svc
      port: 80
  - matches:
    - path:
        type: PathPrefix
        value: /coffee
      headers:
      - name: version
        value: v2
    - path:
        type: PathPrefix
        value: /coffee
      queryParams:
      - name: TEST
        value: v2
    backendRefs:
    - name: coffee-v2-svc
      port: 80
```

----------------------------------------

TITLE: Restarting NGINX Amplify Agent Service
DESCRIPTION: This command restarts the NGINX Amplify Agent service. It is commonly used to apply configuration changes, resolve temporary issues, or ensure the agent is running correctly after system adjustments.
SOURCE: https://github.com/nginx/documentation/blob/main/content/amplify/faq/nginx-amplify-agent.md#_snippet_6

LANGUAGE: bash
CODE:
```
# service amplify-agent restart
```

----------------------------------------

TITLE: Creating Kubernetes Namespace
DESCRIPTION: This command creates a new Kubernetes namespace called `nginx-gateway`.  Namespaces provide a way to divide cluster resources between multiple users or teams.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/ngf/installation/nginx-plus/docker-registry-secret.md#_snippet_0

LANGUAGE: shell
CODE:
```
kubectl create namespace nginx-gateway
```

----------------------------------------

TITLE: Creating NginxProxy Resource (kubectl apply)
DESCRIPTION: This command demonstrates how to manually create a basic NginxProxy configuration if it doesn't already exist. It uses 'kubectl apply' with a here-document to define an NginxProxy resource named 'ngf-proxy-config' that sets the 'ipFamily' to 'ipv4'.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/data-plane-configuration.md#_snippet_3

LANGUAGE: shell
CODE:
```
kubectl apply -f - <<EOF
apiVersion: gateway.nginx.org/v1alpha1
kind: NginxProxy
metadata:
  name: ngf-proxy-config
spec:
  ipFamily: ipv4
EOF
```

----------------------------------------

TITLE: Enable App Protect Module in Nginx
DESCRIPTION: This Nginx configuration enables the App Protect module and configures a basic server with a mirrored location. The `load_module` directive loads the App Protect module, and the `app_protect_enable on;` directive enables it for the root location. Logging is configured to capture request URIs.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/common/configure-nginx-mirror.md#_snippet_0

LANGUAGE: nginx
CODE:
```
load_module modules/ngx_http_app_protect_module.so;

http {
    log_format test $uri;

    server {
        listen       127.0.0.1:8080;
        server_name  localhost;

        location / {
            app_protect_enable on;
            mirror /mirror;
        }

        location /mirror {
            log_subrequest on;
            access_log test$args.log test;
        }
    }
}
```

----------------------------------------

TITLE: Testing Nginx App Protect Enforcement
DESCRIPTION: This command uses `curl` to send a request to the deployed Nginx service and verify that the Nginx App Protect WAF is enforcing security policies. The expectation is that a request containing `<script>` will be rejected, indicating that the WAF is working as expected. `<node-external-ip>:<node-port>` refers to the address and port where the Nginx service is exposed.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/admin-guide/deploy-with-manifests.md#_snippet_27

LANGUAGE: shell
CODE:
```
curl "<node-external-ip>:<node-port>/<script>"
```

----------------------------------------

TITLE: Testing Nginx Configuration
DESCRIPTION: This shell command tests the Nginx configuration file for syntax errors. This is a crucial step to ensure the configuration is valid before reloading Nginx.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/dynamic-modules/image-filter.md#_snippet_7

LANGUAGE: shell
CODE:
```
nginx -t
```

----------------------------------------

TITLE: Create Coffee HTTPRoute
DESCRIPTION: This snippet defines a Kubernetes HTTPRoute resource named 'coffee' that routes traffic with the hostname 'cafe.example.com' to the 'coffee' service. It attaches the HTTPRoute to the 'cafe' gateway using parentRefs.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-management/routing-traffic-to-your-app.md#_snippet_3

LANGUAGE: yaml
CODE:
```
kubectl apply -f - <<EOF
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: coffee
spec:
  parentRefs:
  - name: cafe
  hostnames:
  - "cafe.example.com"
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /
    backendRefs:
    - name: coffee
      port: 80
EOF
```

----------------------------------------

TITLE: Complete OIDC Configuration Example (Nginx)
DESCRIPTION: This is a complete example combining the DNS resolver configuration, OIDC provider definition, SSL configuration, and proxy settings for Ping Identity OIDC integration with Nginx. Placeholders like <environment_id>, <client_id>, and <client_secret> must be replaced with the actual values.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/single-sign-on/ping-identity.md#_snippet_8

LANGUAGE: nginx
CODE:
```
http {
    # Use a public DNS resolver for Issuer discovery, etc.
    resolver 10.0.0.1 ipv4=on valid=300s;

    oidc_provider ping {
        # The issuer is typically something like:
        # https://auth.pingone.com/<environment_id>/as
        issuer https://auth.pingone.com/<environment_id>/as;

        # Your Ping Identity Client ID and Secret
        client_id <client_id>;
        client_secret <client_secret>;
    }

    server {
        listen 443 ssl;
        server_name demo.example.com;

        ssl_certificate /etc/ssl/certs/fullchain.pem;
        ssl_certificate_key /etc/ssl/private/key.pem;

        location / {
            # Enforce OIDC with Ping Identity
            auth_oidc ping;

            # Forward OIDC claims as headers if desired
            proxy_set_header sub $oidc_claim_sub;
            proxy_set_header email $oidc_claim_email;
            proxy_set_header name $oidc_claim_name;

            proxy_pass http://127.0.0.1:8080;
        }
    }

    server {
        # Simple backend application for demonstration
        listen 8080;

        location / {
            return 200 "Hello, $http_name!\nEmail: $http_email\nSub: $http_sub\n";
            default_type text/plain;
        }
    }
}
```

----------------------------------------

TITLE: Checking Pod Logs with kubectl
DESCRIPTION: This command allows you to view the logs of a specific container within a pod in Kubernetes.  It requires the pod name and the container name as parameters. This is helpful for diagnosing pod failures by examining error messages.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/admin-guide/deploy-with-manifests.md#_snippet_33

LANGUAGE: bash
CODE:
```
kubectl logs [pod_name] -c [container_name]
```

----------------------------------------

TITLE: WebSocket Component Request Header Modification
DESCRIPTION: This snippet configures a component to forward WebSocket upgrade headers. It adds 'Upgrade' and 'Connection' headers with values from $http_upgrade and $connection_upgrade variables respectively, ensuring proper WebSocket handshaking between the client and backend.
SOURCE: https://github.com/nginx/documentation/blob/main/content/controller/app-delivery/about-snippets.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{
    "metadata": {
        "name": "<component-name>",
    },
    "desiredState": {
        "ingress": {
            "uris": {
                "/": {}
            },
            "gatewayRefs": [
                {"ref": "/services/environments/${env}/gateways/<gateway-name>"}
            ]
        },
        "programmability": {
            "requestHeaderModifications": [
                {
                    "action": "ADD",
                    "headerName": "Upgrade",
                    "headerValue": "$http_upgrade"
                },
                {
                    "action": "ADD",
                    "headerName": "Connection",
                    "headerValue": "$connection_upgrade"
                }
            ]
        },
        "backend": {
            "workloadGroups": {
                "websocket": {
                    "uris": {
                        "http://<data-host-name>:8010": {}
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: HTTPRoute Matching Rule - YAML
DESCRIPTION: This YAML snippet demonstrates a basic HTTPRoute matching rule. It defines how incoming requests with a specific path prefix are routed to a backend service. The `backendRefs` section specifies the target service name and port.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/upgrade-apps-without-downtime.md#_snippet_0

LANGUAGE: yaml
CODE:
```
- matches:
    - path:
        type: PathPrefix
        value: /
  backendRefs:
    - name: my-app
      port: 80
```

----------------------------------------

TITLE: Dockerfile for NGINX Plus with App Protect
DESCRIPTION: This Dockerfile builds an NGINX Plus image with the App Protect WAF module. It uses CentOS 7 as the base image, installs necessary packages, configures NGINX repositories, installs the app-protect-module-plus package, configures logging, exposes port 80, and sets the default command to start Nginx.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/v5/build-nginx-image-plus/build-centos.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1

# Base image
FROM centos:7

# Install NGINX Plus and NGINX App Protect WAF v5 module
RUN --mount=type=secret,id=nginx-crt,dst=/etc/ssl/nginx/nginx-repo.crt,mode=0644 \
    --mount=type=secret,id=nginx-key,dst=/etc/ssl/nginx/nginx-repo.key,mode=0644 \
    yum -y install wget ca-certificates epel-release \
    && wget -P /etc/yum.repos.d https://cs.nginx.com/static/files/nginx-plus-7.4.repo \
    && echo "[app-protect-x-plus]" > /etc/yum.repos.d/app-protect-7-x-plus.repo \
    && echo "name=nginx-app-protect repo" >> /etc/yum.repos.d/app-protect-7-x-plus.repo \
    && echo "baseurl=https://pkgs.nginx.com/app-protect-x-plus/centos/7/$basearch/" >> /etc/yum.repos.d/app-protect-7-x-plus.repo \
    && echo "sslclientcert=/etc/ssl/nginx/nginx-repo.crt" >> /etc/yum.repos.d/app-protect-7-x-plus.repo \
    && echo "sslclientkey=/etc/ssl/nginx/nginx-repo.key" >> /etc/yum.repos.d/app-protect-7-x-plus.repo \
    && echo "gpgcheck=0" >> /etc/yum.repos.d/app-protect-7-x-plus.repo \
    && echo "enabled=1" >> /etc/yum.repos.d/app-protect-7-x-plus.repo \
    && yum -y install app-protect-module-plus \
    && ln -sf /dev/stdout /var/log/nginx/access.log \
    && ln -sf /dev/stderr /var/log/nginx/error.log \
    && yum clean all \
    && rm -rf /var/cache/yum

# Expose port
EXPOSE 80

# Define stop signal
STOPSIGNAL SIGQUIT

# Set default command
CMD ["nginx", "-g", "daemon off;"]
```

----------------------------------------

TITLE: Nginx: Load App Protect Module and Configure Servers
DESCRIPTION: This configuration snippet loads the App Protect module and defines two server blocks. The first server block (port 8080) proxies all requests to localhost:8888 after passing through an authorization request sent to /scan, handled by the second server block (port 8081). The second server block enables App Protect on the /scan location and proxies requests to localhost:8888.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/common/configure-client-authorization.md#_snippet_0

LANGUAGE: nginx
CODE:
```
load_module modules/ngx_http_app_protect_module.so;

http {
    server {
        listen       127.0.0.1:8080;
        server_name  localhost;

        location / {
            auth_request /scan;
            proxy_pass http://localhost:8888;
        }
        location /scan {
            proxy_pass http://localhost:8081$request_uri;
       }
    }

    server {
        listen       127.0.0.1:8081;
        server_name  localhost;

        location /scan {
            app_protect_enable on;
            proxy_pass http://localhost:8888;
        }
    }
}
```

----------------------------------------

TITLE: Defining an Upstream Group for Load Balancing in NGINX
DESCRIPTION: This snippet defines an NGINX upstream group named 'jboss' within the 'http' block. It lists two backend Wildfly application servers (192.168.33.11:8080 and 192.168.33.12:8080) that NGINX will distribute client requests among. This group serves as a pool of servers for load balancing.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_15

LANGUAGE: nginx
CODE:
```
# In the 'http' block
upstream jboss {
    server 192.168.33.11:8080;
    server 192.168.33.12:8080;
}
```

----------------------------------------

TITLE: Apply ObservabilityPolicy YAML for HTTPRoute - Kubernetes
DESCRIPTION: This YAML configuration defines an ObservabilityPolicy named 'coffee' that targets the 'coffee' HTTPRoute. It enables tracing with a sampling ratio of 75% and adds a custom span attribute 'coffee-key' with the value 'coffee-value'. This policy enables tracing for the targeted routes, sampling a set percentage of traffic.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/monitoring/tracing.md#_snippet_13

LANGUAGE: yaml
CODE:
```
kubectl apply -f - <<EOF
apiVersion: gateway.nginx.org/v1alpha2
kind: ObservabilityPolicy
metadata:
  name: coffee
spec:
  targetRefs:
  - group: gateway.networking.k8s.io
    kind: HTTPRoute
    name: coffee
  tracing:
    strategy: ratio
    ratio: 75
    spanAttributes:
    - key: coffee-key
      value: coffee-value
EOF
```

----------------------------------------

TITLE: Configure Rate Limiting in NGINX Service Mesh (YAML)
DESCRIPTION: This YAML configuration defines a RateLimit resource in NGINX Service Mesh to limit traffic from a specific source deployment to a destination service. It uses an HTTPRouteGroup to filter requests based on the 'get-only' match. Rate is set to 10 requests per minute with a burst of 10 and no delay.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/guides/smi-traffic-policies.md#_snippet_1

LANGUAGE: yaml
CODE:
```
apiVersion: specs.smi.nginx.com/v1alpha2
kind: RateLimit
metadata:
  name: ratelimit-v1
  namespace: default
spec:
  destination:
    kind: Service
    name: dest-svc
    namespace: default
  sources:
    - kind: Deployment
      name: source-1
      namespace: default
  name: 10rm
  rate: 10r/m
  burst: 10
  delay: "nodelay"
  rules:
    - kind: HTTPRouteGroup
      name: hrg
      matches:
        - get-only
```

----------------------------------------

TITLE: Configuring Proxy Cache Path Nginx
DESCRIPTION: Defines the path to the cache, the name and maximum size of the shared memory zone used for storing cache keys, and the maximum size of the cache itself within the 'http' context. The 'proxy_cache_path' directive is responsible for configuring the cache storage.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-e-business-suite.md#_snippet_29

LANGUAGE: nginx
CODE:
```
# In the 'http' block
proxy_cache_path /var/oracle-cache/ keys_zone=cache_oracle:50m max_size=500m;
```

----------------------------------------

TITLE: Numeric Field with Validation JSON Schema Example
DESCRIPTION: This JSON schema defines a numeric field named 'proxyTimeout' with multiple validation criteria, including 'multipleOf', 'minimum', 'maximum', and examples. This allows for input validation based on specified rules and constraints.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nim/nginx-configs/config-templates/reference/json-schema-reference.md#_snippet_5

LANGUAGE: json
CODE:
```
{
    "proxyTimeout": {
      "type": "number",
      "multipleOf": 10,
      "minimum": 10,
      "maximum": 1000,
      "examples": [50, 120, 870]
    }
  }
```

----------------------------------------

TITLE: Publish gRPC API Proxy with Service-Level Routing (JSON)
DESCRIPTION: This JSON payload defines a gRPC API proxy configuration with service-level routing for NGINX Management Suite API Connectivity Manager.  The `grpcIngress` service is set to "helloworld.Greeter", enabling routing based on the specific gRPC service. The configuration also specifies backend details similar to the package-level routing example.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/services/publish-gRPC-proxy.md#_snippet_1

LANGUAGE: json
CODE:
```
{
    "name": "dev-grpc-hello",
    "version": "v1",
    "proxyConfig": {
        "hostname": "example.com",
        "grpcIngress": {
            "service": "helloworld.Greeter"
        },
        "backends": [
          {
            "serviceName": "hello-grpc-service-name",
            "serviceTargets": [
                {
                    "hostname": "grpc-backend.example.com",
                    "listener": {
                        "enableTLS": false,
                        "port": 50051,
                        "transportProtocol": "GRPC"
                    }
                }
            ]
          }
        ]
    }
}
```

----------------------------------------

TITLE: Configuring NGINX to Trust Upstream Certificates
DESCRIPTION: This snippet illustrates how to configure NGINX to trust certificates issued by a specific Certificate Authority (CA) for upstream servers, especially useful for self-signed certificates. `proxy_ssl_trusted_certificate` points to the CA certificate, while `proxy_ssl_verify` and `proxy_ssl_verify_depth` enable and control the depth of certificate chain verification.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/securing-http-traffic-upstream.md#_snippet_2

LANGUAGE: nginx
CODE:
```
location /upstream {
    #...
    proxy_ssl_trusted_certificate /etc/nginx/trusted_ca_cert.crt;
    proxy_ssl_verify       on;
    proxy_ssl_verify_depth 2;
    #...
}
```

----------------------------------------

TITLE: NGINX Plus and App Protect Docker Deployment for Ubuntu
DESCRIPTION: This comprehensive Dockerfile outlines the process for building a Docker image with NGINX Plus, NGINX App Protect, and NGINX App Protect DoS on Ubuntu (Bionic, Focal, Jammy, Noble). It includes steps for setting up the base image, copying NGINX repository credentials and license, installing system dependencies, adding NGINX official package repositories, and finally installing the NGINX App Protect packages.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/learn-about-deployment.md#_snippet_179

LANGUAGE: Dockerfile
CODE:
```
ARG OS_CODENAME
# Where OS_CODENAME can be: bionic/focal/jammy/noble

FROM ubuntu:${OS_CODENAME}

ARG DEBIAN_FRONTEND=noninteractive

# Download certificate, key, and JWT license from the customer portal (https://my.f5.com)
# and copy to the build context:
RUN mkdir -p /etc/ssl/nginx/
RUN mkdir -p /etc/nginx/
COPY nginx-repo.crt nginx-repo.key /etc/ssl/nginx/
COPY nginx-repo.crt license.jwt /etc/nginx/

# Install prerequisite packages:
RUN apt-get update && apt-get install -y apt-transport-https lsb-release ca-certificates wget gnupg2 ubuntu-keyring

# Download and add the NGINX signing key:
RUN wget -qO - https://cs.nginx.com/static/keys/nginx_signing.key | gpg --dearmor | tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null

# Add NGINX Plus, NGINX App Protect and NGINX App Protect DoS repository:
RUN printf "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] https://pkgs.nginx.com/plus/ubuntu `lsb_release -cs` nginx-plus\n" | tee /etc/apt/sources.list.d/nginx-plus.list
RUN printf "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] https://pkgs.nginx.com/app-protect-dos/ubuntu `lsb_release -cs` nginx-plus\n" | tee /etc/apt/sources.list.d/nginx-app-protect-dos.list
RUN printf "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] https://pkgs.nginx.com/app-protect/ubuntu `lsb_release -cs` nginx-plus\n" | tee /etc/apt/sources.list.d/nginx-app-protect.list

# Download the apt configuration to `/etc/apt/apt.conf.d`:
RUN wget -P /etc/apt/apt.conf.d https://cs.nginx.com/static/files/90pkgs-nginx

# Update the repository and install the most recent version of the NGINX App Protect DoS and NGINX App Protect package (which includes NGINX Plus):
RUN apt-get update && apt-get install -y app-protect-dos app-protect

# Remove nginx repository key/cert from docker
RUN rm -rf /etc/ssl/nginx

# Copy configuration files:
COPY nginx.conf custom_log_format.json /etc/nginx/
COPY entrypoint.sh /root/

CMD /root/entrypoint.sh && tail -f /dev/null
```

----------------------------------------

TITLE: Enabling `sendfile` and Limiting Chunk Size in NGINX
DESCRIPTION: This NGINX configuration enables the `sendfile` directive within the `/mp3` location, allowing NGINX to directly copy data from one file descriptor to another, bypassing the buffer. It also uses `sendfile_max_chunk` to limit the amount of data transferred in a single `sendfile()` call to 1MB, preventing a single fast connection from monopolizing the worker process.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/web-server/serving-static-content.md#_snippet_7

LANGUAGE: nginx
CODE:
```
location /mp3 {
    sendfile           on;
    sendfile_max_chunk 1m;
    #...
}
```

----------------------------------------

TITLE: Configure Test Application Server Block
DESCRIPTION: This snippet configures a simple test application server block that listens on port 8080. It returns a 200 OK response with the authenticated user's full name and email, which are obtained from the HTTP headers passed by NGINX. This verifies if OIDC authentication and claim passing is successful.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/configuring-oidc.md#_snippet_8

LANGUAGE: nginx
CODE:
```
# ...
server {
    listen 8080;

    location / {
        return 200 "Hello, $http_name!\nEmail: $http_email\nIdP sub sub: $http_sub\n";
        default_type text/plain;
    }
}
```

----------------------------------------

TITLE: Defining Stream Log Format with Original IP in NGINX
DESCRIPTION: This NGINX Stream configuration snippet shows how to define a log_format within the stream block to capture the client's original IP address using the $proxy_protocol_addr variable. This is essential for accurate logging of TCP/UDP connections where the PROXY protocol is used.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/using-proxy-protocol.md#_snippet_6

LANGUAGE: Nginx
CODE:
```
stream {
    #...
    log_format basic '$proxy_protocol_addr - $remote_user [$time_local] '
                      '$protocol $status $bytes_sent $bytes_received '
                      '$session_time';
}
```

----------------------------------------

TITLE: Complete DNS Health Check Configuration Example
DESCRIPTION: This example provides a complete NGINX configuration for DNS health checks. It includes the stream block with upstream servers, health check configuration, and the match block definition.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/load-balancer/udp-health-check.md#_snippet_15

LANGUAGE: nginx
CODE:
```

stream {
    upstream dns_upstream {
        zone   dns_zone 64k;
        server 192.168.136.130:53;
        server 192.168.136.131:53;
        server 192.168.136.132:53;
}
    server {
        listen          53 udp;
        proxy_pass      dns_upstream;
        health_check    match=dns udp;
        proxy_timeout   1s;
        proxy_responses 1;
        error_log       logs/dns.log;
        }

    match dns {
        # make sure appropriate CNAME record exists
        send \x00\x01\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x0b\x68\x65\x61\x6c\x74\x68\x63\x68\x65\x63\x6b\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x00\x01\x00\x01;
        expect  ~* "healthy.svcs.example.com";
    }
}

```

----------------------------------------

TITLE: Complete NGINX Configuration with App Protect WAF
DESCRIPTION: This comprehensive NGINX configuration example demonstrates how to integrate NGINX App Protect WAF. It includes loading the module, setting the enforcer address, enabling App Protect, and applying a default policy within a server block, along with basic proxy and return directives.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/app-protect/configure-waf.md#_snippet_4

LANGUAGE: nginx
CODE:
```
user nginx;
worker_processes auto;
worker_rlimit_nofile 8192;
pid /run/nginx/nginx.pid;

load_module modules/ngx_http_app_protect_module.so;

events {
    worker_connections 4000;
}

error_log /var/log/nginx/error.log debug;

http {
    access_log off;
    server_tokens "";

    app_protect_enforcer_address 127.0.0.1:50000;

    server {
        listen 80 default_server;

        location / {
            app_protect_enable on;
            app_protect_policy_file /etc/app_protect/conf/NginxDefaultPolicy.json;
            proxy_pass http://127.0.0.1:80/proxy/$request_uri;
        }

        location /proxy {
            default_type text/html;
            return 200 "Hello World\n";
        }
    }
}
```

----------------------------------------

TITLE: Limiting Request Rate in a Nginx Location Block
DESCRIPTION: This configuration limits the request rate to 1 request per second within the `/search/` location. It utilizes the previously defined 'one' zone to track and enforce the rate limit.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/controlling-access-proxied-http.md#_snippet_4

LANGUAGE: nginx
CODE:
```
http {
    #...

    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

    server {
        #...

        location /search/ {
            limit_req zone=one;
        }
    }
}
```

----------------------------------------

TITLE: Enabling NGINX Service to Start at Boot
DESCRIPTION: This command configures the `nginx.service` to automatically start when the system boots up. It ensures that the NGINX/App-Protect-DoS service is available after a system restart without manual intervention, maintaining continuous operation.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/learn-about-deployment.md#_snippet_35

LANGUAGE: Shell
CODE:
```
sudo systemctl enable nginx.service
```

----------------------------------------

TITLE: Start Nginx
DESCRIPTION: Starts the NGINX web server. This command initiates the NGINX process, which begins listening for incoming HTTP requests.  Ensure that the NGINX configuration is valid before running this command.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-waf/v5/admin-guide/install.md#_snippet_10

LANGUAGE: shell
CODE:
```
sudo nginx
```

----------------------------------------

TITLE: Configure trusted certificate authority in NGINX
DESCRIPTION: This snippet configures NGINX to use a trusted certificate authority (CA) certificate for verifying upstream server certificates. It includes the `proxy_ssl_trusted_certificate` directive to specify the path to the CA certificate and the `proxy_ssl_verify` and `proxy_ssl_verify_depth` directives to enable and configure certificate verification.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginxaas-azure/quickstart/security-controls/securing-upstream-traffic.md#_snippet_2

LANGUAGE: nginx
CODE:
```
location /upstream {
    # ...
    proxy_ssl_trusted_certificate /etc/nginx/trusted_ca_cert.crt;
    proxy_ssl_verify       on;
    proxy_ssl_verify_depth 2;
    # ...
}
```

----------------------------------------

TITLE: Apply Bookinfo Ingress
DESCRIPTION: Applies the `bookinfo-ingress.yaml` file to create an Ingress resource. This resource exposes the Bookinfo application using the specified host and paths.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/tutorials/kic/ingress-walkthrough.md#_snippet_4

LANGUAGE: bash
CODE:
```
kubectl apply -f bookinfo-ingress.yaml
```

----------------------------------------

TITLE: Dockerfile for Nginx App Protect OSS
DESCRIPTION: This Dockerfile defines the steps to build an Nginx image with the Nginx App Protect WAF v5 module. It starts with an Alpine Linux base image, installs Nginx from the mainline repository, and configures the necessary dependencies and settings. Secrets are used for certificate and key management. The Dockerfile exposes port 80 and defines the default command to start Nginx.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/v5/build-nginx-image-oss/build-alpine.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1

# Supported OS_VER's are 3.16/3.17/3.19
ARG OS_VER="3.19"

# Base image
FROM alpine:${OS_VER}

# Install NGINX OSS and NGINX App Protect WAF v5 module
RUN --mount=type=secret,id=nginx-crt,dst=/etc/apk/cert.pem,mode=0644 \
    --mount=type=secret,id=nginx-key,dst=/etc/apk/cert.key,mode=0644 \
    apk add openssl curl ca-certificates \
    && printf "%s%s%s%s\n" \
        "http://nginx.org/packages/mainline/alpine/v" \
        `egrep -o '^[0-9]+\.[0-9]+' /etc/alpine-release` \
        "/main" \
        | tee -a /etc/apk/repositories \
    && wget -O /etc/apk/keys/nginx_signing.rsa.pub https://cs.nginx.com/static/keys/nginx_signing.rsa.pub \
    && printf "https://pkgs.nginx.com/app-protect-x-oss/alpine/v`egrep -o '^[0-9]+\.[0-9]+' /etc/alpine-release`/main\n" | \
        tee -a /etc/apk/repositories \
    && apk update \
    && apk add app-protect-module-oss \
    && ln -sf /dev/stdout /var/log/nginx/access.log \
    && ln -sf /dev/stderr /var/log/nginx/error.log \
    && rm -rf /var/cache/apk/*

# Expose port
EXPOSE 80

# Define stop signal
STOPSIGNAL SIGQUIT

# Set default command
CMD ["nginx", "-g", "daemon off;"]
```

----------------------------------------

TITLE: Apply Gateway Resources with Kubectl
DESCRIPTION: This command applies the gateway resources defined in the gateway.yaml file to the Kubernetes cluster, creating a Gateway resource. This configures the entrypoint for traffic to the example application.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/get-started.md#_snippet_9

LANGUAGE: shell
CODE:
```
kubectl apply -f gateway.yaml
```

----------------------------------------

TITLE: Zone Directive in NGINX Configuration (Text)
DESCRIPTION: This snippet shows the relevant portion of the NGINX configuration output, specifically the `upstream` blocks for `coffee` and `tea`. It confirms that the `zone` directive is set to `1m` for both upstreams, as defined in the `UpstreamSettingsPolicy`.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-management/upstream-settings.md#_snippet_13

LANGUAGE: text
CODE:
```
upstream default_coffee_80 {
    random two least_conn;
    zone default_coffee_80 1m;

    server 10.244.0.14:8080;
}

upstream default_tea_80 {
    random two least_conn;
    zone default_tea_80 1m;

    server 10.244.0.15:8080;
}
```

----------------------------------------

TITLE: Hiding Nginx Version in Server Header
DESCRIPTION: This snippet disables the `server_tokens` directive in the Nginx configuration, which prevents the Nginx version from being included in the Server header of the HTTP response. This can help to improve security by obscuring the Nginx version from potential attackers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/how-to/policies/proxy-response-headers.md#_snippet_9

LANGUAGE: nginx
CODE:
```
server_tokens off
```

----------------------------------------

TITLE: Including HTTP and Stream Config Files in nginx.conf
DESCRIPTION: This snippet demonstrates how to include separate configuration files for HTTP and TCP (stream) traffic within the main nginx.conf file.  This promotes modularity and easier management of different NGINX functions. The `include` directive is part of the core Nginx module.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/microsoft-exchange.md#_snippet_19

LANGUAGE: nginx
CODE:
```
http {
    include conf.d/exchange-http.conf;
}

stream {
    include conf.d/exchange-stream.conf;
}
```

----------------------------------------

TITLE: Loading NGINX App Protect DoS Module (NGINX)
DESCRIPTION: This NGINX configuration directive loads the `ngx_http_app_protect_dos_module.so` module into the NGINX main context. This is a mandatory step to enable the App Protect DoS functionality within NGINX. It must be placed at the top level of the `nginx.conf` file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nap-dos/deployment-guide/learn-about-deployment.md#_snippet_132

LANGUAGE: nginx
CODE:
```
load_module modules/ngx_http_app_protect_dos_module.so;
```

----------------------------------------

TITLE: Install Nginx Plus and App Protect in Dockerfile
DESCRIPTION: This snippet installs Nginx Plus and Nginx App Protect WAF v5 module within a Dockerfile. It uses multi-stage builds for secure handling of repository keys and certificates via Docker secrets. The snippet configures the package repositories, imports the signing key, and installs the required packages using apt-get.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/config/v5/build-nginx-image-plus/build-debian.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1

# Supported OS_CODENAME's are: bullseye/bookworm
ARG OS_CODENAME=bookworm

# Base image
FROM debian:${OS_CODENAME}

# Install NGINX Plus and NGINX App Protect WAF v5 module
RUN --mount=type=secret,id=nginx-crt,dst=/etc/ssl/nginx/nginx-repo.crt,mode=0644 \
    --mount=type=secret,id=nginx-key,dst=/etc/ssl/nginx/nginx-repo.key,mode=0644 \
    apt-get update \
    && apt-get install -y \
       apt-transport-https \
       lsb-release \
       ca-certificates \
       wget \
       gnupg2 \
       debian-archive-keyring \
    && wget -qO - https://cs.nginx.com/static/keys/nginx_signing.key | \
       gpg --dearmor | tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null \
    && gpg --dry-run --quiet --no-keyring --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg \
    && printf "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \
       https://pkgs.nginx.com/plus/debian `lsb_release -cs` nginx-plus\n" | \
       tee /etc/apt/sources.list.d/nginx-plus.list \
    && printf "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \
       https://pkgs.nginx.com/app-protect-x-plus/debian `lsb_release -cs` nginx-plus\n" | \
       tee /etc/apt/sources.list.d/nginx-app-protect.list \
    && wget -P /etc/apt/apt.conf.d https://cs.nginx.com/static/files/90pkgs-nginx \
    && apt-get update \
    && DEBIAN_FRONTEND="noninteractive" apt-get install -y app-protect-module-plus \
    && ln -sf /dev/stdout /var/log/nginx/access.log \
    && ln -sf /dev/stderr /var/log/nginx/error.log \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*
```

----------------------------------------

TITLE: Configuring Upstream Group for Load Balancing Nginx
DESCRIPTION: This snippet configures an upstream group named 'weblogic' with two backend servers. This group is used for load balancing HTTP and HTTPS traffic to the specified servers. The configuration should be within the 'http' block.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/oracle-weblogic-server.md#_snippet_16

LANGUAGE: nginx
CODE:
```
# In the 'http' block
upstream weblogic {
    server 192.168.25.33:7001;
    server 192.168.25.69:7001;
}
```

----------------------------------------

TITLE: Configuring Custom Hash Load Balancing in NGINX
DESCRIPTION: This configuration illustrates using the `hash` load-balancing method in NGINX for session persistence. It specifically hashes on the `$remote_addr` variable (client IP address) to ensure requests from the same client are consistently routed to the same server, providing a flexible alternative to `ip_hash` for sticky sessions. The `jboss` upstream group includes two backend servers.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_18

LANGUAGE: nginx
CODE:
```
# In the 'http' block
upstream jboss {
    hash $remote_addr;
    server 192.168.33.11:8080;
    server 192.168.33.12:8080;
}
```

----------------------------------------

TITLE: HTTPS Server with Certificate and Key in One File
DESCRIPTION: This snippet shows how to configure an HTTPS server where the SSL certificate and private key are stored in the same file.  It's crucial to restrict access to this file due to the presence of the private key. Only the certificate is sent to clients, even if the key resides in the same file.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/admin-guide/security-controls/terminating-ssl-http.md#_snippet_1

LANGUAGE: nginx
CODE:
```
ssl_certificate     www.example.com.cert;
ssl_certificate_key www.example.com.cert;
```

----------------------------------------

TITLE: Enabling HTTP/2 Support in Nginx
DESCRIPTION: This snippet enables HTTP/2 support in the Nginx server block. By adding `http2 on;` to the server configuration, Nginx will negotiate HTTP/2 connections with clients that support it, improving performance and efficiency.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_24

LANGUAGE: nginx
CODE:
```
listen 443 ssl;
http2  on;
```

----------------------------------------

TITLE: Disabling mTLS for a specific resource in Kubernetes
DESCRIPTION: This YAML snippet illustrates how to disable mTLS for a specific resource in Kubernetes by adding an annotation to the resource's PodTemplateSpec. The annotation `config.nsm.nginx.com/mtls-mode` is set to `off` to disable mTLS for that resource.  This is beneficial when certain services are not yet ready for mTLS or need to communicate with non-meshed services.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/guides/secure-traffic-mtls.md#_snippet_9

LANGUAGE: yaml
CODE:
```
config.nsm.nginx.com/mtls-mode: "off"
```

----------------------------------------

TITLE: Defining Extended NGINX Log Format
DESCRIPTION: This code snippet defines a custom log format named `main_ext` for NGINX access logs.  It includes various NGINX variables to provide detailed information about requests, such as remote address, request time, upstream status, and cache status.  This extended log format is required to collect additional metrics using NGINX Amplify Agent.
SOURCE: https://github.com/nginx/documentation/blob/main/content/amplify/metrics-metadata/nginx-metrics.md#_snippet_0

LANGUAGE: nginx
CODE:
```
log_format  main_ext  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        '"$host" sn="$server_name" '
                        'rt=$request_time '
                        'ua="$upstream_addr" us="$upstream_status" '
                        'ut="$upstream_response_time" ul="$upstream_response_length" '
                        'cs=$upstream_cache_status' ;
```

----------------------------------------

TITLE: Including Configuration Files in Nginx
DESCRIPTION: This Nginx configuration block includes either the basic or enhanced Node.js configuration file within the `http` block of the main `nginx.conf` file. It allows Nginx to load the specific configuration for load balancing Node.js applications. The `include` directive references files in the `conf.d` directory.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/node-js.md#_snippet_8

LANGUAGE: nginx
CODE:
```
http {
    include conf.d/nodejs-(basic|enhanced).conf;
}
```

----------------------------------------

TITLE: Resource Name Label for NGINX Ingress Controller Deployment (YAML)
DESCRIPTION: This YAML snippet shows how to add a label to the NGINX Ingress Controller Deployment's Pod spec to associate metrics with the deployment resource.  The `nsm.nginx.com/deployment` label allows Prometheus to identify the Deployment that created the Pod, enabling more granular metrics analysis.  The value should be replaced with the actual name of the NGINX Ingress Controller Deployment.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/tutorials/kic/deploy-with-kic.md#_snippet_12

LANGUAGE: yaml
CODE:
```
nsm.nginx.com/deployment: <name of NGINX Ingress Controller Deployment>
```

----------------------------------------

TITLE: Describe UpstreamSettingsPolicy Keepalive Status (Shell)
DESCRIPTION: This command uses `kubectl describe` to check the status of the `UpstreamSettingsPolicy` named `upstream-keepalives`. It verifies that the policy has been accepted by the NGINX Gateway Fabric controller.
SOURCE: https://github.com/nginx/documentation/blob/main/content/ngf/how-to/traffic-management/upstream-settings.md#_snippet_15

LANGUAGE: shell
CODE:
```
kubectl describe upstreamsettingspolicies.gateway.nginx.org upstream-keepalives
```

----------------------------------------

TITLE: Defining NGINX Application Health Check
DESCRIPTION: Defines a named health check (`jboss_check`) to verify the health of backend WildFly application servers. It checks for a 200 OK status, a `Content-Type` header of `text/html`, and a specific string in the response body to confirm application readiness.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/wildfly.md#_snippet_42

LANGUAGE: nginx
CODE:
```
match jboss_check {
    status 200;
    header Content-Type = text/html;
    body ~ "Your WildFly 9 is running";

}
```

----------------------------------------

TITLE: Traffic Target YAML Definition
DESCRIPTION: This YAML defines a TrafficTarget resource. It specifies that traffic is allowed from the 'source-allowed-sa' ServiceAccount to the 'destination-sa' ServiceAccount, and that traffic must match the 'destination-traffic' rules defined in the HTTPRouteGroup.
SOURCE: https://github.com/nginx/documentation/blob/main/content/mesh/tutorials/accesscontrol-walkthrough.md#_snippet_12

LANGUAGE: yaml
CODE:
```
apiVersion: access.smi-spec.io/v1alpha2
kind: TrafficTarget
metadata:
  name: traffic-target
spec:
  destination:
    kind: ServiceAccount
    name: destination-sa
  rules:
  - kind: HTTPRouteGroup
    name: route-group
    matches:
    - destination-traffic
  sources:
  - kind: ServiceAccount
    name: source-allowed-sa
```

----------------------------------------

TITLE: Setting readOnlyRootFilesystem in Kubernetes Security Context (YAML)
DESCRIPTION: This snippet demonstrates how to set the `readOnlyRootFilesystem` property to `true` within the security context of a Kubernetes container. This configuration enhances security by preventing writes to the root filesystem. It's applied to multiple containers: nginx, waf-enforcer and waf-config-mgr.
SOURCE: https://github.com/nginx/documentation/blob/main/content/includes/nap-waf/nap-k8s-readonly-context.md#_snippet_0

LANGUAGE: yaml
CODE:
```
containers:
    - name: nginx
      ...
      securityContext:
          readOnlyRootFilesystem: true
    - name: waf-enforcer
      ...
      securityContext:
          readOnlyRootFilesystem: true
    - name: waf-config-mgr
      ...
      securityContext:
          readOnlyRootFilesystem: true
```

----------------------------------------

TITLE: Including HTTP Configuration Files with Wildcard (Nginx)
DESCRIPTION: This configuration snippet includes all configuration files ending with `-http.conf` from the `conf.d` directory within the `http` context.  This provides a flexible way to manage multiple HTTP configurations by organizing them into separate files.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nginx/deployment-guides/load-balance-third-party/apache-tomcat.md#_snippet_9

LANGUAGE: nginx
CODE:
```
http {
    include conf.d/*-http.conf;
}
```

----------------------------------------

TITLE: Retrieving Pets by Status - OpenAPI JSON
DESCRIPTION: This snippet defines a GET operation to find pets based on their status. It includes a query parameter 'status' with predefined enum values (available, pending, sold) and specifies successful (200) and error (400) responses, returning an array of Pet objects in XML or JSON format.
SOURCE: https://github.com/nginx/documentation/blob/main/content/nms/acm/tutorials/oas-security-schemes.md#_snippet_18

LANGUAGE: JSON
CODE:
```
        "/pet/findByStatus": {
          "get": {
            "tags": [
              "pet"
            ],
            "summary": "Finds Pets by status",
            "description": "Multiple status values can be provided with comma separated strings",
            "operationId": "findPetsByStatus",
            "parameters": [
              {
                "name": "status",
                "in": "query",
                "description": "Status values that need to be considered for filter",
                "required": false,
                "explode": true,
                "schema": {
                  "type": "string",
                  "default": "available",
                  "enum": [
                    "available",
                    "pending",
                    "sold"
                  ]
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/xml": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    }
                  },
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid status value"
              }
            }
          }
        }
```