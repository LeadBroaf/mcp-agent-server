TITLE: Running the npm Command in Bash
DESCRIPTION: This snippet shows the basic syntax for running the npm command. It's the entry point for all npm-related operations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm
```

----------------------------------------

TITLE: AsyncLocalStorage with Async/Await
DESCRIPTION: Illustrates how to use AsyncLocalStorage with async/await to maintain context within an asynchronous function. The store is available within the callback function passed to `asyncLocalStorage.run()` and any functions it calls.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_10

LANGUAGE: js
CODE:
```
async function fn() {
  await asyncLocalStorage.run(new Map(), () => {
    asyncLocalStorage.getStore().set('key', value);
    return foo(); // The return value of foo will be awaited
  });
}
```

----------------------------------------

TITLE: Running a Node.js Application
DESCRIPTION: Command to execute a Node.js script using the node command, specifically for running the hello-world.js application.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/synopsis.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
node hello-world.js
```

----------------------------------------

TITLE: Importing the URL module (ESM)
DESCRIPTION: Imports the URL module using the ES module syntax. This allows access to URL parsing and formatting utilities.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_0

LANGUAGE: mjs
CODE:
```
import url from 'node:url';
```

----------------------------------------

TITLE: Running Specific Package Commands with npm exec in Bash
DESCRIPTION: Shows how to run a command other than the package's default command by specifying the --package option. Demonstrates both npm exec and npx versions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-exec.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ npm exec --package=foo -- bar --bar-argument
# ~ or ~
$ npx --package=foo bar --bar-argument
```

----------------------------------------

TITLE: Importing and using a function from another ES module
DESCRIPTION: This example shows how to import the `addTwo` function from the `addTwo.mjs` module and use it to print the result of adding 2 to 4 to the console. It demonstrates basic ESM import syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_1

LANGUAGE: js
CODE:
```
// app.mjs
import { addTwo } from './addTwo.mjs';

// Prints: 6
console.log(addTwo(4));
```

----------------------------------------

TITLE: Using console.error to Print Errors in Node.js (JavaScript)
DESCRIPTION: Demonstrates printing messages to `stderr` using `console.error`. Shows how multiple arguments are handled, with the first as a primary message potentially containing `printf`-style format specifiers (like `%d`) processed by `util.format()`, and subsequent arguments as substitution values. If no format specifiers are found, arguments are inspected using `util.inspect()` and concatenated. Output includes a newline.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_4

LANGUAGE: js
CODE:
```
const code = 5;
console.error('error #%d', code);
// Prints: error #5, to stderr
console.error('error', code);
// Prints: error 5, to stderr
```

----------------------------------------

TITLE: Generating a Basic package.json File
DESCRIPTION: Examples of using npm init to generate a basic package.json file, with and without prompts.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-init.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
$ mkdir my-npm-pkg && cd my-npm-pkg
$ git init
$ npm init
```

LANGUAGE: bash
CODE:
```
$ npm init -y
```

----------------------------------------

TITLE: Implementing Mutual TLS Authentication with Node.js HTTPS Server and Undici Client
DESCRIPTION: Sets up an HTTPS server that requires and validates client certificates, and creates an Undici client that connects with its own certificate. The server validates incoming client certificates against a CA, while the client validates the server certificate. Includes certificate loading, server configuration with certificate validation options, and client request handling.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/best-practices/client-certificate.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const { readFileSync } = require('node:fs')
const { join } = require('node:path')
const { createServer } = require('node:https')
const { Client } = require('undici')

const serverOptions = {
  ca: [
    readFileSync(join(__dirname, 'client-ca-crt.pem'), 'utf8')
  ],
  key: readFileSync(join(__dirname, 'server-key.pem'), 'utf8'),
  cert: readFileSync(join(__dirname, 'server-crt.pem'), 'utf8'),
  requestCert: true,
  rejectUnauthorized: false
}

const server = createServer(serverOptions, (req, res) => {
  // true if client cert is valid
  if(req.client.authorized === true) {
    console.log('valid')
  } else {
    console.error(req.client.authorizationError)
  }
  res.end()
})

server.listen(0, function () {
  const tls = {
    ca: [
      readFileSync(join(__dirname, 'server-ca-crt.pem'), 'utf8')
    ],
    key: readFileSync(join(__dirname, 'client-key.pem'), 'utf8'),
    cert: readFileSync(join(__dirname, 'client-crt.pem'), 'utf8'),
    rejectUnauthorized: false,
    servername: 'agent1'
  }
  const client = new Client(`https://localhost:${server.address().port}`, {
    connect: tls
  })

  client.request({
    path: '/',
    method: 'GET'
  }, (err, { body }) => {
    body.on('data', (buf) => {})
    body.on('end', () => {
      client.close()
      server.close()
    })
  })
})
```

----------------------------------------

TITLE: Emitting events with listeners (ESM)
DESCRIPTION: This code demonstrates how to emit events and attach multiple listeners to an event using the EventEmitter class in Node.js. It showcases the use of different listener functions and parameter handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_28

LANGUAGE: mjs
CODE:
```
import { EventEmitter } from 'node:events';
const myEmitter = new EventEmitter();

// First listener
myEmitter.on('event', function firstListener() {
  console.log('Helloooo! first listener');
});
// Second listener
myEmitter.on('event', function secondListener(arg1, arg2) {
  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
});
// Third listener
myEmitter.on('event', function thirdListener(...args) {
  const parameters = args.join(', ');
  console.log(`event with parameters ${parameters} in third listener`);
});

console.log(myEmitter.listeners('event'));

myEmitter.emit('event', 1, 2, 3, 4, 5);

// Prints:
// [
//   [Function: firstListener],
//   [Function: secondListener],
//   [Function: thirdListener]
// ]
// Helloooo! first listener
// event with parameters 1, 2 in second listener
// event with parameters 1, 2, 3, 4, 5 in third listener
```

----------------------------------------

TITLE: Preventing crashes by listening to error events (CJS)
DESCRIPTION: This code demonstrates how to prevent Node.js from crashing by adding a listener for the 'error' event. This is a best practice to avoid unexpected application termination. The example uses CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_15

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on('error', (err) => {
  console.error('whoops! there was an error');
});
myEmitter.emit('error', new Error('whoops!'));
// Prints: whoops! there was an error
```

----------------------------------------

TITLE: Creating Directory with fsPromises.mkdir (ESM)
DESCRIPTION: Demonstrates how to asynchronously create a directory using `fsPromises.mkdir` with the `recursive: true` option in an ESM module. It attempts to create a nested directory and logs the result or catches any errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_21

LANGUAGE: JavaScript
CODE:
```
import { mkdir } from 'node:fs/promises';

try {
  const projectFolder = new URL('./test/project/', import.meta.url);
  const createDir = await mkdir(projectFolder, { recursive: true });

  console.log(`created ${createDir}`);
} catch (err) {
  console.error(err.message);
}
```

----------------------------------------

TITLE: Importing util module
DESCRIPTION: Import the util module in Node.js using ES modules and CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#_snippet_0

LANGUAGE: mjs
CODE:
```
import util from 'node:util';
```

LANGUAGE: cjs
CODE:
```
const util = require('node:util');
```

----------------------------------------

TITLE: Crashing process due to unhandled 'error' event
DESCRIPTION: Shows how omitting an 'error' event handler on an EventEmitter can lead to an uncaught exception and process crash.  The ee.emit('error', ...) call will cause the process to crash because no 'error' handler is registered.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const EventEmitter = require('node:events');
const ee = new EventEmitter();

setImmediate(() => {
  // This will crash the process because no 'error' event
  // handler has been added.
  ee.emit('error', new Error('This will crash'));
});
```

----------------------------------------

TITLE: Hashing Data with Piped Streams - Node.js Crypto (JavaScript CJS)
DESCRIPTION: This snippet shows how to hash a file's content using piped streams in CommonJS. It requires 'node:fs', 'node:crypto', and 'node:process' modules. The file is read through a stream, piped through a SHA-256 hash, set to hex encoding, and output to stdout. Ensure the input file exists and Node.js is available.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_29

LANGUAGE: JavaScript
CODE:
```
const { createReadStream } = require('node:fs');
const { createHash } = require('node:crypto');
const { stdout } = require('node:process');

const hash = createHash('sha256');

const input = createReadStream('test.js');
input.pipe(hash).setEncoding('hex').pipe(stdout);
```

----------------------------------------

TITLE: Creating HTTP Server with Request Listener (CJS)
DESCRIPTION: Demonstrates creating a basic HTTP server using `http.createServer` with an inline request listener function in CommonJS syntax. The listener handles incoming requests and sends a simple JSON response.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_73

LANGUAGE: cjs
CODE:
```
const http = require('node:http');

// Create a local server to receive data from
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
```

----------------------------------------

TITLE: Package.json Dual Entry Point Declaration for Compatibility (JSON)
DESCRIPTION: Lists both main and exports fields in package.json to ensure compatibility across old and new Node.js versions and modern build tools. The same module file is exposed as the main entry using both fields. Essential for maintaining cross-version compatibility without breaking clients in the ecosystem.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_7

LANGUAGE: json
CODE:
```
{
  "main": "./index.js",
  "exports": "./index.js"
}
```

----------------------------------------

TITLE: Writing Basic Node.js Tests
DESCRIPTION: Illustrates various ways to write tests using the `node:test` module, including synchronous tests (passing/failing), asynchronous tests using `async/await` or Promises (passing/failing), and callback-based tests (passing/failing). Requires the `assert` module for assertions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_1

LANGUAGE: js
CODE:
```
test('synchronous passing test', (t) => {
  // This test passes because it does not throw an exception.
  assert.strictEqual(1, 1);
});

test('synchronous failing test', (t) => {
  // This test fails because it throws an exception.
  assert.strictEqual(1, 2);
});

test('asynchronous passing test', async (t) => {
  // This test passes because the Promise returned by the async
  // function is settled and not rejected.
  assert.strictEqual(1, 1);
});

test('asynchronous failing test', async (t) => {
  // This test fails because the Promise returned by the async
  // function is rejected.
  assert.strictEqual(1, 2);
});

test('failing test using Promises', (t) => {
  // Promises can be used directly as well.
  return new Promise((resolve, reject) => {
    setImmediate(() => {
      reject(new Error('this will cause the test to fail'));
    });
  });
});

test('callback passing test', (t, done) => {
  // done() is the callback function. When the setImmediate() runs, it invokes
  // done() with no arguments.
  setImmediate(done);
});

test('callback failing test', (t, done) => {
  // When the setImmediate() runs, done() is invoked with an Error object and
  // the test fails.
  setImmediate(() => {
    done(new Error('callback failure'));
  });
});
```

----------------------------------------

TITLE: Setting Status Code for Implicit Headers in Node.js (JS)
DESCRIPTION: Shows how to set the HTTP status code using the `response.statusCode` property. This value is used when headers are implicitly flushed if `response.writeHead` is not called.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_54

LANGUAGE: JavaScript
CODE:
```
response.statusCode = 404;
```

----------------------------------------

TITLE: Writing data to a stream with backpressure handling
DESCRIPTION: This code demonstrates how to write data to a stream while respecting backpressure using the 'drain' event. It checks if the stream's write buffer is full and waits for the 'drain' event before writing more data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_25

LANGUAGE: javascript
CODE:
```
function write(data, cb) {
  if (!stream.write(data)) {
    stream.once('drain', cb);
  } else {
    process.nextTick(cb);
  }
}

// Wait for cb to be called before doing any other write.
write('hello', () => {
  console.log('Write completed, do more writes now.');
});
```

----------------------------------------

TITLE: Using nextTick to defer execution (ESM)
DESCRIPTION: This example shows how to use process.nextTick() to defer the execution of a function until after an object has been constructed and event handlers have been assigned. This ensures that the startDoingStuff() method is called after the getReadyForStuff() method.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_100

LANGUAGE: mjs
CODE:
```
import { nextTick } from 'node:process';

function MyThing(options) {
  this.setupOptions(options);

  nextTick(() => {
    this.startDoingStuff();
  });
}

const thing = new MyThing();
thing.getReadyForStuff();

// thing.startDoingStuff() gets called now, not before.
```

----------------------------------------

TITLE: Handling 'EADDRINUSE' Error on Node.js Server Start in JavaScript
DESCRIPTION: This snippet demonstrates an approach to handle the common 'EADDRINUSE' error which occurs when attempting to start a server on a port or path already in use. It listens for the 'error' event on the server object. If the error code is 'EADDRINUSE', it logs a message, closes the server instance gracefully, and attempts to restart the server after a 1-second delay using `setTimeout`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
```js
server.on('error', (e) => {
  if (e.code === 'EADDRINUSE') {
    console.error('Address in use, retrying...');
    setTimeout(() => {
      server.close();
      server.listen(PORT, HOST);
    }, 1000);
  }
});
```
```

----------------------------------------

TITLE: Asynchronous Iteration with AbortSignal (ESM)
DESCRIPTION: This code snippet demonstrates how to use `events.on` with an `AbortSignal` to cancel waiting for events. It creates an `AbortController`, an `EventEmitter`, and then iterates over events using `events.on`, passing the `AbortSignal` in the options. The `AbortController` is aborted using `process.nextTick` to stop the iteration. This example uses ES modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_67

LANGUAGE: mjs
CODE:
```
import { on, EventEmitter } from 'node:events';
import process from 'node:process';

const ac = new AbortController();

(async () => {
  const ee = new EventEmitter();

  // Emit later on
  process.nextTick(() => {
    ee.emit('foo', 'bar');
    ee.emit('foo', 42);
  });

  for await (const event of on(ee, 'foo', { signal: ac.signal })) {
    // The execution of this inner block is synchronous and it
    // processes one event at a time (even with await). Do not use
    // if concurrent execution is required.
    console.log(event); // prints ['bar'] [42]
  }
  // Unreachable here
})();

process.nextTick(() => ac.abort());
```

----------------------------------------

TITLE: HTTP Server with Readable and Writable Streams
DESCRIPTION: This example demonstrates how to use readable streams (http.IncomingMessage) and writable streams (http.ServerResponse) in a Node.js HTTP server. It reads the request body, parses it as JSON, and sends a response based on the data type or any parsing errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
const http = require('node:http');

const server = http.createServer((req, res) => {
  // `req` is an http.IncomingMessage, which is a readable stream.
  // `res` is an http.ServerResponse, which is a writable stream.

  let body = '';
  // Get the data as utf8 strings.
  // If an encoding is not set, Buffer objects will be received.
  req.setEncoding('utf8');

  // Readable streams emit 'data' events once a listener is added.
  req.on('data', (chunk) => {
    body += chunk;
  });

  // The 'end' event indicates that the entire body has been received.
  req.on('end', () => {
    try {
      const data = JSON.parse(body);
      // Write back something interesting to the user:
      res.write(typeof data);
      res.end();
    } catch (er) {
      // uh oh! bad json!
      res.statusCode = 400;
      return res.end(`error: ${er.message}`);
    }
  });
});

server.listen(1337);

// $ curl localhost:1337 -d "{}"
// object
// $ curl localhost:1337 -d "\"foo\""
// string
// $ curl localhost:1337 -d "not json"
// error: Unexpected token 'o', "not json" is not valid JSON
```

----------------------------------------

TITLE: Reading from File (RECOMMENDED - fs.open error handling) (JavaScript)
DESCRIPTION: Shows the recommended approach for reading from a file, directly using `fs.open` with the 'r' flag. It handles the `ENOENT` error code from `fs.open` to check if the file does not exist, avoiding the race condition of the `fs.access` check. Includes resource cleanup. Requires the `node:fs` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_39

LANGUAGE: JavaScript
CODE:
```
import { open, close } from 'node:fs';

open('myfile', 'r', (err, fd) => {
  if (err) {
    if (err.code === 'ENOENT') {
      console.error('myfile does not exist');
      return;
    }

    throw err;
  }

  try {
    readMyData(fd);
  } finally {
    close(fd, (err) => {
      if (err) throw err;
    });
  }
});
```

----------------------------------------

TITLE: Using ReadableStreamBYOBReader for Byte-Oriented Streams (MJS)
DESCRIPTION: This snippet provides a comprehensive example of using a `ReadableStreamBYOBReader` ('Bring Your Own Buffer'). It defines a custom `Source` class with `type = 'bytes'` that reads from a file using `fs/promises`. The `read` function then acquires a BYOB reader (`stream.getReader({ mode: 'byob' })`) and repeatedly calls `reader.read()` with a pre-allocated `Buffer` to efficiently read data into it, minimizing copies. Finally, it concatenates the chunks and logs the result.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_13

LANGUAGE: mjs
CODE:
```
```mjs
import {
  open,
} from 'node:fs/promises';

import {
  ReadableStream,
} from 'node:stream/web';

import { Buffer } from 'node:buffer';

class Source {
  type = 'bytes';
  autoAllocateChunkSize = 1024;

  async start(controller) {
    this.file = await open(new URL(import.meta.url));
    this.controller = controller;
  }

  async pull(controller) {
    const view = controller.byobRequest?.view;
    const {
      bytesRead,
    } = await this.file.read({
      buffer: view,
      offset: view.byteOffset,
      length: view.byteLength,
    });

    if (bytesRead === 0) {
      await this.file.close();
      this.controller.close();
    }
    controller.byobRequest.respond(bytesRead);
  }
}

const stream = new ReadableStream(new Source());

async function read(stream) {
  const reader = stream.getReader({ mode: 'byob' });

  const chunks = [];
  let result;
  do {
    result = await reader.read(Buffer.alloc(100));
    if (result.value !== undefined)
      chunks.push(Buffer.from(result.value));
  } while (!result.done);

  return Buffer.concat(chunks);
}

const data = await read(stream);
console.log(Buffer.from(data).toString());
```
```

----------------------------------------

TITLE: Loading Environment Variables from .env File - process.loadEnvFile()
DESCRIPTION: Demonstrates how to use `process.loadEnvFile()` to load environment variables from a `.env` file into `process.env`. The default path is './.env'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_93

LANGUAGE: cjs
CODE:
```
const { loadEnvFile } = require('node:process');
loadEnvFile();
```

LANGUAGE: mjs
CODE:
```
import { loadEnvFile } from 'node:process';
loadEnvFile();
```

----------------------------------------

TITLE: Environment Variable Object Example
DESCRIPTION: Illustrates the structure of the `process.env` object, which contains user environment variables. This object can be accessed to retrieve environment variables.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_56

LANGUAGE: js
CODE:
```
{ 
  TERM: 'xterm-256color',
  SHELL: '/usr/local/bin/bash',
  USER: 'maciej',
  PATH: '~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin',
  PWD: '/Users/maciej',
  EDITOR: 'vim',
  SHLVL: '1',
  HOME: '/Users/maciej',
  LOGNAME: 'maciej',
  _: '/usr/local/bin/node'
}
```

----------------------------------------

TITLE: Modifying process.env (CJS)
DESCRIPTION: Shows how to modify `process.env` using CommonJS modules. The `foo` variable is set and then printed to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_59

LANGUAGE: cjs
CODE:
```
const { env } = require('node:process');

env.foo = 'bar';
console.log(env.foo);
```

----------------------------------------

TITLE: Checking for Absolute Paths on POSIX
DESCRIPTION: Shows examples of `path.isAbsolute()` determining if various paths are absolute on POSIX systems. Paths starting with '/' are absolute, relative paths are not.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_28

LANGUAGE: js
CODE:
```
path.isAbsolute('/foo/bar');   // true
path.isAbsolute('/baz/..');    // true
path.isAbsolute('/baz/../..'); // true
path.isAbsolute('qux/');       // false
path.isAbsolute('.');          // false
```

----------------------------------------

TITLE: Starting Node.js in Watch Mode - Bash
DESCRIPTION: This snippet demonstrates how to start a Node.js application in watch mode using the `--watch` flag. When run, Node.js will monitor the entry point file and its dependencies for changes and automatically restart the process upon detection.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_52

LANGUAGE: Bash
CODE:
```
node --watch index.js
```

----------------------------------------

TITLE: Main Entry Point Export using Exports Field Only (JSON)
DESCRIPTION: Shows the recommended way for new packages to declare the main entry point using only the exports field in package.json. This approach ensures that only the defined entry point is accessible to importers; all other subpaths are blocked, enhancing encapsulation. Supported in all modern versions of Node.js, older runtimes may need both main and exports fields for compatibility.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_6

LANGUAGE: json
CODE:
```
{
  "exports": "./index.js"
}
```

----------------------------------------

TITLE: Using promisified fs.stat with async/await (MJS)
DESCRIPTION: This code snippet demonstrates how to use `util.promisify` with `async` and `await` to convert the `fs.stat` function into a promise-returning function. It imports `promisify` from `node:util` and `stat` from `node:fs`, then uses `promisify` to create `promisifiedStat`. The example defines an `async` function `callStat` that awaits the result of `promisifiedStat('.')` and then logs the `uid` property of the stats object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#_snippet_69

LANGUAGE: mjs
CODE:
```
import { promisify } from 'node:util';
import { stat } from 'node:fs';

const promisifiedStat = promisify(stat);

async function callStat() {
  const stats = await promisifiedStat('.');
  console.log(`This directory is owned by ${stats.uid}`);
}

callStat();
```

----------------------------------------

TITLE: Mocking setTimeout with TestContext mock.timers (node:test)
DESCRIPTION: Shows how to access timer mocking functionality via the `context.mock.timers` object available within a `node:test` test function's context. This approach offers the benefit of automatic restoration of original timer behavior when the test completes. Use `context.mock.timers.enable({ apis: ['setTimeout'] })` and `context.mock.timers.tick(milliseconds)`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_23

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();

  // Optionally choose what to mock
  context.mock.timers.enable({ apis: ['setTimeout'] });
  setTimeout(fn, 9999);
  assert.strictEqual(fn.mock.callCount(), 0);

  // Advance in time
  context.mock.timers.tick(9999);
  assert.strictEqual(fn.mock.callCount(), 1);
});
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
const { test } = require('node:test');

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();

  // Optionally choose what to mock
  context.mock.timers.enable({ apis: ['setTimeout'] });
  setTimeout(fn, 9999);
  assert.strictEqual(fn.mock.callCount(), 0);

  // Advance in time
  context.mock.timers.tick(9999);
  assert.strictEqual(fn.mock.callCount(), 1);
});
```

----------------------------------------

TITLE: Opening, Statting, and Closing File with Promises (Node.js)
DESCRIPTION: Illustrates opening a file using the promise-based `node:fs/promises` API in Node.js. Shows how to obtain a `FileHandle` object, retrieve statistics using `await file.stat()`, and ensure the handle is closed using `await file.close()` within a `try...finally` block.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_142

LANGUAGE: javascript
CODE:
```
import { open } from 'node:fs/promises';

let file;
try {
  file = await open('/open/some/file.txt', 'r');
  const stat = await file.stat();
  // use stat
} finally {
  await file.close();
}
```

----------------------------------------

TITLE: Combining Install Arguments with Version Constraints - npm CLI - Bash
DESCRIPTION: Demonstrates combining multiple package install arguments, with and without version constraints, in a single npm install command. Shows how npm can install several packages at once while respecting version ranges. Example installs three packages (with one requiring a specific semver), outputting all to node_modules.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_14

LANGUAGE: bash
CODE:
```
npm install sax@">=0.1.0 <0.2.0" bench supervisor
```

----------------------------------------

TITLE: Basic Node.js Debugger Usage
DESCRIPTION: Demonstrates basic usage of Node.js debugger with a simple script containing a global variable and setTimeout
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/debugger.md#2025-04-23_snippet_0

LANGUAGE: console
CODE:
```
$ node inspect myscript.js
< Debugger listening on ws://127.0.0.1:9229/621111f9-ffcb-4e82-b718-48a145fa5db8
< For help, see: https://nodejs.org/en/docs/inspector
<
connecting to 127.0.0.1:9229 ... ok
< Debugger attached.
<
 ok
Break on start in myscript.js:2
  1 // myscript.js
> 2 global.x = 5;
  3 setTimeout(() => {
  4   debugger;
debug>
```

----------------------------------------

TITLE: Printing command-line arguments (cjs)
DESCRIPTION: This code iterates over the `process.argv` array and prints each command-line argument along with its index. It demonstrates how to access the arguments passed when the Node.js process was launched.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_26

LANGUAGE: cjs
CODE:
```
const { argv } = require('node:process');

// print process.argv
argv.forEach((val, index) => {
  console.log(`${index}: ${val}`);
});
```

----------------------------------------

TITLE: Checking if a value is a number in JavaScript
DESCRIPTION: This snippet shows the standard JavaScript method to check if the type of a variable `arg` is 'number', serving as a replacement for the deprecated `util.isNumber()` function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/deprecations.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
typeof arg === 'number'
```

----------------------------------------

TITLE: Timers ESM Example
DESCRIPTION: This commit adds examples of how to use the timers module with ECMAScript Modules (ESM). These examples demonstrate how to use setTimeout, setInterval, setImmediate, and their respective promises-based APIs in an ESM context.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V23.md#_snippet_68

LANGUAGE: JavaScript
CODE:
```
import { setTimeout } from 'node:timers/promises';

async function main() {
  console.log('Before the timeout');
  await setTimeout(1000);
  console.log('After the timeout');
}

main();
```

----------------------------------------

TITLE: Executing a Node.js Script via Command Line (Shell)
DESCRIPTION: This snippet shows the standard command-line pattern for running a Node.js script. `node` invokes the runtime, `[options]` represents optional flags (detailed in the linked Command Line Options document), and `index.js` is the entry point script file to be executed. Requires Node.js installation.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/document_with_links.md#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
`node \[options\] index.js`
```

----------------------------------------

TITLE: Demonstrating Module Type Interpretation in Node.js
DESCRIPTION: This code snippet illustrates how Node.js interprets different files as ES modules or CommonJS based on package.json configuration and file extensions. It shows imports from various sources and how they are treated.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
// my-app.js, treated as an ES module because there is a package.json
// file in the same folder with "type": "module".

import './startup/init.js';
// Loaded as ES module since ./startup contains no package.json file,
// and therefore inherits the "type" value from one level up.

import 'commonjs-package';
// Loaded as CommonJS since ./node_modules/commonjs-package/package.json
// lacks a "type" field or contains "type": "commonjs".

import './node_modules/commonjs-package/index.js';
// Loaded as CommonJS since ./node_modules/commonjs-package/package.json
// lacks a "type" field or contains "type": "commonjs".
```

----------------------------------------

TITLE: Making an HTTP POST Request with http.request (CJS)
DESCRIPTION: Illustrates making an HTTP POST request using Node.js `http.request` in a CommonJS environment. It covers setting up request options, writing data to the request body, and managing response events and potential errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_78

LANGUAGE: cjs
CODE:
```
const http = require('node:http');

const postData = JSON.stringify({
  'msg': 'Hello World!',
});

const options = {
  hostname: 'www.google.com',
  port: 80,
  path: '/upload',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData),
  },
};

const req = http.request(options, (res) => {
  console.log(`STATUS: ${res.statusCode}`);
  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
  res.setEncoding('utf8');
  res.on('data', (chunk) => {
    console.log(`BODY: ${chunk}`);
  });
  res.on('end', () => {
    console.log('No more data in response.');
  });
});

req.on('error', (e) => {
  console.error(`problem with request: ${e.message}`);
});

// Write data to request body
req.write(postData);
req.end();
```

----------------------------------------

TITLE: Using console.log for Standard Output in Node.js (JavaScript)
DESCRIPTION: Illustrates printing messages to `stdout` using `console.log`. Explains that it handles multiple arguments similarly to `console.error`, using the first as the primary message and others for substitution via `util.format()` if format specifiers (like `%d`) are present. Otherwise, arguments are inspected with `util.inspect()` and joined. Output includes a newline.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_5

LANGUAGE: js
CODE:
```
const count = 5;
console.log('count: %d', count);
// Prints: count: 5, to stdout
console.log('count:', count);
// Prints: count: 5, to stdout
```

----------------------------------------

TITLE: Importing a Non-Exported Subpath Throws Error (JavaScript)
DESCRIPTION: Shows the result of trying to import an undefined or private subpath from a package that uses the exports field to restrict entry points. Node.js throws an ERR_PACKAGE_PATH_NOT_EXPORTED error as the subpath was not specified in the exports. Helps illustrate the security benefit of strict export field usage.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_10

LANGUAGE: js
CODE:
```
import submodule from 'es-module-package/private-module.js';
// Throws ERR_PACKAGE_PATH_NOT_EXPORTED
```

----------------------------------------

TITLE: Creating a Node.js Cluster Server (ES Modules)
DESCRIPTION: This snippet demonstrates how to create a cluster of Node.js processes using ES modules. It forks worker processes based on the number of available CPUs and sets up an HTTP server that shares port 8000 among all workers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import cluster from 'node:cluster';
import http from 'node:http';
import { availableParallelism } from 'node:os';
import process from 'node:process';

const numCPUs = availableParallelism();

if (cluster.isPrimary) {
  console.log(`Primary ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    console.log(`worker ${worker.process.pid} died`);
  });
} else {
  // Workers can share any TCP connection
  // In this case it is an HTTP server
  http.createServer((req, res) => {
    res.writeHead(200);
    res.end('hello world\n');
  }).listen(8000);

  console.log(`Worker ${process.pid} started`);
}
```

----------------------------------------

TITLE: Reducing a Readable Stream Concurrently Using Map in Node.js
DESCRIPTION: This code demonstrates how to perform a concurrent reduction on a Readable stream using the `map` and `reduce` methods. It reads the list of files in a directory, uses `map` with a concurrency of 2 to get the file stats concurrently, and then uses `reduce` to accumulate the file sizes. This approach allows for parallel processing of the file stats, improving performance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_58

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';
import { readdir, stat } from 'node:fs/promises';
import { join } from 'node:path';

const directoryPath = './src';
const filesInDir = await readdir(directoryPath);

const folderSize = await Readable.from(filesInDir)
  .map((file) => stat(join(directoryPath, file)), { concurrency: 2 })
  .reduce((totalSize, { size }) => totalSize + size, 0);

console.log(folderSize);
```

----------------------------------------

TITLE: Asynchronous fs.rm in Node.js
DESCRIPTION: Asynchronously removes files and directories, modeled after the POSIX rm utility. The callback is invoked upon completion with a possible error. This function supports recursive removal and retry logic on certain errors via options. Use { recursive: true, force: true } for behavior similar to 'rm -rf'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_72

LANGUAGE: JavaScript
CODE:
```
const fs = require('fs');

// Example: Remove a directory recursively
fs.rm('/path/to/item', { recursive: true, force: true }, (err) => {
  if (err) {
    console.error(err);
    return;
  }
  console.log('Item removed successfully');
});
```

----------------------------------------

TITLE: Copying a File with fsPromises.copyFile (JavaScript)
DESCRIPTION: Demonstrates how to asynchronously copy a single file using `fsPromises.copyFile`. The first example performs a basic copy, while the second shows how to use the `constants.COPYFILE_EXCL` flag to prevent overwriting the destination file if it already exists. Both examples use `await` within a `try...catch` block to handle the asynchronous operation and potential errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
import { copyFile, constants } from 'node:fs/promises';

try {
  await copyFile('source.txt', 'destination.txt');
  console.log('source.txt was copied to destination.txt');
} catch {
  console.error('The file could not be copied');
}

// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.
try {
  await copyFile('source.txt', 'destination.txt', constants.COPYFILE_EXCL);
  console.log('source.txt was copied to destination.txt');
} catch {
  console.error('The file could not be copied');
}
```

----------------------------------------

TITLE: Importing fs/promises Module (CommonJS)
DESCRIPTION: This snippet shows how to require the promise-based API of the Node.js file system module using CommonJS syntax. It assigns the module exports from 'node:fs/promises' to the variable 'fs'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_1

LANGUAGE: cjs
CODE:
```
const fs = require('node:fs/promises');
```

----------------------------------------

TITLE: Importing fs/promises Module (ESM)
DESCRIPTION: This snippet demonstrates how to import the promise-based API of the Node.js file system module using ES Module syntax. It imports all exports from 'node:fs/promises' into a namespace object named 'fs'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_0

LANGUAGE: mjs
CODE:
```
import * as fs from 'node:fs/promises';
```

----------------------------------------

TITLE: Defining Single Executable Shorthand in package.json (JSON)
DESCRIPTION: This `package.json` example demonstrates the shorthand syntax for the `bin` field. When the executable's command name should be the same as the package name (`my-program`), you can provide the path to the script directly as a string value for `bin`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_6

LANGUAGE: json
CODE:
```
{
  "name": "my-program",
  "version": "1.2.5",
  "bin": "path/to/program"
}
```

----------------------------------------

TITLE: Reading File Safely with fs.open (RECOMMENDED) - Node.js JavaScript
DESCRIPTION: The recommended approach for reading a file, using fs.open with the 'r' flag. This method attempts to open the file directly and handles the 'ENOENT' error code if the file does not exist, avoiding race conditions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_52

LANGUAGE: JavaScript
CODE:
```
import { open, close } from 'node:fs';

open('myfile', 'r', (err, fd) => {
  if (err) {
    if (err.code === 'ENOENT') {
      console.error('myfile does not exist');
      return;
    }

    throw err;
  }

  try {
    readMyData(fd);
  } finally {
    close(fd, (err) => {
      if (err) throw err;
    });
  }
});
```

----------------------------------------

TITLE: Transferring a ReadableStream via MessagePort (JavaScript)
DESCRIPTION: This example shows how a `ReadableStream` instance can be transferred between different execution contexts (like Web Workers or other windows/iframes in browsers, or worker_threads in Node.js) using a `MessageChannel`. The stream is sent via `port2.postMessage()` with the stream object included in the transferable list. The receiving port (`port1`) then gets the stream and uses its reader to read data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_8

LANGUAGE: js
CODE:
```
```js
const stream = new ReadableStream(getReadableSourceSomehow());

const { port1, port2 } = new MessageChannel();

port1.onmessage = ({ data }) => {
  data.getReader().read().then((chunk) => {
    console.log(chunk);
  });
};

port2.postMessage(stream, [stream]);
```
```

----------------------------------------

TITLE: Preventing crashes by listening to error events (ESM)
DESCRIPTION: This code demonstrates how to prevent Node.js from crashing by adding a listener for the 'error' event. This is a best practice to avoid unexpected application termination. The example uses ES modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_14

LANGUAGE: mjs
CODE:
```
import { EventEmitter } from 'node:events';
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on('error', (err) => {
  console.error('whoops! there was an error');
});
myEmitter.emit('error', new Error('whoops!'));
// Prints: whoops! there was an error
```

----------------------------------------

TITLE: Importing URL Module using ECMAScript Modules (ESM)
DESCRIPTION: This snippet demonstrates how to import the Node.js URL module using ECMAScript Modules (ESM) syntax with the 'node:' protocol prefix. This is the recommended approach for importing core modules in modern Node.js applications using ESM.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/document_with_esm_and_cjs_code_snippet.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import 'node:url';
```

----------------------------------------

TITLE: Generating and Signing with HMAC Key using Web Crypto API in JavaScript
DESCRIPTION: This snippet demonstrates how to generate an HMAC key, create a message, and sign it using the Web Crypto API's SubtleCrypto interface. It uses the HMAC algorithm with SHA-256 hash function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

(async function() {

  const key = await subtle.generateKey({
    name: 'HMAC',
    hash: 'SHA-256',
    length: 256,
  }, true, ['sign', 'verify']);

  const enc = new TextEncoder();
  const message = enc.encode('I love cupcakes');

  const digest = await subtle.sign({
    name: 'HMAC',
  }, key, message);

})();
```

----------------------------------------

TITLE: Reading from File (NOT RECOMMENDED - fs.access check) (JavaScript)
DESCRIPTION: Illustrates a problematic pattern where `fs.access` is used to check if a file exists before attempting to open it for reading. This introduces a race condition. It uses `fs.open` with the 'r' flag and includes basic error handling and resource cleanup. Requires the `node:fs` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_38

LANGUAGE: JavaScript
CODE:
```
import { access, open, close } from 'node:fs';
access('myfile', (err) => {
  if (err) {
    if (err.code === 'ENOENT') {
      console.error('myfile does not exist');
      return;
    }

    throw err;
  }

  open('myfile', 'r', (err, fd) => {
    if (err) throw err;

    try {
      readMyData(fd);
    } finally {
      close(fd, (err) => {
        if (err) throw err;
      });
    }
  });
});
```

----------------------------------------

TITLE: Checking for null or undefined in JavaScript
DESCRIPTION: This snippet provides the recommended way to check if a variable `arg` is strictly null or undefined, replacing the deprecated `util.isNullOrUndefined()` function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/deprecations.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
arg === null || arg === undefined
```

----------------------------------------

TITLE: Importing fs Module (ESM)
DESCRIPTION: This snippet demonstrates how to import the standard callback and synchronous APIs of the Node.js file system module using ES Module syntax. It imports all exports from 'node:fs' into a namespace object named 'fs'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_2

LANGUAGE: mjs
CODE:
```
import * as fs from 'node:fs';
```

----------------------------------------

TITLE: Importing 'url' Module with ES Modules (MJS)
DESCRIPTION: Shows how to import the built-in Node.js `url` module using the ES Module `import` statement with the `node:` prefix. This grants access to URL parsing and manipulation functions. Requires a Node.js environment supporting ES Modules.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/document_with_cjs_and_esm_code_snippet.md#2025-04-23_snippet_1

LANGUAGE: mjs
CODE:
```
import 'node:url';
```

----------------------------------------

TITLE: Defining a Scoped Package Dependency in package.json
DESCRIPTION: Illustrates how to specify a scoped package as a dependency in the package.json file, including the scope in the package name and version.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/scope.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
"dependencies": {
  "@myorg/mypackage": "^1.3.0"
}
```

----------------------------------------

TITLE: Basic Console Usage in Node.js
DESCRIPTION: Demonstrates basic usage of the global console object for logging messages and errors to stdout/stderr.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
console.log('hello world');
// Prints: hello world, to stdout
console.log('hello %s', 'world');
// Prints: hello world, to stdout
console.error(new Error('Whoops, something bad happened'));
// Prints error message and stack trace to stderr:
//   Error: Whoops, something bad happened
//     at [eval]:5:15
//     at Script.runInThisContext (node:vm:132:18)
//     at Object.runInThisContext (node:vm:309:38)
//     at node:internal/process/execution:77:19
//     at [eval]-wrapper:6:22
//     at evalScript (node:internal/process/execution:76:60)
//     at node:internal/main/eval_string:23:3

const name = 'Will Robinson';
console.warn(`Danger ${name}! Danger!`);
// Prints: Danger Will Robinson! Danger!, to stderr
```

----------------------------------------

TITLE: Basic HTTP Request with Undici
DESCRIPTION: Basic example showing how to make an HTTP request using Undici's request function. Demonstrates handling of status code, headers, trailers and body streaming.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import { request } from 'undici'

const {
  statusCode,
  headers,
  trailers,
  body
} = await request('http://localhost:3000/foo')

console.log('response received', statusCode)
console.log('headers', headers)

for await (const data of body) { console.log('data', data) }

console.log('trailers', trailers)
```

----------------------------------------

TITLE: Requiring an ES Module with Static Method Exports from CommonJS (Node.js - JavaScript)
DESCRIPTION: A CommonJS module requires an ES module that attaches a function as a static property to its default export. The required class is logged and the static method is accessed directly, providing compatibility with named exports for CommonJS consumers. Requires the ES module from the previous snippet.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_10

LANGUAGE: cjs
CODE:
```
const Point = require('./point.mjs');\nconsole.log(Point); // [class Point]\n\nconst { distance } = require('./point.mjs');\nconsole.log(distance); // [Function: distance]
```

----------------------------------------

TITLE: Using execFileSync with CommonJS in Node.js
DESCRIPTION: Demonstrates synchronously executing an external script ('my-script.sh') with arguments using `execFileSync` via CommonJS `require`. It captures stdout and stderr by setting `stdio` to 'pipe' and uses 'utf8' encoding. Includes error handling to differentiate between process spawn failures and non-zero exit codes, logging relevant output.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_31

LANGUAGE: cjs
CODE:
```
const { execFileSync } = require('node:child_process');

try {
  const stdout = execFileSync('my-script.sh', ['my-arg'], {
    // Capture stdout and stderr from child process. Overrides the
    // default behavior of streaming child stderr to the parent stderr
    stdio: 'pipe',

    // Use utf8 encoding for stdio pipes
    encoding: 'utf8',
  });

  console.log(stdout);
} catch (err) {
  if (err.code) {
    // Spawning child process failed
    console.error(err.code);
  } else {
    // Child was spawned but exited with non-zero exit code
    // Error contains any stdout and stderr from the child
    const { stdout, stderr } = err;

    console.error({ stdout, stderr });
  }
}
```

----------------------------------------

TITLE: Using afterEach hook in Node.js tests
DESCRIPTION: Demonstrates the application of the `afterEach` hook in a Node.js test suite. The provided function runs after *each* individual `it` test, even if the test fails, commonly used for per-test cleanup.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_58

LANGUAGE: javascript
CODE:
```
describe('tests', async () => {
  afterEach(() => console.log('finished running a test'));
  it('is a subtest', () => {
    assert.ok('some relevant assertion here');
  });
});
```

----------------------------------------

TITLE: Writable Stream with AbortSignal
DESCRIPTION: This example demonstrates how to use an `AbortSignal` to cancel operations on a writable stream.  Calling `abort` on the `AbortController` will behave the same way as calling `.destroy(new AbortError())` on the writable stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_81

LANGUAGE: javascript
CODE:
```
const { Writable } = require('node:stream');

const controller = new AbortController();
const myWritable = new Writable({
  write(chunk, encoding, callback) {
    // ...
  },
  writev(chunks, callback) {
    // ...
  },
  signal: controller.signal,
});
// Later, abort the operation closing the stream
controller.abort();
```

----------------------------------------

TITLE: Consuming Readable Stream with Async Iterator
DESCRIPTION: This code demonstrates how to consume a Readable stream using the async iterator (`Symbol.asyncIterator`). It reads the stream in chunks, concatenates them into a string, and prints the result. The stream is automatically destroyed if the loop terminates early.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_43

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs');

async function print(readable) {
  readable.setEncoding('utf8');
  let data = '';
  for await (const chunk of readable) {
    data += chunk;
  }
  console.log(data);
}

print(fs.createReadStream('file')).catch(console.error);
```

----------------------------------------

TITLE: Handling Promise Rejections with async/await
DESCRIPTION: Shows how to handle promise rejections using async/await and try/catch.  If the promise returned by fs.readFile rejects, the catch block will execute, allowing the error to be handled. Requires the node:fs/promises module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs/promises');

(async () => {
  let data;
  try {
    data = await fs.readFile('a file that does not exist');
  } catch (err) {
    console.error('There was an error reading the file!', err);
    return;
  }
  // Otherwise handle the data
})();
```

----------------------------------------

TITLE: Iterating over a ReadableStream using Async Iterator (MJS)
DESCRIPTION: This snippet demonstrates how to consume a `ReadableStream` using the async iterator protocol (`for await...of`). It imports `Buffer` to convert received chunks (assumed to be ArrayBuffers or similar) into strings for logging. The loop continues until the stream terminates, consuming all its chunks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_7

LANGUAGE: mjs
CODE:
```
```mjs
import { Buffer } from 'node:buffer';

const stream = new ReadableStream(getSomeSource());

for await (const chunk of stream)
  console.log(Buffer.from(chunk).toString());
```
```

----------------------------------------

TITLE: Using pbkdf2Sync for Key Derivation in Node.js
DESCRIPTION: Demonstrates the use of the pbkdf2Sync function to derive a key from a password and salt. The example shows both ECMAScript module (ESM) and CommonJS module usage.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_83

LANGUAGE: JavaScript
CODE:
```
const {
  pbkdf2Sync,
} = await import('node:crypto');

const key = pbkdf2Sync('secret', 'salt', 100000, 64, 'sha512');
console.log(key.toString('hex'));  // '3745e48...08d59ae'
```

LANGUAGE: JavaScript
CODE:
```
const {
  pbkdf2Sync,
} = require('node:crypto');

const key = pbkdf2Sync('secret', 'salt', 100000, 64, 'sha512');
console.log(key.toString('hex'));  // '3745e48...08d59ae'
```

----------------------------------------

TITLE: Basic Process Spawning in Node.js (CommonJS)
DESCRIPTION: Demonstrates how to spawn a child process to execute the 'ls' command using the CommonJS require syntax. Shows handling of stdout, stderr, and process completion events.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_0

LANGUAGE: cjs
CODE:
```
const { spawn } = require('node:child_process');
const ls = spawn('ls', ['-lh', '/usr']);

ls.stdout.on('data', (data) => {
  console.log(`stdout: ${data}`);
});

ls.stderr.on('data', (data) => {
  console.error(`stderr: ${data}`);
});

ls.on('close', (code) => {
  console.log(`child process exited with code ${code}`);
});
```

----------------------------------------

TITLE: Deprecated Buffer Constructor with ArrayBuffer
DESCRIPTION: This constructor is deprecated. Use Buffer.from(arrayBuffer[, byteOffset[, length]]) instead. It creates a new Buffer from an ArrayBuffer, SharedArrayBuffer, or the .buffer property of a TypedArray.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_161

LANGUAGE: javascript
CODE:
```
new Buffer(arrayBuffer[, byteOffset[, length]])
```

----------------------------------------

TITLE: HTTPS Request with Options (MJS)
DESCRIPTION: This example demonstrates a basic HTTPS request using the `https.request()` method with options specified in an object. It sets the hostname, port, path, and method, and then handles the response by logging the status code and headers, and writing the data to the standard output. It also handles potential errors during the request.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#_snippet_9

LANGUAGE: mjs
CODE:
```
import { request } from 'node:https';
import process from 'node:process';

const options = {
  hostname: 'encrypted.google.com',
  port: 443,
  path: '/',
  method: 'GET',
};

const req = request(options, (res) => {
  console.log('statusCode:', res.statusCode);
  console.log('headers:', res.headers);

  res.on('data', (d) => {
    process.stdout.write(d);
  });
});

req.on('error', (e) => {
  console.error(e);
});
req.end();
```

----------------------------------------

TITLE: Unwrapping Native Objects in Node-API (C)
DESCRIPTION: Retrieves the native C/C++ instance that was previously wrapped in a JavaScript object using `napi_wrap()`. This is commonly used in instance method or property accessor callbacks to get the native object associated with the `this` JavaScript object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#_snippet_183

LANGUAGE: C
CODE:
```
napi_status napi_unwrap(napi_env env,
                        napi_value js_object,
                        void** result);
```

----------------------------------------

TITLE: Establishing TLS Client Connection (MJS) in Node.js
DESCRIPTION: This MJS code snippet demonstrates how to establish a secure TLS client connection to a server listening on port 8000 using `tls.connect`. It imports necessary modules (`connect` from `node:tls`, `readFileSync` from `node:fs`, `stdin` from `node:process`), defines connection options (including optional client certificate authentication and server certificate validation), establishes the connection, logs connection status, pipes standard input to the socket, and handles incoming data and connection termination. Assumes a corresponding TLS echo server is running.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
```mjs
// Assumes an echo server that is listening on port 8000.
import { connect } from 'node:tls';
import { readFileSync } from 'node:fs';
import { stdin } from 'node:process';

const options = {
  // Necessary only if the server requires client certificate authentication.
  key: readFileSync('client-key.pem'),
  cert: readFileSync('client-cert.pem'),

  // Necessary only if the server uses a self-signed certificate.
  ca: [ readFileSync('server-cert.pem') ],

  // Necessary only if the server's cert isn't for "localhost".
  checkServerIdentity: () => { return null; },
};

const socket = connect(8000, options, () => {
  console.log('client connected',
              socket.authorized ? 'authorized' : 'unauthorized');
  stdin.pipe(socket);
  stdin.resume();
});
socket.setEncoding('utf8');
socket.on('data', (data) => {
  console.log(data);
});
socket.on('end', () => {
  console.log('server ends connection');
});
```
```

----------------------------------------

TITLE: Fixing vulnerabilities with npm audit
DESCRIPTION: Command to scan the project for vulnerabilities and automatically install any compatible updates to vulnerable dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
$ npm audit fix
```

----------------------------------------

TITLE: Inter-Thread Messaging with MessageChannel (CJS)
DESCRIPTION: This example demonstrates how to create a worker thread and establish a custom messaging channel using MessageChannel and MessagePort. The main thread sends a MessagePort to the worker thread, and the worker thread uses it to send a message back to the main thread.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#_snippet_41

LANGUAGE: cjs
CODE:
```
'use strict';

const assert = require('node:assert');
const {
  Worker, MessageChannel, MessagePort, isMainThread, parentPort,
} = require('node:worker_threads');
if (isMainThread) {
  const worker = new Worker(__filename);
  const subChannel = new MessageChannel();
  worker.postMessage({ hereIsYourPort: subChannel.port1 }, [subChannel.port1]);
  subChannel.port2.on('message', (value) => {
    console.log('received:', value);
  });
} else {
  parentPort.once('message', (value) => {
    assert(value.hereIsYourPort instanceof MessagePort);
    value.hereIsYourPort.postMessage('the worker is sending this');
    value.hereIsYourPort.close();
  });
}
```

----------------------------------------

TITLE: Setting Character Encoding for Readable Stream
DESCRIPTION: The `readable.setEncoding()` method sets the character encoding for data read from the Readable stream. This example shows how to set the encoding to 'utf8' and then assert that the received data chunks are strings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_39

LANGUAGE: javascript
CODE:
```
const readable = getReadableStreamSomehow();
readable.setEncoding('utf8');
readable.on('data', (chunk) => {
  assert.equal(typeof chunk, 'string');
  console.log('Got %d characters of string data:', chunk.length);
});
```

----------------------------------------

TITLE: Emitting events multiple times with EventEmitter in Node.js (ESM)
DESCRIPTION: This code demonstrates how to use the `eventEmitter.on()` method to register a listener that is invoked every time the named event is emitted. The example uses ES modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_8

LANGUAGE: mjs
CODE:
```
import { EventEmitter } from 'node:events';
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
let m = 0;
myEmitter.on('event', () => {
  console.log(++m);
});
myEmitter.emit('event');
// Prints: 1
myEmitter.emit('event');
// Prints: 2
```

----------------------------------------

TITLE: Basic NPM Package Installation Examples
DESCRIPTION: Various examples of installing packages with different flags and configurations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm install sax
npm install githubname/reponame
npm install @myorg/privatepackage
npm install node-tap --save-dev
npm install dtrace-provider --save-optional
npm install readable-stream --save-exact
npm install ansi-regex --save-bundle
```

----------------------------------------

TITLE: Emitting events only once with EventEmitter in Node.js (CJS)
DESCRIPTION: This code demonstrates how to use the `eventEmitter.once()` method to register a listener that is called at most once for a particular event. Once the event is emitted, the listener is unregistered and then called. The example uses CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_11

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
let m = 0;
myEmitter.once('event', () => {
  console.log(++m);
});
myEmitter.emit('event');
// Prints: 1
myEmitter.emit('event');
// Ignored
```

----------------------------------------

TITLE: Defining Pre and Post Scripts in package.json
DESCRIPTION: Example of how to define pre and post scripts for a custom 'compress' script in package.json. This demonstrates the execution order of pre, main, and post scripts.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/scripts.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "precompress": "{{ executes BEFORE the `compress` script }}",
    "compress": "{{ run command to compress files }}",
    "postcompress": "{{ executes AFTER `compress` script }}"
  }
}
```

----------------------------------------

TITLE: Changing the current working directory using process.chdir() in Node.js (ESM)
DESCRIPTION: This code snippet demonstrates how to change the current working directory of a Node.js process using the `process.chdir()` method. It imports `chdir` and `cwd` from the 'node:process' module, prints the starting directory, attempts to change the directory to '/tmp', and prints the new directory or catches and logs any errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_29

LANGUAGE: mjs
CODE:
```
import { chdir, cwd } from 'node:process';

console.log(`Starting directory: ${cwd()}`);
try {
  chdir('/tmp');
  console.log(`New directory: ${cwd()}`);
} catch (err) {
  console.error(`chdir: ${err}`);
}
```

----------------------------------------

TITLE: Configuring Project Package Manager in package.json
DESCRIPTION: JSON configuration showing how to specify a package manager version for a project using the packageManager field with version and hash validation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/corepack/README.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
  "packageManager": "yarn@3.2.3+sha224.953c8233f7a92884eee2de69a1b92d1f2ec1655e66d08071ba9a02fa"
}
```

----------------------------------------

TITLE: Defining package-lock.json Structure in JSON
DESCRIPTION: This snippet outlines the key fields in a package-lock.json file, including name, version, lockfileVersion, and the packages object. It demonstrates the structure used to describe package dependencies and their metadata.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-lock-json.md#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "package-name",
  "version": "package-version",
  "lockfileVersion": 3,
  "packages": {
    "": {
      "version": "package-version",
      "resolved": "package-url",
      "integrity": "sha512-hash",
      "dev": true,
      "optional": false,
      "devOptional": false,
      "inBundle": false,
      "hasInstallScript": false,
      "hasShrinkwrap": false,
      "bin": {},
      "license": "license-type",
      "engines": {},
      "dependencies": {},
      "optionalDependencies": {}
    }
  }
}
```

----------------------------------------

TITLE: Using queueMicrotask for deferred execution
DESCRIPTION: This example shows how to use queueMicrotask() to defer the execution of a callback function. The callback is executed after the current script has finished running.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_106

LANGUAGE: js
CODE:
```
console.log('start');
queueMicrotask(() => {
  console.log('microtask callback');
});
console.log('scheduled');
// Output:
// start
// scheduled
// microtask callback
```

----------------------------------------

TITLE: Capture Promise Rejections with EventEmitter (CJS)
DESCRIPTION: This code demonstrates how to capture promise rejections using the `captureRejections` option in the EventEmitter constructor. It shows two ways to handle rejections: by listening to the 'error' event or by defining a `Symbol.for('nodejs.rejection')` method on the EventEmitter instance.  The `captureRejections` option ensures that promise rejections are caught and routed to the appropriate handler.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_21

LANGUAGE: commonjs
CODE:
```
const EventEmitter = require('node:events');
const ee1 = new EventEmitter({ captureRejections: true });
ee1.on('something', async (value) => {
  throw new Error('kaboom');
});

ee1.on('error', console.log);

const ee2 = new EventEmitter({ captureRejections: true });
ee2.on('something', async (value) => {
  throw new Error('kaboom');
});

ee2[Symbol.for('nodejs.rejection')] = console.log;
```

----------------------------------------

TITLE: Verifying All Chunks in a Readable Stream using every in Node.js
DESCRIPTION: This code demonstrates how to use the `every` method on a Readable stream to verify that all chunks satisfy a given condition. It showcases both synchronous and asynchronous predicate functions, including an example with file size checks using `fs.promises.stat`. The concurrency option limits the number of concurrent asynchronous operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_52

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';
import { stat } from 'node:fs/promises';

// With a synchronous predicate.
await Readable.from([1, 2, 3, 4]).every((x) => x > 2); // false
await Readable.from([1, 2, 3, 4]).every((x) => x > 0); // true

// With an asynchronous predicate, making at most 2 file checks at a time.
const allBigFiles = await Readable.from([
  'file1',
  'file2',
  'file3',
]).every(async (fileName) => {
  const stats = await stat(fileName);
  return stats.size > 1024 * 1024;
}, { concurrency: 2 });
// `true` if all files in the list are bigger than 1MiB
console.log(allBigFiles);
console.log('done'); // Stream has finished
```

----------------------------------------

TITLE: Pausing and Resuming a PassThrough Stream
DESCRIPTION: This code demonstrates how a PassThrough stream's flowing state is affected by piping, unpiping, and attaching a 'data' event listener. It shows that even after unpiping and attaching a 'data' listener, the stream remains paused until `resume()` is explicitly called.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_26

LANGUAGE: javascript
CODE:
```
const { PassThrough, Writable } = require('node:stream');
const pass = new PassThrough();
const writable = new Writable();

pass.pipe(writable);
pass.unpipe(writable);
// readableFlowing is now false.

pass.on('data', (chunk) => { console.log(chunk.toString()); });
// readableFlowing is still false.
pass.write('ok');  // Will not emit 'data'.
pass.resume();     // Must be called to make stream emit 'data'.
// readableFlowing is now true.
```

----------------------------------------

TITLE: Collecting a Readable Stream into an Array with toArray
DESCRIPTION: This example demonstrates how to collect the contents of a Readable stream into an array using the `toArray` method. It shows a simple example with numbers and a more complex example that performs concurrent DNS queries using `map` and then collects the results into an array.  The `Resolver` class from `node:dns/promises` is used to resolve domain names.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_49

LANGUAGE: javascript
CODE:
```
import { Readable } from 'node:stream';
import { Resolver } from 'node:dns/promises';

await Readable.from([1, 2, 3, 4]).toArray(); // [1, 2, 3, 4]

// Make dns queries concurrently using .map and collect
// the results into an array using toArray
const dnsResults = await Readable.from([
  'nodejs.org',
  'openjsf.org',
  'www.linuxfoundation.org',
]).map(async (domain) => {
  const { address } = await resolver.resolve4(domain, { ttl: true });
  return address;
}, { concurrency: 2 }).toArray();
```

----------------------------------------

TITLE: Composing streams with stream.compose in Node.js
DESCRIPTION: This example demonstrates how to use stream.compose to combine a transform stream (removeSpaces) and an async generator function (toUpper) into a duplex stream. The resulting stream processes the input 'hello world', removes spaces, converts it to uppercase, and prints 'HELLOWORLD'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_64

LANGUAGE: mjs
CODE:
```
import { compose, Transform } from 'node:stream';

const removeSpaces = new Transform({
  transform(chunk, encoding, callback) {
    callback(null, String(chunk).replace(' ', ''));
  },
});

async function* toUpper(source) {
  for await (const chunk of source) {
    yield String(chunk).toUpperCase();
  }
}

let res = '';
for await (const buf of compose(removeSpaces, toUpper).end('hello world')) {
  res += buf;
}

console.log(res); // prints 'HELLOWORLD'
```

----------------------------------------

TITLE: Demonstrating Module Exports in Node.js
DESCRIPTION: Example showing how module exports work in a Node.js environment, specifically demonstrating how to export and modify properties.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_12

LANGUAGE: js
CODE:
```
console.log('a starting');
exports.done = false;
const b = require('./b.js');
console.log('in a, b.done = %j', b.done);
exports.done = true;
console.log('a done');
```

----------------------------------------

TITLE: Using events.once to listen for an event
DESCRIPTION: This code demonstrates how to use `events.once` to listen for a specific event on an EventEmitter. It shows how the Promise resolves with the event arguments and how errors emitted by the EventEmitter are caught. The example uses both ES modules and CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_56

LANGUAGE: mjs
CODE:
```
import { once, EventEmitter } from 'node:events';
import process from 'node:process';

const ee = new EventEmitter();

process.nextTick(() => {
  ee.emit('myevent', 42);
});

const [value] = await once(ee, 'myevent');
console.log(value);

const err = new Error('kaboom');
process.nextTick(() => {
  ee.emit('error', err);
});

try {
  await once(ee, 'myevent');
} catch (err) {
  console.error('error happened', err);
}
```

LANGUAGE: cjs
CODE:
```
const { once, EventEmitter } = require('node:events');

async function run() {
  const ee = new EventEmitter();

  process.nextTick(() => {
    ee.emit('myevent', 42);
  });

  const [value] = await once(ee, 'myevent');
  console.log(value);

  const err = new Error('kaboom');
  process.nextTick(() => {
    ee.emit('error', err);
  });

  try {
    await once(ee, 'myevent');
  } catch (err) {
    console.error('error happened', err);
  }
}

run();
```

----------------------------------------

TITLE: Restricting Package Exports to Feature Entry Points (JSON)
DESCRIPTION: Illustrates a stricter package.json exports configuration that exposes only select entry points and explicitly excludes internal features using null. This pattern enables tighter encapsulation, prevents unintended access to internal modules, and can be introduced in major version upgrades. Requires awareness that unlisted subpaths and those mapped to null will throw errors upon import.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{
  "name": "my-package",
  "exports": {
    ".": "./lib/index.js",
    "./feature/*.js": "./feature/*.js",
    "./feature/internal/*": null
  }
}
```

----------------------------------------

TITLE: Basic npm exec Command Syntax in Bash
DESCRIPTION: Shows the various syntax options for the npm exec command, including running with package names, using the --package flag, and using the -c flag for arbitrary commands. Also shows the 'x' alias.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-exec.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm exec -- <pkg>[@<version>] [args...]
npm exec --package=<pkg>[@<version>] -- <cmd> [args...]
npm exec -c '<cmd> [args...]'
npm exec --package=foo -c '<cmd> [args...]'

alias: x
```

----------------------------------------

TITLE: Compressing Stream with Gzip and Promise Pipeline (CJS)
DESCRIPTION: Compresses a file using Gzip and streams with the promise-based pipeline API for asynchronous data handling. It defines an async function to read from an input file, compress it, and write the compressed data to an output file, using promises for cleaner asynchronous code. Includes error handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#_snippet_4

LANGUAGE: cjs
CODE:
```
const {
  createReadStream,
  createWriteStream,
} = require('node:fs');
const process = require('node:process');
const { createGzip } = require('node:zlib');
const { pipeline } = require('node:stream/promises');

async function do_gzip(input, output) {
  const gzip = createGzip();
  const source = createReadStream(input);
  const destination = createWriteStream(output);
  await pipeline(source, gzip, destination);
}

do_gzip('input.txt', 'input.txt.gz')
  .catch((err) => {
    console.error('An error occurred:', err);
    process.exitCode = 1;
  });
```

----------------------------------------

TITLE: Correctly Ordering Promise FS Operations (MJS)
DESCRIPTION: Shows how to correctly sequence asynchronous file system operations using `async/await` with the promise-based `node:fs/promises` module in an ES module, ensuring `stat` runs after `rename` completes. Includes error handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_129

LANGUAGE: mjs
CODE:
```
import { rename, stat } from 'node:fs/promises';

const oldPath = '/tmp/hello';
const newPath = '/tmp/world';

try {
  await rename(oldPath, newPath);
  const stats = await stat(newPath);
  console.log(`stats: ${JSON.stringify(stats)}`);
} catch (error) {
  console.error('there was an error:', error.message);
}
```

----------------------------------------

TITLE: Capture Promise Rejections with EventEmitter (ESM)
DESCRIPTION: This code demonstrates how to capture promise rejections using the `captureRejections` option in the EventEmitter constructor. It shows two ways to handle rejections: by listening to the 'error' event or by defining a `Symbol.for('nodejs.rejection')` method on the EventEmitter instance.  The `captureRejections` option ensures that promise rejections are caught and routed to the appropriate handler.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_20

LANGUAGE: javascript
CODE:
```
import { EventEmitter } from 'node:events';
const ee1 = new EventEmitter({ captureRejections: true });
ee1.on('something', async (value) => {
  throw new Error('kaboom');
});

ee1.on('error', console.log);

const ee2 = new EventEmitter({ captureRejections: true });
ee2.on('something', async (value) => {
  throw new Error('kaboom');
});

ee2[Symbol.for('nodejs.rejection')] = console.log;
```

----------------------------------------

TITLE: HTTP Server Compression with Zlib, Brotli, and Zstd in Node.js
DESCRIPTION: This code creates an HTTP server that compresses responses based on the 'Accept-Encoding' header of the request. It uses zlib, Brotli, and Zstd to compress the 'index.html' file before sending it to the client. The server listens on port 1337.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
const zlib = require('node:zlib');
const http = require('node:http');
const fs = require('node:fs');
const { pipeline } = require('node:stream');

http.createServer((request, response) => {
  const raw = fs.createReadStream('index.html');
  // Store both a compressed and an uncompressed version of the resource.
  response.setHeader('Vary', 'Accept-Encoding');
  const acceptEncoding = request.headers['accept-encoding'] || '';

  const onError = (err) => {
    if (err) {
      // If an error occurs, there's not much we can do because
      // the server has already sent the 200 response code and
      // some amount of data has already been sent to the client.
      // The best we can do is terminate the response immediately
      // and log the error.
      response.end();
      console.error('An error occurred:', err);
    }
  };

  // Note: This is not a conformant accept-encoding parser.
  // See https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3
  if (/\bdeflate\b/.test(acceptEncoding)) {
    response.writeHead(200, { 'Content-Encoding': 'deflate' });
    pipeline(raw, zlib.createDeflate(), response, onError);
  } else if (/\bgzip\b/.test(acceptEncoding)) {
    response.writeHead(200, { 'Content-Encoding': 'gzip' });
    pipeline(raw, zlib.createGzip(), response, onError);
  } else if (/\bbr\b/.test(acceptEncoding)) {
    response.writeHead(200, { 'Content-Encoding': 'br' });
    pipeline(raw, zlib.createBrotliCompress(), response, onError);
  } else if (/\bzstd\b/.test(acceptEncoding)) {
    response.writeHead(200, { 'Content-Encoding': 'zstd' });
    pipeline(raw, zlib.createZstdCompress(), response, onError);
  } else {
    response.writeHead(200, {});
    pipeline(raw, response, onError);
  }
}).listen(1337);
```

----------------------------------------

TITLE: Basic GET Stream Request with Undici
DESCRIPTION: Example demonstrating how to use the stream method for efficient processing of responses. This approach avoids creating intermediate Readable streams by directly writing to a Writable stream.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'
import { Writable } from 'stream'

const server = createServer((request, response) => {
  response.end('Hello, World!')
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

const bufs = []

try {
  await client.stream({
    path: '/',
    method: 'GET',
    opaque: { bufs }
  }, ({ statusCode, headers, opaque: { bufs } }) => {
    console.log(`response received ${statusCode}`)
    console.log('headers', headers)
    return new Writable({
      write (chunk, encoding, callback) {
        bufs.push(chunk)
        callback()
      }
    })
  })

  console.log(Buffer.concat(bufs).toString('utf-8'))

  client.close()
  server.close()
} catch (error) {
  console.error(error)
}
```

----------------------------------------

TITLE: Aborting `exec` with AbortSignal (CJS)
DESCRIPTION: Demonstrates cancelling a child process initiated by `child_process.exec` using an `AbortController` and its associated `signal` in CommonJS. Passing the signal in the options allows `controller.abort()` to terminate the process, resulting in an `AbortError` being passed to the callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_10

LANGUAGE: cjs
CODE:
```
const { exec } = require('node:child_process');
const controller = new AbortController();
const { signal } = controller;
const child = exec('grep ssh', { signal }, (error) => {
  console.error(error); // an AbortError
});
controller.abort();
```

----------------------------------------

TITLE: Using devDependencies with Build Scripts
DESCRIPTION: Demonstrates how to use devDependencies for development tools like CoffeeScript and the prepare script to compile source code. This allows developers to publish pre-compiled code while maintaining a clear development workflow.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_21

LANGUAGE: json
CODE:
```
{
  "name": "@npm/ethopia-waza",
  "description": "a delightfully fruity coffee varietal",
  "version": "1.2.3",
  "devDependencies": {
    "coffee-script": "~1.6.3"
  },
  "scripts": {
    "prepare": "coffee -o lib/ -c src/waza.coffee"
  },
  "main": "lib/waza.js"
}
```

----------------------------------------

TITLE: Consuming all data from a Readable Stream
DESCRIPTION: This code snippet demonstrates how to listen for both the 'data' and 'end' events on a Readable stream. The 'data' event listener logs the length of each received chunk, while the 'end' event listener logs a message indicating that no more data will be received. The stream is assumed to be obtained via `getReadableStreamSomehow()`. This will switch the stream into flowing mode.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_28

LANGUAGE: javascript
CODE:
```
const readable = getReadableStreamSomehow();
readable.on('data', (chunk) => {
  console.log(`Received ${chunk.length} bytes of data.`);
});
readable.on('end', () => {
  console.log('There will be no more data.');
});
```

----------------------------------------

TITLE: Importing Named Exports from Built-in Modules
DESCRIPTION: Demonstrates importing a named export (readFile) from the `fs` module. It shows how to use the imported function to read a file asynchronously and handle potential errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import { readFile } from 'node:fs';
readFile('./foo.txt', (err, source) => {
  if (err) {
    console.error(err);
  } else {
    console.log(source);
  }
});
```

----------------------------------------

TITLE: Creating Subtests in Node.js
DESCRIPTION: Demonstrates how to create hierarchical subtests within a parent test using the `test()` method available on the test context object (`t`). Subtest failures cause the parent test to fail.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_2

LANGUAGE: js
CODE:
```
test('top level test', async (t) => {
  t.test('subtest 1', (t) => {
    assert.strictEqual(1, 1);
  });

  t.test('subtest 2', (t) => {
    assert.strictEqual(2, 2);
  });
});
```

----------------------------------------

TITLE: Reading a file using readableWebStream (CJS)
DESCRIPTION: Demonstrates how to open a file using `node:fs/promises.open`, get a `ReadableStream` from the `FileHandle` using `readableWebStream()`, iterate over the stream chunks, and finally close the file handle. Note that the stream does not automatically close the file handle.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_14

LANGUAGE: cjs
CODE:
```
const {
  open,
} = require('node:fs/promises');

(async () => {
  const file = await open('./some/file/to/read');

  for await (const chunk of file.readableWebStream())
    console.log(chunk);

  await file.close();
})();
```

----------------------------------------

TITLE: Fixing Stream Async Iterator Sample
DESCRIPTION: This snippet corrects an example related to asynchronous iteration over streams. The fix ensures that the example accurately demonstrates how to use async iterators with streams in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V13.md#_snippet_51

LANGUAGE: JavaScript
CODE:
```

```

----------------------------------------

TITLE: Creating HTTPS Server with File Certificates (mjs)
DESCRIPTION: This code creates an HTTPS server using file-based certificates (private-key.pem and certificate.pem). It imports the necessary modules, reads the certificate files, and sets up a basic server that responds with 'hello world'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#_snippet_3

LANGUAGE: mjs
CODE:
```
import { createServer } from 'node:https';
import { readFileSync } from 'node:fs';

const options = {
  key: readFileSync('private-key.pem'),
  cert: readFileSync('certificate.pem'),
};

createServer(options, (req, res) => {
  res.writeHead(200);
  res.end('hello world\n');
}).listen(8000);
```

----------------------------------------

TITLE: Assert Throws with Regular Expression - Node.js
DESCRIPTION: This example demonstrates how to use a regular expression to validate the error message thrown by a function using assert.throws. It checks if the error message matches the provided regular expression.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#_snippet_73

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert/strict';

assert.throws(
  () => {
    throw new Error('Wrong value');
  },
  /^Error: Wrong value$/,
);
```

----------------------------------------

TITLE: Incorrectly exiting a Node.js process
DESCRIPTION: This code snippet illustrates a misuse of process.exit() that can lead to truncated output.  It shows a scenario where process.exit() is called before asynchronous writes to process.stdout are completed, resulting in data loss. Avoid calling process.exit() directly if asynchronous operations are pending.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_72

LANGUAGE: mjs
CODE:
```
import { exit } from 'node:process';

// This is an example of what *not* to do:
if (someConditionNotMet()) {
  printUsageToStdout();
  exit(1);
}
```

----------------------------------------

TITLE: Passing arguments to a package.json script with Node.js --run (console)
DESCRIPTION: This example shows how to pass arguments to the script being executed by --run. Arguments placed after a double dash (--) are appended to the script command.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_50

LANGUAGE: console
CODE:
```
$ node --run test -- --verbose
```

----------------------------------------

TITLE: Spawning Detached Long-Running Process (CJS)
DESCRIPTION: This CommonJS snippet demonstrates how to spawn a Node.js child process (`child_program.js`) that can continue running even after the parent process exits. It uses `detached: true` to decouple the child and `stdio: 'ignore'` to prevent the child from inheriting the parent's stdio, which would otherwise keep it attached. `subprocess.unref()` is called to allow the parent process to exit independently of the child.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_25

LANGUAGE: cjs
CODE:
```
const { spawn } = require('node:child_process');
const process = require('node:process');

const subprocess = spawn(process.argv[0], ['child_program.js'], {
  detached: true,
  stdio: 'ignore',
});

subprocess.unref();
```

----------------------------------------

TITLE: Adding fsPromises.watch() to File System Module in Node.js
DESCRIPTION: This code introduces the `fsPromises.watch()` function to the Node.js file system module. This function allows asynchronous monitoring of file system changes using promises, providing a more modern alternative to the traditional callback-based `fs.watch()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V15.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
fsPromises.watch()
```

----------------------------------------

TITLE: Triggering All Mocked Timers with timers.runAll (Node.js)
DESCRIPTION: Demonstrates how to use `context.mock.timers.runAll()` to immediately execute all pending mocked timers. If `Date` is also mocked, it advances the mocked time to the furthest timer's execution time. The example shows that timers with the same timeout are executed in the order they were set.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_75

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';

test('runAll functions following the given order', (context) => {
  context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });
  const results = [];
  setTimeout(() => results.push(1), 9999);

  // Notice that if both timers have the same timeout,
  // the order of execution is guaranteed
  setTimeout(() => results.push(3), 8888);
  setTimeout(() => results.push(2), 8888);

  assert.deepStrictEqual(results, []);

  context.mock.timers.runAll();
  assert.deepStrictEqual(results, [3, 2, 1]);
  // The Date object is also advanced to the furthest timer's time
  assert.strictEqual(Date.now(), 9999);
});
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
const { test } = require('node:test');

test('runAll functions following the given order', (context) => {
  context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });
  const results = [];
  setTimeout(() => results.push(1), 9999);

  // Notice that if both timers have the same timeout,
  // the order of execution is guaranteed
  setTimeout(() => results.push(3), 8888);
  setTimeout(() => results.push(2), 8888);

  assert.deepStrictEqual(results, []);

  context.mock.timers.runAll();
  assert.deepStrictEqual(results, [3, 2, 1]);
  // The Date object is also advanced to the furthest timer's time
  assert.strictEqual(Date.now(), 9999);
});
```

----------------------------------------

TITLE: Promisifying fs.stat with util.promisify (MJS)
DESCRIPTION: This code snippet demonstrates how to use `util.promisify` to convert the `fs.stat` function, which uses a callback, into a promise-returning function. It imports `promisify` from `node:util` and `stat` from `node:fs`, then uses `promisify` to create `promisifiedStat`. The example then calls `promisifiedStat` with a path and uses `.then()` and `.catch()` to handle the promise's resolution or rejection.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#_snippet_67

LANGUAGE: mjs
CODE:
```
import { promisify } from 'node:util';
import { stat } from 'node:fs';

const promisifiedStat = promisify(stat);
promisifiedStat('.').then((stats) => {
  // Do something with `stats`
}).catch((error) => {
  // Handle the error.
});
```

----------------------------------------

TITLE: Piping streams with pipeline API
DESCRIPTION: This example demonstrates a basic pipeline that reads from a file, compresses it using gzip, and writes the compressed data to another file. It uses the pipeline function from node:stream/promises for simplified stream management and error handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_2

LANGUAGE: mjs
CODE:
```
import { pipeline } from 'node:stream/promises';
import { createReadStream, createWriteStream } from 'node:fs';
import { createGzip } from 'node:zlib';

await pipeline(
  createReadStream('archive.tar'),
  createGzip(),
  createWriteStream('archive.tar.gz'),
);
console.log('Pipeline succeeded.');
```

----------------------------------------

TITLE: Creating Event Emitter Module with module.exports in Node.js
DESCRIPTION: Demonstrates creating a module that exports an EventEmitter instance. After a timeout, the module emits a 'ready' event that can be listened to by consumers of the module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
const EventEmitter = require('node:events');

module.exports = new EventEmitter();

// Do some work, and after some time emit
// the 'ready' event from the module itself.
setTimeout(() => {
  module.exports.emit('ready');
}, 1000);
```

----------------------------------------

TITLE: Using Promisified `exec` with Async/Await (CJS)
DESCRIPTION: Shows how to use the promisified version of `child_process.exec` (using `util.promisify`) within an async function in CommonJS. It demonstrates awaiting the command execution and destructuring the resulting object to get `stdout` and `stderr`. Errors, including non-zero exit codes, result in a rejected promise containing `error`, `stdout`, and `stderr` properties.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_8

LANGUAGE: cjs
CODE:
```
const util = require('node:util');
const exec = util.promisify(require('node:child_process').exec);

async function lsExample() {
  const { stdout, stderr } = await exec('ls');
  console.log('stdout:', stdout);
  console.error('stderr:', stderr);
}
lsExample();
```

----------------------------------------

TITLE: Defining Explicit Package Exports for Backwards Compatibility (JSON)
DESCRIPTION: Shows a sample package.json configuration using the exports field to explicitly re-export all previously supported entry points (directories and files, including package.json). This approach ensures a smooth transition to using the exports field without introducing breaking changes, and helps clearly define the public interface. Ensures all entry paths are accessible as before, and requires Node.js v12+.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
  "name": "my-package",
  "exports": {
    ".": "./lib/index.js",
    "./lib": "./lib/index.js",
    "./lib/index": "./lib/index.js",
    "./lib/index.js": "./lib/index.js",
    "./feature": "./feature/index.js",
    "./feature/index": "./feature/index.js",
    "./feature/index.js": "./feature/index.js",
    "./package.json": "./package.json"
  }
}
```

----------------------------------------

TITLE: Basic Usage of SemVer Module in JavaScript
DESCRIPTION: Demonstrates importing the `semver` module in a Node.js application and using its core functions like `valid` (checking if a version string is valid), `clean` (removing leading/trailing whitespace and prefixes), `satisfies` (checking if a version meets range criteria), `gt`/`lt` (greater/less than comparisons), `minVersion` (finding the minimum satisfying version for a range), and `coerce` (attempting to convert a string into a valid SemVer version).
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/semver/README.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const semver = require('semver')

semver.valid('1.2.3') // '1.2.3'
semver.valid('a.b.c') // null
semver.clean('  =v1.2.3   ') // '1.2.3'
semver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true
semver.gt('1.2.3', '9.8.7') // false
semver.lt('1.2.3', '9.8.7') // true
semver.minVersion('>=1.0.0') // '1.0.0'
semver.valid(semver.coerce('v2')) // '2.0.0'
semver.valid(semver.coerce('42.6.7.9.3-alpha')) // '42.6.7'
```

----------------------------------------

TITLE: Importing the mkdirp API for Directory Creation - Node.js - JavaScript
DESCRIPTION: This code snippet imports the mkdirp API from the mkdirp module, enabling access to recursive directory creation functions in a Node.js environment. It is a necessary setup for both async and sync methods described elsewhere. Dependency: the 'mkdirp' npm module must be installed. No inputs or outputs exist for this snippet as it only demonstrates import semantics.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/node-gyp/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { mkdirp } from 'mkdirp'
```

----------------------------------------

TITLE: Promisified execFile with ES Modules
DESCRIPTION: ES Modules implementation of promisified execFile, converting the callback-based function into a Promise-based one using util.promisify.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_15

LANGUAGE: JavaScript
CODE:
```
import { promisify } from 'node:util';
import child_process from 'node:child_process';
const execFile = promisify(child_process.execFile);
async function getVersion() {
  const { stdout } = await execFile('node', ['--version']);
  console.log(stdout);
}
getVersion();
```

----------------------------------------

TITLE: Basic Package Exports Configuration in JSON
DESCRIPTION: Example of configuring package exports in package.json to define entry points and file mappings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_21

LANGUAGE: json
CODE:
```
{
  "name": "a-package",
  "exports": {
    ".": "./index.mjs",
    "./foo.js": "./foo.js"
  }
}
```

----------------------------------------

TITLE: Exporting Cryptographic Keys with subtle.exportKey in Node.js
DESCRIPTION: The exportKey method exports a CryptoKey into the specified format (raw, pkcs8, spki, or jwk). The method returns a Promise that resolves with either an ArrayBuffer or a JSON Web Key object. The key must be marked as extractable for the operation to succeed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_12

LANGUAGE: javascript
CODE:
```
subtle.exportKey(format, key)
```

----------------------------------------

TITLE: Timing Operations with console.time and console.timeEnd in Node.js (JavaScript)
DESCRIPTION: Demonstrates using `console.time(label)` to start a timer identified by a unique `label` (defaults to 'default') and `console.timeEnd(label)` to stop the corresponding timer and print the elapsed time to `stdout`. The elapsed time is automatically formatted into suitable units (e.g., ms, s).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_7

LANGUAGE: js
CODE:
```
console.time('bunch-of-stuff');
// Do a bunch of stuff.
console.timeEnd('bunch-of-stuff');
// Prints: bunch-of-stuff: 225.438ms
```

----------------------------------------

TITLE: Complete CLI Application with Subcommands
DESCRIPTION: More comprehensive example showing a multi-command CLI application with descriptions, version information, and action handlers. This demonstrates Commander's subcommand capabilities.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
const { Command } = require('commander');
const program = new Command();

program
  .name('string-util')
  .description('CLI to some JavaScript string utilities')
  .version('0.8.0');

program.command('split')
  .description('Split a string into substrings and display as an array')
  .argument('<string>', 'string to split')
  .option('--first', 'display just the first substring')
  .option('-s, --separator <char>', 'separator character', ',')
  .action((str, options) => {
    const limit = options.first ? 1 : undefined;
    console.log(str.split(options.separator, limit));
  });

program.parse();
```

----------------------------------------

TITLE: Setting the exit code for graceful termination
DESCRIPTION: This code snippet demonstrates the correct way to set the exit code for a Node.js process. Instead of calling process.exit() directly, it sets the process.exitCode property and allows the process to exit gracefully after all pending operations are completed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_75

LANGUAGE: cjs
CODE:
```
const process = require('node:process');

// How to properly set the exit code while letting
// the process exit gracefully.
if (someConditionNotMet()) {
  printUsageToStdout();
  process.exitCode = 1;
}
```

----------------------------------------

TITLE: Reading a file line by line using readLines (CJS)
DESCRIPTION: Demonstrates how to open a file using `node:fs/promises.open` and iterate over its lines using the `readLines()` method, which provides a convenience wrapper around a `readline` interface.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_16

LANGUAGE: cjs
CODE:
```
const { open } = require('node:fs/promises');

(async () => {
  const file = await open('./some/file/to/read');

  for await (const line of file.readLines()) {
    console.log(line);
  }
})();
```

----------------------------------------

TITLE: Importing Module with Top-level Await
DESCRIPTION: Demonstrates importing a module that uses top-level await. The imported value will be available after the promise resolves.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_20

LANGUAGE: js
CODE:
```
import { five } from './a.mjs';

console.log(five); // Logs `5`
```

----------------------------------------

TITLE: Importing the Node.js Test Runner Module
DESCRIPTION: Demonstrates how to import the `node:test` module using both ES Module syntax (`import`) and CommonJS syntax (`require`). The module must be accessed via the `node:` scheme.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_0

LANGUAGE: mjs
CODE:
```
import test from 'node:test';
```

LANGUAGE: cjs
CODE:
```
const test = require('node:test');
```

----------------------------------------

TITLE: Sending Messages Between Parent and Child Processes in Node.js
DESCRIPTION: Demonstrates how to use subprocess.send() to communicate between parent and child processes. The parent sends a message to the child, and the child sends a message back to the parent.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_39

LANGUAGE: javascript
CODE:
```
const { fork } = require('node:child_process');
const forkedProcess = fork(`${__dirname}/sub.js`);

forkedProcess.on('message', (message) => {
  console.log('PARENT got message:', message);
});

// Causes the child to print: CHILD got message: { hello: 'world' }
forkedProcess.send({ hello: 'world' });
```

LANGUAGE: javascript
CODE:
```
import { fork } from 'node:child_process';
const forkedProcess = fork(`${import.meta.dirname}/sub.js`);

forkedProcess.on('message', (message) => {
  console.log('PARENT got message:', message);
});

// Causes the child to print: CHILD got message: { hello: 'world' }
forkedProcess.send({ hello: 'world' });
```

LANGUAGE: javascript
CODE:
```
process.on('message', (message) => {
  console.log('CHILD got message:', message);
});

// Causes the parent to print: PARENT got message: { foo: 'bar', baz: null }
process.send({ foo: 'bar', baz: NaN });
```

----------------------------------------

TITLE: Creating and Adding Wrapped C++ Objects in Node.js - C++
DESCRIPTION: Implements Node.js addon entry points in C++ for creating and manipulating wrapped C++ objects. Exposes two methods: 'createObject' for instantiating new 'MyObject' instances, and 'add' for summing values of two wrapped objects by unwrapping them. Depends on Node.js and V8 headers, and requires correct initialization via NODE_MODULE. Expects wrapped object inputs and outputs numeric results; not thread-safe for use with worker threads.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_30

LANGUAGE: C++
CODE:
```
// addon.cc
#include <node.h>
#include <node_object_wrap.h>
#include "myobject.h"

namespace demo {

using v8::Context;
using v8::FunctionCallbackInfo;
using v8::Isolate;
using v8::Local;
using v8::Number;
using v8::Object;
using v8::String;
using v8::Value;

void CreateObject(const FunctionCallbackInfo<Value>& args) {
  MyObject::NewInstance(args);
}

void Add(const FunctionCallbackInfo<Value>& args) {
  Isolate* isolate = args.GetIsolate();
  Local<Context> context = isolate->GetCurrentContext();

  MyObject* obj1 = node::ObjectWrap::Unwrap<MyObject>(
      args[0]->ToObject(context).ToLocalChecked());
  MyObject* obj2 = node::ObjectWrap::Unwrap<MyObject>(
      args[1]->ToObject(context).ToLocalChecked());

  double sum = obj1->value() + obj2->value();
  args.GetReturnValue().Set(Number::New(isolate, sum));
}

void InitAll(Local<Object> exports) {
  MyObject::Init(exports->GetIsolate());

  NODE_SET_METHOD(exports, "createObject", CreateObject);
  NODE_SET_METHOD(exports, "add", Add);
}

NODE_MODULE(NODE_GYP_MODULE_NAME, InitAll)

}  // namespace demo
```

----------------------------------------

TITLE: Reading a file line by line using readLines (MJS)
DESCRIPTION: Demonstrates how to open a file using `node:fs/promises.open` and iterate over its lines using the `readLines()` method, which provides a convenience wrapper around a `readline` interface.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_15

LANGUAGE: mjs
CODE:
```
import { open } from 'node:fs/promises';

const file = await open('./some/file/to/read');

for await (const line of file.readLines()) {
  console.log(line);
}
```

----------------------------------------

TITLE: Emitting events with listeners (CJS)
DESCRIPTION: This code demonstrates how to emit events and attach multiple listeners to an event using the EventEmitter class in Node.js. It showcases the use of different listener functions and parameter handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_29

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');
const myEmitter = new EventEmitter();

// First listener
myEmitter.on('event', function firstListener() {
  console.log('Helloooo! first listener');
});
// Second listener
myEmitter.on('event', function secondListener(arg1, arg2) {
  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
});
// Third listener
myEmitter.on('event', function thirdListener(...args) {
  const parameters = args.join(', ');
  console.log(`event with parameters ${parameters} in third listener`);
});

console.log(myEmitter.listeners('event'));

myEmitter.emit('event', 1, 2, 3, 4, 5);

// Prints:
// [
//   [Function: firstListener],
//   [Function: secondListener],
//   [Function: thirdListener]
// ]
// Helloooo! first listener
// event with parameters 1, 2 in second listener
// event with parameters 1, 2, 3, 4, 5 in third listener
```

----------------------------------------

TITLE: Aborting `exec` with AbortSignal (MJS)
DESCRIPTION: Demonstrates cancelling a child process initiated by `child_process.exec` using an `AbortController` and its associated `signal` using ES Modules syntax. Passing the signal in the options allows `controller.abort()` to terminate the process, resulting in an `AbortError` being passed to the callback.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_11

LANGUAGE: mjs
CODE:
```
import { exec } from 'node:child_process';
const controller = new AbortController();
const { signal } = controller;
const child = exec('grep ssh', { signal }, (error) => {
  console.error(error); // an AbortError
});
controller.abort();
```

----------------------------------------

TITLE: Creating Cipheriv Instances with Node.js Crypto
DESCRIPTION: Creates and returns a `Cipheriv` stream object for encryption using a specified algorithm, key, and initialization vector (IV). The key and IV can be strings, Buffers, TypedArrays, DataViews, or KeyObjects. Stream options can be provided, and the `authTagLength` option is required for CCM/OCB modes and configurable for GCM/chacha20-poly1305 modes. IVs should be unpredictable and unique. Introduced in Node.js v0.1.94.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_58

LANGUAGE: javascript
CODE:
```
crypto.createCipheriv(algorithm, key, iv[, options])
```

----------------------------------------

TITLE: Running Tests in All Workspaces
DESCRIPTION: Shows how to run tests in all configured workspaces using the workspaces config.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-run-script.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
npm test --workspaces
```

----------------------------------------

TITLE: Initializing and Using mkdirp - Node.js - JavaScript (Promise API)
DESCRIPTION: This JavaScript code snippet demonstrates how to use the mkdirp package in a Node.js environment to create directories recursively using its promise-based API. The mkdirp function is required and invoked with a target directory path, returning a promise that resolves to the path of the first directory created. The example logs the result to the console, making it suitable for asynchronous workflows. Required dependency: the 'mkdirp' npm package. Input: directory path as a string. Output: promise resolving with the first created directory path or undefined if it exists.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
```js\nconst mkdirp = require('mkdirp')\n\n// return value is a Promise resolving to the first directory created\nmkdirp('/tmp/foo/bar/baz').then(made =>\n  console.log(`made directories, starting with ${made}`))\n```
```

----------------------------------------

TITLE: Filtering Readable Stream with Synchronous and Asynchronous Predicates in Node.js
DESCRIPTION: This code demonstrates how to use `readable.filter()` to filter data in a readable stream based on a predicate function. It showcases both synchronous and asynchronous predicates, including setting concurrency to manage asynchronous operations. The example uses `node:stream` for creating the stream and `node:dns/promises` for asynchronous DNS resolution and TTL checking.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_47

LANGUAGE: javascript
CODE:
```
import { Readable } from 'node:stream';
import { Resolver } from 'node:dns/promises';

// With a synchronous predicate.
for await (const chunk of Readable.from([1, 2, 3, 4]).filter((x) => x > 2)) {
  console.log(chunk); // 3, 4
}
// With an asynchronous predicate, making at most 2 queries at a time.
const resolver = new Resolver();
const dnsResults = Readable.from([
  'nodejs.org',
  'openjsf.org',
  'www.linuxfoundation.org',
]).filter(async (domain) => {
  const { address } = await resolver.resolve4(domain, { ttl: true });
  return address.ttl > 60;
}, { concurrency: 2 });
for await (const result of dnsResults) {
  // Logs domains with more than 60 seconds on the resolved dns record.
  console.log(result);
}
```

----------------------------------------

TITLE: Using before hook in Node.js tests
DESCRIPTION: Demonstrates how to use the `before` hook within a Node.js test suite. The provided function runs once before any tests in the `describe` block are executed, typically used for suite-level setup tasks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_55

LANGUAGE: javascript
CODE:
```
describe('tests', async () => {
  before(() => console.log('about to run some test'));
  it('is a subtest', () => {
    assert.ok('some relevant assertion here');
  });
});
```

----------------------------------------

TITLE: Running Module with Top-level Await
DESCRIPTION: Shows how to run a module that imports another module using top-level await.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_21

LANGUAGE: bash
CODE:
```
node b.mjs # works
```

----------------------------------------

TITLE: Action Handler Implementation in Commander.js
DESCRIPTION: Shows how to implement an action handler that processes command arguments and options, including debug mode and title formatting.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
program
  .argument('<name>')
  .option('-t, --title <honorific>', 'title to use before name')
  .option('-d, --debug', 'display some debugging')
  .action((name, options, command) => {
    if (options.debug) {
      console.error('Called %s with options %o', command.name(), options);
    }
    const title = options.title ? `${options.title} ` : '';
    console.log(`Thank-you ${title}${name}`);
  });
```

----------------------------------------

TITLE: Example fs.Stats Object (BigInt Values)
DESCRIPTION: An example of the structure and properties of an `fs.Stats` object when the `bigint` option is set to `true` in `fs.stat`, `fs.lstat`, or `fs.fstat`. Numeric properties are shown as `bigint`s, and additional nanosecond-precision properties (`atimeNs`, etc.) are included.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_124

LANGUAGE: console
CODE:
```
BigIntStats {
  dev: 2114n,
  ino: 48064969n,
  mode: 33188n,
  nlink: 1n,
  uid: 85n,
  gid: 100n,
  rdev: 0n,
  size: 527n,
  blksize: 4096n,
  blocks: 8n,
  atimeMs: 1318289051000n,
  mtimeMs: 1318289051000n,
  ctimeMs: 1318289051000n,
  birthtimeMs: 1318289051000n,
  atimeNs: 1318289051000000000n,
  mtimeNs: 1318289051000000000n,
  ctimeNs: 1318289051000000000n,
  birthtimeNs: 1318289051000000000n,
  atime: Mon, 10 Oct 2011 23:24:11 GMT,
  mtime: Mon, 10 Oct 2011 23:24:11 GMT,
  ctime: Mon, 10 Oct 2011 23:24:11 GMT,
  birthtime: Mon, 10 Oct 2011 23:24:11 GMT }
```

----------------------------------------

TITLE: Making an HTTP POST Request with http.request (MJS)
DESCRIPTION: Demonstrates how to perform an HTTP POST request using Node.js `http.request` in an ES module environment. It shows configuring request options, including hostname, port, path, method, and headers, writing data to the request body, and handling the response data and errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_77

LANGUAGE: mjs
CODE:
```
import http from 'node:http';
import { Buffer } from 'node:buffer';

const postData = JSON.stringify({
  'msg': 'Hello World!',
});

const options = {
  hostname: 'www.google.com',
  port: 80,
  path: '/upload',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData),
  },
};

const req = http.request(options, (res) => {
  console.log(`STATUS: ${res.statusCode}`);
  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
  res.setEncoding('utf8');
  res.on('data', (chunk) => {
    console.log(`BODY: ${chunk}`);
  });
  res.on('end', () => {
    console.log('No more data in response.');
  });
});

req.on('error', (e) => {
  console.error(`problem with request: ${e.message}`);
});

// Write data to request body
req.write(postData);
req.end();
```

----------------------------------------

TITLE: Using path.win32.basename for Consistent Windows Path Handling
DESCRIPTION: Shows how to use `path.win32.basename()` to ensure consistent handling of Windows-style paths, regardless of the underlying operating system. This method always treats backslashes as separators.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_4

LANGUAGE: js
CODE:
```
path.win32.basename('C:\\temp\\myfile.html');
// Returns: 'myfile.html'
```

----------------------------------------

TITLE: Decoding Buffer to String with Encoding in Node.js
DESCRIPTION: Demonstrates how to decode a Buffer object to a string using various encodings, start, and end offsets. It shows how to convert a buffer to a UTF-8 string and a hexadecimal string, and how to extract substrings based on byte offsets.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_130

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf1 = Buffer.allocUnsafe(26);

for (let i = 0; i < 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf1[i] = i + 97;
}

console.log(buf1.toString('utf8'));
// Prints: abcdefghijklmnopqrstuvwxyz
console.log(buf1.toString('utf8', 0, 5));
// Prints: abcde

const buf2 = Buffer.from('tést');

console.log(buf2.toString('hex'));
// Prints: 74c3a97374
console.log(buf2.toString('utf8', 0, 3));
// Prints: té
console.log(buf2.toString(undefined, 0, 3));
// Prints: té
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf1 = Buffer.allocUnsafe(26);

for (let i = 0; i < 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf1[i] = i + 97;
}

console.log(buf1.toString('utf8'));
// Prints: abcdefghijklmnopqrstuvwxyz
console.log(buf1.toString('utf8', 0, 5));
// Prints: abcde

const buf2 = Buffer.from('tést');

console.log(buf2.toString('hex'));
// Prints: 74c3a97374
console.log(buf2.toString('utf8', 0, 3));
// Prints: té
console.log(buf2.toString(undefined, 0, 3));
// Prints: té
```

----------------------------------------

TITLE: Importing EventEmitter (ESM)
DESCRIPTION: This code shows how to import the EventEmitter class from the 'node:events' module in ECMAScript Modules (ESM).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_24

LANGUAGE: javascript
CODE:
```
import { EventEmitter } from 'node:events';
```

----------------------------------------

TITLE: Handling SIGINT event in readline
DESCRIPTION: This code snippet demonstrates how to listen for the 'SIGINT' event, which is emitted when the user presses Ctrl+C. The example shows how to ask the user for confirmation before pausing the readline stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#_snippet_9

LANGUAGE: javascript
CODE:
```
rl.on('SIGINT', () => {
  rl.question('Are you sure you want to exit? ', (answer) => {
    if (answer.match(/^y(es)?$/i)) rl.pause();
  });
});
```

----------------------------------------

TITLE: Requiring and Using a Local CommonJS Module in Node.js
DESCRIPTION: This snippet (`foo.js`) demonstrates how to use the `require()` function in Node.js to import a local CommonJS module (`./circle.js`). It then calls the `area` function exported by the `circle.js` module with a specific radius and logs the result.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_0

LANGUAGE: js
CODE:
```
const circle = require('./circle.js');
console.log(`The area of a circle of radius 4 is ${circle.area(4)}`);
```

----------------------------------------

TITLE: Using AbortController with child_process.fork() in ES Modules
DESCRIPTION: Demonstrates how to use AbortController to manage a forked child process using ES Modules format. The example shows the same functionality as the CommonJS version but with ESM import syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
import { fork } from 'node:child_process';
import process from 'node:process';

if (process.argv[2] === 'child') {
  setTimeout(() => {
    console.log(`Hello from ${process.argv[2]}!`);
  }, 1_000);
} else {
  const controller = new AbortController();
  const { signal } = controller;
  const child = fork(import.meta.url, ['child'], { signal });
  child.on('error', (err) => {
    // This will be called with err being an AbortError if the controller aborts
  });
  controller.abort(); // Stops the child process
}
```

----------------------------------------

TITLE: Emitting events multiple times with EventEmitter in Node.js (CJS)
DESCRIPTION: This code demonstrates how to use the `eventEmitter.on()` method to register a listener that is invoked every time the named event is emitted. The example uses CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_9

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
let m = 0;
myEmitter.on('event', () => {
  console.log(++m);
});
myEmitter.emit('event');
// Prints: 1
myEmitter.emit('event');
// Prints: 2
```

----------------------------------------

TITLE: Manipulating URLSearchParams in JavaScript
DESCRIPTION: Demonstrates how to use `URLSearchParams` to parse, modify, and serialize URL query strings. It covers creating a URL object, appending, deleting, and setting parameters, and converting the parameters back to a string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_36

LANGUAGE: javascript
CODE:
```
const myURL = new URL('https://example.org/?abc=123');
console.log(myURL.searchParams.get('abc'));
// Prints 123

myURL.searchParams.append('abc', 'xyz');
console.log(myURL.href);
// Prints https://example.org/?abc=123&abc=xyz

myURL.searchParams.delete('abc');
myURL.searchParams.set('a', 'b');
console.log(myURL.href);
// Prints https://example.org/?a=b

const newSearchParams = new URLSearchParams(myURL.searchParams);
// The above is equivalent to
// const newSearchParams = new URLSearchParams(myURL.search);

newSearchParams.append('a', 'c');
console.log(myURL.href);
// Prints https://example.org/?a=b
console.log(newSearchParams.toString());
// Prints a=b&a=c

// newSearchParams.toString() is implicitly called
myURL.search = newSearchParams;
console.log(myURL.href);
// Prints https://example.org/?a=b&a=c
newSearchParams.delete('a');
console.log(myURL.href);
// Prints https://example.org/?a=b&a=c
```

----------------------------------------

TITLE: Resolving URLs using WHATWG URL API
DESCRIPTION: This code snippet demonstrates how to resolve URLs using the WHATWG URL API, providing an alternative to the deprecated `url.resolve()` method. It creates a `resolve` function that takes a base URL and a target URL, and returns the resolved URL string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_70

LANGUAGE: JavaScript
CODE:
```
function resolve(from, to) {
  const resolvedUrl = new URL(to, new URL(from, 'resolve://'));
  if (resolvedUrl.protocol === 'resolve:') {
    // `from` is a relative URL.
    const { pathname, search, hash } = resolvedUrl;
    return pathname + search + hash;
  }
  return resolvedUrl.toString();
}

resolve('/one/two/three', 'four');         // '/one/two/four'
resolve('http://example.com/', '/one');    // 'http://example.com/one'
resolve('http://example.com/one', '/two'); // 'http://example.com/two'
```

----------------------------------------

TITLE: Iterating Directory Entries with fsPromises.opendir (Node.js mjs)
DESCRIPTION: This snippet shows how to use `fsPromises.opendir` to open a directory asynchronously and then iterate over its contents using an async iterator. It logs the name of each directory entry (`dirent.name`). Includes basic error handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_24

LANGUAGE: mjs
CODE:
```
import { opendir } from 'node:fs/promises';

try {
  const dir = await opendir('./');
  for await (const dirent of dir)
    console.log(dirent.name);
} catch (err) {
  console.error(err);
}
```

----------------------------------------

TITLE: Strict Equality Assertion - ES Module
DESCRIPTION: This snippet demonstrates the usage of `assert.strictEqual` to assert strict equality between different values in ES module format. It showcases examples with numbers, strings, and custom error messages.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#_snippet_67

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert/strict';

assert.strictEqual(1, 2);
// AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:
//
// 1 !== 2

assert.strictEqual(1, 1);
// OK

assert.strictEqual('Hello foobar', 'Hello World!');
// AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:
// + actual - expected
//
// + 'Hello foobar'
// - 'Hello World!'
//          ^

const apples = 1;
const oranges = 2;
assert.strictEqual(apples, oranges, `apples ${apples} !== oranges ${oranges}`);
// AssertionError [ERR_ASSERTION]: apples 1 !== oranges 2

assert.strictEqual(1, '1', new TypeError('Inputs are not identical'));
// TypeError: Inputs are not identical
```

----------------------------------------

TITLE: Finding Files with fs.glob (Node.js MJS)
DESCRIPTION: Shows how to use the asynchronous `fs.glob` function with a callback in a Node.js ES module environment to find files matching a specified glob pattern and log the resulting array of matches.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_58

LANGUAGE: mjs
CODE:
```
import { glob } from 'node:fs';

glob('**/*.js', (err, matches) => {
  if (err) throw err;
  console.log(matches);
});
```

----------------------------------------

TITLE: Initializing and Emitting Events with EventEmitter (ESM)
DESCRIPTION: This code demonstrates how to create a class that extends `EventEmitter`, register an event listener using `on()`, and emit an event using `emit()`. The listener function is executed synchronously when the event is emitted. This example uses ES modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_0

LANGUAGE: mjs
CODE:
```
import { EventEmitter } from 'node:events';

class MyEmitter extends EventEmitter {}

const myEmitter = new MyEmitter();
myEmitter.on('event', () => {
  console.log('an event occurred!');
});
myEmitter.emit('event');
```

----------------------------------------

TITLE: Setting Single Header in Node.js HTTP Response (JS)
DESCRIPTION: Demonstrates setting a single header value using `response.setHeader`. This replaces the value if the header already exists. Non-string values are stored as is but converted to strings for network transmission.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_49

LANGUAGE: JavaScript
CODE:
```
response.setHeader('Content-Type', 'text/html');
```

----------------------------------------

TITLE: Implementing CCM Mode Encryption/Decryption in Node.js (ESM)
DESCRIPTION: Demonstrates CCM mode encryption and decryption using the Node.js crypto module with ES modules. Shows handling of authentication tags, additional authenticated data (AAD), and proper error handling for authentication failures.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_96

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';
const {
  createCipheriv,
  createDecipheriv,
  randomBytes,
} = await import('node:crypto');

const key = 'keykeykeykeykeykeykeykey';
const nonce = randomBytes(12);

const aad = Buffer.from('0123456789', 'hex');

const cipher = createCipheriv('aes-192-ccm', key, nonce, {
  authTagLength: 16,
});
const plaintext = 'Hello world';
cipher.setAAD(aad, {
  plaintextLength: Buffer.byteLength(plaintext),
});
const ciphertext = cipher.update(plaintext, 'utf8');
cipher.final();
const tag = cipher.getAuthTag();

// Now transmit { ciphertext, nonce, tag }.

const decipher = createDecipheriv('aes-192-ccm', key, nonce, {
  authTagLength: 16,
});
decipher.setAuthTag(tag);
decipher.setAAD(aad, {
  plaintextLength: ciphertext.length,
});
const receivedPlaintext = decipher.update(ciphertext, null, 'utf8');

try {
  decipher.final();
} catch (err) {
  throw new Error('Authentication failed!', { cause: err });
}

console.log(receivedPlaintext);
```

----------------------------------------

TITLE: Handling Close and Exit Events with child_process.spawn in CommonJS
DESCRIPTION: Example demonstrating how to spawn a child process using the spawn method in CommonJS format, and how to handle the 'close' and 'exit' events along with stdout data. The example shows the distinction between 'close' and 'exit' events.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_33

LANGUAGE: JavaScript
CODE:
```
const { spawn } = require('node:child_process');
const ls = spawn('ls', ['-lh', '/usr']);

ls.stdout.on('data', (data) => {
  console.log(`stdout: ${data}`);
});

ls.on('close', (code) => {
  console.log(`child process close all stdio with code ${code}`);
});

ls.on('exit', (code) => {
  console.log(`child process exited with code ${code}`);
});
```

----------------------------------------

TITLE: Creating HTTP Server with Request Event (CJS)
DESCRIPTION: Demonstrates creating a basic HTTP server using `http.createServer` without an inline listener, then attaching a listener to the `'request'` event in CommonJS syntax. The event handler processes requests and sends a JSON response.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_75

LANGUAGE: cjs
CODE:
```
const http = require('node:http');

// Create a local server to receive data from
const server = http.createServer();

// Listen to the request event
server.on('request', (request, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
```

----------------------------------------

TITLE: Writable Stream Class Constructor (ES6)
DESCRIPTION: This example demonstrates how to create a custom writable stream using ES6 class syntax, extending the `Writable` class from the `stream` module. It shows the basic constructor setup, calling the `super()` constructor with options.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_78

LANGUAGE: javascript
CODE:
```
const { Writable } = require('node:stream');

class MyWritable extends Writable {
  constructor(options) {
    // Calls the stream.Writable() constructor.
    super(options);
    // ...
  }
}
```

----------------------------------------

TITLE: Heap Profiling with Inspector Session (Promises API)
DESCRIPTION: Demonstrates how to use the Heap Profiler through the inspector session using the Promises API.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/inspector.md#2025-04-23_snippet_4

LANGUAGE: mjs
CODE:
```
import { Session } from 'node:inspector/promises';
import fs from 'node:fs';
const session = new Session();

const fd = fs.openSync('profile.heapsnapshot', 'w');

session.connect();

session.on('HeapProfiler.addHeapSnapshotChunk', (m) => {
  fs.writeSync(fd, m.params.chunk);
});

const result = await session.post('HeapProfiler.takeHeapSnapshot', null);
console.log('HeapProfiler.takeHeapSnapshot done:', result);
session.disconnect();
fs.closeSync(fd);
```

----------------------------------------

TITLE: Using setTimeout Promise (Node.js Timers - MJS/CJS)
DESCRIPTION: Demonstrates basic usage of `timersPromises.setTimeout`. It returns a promise that resolves after the specified `delay` (milliseconds) with the given `value`. It can be used with `await` or `.then()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/timers.md#_snippet_3

LANGUAGE: mjs
CODE:
```
import {
  setTimeout,
} from 'node:timers/promises';

const res = await setTimeout(100, 'result');

console.log(res);  // Prints 'result'
```

LANGUAGE: cjs
CODE:
```
const {
  setTimeout,
} = require('node:timers/promises');

setTimeout(100, 'result').then((res) => {
  console.log(res);  // Prints 'result'
});
```

----------------------------------------

TITLE: Iterating a Readable Stream with forEach
DESCRIPTION: This example demonstrates how to iterate over a Readable stream using the `forEach` method. It showcases both synchronous and asynchronous predicate functions, including concurrent processing using the `concurrency` option. The stream is created using `Readable.from` and processes DNS resolutions concurrently.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_48

LANGUAGE: javascript
CODE:
```
import { Readable } from 'node:stream';
import { Resolver } from 'node:dns/promises';

// With a synchronous predicate.
for await (const chunk of Readable.from([1, 2, 3, 4]).filter((x) => x > 2)) {
  console.log(chunk); // 3, 4
}
// With an asynchronous predicate, making at most 2 queries at a time.
const resolver = new Resolver();
const dnsResults = Readable.from([
  'nodejs.org',
  'openjsf.org',
  'www.linuxfoundation.org',
]).map(async (domain) => {
  const { address } = await resolver.resolve4(domain, { ttl: true });
  return address;
}, { concurrency: 2 });
await dnsResults.forEach((result) => {
  // Logs result, similar to `for await (const result of dnsResults)`
  console.log(result);
});
console.log('done'); // Stream has finished
```

----------------------------------------

TITLE: Running Node.js Tests (CJS)
DESCRIPTION: This snippet shows how to execute a test file (`./tests/test.js`) using the `node:test` module in a CommonJS environment. It sets up the test runner to use the `tap` reporter, direct output to standard output, and ensure the process exits with code 1 if any test fails.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_43

LANGUAGE: cjs
CODE:
```
const { tap } = require('node:test/reporters');
const { run } = require('node:test');
const path = require('node:path');

run({ files: [path.resolve('./tests/test.js')] })
 .on('test:fail', () => {
   process.exitCode = 1;
 })
 .compose(tap)
 .pipe(process.stdout);
```

----------------------------------------

TITLE: Uninstalling a Package with npm in Bash
DESCRIPTION: This example demonstrates how to uninstall the 'sax' package using npm. This command will remove the package and update package.json, npm-shrinkwrap.json, and package-lock.json files accordingly.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-uninstall.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm uninstall sax
```

----------------------------------------

TITLE: Hashing Data with Piped Streams - Node.js Crypto (JavaScript ESM)
DESCRIPTION: This example illustrates hashing the contents of a file using piped streams in ESM format. It uses async 'import' for the 'node:crypto' module and imports streams from 'node:fs' and 'node:process'. File contents are piped through a SHA-256 hash, set to hex encoding, and written to stdout. Prerequisites include Node.js with ESM support and the referenced modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_28

LANGUAGE: JavaScript
CODE:
```
import { createReadStream } from 'node:fs';
import { stdout } from 'node:process';
const { createHash } = await import('node:crypto');

const hash = createHash('sha256');

const input = createReadStream('test.js');
input.pipe(hash).setEncoding('hex').pipe(stdout);
```

----------------------------------------

TITLE: Encrypting a File Using Cipheriv and Piped Streams in Node.js (ES Modules)
DESCRIPTION: This example demonstrates how to encrypt a file using Cipheriv and piped streams in Node.js. It reads from an input file, encrypts the data, and writes the encrypted content to an output file using the pipeline function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_8

LANGUAGE: JavaScript
CODE:
```
import {
  createReadStream,
  createWriteStream,
} from 'node:fs';

import {
  pipeline,
} from 'node:stream';

const {
  scrypt,
  randomFill,
  createCipheriv,
} = await import('node:crypto');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';

// First, we'll generate the key. The key length is dependent on the algorithm.
// In this case for aes192, it is 24 bytes (192 bits).
scrypt(password, 'salt', 24, (err, key) => {
  if (err) throw err;
  // Then, we'll generate a random initialization vector
  randomFill(new Uint8Array(16), (err, iv) => {
    if (err) throw err;

    const cipher = createCipheriv(algorithm, key, iv);

    const input = createReadStream('test.js');
    const output = createWriteStream('test.enc');

    pipeline(input, cipher, output, (err) => {
      if (err) throw err;
    });
  });
});
```

----------------------------------------

TITLE: URL Pattern Matching
DESCRIPTION: Demonstrates how to create a URLPattern and use it to match against a URL. The example shows both the exec and test methods of the URLPattern class.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_33

LANGUAGE: javascript
CODE:
```
const myPattern = new URLPattern('https://nodejs.org/docs/latest/api/*.html');
console.log(myPattern.exec('https://nodejs.org/docs/latest/api/dns.html'));
// Prints:
// {
//  "hash": { "groups": {  "0": "" },  "input": "" },
//  "hostname": { "groups": {}, "input": "nodejs.org" },
//  "inputs": [
//    "https://nodejs.org/docs/latest/api/dns.html"
//  ],
//  "password": { "groups": { "0": "" }, "input": "" },
//  "pathname": { "groups": { "0": "dns" }, "input": "/docs/latest/api/dns.html" },
//  "port": { "groups": {}, "input": "" },
//  "protocol": { "groups": {}, "input": "https" },
//  "search": { "groups": { "0": "" }, "input": "" },
//  "username": { "groups": { "0": "" }, "input": "" }
// }

console.log(myPattern.test('https://nodejs.org/docs/latest/api/dns.html'));
// Prints: true
```

----------------------------------------

TITLE: Properly Consuming Response Body in Fetch API
DESCRIPTION: This snippet shows the correct way to consume the response body when using the fetch API, emphasizing the importance of iterating through the body stream to prevent resource leaks.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
// Do
const { body, headers } = await fetch(url);
for await (const chunk of body) {
  // force consumption of body
}

// Do not
const { headers } = await fetch(url);
```

----------------------------------------

TITLE: Correct Type Import Syntax for Node.js Type Stripping
DESCRIPTION: Example of TypeScript import statements that use the 'type' keyword correctly, which is supported by the built-in type stripping feature.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/typescript.md#2025-04-23_snippet_6

LANGUAGE: typescript
CODE:
```
import type { Type1, Type2 } from './module.ts';
import { fn, type FnParams } from './fn.ts';
```

----------------------------------------

TITLE: Basic Process Spawning in Node.js (ES Modules)
DESCRIPTION: Demonstrates how to spawn a child process to execute the 'ls' command using ES Modules import syntax. Shows handling of stdout, stderr, and process completion events.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_1

LANGUAGE: mjs
CODE:
```
import { spawn } from 'node:child_process';
const ls = spawn('ls', ['-lh', '/usr']);

ls.stdout.on('data', (data) => {
  console.log(`stdout: ${data}`);
});

ls.stderr.on('data', (data) => {
  console.error(`stderr: ${data}`);
});

ls.on('close', (code) => {
  console.log(`child process exited with code ${code}`);
});
```

----------------------------------------

TITLE: Aborting File Read Operation - Node.js fs
DESCRIPTION: Shows how to use an `AbortController` and `AbortSignal` to cancel an asynchronous `fs.readFile` operation before it completes. The callback will receive an `AbortError` if cancelled.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_67

LANGUAGE: JavaScript
CODE:
```
import { readFile } from 'node:fs';

const controller = new AbortController();
const signal = controller.signal;
readFile(fileInfo[0].name, { signal }, (err, buf) => {
  // ...
});
// When you want to abort the request
controller.abort();
```

----------------------------------------

TITLE: Checking Node.js and npm versions using Bash commands
DESCRIPTION: These commands display the installed versions of Node.js and npm. They are used to verify if Node.js and npm are already installed on the system and to check their versions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/install.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
node -v
npm -v
```

----------------------------------------

TITLE: Invoking npx with Different Syntax Options (Bash)
DESCRIPTION: Shows the various command-line syntaxes for using the `npx` command. It demonstrates how to run a package executable directly, how to specify the package explicitly using `--package`, and how to execute an arbitrary command string using `-c`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npx.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npx -- <pkg>[@<version>] [args...]
npx --package=<pkg>[@<version>] -- <cmd> [args...]
npx -c '<cmd> [args...]'
npx --package=foo -c '<cmd> [args...]'
```

----------------------------------------

TITLE: Accessing MockAgent Call History in Undici for Node.js
DESCRIPTION: This snippet shows how to enable and use the call history feature of Undici's MockAgent. It demonstrates making assertions on various aspects of the request configuration, such as URL, method, headers, and body.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/best-practices/mocking-request.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
// index.test.mjs
import { strict as assert } from 'node:assert'
import { MockAgent, setGlobalDispatcher, fetch } from 'undici'
import { app } from './app.mjs'

// given an application server running on http://localhost:3000
await app.start()

// enable call history at instantiation
const mockAgent = new MockAgent({ enableCallHistory: true })
// or after instantiation
mockAgent.enableCallHistory()

setGlobalDispatcher(mockAgent)

// this call is made (not intercepted)
await fetch(`http://localhost:3000/endpoint?query='hello'`, {
  method: 'POST',
  headers: { 'content-type': 'application/json' }
  body: JSON.stringify({ data: '' })
})

// access to the call history of the MockAgent (which register every call made intercepted or not)
assert.ok(mockAgent.getCallHistory()?.calls().length === 1)
assert.strictEqual(mockAgent.getCallHistory()?.firstCall()?.fullUrl, `http://localhost:3000/endpoint?query='hello'`)
assert.strictEqual(mockAgent.getCallHistory()?.firstCall()?.body, JSON.stringify({ data: '' }))
assert.deepStrictEqual(mockAgent.getCallHistory()?.firstCall()?.searchParams, { query: 'hello' })
assert.strictEqual(mockAgent.getCallHistory()?.firstCall()?.port, '3000')
assert.strictEqual(mockAgent.getCallHistory()?.firstCall()?.host, 'localhost:3000')
assert.strictEqual(mockAgent.getCallHistory()?.firstCall()?.method, 'POST')
assert.strictEqual(mockAgent.getCallHistory()?.firstCall()?.path, '/endpoint')
assert.deepStrictEqual(mockAgent.getCallHistory()?.firstCall()?.headers, { 'content-type': 'application/json' })

// clear all call history logs
mockAgent.clearCallHistory()

assert.ok(mockAgent.getCallHistory()?.calls().length === 0)
```

----------------------------------------

TITLE: Spawning Detached Process with File Redirection (MJS)
DESCRIPTION: This ES Module snippet demonstrates spawning a detached child process (`prg`) while redirecting its stdout and stderr to a file (`./out.log`). It uses `fs.openSync` for file descriptors and sets `stdio` to `['ignore', out, err]`. The `detached: true` option and `subprocess.unref()` call allow the child to run independently of the parent.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_28

LANGUAGE: mjs
CODE:
```
import { openSync } from 'node:fs';
import { spawn } from 'node:child_process';
const out = openSync('./out.log', 'a');
const err = openSync('./out.log', 'a');

const subprocess = spawn('prg', [], {
  detached: true,
  stdio: [ 'ignore', out, err ],
});

subprocess.unref();
```

----------------------------------------

TITLE: Advancing Mock Timers with tick (Multiple Calls) - Node.js
DESCRIPTION: This example shows how to call `context.mock.timers.tick()` multiple times with smaller durations to cumulatively advance the mocked timer. It demonstrates that the `setTimeout` callback is triggered once the total advanced time equals or exceeds the specified delay. Requires timer mocking and `assert` for verification.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_69

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();
  context.mock.timers.enable({ apis: ['setTimeout'] });
  const nineSecs = 9000;
  setTimeout(fn, nineSecs);

  const threeSeconds = 3000;
  context.mock.timers.tick(threeSeconds);
  context.mock.timers.tick(threeSeconds);
  context.mock.timers.tick(threeSeconds);

  assert.strictEqual(fn.mock.callCount(), 1);
});
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
const { test } = require('node:test');

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();
  context.mock.timers.enable({ apis: ['setTimeout'] });
  const nineSecs = 9000;
  setTimeout(fn, nineSecs);

  const threeSeconds = 3000;
  context.mock.timers.tick(threeSeconds);
  context.mock.timers.tick(threeSeconds);
  context.mock.timers.tick(threeSeconds);

  assert.strictEqual(fn.mock.callCount(), 1);
});
```

----------------------------------------

TITLE: Printing Stack Traces with console.trace in Node.js (JavaScript)
DESCRIPTION: Shows how `console.trace(message, ...args)` prints a stack trace to `stderr`, prefixed with 'Trace: '. The optional `message` and any additional arguments (`...args`) are formatted using `util.format()`. This is useful for debugging to understand the sequence of calls leading to a specific point in the code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_9

LANGUAGE: js
CODE:
```
console.trace('Show me');
// Prints: (stack trace will vary based on where trace is called)
//  Trace: Show me
//    at repl:2:9
//    at REPLServer.defaultEval (repl.js:248:27)
//    at bound (domain.js:287:14)
//    at REPLServer.runBound [as eval] (domain.js:300:12)
//    at REPLServer.<anonymous> (repl.js:412:12)
//    at emitOne (events.js:82:20)
//    at REPLServer.emit (events.js:169:7)
//    at REPLServer.Interface._onLine (readline.js:210:10)
//    at REPLServer.Interface._line (readline.js:549:8)
//    at REPLServer.Interface._ttyWrite (readline.js:826:14)
```

----------------------------------------

TITLE: Using .mjs and .cjs Extensions for Explicit Module Type in Node.js
DESCRIPTION: This code snippet demonstrates how .mjs and .cjs file extensions can be used to explicitly specify module type, overriding package.json settings. It shows imports of files with these extensions and how they are interpreted.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import './legacy-file.cjs';
// Loaded as CommonJS since .cjs is always loaded as CommonJS.

import 'commonjs-package/src/index.mjs';
// Loaded as ES module since .mjs is always loaded as ES module.
```

----------------------------------------

TITLE: Handling SIGINT signal in Node.js (CJS)
DESCRIPTION: This code snippet demonstrates how to listen for the SIGINT signal in a Node.js process using CommonJS modules. It prevents the process from exiting immediately and logs a message to the console when SIGINT is received. It also shows how to use a single function to handle multiple signals.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_20

LANGUAGE: cjs
CODE:
```
const process = require('node:process');

// Begin reading from stdin so the process does not exit.
process.stdin.resume();

process.on('SIGINT', () => {
  console.log('Received SIGINT. Press Control-D to exit.');
});

// Using a single function to handle multiple signals
function handle(signal) {
  console.log(`Received ${signal}`);
}

process.on('SIGINT', handle);
process.on('SIGTERM', handle);
```

----------------------------------------

TITLE: AsyncLocalStorage Example (CJS)
DESCRIPTION: This example demonstrates how to use AsyncLocalStorage to create a simple logger that assigns IDs to incoming HTTP requests. It creates an HTTP server that uses AsyncLocalStorage to store and retrieve a request ID, which is then included in log messages.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_3

LANGUAGE: cjs
CODE:
```
const http = require('node:http');
const { AsyncLocalStorage } = require('node:async_hooks');

const asyncLocalStorage = new AsyncLocalStorage();

function logWithId(msg) {
  const id = asyncLocalStorage.getStore();
  console.log(`${id !== undefined ? id : '-'}:`, msg);
}

let idSeq = 0;
http.createServer((req, res) => {
  asyncLocalStorage.run(idSeq++, () => {
    logWithId('start');
    // Imagine any chain of async operations here
    setImmediate(() => {
      logWithId('finish');
      res.end();
    });
  });
}).listen(8080);

http.get('http://localhost:8080');
http.get('http://localhost:8080');
// Prints:
//   0: start
//   0: finish
//   1: start
//   1: finish
```

----------------------------------------

TITLE: Using crypto.pbkdf2() for Password-Based Key Derivation
DESCRIPTION: Examples of using PBKDF2 (Password-Based Key Derivation Function 2) to derive keys from passwords in both CommonJS and ES Modules format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_82

LANGUAGE: javascript
CODE:
```
const {
  pbkdf2,
} = await import('node:crypto');

pbkdf2('secret', 'salt', 100000, 64, 'sha512', (err, derivedKey) => {
  if (err) throw err;
  console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'
});
```

LANGUAGE: javascript
CODE:
```
const {
  pbkdf2,
} = require('node:crypto');

pbkdf2('secret', 'salt', 100000, 64, 'sha512', (err, derivedKey) => {
  if (err) throw err;
  console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'
});
```

----------------------------------------

TITLE: Specifying Local Path Dependencies Using npm CLI
DESCRIPTION: Shows the various formats for specifying local path dependencies when using npm install commands. Local paths can be relative, absolute, or use home directory references.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_19

LANGUAGE: bash
CODE:
```
../foo/bar
~/foo/bar
./foo/bar
/foo/bar
```

----------------------------------------

TITLE: Running npm run-script Command in Bash
DESCRIPTION: Demonstrates the basic syntax for running an npm script, including how to pass arguments to the script.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-run-script.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm run-script <command> [-- <args>]
```

----------------------------------------

TITLE: AbortSignal 'abort' event example
DESCRIPTION: This code shows how to listen for the 'abort' event on an AbortSignal using both the `onabort` property and the `addEventListener` method.  The event is triggered when the associated AbortController is aborted. The `once: true` option ensures the listener is only called once.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/globals.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const ac = new AbortController();

// Use either the onabort property...
ac.signal.onabort = () => console.log('aborted!');

// Or the EventTarget API...
ac.signal.addEventListener('abort', (event) => {
  console.log(event.type);  // Prints 'abort'
}, { once: true });

ac.abort();
```

----------------------------------------

TITLE: Opening File with Relative Path (MJS)
DESCRIPTION: Shows how to open a file using a relative string path with `node:fs/promises.open` in an ES module. The relative path is resolved based on `process.cwd()`. The example includes resource cleanup using `try...finally`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_134

LANGUAGE: mjs
CODE:
```
import { open } from 'node:fs/promises';

let fd;
try {
  fd = await open('file.txt', 'r');
  // Do something with the file
} finally {
  await fd?.close();
}
```

----------------------------------------

TITLE: Define Multiple Properties - Node-API
DESCRIPTION: This pair of snippets demonstrates defining multiple properties on a JavaScript object efficiently. The first shows the standard JavaScript `Object.defineProperties` syntax, and the second shows the equivalent implementation using Node-API functions `napi_create_object`, `napi_create_int32`, and `napi_define_properties` with `napi_property_descriptor` in C.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#_snippet_145

LANGUAGE: javascript
CODE:
```
const obj = {};
Object.defineProperties(obj, {
  'foo': { value: 123, writable: true, configurable: true, enumerable: true },
  'bar': { value: 456, writable: true, configurable: true, enumerable: true }
});
```

LANGUAGE: c
CODE:
```
napi_status status = napi_status_generic_failure;

// const obj = {};
napi_value obj;
status = napi_create_object(env, &obj);
if (status != napi_ok) return status;

// Create napi_values for 123 and 456
napi_value fooValue, barValue;
status = napi_create_int32(env, 123, &fooValue);
if (status != napi_ok) return status;
status = napi_create_int32(env, 456, &barValue);
if (status != napi_ok) return status;

// Set the properties
napi_property_descriptor descriptors[] = {
  { "foo", NULL, NULL, NULL, NULL, fooValue, napi_writable | napi_configurable, NULL },
  { "bar", NULL, NULL, NULL, NULL, barValue, napi_writable | napi_configurable, NULL }
};
status = napi_define_properties(env,
                                obj,
                                sizeof(descriptors) / sizeof(descriptors[0]),
                                descriptors);
if (status != napi_ok) return status;
```

----------------------------------------

TITLE: Parsing JavaScript asynchronously using Worker threads (CJS)
DESCRIPTION: This example demonstrates how to spawn a worker thread to parse JavaScript code asynchronously using CommonJS modules. It uses `workerData` to pass the script to the worker and `parentPort.postMessage` to send the parsed result back to the main thread. It also shows how to handle errors and exit codes from the worker.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#_snippet_3

LANGUAGE: cjs
CODE:
```
'use strict';

const {
  Worker,
  isMainThread,
  parentPort,
  workerData,
} = require('node:worker_threads');

if (isMainThread) {
  module.exports = function parseJSAsync(script) {
    return new Promise((resolve, reject) => {
      const worker = new Worker(__filename, {
        workerData: script,
      });
      worker.on('message', resolve);
      worker.on('error', reject);
      worker.on('exit', (code) => {
        if (code !== 0)
          reject(new Error(`Worker stopped with exit code ${code}`));
      });
    });
  };
} else {
  const { parse } = require('some-js-parsing-library');
  const script = workerData;
  parentPort.postMessage(parse(script));
}
```

----------------------------------------

TITLE: Piping streams with pipeline API
DESCRIPTION: This example demonstrates using the pipeline API to pipe a series of streams together, compressing a tar file and writing it to a new file. It also shows how to handle errors and get notified when the pipeline is complete.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_62

LANGUAGE: javascript
CODE:
```
const { pipeline } = require('node:stream');
const fs = require('node:fs');
const zlib = require('node:zlib');

// Use the pipeline API to easily pipe a series of streams
// together and get notified when the pipeline is fully done.

// A pipeline to gzip a potentially huge tar file efficiently:

pipeline(
  fs.createReadStream('archive.tar'),
  zlib.createGzip(),
  fs.createWriteStream('archive.tar.gz'),
  (err) => {
    if (err) {
      console.error('Pipeline failed.', err);
    } else {
      console.log('Pipeline succeeded.');
    }
  },
);
```

----------------------------------------

TITLE: Listening for uncaughtExceptionMonitor Event (ESM)
DESCRIPTION: This code snippet demonstrates how to listen for the 'uncaughtExceptionMonitor' event in Node.js using the ES module syntax. It logs the error and origin of the uncaught exception using a hypothetical `MyMonitoringTool.logSync` function. The process still crashes if no 'uncaughtException' listener is installed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_10

LANGUAGE: mjs
CODE:
```
import process from 'node:process';

process.on('uncaughtExceptionMonitor', (err, origin) => {
  MyMonitoringTool.logSync(err, origin);
});

// Intentionally cause an exception, but don't catch it.
nonexistentFunc();
// Still crashes Node.js
```

----------------------------------------

TITLE: Defining Custom Lifecycle Scripts in npm package.json - JSON
DESCRIPTION: This snippet adds custom script commands to the package.json for both 'install' and 'postinstall' lifecycle stages, pointing to an executable at scripts/install.js. It demonstrates how different npm lifecycle events can trigger the same script, and suggests the use of environment variables like npm_lifecycle_event to determine which phase is running within the script. No external dependencies are required, but the referenced scripts must be executable within the package context.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/scripts.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{\n  \"scripts\" : {\n    \"install\" : \"scripts/install.js\",\n    \"postinstall\" : \"scripts/install.js\"\n  }\n}
```

----------------------------------------

TITLE: Generating and writing a diagnostic report (CJS)
DESCRIPTION: This code snippet demonstrates how to generate a diagnostic report using `process.report.getReport()` and write it to a file in a CommonJS module (CJS). It requires the `node:process`, `util`, and `fs` modules. The report data is then written to a file named 'my-report.log'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_122

LANGUAGE: cjs
CODE:
```
const { report } = require('node:process');
const util = require('node:util');

const data = report.getReport();
console.log(data.header.nodejsVersion);

// Similar to process.report.writeReport()
const fs = require('node:fs');
fs.writeFileSync('my-report.log', util.inspect(data), 'utf8');
```

----------------------------------------

TITLE: AsyncResource Usage (ESM)
DESCRIPTION: Shows how to use the AsyncResource class in ECMAScript Modules (ESM) to manage asynchronous resources. It demonstrates creating an AsyncResource instance, running a function in its context, emitting destroy events, and retrieving the async and trigger IDs.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_11

LANGUAGE: mjs
CODE:
```
import { AsyncResource, executionAsyncId } from 'node:async_hooks';

// AsyncResource() is meant to be extended. Instantiating a
// new AsyncResource() also triggers init. If triggerAsyncId is omitted then
// async_hook.executionAsyncId() is used.
const asyncResource = new AsyncResource(
  type, { triggerAsyncId: executionAsyncId(), requireManualDestroy: false },
);

// Run a function in the execution context of the resource. This will
// * establish the context of the resource
// * trigger the AsyncHooks before callbacks
// * call the provided function `fn` with the supplied arguments
// * trigger the AsyncHooks after callbacks
// * restore the original execution context
asyncResource.runInAsyncScope(fn, thisArg, ...args);

// Call AsyncHooks destroy callbacks.
asyncResource.emitDestroy();

// Return the unique ID assigned to the AsyncResource instance.
asyncResource.asyncId();

// Return the trigger ID for the AsyncResource instance.
asyncResource.triggerAsyncId();
```

----------------------------------------

TITLE: Creating HTTP Server with Request Event (ESM)
DESCRIPTION: Demonstrates creating a basic HTTP server using `http.createServer` without an inline listener, then attaching a listener to the `'request'` event in ECMAScript Module syntax. The event handler processes requests and sends a JSON response.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_74

LANGUAGE: mjs
CODE:
```
import http from 'node:http';

// Create a local server to receive data from
const server = http.createServer();

// Listen to the request event
server.on('request', (request, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
```

----------------------------------------

TITLE: Task Processor for Worker Threads (ESM)
DESCRIPTION: This task processor module, written in ES modules syntax, receives tasks from the parent thread, adds the 'a' and 'b' properties of the task object, and sends the result back to the parent thread using `parentPort.postMessage`. It relies on the `worker_threads` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_14

LANGUAGE: mjs
CODE:
```
import { parentPort } from 'node:worker_threads';
parentPort.on('message', (task) => {
  parentPort.postMessage(task.a + task.b);
});
```

----------------------------------------

TITLE: Enable Date Mocking with Initial Time (mjs/cjs)
DESCRIPTION: This example shows how to enable mocking for the global `Date` object using `mock.timers.enable()`. It sets the initial time to 1000 milliseconds using the `now` option. Mocking `Date` affects the behavior of other mocked timers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_65

LANGUAGE: mjs
CODE:
```
import { mock } from 'node:test';
mock.timers.enable({ apis: ['Date'], now: 1000 });
```

LANGUAGE: cjs
CODE:
```
const { mock } = require('node:test');
mock.timers.enable({ apis: ['Date'], now: 1000 });
```

----------------------------------------

TITLE: Handling Optional Dependencies in Code
DESCRIPTION: Demonstrates how to safely handle optional dependencies in code using try/catch blocks. This allows your program to gracefully handle missing or incompatible optional dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_26

LANGUAGE: js
CODE:
```
try {
  var foo = require('@npm/foo')
  var fooVersion = require('@npm/foo/package.json').version
} catch (er) {
  foo = null
}
if ( notGoodFooVersion(fooVersion) ) {
  foo = null
}

// .. then later in your program ..

if (foo) {
  foo.doFooThings()
}
```

----------------------------------------

TITLE: Sending Basic HTTP/2 Response (MJS)
DESCRIPTION: Demonstrates sending a basic HTTP/2 response using `stream.respond()` with initial headers followed by writing response data and ending the stream with `stream.end()` in ES modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_25

LANGUAGE: javascript
CODE:
```
import { createServer } from 'node:http2';
const server = createServer();
server.on('stream', (stream) => {
  stream.respond({ ':status': 200 });
  stream.end('some data');
});
```

----------------------------------------

TITLE: MessagePort 'close' Event Example (CJS)
DESCRIPTION: This code demonstrates the 'close' event on MessagePorts using CommonJS modules. It sets up listeners for 'message' and 'close' events on port2, posts a message to port2 from port1, and then closes port1, triggering the 'close' event on port2.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#_snippet_31

LANGUAGE: cjs
CODE:
```
'use strict';

const { MessageChannel } = require('node:worker_threads');
const { port1, port2 } = new MessageChannel();

// Prints:
//   foobar
//   closed!
port2.on('message', (message) => console.log(message));
port2.on('close', () => console.log('closed!'));

port1.postMessage('foobar');
port1.close();
```

----------------------------------------

TITLE: Validating IP Addresses using net.isIP in Node.js
DESCRIPTION: This snippet demonstrates the `net.isIP()` function from the Node.js `net` module. It shows how to check if a given string is a valid IPv4 or IPv6 address. The function returns `6` for IPv6, `4` for valid IPv4 (dot-decimal, no leading zeros), and `0` otherwise. Examples include IPv6, valid IPv4, IPv4 with leading zeros (invalid), CIDR notation (invalid), and a non-IP string (invalid).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_33

LANGUAGE: js
CODE:
```
```js
net.isIP('::1'); // returns 6
net.isIP('127.0.0.1'); // returns 4
net.isIP('127.000.000.001'); // returns 0
net.isIP('127.0.0.1/24'); // returns 0
net.isIP('fhqwhgads'); // returns 0
```
```

----------------------------------------

TITLE: Wrapping a Low-Level Source with Readable Stream (JavaScript)
DESCRIPTION: This example demonstrates how to wrap a lower-level data source with pause/resume capabilities using a custom Readable stream. It shows how to use `readable.push()` to push data into the internal buffer and handle the end of the stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_91

LANGUAGE: javascript
CODE:
```
// `_source` is an object with readStop() and readStart() methods,
// and an `ondata` member that gets called when it has data, and
// an `onend` member that gets called when the data is over.

class SourceWrapper extends Readable {
  constructor(options) {
    super(options);

    this._source = getLowLevelSourceObject();

    // Every time there's data, push it into the internal buffer.
    this._source.ondata = (chunk) => {
      // If push() returns false, then stop reading from source.
      if (!this.push(chunk))
        this._source.readStop();
    };

    // When the source ends, push the EOF-signaling `null` chunk.
    this._source.onend = () => {
      this.push(null);
    };
  }
  // _read() will be called when the stream wants to pull more data in.
  // The advisory size argument is ignored in this case.
  _read(size) {
    this._source.readStart();
  }
}
```

----------------------------------------

TITLE: Creating Buffer from String with Encoding - MJS
DESCRIPTION: Demonstrates creating a Buffer from a string with a specified encoding.  Also shows how to convert a hex string to a buffer and how to use different encodings when converting a buffer to a string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_50

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf1 = Buffer.from('this is a tést');
const buf2 = Buffer.from('7468697320697320612074c3a97374', 'hex');

console.log(buf1.toString());
// Prints: this is a tést
console.log(buf2.toString());
// Prints: this is a tést
console.log(buf1.toString('latin1'));
// Prints: this is a tÃ©st
```

----------------------------------------

TITLE: Dropping Chunks from a Readable Stream in Node.js
DESCRIPTION: This code demonstrates how to use the `drop` method on a Readable stream to remove a specified number of initial chunks. It creates a stream from an array of numbers and drops the first two chunks, resulting in a new stream containing only the remaining chunks. The `toArray` method is used to collect the remaining chunks into an array.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_55

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';

await Readable.from([1, 2, 3, 4]).drop(2).toArray(); // [3, 4]
```

----------------------------------------

TITLE: Creating a Main Module that Loads Dependencies in Node.js
DESCRIPTION: Example demonstrating how to create a main module that loads other modules, showing the initialization order and state of loaded modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_14

LANGUAGE: js
CODE:
```
console.log('main starting');
const a = require('./a.js');
const b = require('./b.js');
console.log('in main, a.done = %j, b.done = %j', a.done, b.done);
```

----------------------------------------

TITLE: Performing HTTPS GET Request (mjs)
DESCRIPTION: This code performs an HTTPS GET request to 'https://encrypted.google.com/'. It logs the status code and headers of the response, and writes the response data to the standard output.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#_snippet_7

LANGUAGE: mjs
CODE:
```
import { get } from 'node:https';
import process from 'node:process';

get('https://encrypted.google.com/', (res) => {
  console.log('statusCode:', res.statusCode);
  console.log('headers:', res.headers);

  res.on('data', (d) => {
    process.stdout.write(d);
  });

}).on('error', (e) => {
  console.error(e);
});
```

----------------------------------------

TITLE: Configuring Stdio Options for Child Process (MJS)
DESCRIPTION: This ES Module snippet demonstrates various configurations for the `stdio` option. It shows using `stdio: 'inherit'` for the child to share the parent's stdio, configuring specific streams like sharing only stderr (`['pipe', 'pipe', process.stderr]`), and setting up custom file descriptor pipes, such as creating an extra pipe on fd 4 (`['pipe', null, null, null, 'pipe']`).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_30

LANGUAGE: mjs
CODE:
```
import { spawn } from 'node:child_process';
import process from 'node:process';

// Child will use parent's stdios.
spawn('prg', [], { stdio: 'inherit' });

// Spawn child sharing only stderr.
spawn('prg', [], { stdio: ['pipe', 'pipe', process.stderr] });

// Open an extra fd=4, to interact with programs presenting a
// startd-style interface.
spawn('prg', [], { stdio: ['pipe', null, null, null, 'pipe'] });
```

----------------------------------------

TITLE: Retrieving Diagnostic Report as JavaScript Object
DESCRIPTION: This code demonstrates how to obtain the diagnostic report as a JavaScript object using the Node.js API. It shows how to get a report with and without an error context.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/report.md#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
const report = process.report.getReport();
console.log(typeof report === 'object'); // true

// Similar to process.report.writeReport() output
console.log(JSON.stringify(report, null, 2));

const report = process.report.getReport(new Error('custom error'));
console.log(typeof report === 'object'); // true
```

----------------------------------------

TITLE: Read file line by line using the `'line'` event (CJS)
DESCRIPTION: This code reads a file line by line using the `'line'` event of the `readline` interface. It creates a `ReadStream` from the input file and attaches a listener to the `'line'` event to process each line asynchronously. The `crlfDelay` option handles different line endings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#_snippet_36

LANGUAGE: cjs
CODE:
```
const { createReadStream } = require('node:fs');
const { createInterface } = require('node:readline');

const rl = createInterface({
  input: createReadStream('sample.txt'),
  crlfDelay: Infinity,
});

rl.on('line', (line) => {
  console.log(`Line from file: ${line}`);
});
```

----------------------------------------

TITLE: Checking for Undefined in JavaScript
DESCRIPTION: Demonstrates the recommended way to check if a variable is undefined using the strict equality operator ===, replacing the deprecated util.isUndefined().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/deprecations.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const arg = undefined;
if (arg === undefined) {
  console.log('arg is undefined');
}
```

----------------------------------------

TITLE: Sending UDP Packets from a Connected Socket (ES Module) - JavaScript
DESCRIPTION: Demonstrates connecting a UDP socket before sending data with Node.js 'dgram' (ES module). The socket connects to a remote endpoint, after which data is sent without specifying port/address. Dependencies: 'dgram', 'buffer'. Sequence: create socket, connect to address/port, send Buffer, handle the callback, close socket. Input: message, remote port/address. Output: message sent via connected socket. Useful for persistent UDP conversations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dgram.md#2025-04-23_snippet_10

LANGUAGE: JavaScript
CODE:
```
import dgram from 'node:dgram';\nimport { Buffer } from 'node:buffer';\n\nconst message = Buffer.from('Some bytes');\nconst client = dgram.createSocket('udp4');\nclient.connect(41234, 'localhost', (err) => {\n  client.send(message, (err) => {\n    client.close();\n  });\n});
```

----------------------------------------

TITLE: Creating a Basic HTTP Server in Node.js
DESCRIPTION: JavaScript code for a simple Node.js HTTP server that listens on port 3000 and responds with 'Hello, World!' to all requests. The server uses the built-in http module to create a server instance and configure response headers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/synopsis.md#2025-04-23_snippet_3

LANGUAGE: js
CODE:
```
const http = require('node:http');

const hostname = '127.0.0.1';
const port = 3000;

const server = http.createServer((req, res) => {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/plain');
  res.end('Hello, World!\n');
});

server.listen(port, hostname, () => {
  console.log(`Server running at http://${hostname}:${port}/`);
});
```

----------------------------------------

TITLE: Defining Project Dependencies in package.json (JSON)
DESCRIPTION: This JSON snippet showcases various ways to define project dependencies in the `dependencies` field of `package.json`. It includes examples of exact versions, version ranges (using >, <, >=, <=, -, ||), approximate (`~`) and compatible (`^`) versions, URL dependencies, local file paths (`file:`), tags (`latest`), and aliased packages (`npm:`). Development tools should go in `devDependencies`.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_15

LANGUAGE: json
CODE:
```
{
  "dependencies": {
    "foo": "1.0.0 - 2.9999.9999",
    "bar": ">=1.0.2 <2.1.2",
    "baz": ">1.0.2 <=2.3.4",
    "boo": "2.0.1",
    "qux": "<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0",
    "asd": "http://npmjs.com/example.tar.gz",
    "til": "~1.2",
    "elf": "~1.2.3",
    "two": "2.x",
    "thr": "3.3.x",
    "lat": "latest",
    "dyl": "file:../dyl",
    "kpg": "npm:pkg@1.0.0"
  }
}
```

----------------------------------------

TITLE: Monitoring error events without consuming them (ESM)
DESCRIPTION: This code demonstrates how to monitor 'error' events without consuming the emitted error by installing a listener using the symbol `events.errorMonitor`. The error will still be thrown and crash the Node.js process. The example uses ES modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_16

LANGUAGE: mjs
CODE:
```
import { EventEmitter, errorMonitor } from 'node:events';

const myEmitter = new EventEmitter();
myEmitter.on(errorMonitor, (err) => {
  MyMonitoringTool.log(err);
});
myEmitter.emit('error', new Error('whoops!'));
// Still throws and crashes Node.js
```

----------------------------------------

TITLE: Handling Output and Errors with `exec` Callback (MJS)
DESCRIPTION: Illustrates how to use the callback function with `child_process.exec` using ES Modules syntax. The callback receives `error`, `stdout`, and `stderr` arguments, allowing for checking command success (error is null), processing standard output, and capturing standard error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_7

LANGUAGE: mjs
CODE:
```
import { exec } from 'node:child_process';
exec('cat *.js missing_file | wc -l', (error, stdout, stderr) => {
  if (error) {
    console.error(`exec error: ${error}`);
    return;
  }
  console.log(`stdout: ${stdout}`);
  console.error(`stderr: ${stderr}`);
});
```

----------------------------------------

TITLE: Truncating Files with fsPromises.truncate (Node.js)
DESCRIPTION: Asynchronously changes the size of the file specified by `path` to `len` bytes. If `len` is less than the current size, the file is truncated. If `len` is greater, the file is extended with null bytes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_30



----------------------------------------

TITLE: Transform Stream with ES6 Class Constructor
DESCRIPTION: Demonstrates creating a Transform stream using the ES6 class syntax. It extends the `Transform` class and calls the `super` constructor with the options.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_100

LANGUAGE: javascript
CODE:
```
const { Transform } = require('node:stream');

class MyTransform extends Transform {
  constructor(options) {
    super(options);
    // ...
  }
}
```

----------------------------------------

TITLE: Installing the SemVer Package using NPM
DESCRIPTION: Installs the `semver` package globally or locally using the Node Package Manager (npm). This makes the `semver` module available for Node.js projects and the `semver` command-line utility available in the shell.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/semver/README.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm install semver
```

----------------------------------------

TITLE: Renaming a File Asynchronously with fs.rename (JavaScript)
DESCRIPTION: This snippet demonstrates how to use the fs.rename function to asynchronously rename 'oldFile.txt' to 'newFile.txt'. It includes error handling in the callback function, logging a success message upon completion or throwing an error if the rename fails.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_70

LANGUAGE: javascript
CODE:
```
import { rename } from 'node:fs';

rename('oldFile.txt', 'newFile.txt', (err) => {
  if (err) throw err;
  console.log('Rename complete!');
});
```

----------------------------------------

TITLE: Installing a Local npm Package Globally
DESCRIPTION: Shows how to install a locally developed npm package globally for testing purposes. This command should be run in the root directory of the package.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/developers.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
npm install . -g
```

----------------------------------------

TITLE: Representing Raw HTTP Headers in JavaScript Array
DESCRIPTION: The 'rawHeaders' property stores the headers exactly as they were received, preserving original casing and order. It is an array of key-value pairs, useful for inspecting the raw input.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
[ 'ConTent-Length', '123456',
  'content-LENGTH', '123',
  'content-type', 'text/plain',
  'CONNECTION', 'keep-alive',
  'Host', 'example.com',
  'accepT', '*/*' ]
```

----------------------------------------

TITLE: Setting the exit code for graceful termination
DESCRIPTION: This code snippet demonstrates the correct way to set the exit code for a Node.js process. Instead of calling process.exit() directly, it sets the process.exitCode property and allows the process to exit gracefully after all pending operations are completed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_74

LANGUAGE: mjs
CODE:
```
import process from 'node:process';

// How to properly set the exit code while letting
// the process exit gracefully.
if (someConditionNotMet()) {
  printUsageToStdout();
  process.exitCode = 1;
}
```

----------------------------------------

TITLE: Read file line by line using `for await...of` loop (ESM)
DESCRIPTION: This code reads a file line by line using `fs.ReadStream` and a `for await...of` loop. It creates a `ReadStream` from the input file and uses `readline.createInterface` to process each line asynchronously. The `crlfDelay` option handles different line endings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#_snippet_33

LANGUAGE: mjs
CODE:
```
import { createReadStream } from 'node:fs';
import { createInterface } from 'node:readline';

async function processLineByLine() {
  const fileStream = createReadStream('input.txt');

  const rl = createInterface({
    input: fileStream,
    crlfDelay: Infinity,
  });
  // Note: we use the crlfDelay option to recognize all instances of CR LF
  // ('\r\n') in input.txt as a single line break.

  for await (const line of rl) {
    // Each line in input.txt will be successively available here as `line`.
    console.log(`Line from file: ${line}`);
  }
}

processLineByLine();
```

----------------------------------------

TITLE: Correctly Ordering Callback FS Operations (MJS)
DESCRIPTION: Illustrates the correct way to sequence callback-based `node:fs` operations in an ES module by nesting the subsequent call (`stat`) within the callback of the preceding one (`rename`), ensuring execution order.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_131

LANGUAGE: mjs
CODE:
```
import { rename, stat } from 'node:fs';

rename('/tmp/hello', '/tmp/world', (err) => {
  if (err) throw err;
  stat('/tmp/world', (err, stats) => {
    if (err) throw err;
    console.log(`stats: ${JSON.stringify(stats)}`);
  });
});
```

----------------------------------------

TITLE: Sending HTTP Response Headers with writeHead and Chaining end (Node.js)
DESCRIPTION: This snippet shows how to use `response.writeHead` to set the HTTP status code (200) and headers (`Content-Length`, `Content-Type`) for a response. It then chains the `response.end` method to send the response body. This is a common pattern for sending simple HTTP responses.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_57

LANGUAGE: javascript
CODE:
```
const body = 'hello world';
response
  .writeHead(200, {
    'Content-Length': Buffer.byteLength(body),
    'Content-Type': 'text/plain',
  })
  .end(body);
```

----------------------------------------

TITLE: Exporting a function in an ES module
DESCRIPTION: This example demonstrates how to export a function named `addTwo` from an ECMAScript module. The function takes a number as input and returns the number plus 2.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_0

LANGUAGE: js
CODE:
```
// addTwo.mjs
function addTwo(num) {
  return num + 2;
}

export { addTwo };
```

----------------------------------------

TITLE: Executing npm install command in Bash
DESCRIPTION: The npm install command is used to install one or more packages. It can be called with optional package specifications. The command has several aliases for convenience.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm install [<package-spec> ...]

aliases: add, i, in, ins, inst, insta, instal, isnt, isnta, isntal, isntall
```

----------------------------------------

TITLE: Formatting a URL from a URL object using url.format()
DESCRIPTION: This code demonstrates how to use `url.format()` to create a URL string from a URL object. It defines a URL object with properties like protocol, hostname, pathname, and query, and then uses `url.format()` to generate the corresponding URL string. The `url` module is required to use this function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_68

LANGUAGE: javascript
CODE:
```
const url = require('node:url');
url.format({
  protocol: 'https',
  hostname: 'example.com',
  pathname: '/some/path',
  query: {
    page: 1,
    format: 'json',
  },
});

// => 'https://example.com/some/path?page=1&format=json'
```

----------------------------------------

TITLE: Replacing deprecated Buffer constructors with Buffer.from / Buffer.alloc (JavaScript)
DESCRIPTION: These patterns illustrate how to migrate deprecated Buffer and new Buffer usage to modern APIs. For numeric arguments, Buffer.alloc(number) should be used for zero-filled buffers. For string or other input, Buffer.from() (with optional encoding) is used. This refactoring improves security and performance on supported Node.js versions (≥ 4.5.0). No dependencies besides Node.js API, but eslint rules can help enforcement.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/safer-buffer/Porting-Buffer.md#2025-04-23_snippet_2

LANGUAGE: JavaScript
CODE:
```
// For `new Buffer(number)`, replace it with `Buffer.alloc(number)`.
// For `new Buffer(string)` or `new Buffer(string, encoding)`, replace with `Buffer.from(string)` or `Buffer.from(string, encoding)`.
// For other argument types, replace `new Buffer(...arguments)` with `Buffer.from(...arguments)`.
```

----------------------------------------

TITLE: Checking Main Thread with `isMainThread` in Worker Threads (ESM)
DESCRIPTION: This code snippet demonstrates how to use `isMainThread` to determine if the current code is running in the main thread or a worker thread. If it's the main thread, it creates a new worker. Otherwise, it prints a message indicating it's running inside a worker thread and prints the value of `isMainThread`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#_snippet_8

LANGUAGE: mjs
CODE:
```
import { Worker, isMainThread } from 'node:worker_threads';

if (isMainThread) {
  // This re-loads the current file inside a Worker instance.
  new Worker(new URL(import.meta.url));
} else {
  console.log('Inside Worker!');
  console.log(isMainThread);  // Prints 'false'.
}
```

----------------------------------------

TITLE: Timing a Function using Node.js PerformanceObserver (CommonJS) - JavaScript
DESCRIPTION: Shows how to time a function in Node.js using CommonJS syntax and the perf_hooks module. Requires Node.js v8.5.0+ and 'node:perf_hooks'. The example wraps a function, sets up a PerformanceObserver to listen for 'function' entries, prints the timing result, then cleans up observer state. Functions identically to the ECMAScript module example with CommonJS conventions; output is the measured duration of the wrapped function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_5

LANGUAGE: JavaScript
CODE:
```
const {\n  performance,\n  PerformanceObserver,\n} = require('node:perf_hooks');\n\nfunction someFunction() {\n  console.log('hello world');\n}\n\nconst wrapped = performance.timerify(someFunction);\n\nconst obs = new PerformanceObserver((list) => {\n  console.log(list.getEntries()[0].duration);\n\n  performance.clearMarks();\n  performance.clearMeasures();\n  obs.disconnect();\n});\nobs.observe({ entryTypes: ['function'] });\n\n// A performance timeline entry will be created\nwrapped();
```

----------------------------------------

TITLE: Publishing a Package with npm
DESCRIPTION: Command to publish a package to the npm registry. The <package-spec> can be a folder, tarball, URL, or a specific version/tag.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-publish.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm publish <package-spec>
```

----------------------------------------

TITLE: Scheduling a nextTick callback (CJS)
DESCRIPTION: This example demonstrates how to schedule a callback function to be executed in the next tick of the event loop using process.nextTick() in a CommonJS module. The callback will be executed after the 'scheduled' console log.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_99

LANGUAGE: cjs
CODE:
```
const { nextTick } = require('node:process');

console.log('start');
nextTick(() => {
  console.log('nextTick callback');
});
console.log('scheduled');
// Output:
// start
// scheduled
// nextTick callback
```

----------------------------------------

TITLE: Updating Pull Request with New Commits - Bash
DESCRIPTION: This snippet shows the sequence of Git commands to stage changes, commit them, and push updates to the same branch on the remote fork linked to an existing pull request. 'git add' is used to stage the modified files, 'git commit' saves the changes locally, and 'git push origin my-branch' publishes the changes to GitHub. This process allows contributors to update their pull requests with additional commits as requested during code review. Git must be installed and configured, and the user must be on the correct branch for this flow.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/pull-requests.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
git add my/changed/files
git commit
git push origin my-branch
```

----------------------------------------

TITLE: Closing FileHandle Node.js JavaScript
DESCRIPTION: Demonstrates how to open a file handle using `fsPromises.open` and ensure it is closed using `filehandle.close()` within a `try...finally` block to prevent resource leaks. Requires the `node:fs/promises` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_10

LANGUAGE: mjs
CODE:
```
import { open } from 'node:fs/promises';

let filehandle;
try {
  filehandle = await open('thefile.txt', 'r');
} finally {
  await filehandle?.close();
}
```

----------------------------------------

TITLE: Mocking and Clearing setTimeout with node:test (MJS)
DESCRIPTION: This snippet shows how to use `context.mock.timers` to mock `setTimeout` in an ECMAScript Module (MJS) test. It demonstrates enabling the mock for `setTimeout`, calling `setTimeout`, immediately clearing it with `clearTimeout`, advancing the mocked timers using `context.mock.timers.tick`, and asserting that the mocked function was never called because it was cleared.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_71

LANGUAGE: JavaScript (MJS)
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';

test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {
  const fn = context.mock.fn();

  // Optionally choose what to mock
  context.mock.timers.enable({ apis: ['setTimeout'] });
  const id = setTimeout(fn, 9999);

  // Implicitly mocked as well
  clearTimeout(id);
  context.mock.timers.tick(9999);

  // As that setTimeout was cleared the mock function will never be called
  assert.strictEqual(fn.mock.callCount(), 0);
});
```

----------------------------------------

TITLE: Safely creating buffers from possibly non-number inputs (JavaScript)
DESCRIPTION: This snippet provides a cross-version pattern for safely constructing buffers from values that are *not* guaranteed to be numbers. If Buffer.from is available and correctly implemented (not an alias for Uint8Array.from), it is used. Otherwise, the code checks the type to prevent accidental unsafe allocation with a number. This guards against security vulnerabilities from user-provided input. Requires Node.js and some runtime type checks; works in Node.js environments back to early versions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/safer-buffer/Porting-Buffer.md#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
var buf;
if (Buffer.from && Buffer.from !== Uint8Array.from) {
  buf = Buffer.from(notNumber, encoding);
} else {
  if (typeof notNumber === 'number')
    throw new Error('The "size" argument must be of type number.');
  buf = new Buffer(notNumber, encoding);
}
```

----------------------------------------

TITLE: Exiting a Node.js process with an exit code
DESCRIPTION: This code snippet demonstrates how to terminate a Node.js process with a specific exit code using the process.exit() method.  The exit code is passed as an argument to the exit() function. The shell that executed Node.js will receive this exit code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_70

LANGUAGE: mjs
CODE:
```
import { exit } from 'node:process';

exit(1);
```

----------------------------------------

TITLE: Creating a Buffer from an array of bytes (Buffer.from(array)) - MJS
DESCRIPTION: This code snippet demonstrates how to create a new Buffer instance from an array of byte values using the Buffer.from(array) method in a modern JavaScript module. The array contains UTF-8 byte representations of the string 'buffer'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_36

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

// Creates a new Buffer containing the UTF-8 bytes of the string 'buffer'.
const buf = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);
```

----------------------------------------

TITLE: Exporting Entire Folders and Patterns using Export Patterns (JSON)
DESCRIPTION: Demonstrates how to use export patterns in the exports field of package.json to expose whole directories and their files with or without file extensions. This increases flexibility, reduces entry duplication, and works with Node.js v12.7.0+. All exports are explicitly mapped, ensuring both explicit and pattern-based access, but care should be taken to avoid accidental overexposure of internal modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{
  "name": "my-package",
  "exports": {
    ".": "./lib/index.js",
    "./lib": "./lib/index.js",
    "./lib/*": "./lib/*.js",
    "./lib/*.js": "./lib/*.js",
    "./feature": "./feature/index.js",
    "./feature/*": "./feature/*.js",
    "./feature/*.js": "./feature/*.js",
    "./package.json": "./package.json"
  }
}
```

----------------------------------------

TITLE: Equivalent Object Notation for Single Executable in package.json (JSON)
DESCRIPTION: This JSON snippet illustrates the object-based equivalent of the shorthand `bin` field shown previously. Defining `bin` as an object mapping the package name (`my-program`) to the script path (`path/to/program`) achieves the same result as using the string shorthand.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_7

LANGUAGE: json
CODE:
```
{
  "name": "my-program",
  "version": "1.2.5",
  "bin": {
    "my-program": "path/to/program"
  }
}
```

----------------------------------------

TITLE: Aborting fsPromises.readFile with AbortSignal
DESCRIPTION: Illustrates how to use an `AbortSignal` to cancel an ongoing `fsPromises.readFile` operation. The example sets up a signal, starts the read, then aborts the signal, catching the resulting `AbortError`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_28

LANGUAGE: mjs
CODE:
```
import { readFile } from 'node:fs/promises';

try {
  const controller = new AbortController();
  const { signal } = controller;
  const promise = readFile(fileName, { signal });

  // Abort the request before the promise settles.
  controller.abort();

  await promise;
} catch (err) {
  // When a request is aborted - err is an AbortError
  console.error(err);
}
```

----------------------------------------

TITLE: Accessing the query property of a URL object in Node.js
DESCRIPTION: The `query` property is either the query string without the leading ASCII question mark ('?'), or an object returned by the `querystring` module's `parse()` method. The type depends on the `parseQueryString` argument passed to `url.parse()`. If returned as an object, both keys and values are decoded.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_65

LANGUAGE: javascript
CODE:
```
urlObject.query // Example: 'query=string' or `{'query': 'string'}`
```

----------------------------------------

TITLE: Configuring Stdio Options for Child Process (CJS)
DESCRIPTION: This CommonJS snippet illustrates different ways to configure the `stdio` option when spawning a child process. The first example uses `stdio: 'inherit'` to make the child use the parent's stdio streams. The second example configures pipes for stdin and stdout but shares the parent's stderr with the child (`['pipe', 'pipe', process.stderr]`). The third example creates standard pipes for stdin (fd 0) and an additional pipe for fd 4, ignoring fds 1, 2, and 3 (`['pipe', null, null, null, 'pipe']`).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_29

LANGUAGE: cjs
CODE:
```
const { spawn } = require('node:child_process');
const process = require('node:process');

// Child will use parent's stdios.
spawn('prg', [], { stdio: 'inherit' });

// Spawn child sharing only stderr.
spawn('prg', [], { stdio: ['pipe', 'pipe', process.stderr] });

// Open an extra fd=4, to interact with programs presenting a
// startd-style interface.
spawn('prg', [], { stdio: ['pipe', null, null, null, 'pipe'] });
```

----------------------------------------

TITLE: Creating HTTPS Server with PFX Certificate (mjs)
DESCRIPTION: This code creates an HTTPS server using a PFX certificate (test_cert.pfx) and a passphrase. It imports the necessary modules, reads the certificate file, and sets up a basic server that responds with 'hello world'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#_snippet_5

LANGUAGE: mjs
CODE:
```
import { createServer } from 'node:https';
import { readFileSync } from 'node:fs';

const options = {
  pfx: readFileSync('test_cert.pfx'),
  passphrase: 'sample',
};

createServer(options, (req, res) => {
  res.writeHead(200);
  res.end('hello world\n');
}).listen(8000);
```

----------------------------------------

TITLE: Importing fs Module (CommonJS)
DESCRIPTION: This snippet shows how to require the standard callback and synchronous APIs of the Node.js file system module using CommonJS syntax. It assigns the module exports from 'node:fs' to the variable 'fs'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_3

LANGUAGE: cjs
CODE:
```
const fs = require('node:fs');
```

----------------------------------------

TITLE: Basic Writable Stream Usage
DESCRIPTION: This example shows the fundamental usage pattern of a writable stream. It gets a writable stream, writes data to it using the write() method, and then signals the end of the writing process using the end() method.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
const myStream = getWritableStreamSomehow();
myStream.write('some data');
myStream.write('some more data');
myStream.end('done writing data');
```

----------------------------------------

TITLE: Reading Directory Contents with fsPromises.readdir (Node.js mjs)
DESCRIPTION: This snippet demonstrates using `fsPromises.readdir` to asynchronously read the contents of a directory specified by `path`. It iterates over the returned array of filenames and logs each one to the console. Includes basic error handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_25

LANGUAGE: mjs
CODE:
```
import { readdir } from 'node:fs/promises';

try {
  const files = await readdir(path);
  for (const file of files)
    console.log(file);
} catch (err) {
  console.error(err);
}
```

----------------------------------------

TITLE: Listing NPM Config Values in Bash
DESCRIPTION: Command to show all npm configuration settings. Use -l for defaults and --json for JSON format output.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-config.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
npm config list
```

----------------------------------------

TITLE: Handling JavaScript Errors with try...catch
DESCRIPTION: Demonstrates how to catch and handle JavaScript errors using the try...catch construct. If an error occurs within the try block, the catch block will execute, allowing the error to be handled.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// Throws with a ReferenceError because z is not defined.
try {
  const m = 1;
  const n = m + z;
} catch (err) {
  // Handle the error here.
}
```

----------------------------------------

TITLE: Running System Commands with Output Capture in Node.js
DESCRIPTION: Example showing how to run the 'ls' command and capture its stdout, stderr, and exit code using child_process.spawn()
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_21

LANGUAGE: javascript
CODE:
```
const { spawn } = require('node:child_process');
const ls = spawn('ls', ['-lh', '/usr']);

ls.stdout.on('data', (data) => {
  console.log(`stdout: ${data}`);
});

ls.stderr.on('data', (data) => {
  console.error(`stderr: ${data}`);
});

ls.on('close', (code) => {
  console.log(`child process exited with code ${code}`);
});
```

LANGUAGE: javascript
CODE:
```
import { spawn } from 'node:child_process';
const ls = spawn('ls', ['-lh', '/usr']);

ls.stdout.on('data', (data) => {
  console.log(`stdout: ${data}`);
});

ls.stderr.on('data', (data) => {
  console.error(`stderr: ${data}`);
});

ls.on('close', (code) => {
  console.log(`child process exited with code ${code}`);
});
```

----------------------------------------

TITLE: Accessing Node.js Versions Object - JavaScript
DESCRIPTION: This code snippet demonstrates how to access the `process.versions` object, which contains version strings of Node.js and its dependencies. It uses both ES module and CommonJS syntax. The `versions` object is accessed and printed to the console, displaying the versions of Node.js and its dependencies.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_142

LANGUAGE: mjs
CODE:
```
import { versions } from 'node:process';

console.log(versions);
```

LANGUAGE: cjs
CODE:
```
const { versions } = require('node:process');

console.log(versions);
```

----------------------------------------

TITLE: Deleting Files or Unlinking Symbolic Links with fsPromises.unlink (Node.js)
DESCRIPTION: Removes the file or symbolic link specified by `path`. If `path` is a symbolic link, the link itself is removed, not the target. This method behaves like the POSIX unlink(2) system call.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_31



----------------------------------------

TITLE: Mocking Date with Default Epoch Time (ESM)
DESCRIPTION: Demonstrates enabling Date mocking using `context.mock.timers.enable({ apis: ['Date'] })`. Shows that the initial `Date.now()` is 0 (Unix epoch start) by default and how `context.mock.timers.tick()` advances the mocked date.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_24

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';

test('mocks the Date object', (context) => {
  // Optionally choose what to mock
  context.mock.timers.enable({ apis: ['Date'] });
  // If not specified, the initial date will be based on 0 in the UNIX epoch
  assert.strictEqual(Date.now(), 0);

  // Advance in time will also advance the date
  context.mock.timers.tick(9999);
  assert.strictEqual(Date.now(), 9999);
});
```

----------------------------------------

TITLE: Importing Modules and JSON Files Using require() - JavaScript
DESCRIPTION: This snippet provides examples of different ways to import local modules, JSON files, and built-in/node_modules packages using require(). It demonstrates how module resolution works for relative paths and module names. It highlights parameters like path string and the ability to import both custom code and data files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_20

LANGUAGE: JavaScript
CODE:
```
// Importing a local module with a path relative to the `__dirname` or current
// working directory. (On Windows, this would resolve to .\path\myLocalModule.)
const myLocalModule = require('./path/myLocalModule');

// Importing a JSON file:
const jsonData = require('./path/filename.json');

// Importing a module from node_modules or Node.js built-in module:
const crypto = require('node:crypto');
```

----------------------------------------

TITLE: Generating RSA Key Pair Asynchronously with CommonJS
DESCRIPTION: Example of generating an RSA key pair asynchronously using CommonJS require. Uses the same configuration as the ESM example with 4096-bit keys and encrypted private key storage.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_66

LANGUAGE: javascript
CODE:
```
const {
  generateKeyPair,
} = require('node:crypto');

generateKeyPair('rsa', {
  modulusLength: 4096,
  publicKeyEncoding: {
    type: 'spki',
    format: 'pem',
  },
  privateKeyEncoding: {
    type: 'pkcs8',
    format: 'pem',
    cipher: 'aes-256-cbc',
    passphrase: 'top secret',
  },
}, (err, publicKey, privateKey) => {
  // Handle errors and use the generated key pair.
});
```

----------------------------------------

TITLE: Defining test script in package.json
DESCRIPTION: Shows how to specify a test script in the package.json file, which will be executed by npm test.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-test.md#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "test": "node test.js"
  }
}
```

----------------------------------------

TITLE: Import JSON module with attribute
DESCRIPTION: Demonstrates how to import a JSON module using the `import ... with` syntax, specifying the `type` attribute as `'json'`. This is mandatory for importing JSON modules in Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import fooData from './foo.json' with { type: 'json' };

const { default: barData } = 
  await import('./bar.json', { with: { type: 'json' } });
```

----------------------------------------

TITLE: Taking Chunks from a Readable Stream in Node.js
DESCRIPTION: This code demonstrates how to use the `take` method on a Readable stream to select a specified number of initial chunks. It creates a stream from an array of numbers and takes the first two chunks, resulting in a new stream containing only those chunks. The `toArray` method is used to collect the selected chunks into an array.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_56

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';

await Readable.from([1, 2, 3, 4]).take(2).toArray(); // [1, 2]
```

----------------------------------------

TITLE: Running Node.js Tests (ESM)
DESCRIPTION: This snippet demonstrates how to run a specific test file (`./tests/test.js`) using the `node:test` module in an ES module environment. It configures the test runner to use the `tap` reporter, pipe the output to standard output, and set the process exit code to 1 if any test fails.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_42

LANGUAGE: mjs
CODE:
```
import { tap } from 'node:test/reporters';
import { run } from 'node:test';
import process from 'node:process';
import path from 'node:path';

run({ files: [path.resolve('./tests/test.js')] })
 .on('test:fail', () => {
   process.exitCode = 1;
 })
 .compose(tap)
 .pipe(process.stdout);
```

----------------------------------------

TITLE: Deprecated Buffer Constructor with Size
DESCRIPTION: This constructor is deprecated. Use Buffer.alloc() instead. It creates a new Buffer of the specified size, zero-filled.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_163

LANGUAGE: javascript
CODE:
```
new Buffer(size)
```

----------------------------------------

TITLE: Passing Arguments to Listeners with EventEmitter (ESM)
DESCRIPTION: This code shows how to pass arguments to event listeners when emitting an event. The `this` keyword within the listener function refers to the `EventEmitter` instance. This example uses ES modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_2

LANGUAGE: mjs
CODE:
```
import { EventEmitter } from 'node:events';
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on('event', function(a, b) {
  console.log(a, b, this, this === myEmitter);
  // Prints:
  //   a b MyEmitter {
  //     _events: [Object: null prototype] { event: [Function (anonymous)] },
  //     _eventsCount: 1,
  //     _maxListeners: undefined,
  //     Symbol(shapeMode): false,
  //     Symbol(kCapture): false
  //   } true
});
myEmitter.emit('event', 'a', 'b');
```

----------------------------------------

TITLE: Correctly Creating a Temporary Directory within a Parent Directory using Node.js fs.mkdtemp
DESCRIPTION: Illustrates the correct way to use `fs.mkdtemp` to create a temporary directory *within* a specific parent directory (like the system's temp directory). It contrasts an incorrect approach (passing the parent directory path directly as the prefix) with the correct approach (appending the platform-specific path separator to the parent directory path before using it as the prefix).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_62

LANGUAGE: mjs
CODE:
```
import { tmpdir } from 'node:os';
import { mkdtemp } from 'node:fs';

// The parent directory for the new temporary directory
const tmpDir = tmpdir();

// This method is *INCORRECT*:
mkdtemp(tmpDir, (err, directory) => {
  if (err) throw err;
  console.log(directory);
  // Will print something similar to `/tmpabc123`.
  // A new temporary directory is created at the file system root
  // rather than *within* the /tmp directory.
});

// This method is *CORRECT*:
import { sep } from 'node:path';
mkdtemp(`${tmpDir}${sep}`, (err, directory) => {
  if (err) throw err;
  console.log(directory);
  // Will print something similar to `/tmp/abc123`.
  // A new temporary directory is created within
  // the /tmp directory.
});
```

----------------------------------------

TITLE: Setting Content-Type Header in Node.js HTTP Request (JavaScript)
DESCRIPTION: Sets the 'Content-Type' header to 'application/json' for the HTTP request. This indicates the format of the request body.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_32

LANGUAGE: javascript
CODE:
```
request.setHeader('Content-Type', 'application/json');
```

----------------------------------------

TITLE: Defining Source Repository URL in package.json (JSON)
DESCRIPTION: This JSON snippet demonstrates how to specify the project's source code repository using the `repository` field in `package.json`. It includes the `type` (e.g., 'git') and the `url` pointing to the repository, enabling commands like `npm repo`. The URL should be directly usable by a VCS program.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_11

LANGUAGE: json
CODE:
```
{
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/cli.git"
  }
}
```

----------------------------------------

TITLE: Importing Node.js path module (CommonJS)
DESCRIPTION: Imports the Node.js `path` module using the CommonJS `require` syntax. This makes the path utility functions available for use in the script.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_0

LANGUAGE: cjs
CODE:
```
const path = require('node:path');
```

----------------------------------------

TITLE: Getting the constructed URL string
DESCRIPTION: Retrieves the constructed URL string from a WHATWG URL object using the `href` property accessor. This shows how to get the complete URL string after constructing it from components.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_7

LANGUAGE: js
CODE:
```
console.log(myURL.href);
```

----------------------------------------

TITLE: Importing the OS Module (ESM)
DESCRIPTION: Demonstrates how to import the 'os' module in Node.js using ECMAScript Modules (ESM) syntax. This allows access to operating system-related utility methods and properties.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/os.md#_snippet_0

LANGUAGE: mjs
CODE:
```
import os from 'node:os';
```

----------------------------------------

TITLE: Create Basic HTTP/2 Server (MJS)
DESCRIPTION: Demonstrates creating an unencrypted HTTP/2 server using `http2.createServer` in ES module syntax. It sets up an event listener for incoming streams (`'stream'`), responds with a 200 status and simple HTML, and starts the server listening on port 8000.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_41

LANGUAGE: javascript
CODE:
```
import { createServer } from 'node:http2';

// Create an unencrypted HTTP/2 server.
// Since there are no browsers known that support
// unencrypted HTTP/2, the use of `createSecureServer()`
// is necessary when communicating with browser clients.
const server = createServer();

server.on('stream', (stream, headers) => {
  stream.respond({
    'content-type': 'text/html; charset=utf-8',
    ':status': 200,
  });
  stream.end('<h1>Hello World</h1>');
});

server.listen(8000);
```

----------------------------------------

TITLE: Creating a definitely asynchronous function (CJS)
DESCRIPTION: This example demonstrates how to use process.nextTick() to ensure that a function behaves asynchronously, even when a condition is met that would otherwise cause it to execute synchronously. This helps avoid unexpected behavior and race conditions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_103

LANGUAGE: cjs
CODE:
```
const { nextTick } = require('node:process');

function definitelyAsync(arg, cb) {
  if (arg) {
    nextTick(cb);
    return;
  }

  fs.stat('file', cb);
}
```

----------------------------------------

TITLE: Fetching JSON data from a URL using fetch API (mjs)
DESCRIPTION: This code snippet demonstrates how to use the `fetch` function to retrieve JSON data from a specified URL. It checks if the response is successful and then parses the JSON data. The parsed data is then logged to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/globals.md#_snippet_5

LANGUAGE: mjs
CODE:
```
const res = await fetch('https://nodejs.org/api/documentation.json');
if (res.ok) {
  const data = await res.json();
  console.log(data);
}
```

----------------------------------------

TITLE: Using RetryAgent to Automatically Retry HTTP Requests in JavaScript
DESCRIPTION: Example demonstrating how to create and use a RetryAgent to make HTTP requests with automatic retry functionality. The code creates a RetryAgent that wraps a standard Agent instance and then performs a request to example.com with built-in retry capabilities.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/RetryAgent.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import { Agent, RetryAgent } from 'undici'

const agent = new RetryAgent(new Agent())

const res = await agent.request('http://example.com')
console.log(res.statusCode)
console.log(await res.body.text())
```

----------------------------------------

TITLE: Deep Strict Equal Assertions with Objects and Primitives (MJS)
DESCRIPTION: This code demonstrates the behavior of `assert.deepStrictEqual` when comparing objects and primitive values in Node.js using modern JavaScript modules. It covers comparisons of objects with different prototypes, type tags, number objects, string objects, symbols, weakmaps, and weaksets. It highlights the strict equality checks performed by `deepStrictEqual` and how it handles different data types and object properties.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#_snippet_15

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert/strict';

// This fails because 1 !== '1'.
assert.deepStrictEqual({ a: 1 }, { a: '1' });
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected
//
//   {
// +   a: 1
// -   a: '1'
//   }

// The following objects don't have own properties
const date = new Date();
const object = {};
const fakeDate = {};
Object.setPrototypeOf(fakeDate, Date.prototype);

// Different [[Prototype]]:
assert.deepStrictEqual(object, fakeDate);
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected
//
// + {}
// - Date {}

// Different type tags:
assert.deepStrictEqual(date, fakeDate);
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected
//
// + 2018-04-26T00:49:08.604Z
// - Date {}

assert.deepStrictEqual(NaN, NaN);
// OK because Object.is(NaN, NaN) is true.

// Different unwrapped numbers:
assert.deepStrictEqual(new Number(1), new Number(2));
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected
//
// + [Number: 1]
// - [Number: 2]

assert.deepStrictEqual(new String('foo'), Object('foo'));
// OK because the object and the string are identical when unwrapped.

assert.deepStrictEqual(-0, -0);
// OK

// Different zeros:
assert.deepStrictEqual(0, -0);
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected
//
// + 0
// - -0

const symbol1 = Symbol();
const symbol2 = Symbol();
assert.deepStrictEqual({ [symbol1]: 1 }, { [symbol1]: 1 });
// OK, because it is the same symbol on both objects.

assert.deepStrictEqual({ [symbol1]: 1 }, { [symbol2]: 1 });
// AssertionError [ERR_ASSERTION]: Inputs identical but not reference equal:
//
// {
//   Symbol(): 1
// }

const weakMap1 = new WeakMap();
const weakMap2 = new WeakMap();
const obj = {};

weakMap1.set(obj, 'value');
weakMap2.set(obj, 'value');

// Comparing different instances fails, even with same contents
assert.deepStrictEqual(weakMap1, weakMap2);
// AssertionError: Values have same structure but are not reference-equal:
//
// WeakMap {
//   <items unknown>
// }

// Comparing the same instance to itself succeeds
assert.deepStrictEqual(weakMap1, weakMap1);
// OK

const weakSet1 = new WeakSet();
const weakSet2 = new WeakSet();
weakSet1.add(obj);
weakSet2.add(obj);

// Comparing different instances fails, even with same contents
assert.deepStrictEqual(weakSet1, weakSet2);
// AssertionError: Values have same structure but are not reference-equal:
// + actual - expected
//
// WeakSet {
//   <items unknown>
// }

// Comparing the same instance to itself succeeds
assert.deepStrictEqual(weakSet1, weakSet1);
// OK
```

----------------------------------------

TITLE: Installing NPM Packages with Version Ranges
DESCRIPTION: Examples of installing packages using version range specifications.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-install.md#2025-04-23_snippet_8

LANGUAGE: bash
CODE:
```
npm install sax@">=0.1.0 <0.2.0"
npm install @myorg/privatepackage@"16 - 17"
```

----------------------------------------

TITLE: Initializing an ESM-Compatible Package
DESCRIPTION: Example of creating a new ESM-compatible package using the create-esm initializer.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-init.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ mkdir my-esm-lib && cd my-esm-lib
$ npm init esm --yes
```

----------------------------------------

TITLE: Basic GET Request with Undici Client
DESCRIPTION: This example shows how to perform a basic GET request using Undici's request method. It demonstrates how to handle the response including status code, headers, and body, as well as proper resource cleanup with client and server closures.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  response.end('Hello, World!')
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

try {
  const { body, headers, statusCode, trailers } = await client.request({
    path: '/',
    method: 'GET'
  })
  console.log(`response received ${statusCode}`)
  console.log('headers', headers)
  body.setEncoding('utf8')
  body.on('data', console.log)
  body.on('error', console.error)
  body.on('end', () => {
    console.log('trailers', trailers)
  })

  client.close()
  server.close()
} catch (error) {
  console.error(error)
}
```

----------------------------------------

TITLE: Parsing File Paths in Node.js
DESCRIPTION: The path.parse() method breaks a path string into an object containing its components: root, dir, base, name, and ext. It handles both POSIX and Windows path formats correctly.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_33

LANGUAGE: javascript
CODE:
```
path.parse('/home/user/dir/file.txt');
// Returns:
// { root: '/',
//   dir: '/home/user/dir',
//   base: 'file.txt',
//   ext: '.txt',
//   name: 'file' }
```

LANGUAGE: text
CODE:
```
┌─────────────────────┬────────────┐
│          dir        │    base    │
├──────┬              ├──────┬─────┤
│ root │              │ name │ ext │
"  /    home/user/dir / file  .txt "
└──────┴──────────────┴──────┴─────┘
(All spaces in the "" line should be ignored. They are purely for formatting.)
```

LANGUAGE: javascript
CODE:
```
path.parse('C:\\path\\dir\\file.txt');
// Returns:
// { root: 'C:\\',
//   dir: 'C:\\path\\dir',
//   base: 'file.txt',
//   ext: '.txt',
//   name: 'file' }
```

LANGUAGE: text
CODE:
```
┌─────────────────────┬────────────┐
│          dir        │    base    │
├──────┬              ├──────┬─────┤
│ root │              │ name │ ext │
" C:\\      path\\dir   \\ file  .txt "
└──────┴──────────────┴──────┴─────┘
(All spaces in the "" line should be ignored. They are purely for formatting.)
```

----------------------------------------

TITLE: Creating Readable Streams from Async Generators in Node.js
DESCRIPTION: Demonstrates how to create a readable stream from an asynchronous generator function using `Readable.from()`. It includes setting up an AbortController to handle stream closure and attaching a 'data' event listener to process stream chunks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_105

LANGUAGE: javascript
CODE:
```
const { Readable } = require('node:stream');

const ac = new AbortController();
const signal = ac.signal;

async function * generate() {
  yield 'a';
  await someLongRunningFn({ signal });
  yield 'b';
  yield 'c';
}

const readable = Readable.from(generate());
readable.on('close', () => {
  ac.abort();
});

readable.on('data', (chunk) => {
  console.log(chunk);
});
```

----------------------------------------

TITLE: Handling Backpressure with Writable Streams
DESCRIPTION: This example demonstrates how to handle backpressure when writing data to a writable stream. It uses the writer.write() method's return value to determine if the stream is ready for more data and uses the 'drain' event to resume writing when the stream is ready.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
// Write the data to the supplied writable stream one million times.
// Be attentive to back-pressure.
function writeOneMillionTimes(writer, data, encoding, callback) {
  let i = 1000000;
  write();
  function write() {
    let ok = true;
    do {
      i--;
      if (i === 0) {
        // Last time!
        writer.write(data, encoding, callback);
      } else {
        // See if we should continue, or wait.
        // Don't pass the callback, because we're not done yet.
        ok = writer.write(data, encoding);
      }
    } while (i > 0 && ok);
    if (i > 0) {
      // Had to stop early!
      // Write some more once it drains.
      writer.once('drain', write);
    }
  }
}
```

----------------------------------------

TITLE: Accessing Node.js Version - JavaScript
DESCRIPTION: This code snippet shows how to access the Node.js version string using `process.version`. It demonstrates both ES module and CommonJS syntax. The `version` property is accessed to retrieve the current Node.js version, which is then printed to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_141

LANGUAGE: mjs
CODE:
```
import { version } from 'node:process';

console.log(`Version: ${version}`);
// Version: v14.8.0
```

LANGUAGE: cjs
CODE:
```
const { version } = require('node:process');

console.log(`Version: ${version}`);
// Version: v14.8.0
```

----------------------------------------

TITLE: Importing the OS Module (CJS)
DESCRIPTION: Demonstrates how to import the 'os' module in Node.js using CommonJS (CJS) syntax. This allows access to operating system-related utility methods and properties.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/os.md#_snippet_1

LANGUAGE: cjs
CODE:
```
const os = require('node:os');
```

----------------------------------------

TITLE: Using AsyncLocalStorage.snapshot() to Replace AsyncResource in JavaScript
DESCRIPTION: This code demonstrates how AsyncLocalStorage.snapshot() can replace AsyncResource for simple async context tracking. It defines a class Foo that uses snapshot to capture the AsyncLocalStorage context and access it within the get() method.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/async_context.md#_snippet_5

LANGUAGE: javascript
CODE:
```
class Foo {
  #runInAsyncScope = AsyncLocalStorage.snapshot();

  get() { return this.#runInAsyncScope(() => asyncLocalStorage.getStore()); }
}

const foo = asyncLocalStorage.run(123, () => new Foo());
console.log(asyncLocalStorage.run(321, () => foo.get())); // returns 123
```

----------------------------------------

TITLE: Getting Max Listeners for EventEmitter and EventTarget (ESM)
DESCRIPTION: This snippet demonstrates how to retrieve and set the maximum number of listeners for both EventEmitter and EventTarget objects using ES modules. It imports `getMaxListeners`, `setMaxListeners`, and `EventEmitter` from the `node:events` module. The default max listener count is 10, which is then changed to 11.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_54

LANGUAGE: mjs
CODE:
```
import { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';

{
  const ee = new EventEmitter();
  console.log(getMaxListeners(ee)); // 10
  setMaxListeners(11, ee);
  console.log(getMaxListeners(ee)); // 11
}
{
  const et = new EventTarget();
  console.log(getMaxListeners(et)); // 10
  setMaxListeners(11, et);
  console.log(getMaxListeners(et)); // 11
}
```

----------------------------------------

TITLE: Adding a connection listener using `on` in JavaScript
DESCRIPTION: This code snippet demonstrates how to add a listener function to an EventEmitter object for the 'connection' event. The listener function is executed whenever the 'connection' event is emitted. It prints a message to the console when a connection is established.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_33

LANGUAGE: js
CODE:
```
server.on('connection', (stream) => {
  console.log('someone connected!');
});
```

----------------------------------------

TITLE: NPM Outdated Command Example Output
DESCRIPTION: Demonstrates example output of the npm outdated command showing package versions including current, wanted, and latest versions along with their locations and dependent packages.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-outdated.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ npm outdated
Package      Current   Wanted   Latest  Location                  Depended by
glob          5.0.15   5.0.15    6.0.1  node_modules/glob         dependent-package-name
nothingness    0.0.3      git      git  node_modules/nothingness  dependent-package-name
npm            3.5.1    3.5.2    3.5.1  node_modules/npm          dependent-package-name
local-dev      0.0.3   linked   linked  local-dev                 dependent-package-name
once           1.3.2    1.3.3    1.3.3  node_modules/once         dependent-package-name
```

----------------------------------------

TITLE: Handling uncaught exceptions with CommonJS modules
DESCRIPTION: This code snippet demonstrates how to handle 'uncaughtException' events using CommonJS modules in Node.js. It registers a handler that logs the error and origin to stderr. The example intentionally causes an exception to trigger the handler.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_9

LANGUAGE: cjs
CODE:
```
const process = require('node:process');
const fs = require('node:fs');

process.on('uncaughtException', (err, origin) => {
  fs.writeSync(
    process.stderr.fd,
    `Caught exception: ${err}\n` +
    `Exception origin: ${origin}\n`,
  );
});

setTimeout(() => {
  console.log('This will still run.');
}, 500);

// Intentionally cause an exception, but don't catch it.
nonexistentFunc();
console.log('This will not run.');
```

----------------------------------------

TITLE: Returning JavaScript Functions from C++ with V8 (C++)
DESCRIPTION: Implements a C++ factory addon that creates and returns a JavaScript function from C++ using V8's FunctionTemplate. The returned function, when called, returns the string 'hello world'. The function is named 'theFunction' for identification. Requires node-gyp and V8 APIs to build; exposes only the factory to JavaScript via module.exports.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/addons.md#2025-04-23_snippet_19

LANGUAGE: cpp
CODE:
```
// addon.cc\n#include <node.h>\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid MyFunction(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n  args.GetReturnValue().Set(String::NewFromUtf8(\n      isolate, \"hello world\").ToLocalChecked());\n}\n\nvoid CreateFunction(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n\n  Local<Context> context = isolate->GetCurrentContext();\n  Local<FunctionTemplate> tpl = FunctionTemplate::New(isolate, MyFunction);\n  Local<Function> fn = tpl->GetFunction(context).ToLocalChecked();\n\n  // omit this to make it anonymous\n  fn->SetName(String::NewFromUtf8(\n      isolate, \"theFunction\").ToLocalChecked());\n\n  args.GetReturnValue().Set(fn);\n}\n\nvoid Init(Local<Object> exports, Local<Object> module) {\n  NODE_SET_METHOD(module, \"exports\", CreateFunction);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, Init)\n\n}  // namespace demo\n
```

----------------------------------------

TITLE: Creating Global and Local Package Links in Bash
DESCRIPTION: Demonstrates how to create a global link for a package and then link it to another project.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-link.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
cd ~/projects/node-redis    # go into the package directory
npm link                    # creates global link
cd ~/projects/node-bloggy   # go into some other package directory.
npm link redis              # link-install the package
```

----------------------------------------

TITLE: Checking Main Thread with `isMainThread` in Worker Threads (CJS)
DESCRIPTION: This code snippet demonstrates how to use `isMainThread` to determine if the current code is running in the main thread or a worker thread. If it's the main thread, it creates a new worker. Otherwise, it prints a message indicating it's running inside a worker thread and prints the value of `isMainThread`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#_snippet_9

LANGUAGE: cjs
CODE:
```
'use strict';

const { Worker, isMainThread } = require('node:worker_threads');

if (isMainThread) {
  // This re-loads the current file inside a Worker instance.
  new Worker(__filename);
} else {
  console.log('Inside Worker!');
  console.log(isMainThread);  // Prints 'false'.
}
```

----------------------------------------

TITLE: Synchronous operations in 'exit' event
DESCRIPTION: Illustrates that listener functions for the 'exit' event must only perform synchronous operations. Asynchronous operations, like `setTimeout`, will be abandoned. Includes both ESM and CJS versions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_3

LANGUAGE: mjs
CODE:
```
import process from 'node:process';

process.on('exit', (code) => {
  setTimeout(() => {
    console.log('This will not run');
  }, 0);
});
```

LANGUAGE: cjs
CODE:
```
const process = require('node:process');

process.on('exit', (code) => {
  setTimeout(() => {
    console.log('This will not run');
  }, 0);
});
```

----------------------------------------

TITLE: Example package.json with caret dependency below 1.0.0 in JSON
DESCRIPTION: An example of a package.json file with a caret (^) dependency for a version below 1.0.0, which behaves differently than for versions 1.0.0 and above.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-update.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
"dependencies": {
  "dep1": "^0.2.0"
}
```

----------------------------------------

TITLE: Handling error events with EventEmitter in Node.js (CJS)
DESCRIPTION: This code demonstrates how to handle error events in an EventEmitter instance. If an EventEmitter does not have at least one listener registered for the 'error' event, and an 'error' event is emitted, the error is thrown, a stack trace is printed, and the Node.js process exits. This example shows the crashing behavior. The example uses CommonJS.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_13

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.emit('error', new Error('whoops!'));
// Throws and crashes Node.js
```

----------------------------------------

TITLE: Buffer to JSON Conversion
DESCRIPTION: Demonstrates how to convert a Buffer to its JSON representation using `buf.toJSON()` and how to reconstruct the Buffer from the JSON string. It shows the structure of the JSON output and how to use `JSON.parse()` with a reviver function to create a Buffer instance from the JSON data. Requires the 'node:buffer' module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_129

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);
const json = JSON.stringify(buf);

console.log(json);
// Prints: {"type":"Buffer","data":[1,2,3,4,5]}

const copy = JSON.parse(json, (key, value) => {
  return value && value.type === 'Buffer' ?
    Buffer.from(value) :
    value;
});

console.log(copy);
// Prints: <Buffer 01 02 03 04 05>
```

----------------------------------------

TITLE: Subpath Exports for Selective Module Exposure (JSON)
DESCRIPTION: Defines custom subpath-to-file export mappings in package.json using the exports field, which enables selective exposure of internal modules to consumers. The root entry is mapped via "." and additional submodules are mapped to their respective files, blocking access to all other files not specified. Requires Node.js v12.7.0 or later and results in import errors for undefined subpaths.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_8

LANGUAGE: json
CODE:
```
{
  "exports": {
    ".": "./index.js",
    "./submodule.js": "./src/submodule.js"
  }
}
```

----------------------------------------

TITLE: Creating HTTP Server with Request Listener (ESM)
DESCRIPTION: Demonstrates creating a basic HTTP server using `http.createServer` with an inline request listener function in ECMAScript Module syntax. The listener handles incoming requests and sends a simple JSON response.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_72

LANGUAGE: mjs
CODE:
```
import http from 'node:http';

// Create a local server to receive data from
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
```

----------------------------------------

TITLE: Getting the Platform using process.platform (CJS)
DESCRIPTION: This code snippet demonstrates how to retrieve the operating system platform using the `process.platform` property in Node.js using CommonJS modules (CJS). It requires the `node:process` module and logs the platform to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_111

LANGUAGE: JavaScript
CODE:
```
const { platform } = require('node:process');

console.log(`This platform is ${platform}`);
```

----------------------------------------

TITLE: Deleting File with fs (Sync, ESM)
DESCRIPTION: This example demonstrates deleting a file synchronously using the `unlinkSync` function from 'node:fs' in an ES Module context. Synchronous operations block the event loop, and errors are thrown immediately, requiring a `try...catch` block for handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_8

LANGUAGE: mjs
CODE:
```
import { unlinkSync } from 'node:fs';

try {
  unlinkSync('/tmp/hello');
  console.log('successfully deleted /tmp/hello');
} catch (err) {
  // handle the error
}
```

----------------------------------------

TITLE: Hash Digest using update() and digest() Methods - Node.js Crypto (JavaScript ESM)
DESCRIPTION: This code demonstrates updating a hash with string data and obtaining the digest in hexadecimal format, using ESM (async 'import'). The crypto module's createHash function initializes SHA-256; hash.update() feeds data and hash.digest('hex') outputs the hash. Node.js and 'node:crypto' module required. Cannot reuse the hash object after digest().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_30

LANGUAGE: JavaScript
CODE:
```
const {
  createHash,
} = await import('node:crypto');

const hash = createHash('sha256');

hash.update('some data to hash');
console.log(hash.digest('hex'));
// Prints:
//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50
```

----------------------------------------

TITLE: Set NODE_OPTIONS with Spaces in Path (Bash)
DESCRIPTION: Demonstrates how to set the `NODE_OPTIONS` environment variable when an option value, such as a file path, contains spaces. The value containing spaces must be enclosed in double quotes within the single quotes of the variable assignment.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_55

LANGUAGE: bash
CODE:
```
NODE_OPTIONS='--require "./my path/file.js"'
```

----------------------------------------

TITLE: Writing File Safely with fs.open (RECOMMENDED) - Node.js JavaScript
DESCRIPTION: The recommended approach for writing to a file, using fs.open with the 'wx' flag. This flag ensures the file is created exclusively, preventing race conditions by failing directly if the file already exists. Error handling checks for the 'EEXIST' code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_50

LANGUAGE: JavaScript
CODE:
```
import { open, close } from 'node:fs';
open('myfile', 'wx', (err, fd) => {
  if (err) {
    if (err.code === 'EEXIST') {
      console.error('myfile already exists');
      return;
    }

    throw err;
  }

  try {
    writeMyData(fd);
  } finally {
    close(fd, (err) => {
      if (err) throw err;
    });
  }
});
```

----------------------------------------

TITLE: Asynchronous Directory Creation with mkdirp in JavaScript
DESCRIPTION: Demonstrates the asynchronous usage of the `mkdirp` function from the 'mkdirp' module in Node.js. It shows how to import the function using both ES Modules (`import`) and CommonJS (`require`). The example creates a directory path recursively and logs the first directory created upon successful completion of the promise.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/cacache/node_modules/mkdirp/readme.markdown#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
// hybrid module, import or require() both work
import { mkdirp } from 'mkdirp'
// or:
const { mkdirp } = require('mkdirp')

// return value is a Promise resolving to the first directory created
mkdirp('/tmp/foo/bar/baz').then(made =>
  console.log(`made directories, starting with ${made}`)
)
```

----------------------------------------

TITLE: Consuming Readable Stream with Async Iterator
DESCRIPTION: Demonstrates how to consume a readable stream using an async iterator in JavaScript.  The code iterates over chunks of data from the readable stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_104

LANGUAGE: javascript
CODE:
```
(async function() {
  for await (const chunk of readable) {
    console.log(chunk);
  }
})();
```

----------------------------------------

TITLE: Allocating and Filling a Buffer with Base64 Encoding in Node.js (ESM)
DESCRIPTION: This code demonstrates how to allocate a new Buffer of a specified size and fill it with a base64 encoded string using Buffer.alloc(). It imports the Buffer class from the node:buffer module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_23

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');

console.log(buf);
// Prints: <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>
```

----------------------------------------

TITLE: Define a Test Suite in Node.js
DESCRIPTION: An alias for the `suite()` function, used to group related test cases. It accepts an optional name, configuration options, and a function containing the suite's tests.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_48

LANGUAGE: javascript
CODE:
```
describe([name][, options][, fn])
```

----------------------------------------

TITLE: Piping streams with pipeline API
DESCRIPTION: This example demonstrates a basic pipeline that reads from a file, compresses it using gzip, and writes the compressed data to another file. It uses the pipeline function from node:stream/promises for simplified stream management and error handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_1

LANGUAGE: cjs
CODE:
```
const { pipeline } = require('node:stream/promises');
const fs = require('node:fs');
const zlib = require('node:zlib');

async function run() {
  await pipeline(
    fs.createReadStream('archive.tar'),
    zlib.createGzip(),
    fs.createWriteStream('archive.tar.gz'),
  );
  console.log('Pipeline succeeded.');
}

run().catch(console.error);
```

----------------------------------------

TITLE: MockClient Request with Intercepted Response
DESCRIPTION: Demonstrates the full workflow of creating a MockClient, intercepting a specific path with a predefined response, and then making a request to that path. The example shows how to extract the status code and read the response body.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockClient.md#2025-04-23_snippet_1

LANGUAGE: js
CODE:
```
import { MockAgent } from 'undici'

const mockAgent = new MockAgent({ connections: 1 })

const mockClient = mockAgent.get('http://localhost:3000')
mockClient.intercept({ path: '/foo' }).reply(200, 'foo')

const {
  statusCode,
  body
} = await mockClient.request({
  origin: 'http://localhost:3000',
  path: '/foo',
  method: 'GET'
})

console.log('response received', statusCode) // response received 200

for await (const data of body) {
  console.log('data', data.toString('utf8')) // data foo
}
```

----------------------------------------

TITLE: Package Type Configuration
DESCRIPTION: Example of setting module type in package.json for ES modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_26

LANGUAGE: json
CODE:
```
{
  "type": "module"
}
```

----------------------------------------

TITLE: Using Body Mixins with Undici
DESCRIPTION: Example demonstrating how to use body mixins to parse response data into JSON format. Shows proper response handling with status code and headers.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { request } from 'undici'

const {
  statusCode,
  headers,
  trailers,
  body
} = await request('http://localhost:3000/foo')

console.log('response received', statusCode)
console.log('headers', headers)
console.log('data', await body.json())
console.log('trailers', trailers)
```

----------------------------------------

TITLE: Generating AES Key using Web Crypto API in JavaScript
DESCRIPTION: This function generates an AES-CBC key using the Web Crypto API. It creates a symmetric key that can be used for encryption and decryption operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

async function generateAesKey(length = 256) {
  const key = await subtle.generateKey({
    name: 'AES-CBC',
    length,
  }, true, ['encrypt', 'decrypt']);

  return key;
}
```

----------------------------------------

TITLE: Inter-Process Communication using worker.send() in Node.js Cluster
DESCRIPTION: Illustrates basic message passing between the primary process and a worker using the Node.js cluster module. The primary sends a message using `worker.send()`, and the worker listens for messages using `process.on('message')` and echoes them back to the primary using `process.send()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_9

LANGUAGE: js
CODE:
```
if (cluster.isPrimary) {
  const worker = cluster.fork();
  worker.send('hi there');

} else if (cluster.isWorker) {
  process.on('message', (msg) => {
    process.send(msg);
  });
}
```

----------------------------------------

TITLE: Generate LCOV Coverage Report
DESCRIPTION: Run Node.js tests with experimental coverage enabled and output an LCOV format report to a specified file. This reporter does not show test results and is typically used alongside another reporter.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_19

LANGUAGE: bash
CODE:
```
node --test --experimental-test-coverage --test-reporter=lcov --test-reporter-destination=lcov.info
```

----------------------------------------

TITLE: Parsing a URL string using WHATWG API
DESCRIPTION: Parses a URL string using the WHATWG URL API, creating a URL object with properties for each component. This example demonstrates how to create a URL object from a complete URL string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_2

LANGUAGE: js
CODE:
```
const myURL =
  new URL('https://user:pass@sub.example.com:8080/p/a/t/h?query=string#hash');
```

----------------------------------------

TITLE: Handling error events with EventEmitter in Node.js (ESM)
DESCRIPTION: This code demonstrates how to handle error events in an EventEmitter instance. If an EventEmitter does not have at least one listener registered for the 'error' event, and an 'error' event is emitted, the error is thrown, a stack trace is printed, and the Node.js process exits. This example shows the crashing behavior. The example uses ES modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_12

LANGUAGE: mjs
CODE:
```
import { EventEmitter } from 'node:events';
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.emit('error', new Error('whoops!'));
// Throws and crashes Node.js
```

----------------------------------------

TITLE: Finding a Chunk in a Readable Stream using find in Node.js
DESCRIPTION: This code demonstrates how to use the `find` method on a Readable stream to locate the first chunk that satisfies a given condition. It showcases both synchronous and asynchronous predicate functions, including an example with file size checks using `fs.promises.stat`. The concurrency option limits the number of concurrent asynchronous operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_51

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';
import { stat } from 'node:fs/promises';

// With a synchronous predicate.
await Readable.from([1, 2, 3, 4]).find((x) => x > 2); // 3
await Readable.from([1, 2, 3, 4]).find((x) => x > 0); // 1
await Readable.from([1, 2, 3, 4]).find((x) => x > 10); // undefined

// With an asynchronous predicate, making at most 2 file checks at a time.
const foundBigFile = await Readable.from([
  'file1',
  'file2',
  'file3',
]).find(async (fileName) => {
  const stats = await stat(fileName);
  return stats.size > 1024 * 1024;
}, { concurrency: 2 });
console.log(foundBigFile); // File name of large file, if any file in the list is bigger than 1MB
console.log('done'); // Stream has finished
```

----------------------------------------

TITLE: Parsing Command-Line Arguments with util.parseArgs (ESM)
DESCRIPTION: This code snippet demonstrates how to use the `util.parseArgs` function to parse command-line arguments in ECMAScript Modules (ESM) syntax. It defines an array of arguments and an options object specifying the types and short aliases for the expected arguments. The parsed values and positional arguments are then printed to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#_snippet_60

LANGUAGE: mjs
CODE:
```
import { parseArgs } from 'node:util';
const args = ['-f', '--bar', 'b'];
const options = {
  foo: {
    type: 'boolean',
    short: 'f',
  },
  bar: {
    type: 'string',
  },
};
const {
  values,
  positionals,
} = parseArgs({ args, options });
console.log(values, positionals);
// Prints: [Object: null prototype] { foo: true, bar: 'b' } []
```

----------------------------------------

TITLE: AES Encryption and Decryption using Web Crypto API in JavaScript
DESCRIPTION: These functions demonstrate AES-CBC encryption and decryption using the Web Crypto API. They handle key generation, initialization vector creation, and the actual encryption and decryption processes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
const crypto = globalThis.crypto;

async function aesEncrypt(plaintext) {
  const ec = new TextEncoder();
  const key = await generateAesKey();
  const iv = crypto.getRandomValues(new Uint8Array(16));

  const ciphertext = await crypto.subtle.encrypt({
    name: 'AES-CBC',
    iv,
  }, key, ec.encode(plaintext));

  return {
    key,
    iv,
    ciphertext,
  };
}

async function aesDecrypt(ciphertext, key, iv) {
  const dec = new TextDecoder();
  const plaintext = await crypto.subtle.decrypt({
    name: 'AES-CBC',
    iv,
  }, key, ciphertext);

  return dec.decode(plaintext);
}
```

----------------------------------------

TITLE: Adding and Prepending Listeners with `on` and `prependListener` in CommonJS
DESCRIPTION: This code demonstrates how to add a listener to the end and beginning of the listeners array for the 'foo' event using `on` and `prependListener` in a CommonJS module. When the 'foo' event is emitted, the listeners are invoked in the order they were added, resulting in 'b' being printed before 'a'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_35

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');
const myEE = new EventEmitter();
myEE.on('foo', () => console.log('a'));
myEE.prependListener('foo', () => console.log('b'));
myEE.emit('foo');
// Prints:
//   b
//   a
```

----------------------------------------

TITLE: Creating Directories Synchronously with fs.mkdirSync in Node.js
DESCRIPTION: Synchronously creates a directory at the specified `path`. This function implements the behavior of the POSIX mkdir(2) system call. It accepts an optional `options` object to specify the directory `mode` (not supported on Windows) and whether to create parent directories recursively (`recursive`). It returns `undefined` on success, or the first directory path created if `recursive` is `true`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_104

LANGUAGE: Node.js
CODE:
```
fs.mkdirSync(path[, options])
```

----------------------------------------

TITLE: Scoped Package Configuration Example
DESCRIPTION: Shows configuration and usage of a scoped package with exports.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_25

LANGUAGE: json
CODE:
```
{
  "name": "@my/package",
  "exports": "./index.js"
}
```

LANGUAGE: javascript
CODE:
```
module.exports = 42;
```

LANGUAGE: javascript
CODE:
```
console.log(require('@my/package'));
```

----------------------------------------

TITLE: Fetching JSON using http.get (Node.js)
DESCRIPTION: Illustrates how to use `http.get` to make a GET request to a local server, handle the response stream, check status code and content type, parse the received JSON data, and manage potential errors during the request or parsing process. Includes a simple server setup for the example target.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_76

LANGUAGE: js
CODE:
```
http.get('http://localhost:8000/', (res) => {
  const { statusCode } = res;
  const contentType = res.headers['content-type'];

  let error;
  // Any 2xx status code signals a successful response but
  // here we're only checking for 200.
  if (statusCode !== 200) {
    error = new Error('Request Failed.\n' +
                      `Status Code: ${statusCode}`);
  } else if (!/^application\/json/.test(contentType)) {
    error = new Error('Invalid content-type.\n' +
                      `Expected application\/json but received ${contentType}`);
  }
  if (error) {
    console.error(error.message);
    // Consume response data to free up memory
    res.resume();
    return;
  }

  res.setEncoding('utf8');
  let rawData = '';
  res.on('data', (chunk) => { rawData += chunk; });
  res.on('end', () => {
    try {
      const parsedData = JSON.parse(rawData);
      console.log(parsedData);
    } catch (e) {
      console.error(e.message);
    }
  });
}).on('error', (e) => {
  console.error(`Got error: ${e.message}`);
});

// Create a local server to receive data from
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    data: 'Hello World!',
  }));
});

server.listen(8000);
```

----------------------------------------

TITLE: Parsing Arguments with Tokens and Handling Negated Options (CJS)
DESCRIPTION: This code snippet demonstrates how to use `parseArgs` with the `tokens: true` option to get detailed parse information. It then reprocesses the tokens to handle negated options like `--no-color` and `--no-logfile`, setting the corresponding positive option to `false`. The last option specified wins if both positive and negative options are present. Requires the `node:util` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#_snippet_63

LANGUAGE: cjs
CODE:
```
const { parseArgs } = require('node:util');

const options = {
  'color': { type: 'boolean' },
  'no-color': { type: 'boolean' },
  'logfile': { type: 'string' },
  'no-logfile': { type: 'boolean' },
};
const { values, tokens } = parseArgs({ options, tokens: true });

// Reprocess the option tokens and overwrite the returned values.
tokens
  .filter((token) => token.kind === 'option')
  .forEach((token) => {
    if (token.name.startsWith('no-')) {
      // Store foo:false for --no-foo
      const positiveName = token.name.slice(3);
      values[positiveName] = false;
      delete values[token.name];
    } else {
      // Resave value so last one wins if both --foo and --no-foo.
      values[token.name] = token.value ?? true;
    }
  });

const color = values.color;
const logfile = values.logfile ?? 'default.log';

console.log({ logfile, color });
```

----------------------------------------

TITLE: Defining Test Script in package.json
DESCRIPTION: Demonstrates how to define a test script in package.json using a locally installed dependency (tap).
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-run-script.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
"scripts": {"test": "tap test/*.js"}
```

----------------------------------------

TITLE: Using promisified fs.stat with async/await (CJS)
DESCRIPTION: This code snippet demonstrates how to use `util.promisify` with `async` and `await` to convert the `fs.stat` function into a promise-returning function. It requires `promisify` from `node:util` and `stat` from `node:fs`, then uses `promisify` to create `promisifiedStat`. The example defines an `async` function `callStat` that awaits the result of `promisifiedStat('.')` and then logs the `uid` property of the stats object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#_snippet_70

LANGUAGE: cjs
CODE:
```
const { promisify } = require('node:util');
const { stat } = require('node:fs');

const promisifiedStat = promisify(stat);

async function callStat() {
  const stats = await promisifiedStat('.');
  console.log(`This directory is owned by ${stats.uid}`);
}

callStat();
```

----------------------------------------

TITLE: Compressing HTTP responses on the server (ESM)
DESCRIPTION: This code snippet demonstrates how to compress HTTP responses on the server using the `zlib` module. It checks the `Accept-Encoding` header from the client request and applies the appropriate compression method (`deflate`, `gzip`, or `br`) before sending the response. The `pipeline` function is used for efficient stream management. Caching compressed buffers is recommended for performance.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#_snippet_11

LANGUAGE: mjs
CODE:
```
import zlib from 'node:zlib';
import http from 'node:http';
import fs from 'node:fs';
import { pipeline } from 'node:stream';

http.createServer((request, response) => {
  const raw = fs.createReadStream('index.html');
  // Store both a compressed and an uncompressed version of the resource.
  response.setHeader('Vary', 'Accept-Encoding');
  const acceptEncoding = request.headers['accept-encoding'] || '';

  const onError = (err) => {
    if (err) {
      // If an error occurs, there's not much we can do because
      // the server has already sent the 200 response code and
      // some amount of data has already been sent to the client.
      // The best we can do is terminate the response immediately
      // and log the error.
      response.end();
      console.error('An error occurred:', err);
    }
  };

  // Note: This is not a conformant accept-encoding parser.
  // See https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3
  if (/\bdeflate\b/.test(acceptEncoding)) {
    response.writeHead(200, { 'Content-Encoding': 'deflate' });
    pipeline(raw, zlib.createDeflate(), response, onError);
  } else if (/\bgzip\b/.test(acceptEncoding)) {
    response.writeHead(200, { 'Content-Encoding': 'gzip' });
    pipeline(raw, zlib.createGzip(), response, onError);
  } else if (/\bbr\b/.test(acceptEncoding)) {
    response.writeHead(200, { 'Content-Encoding': 'br' });
    pipeline(raw, zlib.createBrotliCompress(), response, onError);
  } else {
    response.writeHead(200, {});
    pipeline(raw, response, onError);
  }
}).listen(1337);
```

----------------------------------------

TITLE: Asserting Promise Rejection with Function - ES Module
DESCRIPTION: This snippet demonstrates how to use `assert.rejects` with a validation function to verify the properties of the rejected error in ES module format. It checks the `name` and `message` properties of the error using `assert.strictEqual`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#_snippet_63

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert/strict';

await assert.rejects(
  async () => {
    throw new TypeError('Wrong value');
  },
  (err) => {
    assert.strictEqual(err.name, 'TypeError');
    assert.strictEqual(err.message, 'Wrong value');
    return true;
  },
);
```

----------------------------------------

TITLE: Configuring Development Engine Requirements
DESCRIPTION: Specifies runtime and package manager requirements for development environments with custom failure behaviors.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_40

LANGUAGE: json
CODE:
```
{
  "devEngines": {
    "runtime": {
      "name": "node",
      "onFail": "error"
    },
    "packageManager": {
      "name": "npm",
      "onFail": "error"
    }
  }
}
```

----------------------------------------

TITLE: Exporting Functions via `exports` Object in Node.js CommonJS
DESCRIPTION: This snippet (`circle.js`) defines a CommonJS module that exports utility functions for circles. It exports `area` and `circumference` functions by attaching them as properties to the special `exports` object. The internal constant `PI` remains private to the module due to Node.js's module wrapper.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_1

LANGUAGE: js
CODE:
```
const { PI } = Math;

exports.area = (r) => PI * r ** 2;

exports.circumference = (r) => 2 * PI * r;
```

----------------------------------------

TITLE: TCP Echo Server in Node.js (CommonJS)
DESCRIPTION: Example of creating a TCP echo server that listens on port 8124 using CommonJS format. Demonstrates basic server creation and connection handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_31

LANGUAGE: cjs
CODE:
```
const net = require('node:net');
const server = net.createServer((c) => {
  // 'connection' listener.
  console.log('client connected');
  c.on('end', () => {
    console.log('client disconnected');
  });
  c.write('hello\r\n');
  c.pipe(c);
});
server.on('error', (err) => {
  throw err;
});
server.listen(8124, () => {
  console.log('server bound');
});
```

----------------------------------------

TITLE: Writing a String with Encoding using fs.writeFile (Node.js)
DESCRIPTION: Shows how to write a string directly to a file using `fs.writeFile`, specifying the encoding ('utf8') as the third argument when no other options are needed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_83

LANGUAGE: JavaScript
CODE:
```
import { writeFile } from 'node:fs';

writeFile('message.txt', 'Hello Node.js', 'utf8', callback);
```

----------------------------------------

TITLE: Node.js Module Wrapper Example - JavaScript
DESCRIPTION: This snippet illustrates how Node.js internally wraps each module in a function that provides local scoping and injects special variables like exports, require, module, __filename, and __dirname. This wrapping allows top-level variables to remain module-scoped and provides access to module-related data. The wrapper is not visible to user code, but all modules are evaluated inside this function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_17

LANGUAGE: JavaScript
CODE:
```
(function(exports, require, module, __filename, __dirname) {
// Module code actually lives in here
});
```

----------------------------------------

TITLE: Generating Self-Signed Server Certificate using OpenSSL
DESCRIPTION: Provides the `openssl` command to generate a self-signed X.509 certificate (`server-cert.pem`) and a corresponding 2048-bit RSA private key (`server-key.pem`) suitable for testing the Node.js TLS server examples. The `-nodes` option prevents encryption of the private key, and `-subj` sets the subject name, commonly '/CN=localhost' for local testing.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_28

LANGUAGE: bash
CODE:
```
openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' \
  -keyout server-key.pem -out server-cert.pem
```

----------------------------------------

TITLE: Writable Stream Simplified Constructor
DESCRIPTION: This example demonstrates the simplified constructor approach for creating a writable stream by directly providing the `write` and `writev` methods in the options object. This avoids the need to create a separate class.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_80

LANGUAGE: javascript
CODE:
```
const { Writable } = require('node:stream');

const myWritable = new Writable({
  write(chunk, encoding, callback) {
    // ...
  },
  writev(chunks, callback) {
    // ...
  },
});
```

----------------------------------------

TITLE: Specifying License in package.json
DESCRIPTION: Shows various ways to specify the license for a package, including using SPDX license identifiers for common licenses and custom license specifications.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
{
  "license" : "BSD-3-Clause"
}
```

LANGUAGE: json
CODE:
```
{
  "license" : "(ISC OR GPL-3.0)"
}
```

LANGUAGE: json
CODE:
```
{
  "license" : "SEE LICENSE IN <filename>"
}
```

----------------------------------------

TITLE: Using AbortController to signal abort
DESCRIPTION: This code demonstrates how to create an AbortController, attach an event listener to its signal, and then abort the controller.  The event listener will be triggered when the controller is aborted. The `once: true` option ensures the listener is only called once.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/globals.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const ac = new AbortController();

ac.signal.addEventListener('abort', () => console.log('Aborted!'),
                           { once: true });

ac.abort();

console.log(ac.signal.aborted);  // Prints true
```

----------------------------------------

TITLE: Concatenating Buffers using Buffer.concat in CJS
DESCRIPTION: This code snippet demonstrates how to concatenate multiple Buffer instances into a single Buffer using the Buffer.concat static method within a CommonJS module. It allocates three buffers, calculates the total length, and then concatenates them into a new buffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_34

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

// Create a single `Buffer` from a list of three `Buffer` instances.

const buf1 = Buffer.alloc(10);
const buf2 = Buffer.alloc(14);
const buf3 = Buffer.alloc(18);
const totalLength = buf1.length + buf2.length + buf3.length;

console.log(totalLength);
// Prints: 42

const bufA = Buffer.concat([buf1, buf2, buf3], totalLength);

console.log(bufA);
// Prints: <Buffer 00 00 00 00 ...>
console.log(bufA.length);
// Prints: 42
```

----------------------------------------

TITLE: Implementing Inter-Process Communication in a Node.js Cluster
DESCRIPTION: This example shows how to implement inter-process communication in a Node.js cluster. It keeps a count in the primary process of HTTP requests received by workers, demonstrating message passing between primary and worker processes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import cluster from 'node:cluster';
import http from 'node:http';
import { availableParallelism } from 'node:os';
import process from 'node:process';

if (cluster.isPrimary) {

  // Keep track of http requests
  let numReqs = 0;
  setInterval(() => {
    console.log(`numReqs = ${numReqs}`);
  }, 1000);

  // Count requests
  function messageHandler(msg) {
    if (msg.cmd && msg.cmd === 'notifyRequest') {
      numReqs += 1;
    }
  }

  // Start workers and listen for messages containing notifyRequest
  const numCPUs = availableParallelism();
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  for (const id in cluster.workers) {
    cluster.workers[id].on('message', messageHandler);
  }

} else {

  // Worker processes have a http server.
  http.Server((req, res) => {
    res.writeHead(200);
    res.end('hello world\n');

    // Notify primary about the request
    process.send({ cmd: 'notifyRequest' });
  }).listen(8000);
}
```

----------------------------------------

TITLE: Creating Secure HTTP/2 Server (ESM)
DESCRIPTION: This snippet demonstrates how to create a secure HTTP/2 server using `http2.createSecureServer` in Node.js with ES Module syntax. It configures the server with TLS certificates, listens for incoming streams, and sends a basic 'Hello World' HTML response. Required dependencies: `node:http2`, `node:fs`. Input: TLS certificate files. Output: An active secure HTTP/2 server listening on port 8443.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_43

LANGUAGE: nodejs
CODE:
```
import { createSecureServer } from 'node:http2';
import { readFileSync } from 'node:fs';

const options = {
  key: readFileSync('server-key.pem'),
  cert: readFileSync('server-cert.pem'),
};

// Create a secure HTTP/2 server
const server = createSecureServer(options);

server.on('stream', (stream, headers) => {
  stream.respond({
    'content-type': 'text/html; charset=utf-8',
    ':status': 200,
  });
  stream.end('<h1>Hello World</h1>');
});

server.listen(8443);
```

----------------------------------------

TITLE: Asynchronous Event Handling with EventEmitter (CJS)
DESCRIPTION: This code demonstrates how to handle events asynchronously using `setImmediate()`. This allows the listener function to be executed in a later iteration of the event loop, preventing blocking operations. This example uses CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_7

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on('event', (a, b) => {
  setImmediate(() => {
    console.log('this happens asynchronously');
  });
});
myEmitter.emit('event', 'a', 'b');
```

----------------------------------------

TITLE: Implementing Inheritance with ES6 class and extends in JavaScript (cjs)
DESCRIPTION: This snippet demonstrates how to use ES6 `class` and `extends` keywords for inheritance. It inherits from the `EventEmitter` class. The example shows how to add a method to the inherited class and emit an event.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#_snippet_27

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');

class MyStream extends EventEmitter {
  write(data) {
    this.emit('data', data);
  }
}

const stream = new MyStream();

stream.on('data', (data) => {
  console.log(`Received data: "${data}"`);
});
stream.write('With ES6');
```

----------------------------------------

TITLE: Digital Signature Update Method Example (ESM)
DESCRIPTION: Shows how to use sign.update() and verify.update() methods to create and verify digital signatures using RSA keys in ESM format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_43

LANGUAGE: mjs
CODE:
```
const {
  generateKeyPairSync,
  createSign,
  createVerify,
} = await import('node:crypto');

const { privateKey, publicKey } = generateKeyPairSync('rsa', {
  modulusLength: 2048,
});

const sign = createSign('SHA256');
sign.update('some data to sign');
sign.end();
const signature = sign.sign(privateKey);

const verify = createVerify('SHA256');
verify.update('some data to sign');
verify.end();
console.log(verify.verify(publicKey, signature));
// Prints: true
```

----------------------------------------

TITLE: Generating Random Bytes Asynchronously with Node.js Crypto (ESM)
DESCRIPTION: Demonstrates how to generate cryptographically strong random bytes asynchronously using the crypto.randomBytes function in ESM format. The example shows generating 256 bytes of random data and converting it to hexadecimal format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_84

LANGUAGE: javascript
CODE:
```
const {
  randomBytes,
} = await import('node:crypto');

randomBytes(256, (err, buf) => {
  if (err) throw err;
  console.log(`${buf.length} bytes of random data: ${buf.toString('hex')}`);
});
```

----------------------------------------

TITLE: Using ReadableStream.pipeThrough() with TransformStream in JavaScript (ESM)
DESCRIPTION: This snippet demonstrates how to use the pipeThrough() method to connect a ReadableStream to a TransformStream, which converts the data to uppercase before it's read.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import {
  ReadableStream,
  TransformStream,
} from 'node:stream/web';

const stream = new ReadableStream({
  start(controller) {
    controller.enqueue('a');
  },
});

const transform = new TransformStream({
  transform(chunk, controller) {
    controller.enqueue(chunk.toUpperCase());
  },
});

const transformedStream = stream.pipeThrough(transform);

for await (const chunk of transformedStream)
  console.log(chunk);
  // Prints: A
```

----------------------------------------

TITLE: Calculating HMAC over Piped Streams - Node.js Crypto (JavaScript ESM)
DESCRIPTION: This ESM example computes an HMAC over file data streamed from disk. 'node:fs' and 'node:process' provide the input and output streams, while HMAC is created via async import from 'node:crypto'. The whole file is piped through the HMAC and written to stdout. Requires correct secret and file, Node.js, and enabled ESM.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_36

LANGUAGE: JavaScript
CODE:
```
import { createReadStream } from 'node:fs';
import { stdout } from 'node:process';
const {
  createHmac,
} = await import('node:crypto');

const hmac = createHmac('sha256', 'a secret');

const input = createReadStream('test.js');
input.pipe(hmac).pipe(stdout);
```

----------------------------------------

TITLE: Cleaning up finished() event listeners in JavaScript
DESCRIPTION: This code snippet shows how to clean up event listeners created by `stream.finished()` to prevent dangling listeners. It captures the cleanup function returned by `finished()` and invokes it within the callback to remove the listeners after the stream has finished or errored. Dependencies: stream
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_61

LANGUAGE: javascript
CODE:
```
const cleanup = finished(rs, (err) => {
  cleanup();
  // ...
});
```

----------------------------------------

TITLE: Creating Buffer from String with Encoding - CJS
DESCRIPTION: Demonstrates creating a Buffer from a string with a specified encoding.  Also shows how to convert a hex string to a buffer and how to use different encodings when converting a buffer to a string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_51

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf1 = Buffer.from('this is a tést');
const buf2 = Buffer.from('7468697320697320612074c3a97374', 'hex');

console.log(buf1.toString());
// Prints: this is a tést
console.log(buf2.toString());
// Prints: this is a tést
console.log(buf1.toString('latin1'));
// Prints: this is a tÃ©st
```

----------------------------------------

TITLE: Deep strict equal assertion for different zeros in Node.js
DESCRIPTION: This example demonstrates the use of assert.deepStrictEqual to compare 0 and -0, which fails the assertion because they are not considered strictly deep-equal.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
assert.deepStrictEqual(0, -0);
```

----------------------------------------

TITLE: Using WebSocketStream with Readable and Writable Streams
DESCRIPTION: This example demonstrates the usage of WebSocketStream to create a bidirectional stream connection. It shows how to read from the readable stream with a reader and write to the writable stream with a writer, handling the asynchronous nature of WebSocket communication.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/WebSocket.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
const stream = new WebSocketStream('https://echo.websocket.org/')
const { readable, writable } = await stream.opened

async function read () {
  /** @type {ReadableStreamReader} */
  const reader = readable.getReader()

  while (true) {
    const { done, value } = await reader.read()
    if (done) break

    // do something with value
  }
}

async function write () {
  /** @type {WritableStreamDefaultWriter} */
  const writer = writable.getWriter()
  writer.write('Hello, world!')
  writer.releaseLock()
}

read()

setInterval(() => write(), 5000)
```

----------------------------------------

TITLE: Creating and Using a WritableStream in JavaScript
DESCRIPTION: Example showing how to create a WritableStream with a write handler that logs chunks to the console, and then writing data to it using a writer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_14

LANGUAGE: mjs
CODE:
```
import {
  WritableStream,
} from 'node:stream/web';

const stream = new WritableStream({
  write(chunk) {
    console.log(chunk);
  },
});

await stream.getWriter().write('Hello World');
```

----------------------------------------

TITLE: Reading Little-Endian 64-bit Double from Buffer (ESM)
DESCRIPTION: This code snippet demonstrates how to read a 64-bit, little-endian double from a Buffer using the `readDoubleLE` method in an ES module context. It imports the Buffer class from the 'node:buffer' module, creates a Buffer from a byte array, and then reads the double at offset 0 and 1. The result is printed to the console. It also shows that reading out of range throws an error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_96

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);

console.log(buf.readDoubleLE(0));
// Prints: 5.447603722011605e-270
console.log(buf.readDoubleLE(1));
// Throws ERR_OUT_OF_RANGE.
```

----------------------------------------

TITLE: Getting Active Resources Info with process.getActiveResourcesInfo() (CJS)
DESCRIPTION: This code demonstrates how to use `process.getActiveResourcesInfo()` to retrieve an array of strings representing the types of active resources keeping the event loop alive. It uses `setTimeout` to introduce a timer resource and logs the active resources before and after setting the timer. The `node:process` and `node:timers` modules are required.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_82

LANGUAGE: cjs
CODE:
```
const { getActiveResourcesInfo } = require('node:process');
const { setTimeout } = require('node:timers');

console.log('Before:', getActiveResourcesInfo());
setTimeout(() => {}, 1000);
console.log('After:', getActiveResourcesInfo());
// Prints:
//   Before: [ 'TTYWrap', 'TTYWrap', 'TTYWrap' ]
//   After: [ 'TTYWrap', 'TTYWrap', 'TTYWrap', 'Timeout' ]
```

----------------------------------------

TITLE: Verify SHASUMS256.txt signature using gpg
DESCRIPTION: This command verifies the GPG signature of the SHASUMS256.txt file using the corresponding .sig file. This step requires having the appropriate Node.js release keys imported into your GPG keyring to ensure the checksum file was signed by an authorized release team member.
SOURCE: https://github.com/nodejs/node/blob/main/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
gpg --verify SHASUMS256.txt.sig SHASUMS256.txt
```

----------------------------------------

TITLE: Validating Error Properties with Custom Object - CJS
DESCRIPTION: This example demonstrates how to use a custom validation object with `assert.throws()` to validate specific properties of an error, including nested objects and regular expressions. It showcases the use of strict deep equality for property comparison.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#_snippet_70

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert/strict');

const err = new TypeError('Wrong value');
err.code = 404;
err.foo = 'bar';
err.info = {
  nested: true,
  baz: 'text',
};
err.reg = /abc/i;

assert.throws(
  () => {
    throw err;
  },
  {
    name: 'TypeError',
    message: 'Wrong value',
    info: {
      nested: true,
      baz: 'text',
    },
    // Only properties on the validation object will be tested for.
    // Using nested objects requires all properties to be present. Otherwise
    // the validation is going to fail.
  },
);

// Using regular expressions to validate error properties:
assert.throws(
  () => {
    throw err;
  },
  {
    // The `name` and `message` properties are strings and using regular
    // expressions on those will match against the string. If they fail, an
    // error is thrown.
    name: /^TypeError$/,
    message: /Wrong/,
    foo: 'bar',
    info: {
      nested: true,
      // It is not possible to use regular expressions for nested properties!
      baz: 'text',
    },
    // The `reg` property contains a regular expression and only if the
    // validation object contains an identical regular expression, it is going
    // to pass.
    reg: /abc/i,
  },
);

// Fails due to the different `message` and `name` properties:
assert.throws(
  () => {
    const otherErr = new Error('Not found');
    // Copy all enumerable properties from `err` to `otherErr`.
    for (const [key, value] of Object.entries(err)) {
      otherErr[key] = value;
    }
    throw otherErr;
  },
  // The error's `message` and `name` properties will also be checked when using
  // an error as validation object.
  err,
);

```

----------------------------------------

TITLE: Read file line by line using `for await...of` loop (CJS)
DESCRIPTION: This code reads a file line by line using `fs.ReadStream` and a `for await...of` loop. It creates a `ReadStream` from the input file and uses `readline.createInterface` to process each line asynchronously. The `crlfDelay` option handles different line endings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#_snippet_34

LANGUAGE: cjs
CODE:
```
const { createReadStream } = require('node:fs');
const { createInterface } = require('node:readline');

async function processLineByLine() {
  const fileStream = createReadStream('input.txt');

  const rl = createInterface({
    input: fileStream,
    crlfDelay: Infinity,
  });
  // Note: we use the crlfDelay option to recognize all instances of CR LF
  // ('\r\n') in input.txt as a single line break.

  for await (const line of rl) {
    // Each line in input.txt will be successively available here as `line`.
    console.log(`Line from file: ${line}`);
  }
}

processLineByLine();
```

----------------------------------------

TITLE: Adding and Prepending One-Time Listeners with `once` and `prependOnceListener` in ECMAScript Module
DESCRIPTION: This code demonstrates how to add a one-time listener to the end and beginning of the listeners array for the 'foo' event using `once` and `prependOnceListener` in an ECMAScript module. When the 'foo' event is emitted, the listeners are invoked in the order they were added, resulting in 'b' being printed before 'a'. The listeners are then removed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_37

LANGUAGE: mjs
CODE:
```
import { EventEmitter } from 'node:events';
const myEE = new EventEmitter();
myEE.once('foo', () => console.log('a'));
myEE.prependOnceListener('foo', () => console.log('b'));
myEE.emit('foo');
// Prints:
//   b
//   a
```

----------------------------------------

TITLE: Iterating over Buffer instances using for...of (CJS)
DESCRIPTION: This code snippet demonstrates how to iterate over the elements of a Buffer instance using a for...of loop in a CommonJS module. It requires the Buffer class from the 'node:buffer' module, creates a Buffer from an array of numbers, and then iterates over each byte in the buffer, printing its value to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_15

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([1, 2, 3]);

for (const b of buf) {
  console.log(b);
}
// Prints:
//   1
//   2
//   3
```

----------------------------------------

TITLE: Deriving Bits and Keys using PBKDF2 with Web Crypto API in JavaScript
DESCRIPTION: These functions demonstrate how to derive bits and keys using the PBKDF2 algorithm with the Web Crypto API. They handle password-based key derivation for generating cryptographic keys or raw bits.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_10

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

async function pbkdf2(pass, salt, iterations = 1000, length = 256) {
  const ec = new TextEncoder();
  const key = await subtle.importKey(
    'raw',
    ec.encode(pass),
    'PBKDF2',
    false,
    ['deriveBits']);
  const bits = await subtle.deriveBits({
    name: 'PBKDF2',
    hash: 'SHA-512',
    salt: ec.encode(salt),
    iterations,
  }, key, length);
  return bits;
}

async function pbkdf2Key(pass, salt, iterations = 1000, length = 256) {
  const ec = new TextEncoder();
  const keyMaterial = await subtle.importKey(
    'raw',
    ec.encode(pass),
    'PBKDF2',
    false,
    ['deriveKey']);
  const key = await subtle.deriveKey({
    name: 'PBKDF2',
    hash: 'SHA-512',
    salt: ec.encode(salt),
    iterations,
  }, keyMaterial, {
    name: 'AES-GCM',
    length,
  }, true, ['encrypt', 'decrypt']);
  return key;
}
```

----------------------------------------

TITLE: Using path.posix.basename for Consistent POSIX Path Handling
DESCRIPTION: Shows how to use `path.posix.basename()` to ensure consistent handling of POSIX-style paths, regardless of the underlying operating system. This method always treats forward slashes as separators.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_5

LANGUAGE: js
CODE:
```
path.posix.basename('/tmp/myfile.html');
// Returns: 'myfile.html'
```

----------------------------------------

TITLE: Creating Node.js TLS Echo Server (MJS)
DESCRIPTION: Illustrates creating a TLS server using Node.js `tls.createServer` with ES Module syntax. It reads server key and certificate files, optionally requires client certificates using `requestCert`, and specifies trusted CAs via the `ca` option if needed for client certificate verification. The provided listener handles new connections, logs authorization status, sends a welcome message, sets UTF-8 encoding, and echoes back received data. Depends on `node:tls` and `node:fs` modules and requires `server-key.pem`, `server-cert.pem`, and potentially `client-cert.pem` files.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_26

LANGUAGE: mjs
CODE:
```
import { createServer } from 'node:tls';
import { readFileSync } from 'node:fs';

const options = {
  key: readFileSync('server-key.pem'),
  cert: readFileSync('server-cert.pem'),

  // This is necessary only if using client certificate authentication.
  requestCert: true,

  // This is necessary only if the client uses a self-signed certificate.
  ca: [ readFileSync('client-cert.pem') ],
};

const server = createServer(options, (socket) => {
  console.log('server connected',
              socket.authorized ? 'authorized' : 'unauthorized');
  socket.write('welcome!\n');
  socket.setEncoding('utf8');
  socket.pipe(socket);
});
server.listen(8000, () => {
  console.log('server bound');
});
```

----------------------------------------

TITLE: Importing StringDecoder in ES Modules (MJS)
DESCRIPTION: Shows how to import the StringDecoder class from the node:string_decoder module using ES Modules syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/string_decoder.md#2025-04-23_snippet_0

LANGUAGE: mjs
CODE:
```
import { StringDecoder } from 'node:string_decoder';
```

----------------------------------------

TITLE: Creating and Using a TransformStream in JavaScript
DESCRIPTION: Example demonstrating how to create a TransformStream that converts incoming text chunks to uppercase, then writing to and reading from the stream simultaneously.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_16

LANGUAGE: mjs
CODE:
```
import {
  TransformStream,
} from 'node:stream/web';

const transform = new TransformStream({
  transform(chunk, controller) {
    controller.enqueue(chunk.toUpperCase());
  },
});

await Promise.all([
  transform.writable.getWriter().write('A'),
  transform.readable.getReader().read(),
]);
```

----------------------------------------

TITLE: Installing Commander Package with npm
DESCRIPTION: Command for installing the Commander.js package using npm. This needs to be run before using Commander in your Node.js projects.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_0

LANGUAGE: sh
CODE:
```
npm install commander
```

----------------------------------------

TITLE: Duplex.fromWeb Conversion to Node.js Stream (cjs)
DESCRIPTION: Converts a Web Streams `ReadableStream` and `WritableStream` pair to a Node.js `Duplex` stream. It demonstrates writing to the duplex stream and reading from it using the 'readable' event. Requires `node:stream` and `node:stream/web`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_70

LANGUAGE: cjs
CODE:
```
const { Duplex } = require('node:stream');
const {
  ReadableStream,
  WritableStream,
} = require('node:stream/web');

const readable = new ReadableStream({
  start(controller) {
    controller.enqueue('world');
  },
});

const writable = new WritableStream({
  write(chunk) {
    console.log('writable', chunk);
  },
});

const pair = {
  readable,
  writable,
};
const duplex = Duplex.fromWeb(pair, { encoding: 'utf8', objectMode: true });

duplex.write('hello');
duplex.once('readable', () => console.log('readable', duplex.read()));
```

----------------------------------------

TITLE: Command-Line Examples for nopt Option Parsing
DESCRIPTION: Provides various examples of invoking a Node.js script ('my-program.js') that uses 'nopt' for argument parsing. It illustrates how different command-line arguments, including long options (--foo), short options (-f), negated booleans (--no-flag), shorthands (--foofoo), combined flags (-fp), options with values (--bar 7), path resolution (--baz), handling unknown options (--blatzk), assigning values to unknown options (--blatzk=1000), using Array types (--many1, --many2), and the argument terminator (--), are parsed into a JavaScript object.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/nopt/README.md#2025-04-23_snippet_1

LANGUAGE: console
CODE:
```
$ node my-program.js --foo "blerp" --no-flag
{ "foo" : "blerp", "flag" : false }

$ node my-program.js ---bar 7 --foo "Mr. Hand" --flag
{ bar: 7, foo: "Mr. Hand", flag: true }

$ node my-program.js --foo "blerp" -f -----p
{ foo: "blerp", flag: true, pick: true }

$ node my-program.js -fp --foofoo
{ foo: "Mr. Foo", flag: true, pick: true }

$ node my-program.js --foofoo -- -fp  # -- stops the flag parsing.
{ foo: "Mr. Foo", argv: { remain: ["-fp"] } }

$ node my-program.js --blatzk -fp # unknown opts are ok.
{ blatzk: true, flag: true, pick: true }

$ node my-program.js --blatzk=1000 -fp # but you need to use = if they have a value
{ blatzk: 1000, flag: true, pick: true }

$ node my-program.js --no-blatzk -fp # unless they start with "no-"
{ blatzk: false, flag: true, pick: true }

$ node my-program.js --baz b/a/z # known paths are resolved.
{ baz: "/Users/isaacs/b/a/z" }

# if Array is one of the types, then it can take many
# values, and will always be an array.  The other types provided
# specify what types are allowed in the list.

$ node my-program.js --many1 5 --many1 null --many1 foo
{ many1: ["5", "null", "foo"] }

$ node my-program.js --many2 foo --many2 bar
{ many2: ["/path/to/foo", "path/to/bar"] }
```

----------------------------------------

TITLE: Buffer Subarray Creation and Modification (ESM)
DESCRIPTION: This example demonstrates how to create a subarray from a Buffer using `buf.subarray()` and how modifying the subarray affects the original Buffer. It initializes a Buffer with the ASCII alphabet, creates a subarray, modifies a byte in the original Buffer, and then prints both the subarray and the original Buffer to show the effect of the modification.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_114

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

// Create a `Buffer` with the ASCII alphabet, take a slice, and modify one byte
// from the original `Buffer`.

const buf1 = Buffer.allocUnsafe(26);

for (let i = 0; i < 26; i++) {
  // 97 is the decimal ASCII value for 'a'.
  buf1[i] = i + 97;
}

const buf2 = buf1.subarray(0, 3);

console.log(buf2.toString('ascii', 0, buf2.length));
// Prints: abc

buf1[0] = 33;

console.log(buf2.toString('ascii', 0, buf2.length));
// Prints: !bc
```

----------------------------------------

TITLE: Copying a File with fs.copyFile (Node.js)
DESCRIPTION: Demonstrates how to use the asynchronous `fs.copyFile` function in Node.js to copy a file. It shows the basic usage with a callback and how to use the `fs.constants.COPYFILE_EXCL` flag to prevent overwriting an existing destination file.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_44

LANGUAGE: Node.js
CODE:
```
import { copyFile, constants } from 'node:fs';

function callback(err) {
  if (err) throw err;
  console.log('source.txt was copied to destination.txt');
}

// destination.txt will be created or overwritten by default.
copyFile('source.txt', 'destination.txt', callback);

// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.
copyFile('source.txt', 'destination.txt', constants.COPYFILE_EXCL, callback);
```

----------------------------------------

TITLE: Generating RSA Key Pair Asynchronously with ESM
DESCRIPTION: Example of generating an RSA key pair asynchronously using ESM imports. The code demonstrates generating a 4096-bit RSA key pair with SPKI public key encoding and PKCS8 private key encoding with AES-256-CBC encryption.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_65

LANGUAGE: javascript
CODE:
```
const {
  generateKeyPair,
} = await import('node:crypto');

generateKeyPair('rsa', {
  modulusLength: 4096,
  publicKeyEncoding: {
    type: 'spki',
    format: 'pem',
  },
  privateKeyEncoding: {
    type: 'pkcs8',
    format: 'pem',
    cipher: 'aes-256-cbc',
    passphrase: 'top secret',
  },
}, (err, publicKey, privateKey) => {
  // Handle errors and use the generated key pair.
});
```

----------------------------------------

TITLE: Duplex Stream with Pipeline
DESCRIPTION: Demonstrates using a Duplex stream within a pipeline to read, transform, and write data. Includes error handling and stream chaining.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_97

LANGUAGE: javascript
CODE:
```
const { Transform, pipeline } = require('node:stream');
const fs = require('node:fs');

pipeline(
  fs.createReadStream('object.json')
    .setEncoding('utf8'),
  new Transform({
    decodeStrings: false, // Accept string input rather than Buffers
    construct(callback) {
      this.data = '';
      callback();
    },
    transform(chunk, encoding, callback) {
      this.data += chunk;
      callback();
    },
    flush(callback) {
      try {
        // Make sure is valid json.
        JSON.parse(this.data);
        this.push(this.data);
        callback();
      } catch (err) {
        callback(err);
      }
    },
  }),
  fs.createWriteStream('valid-object.json'),
  (err) => {
    if (err) {
      console.error('failed', err);
    } else {
      console.log('completed');
    }
  },
);
```

----------------------------------------

TITLE: Converting Path to File URL (ESM)
DESCRIPTION: Demonstrates how to convert a file path to a file URL using `pathToFileURL` in an ECMAScript module. It shows the correct encoding of URL control characters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_53

LANGUAGE: mjs
CODE:
```
import { pathToFileURL } from 'node:url';

new URL('/foo#1', 'file:');           // Incorrect: file:///foo#1
pathToFileURL('/foo#1');              // Correct:   file:///foo%231 (POSIX)

new URL('/some/path%.c', 'file:');    // Incorrect: file:///some/path%.c
pathToFileURL('/some/path%.c');       // Correct:   file:///some/path%25.c (POSIX)
```

----------------------------------------

TITLE: Creating Cryptographic Signatures with subtle.sign in Node.js
DESCRIPTION: The sign method generates a cryptographic signature for data using the specified algorithm and key. It supports various signing algorithms including RSA, ECDSA, EdDSA, and HMAC. The method returns a Promise that resolves with an ArrayBuffer containing the signature.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
subtle.sign(algorithm, key, data)
```

----------------------------------------

TITLE: Using AbortController with child_process.fork() in CommonJS
DESCRIPTION: Demonstrates how to use AbortController to manage a forked child process in CommonJS format. The example shows both parent and child process code, with the parent having the ability to abort the child process execution.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
const { fork } = require('node:child_process');
const process = require('node:process');

if (process.argv[2] === 'child') {
  setTimeout(() => {
    console.log(`Hello from ${process.argv[2]}!`);
  }, 1_000);
} else {
  const controller = new AbortController();
  const { signal } = controller;
  const child = fork(__filename, ['child'], { signal });
  child.on('error', (err) => {
    // This will be called with err being an AbortError if the controller aborts
  });
  controller.abort(); // Stops the child process
}
```

----------------------------------------

TITLE: Getting and Setting URL Protocol
DESCRIPTION: Illustrates how to get and set the protocol portion of a URL using the `url.protocol` property. Assigning a new value to `url.protocol` modifies the URL's `href` property.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_23

LANGUAGE: javascript
CODE:
```
const myURL = new URL('https://example.org');
console.log(myURL.protocol);
// Prints https:

myURL.protocol = 'ftp';
console.log(myURL.href);
// Prints ftp://example.org/
```

----------------------------------------

TITLE: Initializing Readable Stream with Simplified Constructor - JavaScript
DESCRIPTION: This code demonstrates how to create a Readable stream using the simplified constructor approach. It creates a new `Readable` instance with a `read` method defined in the options object. This is a concise way to create simple readable streams.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_88

LANGUAGE: javascript
CODE:
```
const { Readable } = require('node:stream');

const myReadable = new Readable({
  read(size) {
    // ...
  },
});
```

----------------------------------------

TITLE: Defining Executable Command Mapping in package.json (JSON)
DESCRIPTION: This JSON snippet shows how to use the `bin` field in `package.json` to map a command name (`myapp`) to a specific JavaScript file (`bin/cli.js`). When the package is installed globally, npm creates a symlink or command file, making the script executable via the specified command name.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
{
  "bin": {
    "myapp": "bin/cli.js"
  }
}
```

----------------------------------------

TITLE: Reading File with fsPromises.readFile (ESM)
DESCRIPTION: Demonstrates how to asynchronously read the entire contents of a file using `fsPromises.readFile` with UTF-8 encoding in an ES module context. It includes error handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_26

LANGUAGE: mjs
CODE:
```
import { readFile } from 'node:fs/promises';
try {
  const filePath = new URL('./package.json', import.meta.url);
  const contents = await readFile(filePath, { encoding: 'utf8' });
  console.log(contents);
} catch (err) {
  console.error(err.message);
}
```

----------------------------------------

TITLE: Creating ReadStream for Byte Range Node.js JavaScript
DESCRIPTION: Shows how to create a readable stream from a file handle to read only a specific range of bytes. The `start` and `end` options define the inclusive byte range to read from the file. Requires `node:fs/promises`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_12

LANGUAGE: mjs
CODE:
```
import { open } from 'node:fs/promises';

const fd = await open('sample.txt');
fd.createReadStream({ start: 90, end: 99 });
```

----------------------------------------

TITLE: Exposing Web Crypto API
DESCRIPTION: This commit exposes the Web Crypto API on the global scope, making it directly accessible in Node.js environments. This provides a standardized interface for cryptographic operations, aligning Node.js with web standards and simplifying crypto tasks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V17.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
N/A
```

----------------------------------------

TITLE: UTF-8 Encoding into Uint8Array with TextEncoder in JavaScript
DESCRIPTION: Shows how to encode a string into a pre-allocated Uint8Array using the encodeInto method of the TextEncoder. The example demonstrates how to write UTF-8 encoded bytes into a provided array and retrieve the number of read Unicode code units and written UTF-8 bytes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#_snippet_83

LANGUAGE: javascript
CODE:
```
const encoder = new TextEncoder();
const src = 'this is some data';
const dest = new Uint8Array(10);
const { read, written } = encoder.encodeInto(src, dest);
```

----------------------------------------

TITLE: Writing to File (RECOMMENDED - fs.open error handling) (JavaScript)
DESCRIPTION: Shows the recommended approach for writing to a file, directly using `fs.open` with the 'wx' flag (exclusive write). It handles the `EEXIST` error code from `fs.open` to check if the file already exists, avoiding the race condition of the `fs.access` check. Includes resource cleanup. Requires the `node:fs` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_37

LANGUAGE: JavaScript
CODE:
```
import { open, close } from 'node:fs';

open('myfile', 'wx', (err, fd) => {
  if (err) {
    if (err.code === 'EEXIST') {
      console.error('myfile already exists');
      return;
    }

    throw err;
  }

  try {
    writeMyData(fd);
  } finally {
    close(fd, (err) => {
      if (err) throw err;
    });
  }
});
```

----------------------------------------

TITLE: Setting Mocked Date Time with timers.setTime (Node.js)
DESCRIPTION: Illustrates the use of `context.mock.timers.setTime(milliseconds)` to set the reference Unix timestamp for mocked `Date` objects. This function only affects mocked `Date` instances and does not influence real system time or existing mocked timers like those set by `setTimeout`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_76

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { test } from 'node:test';

test('runAll functions following the given order', (context) => {
  const now = Date.now();
  const setTime = 1000;
  // Date.now is not mocked
  assert.deepStrictEqual(Date.now(), now);

  context.mock.timers.enable({ apis: ['Date'] });
  context.mock.timers.setTime(setTime);
  // Date.now is now 1000
  assert.strictEqual(Date.now(), setTime);
});
```

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');
const { test } = require('node:test');

test('setTime replaces current time', (context) => {
  const now = Date.now();
  const setTime = 1000;
  // Date.now is not mocked
  assert.deepStrictEqual(Date.now(), now);

  context.mock.timers.enable({ apis: ['Date'] });
  context.mock.timers.setTime(setTime);
  // Date.now is now 1000
  assert.strictEqual(Date.now(), setTime);
});
```

----------------------------------------

TITLE: Creating an HMAC Digest as a Stream - Node.js Crypto (JavaScript ESM)
DESCRIPTION: This code, using ESM and async import, creates an HMAC SHA-256 stream with a secret. Data is written to the HMAC object, and the digest is read on 'readable' event and output in hexadecimal. Particularly suited for streaming data requiring authentication. Requires 'node:crypto' and suitable secret key. Only one digest will be produced by the stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_34

LANGUAGE: JavaScript
CODE:
```
const {
  createHmac,
} = await import('node:crypto');

const hmac = createHmac('sha256', 'a secret');

hmac.on('readable', () => {
  // Only one element is going to be produced by the
  // hash stream.
  const data = hmac.read();
  if (data) {
    console.log(data.toString('hex'));
    // Prints:
    //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e
  }
});

hmac.write('some data to hash');
hmac.end();
```

----------------------------------------

TITLE: Checking File Permissions with fs.access (JavaScript)
DESCRIPTION: Demonstrates how to use `fs.access` with different modes (`F_OK`, `R_OK`, `W_OK`, `R_OK | W_OK`) to check file existence and permissions asynchronously. It logs the result of each check. Requires the `node:fs` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_35

LANGUAGE: JavaScript
CODE:
```
import { access, constants } from 'node:fs';

const file = 'package.json';

// Check if the file exists in the current directory.
access(file, constants.F_OK, (err) => {
  console.log(`${file} ${err ? 'does not exist' : 'exists'}`);
});

// Check if the file is readable.
access(file, constants.R_OK, (err) => {
  console.log(`${file} ${err ? 'is not readable' : 'is readable'}`);
});

// Check if the file is writable.
access(file, constants.W_OK, (err) => {
  console.log(`${file} ${err ? 'is not writable' : 'is writable'}`);
});

// Check if the file is readable and writable.
access(file, constants.R_OK | constants.W_OK, (err) => {
  console.log(`${file} ${err ? 'is not' : 'is'} readable and writable`);
});
```

----------------------------------------

TITLE: Using AbortController with execFile in CommonJS
DESCRIPTION: Example showing how to use AbortController to abort an execFile operation in CommonJS. The callback receives an AbortError when the operation is aborted.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_16

LANGUAGE: JavaScript
CODE:
```
const { execFile } = require('node:child_process');
const controller = new AbortController();
const { signal } = controller;
const child = execFile('node', ['--version'], { signal }, (error) => {
  console.error(error); // an AbortError
});
controller.abort();
```

----------------------------------------

TITLE: Appending Data - Node.js fs - JavaScript
DESCRIPTION: Asynchronously append data to a file, creating the file if it does not yet exist. Data can be a string or a Buffer. The mode option only affects the newly created file.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_40

LANGUAGE: JavaScript
CODE:
```
import { appendFile } from 'node:fs';

appendFile('message.txt', 'data to append', (err) => {
  if (err) throw err;
  console.log('The "data to append" was appended to file!');
});
```

----------------------------------------

TITLE: Piping Between Child Processes in Node.js
DESCRIPTION: Advanced example demonstrating how to pipe data between two child processes (ps and grep) to simulate 'ps ax | grep ssh'
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
const { spawn } = require('node:child_process');
const ps = spawn('ps', ['ax']);
const grep = spawn('grep', ['ssh']);

ps.stdout.on('data', (data) => {
  grep.stdin.write(data);
});

ps.stderr.on('data', (data) => {
  console.error(`ps stderr: ${data}`);
});

ps.on('close', (code) => {
  if (code !== 0) {
    console.log(`ps process exited with code ${code}`);
  }
  grep.stdin.end();
});

grep.stdout.on('data', (data) => {
  console.log(data.toString());
});

grep.stderr.on('data', (data) => {
  console.error(`grep stderr: ${data}`);
});

grep.on('close', (code) => {
  if (code !== 0) {
    console.log(`grep process exited with code ${code}`);
  }
});
```

LANGUAGE: javascript
CODE:
```
import { spawn } from 'node:child_process';
const ps = spawn('ps', ['ax']);
const grep = spawn('grep', ['ssh']);

ps.stdout.on('data', (data) => {
  grep.stdin.write(data);
});

ps.stderr.on('data', (data) => {
  console.error(`ps stderr: ${data}`);
});

ps.on('close', (code) => {
  if (code !== 0) {
    console.log(`ps process exited with code ${code}`);
  }
  grep.stdin.end();
});

grep.stdout.on('data', (data) => {
  console.log(data.toString());
});

grep.stderr.on('data', (data) => {
  console.error(`grep stderr: ${data}`);
});

grep.on('close', (code) => {
  if (code !== 0) {
    console.log(`grep process exited with code ${code}`);
  }
});
```

----------------------------------------

TITLE: Creating and Reading from a ReadableStream in JavaScript (CommonJS)
DESCRIPTION: This snippet shows how to create a ReadableStream that pushes the current performance.now() timestamp every second, and then reads from it using an async iterator in CommonJS format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const {
  ReadableStream,
} = require('node:stream/web');

const {
  setInterval: every,
} = require('node:timers/promises');

const {
  performance,
} = require('node:perf_hooks');

const SECOND = 1000;

const stream = new ReadableStream({
  async start(controller) {
    for await (const _ of every(SECOND))
      controller.enqueue(performance.now());
  },
});

(async () => {
  for await (const value of stream)
    console.log(value);
})();
```

----------------------------------------

TITLE: Buffer Slice vs Uint8Array Slice (CJS)
DESCRIPTION: This example demonstrates the difference between using `buf.slice()` and `Uint8Array.prototype.slice.call(buf)` to copy a Buffer. `Uint8Array.prototype.slice.call(buf)` creates a new copy, while `buf.slice()` creates a view of the original buffer, so modifying the 'copied' buffer also modifies the original.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_119

LANGUAGE: javascript
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from('buffer');

const copiedBuf = Uint8Array.prototype.slice.call(buf);
copiedBuf[0]++;
console.log(copiedBuf.toString());
// Prints: cuffer

console.log(buf.toString());
// Prints: buffer

// With buf.slice(), the original buffer is modified.
const notReallyCopiedBuf = buf.slice();
notReallyCopiedBuf[0]++;
console.log(notReallyCopiedBuf.toString());
// Prints: cuffer
console.log(buf.toString());
// Also prints: cuffer (!)
```

----------------------------------------

TITLE: Readline Usage with Promises
DESCRIPTION: Illustrates the basic usage of the `node:readline` module using promises. It creates a readline interface, asks a question, and logs the answer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#_snippet_2

LANGUAGE: mjs
CODE:
```
import * as readline from 'node:readline/promises';
import { stdin as input, stdout as output } from 'node:process';

const rl = readline.createInterface({ input, output });

const answer = await rl.question('What do you think of Node.js? ');

console.log(`Thank you for your valuable feedback: ${answer}`);

rl.close();
```

----------------------------------------

TITLE: Using setImmediate Promise (Node.js Timers - MJS/CJS)
DESCRIPTION: Shows basic usage of `timersPromises.setImmediate`. It returns a promise that resolves after the current poll phase of the event loop with the given `value`. It can be used with `await` or `.then()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/timers.md#_snippet_4

LANGUAGE: mjs
CODE:
```
import {
  setImmediate,
} from 'node:timers/promises';

const res = await setImmediate('result');

console.log(res);  // Prints 'result'
```

LANGUAGE: cjs
CODE:
```
const {
  setImmediate,
} = require('node:timers/promises');

setImmediate('result').then((res) => {
  console.log(res);  // Prints 'result'
});
```

----------------------------------------

TITLE: Using Arrow Functions as Listeners with EventEmitter (ESM)
DESCRIPTION: This code demonstrates the use of ES6 arrow functions as event listeners. When using arrow functions, the `this` keyword does not reference the `EventEmitter` instance, but is `undefined` instead. This example uses ES modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_4

LANGUAGE: mjs
CODE:
```
import { EventEmitter } from 'node:events';
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on('event', (a, b) => {
  console.log(a, b, this);
  // Prints: a b undefined
});
myEmitter.emit('event', 'a', 'b');
```

----------------------------------------

TITLE: Inter-Thread Messaging with MessageChannel (ESM)
DESCRIPTION: This example demonstrates how to create a worker thread and establish a custom messaging channel using MessageChannel and MessagePort. The main thread sends a MessagePort to the worker thread, and the worker thread uses it to send a message back to the main thread.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#_snippet_40

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import {
  Worker, MessageChannel, MessagePort, isMainThread, parentPort,
} from 'node:worker_threads';
if (isMainThread) {
  const worker = new Worker(new URL(import.meta.url));
  const subChannel = new MessageChannel();
  worker.postMessage({ hereIsYourPort: subChannel.port1 }, [subChannel.port1]);
  subChannel.port2.on('message', (value) => {
    console.log('received:', value);
  });
} else {
  parentPort.once('message', (value) => {
    assert(value.hereIsYourPort instanceof MessagePort);
    value.hereIsYourPort.postMessage('the worker is sending this');
    value.hereIsYourPort.close();
  });
}
```

----------------------------------------

TITLE: Executing npm link Command in Bash
DESCRIPTION: Shows the basic syntax for using the npm link command, including its alias.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-link.md#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
npm link [<package-spec>]

alias: ln
```

----------------------------------------

TITLE: Equivalent Commands for Linking Packages in Bash
DESCRIPTION: Illustrates the equivalent commands for creating a global link and then linking it to the project.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-link.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
(cd ../node-redis; npm link)
npm link redis
```

----------------------------------------

TITLE: Awaiting multiple events using Promise.all() - MJS
DESCRIPTION: This example demonstrates how to correctly await multiple events emitted in the same process.nextTick() batch using Promise.all() and events.once(). By creating all Promises before awaiting them, it ensures that no events are missed. It uses the EventEmitter and process modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_61

LANGUAGE: mjs
CODE:
```
import { EventEmitter, once } from 'node:events';
import process from 'node:process';

const myEE = new EventEmitter();

async function foo() {
  await Promise.all([once(myEE, 'bar'), once(myEE, 'foo')]);
  console.log('foo', 'bar');
}

process.nextTick(() => {
  myEE.emit('bar');
  myEE.emit('foo');
});

foo().then(() => console.log('done'));
```

----------------------------------------

TITLE: Compressing Stream with Gzip and Pipeline (CJS)
DESCRIPTION: Compresses a file using Gzip and streams, utilizing the pipeline API for efficient data handling. It reads from an input file, compresses it, and writes the compressed data to an output file. Includes error handling to catch any issues during the process.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#_snippet_2

LANGUAGE: cjs
CODE:
```
const {
  createReadStream,
  createWriteStream,
} = require('node:fs');
const process = require('node:process');
const { createGzip } = require('node:zlib');
const { pipeline } = require('node:stream');

const gzip = createGzip();
const source = createReadStream('input.txt');
const destination = createWriteStream('input.txt.gz');

pipeline(source, gzip, destination, (err) => {
  if (err) {
    console.error('An error occurred:', err);
    process.exitCode = 1;
  }
});
```

----------------------------------------

TITLE: Using Arrow Functions as Listeners with EventEmitter (CJS)
DESCRIPTION: This code demonstrates the use of ES6 arrow functions as event listeners. When using arrow functions, the `this` keyword does not reference the `EventEmitter` instance, but is `{}` instead. This example uses CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_5

LANGUAGE: cjs
CODE:
```
const EventEmitter = require('node:events');
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on('event', (a, b) => {
  console.log(a, b, this);
  // Prints: a b {}
});
myEmitter.emit('event', 'a', 'b');
```

----------------------------------------

TITLE: Reading File Asynchronously without Encoding - Node.js fs
DESCRIPTION: Demonstrates how to read a file asynchronously using `fs.readFile` in Node.js. The callback receives an error and the file data as a Buffer if no encoding is specified.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_64

LANGUAGE: JavaScript
CODE:
```
import { readFile } from 'node:fs';

readFile('/etc/passwd', (err, data) => {
  if (err) throw err;
  console.log(data);
});
```

----------------------------------------

TITLE: Checking if Node.js ClientRequest is Aborted
DESCRIPTION: Checks if the outgoing request has been aborted. This property is deprecated; use `request.destroyed` instead.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_14



----------------------------------------

TITLE: Handling Worker Exit Event and Restarting in Node.js Cluster
DESCRIPTION: Demonstrates handling the 'exit' event on the `cluster` object in the primary process. This event fires when a worker process terminates. The example shows logging the exit details (PID, signal/code) and restarting the worker using `cluster.fork()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_11

LANGUAGE: js
CODE:
```
cluster.on('exit', (worker, code, signal) => {
  console.log('worker %d died (%s). restarting...',
              worker.process.pid, signal || code);
  cluster.fork();
});
```

----------------------------------------

TITLE: Example package.json with tilde dependency in JSON
DESCRIPTION: An example of a package.json file with a tilde (~) dependency, which allows updates to the latest patch version within the same minor version.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-update.md#2025-04-23_snippet_2

LANGUAGE: json
CODE:
```
"dependencies": {
  "dep1": "~1.1.1"
}
```

----------------------------------------

TITLE: Recommended tsconfig.json for Node.js Type Stripping
DESCRIPTION: Recommended TypeScript configuration for use with Node.js built-in type stripping feature. Includes settings for targeting modern JavaScript and enabling compatibility with Node.js module system.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/typescript.md#2025-04-23_snippet_3

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
     "noEmit": true, // Optional - see note below
     "target": "esnext",
     "module": "nodenext",
     "rewriteRelativeImportExtensions": true,
     "erasableSyntaxOnly": true,
     "verbatimModuleSyntax": true
  }
}
```

----------------------------------------

TITLE: Spawning Detached Process with File Redirection (CJS)
DESCRIPTION: This CommonJS snippet shows how to spawn a detached child process (`prg`) and redirect its standard output and standard error streams to a log file (`./out.log`). It uses `fs.openSync` to get file descriptors for appending and configures `stdio` as `['ignore', out, err]`, ignoring stdin and directing stdout and stderr to the opened file descriptors. `detached: true` and `subprocess.unref()` ensure the child runs independently.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_27

LANGUAGE: cjs
CODE:
```
const { openSync } = require('node:fs');
const { spawn } = require('node:child_process');
const out = openSync('./out.log', 'a');
const err = openSync('./out.log', 'a');

const subprocess = spawn('prg', [], {
  detached: true,
  stdio: [ 'ignore', out, err ],
});

subprocess.unref();
```

----------------------------------------

TITLE: Exporting a Default Class from an ES Module (Node.js - JavaScript)
DESCRIPTION: Defines an ES module that exports a default Point class with a constructor initializing x and y properties. This module provides a basic data structure for representing points in 2D space. No external dependencies required, and the output is the exported class under the default property in the module namespace.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_5

LANGUAGE: mjs
CODE:
```
// point.mjs\nexport default class Point {\n  constructor(x, y) { this.x = x; this.y = y; }\n}
```

----------------------------------------

TITLE: Importing CommonJS module with named and default imports
DESCRIPTION: Demonstrates how to import a CommonJS module with a named export using ES module syntax. It shows how to import the named export directly, as well as how to access it through the default import and the Module Namespace Exotic Object.  It highlights that the named export is copied from `module.exports`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/esm.md#_snippet_14

LANGUAGE: javascript
CODE:
```
import { name } from './cjs.cjs';
console.log(name);
// Prints: 'exported'

import cjs from './cjs.cjs';
console.log(cjs);
// Prints: { name: 'exported' }

import * as m from './cjs.cjs';
console.log(m);
// Prints:
//   [Module] {
//     default: { name: 'exported' },
//     'module.exports': { name: 'exported' },
//     name: 'exported'
//   }
```

----------------------------------------

TITLE: Deleting File with fs/promises (CommonJS)
DESCRIPTION: This example demonstrates deleting a file asynchronously using the promise-based `unlink` function from 'node:fs/promises' in a CommonJS context. It wraps the asynchronous operation in an immediately invoked async function expression (IIFE) using `await` and `try...catch`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_5

LANGUAGE: cjs
CODE:
```
const { unlink } = require('node:fs/promises');

(async function(path) {
  try {
    await unlink(path);
    console.log(`successfully deleted ${path}`);
  } catch (error) {
    console.error('there was an error:', error.message);
  }
})('/tmp/hello');
```

----------------------------------------

TITLE: Handling SIGINT signal in Node.js (ESM)
DESCRIPTION: This code snippet demonstrates how to listen for the SIGINT signal in a Node.js process using ES modules. It prevents the process from exiting immediately and logs a message to the console when SIGINT is received. It also shows how to use a single function to handle multiple signals.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_19

LANGUAGE: mjs
CODE:
```
import process from 'node:process';

// Begin reading from stdin so the process does not exit.
process.stdin.resume();

process.on('SIGINT', () => {
  console.log('Received SIGINT. Press Control-D to exit.');
});

// Using a single function to handle multiple signals
function handle(signal) {
  console.log(`Received ${signal}`);
}

process.on('SIGINT', handle);
process.on('SIGTERM', handle);
```

----------------------------------------

TITLE: Handling uncaught exceptions with ES modules
DESCRIPTION: This code snippet demonstrates how to handle 'uncaughtException' events using ES modules in Node.js. It registers a handler that logs the error and origin to stderr. The example intentionally causes an exception to trigger the handler.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_8

LANGUAGE: mjs
CODE:
```
import process from 'node:process';
import fs from 'node:fs';

process.on('uncaughtException', (err, origin) => {
  fs.writeSync(
    process.stderr.fd,
    `Caught exception: ${err}\n` +
    `Exception origin: ${origin}\n`,
  );
});

setTimeout(() => {
  console.log('This will still run.');
}, 500);

// Intentionally cause an exception, but don't catch it.
nonexistentFunc();
console.log('This will not run.');
```

----------------------------------------

TITLE: Validating IPv4 Addresses using net.isIPv4 in Node.js
DESCRIPTION: This snippet showcases the `net.isIPv4()` function from the Node.js `net` module. It illustrates how to specifically validate if a string represents an IPv4 address using dot-decimal notation without leading zeros. The function returns `true` for valid IPv4 inputs and `false` otherwise, as shown with examples including a valid IPv4, an IPv4 with leading zeros, CIDR notation, and a non-IP string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_34

LANGUAGE: js
CODE:
```
```js
net.isIPv4('127.0.0.1'); // returns true
net.isIPv4('127.000.000.001'); // returns false
net.isIPv4('127.0.0.1/24'); // returns false
net.isIPv4('fhqwhgads'); // returns false
```
```

----------------------------------------

TITLE: Basic Redirect Interceptor Usage in Undici
DESCRIPTION: Shows how to use the pre-built redirect interceptor with Undici Client. The example sets a maximum of 3 redirections and enables throwing an error on max redirects.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
const { Client, interceptors } = require("undici");
const { redirect } = interceptors;

const client = new Client("http://example.com").compose(
  redirect({ maxRedirections: 3, throwOnMaxRedirects: true })
);
client.request({ path: "/" })
```

----------------------------------------

TITLE: Piping stdin to stdout using process streams (CJS)
DESCRIPTION: This code snippet demonstrates how to pipe the standard input stream (`process.stdin`) to the standard output stream (`process.stdout`) in Node.js. This effectively copies any input received on stdin to stdout. This example uses CommonJS module syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_137

LANGUAGE: cjs
CODE:
```
const { stdin, stdout } = require('node:process');

stdin.pipe(stdout);
```

----------------------------------------

TITLE: Importing Builtin Modules List via node:module in ECMAScript Module - JavaScript
DESCRIPTION: This snippet imports the builtinModules list from node:module using ECMAScript module syntax. Requires Node.js 9.3.0+ and ESM module support. The builtinModules array contains the names of all Node.js core modules and prefix-only modules. There are no input parameters, and it is intended for verifying if a module is provided by Node.js or a third party. No external dependencies are required.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/module.md#2025-04-23_snippet_0

LANGUAGE: JavaScript
CODE:
```
// module.mjs\n// In an ECMAScript module\nimport { builtinModules as builtin } from 'node:module';
```

----------------------------------------

TITLE: Creating TCP Client Connection in Node.js (ESM)
DESCRIPTION: Example of creating a TCP client connection using net.createConnection in ES modules format. Demonstrates connecting to port 8124 and handling basic socket events.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_25

LANGUAGE: mjs
CODE:
```
import net from 'node:net';
const client = net.createConnection({ port: 8124 }, () => {
  // 'connect' listener.
  console.log('connected to server!');
  client.write('world!\r\n');
});
client.on('data', (data) => {
  console.log(data.toString());
  client.end();
});
client.on('end', () => {
  console.log('disconnected from server');
});
```

----------------------------------------

TITLE: Piping streams with AbortSignal
DESCRIPTION: This example demonstrates how to use an AbortSignal to cancel a pipeline. An AbortController is used to signal the pipeline to abort, which will destroy the underlying streams with an AbortError.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_3

LANGUAGE: cjs
CODE:
```
const { pipeline } = require('node:stream/promises');
const fs = require('node:fs');
const zlib = require('node:zlib');

async function run() {
  const ac = new AbortController();
  const signal = ac.signal;

  setImmediate(() => ac.abort());
  await pipeline(
    fs.createReadStream('archive.tar'),
    zlib.createGzip(),
    fs.createWriteStream('archive.tar.gz'),
    { signal },
  );
}

run().catch(console.error); // AbortError
```

----------------------------------------

TITLE: Creating Directories Recursively with fs.mkdir in Node.js
DESCRIPTION: This example demonstrates how to use `fs.mkdir` with the `recursive: true` option to create a directory and its parent directories if they do not exist. It imports the `mkdir` function from the `node:fs` module and calls it with the target path, options object, and a callback function to handle potential errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_60

LANGUAGE: JavaScript
CODE:
```
import { mkdir } from 'node:fs';

// Create ./tmp/a/apple, regardless of whether ./tmp and ./tmp/a exist.
mkdir('./tmp/a/apple', { recursive: true }, (err) => {
  if (err) throw err;
});
```

----------------------------------------

TITLE: Streaming Data with Undici Pipeline and Node.js Streams
DESCRIPTION: This example demonstrates how to use Undici's pipeline method with Node.js streams. It creates a pipeline that reads data from a Readable stream, sends it through an Undici request, and processes the response through a Writable stream.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_8

LANGUAGE: javascript
CODE:
```
import { Readable, Writable, PassThrough, pipeline } from 'stream'
import { createServer } from 'http'
import { Client } from 'undici'
import { once } from 'events'

const server = createServer((request, response) => {
  request.pipe(response)
}).listen()

await once(server, 'listening')

const client = new Client(`http://localhost:${server.address().port}`)

let res = ''

pipeline(
  new Readable({
    read () {
      this.push(Buffer.from('undici'))
      this.push(null)
    }
  }),
  client.pipeline({
    path: '/',
    method: 'GET'
  }, ({ statusCode, headers, body }) => {
    console.log(`response received ${statusCode}`)
    console.log('headers', headers)
    return pipeline(body, new PassThrough(), () => {})
  }),
  new Writable({
    write (chunk, _, callback) {
      res += chunk.toString()
      callback()
    },
    final (callback) {
      console.log(`Response pipelined to writable: ${res}`)
      callback()
    }
  }),
  error => {
    if (error) {
      console.error(error)
    }

    client.close()
    server.close()
  }
)
```

----------------------------------------

TITLE: Basic Retry Interceptor Configuration in Undici
DESCRIPTION: Demonstrates the configuration of the pre-built retry interceptor for Undici Client. It sets various retry options such as max retries, timeout values, and retry after flag.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
const { Client, interceptors } = require("undici");
const { retry } = interceptors;

const client = new Client("http://example.com").compose(
  retry({
    maxRetries: 3,
    minTimeout: 1000,
    maxTimeout: 10000,
    timeoutFactor: 2,
    retryAfter: true,
  })
);
```

----------------------------------------

TITLE: Handling the 'warning' event (ESM)
DESCRIPTION: This example shows how to listen for and handle the `'warning'` event emitted by `process.emitWarning()` in an ECMAScript module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_50

LANGUAGE: mjs
CODE:
```
import process from 'node:process';

process.on('warning', (warning) => {
  console.warn(warning.name);
  console.warn(warning.message);
  console.warn(warning.code);
  console.warn(warning.stack);
});
```

----------------------------------------

TITLE: Measure High-Resolution Time using process.hrtime()
DESCRIPTION: This code snippet demonstrates how to measure time intervals with high precision using the `process.hrtime()` method. It captures the start time, executes a `setTimeout` function, calculates the time difference, and logs the elapsed time in nanoseconds.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_89

LANGUAGE: mjs
CODE:
```
import { hrtime } from 'node:process';

const NS_PER_SEC = 1e9;
const time = hrtime();
// [ 1800216, 25 ]

setTimeout(() => {
  const diff = hrtime(time);
  // [ 1, 552 ]

  console.log(`Benchmark took ${diff[0] * NS_PER_SEC + diff[1]} nanoseconds`);
  // Benchmark took 1000000552 nanoseconds
}, 1000);
```

LANGUAGE: cjs
CODE:
```
const { hrtime } = require('node:process');

const NS_PER_SEC = 1e9;
const time = hrtime();
// [ 1800216, 25 ]

setTimeout(() => {
  const diff = hrtime(time);
  // [ 1, 552 ]

  console.log(`Benchmark took ${diff[0] * NS_PER_SEC + diff[1]} nanoseconds`);
  // Benchmark took 1000000552 nanoseconds
}, 1000);
```

----------------------------------------

TITLE: Assert deepEqual with nested objects (cjs)
DESCRIPTION: This example demonstrates how `assert.deepEqual` compares nested objects. It shows cases where the assertion passes when objects are deeply equal and fails when values in nested properties differ or when prototypes are involved.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#_snippet_14

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');

const obj1 = {
  a: {
    b: 1,
  },
};
const obj2 = {
  a: {
    b: 2,
  },
};
const obj3 = {
  a: {
    b: 1,
  },
};
const obj4 = { __proto__: obj1 };

assert.deepEqual(obj1, obj1);
// OK

// Values of b are different:
assert.deepEqual(obj1, obj2);
// AssertionError: { a: { b: 1 } } deepEqual { a: { b: 2 } }

assert.deepEqual(obj1, obj3);
// OK

// Prototypes are ignored:
assert.deepEqual(obj1, obj4);
// AssertionError: { a: { b: 1 } } deepEqual {}
```

----------------------------------------

TITLE: Handling the 'exit' event
DESCRIPTION: Demonstrates how to listen for the 'exit' event, which is emitted when the Node.js process is about to exit. The example logs a message including the exit code. Includes both ESM and CJS versions.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_2

LANGUAGE: mjs
CODE:
```
import process from 'node:process';

process.on('exit', (code) => {
  console.log(`About to exit with code: ${code}`);
});
```

LANGUAGE: cjs
CODE:
```
const process = require('node:process');

process.on('exit', (code) => {
  console.log(`About to exit with code: ${code}`);
});
```

----------------------------------------

TITLE: Attempting to Consume an Asynchronously Exported Module in Node.js
DESCRIPTION: Shows why asynchronous exports don't work - the importing code runs immediately and tries to access properties before they're defined.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_27

LANGUAGE: javascript
CODE:
```
const x = require('./x');
console.log(x.a);
```

----------------------------------------

TITLE: Broadcasting Messages to All Workers in Node.js Cluster (ES Modules)
DESCRIPTION: This example demonstrates how to send a message to all worker processes from the primary process using the cluster.workers object, which contains references to all active workers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_19

LANGUAGE: javascript
CODE:
```
import cluster from 'node:cluster';

for (const worker of Object.values(cluster.workers)) {
  worker.send('big announcement to all workers');
}
```

----------------------------------------

TITLE: Configuring Build Commands and Test Scripts with npm Scripts - JSON
DESCRIPTION: This snippet specifies multiple scripts in the package.json, showing how to run shell commands for different lifecycle events: './configure' for preinstall, a compile and install command for install, and a 'make test' for the test script. It highlights that npm scripts can execute arbitrary shell commands via npm’s scripting interface. All commands listed must be valid and available in the environment where npm is run, and shell utilities like 'make' must be installed if referenced.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/scripts.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{\n  \"scripts\" : {\n    \"preinstall\" : \"./configure\",\n    \"install\" : \"make && make install\",\n    \"test\" : \"make test\"\n  }\n}
```

----------------------------------------

TITLE: Triggering unhandledRejection with Promise.reject (ESM)
DESCRIPTION: This code snippet demonstrates how a rejected promise without a catch handler triggers the 'unhandledRejection' event in Node.js using the ES module syntax. A `SomeResource` class initializes `this.loaded` to a rejected promise, and without a `.catch()` or `.then()` handler, this triggers the event.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_14

LANGUAGE: mjs
CODE:
```
import process from 'node:process';

function SomeResource() {
  // Initially set the loaded status to a rejected promise
  this.loaded = Promise.reject(new Error('Resource not yet loaded!'));
}

const resource = new SomeResource();
// no .catch or .then on resource.loaded for at least a turn
```

----------------------------------------

TITLE: Text Decoding with TextDecoder
DESCRIPTION: Illustrates how to use the `TextDecoder` class to decode a `Uint8Array` into a string. This is useful for converting byte arrays into human-readable text using various encodings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#_snippet_81

LANGUAGE: js
CODE:
```
const decoder = new TextDecoder();
const u8arr = new Uint8Array([72, 101, 108, 108, 111]);
console.log(decoder.decode(u8arr)); // Hello
```

----------------------------------------

TITLE: Allocating a Zero-Filled Buffer in Node.js (CJS)
DESCRIPTION: This code demonstrates how to allocate a new Buffer of a specified size using Buffer.alloc(). If fill is undefined, the Buffer will be zero-filled. It requires the Buffer class from the node:buffer module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_20

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.alloc(5);

console.log(buf);
// Prints: <Buffer 00 00 00 00 00>
```

----------------------------------------

TITLE: Handling compressed responses in HTTP client (ESM)
DESCRIPTION: This code snippet demonstrates how to handle compressed responses in an HTTP client using the `zlib` module for decompression. It checks the `Content-Encoding` header and uses the appropriate decompression method (`br`, `gzip`, or `deflate`) before writing the response to a file. The `pipeline` function is used for efficient stream management.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#_snippet_9

LANGUAGE: mjs
CODE:
```
import fs from 'node:fs';
import zlib from 'node:zlib';
import http from 'node:http';
import process from 'node:process';
import { pipeline } from 'node:stream';

const request = http.get({ host: 'example.com',
                           path: '/',
                           port: 80,
                           headers: { 'Accept-Encoding': 'br,gzip,deflate' } });
request.on('response', (response) => {
  const output = fs.createWriteStream('example.com_index.html');

  const onError = (err) => {
    if (err) {
      console.error('An error occurred:', err);
      process.exitCode = 1;
    }
  };

  switch (response.headers['content-encoding']) {
    case 'br':
      pipeline(response, zlib.createBrotliDecompress(), output, onError);
      break;
    // Or, just use zlib.createUnzip() to handle both of the following cases:
    case 'gzip':
      pipeline(response, zlib.createGunzip(), output, onError);
      break;
    case 'deflate':
      pipeline(response, zlib.createInflate(), output, onError);
      break;
    default:
      pipeline(response, output, onError);
      break;
  }
});
```

----------------------------------------

TITLE: Writing BigInt64 Big-Endian to Buffer in Node.js
DESCRIPTION: Writes a BigInt value to a Buffer in big-endian format using writeBigInt64BE. The value is interpreted as a two's complement signed integer. Requires the 'buffer' module. The offset specifies where to start writing in the buffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_133

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(8);

buf.writeBigInt64BE(0x0102030405060708n, 0);

console.log(buf);
// Prints: <Buffer 01 02 03 04 05 06 07 08>
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(8);

buf.writeBigInt64BE(0x0102030405060708n, 0);

console.log(buf);
// Prints: <Buffer 01 02 03 04 05 06 07 08>
```

----------------------------------------

TITLE: Asserting Promise Rejection with Error Class - CommonJS
DESCRIPTION: This snippet demonstrates how to use `assert.rejects` to verify that a promise rejects with an instance of a specific error class in CommonJS format. It checks if the rejected error is an instance of the `Error` class.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#_snippet_66

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert/strict');

assert.rejects(
  Promise.reject(new Error('Wrong value')),
  Error,
).then(() => {
  // ...
});
```

----------------------------------------

TITLE: Writing a Buffer to a File using fs.writeFile (Node.js)
DESCRIPTION: Demonstrates the basic usage of `fs.writeFile` to asynchronously write data from a `Uint8Array` buffer to a specified file ('message.txt'). Includes error handling in the callback function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_82

LANGUAGE: JavaScript
CODE:
```
import { writeFile } from 'node:fs';
import { Buffer } from 'node:buffer';

const data = new Uint8Array(Buffer.from('Hello Node.js'));
writeFile('message.txt', data, (err) => {
  if (err) throw err;
  console.log('The file has been saved!');
});
```

----------------------------------------

TITLE: Performing HTTPS GET Request (cjs)
DESCRIPTION: This code performs an HTTPS GET request to 'https://encrypted.google.com/'. It logs the status code and headers of the response, and writes the response data to the standard output.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#_snippet_8

LANGUAGE: cjs
CODE:
```
const https = require('node:https');

https.get('https://encrypted.google.com/', (res) => {
  console.log('statusCode:', res.statusCode);
  console.log('headers:', res.headers);

  res.on('data', (d) => {
    process.stdout.write(d);
  });

}).on('error', (e) => {
  console.error(e);
});
```

----------------------------------------

TITLE: Creating http.Agent with keepAlive (CJS)
DESCRIPTION: Demonstrates how to create a custom http.Agent instance with the keepAlive option enabled using CommonJS syntax and assign it to the 'agent' option when making an http.request.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
const http = require('node:http');
const keepAliveAgent = new http.Agent({ keepAlive: true });
options.agent = keepAliveAgent;
http.request(options, onResponseCallback);
```

----------------------------------------

TITLE: Getting and setting the URL username property
DESCRIPTION: This code demonstrates how to get and set the `username` property of a URL. It retrieves the initial username and then sets a new username, modifying the URL's href.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_29

LANGUAGE: javascript
CODE:
```
const myURL = new URL('https://abc:xyz@example.com');
console.log(myURL.username);
// Prints abc

myURL.username = '123';
console.log(myURL.href);
// Prints https://123:xyz@example.com/
```

----------------------------------------

TITLE: Piping streams with AbortSignal
DESCRIPTION: This example demonstrates how to use an AbortSignal to cancel a pipeline. An AbortController is used to signal the pipeline to abort, which will destroy the underlying streams with an AbortError.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_4

LANGUAGE: mjs
CODE:
```
import { pipeline } from 'node:stream/promises';
import { createReadStream, createWriteStream } from 'node:fs';
import { createGzip } from 'node:zlib';

const ac = new AbortController();
const { signal } = ac;
setImmediate(() => ac.abort());
try {
  await pipeline(
    createReadStream('archive.tar'),
    createGzip(),
    createWriteStream('archive.tar.gz'),
    { signal },
  );
} catch (err) {
  console.error(err); // AbortError
}
```

----------------------------------------

TITLE: Combining Named Exports and Custom module.exports in ES Modules (Node.js - JavaScript)
DESCRIPTION: Defines an ES module exporting both a default class and a named function, then re-exports the class under the name 'module.exports' to customize what CommonJS consumers receive. The function distance is otherwise unavailable to CommonJS require consumers unless attached to the class. Prerequisite: understanding of ESM export syntax and module.exports interop.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_7

LANGUAGE: mjs
CODE:
```
// point.mjs\nexport default class Point {\n  constructor(x, y) { this.x = x; this.y = y; }\n}\n\n// `distance` is lost to CommonJS consumers of this module, unless it's\n// added to `Point` as a static property.\nexport function distance(a, b) { return Math.sqrt((b.x - a.x) ** 2 + (b.y - a.y) ** 2); }\nexport { Point as 'module.exports' }
```

----------------------------------------

TITLE: Requiring an ES Module Exporting module.exports from CommonJS (Node.js - JavaScript)
DESCRIPTION: Shows how a CommonJS file can import an ES module that exports 'module.exports' directly. The required class is logged and attempts to destructure named exports (like distance) yield undefined, as they are not present. Requires point.mjs from the previous snippet to exist.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/modules.md#2025-04-23_snippet_8

LANGUAGE: cjs
CODE:
```
const Point = require('./point.mjs');\nconsole.log(Point); // [class Point]\n\n// Named exports are lost when 'module.exports' is used\nconst { distance } = require('./point.mjs');\nconsole.log(distance); // undefined
```

----------------------------------------

TITLE: Reading from a Readable Stream with 'readable' and 'end' events
DESCRIPTION: This code demonstrates how to read data from a Readable stream using the 'readable' event. It uses a while loop to ensure all available data is read from the buffer. The 'end' event is used to signal the end of the stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_36

LANGUAGE: javascript
CODE:
```
const readable = getReadableStreamSomehow();

// 'readable' may be triggered multiple times as data is buffered in
readable.on('readable', () => {
  let chunk;
  console.log('Stream is readable (new data received in buffer)');
  // Use a loop to make sure we read all currently available data
  while (null !== (chunk = readable.read())) {
    console.log(`Read ${chunk.length} bytes of data...`);
  }
});

// 'end' will be triggered once when there is no more data available
readable.on('end', () => {
  console.log('Reached end of stream.');
});
```

----------------------------------------

TITLE: Node-API Status Codes (C)
DESCRIPTION: Defines the `napi_status` enum, an integral type used to indicate the success or failure of Node-API function calls. Various enum members represent specific success or failure conditions. Additional error details can be obtained using `napi_get_last_error_info` when a failure status is returned.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#_snippet_17

LANGUAGE: c
CODE:
```
typedef enum {
  napi_ok,
  napi_invalid_arg,
  napi_object_expected,
  napi_string_expected,
  napi_name_expected,
  napi_function_expected,
  napi_number_expected,
  napi_boolean_expected,
  napi_array_expected,
  napi_generic_failure,
  napi_pending_exception,
  napi_cancelled,
  napi_escape_called_twice,
  napi_handle_scope_mismatch,
  napi_callback_scope_mismatch,
  napi_queue_full,
  napi_closing,
  napi_bigint_expected,
  napi_date_expected,
  napi_arraybuffer_expected,
  napi_detachable_arraybuffer_expected,
  napi_would_deadlock,  /* unused */
  napi_no_external_buffers_allowed,
  napi_cannot_run_js
} napi_status;
```

----------------------------------------

TITLE: Filling a Buffer with ASCII character using Buffer.fill() in Node.js (ESM)
DESCRIPTION: This example demonstrates how to fill a Buffer with a specified ASCII character using the Buffer.fill() method in Node.js using ES modules. It initializes a Buffer of 50 bytes and fills it with the ASCII character 'h'. It also shows filling a buffer with an empty string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_70

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

// Fill a `Buffer` with the ASCII character 'h'.

const b = Buffer.allocUnsafe(50).fill('h');

console.log(b.toString());
// Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh

// Fill a buffer with empty string
const c = Buffer.allocUnsafe(5).fill('');

console.log(c.fill(''));
// Prints: <Buffer 00 00 00 00 00>
```

----------------------------------------

TITLE: Readable Stream with AbortSignal - JavaScript
DESCRIPTION: This code demonstrates how to use an `AbortSignal` to abort a Readable stream. It creates a new `Readable` instance with a `signal` option set to the `AbortSignal` from an `AbortController`. Calling `abort` on the `AbortController` will close the stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_89

LANGUAGE: javascript
CODE:
```
const { Readable } = require('node:stream');
const controller = new AbortController();
const read = new Readable({
  read(size) {
    // ...
  },
  signal: controller.signal,
});
// Later, abort the operation closing the stream
controller.abort();
```

----------------------------------------

TITLE: Chaining Errors with error.cause - JavaScript
DESCRIPTION: Shows how to chain errors by setting the error.cause property when creating a new error. This allows access to the original error when catching and re-throwing errors with different messages or codes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const cause = new Error('The remote HTTP server responded with a 500 status');
const symptom = new Error('The message failed to send', { cause });

console.log(symptom);
// Prints:
//   Error: The message failed to send
//       at REPL2:1:17
//       at Script.runInThisContext (node:vm:130:12)
//       ... 7 lines matching cause stack trace ...
//       at [_line] [as _line] (node:internal/readline/interface:886:18) {
//     [cause]: Error: The remote HTTP server responded with a 500 status
//         at REPL1:1:15
//         at Script.runInThisContext (node:vm:130:12)
//         at REPLServer.defaultEval (node:repl:574:29)
//         at bound (node:domain:426:15)
//         at REPLServer.runBound [as eval] (node:domain:437:12)
//         at REPLServer.onLine (node:repl:902:10)
//         at REPLServer.emit (node:events:549:35)
//         at REPLServer.emit (node:domain:482:12)
//         at [_onLine] [as _onLine] (node:internal/readline/interface:425:12)
//         at [_line] [as _line] (node:internal/readline/interface:886:18)
```

----------------------------------------

TITLE: Sending Message to Thread using postMessageToThread (CJS)
DESCRIPTION: This example demonstrates sending a message to the main thread from a nested worker thread using `postMessageToThread`. It creates a chain of 10 nested threads and sends a 'ping' message from the last thread to the main thread (thread ID 0). The main thread responds with a 'pong' message.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#_snippet_19

LANGUAGE: cjs
CODE:
```
'use strict';

const process = require('node:process');
const {
  postMessageToThread,
  threadId,
  workerData,
  Worker,
} = require('node:worker_threads');

const channel = new BroadcastChannel('sync');
const level = workerData?.level ?? 0;

if (level < 10) {
  const worker = new Worker(__filename, {
    workerData: { level: level + 1 },
  });
}

if (level === 0) {
  process.on('workerMessage', (value, source) => {
    console.log(`${source} -> ${threadId}:`, value);
    postMessageToThread(source, { message: 'pong' });
  });
} else if (level === 10) {
  process.on('workerMessage', (value, source) => {
    console.log(`${source} -> ${threadId}:`, value);
    channel.postMessage('done');
    channel.close();
  });

  postMessageToThread(0, { message: 'ping' });
}

channel.onmessage = channel.close;
```

----------------------------------------

TITLE: Extracting Filename without Extension using path.basename
DESCRIPTION: Shows how to use the optional `suffix` argument with `path.basename()` to remove a specific extension ('.html') from the returned filename, resulting in 'quux'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_7

LANGUAGE: js
CODE:
```
path.basename('/foo/bar/baz/asdf/quux.html', '.html');
// Returns: 'quux'
```

----------------------------------------

TITLE: Executing Shell Commands with `exec` (MJS)
DESCRIPTION: Demonstrates basic usage of `child_process.exec` using ES Modules syntax to run shell commands. It shows how to handle paths with spaces using double quotes and how shell variables like `$HOME` are interpreted, requiring escaping (`\$HOME`) if the literal string is needed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_5

LANGUAGE: mjs
CODE:
```
import { exec } from 'node:child_process';

exec('"/path/to/test file/test.sh" arg1 arg2');
// Double quotes are used so that the space in the path is not interpreted as
// a delimiter of multiple arguments.

exec('echo "The \\$HOME variable is $HOME"');
// The $HOME variable is escaped in the first instance, but not in the second.
```

----------------------------------------

TITLE: Using Decipheriv with Piped Streams in ESM
DESCRIPTION: Example showing how to decrypt a file using Decipheriv with piped streams in ES modules. It reads from an encrypted file, decrypts the content, and writes to a new file using the Node.js filesystem streams API.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_14

LANGUAGE: JavaScript
CODE:
```
import {
  createReadStream,
  createWriteStream,
} from 'node:fs';
import { Buffer } from 'node:buffer';
const {
  scryptSync,
  createDecipheriv,
} = await import('node:crypto');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';
// Use the async `crypto.scrypt()` instead.
const key = scryptSync(password, 'salt', 24);
// The IV is usually passed along with the ciphertext.
const iv = Buffer.alloc(16, 0); // Initialization vector.

const decipher = createDecipheriv(algorithm, key, iv);

const input = createReadStream('test.enc');
const output = createWriteStream('test.js');

input.pipe(decipher).pipe(output);
```

----------------------------------------

TITLE: Configuring Primary Settings with setupPrimary in Node.js Cluster (CommonJS)
DESCRIPTION: CommonJS version of the setupPrimary() example, showing how to configure settings for worker processes. It demonstrates changing the worker script path and arguments between fork calls.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_16

LANGUAGE: javascript
CODE:
```
const cluster = require('node:cluster');

cluster.setupPrimary({
  exec: 'worker.js',
  args: ['--use', 'https'],
  silent: true,
});
cluster.fork(); // https worker
cluster.setupPrimary({
  exec: 'worker.js',
  args: ['--use', 'http'],
});
cluster.fork(); // http worker
```

----------------------------------------

TITLE: SEA Configuration with Assets Example
DESCRIPTION: JSON configuration example showing how to include assets in a Single Executable Application by specifying file paths that will be bundled into the preparation blob.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/single-executable-applications.md#2025-04-23_snippet_16

LANGUAGE: json
CODE:
```
{
  "main": "/path/to/bundled/script.js",
  "output": "/path/to/write/the/generated/blob.blob",
  "assets": {
    "a.jpg": "/path/to/a.jpg",
    "b.txt": "/path/to/b.txt"
  }
}
```

----------------------------------------

TITLE: Calling JavaScript Function from C: napi_call_function Example (C)
DESCRIPTION: This C code snippet demonstrates how to use `napi_call_function` to call the JavaScript `AddTwo` function from a native add-on. It shows how to get the global object, retrieve the function property, create arguments, call the function, and retrieve the result.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#_snippet_167

LANGUAGE: c
CODE:
```
// Get the function named "AddTwo" on the global object
napi_value global, add_two, arg;
napi_status status = napi_get_global(env, &global);
if (status != napi_ok) return;

status = napi_get_named_property(env, global, "AddTwo", &add_two);
if (status != napi_ok) return;

// const arg = 1337
status = napi_create_int32(env, 1337, &arg);
if (status != napi_ok) return;

napi_value* argv = &arg;
size_t argc = 1;

// AddTwo(arg);
napi_value return_val;
status = napi_call_function(env, global, add_two, argc, argv, &return_val);
if (status != napi_ok) return;

// Convert the result back to a native type
int32_t result;
status = napi_get_value_int32(env, return_val, &result);
if (status != napi_ok) return;
```

----------------------------------------

TITLE: Extracting File Extension using path.extname (Multiple Dots)
DESCRIPTION: Shows `path.extname()` returning only the last extension ('.md') when multiple dots are present in the filename.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_16

LANGUAGE: js
CODE:
```
path.extname('index.coffee.md');
// Returns: '.md'
```

----------------------------------------

TITLE: Using Node.js --require Option (Shell)
DESCRIPTION: Demonstrates how to use the --require or -r command-line option multiple times to pre-load modules before the main script is executed. This is useful for setting up environments or applying patches.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_58

LANGUAGE: Shell
CODE:
```
node --require "./a.js" --require "./b.js"
```

----------------------------------------

TITLE: Closing Dispatcher with Promise and Callback Examples
DESCRIPTION: Demonstrates two ways to close a dispatcher - using Promise-based approach and callback-based approach.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Dispatcher.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
dispatcher.close() // -> Promise
dispatcher.close(() => {}) // -> void
```

----------------------------------------

TITLE: Creating Buffers from Uint16Array (CJS)
DESCRIPTION: Demonstrates creating two Buffers from a Uint16Array using CommonJS modules. The first Buffer copies the TypedArray's contents, while the second shares memory with it. Changes to the TypedArray affect the shared Buffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_11

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const arr = new Uint16Array(2);

arr[0] = 5000;
arr[1] = 4000;

// Copies the contents of `arr`.
const buf1 = Buffer.from(arr);

// Shares memory with `arr`.
const buf2 = Buffer.from(arr.buffer);

console.log(buf1);
// Prints: <Buffer 88 a0>
console.log(buf2);
// Prints: <Buffer 88 13 a0 0f>

arr[1] = 6000;

console.log(buf1);
// Prints: <Buffer 88 a0>
console.log(buf2);
// Prints: <Buffer 88 13 70 17>
```

----------------------------------------

TITLE: Reading file contents synchronously with fs.readFileSync in Node.js
DESCRIPTION: Synchronously reads the entire contents of a file. Returns a string if an `encoding` is specified, otherwise returns a Buffer. The `path` can be a filename, URL, or file descriptor. Behavior when the path is a directory is platform-specific.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_109

LANGUAGE: mjs
CODE:
```
import { readFileSync } from 'node:fs';

// macOS, Linux, and Windows
readFileSync('<directory>');
// => [Error: EISDIR: illegal operation on a directory, read <directory>]

//  FreeBSD
readFileSync('<directory>'); // => <data>
```

----------------------------------------

TITLE: Deleting File with fs (Callback, CommonJS)
DESCRIPTION: This example demonstrates deleting a file asynchronously using the callback-based `unlink` function from 'node:fs' in a CommonJS context. It provides a callback function as the last argument to handle the result or any errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_7

LANGUAGE: cjs
CODE:
```
const { unlink } = require('node:fs');

unlink('/tmp/hello', (err) => {
  if (err) throw err;
  console.log('successfully deleted /tmp/hello');
});
```

----------------------------------------

TITLE: Updating package-lock.json without modifying node_modules
DESCRIPTION: Command to fix vulnerabilities in the package-lock.json file without modifying the node_modules directory, useful for staged updates.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
$ npm audit fix --package-lock-only
```

----------------------------------------

TITLE: Querying Dependencies with CSS-like Selector Syntax in npm
DESCRIPTION: Examples of using the dependency selector syntax to query npm dependencies. This includes selecting direct descendants, production dependencies with major updates, and dependencies with vulnerabilities.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/dependency-selectors.md#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
:root > :outdated(major)
```

LANGUAGE: css
CODE:
```
.prod:outdated(in-range)
```

LANGUAGE: css
CODE:
```
:root > .prod:vuln
```

LANGUAGE: css
CODE:
```
:vuln([severity=high])
```

LANGUAGE: css
CODE:
```
:vuln([severity=high],[severity=moderate])
```

LANGUAGE: css
CODE:
```
:vuln([cwe=1333])
```

----------------------------------------

TITLE: Getting Child Process PID Example
DESCRIPTION: Demonstrates how to spawn a child process and access its process identifier (PID).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_37

LANGUAGE: javascript
CODE:
```
const { spawn } = require('node:child_process');
const grep = spawn('grep', ['ssh']);

console.log(`Spawned child pid: ${grep.pid}`);
grep.stdin.end();
```

LANGUAGE: javascript
CODE:
```
import { spawn } from 'node:child_process';
const grep = spawn('grep', ['ssh']);

console.log(`Spawned child pid: ${grep.pid}`);
grep.stdin.end();
```

----------------------------------------

TITLE: Defining and Aliasing Cryptographic OID Mappings - Text
DESCRIPTION: This snippet defines a configuration mapping of cryptographic object identifiers (OIDs), assigning descriptive text names and aliases to standard OID number sequences for use in cryptography-related software. Dependencies include knowledge of standard OID definitions (from ITU-T, ISO, IEEE, PKCS, S/MIME, and SECG), and the custom DSL is used for hierarchical navigation and documentation. Parameters are OID component numbers or existing OID names, with outputs being names, comments, and allowed aliases; usage is limited to environments which consume this specific text-based OID mapping format and does not provide parsing or validation logic itself.
SOURCE: https://github.com/nodejs/node/blob/main/deps/openssl/openssl/crypto/objects/objects.txt#2025-04-23_snippet_0

LANGUAGE: Text
CODE:
```
# CCITT was renamed to ITU-T quite some time ago\n0\t\t\t: ITU-T\t\t\t: itu-t\n!Alias ccitt itu-t\n\n1\t\t\t: ISO\t\t\t: iso\n\n2\t\t\t: JOINT-ISO-ITU-T\t: joint-iso-itu-t\n!Alias joint-iso-ccitt joint-iso-itu-t\n\niso 2\t\t\t: member-body\t\t: ISO Member Body\n\niso 3\t\t\t: identified-organization\n\n# GMAC OID\niso 0 9797 3 4                          : GMAC          : gmac\n\n# HMAC OIDs\nidentified-organization 6 1 5 5 8 1 1\t: HMAC-MD5\t: hmac-md5\nidentified-organization 6 1 5 5 8 1 2\t: HMAC-SHA1\t: hmac-sha1\n\n# \"1.3.36.8.3.3\"\nidentified-organization 36 8 3 3\t: x509ExtAdmission\t: Professional Information or basis for Admission\n\nidentified-organization 132\t: certicom-arc\n\nidentified-organization 111     : ieee\nieee 2 1619                     : ieee-siswg    : IEEE Security in Storage Working Group\n\njoint-iso-itu-t 23\t: international-organizations\t: International Organizations\n\ninternational-organizations 43\t: wap\nwap 1\t\t\t: wap-wsg\n\njoint-iso-itu-t 5 1 5\t: selected-attribute-types\t: Selected Attribute Types\n\nselected-attribute-types 55\t: clearance\n\nmember-body 840\t\t: ISO-US\t\t: ISO US Member Body\nISO-US 10040\t\t: X9-57\t\t: X9.57\nX9-57 4\t\t: X9cm\t\t: X9.57 CM ?\n\nmember-body 156         : ISO-CN        : ISO CN Member Body\nISO-CN 10197            : oscca\noscca 1                 : sm-scheme\n\n!Cname dsa\nX9cm 1\t\t\t: DSA\t\t\t: dsaEncryption\nX9cm 3\t\t\t: DSA-SHA1\t\t: dsaWithSHA1\n\n\nISO-US 10045\t\t: ansi-X9-62\t\t: ANSI X9.62\n!module X9-62\n!Alias id-fieldType ansi-X9-62 1\nX9-62_id-fieldType 1\t\t: prime-field\nX9-62_id-fieldType 2\t\t: characteristic-two-field\nX9-62_characteristic-two-field 3 : id-characteristic-two-basis\nX9-62_id-characteristic-two-basis 1 : onBasis\nX9-62_id-characteristic-two-basis 2 : tpBasis\nX9-62_id-characteristic-two-basis 3 : ppBasis\n!Alias id-publicKeyType ansi-X9-62 2\nX9-62_id-publicKeyType 1\t\t: id-ecPublicKey\n!Alias ellipticCurve ansi-X9-62 3\n!Alias c-TwoCurve X9-62_ellipticCurve 0\nX9-62_c-TwoCurve 1\t\t: c2pnb163v1\nX9-62_c-TwoCurve 2\t\t: c2pnb163v2\nX9-62_c-TwoCurve 3\t\t: c2pnb163v3\nX9-62_c-TwoCurve 4\t\t: c2pnb176v1\nX9-62_c-TwoCurve 5\t\t: c2tnb191v1\nX9-62_c-TwoCurve 6\t\t: c2tnb191v2\nX9-62_c-TwoCurve 7\t\t: c2tnb191v3\nX9-62_c-TwoCurve 8\t\t: c2onb191v4\nX9-62_c-TwoCurve 9\t\t: c2onb191v5\nX9-62_c-TwoCurve 10\t\t: c2pnb208w1\nX9-62_c-TwoCurve 11\t\t: c2tnb239v1\nX9-62_c-TwoCurve 12\t\t: c2tnb239v2\nX9-62_c-TwoCurve 13\t\t: c2tnb239v3\nX9-62_c-TwoCurve 14\t\t: c2onb239v4\nX9-62_c-TwoCurve 15\t\t: c2onb239v5\nX9-62_c-TwoCurve 16\t\t: c2pnb272w1\nX9-62_c-TwoCurve 17\t\t: c2pnb304w1\nX9-62_c-TwoCurve 18\t\t: c2tnb359v1\nX9-62_c-TwoCurve 19\t\t: c2pnb368w1\nX9-62_c-TwoCurve 20\t\t: c2tnb431r1\n!Alias primeCurve X9-62_ellipticCurve 1\nX9-62_primeCurve 1\t \t: prime192v1\nX9-62_primeCurve 2\t \t: prime192v2\nX9-62_primeCurve 3\t \t: prime192v3\nX9-62_primeCurve 4\t \t: prime239v1\nX9-62_primeCurve 5\t \t: prime239v2\nX9-62_primeCurve 6\t \t: prime239v3\nX9-62_primeCurve 7\t \t: prime256v1\n!Alias id-ecSigType ansi-X9-62 4\n!global\nX9-62_id-ecSigType 1\t\t: ecdsa-with-SHA1\nX9-62_id-ecSigType 2\t\t: ecdsa-with-Recommended\nX9-62_id-ecSigType 3\t\t: ecdsa-with-Specified\necdsa-with-Specified 1\t\t: ecdsa-with-SHA224\necdsa-with-Specified 2\t\t: ecdsa-with-SHA256\necdsa-with-Specified 3\t\t: ecdsa-with-SHA384\necdsa-with-Specified 4\t\t: ecdsa-with-SHA512\n\n# SECG curve OIDs from \"SEC 2: Recommended Elliptic Curve Domain Parameters\"\n# (http://www.secg.org/)\n!Alias secg_ellipticCurve certicom-arc 0\n# SECG prime curves OIDs\nsecg-ellipticCurve 6\t\t: secp112r1\nsecg-ellipticCurve 7\t\t: secp112r2\nsecg-ellipticCurve 28\t\t: secp128r1\nsecg-ellipticCurve 29\t\t: secp128r2\nsecg-ellipticCurve 9\t\t: secp160k1\nsecg-ellipticCurve 8\t\t: secp160r1\nsecg-ellipticCurve 30\t\t: secp160r2\nsecg-ellipticCurve 31\t\t: secp192k1\n# NOTE: the curve secp192r1 is the same as prime192v1 defined above\n#       and is therefore omitted\nsecg-ellipticCurve 32\t\t: secp224k1\nsecg-ellipticCurve 33\t\t: secp224r1\nsecg-ellipticCurve 10\t\t: secp256k1\n# NOTE: the curve secp256r1 is the same as prime256v1 defined above\n#       and is therefore omitted\nsecg-ellipticCurve 34\t\t: secp384r1\nsecg-ellipticCurve 35\t\t: secp521r1\n# SECG characteristic two curves OIDs\nsecg-ellipticCurve 4\t\t: sect113r1\nsecg-ellipticCurve 5\t\t: sect113r2\nsecg-ellipticCurve 22\t\t: sect131r1\nsecg-ellipticCurve 23\t\t: sect131r2\nsecg-ellipticCurve 1\t\t: sect163k1\nsecg-ellipticCurve 2\t\t: sect163r1\nsecg-ellipticCurve 15\t\t: sect163r2\nsecg-ellipticCurve 24\t\t: sect193r1\nsecg-ellipticCurve 25\t\t: sect193r2\nsecg-ellipticCurve 26\t\t: sect233k1\nsecg-ellipticCurve 27\t\t: sect233r1\nsecg-ellipticCurve 3\t\t: sect239k1\nsecg-ellipticCurve 16\t\t: sect283k1\nsecg-ellipticCurve 17\t\t: sect283r1\nsecg-ellipticCurve 36\t\t: sect409k1\nsecg-ellipticCurve 37\t\t: sect409r1\nsecg-ellipticCurve 38\t\t: sect571k1\nsecg-ellipticCurve 39\t\t: sect571r1\n\n# WAP/TLS curve OIDs (http://www.wapforum.org/)\n!Alias wap-wsg-idm-ecid wap-wsg 4\nwap-wsg-idm-ecid 1\t: wap-wsg-idm-ecid-wtls1\nwap-wsg-idm-ecid 3\t: wap-wsg-idm-ecid-wtls3\nwap-wsg-idm-ecid 4\t: wap-wsg-idm-ecid-wtls4\nwap-wsg-idm-ecid 5\t: wap-wsg-idm-ecid-wtls5\nwap-wsg-idm-ecid 6\t: wap-wsg-idm-ecid-wtls6\nwap-wsg-idm-ecid 7\t: wap-wsg-idm-ecid-wtls7\nwap-wsg-idm-ecid 8\t: wap-wsg-idm-ecid-wtls8\nwap-wsg-idm-ecid 9\t: wap-wsg-idm-ecid-wtls9\nwap-wsg-idm-ecid 10\t: wap-wsg-idm-ecid-wtls10\nwap-wsg-idm-ecid 11\t: wap-wsg-idm-ecid-wtls11\nwap-wsg-idm-ecid 12\t: wap-wsg-idm-ecid-wtls12\n\n\nISO-US 113533 7 66 10\t: CAST5-CBC\t\t: cast5-cbc\n\t\t\t: CAST5-ECB\t\t: cast5-ecb\n!Cname cast5-cfb64\n\t\t\t: CAST5-CFB\t\t: cast5-cfb\n!Cname cast5-ofb64\n\t\t\t: CAST5-OFB\t\t: cast5-ofb\n!Cname pbeWithMD5AndCast5-CBC\nISO-US 113533 7 66 12\t:\t\t: pbeWithMD5AndCast5CBC\n\n# Macs for CMP and CRMF\nISO-US 113533 7 66 13\t: id-PasswordBasedMAC\t: password based MAC\nISO-US 113533 7 66 30\t: id-DHBasedMac\t\t: Diffie-Hellman based MAC\n\nISO-US 113549\t\t: rsadsi\t\t: RSA Data Security, Inc.\n\nrsadsi 1\t\t: pkcs\t\t: RSA Data Security, Inc. PKCS\n\npkcs 1\t\t\t: pkcs1\npkcs1 1\t\t\t:\t\t: rsaEncryption\npkcs1 2\t\t\t: RSA-MD2\t\t: md2WithRSAEncryption\npkcs1 3\t\t\t: RSA-MD4\t\t: md4WithRSAEncryption\npkcs1 4\t\t\t: RSA-MD5\t\t: md5WithRSAEncryption\npkcs1 5\t\t\t: RSA-SHA1\t\t: sha1WithRSAEncryption\n# According to PKCS #1 version 2.1\npkcs1 7\t\t\t: RSAES-OAEP\t\t: rsaesOaep\npkcs1 8\t\t\t: MGF1\t\t: mgf1\npkcs1 9\t\t\t: PSPECIFIED\t\t: pSpecified\npkcs1 10\t\t\t: RSASSA-PSS\t\t: rsassaPss\n\npkcs1 11\t\t\t: RSA-SHA256\t\t: sha256WithRSAEncryption\npkcs1 12\t\t\t: RSA-SHA384\t\t: sha384WithRSAEncryption\npkcs1 13\t\t\t: RSA-SHA512\t\t: sha512WithRSAEncryption\npkcs1 14\t\t\t: RSA-SHA224\t\t: sha224WithRSAEncryption\npkcs1 15\t\t\t: RSA-SHA512/224\t: sha512-224WithRSAEncryption\npkcs1 16\t\t\t: RSA-SHA512/256\t: sha512-256WithRSAEncryption\n\npkcs 3\t\t\t: pkcs3\npkcs3 1\t\t\t:\t\t: dhKeyAgreement\n\npkcs 5\t\t\t: pkcs5\npkcs5 1\t\t\t: PBE-MD2-DES\t\t: pbeWithMD2AndDES-CBC\npkcs5 3\t\t\t: PBE-MD5-DES\t\t: pbeWithMD5AndDES-CBC\npkcs5 4\t\t\t: PBE-MD2-RC2-64\t: pbeWithMD2AndRC2-CBC\npkcs5 6\t\t\t: PBE-MD5-RC2-64\t: pbeWithMD5AndRC2-CBC\npkcs5 10\t\t\t: PBE-SHA1-DES\t\t: pbeWithSHA1AndDES-CBC\npkcs5 11\t\t\t: PBE-SHA1-RC2-64\t: pbeWithSHA1AndRC2-CBC\n!Cname id_pbkdf2\npkcs5 12\t\t\t:\t\t: PBKDF2\n!Cname pbes2\npkcs5 13\t\t\t:\t\t: PBES2\n!Cname pbmac1\npkcs5 14\t\t\t:\t\t: PBMAC1\n\npkcs 7\t\t\t: pkcs7\npkcs7 1\t\t\t:\t\t: pkcs7-data\n!Cname pkcs7-signed\npkcs7 2\t\t\t:\t\t: pkcs7-signedData\n!Cname pkcs7-enveloped\npkcs7 3\t\t\t:\t\t: pkcs7-envelopedData\n!Cname pkcs7-signedAndEnveloped\npkcs7 4\t\t\t:\t\t: pkcs7-signedAndEnvelopedData\n!Cname pkcs7-digest\npkcs7 5\t\t\t:\t\t: pkcs7-digestData\n!Cname pkcs7-encrypted\npkcs7 6\t\t\t:\t\t: pkcs7-encryptedData\n\npkcs 9\t\t\t: pkcs9\n!module pkcs9\npkcs9 1\t\t\t: \t\t: emailAddress\npkcs9 2\t\t\t:\t\t: unstructuredName\npkcs9 3\t\t\t:\t\t: contentType\npkcs9 4\t\t\t:\t\t: messageDigest\npkcs9 5\t\t\t:\t\t: signingTime\npkcs9 6\t\t\t:\t\t: countersignature\npkcs9 7\t\t\t:\t\t: challengePassword\npkcs9 8\t\t\t:\t\t: unstructuredAddress\n!Cname extCertAttributes\npkcs9 9\t\t\t:\t\t: extendedCertificateAttributes\n!global\n\n!Cname ext-req\npkcs9 14\t\t: extReq\t\t: Extension Request\n\n!Cname SMIMECapabilities\npkcs9 15\t\t: SMIME-CAPS\t\t: S/MIME Capabilities\n\n# S/MIME\n!Cname SMIME\npkcs9 16\t\t: SMIME\t\t: S/MIME\nSMIME 0\t\t\t: id-smime-mod\nSMIME 1\t\t\t: id-smime-ct\nSMIME 2\t\t\t: id-smime-aa\nSMIME 3\t\t\t: id-smime-alg\nSMIME 4\t\t\t: id-smime-cd\nSMIME 5\t\t\t: id-smime-spq\nSMIME 6\t\t\t: id-smime-cti\n\n# S/MIME Modules\nid-smime-mod 1\t\t: id-smime-mod-cms\nid-smime-mod 2\t\t: id-smime-mod-ess\nid-smime-mod 3\t\t: id-smime-mod-oid\nid-smime-mod 4\t\t: id-smime-mod-msg-v3\nid-smime-mod 5\t\t: id-smime-mod-ets-eSignature-88\nid-smime-mod 6\t\t: id-smime-mod-ets-eSignature-97\nid-smime-mod 7\t\t: id-smime-mod-ets-eSigPolicy-88\nid-smime-mod 8\t\t: id-smime-mod-ets-eSigPolicy-97\n\n# S/MIME Content Types\nid-smime-ct 1\t\t: id-smime-ct-receipt\nid-smime-ct 2\t\t: id-smime-ct-authData\nid-smime-ct 3\t\t: id-smime-ct-publishCert\nid-smime-ct 4\t\t: id-smime-ct-TSTInfo\nid-smime-ct 5\t\t: id-smime-ct-TDTInfo\nid-smime-ct 6\t\t: id-smime-ct-contentInfo\nid-smime-ct 7\t\t: id-smime-ct-DVCSRequestData\nid-smime-ct 8\t\t: id-smime-ct-DVCSResponseData\nid-smime-ct 9\t\t: id-smime-ct-compressedData\nid-smime-ct 19\t\t: id-smime-ct-contentCollection\nid-smime-ct 23\t\t: id-smime-ct-authEnvelopedData\nid-smime-ct 24\t\t: id-ct-routeOriginAuthz\nid-smime-ct 26\t\t: id-ct-rpkiManifest\nid-smime-ct 27\t\t: id-ct-asciiTextWithCRLF\nid-smime-ct 28\t\t: id-ct-xml\nid-smime-ct 35\t\t: id-ct-rpkiGhostbusters\nid-smime-ct 36\t\t: id-ct-resourceTaggedAttest\nid-smime-ct 47\t\t: id-ct-geofeedCSVwithCRLF\nid-smime-ct 48\t\t: id-ct-signedChecklist\n\n# S/MIME Attributes\nid-smime-aa 1\t\t: id-smime-aa-receiptRequest\nid-smime-aa 2\t\t: id-smime-aa-securityLabel\nid-smime-aa 3\t\t: id-smime-aa-mlExpandHistory\nid-smime-aa 4\t\t: id-smime-aa-contentHint\nid-smime-aa 5\t\t: id-smime-aa-msgSigDigest\n# obsolete\nid-smime-aa 6\t\t: id-smime-aa-encapContentType\nid-smime-aa 7\t\t: id-smime-aa-contentIdentifier\n
```

----------------------------------------

TITLE: Initializing and Using nopt for Option Parsing in Node.js
DESCRIPTION: Demonstrates the basic setup and usage of the 'nopt' library. It requires 'nopt', 'stream', and 'path', defines known options ('knownOpts') with various expected types (String, Stream, Number, path, custom enum, Boolean, Array), and defines shorthand aliases ('shortHands'). It then parses the command-line arguments from 'process.argv' (skipping the first two elements) using these definitions and prints the resulting 'parsed' object. Dependencies include the 'nopt' library.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/nopt/README.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
// my-program.js
var nopt = require("nopt")
  , Stream = require("stream").Stream
  , path = require("path")
  , knownOpts = { "foo" : [String, null]
                , "bar" : [Stream, Number]
                , "baz" : path
                , "bloo" : [ "big", "medium", "small" ]
                , "flag" : Boolean
                , "pick" : Boolean
                , "many1" : [String, Array]
                , "many2" : [path, Array]
                }
  , shortHands = { "foofoo" : ["--foo", "Mr. Foo"]
                 , "b7" : ["--bar", "7"]
                 , "m" : ["--bloo", "medium"]
                 , "p" : ["--pick"]
                 , "f" : ["--flag"]
                 }
             // everything is optional.
             // knownOpts and shorthands default to {}
             // arg list defaults to process.argv
             // slice defaults to 2
  , parsed = nopt(knownOpts, shortHands, process.argv, 2)
console.log(parsed)
```

----------------------------------------

TITLE: Duplex.fromWeb Conversion to Node.js Stream (mjs)
DESCRIPTION: Converts a Web Streams `ReadableStream` and `WritableStream` pair to a Node.js `Duplex` stream.  It demonstrates writing to the duplex stream and reading from it using a for-await-of loop.  Requires `node:stream` and `node:stream/web`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_69

LANGUAGE: mjs
CODE:
```
import { Duplex } from 'node:stream';
import {
  ReadableStream,
  WritableStream,
} from 'node:stream/web';

const readable = new ReadableStream({
  start(controller) {
    controller.enqueue('world');
  },
});

const writable = new WritableStream({
  write(chunk) {
    console.log('writable', chunk);
  },
});

const pair = {
  readable,
  writable,
};
const duplex = Duplex.fromWeb(pair, { encoding: 'utf8', objectMode: true });

duplex.write('hello');

for await (const chunk of duplex) {
  console.log('readable', chunk);
}
```

----------------------------------------

TITLE: Using ReadableStream.pipeThrough() with TransformStream in JavaScript (CommonJS)
DESCRIPTION: This example shows how to use the pipeThrough() method to connect a ReadableStream to a TransformStream, which converts the data to uppercase before it's read, in CommonJS format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
const {
  ReadableStream,
  TransformStream,
} = require('node:stream/web');

const stream = new ReadableStream({
  start(controller) {
    controller.enqueue('a');
  },
});

const transform = new TransformStream({
  transform(chunk, controller) {
    controller.enqueue(chunk.toUpperCase());
  },
});

const transformedStream = stream.pipeThrough(transform);

(async () => {
  for await (const chunk of transformedStream)
    console.log(chunk);
    // Prints: A
})();
```

----------------------------------------

TITLE: Generating SHA256 Hash Using Node.js Crypto (ESM)
DESCRIPTION: Example demonstrating how to generate a SHA256 hash of a file using the crypto.createHash method in ECMAScript modules format. Creates a readable stream from a file and generates its hash digest in hex format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_60

LANGUAGE: javascript
CODE:
```
import {
  createReadStream,
} from 'node:fs';
import { argv } from 'node:process';
const {
  createHash,
} = await import('node:crypto');

const filename = argv[2];

const hash = createHash('sha256');

const input = createReadStream(filename);
input.on('readable', () => {
  // Only one element is going to be produced by the
  // hash stream.
  const data = input.read();
  if (data)
    hash.update(data);
  else {
    console.log(`${hash.digest('hex')} ${filename}`);
  }
});
```

----------------------------------------

TITLE: Using PerformanceObserver with type Option in CommonJS
DESCRIPTION: Demonstrates creating multiple performance marks and observing them with the 'type' option in CommonJS. The observer is called asynchronously after all marks are created.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_11

LANGUAGE: javascript
CODE:
```
const {
  performance,
  PerformanceObserver,
} = require('node:perf_hooks');

const obs = new PerformanceObserver((list, observer) => {
  // Called once asynchronously. `list` contains three items.
});
obs.observe({ type: 'mark' });

for (let n = 0; n < 3; n++)
  performance.mark(`test${n}`);
```

----------------------------------------

TITLE: Creating Symbolic Links with fsPromises.symlink (Node.js)
DESCRIPTION: Creates a symbolic link pointing from `path` to `target`. On Windows, the optional `type` argument ('dir', 'file', or 'junction') can specify the link type. If `type` is null or omitted, Node.js attempts to autodetect the target type.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_29



----------------------------------------

TITLE: Attempting Child Process Spawn in Node.js (JS)
DESCRIPTION: Shows how to use `child_process.spawn` which will be blocked by the permission model unless `--allow-child-process` is used.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_2

LANGUAGE: js
CODE:
```
const childProcess = require('node:child_process');
// Attempt to bypass the permission
childProcess.spawn('node', ['-e', 'require("fs").writeFileSync("/new-file", "example")']);
```

----------------------------------------

TITLE: Skip a Test Suite in Node.js
DESCRIPTION: A shorthand method to define a test suite that will be skipped. It is equivalent to calling `describe()` with the `skip: true` option in the options object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_49

LANGUAGE: javascript
CODE:
```
describe.skip([name][, options][, fn])
```

----------------------------------------

TITLE: Transferring ArrayBuffer with TypedArray Views
DESCRIPTION: This snippet illustrates the impact of transferring an ArrayBuffer when multiple TypedArray views exist. Transferring the ArrayBuffer renders other views unusable.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#_snippet_37

LANGUAGE: javascript
CODE:
```
const ab = new ArrayBuffer(10);

const u1 = new Uint8Array(ab);
const u2 = new Uint16Array(ab);

console.log(u2.length);  // prints 5

port.postMessage(u1, [u1.buffer]);

console.log(u2.length);  // prints 0
```

----------------------------------------

TITLE: Displaying Tabular Data with console.table in Node.js (JavaScript)
DESCRIPTION: Shows how `console.table` attempts to format data (like arrays of objects) into a readable table logged to the console (`stdout`). Explains its fallback behavior with non-tabular data (logging the argument directly using `util.inspect`) and demonstrates how to specify which properties to include as columns using the optional `properties` array argument.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/console.md#2025-04-23_snippet_6

LANGUAGE: js
CODE:
```
// These can't be parsed as tabular data
console.table(Symbol());
// Symbol()

console.table(undefined);
// undefined

console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }]);
// ┌─────────┬─────┬─────┐
// │ (index) │ a   │ b   │
// ├─────────┼─────┼─────┤
// │ 0       │ 1   │ 'Y' │
// │ 1       │ 'Z' │ 2   │
// └─────────┴─────┴─────┘

console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }], ['a']);
// ┌─────────┬─────┐
// │ (index) │ a   │
// ├─────────┼─────┤
// │ 0       │ 1   │
// │ 1       │ 'Z' │
// └─────────┴─────┘
```

----------------------------------------

TITLE: Deprecating util.is* Functions in Node.js
DESCRIPTION: These commits mark the deprecation of various util.is* functions in Node.js, moving them to end-of-life (EOL). This includes util.isBoolean, util.isBuffer, util.isNull, util.isNullOrUndefined, util.isNumber, util.isString, util.isSymbol, util.isUndefined, util.isRegExp, util.isObject, util.isDate, util.isError, util.isFunction, util.isPrimitive, and util.log. These functions are being deprecated as part of an ongoing effort to modernize the util module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V23.md#_snippet_85



----------------------------------------

TITLE: HTTPS Request with URL Object
DESCRIPTION: This example demonstrates how to use a `URL` object as the `options` parameter for `https.request()`. The URL object is created with the desired URL, and then passed directly to the `https.request()` method.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#_snippet_13

LANGUAGE: js
CODE:
```
const options = new URL('https://abc:xyz@example.com');

const req = https.request(options, (res) => {
  // ...
});
```

----------------------------------------

TITLE: Finding files with fs.globSync (Node.js)
DESCRIPTION: Synchronously finds file paths that match a specified glob pattern. It accepts a single pattern string or an array of patterns, and an optional `options` object to configure the current working directory, exclusion patterns, or return type (paths or Dirents). It returns an array of strings representing the paths of files that match the pattern.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_98

LANGUAGE: MJS
CODE:
```
import { globSync } from 'node:fs';

console.log(globSync('**/*.js'));
```

LANGUAGE: CJS
CODE:
```
const { globSync } = require('node:fs');

console.log(globSync('**/*.js'));
```

----------------------------------------

TITLE: Measuring HTTP Round-Trip Time in ESM Format
DESCRIPTION: This example demonstrates how to measure the time taken for an HTTP request-response cycle using the PerformanceObserver API in ESM format. It creates an HTTP server, makes a request to it, and logs the performance metrics for both outgoing and incoming messages.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_24

LANGUAGE: javascript
CODE:
```
import { PerformanceObserver } from 'node:perf_hooks';
import { createServer, get } from 'node:http';

const obs = new PerformanceObserver((items) => {
  items.getEntries().forEach((item) => {
    console.log(item);
  });
});

obs.observe({ entryTypes: ['http'] });

const PORT = 8080;

createServer((req, res) => {
  res.end('ok');
}).listen(PORT, () => {
  get(`http://127.0.0.1:${PORT}`);
});
```

----------------------------------------

TITLE: Read file line by line using the `'line'` event (ESM)
DESCRIPTION: This code reads a file line by line using the `'line'` event of the `readline` interface. It creates a `ReadStream` from the input file and attaches a listener to the `'line'` event to process each line asynchronously. The `crlfDelay` option handles different line endings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#_snippet_35

LANGUAGE: mjs
CODE:
```
import { createReadStream } from 'node:fs';
import { createInterface } from 'node:readline';

const rl = createInterface({
  input: createReadStream('sample.txt'),
  crlfDelay: Infinity,
});

rl.on('line', (line) => {
  console.log(`Line from file: ${line}`);
});
```

----------------------------------------

TITLE: Basic Mocked HTTP Request Example
DESCRIPTION: Shows how to intercept and mock a basic HTTP request using MockAgent and global dispatcher.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/MockAgent.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { MockAgent, setGlobalDispatcher, request } from 'undici'

const mockAgent = new MockAgent()
setGlobalDispatcher(mockAgent)

const mockPool = mockAgent.get('http://localhost:3000')
mockPool.intercept({ path: '/foo' }).reply(200, 'foo')

const { statusCode, body } = await request('http://localhost:3000/foo')

console.log('response received', statusCode) // response received 200

for await (const data of body) {
  console.log('data', data.toString('utf8')) // data foo
}
```

----------------------------------------

TITLE: Enabling Node.js Permissions via npx --node-options
DESCRIPTION: Demonstrates how to execute a package using `npx` while enabling the Node.js permission model for the executed package's Node.js process. The `--node-options="--permission"` flag passes the `--permission` argument to the underlying Node.js runtime started by `npx`, setting the `NODE_OPTIONS` environment variable specifically for that spawned process.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/permissions.md#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
npx --node-options="--permission" package-name
```

----------------------------------------

TITLE: Iterating over URLSearchParams keys
DESCRIPTION: Demonstrates how to iterate over the names of each name-value pair in a URLSearchParams object using the keys() method. The example creates a URLSearchParams object and then iterates over its keys, printing each key to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_40

LANGUAGE: javascript
CODE:
```
const params = new URLSearchParams('foo=bar&foo=baz');
for (const name of params.keys()) {
  console.log(name);
}
// Prints:
//   foo
//   foo
```

----------------------------------------

TITLE: Parsing JavaScript asynchronously using Worker threads (ESM)
DESCRIPTION: This example demonstrates how to spawn a worker thread to parse JavaScript code asynchronously. It uses `workerData` to pass the script to the worker and `parentPort.postMessage` to send the parsed result back to the main thread. It also shows how to handle errors and exit codes from the worker.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#_snippet_2

LANGUAGE: mjs
CODE:
```
import {
  Worker,
  isMainThread,
  parentPort,
  workerData,
} from 'node:worker_threads';

if (!isMainThread) {
  const { parse } = await import('some-js-parsing-library');
  const script = workerData;
  parentPort.postMessage(parse(script));
}

export default function parseJSAsync(script) {
  return new Promise((resolve, reject) => {
    const worker = new Worker(new URL(import.meta.url), {
      workerData: script,
    });
    worker.on('message', resolve);
    worker.on('error', reject);
    worker.on('exit', (code) => {
      if (code !== 0)
        reject(new Error(`Worker stopped with exit code ${code}`));
    });
  });
};
```

----------------------------------------

TITLE: Resuming a Paused Readable Stream
DESCRIPTION: The `readable.resume()` method resumes a paused Readable stream, causing it to emit `'data'` events and switch into flowing mode. This example demonstrates how to consume a stream without processing the data, simply reaching the 'end' event.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_38

LANGUAGE: javascript
CODE:
```
getReadableStreamSomehow()
  .resume()
  .on('end', () => {
    console.log('Reached the end, but did not read anything.');
  });
```

----------------------------------------

TITLE: Signing and Verifying Data using Web Crypto API in JavaScript
DESCRIPTION: These functions demonstrate how to sign and verify data using the RSASSA-PKCS1-v1_5 algorithm with the Web Crypto API. They handle text encoding and the signing/verifying process.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

async function sign(key, data) {
  const ec = new TextEncoder();
  const signature =
    await subtle.sign('RSASSA-PKCS1-v1_5', key, ec.encode(data));
  return signature;
}

async function verify(key, signature, data) {
  const ec = new TextEncoder();
  const verified =
    await subtle.verify(
      'RSASSA-PKCS1-v1_5',
      key,
      signature,
      ec.encode(data));
  return verified;
}
```

----------------------------------------

TITLE: Unsupported Directory Import Example (mjs)
DESCRIPTION: Demonstrates the unsupported syntax for importing a directory URL in ECMAScript modules (ESM). It shows the correct way to import using a specific file or package name.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#_snippet_15

LANGUAGE: mjs
CODE:
```
import './'; // unsupported
import './index.js'; // supported
import 'package-name'; // supported
```

----------------------------------------

TITLE: Exiting a Node.js process with an exit code
DESCRIPTION: This code snippet demonstrates how to terminate a Node.js process with a specific exit code using the process.exit() method.  The exit code is passed as an argument to the exit() function. The shell that executed Node.js will receive this exit code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_71

LANGUAGE: cjs
CODE:
```
const { exit } = require('node:process');

exit(1);
```

----------------------------------------

TITLE: Publishing an npm Package
DESCRIPTION: Shows the command to publish an npm package to the registry. This should be run in the root directory of the package after ensuring all tests pass and the package is ready for distribution.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/developers.md#2025-04-23_snippet_5

LANGUAGE: bash
CODE:
```
npm publish
```

----------------------------------------

TITLE: Creating Subtest with Node.js Test Runner (JavaScript)
DESCRIPTION: Demonstrates how to create a subtest within a top-level test using `context.test` in the Node.js test runner. It shows how to provide a name, configuration options (like `only`, `skip`, `concurrency`, `todo`, `plan`), and the test function itself, which receives its own `TestContext` object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_92

LANGUAGE: javascript
CODE:
```
test('top level test', async (t) => {
  t.test(
    'This is a subtest',
    { only: false, skip: false, concurrency: 1, todo: false, plan: 1 },
    (t) => {
      t.assert.ok('some relevant assertion here');
    },
  );
});
```

----------------------------------------

TITLE: Consuming Readable Stream with Custom Async Iterator
DESCRIPTION: This code demonstrates how to consume a Readable stream using the `readable.iterator()` method with the `destroyOnReturn` option set to `false`. It shows how to prevent the stream from being destroyed when the loop is exited early and how to consume the remaining data in subsequent iterations. It also shows the default behavior of `Symbol.asyncIterator`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_45

LANGUAGE: javascript
CODE:
```
const { Readable } = require('node:stream');

async function printIterator(readable) {
  for await (const chunk of readable.iterator({ destroyOnReturn: false })) {
    console.log(chunk); // 1
    break;
  }

  console.log(readable.destroyed); // false

  for await (const chunk of readable.iterator({ destroyOnReturn: false })) {
    console.log(chunk); // Will print 2 and then 3
  }

  console.log(readable.destroyed); // True, stream was totally consumed
}

async function printSymbolAsyncIterator(readable) {
  for await (const chunk of readable) {
    console.log(chunk); // 1
    break;
  }

  console.log(readable.destroyed); // true
}

async function showBoth() {
  await printIterator(Readable.from([1, 2, 3]));
  await printSymbolAsyncIterator(Readable.from([1, 2, 3]));
}

showBoth();
```

----------------------------------------

TITLE: Chaining piped streams
DESCRIPTION: This example illustrates how to chain multiple streams together using readable.pipe(). It pipes data from a readable stream, through a gzip stream, and finally to a file.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_34

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs');
const zlib = require('node:zlib');
const r = fs.createReadStream('file.txt');
const z = zlib.createGzip();
const w = fs.createWriteStream('file.txt.gz');
r.pipe(z).pipe(w);
```

----------------------------------------

TITLE: Using One-Time Agent for Single HTTP Request
DESCRIPTION: Setting the 'agent' option to 'false' for 'http.get()' or 'http.request()' creates a new, temporary Agent instance with default options specifically for that single request, bypassing the standard agent's pooling mechanism.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
http.get({
  hostname: 'localhost',
  port: 80,
  path: '/',
  agent: false,  // Create a new agent just for this one request
}, (res) => {
  // Do stuff with response
});
```

----------------------------------------

TITLE: Throwing TypeError in Node.js
DESCRIPTION: This code snippet demonstrates how Node.js generates and throws a TypeError instance immediately as a form of argument validation. It shows an example of passing a function to the parse method of the url module, which expects a string, resulting in a TypeError.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/errors.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
require('node:url').parse(() => { });
// Throws TypeError, since it expected a string.
```

----------------------------------------

TITLE: Adding and Removing Event Listeners with Capture Option in JavaScript
DESCRIPTION: This code demonstrates how to add and remove event listeners using the `addEventListener` and `removeEventListener` methods of the `EventTarget` class, including the use of the `capture` option to differentiate between event listeners registered with and without capture.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_77

LANGUAGE: javascript
CODE:
```
function handler(event) {}

const target = new EventTarget();
target.addEventListener('foo', handler, { capture: true });  // first
target.addEventListener('foo', handler, { capture: false }); // second

// Removes the second instance of handler
target.removeEventListener('foo', handler);

// Removes the first instance of handler
target.removeEventListener('foo', handler, { capture: true });
```

----------------------------------------

TITLE: Using child_process.execFile with ES Modules
DESCRIPTION: ES Modules implementation of execFile to spawn a Node.js process and get its version, using the same callback pattern with error, stdout, and stderr parameters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_13

LANGUAGE: JavaScript
CODE:
```
import { execFile } from 'node:child_process';
const child = execFile('node', ['--version'], (error, stdout, stderr) => {
  if (error) {
    throw error;
  }
  console.log(stdout);
});
```

----------------------------------------

TITLE: Generating RSA Key Pair using Web Crypto API in JavaScript
DESCRIPTION: This function generates an RSA key pair using the Web Crypto API. It creates both public and private keys that can be used for signing and verifying operations using the RSASSA-PKCS1-v1_5 algorithm.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;
const publicExponent = new Uint8Array([1, 0, 1]);

async function generateRsaKey(modulusLength = 2048, hash = 'SHA-256') {
  const {
    publicKey,
    privateKey,
  } = await subtle.generateKey({
    name: 'RSASSA-PKCS1-v1_5',
    modulusLength,
    publicExponent,
    hash,
  }, true, ['sign', 'verify']);

  return { publicKey, privateKey };
}
```

----------------------------------------

TITLE: Handling Worker Listening Event in Node.js Cluster
DESCRIPTION: Shows how the primary process can detect when a worker has successfully started listening on a port. When a worker's server emits 'listening' after `listen()` is called, the `cluster` object in the primary emits a 'listening' event with the worker object and address details.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_13

LANGUAGE: js
CODE:
```
cluster.on('listening', (worker, address) => {
  console.log(
    `A worker is now connected to ${address.address}:${address.port}`);
});
```

----------------------------------------

TITLE: Identifying Primary and Worker Processes in Node.js Cluster (CommonJS)
DESCRIPTION: CommonJS version showing how to determine if the current process is a primary or worker process. It also demonstrates creating worker processes and accessing the worker ID in worker processes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_18

LANGUAGE: javascript
CODE:
```
const cluster = require('node:cluster');

if (cluster.isPrimary) {
  console.log('I am primary');
  cluster.fork();
  cluster.fork();
} else if (cluster.isWorker) {
  console.log(`I am worker #${cluster.worker.id}`);
}
```

----------------------------------------

TITLE: Writing a 16-bit Little-Endian Integer to a Buffer in Node.js
DESCRIPTION: This code snippet demonstrates how to write a 16-bit signed integer to a Buffer object in little-endian format using the writeInt16LE method. It initializes a Buffer of size 2 and writes the integer 0x0304 to it at offset 0. The output shows the little-endian representation of the integer in the buffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_143

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.allocUnsafe(2);

buf.writeInt16LE(0x0304, 0);

console.log(buf);
// Prints: <Buffer 04 03>
```

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.allocUnsafe(2);

buf.writeInt16LE(0x0304, 0);

console.log(buf);
// Prints: <Buffer 04 03>
```

----------------------------------------

TITLE: Reading a file using readableWebStream (MJS)
DESCRIPTION: Demonstrates how to open a file using `node:fs/promises.open`, get a `ReadableStream` from the `FileHandle` using `readableWebStream()`, iterate over the stream chunks, and finally close the file handle. Note that the stream does not automatically close the file handle.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_13

LANGUAGE: mjs
CODE:
```
import {
  open,
} from 'node:fs/promises';

const file = await open('./some/file/to/read');

for await (const chunk of file.readableWebStream())
  console.log(chunk);

await file.close();
```

----------------------------------------

TITLE: Synchronizing a Branch with Upstream and Force Pushing - Bash
DESCRIPTION: This snippet details the process for fetching the latest changes from the original upstream repository, rebasing the contributor's branch on top of it, and force-pushing the result to the remote fork. The commands are: 'git fetch upstream HEAD' to retrieve the latest upstream changes, 'git rebase FETCH_HEAD' to replay local commits on top, and 'git push --force-with-lease origin my-branch' to update the remote branch. This is used when rebasing is necessary due to conflicts or when keeping the branch up-to-date. Caution is advised with force-pushing, as it rewrites history and may affect collaborators' ability to review changes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/pull-requests.md#2025-04-23_snippet_10

LANGUAGE: bash
CODE:
```
git fetch upstream HEAD
git rebase FETCH_HEAD
git push --force-with-lease origin my-branch
```

----------------------------------------

TITLE: Emitting a warning using a string (ESM)
DESCRIPTION: This example demonstrates how to emit a simple warning using a string with the `process.emitWarning()` method in an ECMAScript module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_44

LANGUAGE: mjs
CODE:
```
import { emitWarning } from 'node:process';

// Emit a warning using a string.
emitWarning('Something happened!');
// Emits: (node: 56338) Warning: Something happened!
```

----------------------------------------

TITLE: Using AbortController with execFile in ES Modules
DESCRIPTION: ES Modules implementation showing how to use AbortController to abort an execFile operation. This allows canceling the child process execution.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_17

LANGUAGE: JavaScript
CODE:
```
import { execFile } from 'node:child_process';
const controller = new AbortController();
const { signal } = controller;
const child = execFile('node', ['--version'], { signal }, (error) => {
  console.error(error); // an AbortError
});
controller.abort();
```

----------------------------------------

TITLE: Converting Web Streams to Node Streams in JavaScript
DESCRIPTION: This snippet demonstrates how to convert a web stream obtained from a fetch response to a Node.js readable stream using the Readable.fromWeb() method.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_6

LANGUAGE: javascript
CODE:
```
import { fetch } from 'undici'
import { Readable } from 'node:stream'

const response = await fetch('https://example.com')
const readableWebStream = response.body
const readableNodeStream = Readable.fromWeb(readableWebStream)
```

----------------------------------------

TITLE: Generating Client Certificate File (PKCS12) using OpenSSL
DESCRIPTION: Provides the `openssl pkcs12` command to export the previously generated server certificate (`server-cert.pem`) and private key (`server-key.pem`) into a single PKCS12 file (`client-cert.pem`). This file format is often used for distributing client certificates and keys. In the context of the server example, this generated file might be specified in the `ca` option if the server needs to trust this specific certificate when `requestCert` is enabled.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_29

LANGUAGE: bash
CODE:
```
openssl pkcs12 -certpbe AES-256-CBC -export -out client-cert.pem \
  -inkey server-key.pem -in server-cert.pem
```

----------------------------------------

TITLE: Transform Stream with Object Mode Writable Side
DESCRIPTION: Creates a Transform stream that accepts JavaScript numbers on the Writable side and converts them to hexadecimal strings on the Readable side. It demonstrates setting `writableObjectMode` and using the `transform` method to process chunks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_99

LANGUAGE: javascript
CODE:
```
const { Transform } = require('node:stream');

// All Transform streams are also Duplex Streams.
const myTransform = new Transform({
  writableObjectMode: true,

  transform(chunk, encoding, callback) {
    // Coerce the chunk to a number if necessary.
    chunk |= 0;

    // Transform the chunk into something else.
    const data = chunk.toString(16);

    // Push the data onto the readable queue.
    callback(null, '0'.repeat(data.length % 2) + data);
  },
});

myTransform.setEncoding('ascii');
myTransform.on('data', (chunk) => console.log(chunk));

myTransform.write(1);
// Prints: 01
myTransform.write(10);
// Prints: 0a
myTransform.write(100);
// Prints: 64
```

----------------------------------------

TITLE: Reading Unsigned Little-Endian 64-bit Integer from Buffer (CJS)
DESCRIPTION: This code snippet demonstrates how to read an unsigned, little-endian 64-bit integer from a Buffer using the `readBigUInt64LE` method in a CommonJS context. It requires the Buffer class from the 'node:buffer' module, creates a Buffer from a byte array, and then reads the integer at offset 0. The result is printed to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_93

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);

console.log(buf.readBigUInt64LE(0));
// Prints: 18446744069414584320n
```

----------------------------------------

TITLE: Implementing Basic Commands in Commander.js
DESCRIPTION: Demonstrates three ways to implement commands: using an action handler, using a standalone executable file, and adding a pre-configured command. Shows basic command configuration with source and destination parameters.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_15

LANGUAGE: javascript
CODE:
```
program
  .command('clone <source> [destination]')
  .description('clone a repository into a newly created directory')
  .action((source, destination) => {
    console.log('clone command called');
  });

program
  .command('start <service>', 'start named service')
  .command('stop [service]', 'stop named service, or all if no name supplied');

program
  .addCommand(build.makeBuildCommand());
```

----------------------------------------

TITLE: Creating and Using PerformanceObserver in CommonJS
DESCRIPTION: Shows how to create a PerformanceObserver, observe mark entries, and handle performance data in CommonJS modules. The observer logs entries, clears marks and measures, and disconnects itself after processing.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_9

LANGUAGE: javascript
CODE:
```
const {
  performance,
  PerformanceObserver,
} = require('node:perf_hooks');

const obs = new PerformanceObserver((list, observer) => {
  console.log(list.getEntries());

  performance.clearMarks();
  performance.clearMeasures();
  observer.disconnect();
});
obs.observe({ entryTypes: ['mark'], buffered: true });

performance.mark('test');
```

----------------------------------------

TITLE: Running Commands in Workspaces with npm exec in Bash
DESCRIPTION: Shows how to execute a command in the context of project workspaces using the --ws flag to run across all workspaces.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-exec.md#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
npm exec --ws -- eslint ./*.js
```

----------------------------------------

TITLE: Using Buffer.indexOf with various inputs (cjs)
DESCRIPTION: Demonstrates the usage of `Buffer.indexOf` with different types of input values, including strings, Buffers, and numbers, to search within a Buffer. It also shows how to use byteOffset and encoding parameters. This example uses CommonJS modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_79

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from('this is a buffer');

console.log(buf.indexOf('this'));
// Prints: 0
console.log(buf.indexOf('is'));
// Prints: 2
console.log(buf.indexOf(Buffer.from('a buffer')));
// Prints: 8
console.log(buf.indexOf(97));
// Prints: 8 (97 is the decimal ASCII value for 'a')
console.log(buf.indexOf(Buffer.from('a buffer example')));
// Prints: -1
console.log(buf.indexOf(Buffer.from('a buffer example').slice(0, 8)));
// Prints: 8

const utf16Buffer = Buffer.from('\u039a\u0391\u03a3\u03a3\u0395', 'utf16le');

console.log(utf16Buffer.indexOf('\u03a3', 0, 'utf16le'));
// Prints: 4
console.log(utf16Buffer.indexOf('\u03a3', -4, 'utf16le'));
// Prints: 6
```

----------------------------------------

TITLE: Setting HTTP Response Headers with writeHead in Node.js
DESCRIPTION: Provides an example of using res.writeHead() to set the HTTP status code and headers for a server response, replacing the deprecated and undocumented res.writeHeader().
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/deprecations.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const http = require('http');

const server = http.createServer((req, res) => {
  // Use writeHead instead of writeHeader
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Hello, World!');
});

server.listen(3000);
```

----------------------------------------

TITLE: Cancelling setImmediate Promise with AbortController (Node.js Timers - MJS/CJS)
DESCRIPTION: Demonstrates how to cancel a `setImmediate` promise using an `AbortController`. When the signal is aborted, the promise is rejected with an `AbortError`, preventing the scheduled callback/resolution from occurring.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/timers.md#_snippet_0

LANGUAGE: mjs
CODE:
```
import { setImmediate as setImmediatePromise } from 'node:timers/promises';

const ac = new AbortController();
const signal = ac.signal;

// We do not `await` the promise so `ac.abort()` is called concurrently.
setImmediatePromise('foobar', { signal })
  .then(console.log)
  .catch((err) => {
    if (err.name === 'AbortError')
      console.error('The immediate was aborted');
  });

ac.abort();
```

LANGUAGE: cjs
CODE:
```
const { setImmediate: setImmediatePromise } = require('node:timers/promises');

const ac = new AbortController();
const signal = ac.signal;

setImmediatePromise('foobar', { signal })
  .then(console.log)
  .catch((err) => {
    if (err.name === 'AbortError')
      console.error('The immediate was aborted');
  });

ac.abort();
```

----------------------------------------

TITLE: Removing a Listener from an Event - JavaScript
DESCRIPTION: This example demonstrates how to remove a specific listener function from an event using `removeListener()`. The `callback` function is first added as a listener for the 'connection' event on the `server` object, and then it is removed using `removeListener()`. This ensures that the callback is no longer executed when the 'connection' event is emitted.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_41

LANGUAGE: javascript
CODE:
```
const callback = (stream) => {
  console.log('someone connected!');
};
server.on('connection', callback);
// ...
server.removeListener('connection', callback);
```

----------------------------------------

TITLE: Enabling Node.js deprecation warnings with NODE_OPTIONS (Console)
DESCRIPTION: This snippet demonstrates setting Node.js environment variables to enable detailed traces for warnings, notably deprecation warnings regarding Buffer constructor usage. By setting NODE_OPTIONS with the appropriate flags, developers can get visible stack traces for deprecated API usage during development or CI runs. No dependencies except Node.js ≥ 8.0.0; applicable in bash or similar shells.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/node_modules/safer-buffer/Porting-Buffer.md#2025-04-23_snippet_1

LANGUAGE: Console
CODE:
```
export NODE_OPTIONS='--trace-warnings --pending-deprecation'
cat example.js
'use strict';
const foo = new Buffer('foo');
node example.js
(node:7147) [DEP0005] DeprecationWarning: The Buffer() and new Buffer() constructors are not recommended for use due to security and usability concerns. Please use the new Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() construction methods instead.
    at showFlaggedDeprecation (buffer.js:127:13)
    at new Buffer (buffer.js:148:3)
    at Object.<anonymous> (/path/to/example.js:2:13)
    [... more stack trace lines ...]
```

----------------------------------------

TITLE: Loading Environment Variables from .env File
DESCRIPTION: Illustrates how to load environment variables from a `.env` file using `process.loadEnvFile()`. The function automatically loads the .env file in the current directory if no path is specified, or loads a specific .env file when a path is provided.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V21.md#_snippet_7

LANGUAGE: text
CODE:
```
process.loadEnvFile()
process.loadEnvFile('./development.env')
```

----------------------------------------

TITLE: Aborting fsPromises.writeFile with AbortSignal - JavaScript
DESCRIPTION: Demonstrates how to use an `AbortSignal` with `fsPromises.writeFile` to cancel an ongoing write operation. Note that cancellation is best effort and some data may still be written.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_34

LANGUAGE: mjs
CODE:
```
import { writeFile } from 'node:fs/promises';
import { Buffer } from 'node:buffer';

try {
  const controller = new AbortController();
  const { signal } = controller;
  const data = new Uint8Array(Buffer.from('Hello Node.js'));
  const promise = writeFile('message.txt', data, { signal });

  // Abort the request before the promise settles.
  controller.abort();

  await promise;
} catch (err) {
  // When a request is aborted - err is an AbortError
  console.error(err);
}
```

----------------------------------------

TITLE: Mocking a Function with node:test mock.fn
DESCRIPTION: Demonstrates how to use `mock.fn` from the `node:test` module to create a spy on a function. The spy allows asserting call count, arguments, result, and error.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_20

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';
import { mock, test } from 'node:test';

test('spies on a function', () => {
  const sum = mock.fn((a, b) => {
    return a + b;
  });

  assert.strictEqual(sum.mock.callCount(), 0);
  assert.strictEqual(sum(3, 4), 7);
  assert.strictEqual(sum.mock.callCount(), 1);

  const call = sum.mock.calls[0];
  assert.deepStrictEqual(call.arguments, [3, 4]);
  assert.strictEqual(call.result, 7);
  assert.strictEqual(call.error, undefined);

  // Reset the globally tracked mocks.
  mock.reset();
});
```

LANGUAGE: cjs
CODE:
```
'use strict';
const assert = require('node:assert');
const { mock, test } = require('node:test');

test('spies on a function', () => {
  const sum = mock.fn((a, b) => {
    return a + b;
  });

  assert.strictEqual(sum.mock.callCount(), 0);
  assert.strictEqual(sum(3, 4), 7);
  assert.strictEqual(sum.mock.callCount(), 1);

  const call = sum.mock.calls[0];
  assert.deepStrictEqual(call.arguments, [3, 4]);
  assert.strictEqual(call.result, 7);
  assert.strictEqual(call.error, undefined);

  // Reset the globally tracked mocks.
  mock.reset();
});
```

----------------------------------------

TITLE: Using addAbortListener with AbortSignal (ESM)
DESCRIPTION: Demonstrates how to use `addAbortListener` to listen for the `abort` event on an `AbortSignal` in a safe way, preventing issues with `stopImmediatePropagation`. It includes a try-finally block to ensure the listener is disposed of properly.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_72

LANGUAGE: mjs
CODE:
```
import { addAbortListener } from 'node:events';

function example(signal) {
  let disposable;
  try {
    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());
    disposable = addAbortListener(signal, (e) => {
      // Do something when signal is aborted.
    });
  } finally {
    disposable?.[Symbol.dispose]();
  }
}
```

----------------------------------------

TITLE: Formatting a POSIX Path using path.format (dir/base priority)
DESCRIPTION: Demonstrates `path.format()` constructing a POSIX path. When `dir` and `base` are provided, they take priority, and `root` is ignored. The result is `${dir}${path.sep}${base}`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_21

LANGUAGE: js
CODE:
```
// If `dir`, `root` and `base` are provided,
// `${dir}${path.sep}${base}`
// will be returned. `root` is ignored.
path.format({
  root: '/ignored',
  dir: '/home/user/dir',
  base: 'file.txt',
});
// Returns: '/home/user/dir/file.txt'
```

----------------------------------------

TITLE: Asynchronous Iteration with readline
DESCRIPTION: Demonstrates how to asynchronously iterate through lines from a readline interface using a `for await...of` loop.  The readline interface is created with `readline.createInterface()`.  The loop processes each line of input. Errors in the input stream are not forwarded.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#_snippet_12

LANGUAGE: javascript
CODE:
```
async function processLineByLine() {
  const rl = readline.createInterface({
    // ...
  });

  for await (const line of rl) {
    // Each line in the readline input will be successively available here as
    // `line`.
  }
}
```

----------------------------------------

TITLE: Pausing and Resuming a Readable Stream
DESCRIPTION: This code shows how to pause and resume a readable stream using the `readable.pause()` and `readable.resume()` methods. It attaches a 'data' event listener, pauses the stream after receiving some data, and then resumes it after a delay.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_32

LANGUAGE: javascript
CODE:
```
const readable = getReadableStreamSomehow();
readable.on('data', (chunk) => {
  console.log(`Received ${chunk.length} bytes of data.`);
  readable.pause();
  console.log('There will be no additional data for 1 second.');
  setTimeout(() => {
    console.log('Now data will start flowing again.');
    readable.resume();
  }, 1000);
});
```

----------------------------------------

TITLE: Cancelling setTimeout Promise with AbortController (Node.js Timers - MJS/CJS)
DESCRIPTION: Illustrates how to cancel a `setTimeout` promise using an `AbortController`. When the signal is aborted, the promise is rejected with an `AbortError`, stopping the timer before the delay completes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/timers.md#_snippet_1

LANGUAGE: mjs
CODE:
```
import { setTimeout as setTimeoutPromise } from 'node:timers/promises';

const ac = new AbortController();
const signal = ac.signal;

// We do not `await` the promise so `ac.abort()` is called concurrently.
setTimeoutPromise(1000, 'foobar', { signal })
  .then(console.log)
  .catch((err) => {
    if (err.name === 'AbortError')
      console.error('The timeout was aborted');
  });

ac.abort();
```

LANGUAGE: cjs
CODE:
```
const { setTimeout: setTimeoutPromise } = require('node:timers/promises');

const ac = new AbortController();
const signal = ac.signal;

setTimeoutPromise(1000, 'foobar', { signal })
  .then(console.log)
  .catch((err) => {
    if (err.name === 'AbortError')
      console.error('The timeout was aborted');
  });

ac.abort();
```

----------------------------------------

TITLE: Running Local Package Commands with npm exec in Bash
DESCRIPTION: Demonstrates how to use npm exec to run the tap package from local dependencies with arguments. Shows both npm exec and npx syntaxes.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-exec.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ npm exec -- tap --bail test/foo.js
$ npx tap --bail test/foo.js
```

----------------------------------------

TITLE: Calculating Byte Length of a String in CommonJS
DESCRIPTION: Demonstrates how to calculate the byte length of a string using Buffer.byteLength() in CommonJS. This method is used to determine the number of bytes required to store a string in a specific encoding (UTF-8 in this example). The example shows the difference between character length and byte length for a string containing Unicode characters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_30

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const str = '\u00bd + \u00bc = \u00be';

console.log(`${str}: ${str.length} characters, ` +
            `${Buffer.byteLength(str, 'utf8')} bytes`);
// Prints: ½ + ¼ = ¾: 9 characters, 12 bytes
```

----------------------------------------

TITLE: Creating a Buffer from an ArrayBuffer (Buffer.from(arrayBuffer)) - MJS
DESCRIPTION: This code snippet demonstrates how to create a Buffer that shares memory with a Uint16Array using the Buffer.from(arrayBuffer) method in a modern JavaScript module. Changes to the original TypedArray will be reflected in the Buffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_38

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const arr = new Uint16Array(2);

arr[0] = 5000;
arr[1] = 4000;

// Shares memory with `arr`.
const buf = Buffer.from(arr.buffer);

console.log(buf);
// Prints: <Buffer 88 13 a0 0f>

// Changing the original Uint16Array changes the Buffer also.
arr[1] = 6000;

console.log(buf);
// Prints: <Buffer 88 13 70 17>
```

----------------------------------------

TITLE: Asserting Promise Rejection with Object - ES Module
DESCRIPTION: This snippet demonstrates how to use `assert.rejects` to verify that an asynchronous function rejects with a specific error object in ES module format. It checks if the rejected error has the expected `name` and `message` properties.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#_snippet_61

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert/strict';

await assert.rejects(
  async () => {
    throw new TypeError('Wrong value');
  },
  {
    name: 'TypeError',
    message: 'Wrong value',
  },
);
```

----------------------------------------

TITLE: Using setInterval Promise Async Iterator (Node.js Timers - MJS/CJS)
DESCRIPTION: Illustrates how `timersPromises.setInterval` returns an async iterator. The loop iterates every `delay` milliseconds, yielding the specified `value`. The loop continues until explicitly broken or the iterator is cancelled (e.g., via AbortSignal).
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/timers.md#_snippet_5

LANGUAGE: mjs
CODE:
```
import {
  setInterval,
} from 'node:timers/promises';

const interval = 100;
for await (const startTime of setInterval(interval, Date.now())) {
  const now = Date.now();
  console.log(now);
  if ((now - startTime) > 1000)
    break;
}
console.log(Date.now());
```

LANGUAGE: cjs
CODE:
```
const {
  setInterval,
} = require('node:timers/promises');
const interval = 100;

(async function() {
  for await (const startTime of setInterval(interval, Date.now())) {
    const now = Date.now();
    console.log(now);
    if ((now - startTime) > 1000)
      break;
  }
  console.log(Date.now());
})();
```

----------------------------------------

TITLE: Using after hook in Node.js tests
DESCRIPTION: Illustrates the usage of the `after` hook in a Node.js test suite. The provided function runs once after all tests in the `describe` block have completed, regardless of test outcomes, often used for suite-level cleanup.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_56

LANGUAGE: javascript
CODE:
```
describe('tests', async () => {
  after(() => console.log('finished running tests'));
  it('is a subtest', () => {
    assert.ok('some relevant assertion here');
  });
});
```

----------------------------------------

TITLE: Initializing and Using Custom DNS Resolver in CommonJS
DESCRIPTION: Shows how to create an independent resolver for DNS requests with custom DNS servers in CommonJS format. The example demonstrates both promise chain and async-await patterns for resolving IPv4 addresses.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_15

LANGUAGE: cjs
CODE:
```
const { Resolver } = require('node:dns').promises;
const resolver = new Resolver();
resolver.setServers(['4.4.4.4']);

// This request will use the server at 4.4.4.4, independent of global settings.
resolver.resolve4('example.org').then((addresses) => {
  // ...
});

// Alternatively, the same code can be written using async-await style.
(async function() {
  const addresses = await resolver.resolve4('example.org');
})();
```

----------------------------------------

TITLE: Formatting a POSIX Path using path.format (root/base priority)
DESCRIPTION: Illustrates `path.format()` using `root` when `dir` is not specified. If only `root` and `base` are provided, the platform separator is not added between them. `ext` is ignored because `base` exists.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_22

LANGUAGE: js
CODE:
```
// `root` will be used if `dir` is not specified.
// If only `root` is provided or `dir` is equal to `root` then the
// platform separator will not be included. `ext` will be ignored.
path.format({
  root: '/',
  base: 'file.txt',
  ext: 'ignored',
});
// Returns: '/file.txt'
```

----------------------------------------

TITLE: Composing Readable Stream with Async Generator
DESCRIPTION: This code demonstrates how to use `readable.compose` with an async generator function to transform a Readable stream. It splits the stream into words and collects them into an array.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_44

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';

async function* splitToWords(source) {
  for await (const chunk of source) {
    const words = String(chunk).split(' ');

    for (const word of words) {
      yield word;
    }
  }
}

const wordsStream = Readable.from(['this is', 'compose as operator']).compose(splitToWords);
const words = await wordsStream.toArray();

console.log(words); // prints ['this', 'is', 'compose', 'as', 'operator']
```

----------------------------------------

TITLE: Error Handling in Child Process Spawn
DESCRIPTION: Example showing how to handle errors when spawning a process fails
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_23

LANGUAGE: javascript
CODE:
```
const { spawn } = require('node:child_process');
const subprocess = spawn('bad_command');

subprocess.on('error', (err) => {
  console.error('Failed to start subprocess.');
});
```

LANGUAGE: javascript
CODE:
```
import { spawn } from 'node:child_process';
const subprocess = spawn('bad_command');

subprocess.on('error', (err) => {
  console.error('Failed to start subprocess.');
});
```

----------------------------------------

TITLE: Executing Node.js with Diagnostic Report Options
DESCRIPTION: This command demonstrates how to run a Node.js application with various report generation flags enabled. It allows for uncaught exception reporting, signal-based reporting, and fatal error reporting.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/report.md#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
node --report-uncaught-exception --report-on-signal \
--report-on-fatalerror app.js
```

----------------------------------------

TITLE: Initializing Buffers with ES Modules in Node.js
DESCRIPTION: This code snippet demonstrates how to create and initialize Buffer objects using ES modules syntax in Node.js. It showcases various methods such as Buffer.alloc(), Buffer.allocUnsafe(), and Buffer.from() to create Buffers with different initial states and data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_0

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

// Creates a zero-filled Buffer of length 10.
const buf1 = Buffer.alloc(10);

// Creates a Buffer of length 10,
// filled with bytes which all have the value `1`.
const buf2 = Buffer.alloc(10, 1);

// Creates an uninitialized buffer of length 10.
// This is faster than calling Buffer.alloc() but the returned
// Buffer instance might contain old data that needs to be
// overwritten using fill(), write(), or other functions that fill the Buffer's
// contents.
const buf3 = Buffer.allocUnsafe(10);

// Creates a Buffer containing the bytes [1, 2, 3].
const buf4 = Buffer.from([1, 2, 3]);

// Creates a Buffer containing the bytes [1, 1, 1, 1] – the entries
// are all truncated using `(value & 255)` to fit into the range 0–255.
const buf5 = Buffer.from([257, 257.5, -255, '1']);

// Creates a Buffer containing the UTF-8-encoded bytes for the string 'tést':
// [0x74, 0xc3, 0xa9, 0x73, 0x74] (in hexadecimal notation)
// [116, 195, 169, 115, 116] (in decimal notation)
const buf6 = Buffer.from('tést');

// Creates a Buffer containing the Latin-1 bytes [0x74, 0xe9, 0x73, 0x74].
const buf7 = Buffer.from('tést', 'latin1');
```

----------------------------------------

TITLE: Enable setInterval Mocking (mjs/cjs)
DESCRIPTION: This example demonstrates how to enable mocking specifically for the `setInterval` timer using `mock.timers.enable()`. It also implicitly mocks the corresponding `clearInterval` function. This configuration only affects `setInterval` and `clearInterval` from `node:timers`, `node:timers/promises`, and `globalThis`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_64

LANGUAGE: mjs
CODE:
```
import { mock } from 'node:test';
mock.timers.enable({ apis: ['setInterval'] });
```

LANGUAGE: cjs
CODE:
```
const { mock } = require('node:test');
mock.timers.enable({ apis: ['setInterval'] });
```

----------------------------------------

TITLE: Advanced Overrides with Object Notation
DESCRIPTION: Demonstrates the full object form of overrides, allowing overriding both a package itself and its children. This provides fine-grained control over the dependency tree.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_28

LANGUAGE: json
CODE:
```
{
  "overrides": {
    "@npm/foo": {
      ".": "1.0.0",
      "@npm/bar": "1.0.0"
    }
  }
}
```

----------------------------------------

TITLE: Overriding Exit Handling in Commander.js
DESCRIPTION: Shows how to override the default exit behavior of Commander.js and implement custom error handling using try-catch.
SOURCE: https://github.com/nodejs/node/blob/main/test/fixtures/postject-copy/node_modules/commander/Readme.md#2025-04-23_snippet_41

LANGUAGE: javascript
CODE:
```
program.exitOverride();

try {
  program.parse(process.argv);
} catch (err) {
  // custom processing...
}
```

----------------------------------------

TITLE: Duplex Stream Creation from Promise Iterable
DESCRIPTION: This code demonstrates creating a duplex stream from an iterable containing promises. It highlights a potential issue where rejections within the promises might lead to unhandled rejections.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_68

LANGUAGE: javascript
CODE:
```
const { Duplex } = require('node:stream');

Duplex.from([
  new Promise((resolve) => setTimeout(resolve('1'), 1500)),
  new Promise((_, reject) => setTimeout(reject(new Error('2')), 1000)), // Unhandled rejection
]);
```

----------------------------------------

TITLE: Demonstrating Wrapped Object Misuse (JavaScript)
DESCRIPTION: Illustrates a potential issue when passing wrapped JavaScript objects (representing native handles) to a native addon method in the wrong order. Shows loading a native addon and calling methods on wrapped objects obtained from previous calls, highlighting the need for robust type checking beyond simple argument order.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#_snippet_177

LANGUAGE: JavaScript
CODE:
```
const myAddon = require('./build/Release/my_addon.node');

// `openDatabase()` returns a JavaScript object that wraps a native database
// handle.
const dbHandle = myAddon.openDatabase();

// `query()` returns a JavaScript object that wraps a native query handle.
const queryHandle = myAddon.query(dbHandle, 'Gimme ALL the things!');

// There is an accidental error in the line below. The first parameter to
// `myAddon.queryHasRecords()` should be the database handle (`dbHandle`), not
// the query handle (`query`), so the correct condition for the while-loop
// should be
//
// myAddon.queryHasRecords(dbHandle, queryHandle)
//
while (myAddon.queryHasRecords(queryHandle, dbHandle)) {
  // retrieve records
}
```

----------------------------------------

TITLE: Setting URLSearchParams Value
DESCRIPTION: Sets the value associated with a given name in a URLSearchParams object. If the name exists, the first occurrence is updated and others are removed. If not, the name-value pair is appended.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_42

LANGUAGE: javascript
CODE:
```
const params = new URLSearchParams();
params.append('foo', 'bar');
params.append('foo', 'baz');
params.append('abc', 'def');
console.log(params.toString());
// Prints foo=bar&foo=baz&abc=def

params.set('foo', 'def');
params.set('xyz', 'opq');
console.log(params.toString());
// Prints foo=def&abc=def&xyz=opq
```

----------------------------------------

TITLE: Broadcasting Messages to All Workers in Node.js Cluster (CommonJS)
DESCRIPTION: CommonJS version showing how to send a message to all worker processes from the primary process using the cluster.workers object, which contains references to all active workers.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_20

LANGUAGE: javascript
CODE:
```
const cluster = require('node:cluster');

for (const worker of Object.values(cluster.workers)) {
  worker.send('big announcement to all workers');
}
```

----------------------------------------

TITLE: Create Basic HTTP/2 Server (CJS)
DESCRIPTION: Illustrates creating an unencrypted HTTP/2 server using `http2.createServer` in CommonJS syntax. It demonstrates handling incoming streams via the `'stream'` event, sending a 200 OK response with simple HTML content, and initiating the server to listen on port 8000.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_42

LANGUAGE: javascript
CODE:
```
const http2 = require('node:http2');

// Create an unencrypted HTTP/2 server.
// Since there are no browsers known that support
// unencrypted HTTP/2, the use of `http2.createSecureServer()`
// is necessary when communicating with browser clients.
const server = http2.createServer();

server.on('stream', (stream, headers) => {
  stream.respond({
    'content-type': 'text/html; charset=utf-8',
    ':status': 200,
  });
  stream.end('<h1>Hello World</h1>');
});

server.listen(8000);
```

----------------------------------------

TITLE: EventTarget with multiple handlers example
DESCRIPTION: Illustrates how to add multiple event listeners to an EventTarget, including function handlers and objects with a handleEvent method. Demonstrates the order in which handlers are invoked and how they can mutate the event object.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_76

LANGUAGE: javascript
CODE:
```
function handler1(event) {
  console.log(event.type);  // Prints 'foo'
  event.a = 1;
}

async function handler2(event) {
  console.log(event.type);  // Prints 'foo'
  console.log(event.a);  // Prints 1
}

const handler3 = {
  handleEvent(event) {
    console.log(event.type);  // Prints 'foo'
  },
};

const handler4 = {
  async handleEvent(event) {
    console.log(event.type);  // Prints 'foo'
  },
};

const target = new EventTarget();

target.addEventListener('foo', handler1);
target.addEventListener('foo', handler2);
target.addEventListener('foo', handler3);
target.addEventListener('foo', handler4, { once: true });
```

----------------------------------------

TITLE: Buffer to JSON Conversion
DESCRIPTION: Demonstrates how to convert a Buffer to its JSON representation using `buf.toJSON()` and how to reconstruct the Buffer from the JSON string. It shows the structure of the JSON output and how to use `JSON.parse()` with a reviver function to create a Buffer instance from the JSON data. Requires the 'node:buffer' module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_128

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);
const json = JSON.stringify(buf);

console.log(json);
// Prints: {"type":"Buffer","data":[1,2,3,4,5]}

const copy = JSON.parse(json, (key, value) => {
  return value && value.type === 'Buffer' ?
    Buffer.from(value) :
    value;
});

console.log(copy);
// Prints: <Buffer 01 02 03 04 05>
```

----------------------------------------

TITLE: Generating a Diagnostic Report via API in JavaScript
DESCRIPTION: This code snippet shows how to programmatically generate a diagnostic report using the Node.js API. It demonstrates writing a report to a file and handling errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/report.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
process.report.writeReport();

process.report.writeReport('./foo.json');

try {
  process.chdir('/non-existent-path');
} catch (err) {
  process.report.writeReport(err);
}
// Any other code

try {
  process.chdir('/non-existent-path');
} catch (err) {
  process.report.writeReport(filename, err);
}
// Any other code
```

----------------------------------------

TITLE: Encrypting Data Using cipher.update() and cipher.final() Methods in Node.js (ES Modules)
DESCRIPTION: This example shows how to encrypt data using the cipher.update() and cipher.final() methods in Node.js. It generates a key and initialization vector, then uses these to create a cipher and encrypt the data.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_10

LANGUAGE: JavaScript
CODE:
```
const {
  scrypt,
  randomFill,
  createCipheriv,
} = await import('node:crypto');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';

// First, we'll generate the key. The key length is dependent on the algorithm.
// In this case for aes192, it is 24 bytes (192 bits).
scrypt(password, 'salt', 24, (err, key) => {
  if (err) throw err;
  // Then, we'll generate a random initialization vector
  randomFill(new Uint8Array(16), (err, iv) => {
    if (err) throw err;

    const cipher = createCipheriv(algorithm, key, iv);

    let encrypted = cipher.update('some clear text data', 'utf8', 'hex');
    encrypted += cipher.final('hex');
    console.log(encrypted);
  });
});
```

----------------------------------------

TITLE: Generating Node.js Bash Completion Script
DESCRIPTION: Provides commands to generate and source a bash completion script for Node.js. This script enhances the command-line experience by providing auto-completion for Node.js commands and options.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_12

LANGUAGE: bash
CODE:
```
node --completion-bash > node_bash_completion
source node_bash_completion
```

----------------------------------------

TITLE: Implementing Conditional Exports in package.json
DESCRIPTION: Shows how to define conditional exports in package.json to provide different entry points based on how the package is being imported (via import or require). This allows for dual CommonJS and ES module support.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/packages.md#2025-04-23_snippet_17

LANGUAGE: json
CODE:
```
// package.json
{
  "exports": {
    "import": "./index-module.js",
    "require": "./index-require.cjs"
  },
  "type": "module"
}
```

----------------------------------------

TITLE: Parsing Request URL with new URL() - Node.js
DESCRIPTION: Demonstrates using the `new URL()` constructor in a Node.js console to parse a request URL string (`/status?name=ryan`) relative to a base URL (`http://example.com`). The output shows how the URL is broken down into its component parts.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http2.md#_snippet_59

LANGUAGE: console
CODE:
```
$ node
> new URL('/status?name=ryan', 'http://example.com')
URL {
  href: 'http://example.com/status?name=ryan',
  origin: 'http://example.com',
  protocol: 'http:',
  username: '',
  password: '',
  host: 'example.com',
  hostname: 'example.com',
  port: '',
  pathname: '/status',
  search: '?name=ryan',
  searchParams: URLSearchParams { 'name' => 'ryan' },
  hash: ''
}
```

----------------------------------------

TITLE: Reading directory contents synchronously with fs.readdirSync in Node.js
DESCRIPTION: Synchronously reads the contents of a directory. Returns an array of filenames or `fs.Dirent` objects depending on the `withFileTypes` option. The `options` argument can specify encoding, whether to include file types, and whether to read recursively.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_108



----------------------------------------

TITLE: Incorrectly exiting a Node.js process
DESCRIPTION: This code snippet illustrates a misuse of process.exit() that can lead to truncated output.  It shows a scenario where process.exit() is called before asynchronous writes to process.stdout are completed, resulting in data loss. Avoid calling process.exit() directly if asynchronous operations are pending.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_73

LANGUAGE: cjs
CODE:
```
const { exit } = require('node:process');

// This is an example of what *not* to do:
if (someConditionNotMet()) {
  printUsageToStdout();
  exit(1);
}
```

----------------------------------------

TITLE: Creating a Node.js Cluster Server (CommonJS)
DESCRIPTION: This snippet shows how to create a cluster of Node.js processes using CommonJS modules. It performs the same functionality as the ES modules version, forking workers and setting up an HTTP server on port 8000.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const cluster = require('node:cluster');
const http = require('node:http');
const numCPUs = require('node:os').availableParallelism();
const process = require('node:process');

if (cluster.isPrimary) {
  console.log(`Primary ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    console.log(`worker ${worker.process.pid} died`);
  });
} else {
  // Workers can share any TCP connection
  // In this case it is an HTTP server
  http.createServer((req, res) => {
    res.writeHead(200);
    res.end('hello world\n');
  }).listen(8000);

  console.log(`Worker ${process.pid} started`);
}
```

----------------------------------------

TITLE: Creating a new Undici Agent instance
DESCRIPTION: Constructor for creating a new Undici Agent instance with optional configuration parameters. The Agent allows dispatching requests to multiple different origins.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Agent.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
new undici.Agent([options])
```

----------------------------------------

TITLE: Example package.json with multiple dependencies in JSON
DESCRIPTION: An example of a package.json file with multiple dependencies, demonstrating how npm handles subdependencies during updates.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-update.md#2025-04-23_snippet_4

LANGUAGE: json
CODE:
```
{
  "name": "my-app",
  "dependencies": {
      "dep1": "^1.0.0",
      "dep2": "1.0.0"
  }
}
```

----------------------------------------

TITLE: Configuring Node.js Diagnostic Reports Programmatically in JavaScript
DESCRIPTION: This JavaScript code demonstrates how to configure Node.js diagnostic report generation at runtime using properties of the `process.report` object. It shows examples of enabling/disabling reports on fatal errors, signals, and uncaught exceptions, changing the signal used for external triggers (e.g., to 'SIGQUIT'), and excluding network interface details using `excludeNetwork`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/report.md#2025-04-23_snippet_6

LANGUAGE: js
CODE:
```
// Trigger report only on uncaught exceptions.
process.report.reportOnFatalError = false;
process.report.reportOnSignal = false;
process.report.reportOnUncaughtException = true;

// Trigger report for both internal errors as well as external signal.
process.report.reportOnFatalError = true;
process.report.reportOnSignal = true;
process.report.reportOnUncaughtException = false;

// Change the default signal to 'SIGQUIT' and enable it.
process.report.reportOnFatalError = false;
process.report.reportOnUncaughtException = false;
process.report.reportOnSignal = true;
process.report.signal = 'SIGQUIT';

// Disable network interfaces reporting
process.report.excludeNetwork = true;
```

----------------------------------------

TITLE: Force major updates to fix vulnerabilities
DESCRIPTION: Command to force npm to install SemVer-major updates to top-level dependencies during audit fix, not just SemVer-compatible ones.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_7

LANGUAGE: bash
CODE:
```
$ npm audit fix --force
```

----------------------------------------

TITLE: Initializing URLSearchParams with an iterable
DESCRIPTION: Demonstrates how to instantiate a new URLSearchParams object with an iterable map, including arrays, Map objects, and generator functions.  Elements of the iterable are key-value pairs. Duplicate keys are allowed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_39

LANGUAGE: javascript
CODE:
```
let params;

// Using an array
params = new URLSearchParams([
  ['user', 'abc'],
  ['query', 'first'],
  ['query', 'second'],
]);
console.log(params.toString());
// Prints 'user=abc&query=first&query=second'

// Using a Map object
const map = new Map();
map.set('user', 'abc');
map.set('query', 'xyz');
params = new URLSearchParams(map);
console.log(params.toString());
// Prints 'user=abc&query=xyz'

// Using a generator function
function* getQueryPairs() {
  yield ['user', 'abc'];
  yield ['query', 'first'];
  yield ['query', 'second'];
}
params = new URLSearchParams(getQueryPairs());
console.log(params.toString());
// Prints 'user=abc&query=first&query=second'

// Each key-value pair must have exactly two elements
new URLSearchParams([
  ['user', 'abc', 'error'],
]);
// Throws TypeError [ERR_INVALID_TUPLE]:
//        Each query pair must be an iterable [name, value] tuple
```

----------------------------------------

TITLE: Modifying process.env (MJS)
DESCRIPTION: Shows how to modify `process.env` using ES modules. The `foo` variable is set and then printed to the console.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_58

LANGUAGE: mjs
CODE:
```
import { env } from 'node:process';

env.foo = 'bar';
console.log(env.foo);
```

----------------------------------------

TITLE: Awaiting multiple events using Promise.all() - CJS
DESCRIPTION: This example demonstrates how to correctly await multiple events emitted in the same process.nextTick() batch using Promise.all() and events.once(). By creating all Promises before awaiting them, it ensures that no events are missed. It uses the EventEmitter and process modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_62

LANGUAGE: cjs
CODE:
```
const { EventEmitter, once } = require('node:events');

const myEE = new EventEmitter();

async function foo() {
  await Promise.all([once(myEE, 'bar'), once(myEE, 'foo')]);
  console.log('foo', 'bar');
}

process.nextTick(() => {
  myEE.emit('bar');
  myEE.emit('foo');
});

foo().then(() => console.log('done'));
```

----------------------------------------

TITLE: context.signal - Node.js Test - JS
DESCRIPTION: Provides an `AbortSignal` that can be used to cancel asynchronous operations within a test when the test itself is aborted. This is useful for integrating test cancellation with async APIs like `fetch`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_89

LANGUAGE: js
CODE:
```
test('top level test', async (t) => {
  await fetch('some/uri', { signal: t.signal });
});
```

----------------------------------------

TITLE: Using addAbortListener with AbortSignal (CommonJS)
DESCRIPTION: Demonstrates how to use `addAbortListener` to listen for the `abort` event on an `AbortSignal` in a safe way, preventing issues with `stopImmediatePropagation`. It includes a try-finally block to ensure the listener is disposed of properly.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_71

LANGUAGE: cjs
CODE:
```
const { addAbortListener } = require('node:events');

function example(signal) {
  let disposable;
  try {
    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());
    disposable = addAbortListener(signal, (e) => {
      // Do something when signal is aborted.
    });
  } finally {
    disposable?.[Symbol.dispose]();
  }
}
```

----------------------------------------

TITLE: Using Web Crypto API with Promises in Node.js
DESCRIPTION: Example of a Promise-based Web Crypto API operation to generate HMAC keys. This demonstrates the modern asynchronous approach used in the Web Crypto API exposed via globalThis.crypto.
SOURCE: https://github.com/nodejs/node/blob/main/src/crypto/README.md#2025-04-23_snippet_3

LANGUAGE: js
CODE:
```
// Example Web Crypto API asynchronous single-call operation
const { subtle } = globalThis.crypto;

subtle.generateKeys({ name: 'HMAC', length: 256 }, true, ['sign'])
  .then((key) => {
    console.log(key);
  })
  .catch((error) => {
    console.error('an error occurred');
  });
```

----------------------------------------

TITLE: Asserting an async function does not reject (ESM)
DESCRIPTION: This example demonstrates how to use `assert.doesNotReject` with an async function in an ES module. It asserts that the provided async function, which throws a TypeError, does not reject with a SyntaxError. Because the error types do not match, the assertion passes.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#_snippet_27

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert/strict';

await assert.doesNotReject(
  async () => {
    throw new TypeError('Wrong value');
  },
  SyntaxError,
);
```

----------------------------------------

TITLE: Flat Mapping Readable Stream with Asynchronous Mapper in Node.js
DESCRIPTION: This code demonstrates how to use the `flatMap` method with an asynchronous mapper function on a Readable stream. It reads the contents of multiple files using `createReadStream` and concatenates them into a single stream. The example uses `Readable.from` to create a stream from an array of file names and iterates over the transformed stream to process the combined content.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_54

LANGUAGE: mjs
CODE:
```
import { Readable } from 'node:stream';
import { createReadStream } from 'node:fs';

// With an asynchronous mapper, combine the contents of 4 files
const concatResult = Readable.from([
  './1.mjs',
  './2.mjs',
  './3.mjs',
  './4.mjs',
]).flatMap((fileName) => createReadStream(fileName));
for await (const result of concatResult) {
  // This will contain the contents (all chunks) of all 4 files
  console.log(result);
}
```

----------------------------------------

TITLE: Piping streams with async generators
DESCRIPTION: This example demonstrates how to use an async generator within a pipeline to process data chunks. The generator transforms the data from the read stream before it is written to the write stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_6

LANGUAGE: mjs
CODE:
```
import { pipeline } from 'node:stream/promises';
import { createReadStream, createWriteStream } from 'node:fs';

await pipeline(
  createReadStream('lowercase.txt'),
  async function* (source, { signal }) {
    source.setEncoding('utf8');  // Work with strings rather than `Buffer`s.
    for await (const chunk of source) {
      yield await processChunk(chunk, { signal });
    }
  },
  createWriteStream('uppercase.txt'),
);
console.log('Pipeline succeeded.');
```

----------------------------------------

TITLE: Committing Changes in Git
DESCRIPTION: Commands to stage changed files and create a new commit in Git.
SOURCE: https://github.com/nodejs/node/blob/main/doc/contributing/pull-requests.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
git add my/changed/files
git commit
```

----------------------------------------

TITLE: Piping streams with async generator as source
DESCRIPTION: This example demonstrates how to use an async generator as the source of a pipeline. It's crucial to handle the signal argument passed into the async generator to ensure the pipeline can be aborted correctly.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_7

LANGUAGE: cjs
CODE:
```
const { pipeline } = require('node:stream/promises');
const fs = require('node:fs');

async function run() {
  await pipeline(
    async function* ({ signal }) {
      await someLongRunningfn({ signal });
      yield 'asd';
    },
    fs.createWriteStream('uppercase.txt'),
  );
  console.log('Pipeline succeeded.');
}

run().catch(console.error);
```

----------------------------------------

TITLE: Appending Data with Encoding - Node.js fs - JavaScript
DESCRIPTION: Demonstrates how to specify the encoding when appending data to a file by passing the options as a string.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_41

LANGUAGE: JavaScript
CODE:
```
import { appendFile } from 'node:fs';

appendFile('message.txt', 'data to append', 'utf8', callback);
```

----------------------------------------

TITLE: Creating and Reading from a ReadableStream in JavaScript (ESM)
DESCRIPTION: This snippet demonstrates how to create a ReadableStream that pushes the current performance.now() timestamp every second, and then reads from it using an async iterator.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import {
  ReadableStream,
} from 'node:stream/web';

import {
  setInterval as every,
} from 'node:timers/promises';

import {
  performance,
} from 'node:perf_hooks';

const SECOND = 1000;

const stream = new ReadableStream({
  async start(controller) {
    for await (const _ of every(SECOND))
      controller.enqueue(performance.now());
  },
});

for await (const value of stream)
  console.log(value);
```

----------------------------------------

TITLE: Enable Test Coverage Node.js
DESCRIPTION: When used with the node:test module, generates a code coverage report as part of the test runner output. A report is only generated if tests are run.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_32

LANGUAGE: Shell
CODE:
```
--experimental-test-coverage
```

----------------------------------------

TITLE: Using finished() with CommonJS
DESCRIPTION: This code snippet demonstrates how to use the finished() API with CommonJS modules to determine when a readable stream is done reading. It imports the finished function and fs module, creates a read stream, and uses an async function to await the stream's completion.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_9

LANGUAGE: cjs
CODE:
```
const { finished } = require('node:stream/promises');
const fs = require('node:fs');

const rs = fs.createReadStream('archive.tar');

async function run() {
  await finished(rs);
  console.log('Stream is done reading.');
}

run().catch(console.error);
rs.resume(); // Drain the stream.
```

----------------------------------------

TITLE: Piping streams with async generator as source
DESCRIPTION: This example demonstrates how to use an async generator as the source of a pipeline. It's crucial to handle the signal argument passed into the async generator to ensure the pipeline can be aborted correctly.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_8

LANGUAGE: mjs
CODE:
```
import { pipeline } from 'node:stream/promises';
import fs from 'node:fs';
await pipeline(
  async function* ({ signal }) {
    await someLongRunningfn({ signal });
    yield 'asd';
  },
  fs.createWriteStream('uppercase.txt'),
);
console.log('Pipeline succeeded.');
```

----------------------------------------

TITLE: Invoking JavaScript Function from Native Code - napi_make_callback (C)
DESCRIPTION: Allows calling a JavaScript function object from a native add-on, primarily used for calling back into JavaScript after returning from an async operation. It's a wrapper around `node::MakeCallback` and is necessary when implementing custom async behavior without `napi_create_async_work`. Parameters include the environment, async context, receiver (`this` value), function to call, arguments, and a result pointer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#_snippet_197

LANGUAGE: c
CODE:
```
NAPI_EXTERN napi_status napi_make_callback(napi_env env,
                                           napi_async_context async_context,
                                           napi_value recv,
                                           napi_value func,
                                           size_t argc,
                                           const napi_value* argv,
                                           napi_value* result);
```

----------------------------------------

TITLE: Encrypting Data Using Cipheriv as a Stream in Node.js (ES Modules)
DESCRIPTION: This snippet demonstrates how to use a Cipheriv object as a stream to encrypt data. It generates a key using scrypt, creates a random initialization vector, and then uses createCipheriv to create a cipher for encryption.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_6

LANGUAGE: JavaScript
CODE:
```
const {
  scrypt,
  randomFill,
  createCipheriv,
} = await import('node:crypto');

const algorithm = 'aes-192-cbc';
const password = 'Password used to generate key';

// First, we'll generate the key. The key length is dependent on the algorithm.
// In this case for aes192, it is 24 bytes (192 bits).
scrypt(password, 'salt', 24, (err, key) => {
  if (err) throw err;
  // Then, we'll generate a random initialization vector
  randomFill(new Uint8Array(16), (err, iv) => {
    if (err) throw err;

    // Once we have the key and iv, we can create and use the cipher...
    const cipher = createCipheriv(algorithm, key, iv);

    let encrypted = '';
    cipher.setEncoding('hex');

    cipher.on('data', (chunk) => encrypted += chunk);
    cipher.on('end', () => console.log(encrypted));

    cipher.write('some clear text data');
    cipher.end();
  });
});
```

----------------------------------------

TITLE: Transferring ArrayBuffers with MessagePort (ESM)
DESCRIPTION: This example demonstrates how to transfer `ArrayBuffer` instances using `port.postMessage()` and the `transferList`. When an `ArrayBuffer` is included in the `transferList`, it is moved to the receiving side, rendering it unusable on the sending side. `SharedArrayBuffer` instances are shared and do not need to be in the `transferList`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#_snippet_34

LANGUAGE: mjs
CODE:
```
import { MessageChannel } from 'node:worker_threads';
const { port1, port2 } = new MessageChannel();

port1.on('message', (message) => console.log(message));

const uint8Array = new Uint8Array([ 1, 2, 3, 4 ]);
// This posts a copy of `uint8Array`:
port2.postMessage(uint8Array);
// This does not copy data, but renders `uint8Array` unusable:
port2.postMessage(uint8Array, [ uint8Array.buffer ]);

// The memory for the `sharedUint8Array` is accessible from both the
// original and the copy received by `.on('message')`:
const sharedUint8Array = new Uint8Array(new SharedArrayBuffer(4));
port2.postMessage(sharedUint8Array);

// This transfers a freshly created message port to the receiver.
// This can be used, for example, to create communication channels between
// multiple `Worker` threads that are children of the same parent thread.
const otherChannel = new MessageChannel();
port2.postMessage({ port: otherChannel.port1 }, [ otherChannel.port1 ]);
```

----------------------------------------

TITLE: Creating and Using a MessageChannel (CJS)
DESCRIPTION: This code demonstrates how to create a MessageChannel and send a message between its two ports using CommonJS modules. It sets up a listener on port1 to receive messages and then posts a message from port2.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#_snippet_29

LANGUAGE: cjs
CODE:
```
'use strict';

const { MessageChannel } = require('node:worker_threads');

const { port1, port2 } = new MessageChannel();
port1.on('message', (message) => console.log('received', message));
port2.postMessage({ foo: 'bar' });
// Prints: received { foo: 'bar' } from the `port1.on('message')` listener
```

----------------------------------------

TITLE: Show vulnerability details without fixing
DESCRIPTION: Command to scan the project for vulnerabilities and display the details without applying any remediation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/commands/npm-audit.md#2025-04-23_snippet_9

LANGUAGE: bash
CODE:
```
$ npm audit
```

----------------------------------------

TITLE: Importing TLS Module in Node.js
DESCRIPTION: Examples showing how to import the TLS module in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/tls.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
import tls from 'node:tls';
```

LANGUAGE: javascript
CODE:
```
const tls = require('node:tls');
```

----------------------------------------

TITLE: Creating HTTPS Server with File Certificates (cjs)
DESCRIPTION: This code creates an HTTPS server using file-based certificates (private-key.pem and certificate.pem). It imports the necessary modules, reads the certificate files, and sets up a basic server that responds with 'hello world'.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#_snippet_4

LANGUAGE: cjs
CODE:
```
const https = require('node:https');
const fs = require('node:fs');

const options = {
  key: fs.readFileSync('private-key.pem'),
  cert: fs.readFileSync('certificate.pem'),
};

https.createServer(options, (req, res) => {
  res.writeHead(200);
  res.end('hello world\n');
}).listen(8000);
```

----------------------------------------

TITLE: AbortSignal with Async Iterable Stream
DESCRIPTION: Demonstrates using an `AbortSignal` with a readable stream as an async iterable. The stream is aborted after a timeout.  Error handling is included to catch the AbortError. Requires `node:fs`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_74

LANGUAGE: js
CODE:
```
const controller = new AbortController();
setTimeout(() => controller.abort(), 10_000); // set a timeout
const stream = addAbortSignal(
  controller.signal,
  fs.createReadStream(('object.json')),
);
(async () => {
  try {
    for await (const chunk of stream) {
      await process(chunk);
    }
  } catch (e) {
    if (e.name === 'AbortError') {
      // The operation was cancelled
    } else {
      throw e;
    }
  }
})();
```

----------------------------------------

TITLE: Resolving IPv4 Addresses and Performing Reverse DNS Lookup (CommonJS)
DESCRIPTION: This code snippet shows how to use dns.resolve4() to get IPv4 addresses for a domain and then perform reverse DNS lookups on those addresses using dns.reverse(). It uses CommonJS module syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_3

LANGUAGE: JavaScript
CODE:
```
const dns = require('node:dns');

dns.resolve4('archive.org', (err, addresses) => {
  if (err) throw err;

  console.log(`addresses: ${JSON.stringify(addresses)}`);

  addresses.forEach((a) => {
    dns.reverse(a, (err, hostnames) => {
      if (err) {
        throw err;
      }
      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);
    });
  });
});
```

----------------------------------------

TITLE: Destroying a Writable Stream with an Error
DESCRIPTION: This code demonstrates how to destroy a writable stream and emit an error. The destroy() method is called with an error object, which triggers the 'error' event on the stream. The example creates a new Writable stream, destroys it with an error, and then listens for the error event to log the error message.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_18

LANGUAGE: javascript
CODE:
```
const { Writable } = require('node:stream');

const myStream = new Writable();

const fooErr = new Error('foo error');
myStream.destroy(fooErr);
myStream.on('error', (fooErr) => console.error(fooErr.message)); // foo error
```

----------------------------------------

TITLE: Attempting WASI Instance Creation in Node.js (JS)
DESCRIPTION: Illustrates the creation of a WASI instance using `node:wasi`, which is restricted by the permission model and requires the `--allow-wasi` flag to succeed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_6

LANGUAGE: js
CODE:
```
const { WASI } = require('node:wasi');
// Attempt to bypass the permission
new WASI({
  version: 'preview1',
  // Attempt to mount the whole filesystem
  preopens: {
    '/': '/',
  },
});
```

----------------------------------------

TITLE: Generating HMAC Key using Web Crypto API in JavaScript
DESCRIPTION: This function generates an HMAC key using the Web Crypto API. It creates a symmetric key that can be used for signing and verifying operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

async function generateHmacKey(hash = 'SHA-256') {
  const key = await subtle.generateKey({
    name: 'HMAC',
    hash,
  }, true, ['sign', 'verify']);

  return key;
}
```

----------------------------------------

TITLE: Creating a Buffer from a portion of a TypedArray's ArrayBuffer (ESM)
DESCRIPTION: Shows how to create a Buffer from a portion of a TypedArray's underlying ArrayBuffer using ES modules, specifying a byteOffset and length. This allows creating a Buffer that represents only a segment of the TypedArray's memory.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_12

LANGUAGE: mjs
CODE:
```
import { Buffer } from 'node:buffer';

const arr = new Uint16Array(20);
const buf = Buffer.from(arr.buffer, 0, 16);

console.log(buf.length);
// Prints: 16
```

----------------------------------------

TITLE: Exporting and Importing HMAC Keys using Web Crypto API in JavaScript
DESCRIPTION: These functions demonstrate how to generate, export, and import HMAC keys using the Web Crypto API. They support different key formats and hash algorithms.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_7

LANGUAGE: javascript
CODE:
```
const { subtle } = globalThis.crypto;

async function generateAndExportHmacKey(format = 'jwk', hash = 'SHA-512') {
  const key = await subtle.generateKey({
    name: 'HMAC',
    hash,
  }, true, ['sign', 'verify']);

  return subtle.exportKey(format, key);
}

async function importHmacKey(keyData, format = 'jwk', hash = 'SHA-512') {
  const key = await subtle.importKey(format, keyData, {
    name: 'HMAC',
    hash,
  }, true, ['sign', 'verify']);

  return key;
}
```

----------------------------------------

TITLE: Initializing and Using Custom DNS Resolver in ES Modules
DESCRIPTION: Demonstrates how to create an independent resolver for DNS requests with custom DNS servers in ES Modules format. The example sets a custom DNS server (4.4.4.4) and resolves IPv4 addresses for a domain.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/dns.md#2025-04-23_snippet_14

LANGUAGE: mjs
CODE:
```
import { Resolver } from 'node:dns/promises';
const resolver = new Resolver();
resolver.setServers(['4.4.4.4']);

// This request will use the server at 4.4.4.4, independent of global settings.
const addresses = await resolver.resolve4('example.org');
```

----------------------------------------

TITLE: Writable Stream 'finish' Event Example
DESCRIPTION: This code demonstrates how to listen for the 'finish' event on a writable stream. The 'finish' event is emitted after stream.end() is called and all data has been flushed to the underlying system. The example writes data to a stream and logs a message when all writes are complete.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_15

LANGUAGE: javascript
CODE:
```
const writer = getWritableStreamSomehow();
for (let i = 0; i < 100; i++) {
  writer.write(`hello, #${i}!\n`);
}
writer.on('finish', () => {
  console.log('All writes are now complete.');
});
writer.end('This is the end\n');
```

----------------------------------------

TITLE: Checking Entry Point and Finding Parent Modules in Node.js
DESCRIPTION: Demonstrates recommended alternatives to the deprecated `module.parent` property in CommonJS modules. The first snippet shows how to check if the current module is the main entry point of the process. The second snippet illustrates how to find other CommonJS modules that have required the current one using `require.cache` and `module.children`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/deprecations.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
if (require.main === module) {
  // Code section that will run only if current file is the entry point.
}
```

LANGUAGE: JavaScript
CODE:
```
const moduleParents = Object.values(require.cache)
  .filter((m) => m.children.includes(module));
```

----------------------------------------

TITLE: Awaiting multiple events emitted on process.nextTick() - CJS
DESCRIPTION: This example demonstrates a potential issue when awaiting multiple events emitted in the same process.nextTick() batch using events.once(). The Promise for the second event might never resolve because the event is emitted before the Promise is created. It uses the EventEmitter and process modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/events.md#_snippet_60

LANGUAGE: cjs
CODE:
```
const { EventEmitter, once } = require('node:events');

const myEE = new EventEmitter();

async function foo() {
  await once(myEE, 'bar');
  console.log('bar');

  // This Promise will never resolve because the 'foo' event will
  // have already been emitted before the Promise is created.
  await once(myEE, 'foo');
  console.log('foo');
}

process.nextTick(() => {
  myEE.emit('bar');
  myEE.emit('foo');
});

foo().then(() => console.log('done'));
```

----------------------------------------

TITLE: Basic Client Instantiation in Undici
DESCRIPTION: Demonstrates how to instantiate a basic undici Client that connects to a local server. The client doesn't connect until a request is queued or connect() is explicitly called.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/Client.md#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
'use strict'
import { Client } from 'undici'

const client = new Client('http://localhost:3000')
```

----------------------------------------

TITLE: Illustrating Package Name Examples in Markdown
DESCRIPTION: This snippet provides examples of different package name formats, including scoped packages, specific versions, and version ranges.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/package-spec.md#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
* `npm`
* `@npmcli/arborist`
* `@npmcli/arborist@latest`
* `npm@6.13.1`
* `npm@^4.0.0`
```

----------------------------------------

TITLE: Using ReadableStream.getReader() in JavaScript (ESM)
DESCRIPTION: This example demonstrates how to use the getReader() method of a ReadableStream to obtain a reader and read data from the stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
import { ReadableStream } from 'node:stream/web';

const stream = new ReadableStream();

const reader = stream.getReader();

console.log(await reader.read());
```

----------------------------------------

TITLE: Iterating Directory Entries with fs.Dir Async Iterator (JavaScript)
DESCRIPTION: This snippet demonstrates how to open a directory using the promises-based `fsPromises.opendir` and then iterate through its entries asynchronously using the `fs.Dir` object's async iterator (`for await...of`). It prints the name of each directory entry and includes basic error handling.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_121

LANGUAGE: JavaScript
CODE:
```
import { opendir } from 'node:fs/promises';

try {
  const dir = await opendir('./');
  for await (const dirent of dir)
    console.log(dirent.name);
} catch (err) {
  console.error(err);
}
```

----------------------------------------

TITLE: Tiny CLI Implementation using Readline (ESM)
DESCRIPTION: This code implements a simple command-line interface (CLI) using the readline module with ES modules. It creates a readline interface, listens for user input, and responds to specific commands. The CLI provides a prompt and handles user input until the user closes the interface.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/readline.md#_snippet_31

LANGUAGE: mjs
CODE:
```
import { createInterface } from 'node:readline';
import { exit, stdin, stdout } from 'node:process';
const rl = createInterface({
  input: stdin,
  output: stdout,
  prompt: 'OHAI> ',
});

rl.prompt();

rl.on('line', (line) => {
  switch (line.trim()) {
    case 'hello':
      console.log('world!');
      break;
    default:
      console.log(`Say what? I might have heard '${line.trim()}'`);
      break;
  }
  rl.prompt();
}).on('close', () => {
  console.log('Have a great day!');
  exit(0);
});
```

----------------------------------------

TITLE: Accessing Node.js Timers Promises API (MJS/CJS)
DESCRIPTION: Shows the standard way to import or require the promise-based timer functions (`setTimeout`, `setImmediate`, `setInterval`) from the built-in `node:timers/promises` module in both ES Module and CommonJS syntax.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/timers.md#_snippet_2

LANGUAGE: mjs
CODE:
```
import {
  setTimeout,
  setImmediate,
  setInterval,
} from 'node:timers/promises';
```

LANGUAGE: cjs
CODE:
```
const {
  setTimeout,
  setImmediate,
  setInterval,
} = require('node:timers/promises');
```

----------------------------------------

TITLE: Monitoring Event Loop Delay Using perf_hooks (ESM) - JavaScript
DESCRIPTION: Demonstrates how to monitor event loop delays in a Node.js application using the monitorEventLoopDelay API from the 'perf_hooks' module in ECMAScript module syntax. Requires Node.js version 11.10.0 or newer, with access to 'node:perf_hooks'. The monitored histogram is enabled, then various statistics (min, max, mean, stddev, percentiles) are logged after disabling monitoring. This pattern is suitable for asynchronous performance analysis in JavaScript modules.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_18

LANGUAGE: JavaScript
CODE:
```
```mjs\nimport { monitorEventLoopDelay } from 'node:perf_hooks';\n\nconst h = monitorEventLoopDelay({ resolution: 20 });\nh.enable();\n// Do something.\nh.disable();\nconsole.log(h.min);\nconsole.log(h.max);\nconsole.log(h.mean);\nconsole.log(h.stddev);\nconsole.log(h.percentiles);\nconsole.log(h.percentile(50));\nconsole.log(h.percentile(99));\n```
```

----------------------------------------

TITLE: Sending Signals to Processes - process.kill()
DESCRIPTION: Shows how to use `process.kill()` to send a signal to a process. It sets up a signal handler for `SIGHUP`, sends the signal to the current process, and then exits after a short delay.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_92

LANGUAGE: mjs
CODE:
```
import process, { kill } from 'node:process';

process.on('SIGHUP', () => {
  console.log('Got SIGHUP signal.');
});

setTimeout(() => {
  console.log('Exiting.');
  process.exit(0);
}, 100);

kill(process.pid, 'SIGHUP');
```

LANGUAGE: cjs
CODE:
```
const process = require('node:process');

process.on('SIGHUP', () => {
  console.log('Got SIGHUP signal.');
});

setTimeout(() => {
  console.log('Exiting.');
  process.exit(0);
}, 100);

process.kill(process.pid, 'SIGHUP');
```

----------------------------------------

TITLE: Granting Full File System Access with Node.js Permissions
DESCRIPTION: Example command demonstrating how to run a Node.js script (`index.js`) with the permission model enabled (`--permission`) while granting full read (`--allow-fs-read=*`) and write (`--allow-fs-write=*`) access to the entire file system. Using the wildcard `*` bypasses specific path restrictions for file system operations.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/permissions.md#2025-04-23_snippet_2

LANGUAGE: console
CODE:
```
$ node --permission --allow-fs-read=* --allow-fs-write=* index.js
Hello world!
```

----------------------------------------

TITLE: Cloning Objects with Prototypes and Accessors
DESCRIPTION: This snippet demonstrates that object cloning using the structured clone algorithm does not preserve non-enumerable properties, property accessors, or object prototypes. Instances of JavaScript classes are cloned as plain JavaScript objects.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/worker_threads.md#_snippet_38

LANGUAGE: javascript
CODE:
```
const b = Symbol('b');

class Foo {
  #a = 1;
  constructor() {
    this[b] = 2;
    this.c = 3;
  }

  get d() { return 4; }
}

const { port1, port2 } = new MessageChannel();

port1.onmessage = ({ data }) => console.log(data);

port2.postMessage(new Foo());

// Prints: { c: 3 }
```

----------------------------------------

TITLE: Declaring and Awaiting Asynchronous Functions in Node.js (JavaScript)
DESCRIPTION: This snippet defines an asynchronous function testAsyncAwait that awaits another async function asyncFoo and then another function awaitBoo. It demonstrates the chaining of await statements and the structure of async function declarations in JavaScript. Required dependencies are native async/await support (ES2017+); key parameters are the internal async functions being called, and the expected output is the sequential awaited result of these functions.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/step-into-expected.txt#2025-04-23_snippet_6

LANGUAGE: JavaScript
CODE:
```
async function testAsyncAwait() {\n  #await asyncFoo();\n  await awaitBoo();
```

----------------------------------------

TITLE: Generating Random Bytes Synchronously with Node.js Crypto (ESM)
DESCRIPTION: Demonstrates synchronous generation of cryptographically strong random bytes using the crypto.randomBytes function in ESM format. Shows how to generate 256 bytes of random data and display it in hexadecimal format.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_86

LANGUAGE: javascript
CODE:
```
const {
  randomBytes,
} = await import('node:crypto');

const buf = randomBytes(256);
console.log(
  `${buf.length} bytes of random data: ${buf.toString('hex')}`);
```

----------------------------------------

TITLE: Performing Snapshot Assertions in Node.js Tests
DESCRIPTION: Demonstrates using the `t.assert.snapshot` method for snapshot testing within a Node.js test. It shows examples for both default serialization and providing custom serializer functions via the `serializers` option.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/test.md#_snippet_83

LANGUAGE: javascript
CODE:
```
test('snapshot test with default serialization', (t) => {
  t.assert.snapshot({ value1: 1, value2: 2 });
});

test('snapshot test with custom serialization', (t) => {
  t.assert.snapshot({ value3: 3, value4: 4 }, {
    serializers: [(value) => JSON.stringify(value)],
  });
});
```

----------------------------------------

TITLE: Converting Stream to JSON in Node.js
DESCRIPTION: Demonstrates parsing a readable stream as JSON using the streamConsumers.json() utility. Shows implementation in both ESM and CommonJS formats.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webstreams.md#2025-04-23_snippet_22

LANGUAGE: javascript
CODE:
```
import { json } from 'node:stream/consumers';
import { Readable } from 'node:stream';

const items = Array.from(
  {
    length: 100,
  },
  () => ({
    message: 'hello world from consumers!',
  }),
);

const readable = Readable.from(JSON.stringify(items));
const data = await json(readable);
console.log(`from readable: ${data.length}`);
// Prints: from readable: 100
```

LANGUAGE: javascript
CODE:
```
const { json } = require('node:stream/consumers');
const { Readable } = require('node:stream');

const items = Array.from(
  {
    length: 100,
  },
  () => ({
    message: 'hello world from consumers!',
  }),
);

const readable = Readable.from(JSON.stringify(items));
json(readable).then((data) => {
  console.log(`from readable: ${data.length}`);
  // Prints: from readable: 100
});
```

----------------------------------------

TITLE: Extending Writable Stream Class in JavaScript
DESCRIPTION: Demonstrates how to extend the `Writable` stream class in Node.js using JavaScript's `class` syntax. It shows how to call the parent class constructor using `super()` and include custom options like `highWaterMark`. The example uses destructuring to handle options passed to the constructor.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_76

LANGUAGE: javascript
CODE:
```
const { Writable } = require('node:stream');

class MyWritable extends Writable {
  constructor({ highWaterMark, ...options }) {
    super({ highWaterMark });
    // ...
  }
}
```

----------------------------------------

TITLE: Accessing PATH Environment Variable on POSIX
DESCRIPTION: Demonstrates logging the `PATH` environment variable on a POSIX system, which typically uses colons (`:`) as delimiters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_10

LANGUAGE: js
CODE:
```
console.log(process.env.PATH);
// Prints: '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin'
```

----------------------------------------

TITLE: Handling Rejection with Await in Try Block
DESCRIPTION: This code snippet demonstrates handling a promise rejection using `await` within a `try...catch` block. It is used to test the prediction of caught promise rejections.
SOURCE: https://github.com/nodejs/node/blob/main/deps/v8/test/inspector/debugger/break-on-exception-promise-catch-prediction-expected.txt#_snippet_4

LANGUAGE: JavaScript
CODE:
```
awaitAndCreateInTry (catch-prediction.js:202:10)
```

----------------------------------------

TITLE: URL Parsing Validation
DESCRIPTION: Checks if an input URL relative to a base can be parsed to a URL. Demonstrates both a valid and invalid URL parsing attempt.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_32

LANGUAGE: javascript
CODE:
```
const isValid = URL.canParse('/foo', 'https://example.org/'); // true

const isNotValid = URL.canParse('/foo'); // false
```

----------------------------------------

TITLE: HTTPS Request with Certificate Pinning
DESCRIPTION: This code creates an HTTPS request with certificate pinning. It defines options including hostname, port, path, and a custom checkServerIdentity function to validate the server's certificate against a known fingerprint and public key. The checkServerIdentity function performs several checks: standard hostname verification, public key pinning, and certificate fingerprint pinning. It also includes informational logging of the certificate chain.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/https.md#_snippet_16

LANGUAGE: javascript
CODE:
```
const tls = require('node:tls');
const https = require('node:https');
const crypto = require('node:crypto');

function sha256(s) {
  return crypto.createHash('sha256').update(s).digest('base64');
}
const options = {
  hostname: 'github.com',
  port: 443,
  path: '/',
  method: 'GET',
  checkServerIdentity: function(host, cert) {
    // Make sure the certificate is issued to the host we are connected to
    const err = tls.checkServerIdentity(host, cert);
    if (err) {
      return err;
    }

    // Pin the public key, similar to HPKP pin-sha256 pinning
    const pubkey256 = 'SIXvRyDmBJSgatgTQRGbInBaAK+hZOQ18UmrSwnDlK8=';
    if (sha256(cert.pubkey) !== pubkey256) {
      const msg = 'Certificate verification error: ' +
        `The public key of '${cert.subject.CN}' ` +
        'does not match our pinned fingerprint';
      return new Error(msg);
    }

    // Pin the exact certificate, rather than the pub key
    const cert256 = 'FD:6E:9B:0E:F3:98:BC:D9:04:C3:B2:EC:16:7A:7B:' +
      '0F:DA:72:01:C9:03:C5:3A:6A:6A:E5:D0:41:43:63:EF:65';
    if (cert.fingerprint256 !== cert256) {
      const msg = 'Certificate verification error: ' +
        `The certificate of '${cert.subject.CN}' ` +
        'does not match our pinned fingerprint';
      return new Error(msg);
    }

    // This loop is informational only.
    // Print the certificate and public key fingerprints of all certs in the
    // chain. Its common to pin the public key of the issuer on the public
    // internet, while pinning the public key of the service in sensitive
    // environments.
    let lastprint256;
    do {
      console.log('Subject Common Name:', cert.subject.CN);
      console.log('  Certificate SHA256 fingerprint:', cert.fingerprint256);

      hash = crypto.createHash('sha256');
      console.log('  Public key ping-sha256:', sha256(cert.pubkey));

      lastprint256 = cert.fingerprint256;
      cert = cert.issuerCertificate;
    } while (cert.fingerprint256 !== lastprint256);

  },
};

options.agent = new https.Agent(options);
const req = https.request(options, (res) => {
  console.log('All OK. Server matched our pinned cert or public key');
  console.log('statusCode:', res.statusCode);

  res.on('data', (d) => {});
});

req.on('error', (e) => {
  console.error(e.message);
});
req.end();
```

----------------------------------------

TITLE: Using child_process.execFile with CommonJS
DESCRIPTION: Example of using the execFile function to spawn a Node.js process and get its version. The callback receives error, stdout, and stderr parameters.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_12

LANGUAGE: JavaScript
CODE:
```
const { execFile } = require('node:child_process');
const child = execFile('node', ['--version'], (error, stdout, stderr) => {
  if (error) {
    throw error;
  }
  console.log(stdout);
});
```

----------------------------------------

TITLE: URL Parsing Validation with URL.canParse in Node.js
DESCRIPTION: The URL.canParse API checks if an input with an optional base value can be parsed correctly according to the WHATWG URL specification. It returns a boolean indicating whether the URL is valid.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V19.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const isValid = URL.canParse('/foo', 'https://example.org/'); // true
const isNotValid = URL.canParse('/foo'); // false
```

----------------------------------------

TITLE: Accessing HTTP Request Headers in Node.js
DESCRIPTION: Shows how to access the `message.headers` object, which contains the parsed request or response headers. Header names are lower-cased, and duplicate headers are handled according to RFC rules, with specific behavior for headers like `set-cookie` and `cookie`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_60

LANGUAGE: JavaScript
CODE:
```
// Prints something like:
//
// { 'user-agent': 'curl/7.22.0',
//   host: '127.0.0.1:8000',
//   accept: '*/*' }
console.log(request.headers);
```

----------------------------------------

TITLE: Collecting Chunks from a Readable Stream across 'readable' events
DESCRIPTION: This code shows how to collect chunks of data from a Readable stream across multiple 'readable' events. It accumulates the chunks in an array and then joins them to form the complete content when the 'end' event is emitted.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_37

LANGUAGE: javascript
CODE:
```
const chunks = [];

readable.on('readable', () => {
  let chunk;
  while (null !== (chunk = readable.read())) {
    chunks.push(chunk);
  }
});

readable.on('end', () => {
  const content = chunks.join('');
});
```

----------------------------------------

TITLE: Creating HMAC Hash with CommonJS
DESCRIPTION: Shows how to create an HMAC hash using SHA-256 algorithm with CommonJS require. Creates the same hash as the ESM example using a different module import method.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
const { createHmac } = require('node:crypto');

const secret = 'abcdefg';
const hash = createHmac('sha256', secret)
               .update('I love cupcakes')
               .digest('hex');
console.log(hash);
// Prints:
//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e
```

----------------------------------------

TITLE: Performing ECDH Key Exchange using ES Modules in Node.js
DESCRIPTION: Demonstrates a basic Elliptic Curve Diffie-Hellman (ECDH) key exchange between two parties (Alice and Bob) using ES Modules. It initializes two `ECDH` instances with the 'secp521r1' curve, generates key pairs for both, computes the shared secret using each other's public key, and asserts that the secrets match. Requires the `node:crypto` module.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_20

LANGUAGE: mjs
CODE:
```
import assert from 'node:assert';

const {
  createECDH,
} = await import('node:crypto');

// Generate Alice's keys...
const alice = createECDH('secp521r1');
const aliceKey = alice.generateKeys();

// Generate Bob's keys...
const bob = createECDH('secp521r1');
const bobKey = bob.generateKeys();

// Exchange and generate the secret...
const aliceSecret = alice.computeSecret(bobKey);
const bobSecret = bob.computeSecret(aliceKey);

assert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));
// OK
```

----------------------------------------

TITLE: Understanding Git URL Dependency Format (Bash/URL)
DESCRIPTION: This snippet outlines the generic format for specifying Git repositories as dependencies in `package.json`. It details the components: protocol (`git`, `git+ssh`, `git+http`, `git+https`, or `git+file`), optional user/password, hostname, optional port, path, and an optional commit-ish (like a branch, tag, or commit hash) or semver range (`#semver:<range>`).
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/configuring-npm/package-json.md#2025-04-23_snippet_16

LANGUAGE: bash
CODE:
```
<protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish> | #semver:<semver>]
```

----------------------------------------

TITLE: Reading Request Headers in Node.js
DESCRIPTION: Reads the value of a specific header from the outgoing request. The header name is case-insensitive. The return type depends on how the header was set using `request.setHeader()`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_22

LANGUAGE: javascript
CODE:
```
request.setHeader('content-type', 'text/html');
request.setHeader('Content-Length', Buffer.byteLength(body));
request.setHeader('Cookie', ['type=ninja', 'language=javascript']);
const contentType = request.getHeader('Content-Type');
// 'contentType' is 'text/html'
const contentLength = request.getHeader('Content-Length');
// 'contentLength' is of type number
const cookie = request.getHeader('Cookie');
// 'cookie' is of type string[]
```

----------------------------------------

TITLE: Piping a Readable stream to a file
DESCRIPTION: This example demonstrates piping data from a readable stream to a file using fs.createWriteStream. It shows the basic usage of readable.pipe() to transfer data to a writable stream.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_33

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs');
const readable = getReadableStreamSomehow();
const writable = fs.createWriteStream('file.txt');
// All the data from readable goes into 'file.txt'.
readable.pipe(writable);
```

----------------------------------------

TITLE: Copying Buffer Data using Buffer.from() - MJS
DESCRIPTION: Demonstrates copying data from an existing Buffer instance to a new Buffer instance using Buffer.from(). Modifying the original buffer does not affect the copied buffer.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_44

LANGUAGE: javascript
CODE:
```
import { Buffer } from 'node:buffer';

const buf1 = Buffer.from('buffer');
const buf2 = Buffer.from(buf1);

buf1[0] = 0x61;

console.log(buf1.toString());
// Prints: auffer
console.log(buf2.toString());
// Prints: buffer
```

----------------------------------------

TITLE: Scheduling a nextTick callback (ESM)
DESCRIPTION: This example demonstrates how to schedule a callback function to be executed in the next tick of the event loop using process.nextTick() in an ECMAScript module. The callback will be executed after the 'scheduled' console log.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/process.md#_snippet_98

LANGUAGE: mjs
CODE:
```
import { nextTick } from 'node:process';

console.log('start');
nextTick(() => {
  console.log('nextTick callback');
});
console.log('scheduled');
// Output:
// start
// scheduled
// nextTick callback
```

----------------------------------------

TITLE: Setting up HTTP Server for Keep-Alive Test (Node.js CJS)
DESCRIPTION: Provides a basic HTTP server setup used to demonstrate the `request.reusedSocket` property in a scenario involving keep-alive connections and potential 'ECONNRESET' errors.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/http.md#_snippet_29

LANGUAGE: cjs
CODE:
```
const http = require('node:http');

// Server has a 5 seconds keep-alive timeout by default
http
  .createServer((req, res) => {
    res.write('hello\n');
    res.end();
  })
  .listen(3000);

setInterval(() => {
  // Adapting a keep-alive agent
  http.get('http://localhost:3000', { agent }, (res) => {
    res.on('data', (data) => {
      // Do nothing
    });
  });
}, 5000); // Sending request on 5s interval so it's easy to hit idle timeout
```

----------------------------------------

TITLE: Explicitly Closing fs.FileHandle in Node.js
DESCRIPTION: This JavaScript code snippet demonstrates the recommended way to explicitly close an fs.FileHandle object using async/await and a try...finally block. This practice is necessary to avoid the DEP0137 runtime deprecation, which discourages relying on garbage collection for closing file handles.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/deprecations.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
const fsPromises = require('node:fs').promises;
async function openAndClose() {
  let filehandle;
  try {
    filehandle = await fsPromises.open('thefile.txt', 'r');
  } finally {
    if (filehandle !== undefined)
      await filehandle.close();
  }
}
```

----------------------------------------

TITLE: Checking for Native Errors using util.types.isNativeError
DESCRIPTION: The `util.types.isNativeError()` function checks if a value is an instance of a built-in JavaScript Error type (e.g., Error, TypeError, RangeError) or a subclass thereof. It accurately identifies errors originating from different realms, unlike `instanceof Error`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#_snippet_113

LANGUAGE: js
CODE:
```
console.log(util.types.isNativeError(new Error()));  // true
console.log(util.types.isNativeError(new TypeError()));  // true
console.log(util.types.isNativeError(new RangeError()));  // true
```

----------------------------------------

TITLE: Assert equality using `assert.equal` in CommonJS
DESCRIPTION: Demonstrates the use of `assert.equal` in CommonJS modules to perform shallow, coercive equality checks. It showcases comparisons with equal values, NaN, and unequal objects, highlighting the behavior in legacy assertion mode.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#_snippet_38

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert');

assert.equal(1, 1);
// OK, 1 == 1
assert.equal(1, '1');
// OK, 1 == '1'
assert.equal(NaN, NaN);
// OK

assert.equal(1, 2);
// AssertionError: 1 == 2
assert.equal({ a: { b: 1 } }, { a: { b: 1 } });
// AssertionError: { a: { b: 1 } } == { a: { b: 1 } }
```

----------------------------------------

TITLE: Extracting Directory Name using path.dirname
DESCRIPTION: Demonstrates using `path.dirname()` to get the directory portion of a path string ('/foo/bar/baz/asdf'). Trailing directory separators are ignored.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/path.md#2025-04-23_snippet_14

LANGUAGE: js
CODE:
```
path.dirname('/foo/bar/baz/asdf/quux');
// Returns: '/foo/bar/baz/asdf'
```

----------------------------------------

TITLE: Tracking Request Body Completion with undici:request:bodySent Channel
DESCRIPTION: Shows how to monitor when a request body has been fully sent using the diagnostics channel.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/docs/docs/api/DiagnosticsChannel.md#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
import diagnosticsChannel from 'diagnostics_channel'

diagnosticsChannel.channel('undici:request:bodySent').subscribe(({ request }) => {
  // request is the same object undici:request:create
})
```

----------------------------------------

TITLE: Promisifying class methods with util.promisify (MJS)
DESCRIPTION: This code snippet demonstrates how to use `util.promisify` with class methods. It defines a class `Foo` with a method `bar` that takes a callback. The example shows how naively promisifying `foo.bar` can lead to a `TypeError` because `this` is undefined. It then demonstrates two ways to correctly promisify the method: using `naiveBar.call(foo)` and using `naiveBar.bind(foo)`.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/util.md#_snippet_71

LANGUAGE: mjs
CODE:
```
import { promisify } from 'node:util';

class Foo {
  constructor() {
    this.a = 42;
  }

  bar(callback) {
    callback(null, this.a);
  }
}

const foo = new Foo();

const naiveBar = promisify(foo.bar);
// TypeError: Cannot read properties of undefined (reading 'a')
// naiveBar().then(a => console.log(a));

naiveBar.call(foo).then((a) => console.log(a)); // '42'

const bindBar = naiveBar.bind(foo);
bindBar().then((a) => console.log(a)); // '42'
```

----------------------------------------

TITLE: Using fs.constants with fs.open in Node.js
DESCRIPTION: Demonstrates how to import and use constants from `node:fs` with the `fs.open` function. It shows how to destructure specific constants (`O_RDWR`, `O_CREAT`, `O_EXCL`) and combine them using the bitwise OR operator (`|`) to specify multiple flags for opening a file.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_127

LANGUAGE: mjs
CODE:
```
import { open, constants } from 'node:fs';

const {
  O_RDWR,
  O_CREAT,
  O_EXCL,
} = constants;

open('/path/to/my/file', O_RDWR | O_CREAT | O_EXCL, (err, fd) => {
  // ...
});
```

----------------------------------------

TITLE: Buffer Encoding and Decoding with UTF-8, Hex, and Base64 (cjs)
DESCRIPTION: This code snippet demonstrates how to create a Buffer from a string using UTF-8 encoding and then convert it back to a string using hex and base64 encodings. It also shows how to create a Buffer with different encodings like utf8 and utf16le.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/buffer.md#_snippet_3

LANGUAGE: cjs
CODE:
```
const { Buffer } = require('node:buffer');

const buf = Buffer.from('hello world', 'utf8');

console.log(buf.toString('hex'));
// Prints: 68656c6c6f20776f726c64
console.log(buf.toString('base64'));
// Prints: aGVsbG8gd29ybGQ=

console.log(Buffer.from('fhqwhgads', 'utf8'));
// Prints: <Buffer 66 68 71 77 68 67 61 64 73>
console.log(Buffer.from('fhqwhgads', 'utf16le'));
// Prints: <Buffer 66 00 68 00 71 00 77 00 68 00 67 00 61 00 64 00 73 00>
```

----------------------------------------

TITLE: Executing Shell Commands with `exec` (CJS)
DESCRIPTION: Demonstrates basic usage of `child_process.exec` in CommonJS to run shell commands. It shows how to handle paths with spaces using double quotes and how shell variables like `$HOME` are interpreted, requiring escaping (`\$HOME`) if the literal string is needed.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/child_process.md#2025-04-23_snippet_4

LANGUAGE: cjs
CODE:
```
const { exec } = require('node:child_process');

exec('"/path/to/test file/test.sh" arg1 arg2');
// Double quotes are used so that the space in the path is not interpreted as
// a delimiter of multiple arguments.

exec('echo "The \\$HOME variable is $HOME"');
// The $HOME variable is escaped in the first instance, but not in the second.
```

----------------------------------------

TITLE: Checking if a value is an object in JavaScript
DESCRIPTION: This snippet provides the recommended way to check if a variable `arg` is a non-null object, replacing the deprecated `util.isObject()` function.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/deprecations.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
arg && typeof arg === 'object'
```

----------------------------------------

TITLE: Deep equality assertion with error diff using CommonJS
DESCRIPTION: Demonstrates a deep equality assertion that fails and displays an error diff in strict mode using CommonJS. The error diff highlights the differences between the actual and expected values.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/assert.md#_snippet_5

LANGUAGE: cjs
CODE:
```
const assert = require('node:assert/strict');

assert.deepEqual([[[1, 2, 3]], 4, 5], [[[1, 2, '3']], 4, 5]);
// AssertionError: Expected inputs to be strictly deep-equal:
// + actual - expected ... Lines skipped
//
//   [
//     [
// ...
//       2,
// +     3
// -     '3'
//     ],
// ...
//     5
//   ]
```

----------------------------------------

TITLE: FormData with Blob Streaming in Undici
DESCRIPTION: Example demonstrating how to use FormData with Blob streams for file uploads using Undici.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_5

LANGUAGE: javascript
CODE:
```
import { openAsBlob } from 'node:fs'

const file = await openAsBlob('./big.csv')
const body = new FormData()
body.set('file', file, 'big.csv')

await fetch('http://example.com', { method: 'POST', body })
```

----------------------------------------

TITLE: Graceful Worker Shutdown using worker.disconnect() in Node.js
DESCRIPTION: Demonstrates how the primary process can initiate a graceful shutdown of a worker. The primary sends a 'shutdown' message, calls `worker.disconnect()`, and sets a timeout to kill the worker if it doesn't disconnect within 2 seconds. The worker listens for the 'shutdown' message to perform cleanup before closing its server.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cluster.md#2025-04-23_snippet_5

LANGUAGE: js
CODE:
```
if (cluster.isPrimary) {
  const worker = cluster.fork();
  let timeout;

  worker.on('listening', (address) => {
    worker.send('shutdown');
    worker.disconnect();
    timeout = setTimeout(() => {
      worker.kill();
    }, 2000);
  });

  worker.on('disconnect', () => {
    clearTimeout(timeout);
  });

} else if (cluster.isWorker) {
  const net = require('node:net');
  const server = net.createServer((socket) => {
    // Connections never end
  });

  server.listen(8000);

  process.on('message', (msg) => {
    if (msg === 'shutdown') {
      // Initiate graceful close of any connections to server
    }
  });
}
```

----------------------------------------

TITLE: Measuring Performance with Performance Marks and Observer in Node.js (ESM, JavaScript)
DESCRIPTION: Demonstrates importing the 'performance' and 'PerformanceObserver' from Node.js's perf_hooks module in an ECMAScript Module (ESM) context to mark significant events and measure intervals. The observer prints the duration of a measured interval and clears marks to avoid timeline clutter; asynchronous code simulates long-running operations. Requires Node.js version 8.5.0 or newer with ESM support. Inputs are performance marks, outputs are log messages with interval durations; timing depends on implementation details of doSomeLongRunningProcess.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/perf_hooks.md#2025-04-23_snippet_0

LANGUAGE: mjs
CODE:
```
import { performance, PerformanceObserver } from 'node:perf_hooks';

const obs = new PerformanceObserver((items) => {
  console.log(items.getEntries()[0].duration);
  performance.clearMarks();
});
obs.observe({ type: 'measure' });
performance.measure('Start to Now');

performance.mark('A');
doSomeLongRunningProcess(() => {
  performance.measure('A to Now', 'A');

  performance.mark('B');
  performance.measure('A to B', 'A', 'B');
});
```

----------------------------------------

TITLE: Importing Cryptographic Keys with subtle.importKey in Node.js
DESCRIPTION: The importKey method converts external key data into a CryptoKey object. It supports various formats (raw, pkcs8, spki, jwk) and algorithms. The method returns a Promise that resolves with the created CryptoKey if the import is successful.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/webcrypto.md#2025-04-23_snippet_14

LANGUAGE: javascript
CODE:
```
subtle.importKey(format, keyData, algorithm, extractable, keyUsages)
```

----------------------------------------

TITLE: Executing Node.js with Permissions Enabled (Error Example)
DESCRIPTION: Demonstrates the error thrown when running a Node.js script (`index.js`) with the `--permission` flag without granting necessary file system read access for the entry script itself. The error `ERR_ACCESS_DENIED` with permission `FileSystemRead` indicates that access to the script file resource was restricted.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/permissions.md#2025-04-23_snippet_0

LANGUAGE: console
CODE:
```
$ node --permission index.js

Error: Access to this API has been restricted
    at node:internal/main/run_main_module:23:47 {
  code: 'ERR_ACCESS_DENIED',
  permission: 'FileSystemRead',
  resource: '/home/user/index.js'
}
```

----------------------------------------

TITLE: Piping to Writable Streams from Async Iterators in Node.js
DESCRIPTION: Illustrates how to pipe data from an async iterator to a writable stream using `stream.pipeline()` for proper backpressure and error handling. It shows both callback and promise-based approaches for managing the pipeline and aborting the process.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/stream.md#_snippet_106

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs');
const { pipeline } = require('node:stream');
const { pipeline: pipelinePromise } = require('node:stream/promises');

const writable = fs.createWriteStream('./file');

const ac = new AbortController();
const signal = ac.signal;

const iterator = createIterator({ signal });

// Callback Pattern
pipeline(iterator, writable, (err, value) => {
  if (err) {
    console.error(err);
  } else {
    console.log(value, 'value returned');
  }
}).on('close', () => {
  ac.abort();
});

// Promise Pattern
pipelinePromise(iterator, writable)
  .then((value) => {
    console.log(value, 'value returned');
  })
  .catch((err) => {
    console.error(err);
    ac.abort();
  });
```

----------------------------------------

TITLE: Converting Path to File URL (CJS)
DESCRIPTION: Demonstrates how to convert a file path to a file URL using `pathToFileURL` in a CommonJS module. It shows the correct encoding of URL control characters and handling of platform-specific paths.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_54

LANGUAGE: cjs
CODE:
```
const { pathToFileURL } = require('node:url');
new URL(__filename);                  // Incorrect: throws (POSIX)
new URL(__filename);                  // Incorrect: C:\... (Windows)
pathToFileURL(__filename);            // Correct:   file:///... (POSIX)
pathToFileURL(__filename);            // Correct:   file:///C:/... (Windows)

new URL('/foo#1', 'file:');           // Incorrect: file:///foo#1
pathToFileURL('/foo#1');              // Correct:   file:///foo%231 (POSIX)

new URL('/some/path%.c', 'file:');    // Incorrect: file:///some/path%.c
pathToFileURL('/some/path%.c');       // Correct:   file:///some/path%25.c (POSIX)
```

----------------------------------------

TITLE: Implementing Node-API Addon Logic (C)
DESCRIPTION: Contains the core implementation of the Node-API addon. It includes a helper macro `NODE_API_CALL` for robust error handling and the `create_addon` function which creates an object, defines and exports a native function `DoSomethingUseful` as `doSomethingUseful` to JavaScript.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#_snippet_13

LANGUAGE: C
CODE:
```
// addon.c
#include "addon.h"

#define NODE_API_CALL(env, call)                                  \
  do {                                                            \
    napi_status status = (call);                                  \
    if (status != napi_ok) {                                      \
      const napi_extended_error_info* error_info = NULL;          \
      napi_get_last_error_info((env), &error_info);               \
      const char* err_message = error_info->error_message;        \
      bool is_pending;                                            \
      napi_is_exception_pending((env), &is_pending);              \
      /* If an exception is already pending, don't rethrow it */  \
      if (!is_pending) {                                          \
        const char* message = (err_message == NULL)               \
            ? "empty error message"                               \
            : err_message;                                        \
        napi_throw_error((env), NULL, message);                   \
      }                                                           \
      return NULL;                                                \
    }                                                             \
  } while(0)

static napi_value
DoSomethingUseful(napi_env env, napi_callback_info info) {
  // Do something useful.
  return NULL;
}

napi_value create_addon(napi_env env) {
  napi_value result;
  NODE_API_CALL(env, napi_create_object(env, &result));

  napi_value exported_function;
  NODE_API_CALL(env, napi_create_function(env,
                                          "doSomethingUseful",
                                          NAPI_AUTO_LENGTH,
                                          DoSomethingUseful,
                                          NULL,
                                          &exported_function));

  NODE_API_CALL(env, napi_set_named_property(env,
                                             result,
                                             "doSomethingUseful",
                                             exported_function));

  return result;
}
```

----------------------------------------

TITLE: Creating a TCP Server and Handling Connections
DESCRIPTION: Shows how to create a TCP server, handle connections, and log the server's address information.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/net.md#2025-04-23_snippet_4

LANGUAGE: JavaScript
CODE:
```
const server = net.createServer((socket) => {
  socket.end('goodbye\n');
}).on('error', (err) => {
  // Handle errors here.
  throw err;
});

// Grab an arbitrary unused port.
server.listen(() => {
  console.log('opened server on', server.address());
});
```

----------------------------------------

TITLE: Benchmarking Max Semi-Space Size in Node.js (Bash)
DESCRIPTION: Example bash script loop to benchmark a Node.js application (index.js) with different values for the --max-semi-space-size V8 flag. This helps determine the optimal semi-space size for improving throughput based on the workload.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/cli.md#_snippet_63

LANGUAGE: bash
CODE:
```
for MiB in 16 32 64 128; do
    node --max-semi-space-size=$MiB index.js
done
```

----------------------------------------

TITLE: Using crypto.hash() in Node.js
DESCRIPTION: Examples of using the crypto.hash() function to create hash digests in both CommonJS and ES Modules format. Shows hashing strings and buffers with different output encodings.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_79

LANGUAGE: javascript
CODE:
```
const crypto = require('node:crypto');
const { Buffer } = require('node:buffer');

// Hashing a string and return the result as a hex-encoded string.
const string = 'Node.js';
// 10b3493287f831e81a438811a1ffba01f8cec4b7
console.log(crypto.hash('sha1', string));

// Encode a base64-encoded string into a Buffer, hash it and return
// the result as a buffer.
const base64 = 'Tm9kZS5qcw==';
// <Buffer 10 b3 49 32 87 f8 31 e8 1a 43 88 11 a1 ff ba 01 f8 ce c4 b7>
console.log(crypto.hash('sha1', Buffer.from(base64, 'base64'), 'buffer'));
```

LANGUAGE: javascript
CODE:
```
import crypto from 'node:crypto';
import { Buffer } from 'node:buffer';

// Hashing a string and return the result as a hex-encoded string.
const string = 'Node.js';
// 10b3493287f831e81a438811a1ffba01f8cec4b7
console.log(crypto.hash('sha1', string));

// Encode a base64-encoded string into a Buffer, hash it and return
// the result as a buffer.
const base64 = 'Tm9kZS5qcw==';
// <Buffer 10 b3 49 32 87 f8 31 e8 1a 43 88 11 a1 ff ba 01 f8 ce c4 b7>
console.log(crypto.hash('sha1', Buffer.from(base64, 'base64'), 'buffer'));
```

----------------------------------------

TITLE: Compressing Stream with Gzip and Promise Pipeline (ESM)
DESCRIPTION: Compresses a file using Gzip and streams with the promise-based pipeline API for asynchronous data handling. It defines an async function to read from an input file, compress it, and write the compressed data to an output file, using promises for cleaner asynchronous code.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/zlib.md#_snippet_3

LANGUAGE: mjs
CODE:
```
import {
  createReadStream,
  createWriteStream,
} from 'node:fs';
import process from 'node:process';
import { createGzip } from 'node:zlib';
import { pipeline } from 'node:stream/promises';

async function do_gzip(input, output) {
  const gzip = createGzip();
  const source = createReadStream(input);
  const destination = createWriteStream(output);
  await pipeline(source, gzip, destination);
}

await do_gzip('input.txt', 'input.txt.gz');
```

----------------------------------------

TITLE: Getting and setting the hostname property of a URL in JavaScript
DESCRIPTION: Demonstrates how to get and set the hostname portion of a URL using the hostname property. Setting the hostname property modifies the URL, but does not change the port.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/url.md#_snippet_16

LANGUAGE: js
CODE:
```
const myURL = new URL('https://example.org:81/foo');
console.log(myURL.hostname);
// Prints example.org

// Setting the hostname does not change the port
myURL.hostname = 'example.com';
console.log(myURL.href);
// Prints https://example.com:81/foo

// Use myURL.host to change the hostname and port
myURL.host = 'example.org:82';
console.log(myURL.href);
// Prints https://example.org:82/foo
```

----------------------------------------

TITLE: Async Iterable Request Body with Undici
DESCRIPTION: Example showing how to use async iterables as request body with Undici's fetch implementation.
SOURCE: https://github.com/nodejs/node/blob/main/deps/undici/src/README.md#2025-04-23_snippet_4

LANGUAGE: javascript
CODE:
```
import { fetch } from 'undici'

const data = {
  async *[Symbol.asyncIterator]() {
    yield 'hello'
    yield 'world'
  },
}

await fetch('https://example.com', { body: data, method: 'POST', duplex: 'half' })
```

----------------------------------------

TITLE: Creating a Symlink for a Local npm Package
DESCRIPTION: Demonstrates how to create a symlink for a local npm package, which is useful for development and testing without repeated installations.
SOURCE: https://github.com/nodejs/node/blob/main/deps/npm/docs/content/using-npm/developers.md#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
npm link
```

----------------------------------------

TITLE: Node-API Init Function - Adding Method to Exports (C)
DESCRIPTION: Example of an Init function that adds a method named 'hello' to the module's exports object using napi_define_properties. The Method symbol is expected to be defined elsewhere.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/n-api.md#_snippet_64

LANGUAGE: c
CODE:
```
napi_value Init(napi_env env, napi_value exports) {
  napi_status status;
  napi_property_descriptor desc = {
    "hello",
    NULL,
    Method,
    NULL,
    NULL,
    NULL,
    napi_writable | napi_enumerable | napi_configurable,
    NULL
  };
  status = napi_define_properties(env, exports, 1, &desc);
  if (status != napi_ok) return NULL;
  return exports;
}
```

----------------------------------------

TITLE: Watching Files/Directories with fsPromises.watch (Node.js)
DESCRIPTION: Returns an asynchronous iterator that watches for changes to `filename`, which can be a file or a directory. The iterator yields objects describing the type of change (`eventType`) and the affected `filename`. Options allow controlling persistence, recursion, encoding, and cancellation via an AbortSignal.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/fs.md#_snippet_33

LANGUAGE: JavaScript
CODE:
```
const { watch } = require('node:fs/promises');

const ac = new AbortController();
const { signal } = ac;
setTimeout(() => ac.abort(), 10000);

(async () => {
  try {
    const watcher = watch(__filename, { signal });
    for await (const event of watcher)
      console.log(event);
  } catch (err) {
    if (err.name === 'AbortError')
      return;
    throw err;
  }
})();
```

----------------------------------------

TITLE: Use Strict Equality Assertions in Tests
DESCRIPTION: This snippet illustrates replacing `assert.equal` with `assert.strictEqual` in Node.js tests. `assert.strictEqual` performs a stricter comparison, checking both value and type, which leads to more accurate and reliable test results. This change helps catch subtle bugs that might be missed by looser equality checks.
SOURCE: https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V7.md#_snippet_126

LANGUAGE: JavaScript
CODE:
```
assert.strictEqual(1, '1', 'Values are not strictly equal');
```

----------------------------------------

TITLE: HMAC Digest using update() and digest() Methods - Node.js Crypto (JavaScript ESM)
DESCRIPTION: This ESM snippet demonstrates using hmac.update() to input data and hmac.digest('hex') to get the authentication code in hexadecimal. It initializes an HMAC with SHA-256 algorithm and a provided secret. Note: hmac object cannot be reused after digest() is called. Requires 'node:crypto' and ESM-capable Node.js.
SOURCE: https://github.com/nodejs/node/blob/main/doc/api/crypto.md#2025-04-23_snippet_38

LANGUAGE: JavaScript
CODE:
```
const {
  createHmac,
} = await import('node:crypto');

const hmac = createHmac('sha256', 'a secret');

hmac.update('some data to hash');
console.log(hmac.digest('hex'));
// Prints:
//   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e
```