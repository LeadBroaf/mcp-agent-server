TITLE: Variable Declaration in JavaScript
DESCRIPTION: This code snippet initializes a variable `greetings` to zero. It shows the mapping of a variable declaration from TypeScript source to emitted JavaScript code. No specific dependencies or inputs are needed for this code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationFunctionExpressions.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
var greetings = 0;
```

----------------------------------------

TITLE: Invalid Import Statement in TypeScript
DESCRIPTION: An example of an incorrect import statement that causes a TypeScript compilation error TS1109, followed by a valid import statement.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importCallExpressionIncorrect1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import
import { foo } from './0';
```

----------------------------------------

TITLE: Exporting Classes and Functions in JavaScript
DESCRIPTION: This snippet defines and exports several classes and functions in a JavaScript module. It demonstrates how to use classes and functions within the module's export object. The classes 'Thing' and 'AnotherThing', and the functions 'foo', 'baz', and 'bar' (aliased to 'qux') are exported, along with a 'literal' property and a typedef 'buz'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleExportAssignment7.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
class Thing  { x = 1 }
class AnotherThing { y = 2  }
function foo() { return 3 }
function bar() { return 4 }
/** @typedef {() => number} buz */
module.exports = {
    Thing,
    AnotherThing,
    foo,
    qux: bar,
    baz() { return 5 },
    literal: "",
}
```

----------------------------------------

TITLE: Conditional Check for Variable Equality in TypeScript
DESCRIPTION: This snippet performs a conditional check to see if 'nameA' is equal to 'nameB'. It demonstrates how to use an 'if' statement for conditional logic in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatement.sourcemap.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
if (nameA == nameB) {
```

----------------------------------------

TITLE: Function Reference Error Detection in TypeScript
DESCRIPTION: Demonstrates various cases where TypeScript detects incorrect function references in conditional statements. Shows examples of error detection when functions are used directly in boolean expressions without being called, including property access patterns and class methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/truthinessCallExpressionCoercion2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function checksConsole() {
    // error
    typeof window !== 'undefined' && window.console &&
        ((window.console as any).firebug || (window.console.error && window.console.table));
}

function checksPropertyAccess() {
    const x = {
        foo: {
            bar() { return true; }
        }
    }

    // error
    x.foo.bar && console.log('x.foo.bar');

    // error
    1 && x.foo.bar && console.log('x.foo.bar');

    // ok
    x.foo.bar && x.foo.bar();

    // ok
    x.foo.bar && 1 && x.foo.bar();

    // ok
    const y = A.from && (A.from as Function) !== B.from ? true : false;
    y;

    const x1 = {
        a: { b: { c: () => {} } }
    }
    const x2 = {
        a: { b: { c: () => {} } }
    }

    // error checks for nested property access
    if ((x1.a.b.c)) {}

    if (1 && (x1.a.b.c || x2.a.b.c)) {}

    if ((x1.a.b.c || x2.a.b.c) && 1) {}
}

class Foo {
    optional?: () => boolean;
    required() {
        return true;
    }
    test() {
        // error
        this.required && console.log('required');

        // error
        1 && this.required && console.log('required');

        // ok
        this.required && this.required();

        // ok
        this.required && 1 && this.required();

        // ok
        1 && this.optional && console.log('optional');
    }
}
```

----------------------------------------

TITLE: Instantiating Generic Class with Too Many Type Arguments
DESCRIPTION: Example showing a TypeScript compilation error when instantiating a generic class with more type arguments than defined. The class C expects one type parameter but receives two.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/instantiateGenericClassWithWrongNumberOfTypeArguments.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C<T> {
    x: T;
}

var c = new C<number, number>();
```

----------------------------------------

TITLE: Importing Classes with Different Syntaxes in JavaScript
DESCRIPTION: Demonstrates three different ways to import modules in JavaScript: named imports, namespace imports, and default imports. The code creates instances using each import pattern.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/elidedJSImport2(module=es2022).errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { Foo } from "./other.js";
import * as other from "./other.js";
import defaultFoo from "./other.js";

const x = new Foo();
const y = other.Foo();
const z = new defaultFoo();
```

----------------------------------------

TITLE: Declaring Async Functions in TypeScript
DESCRIPTION: This snippet showcases various ways to declare asynchronous functions in TypeScript, using both 'async function' syntax and arrow functions. Some functions return a standard Promise, while others utilize a custom Promise type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncAwaitIsolatedModules_es6.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
async function f0() { }
async function f1(): Promise<void> { }
async function f3(): MyPromise<void> { }

let f4 = async function() { }
let f5 = async function(): Promise<void> { }
let f6 = async function(): MyPromise<void> { }

let f7 = async () => { };
let f8 = async (): Promise<void> => { };
let f9 = async (): MyPromise<void> => { }; 
let f10 = async () => p;
let f11 = async () => mp;
let f12 = async (): Promise<number> => mp;
let f13 = async (): MyPromise<number> => p;
```

----------------------------------------

TITLE: Importing and Using Exported Interface in TypeScript
DESCRIPTION: This snippet demonstrates the incorrect and correct usage of an imported interface in TypeScript. It shows errors when trying to use the interface as a constructor or function, and correct usage as a type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAssignmentOfDeclaredExternalModule.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
///<reference path='exportAssignmentOfDeclaredExternalModule_0.ts'/>
import Sammy = require('./exportAssignmentOfDeclaredExternalModule_0');
var x = new Sammy(); // error to use as constructor as there is not constructor symbol
var y = Sammy(); // error to use interface name as call target
var z: Sammy; // no error - z is of type interface Sammy from module 'M'
var a = new z(); // constructor - no error
var b = z(); // call signature - no error
```

----------------------------------------

TITLE: Importing Modules in ESM Format (TypeScript)
DESCRIPTION: Demonstrates correct import statements in an ECMAScript module format file. It imports from both CommonJS and ESM modules without errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackageExports(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// esm format file
import * as cjs from "package/cjs";
import * as mjs from "package/mjs";
import * as type from "package";
cjs;
mjs;
type;
import * as cjsi from "inner/cjs";
import * as mjsi from "inner/mjs";
import * as typei from "inner";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: Handling Missing Type Definitions in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates the handling of various common errors that occur when using TypeScript without necessary type definitions installed. The script includes basic test setups using `describe`, `it`, and `suite` functions, which are common in test runners like Mocha and Jest. Errors related to other missing global objects or APIs are also demonstrated, such as jQuery, Node.js modules, and ES2015 collections. The solution typically involves installing corresponding type definitions and adjusting the TypeScript config.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/didYouMeanSuggestionErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
describe("my test suite", () => {
    it("should run", () => {
        const a = $(".thing");
    });
});

suite("another suite", () => {
    test("everything else", () => {
        console.log(process.env);
        document.createElement("div");

        const x = require("fs");
        const y = Buffer.from([]);
        const z = module.exports;

        const a = new Map();
        const b = new Set();
        const c = new WeakMap();
        const d = new WeakSet();
        const e = Symbol();
        const f = Promise.resolve(0);

        const i: Iterator<any> = null as any;
        const j: AsyncIterator<any> = null as any;
        const k: Symbol = null as any;
        const l: Promise<any> = null as any;
    });
});
```

----------------------------------------

TITLE: Accessing 'this' before super() Call in Derived Class Constructors
DESCRIPTION: Shows two examples of classes that incorrectly attempt to access 'this' before calling the super constructor. TypeScript requires super() to be called before any reference to 'this' in derived class constructors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisInInvalidContextsExternalModule.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class BaseErrClass {
    constructor(t: any) { }
}

class ClassWithNoInitializer extends BaseErrClass {
    t;
    //'this' in optional super call
    constructor() {
        super(this); // error: "super" has to be called before "this" accessing
    }
}

class ClassWithInitializer extends BaseErrClass {
    t = 4;
    //'this' in required super call
    constructor() {
        super(this); // Error
    }
}
```

----------------------------------------

TITLE: Configuring Compiler Paths in TypeScript
DESCRIPTION: This snippet sets up basic compiler options for a TypeScript project, specifying the base URL and paths for module resolution. The example shows an error in the paths configuration due to incorrect wildcard usage.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/pathMappingBasedModuleResolution2_node.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "baseUrl": "./src",
        "paths": {
            "*1*": [ "*2*" ]
            ~~~~~
!!! error TS5061: Pattern '*1*' can have at most one '*' character.
                     ~~~~~
!!! error TS5062: Substitution '*2*' in pattern '*1*' can have at most one '*' character.
        }
    }
}
```

----------------------------------------

TITLE: Root Package Configuration
DESCRIPTION: Package.json configuration setting ESM as the default module type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsExportAssignment(module=nodenext).errors.txt#2025-04-21_snippet_4

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Destructuring Assignment with Default Values in TypeScript
DESCRIPTION: This snippet shows how to perform a destructuring assignment with default values in TypeScript. It assigns variables from an array while providing default values for those that are undefined. One dependency is knowing which index in the array to destructure. The expected output is the default value 'noName' if the destructured element is undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_7

LANGUAGE: TypeScript
CODE:
```
_c = _40[_39], _d = _c[1], nameA = _d === void 0 ? "noName" : _d;
```

----------------------------------------

TITLE: Package.json with Conditional Exports Configuration
DESCRIPTION: Package configuration that defines different entry points for import and require conditions. This affects how TypeScript resolves type declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesTripleSlashReferenceModeOverride1(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "exports": {
        "import": "./import.js",
        "require": "./require.js"
    }
}
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options
DESCRIPTION: This JSON snippet configures the TypeScript compiler with options such as allowing JavaScript, disabling declarations, and setting module resolution to node. It focuses on enabling JavaScript files in a TypeScript project, setting the node module resolution, and limiting the depth of node module resolution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesImportHigher/amd/nodeModulesImportHigher.errors.txt#2025-04-21_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "compilerOptions": { 
    "allowJs": true,
    "declaration": false,
    "moduleResolution": "node",
    "maxNodeModuleJsDepth": 2
  }
}
```

----------------------------------------

TITLE: Exporting Variable in TypeScript
DESCRIPTION: This snippet demonstrates the correct way to export a variable in TypeScript. It exports a variable 'a' with a value of 10.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ImportDefaultBindingFollowedWithNamespaceBindingWithExport.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export var a = 10;
```

----------------------------------------

TITLE: Class Definition and Type Guard Examples in TypeScript
DESCRIPTION: Demonstrates various ways of comparing constructors for type narrowing, using both dot notation and bracket notation, with equality and strict equality operators. Shows type inference in different branches and error cases when accessing properties on potentially incompatible types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardConstructorClassAndNumber.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// Typical case
class C1 {
    property1: string;
}

let var1: C1 | number;
if (var1.constructor == C1) {
    var1; // C1
    var1.property1; // string
}
else {
    var1; // number | C1
}
if (var1["constructor"] == C1) {
    var1; // C1
    var1.property1; // string
}
else {
    var1; // number | C1
}
```

----------------------------------------

TITLE: Defining Interface with Optional Properties in TypeScript
DESCRIPTION: This snippet defines an interface 'interfaceWithPublicAndOptional' with one required and one optional property. It shows how to create an object conforming to this interface. The key feature is the optional property 'two', which may or may not be defined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability41.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module __test1__ {
    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
    export var __val__obj4 = obj4;
}
```

----------------------------------------

TITLE: Exporting Constants in TypeScript
DESCRIPTION: This snippet defines and exports two constants: a number and a string. These constants are likely used in other parts of the project.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enumWithNonLiteralStringInitializer.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export const foo = 2;
export const bar = "bar";
```

----------------------------------------

TITLE: Helper Export Definition - TypeScript
DESCRIPTION: Simple helper file exporting a numeric constant.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enumNoInitializerFollowsNonLiteralInitializer.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const foo = 2;
```

----------------------------------------

TITLE: Correct TypeScript Exports - Valid Cases
DESCRIPTION: This snippet documents the successful export and import of values in TypeScript, showcasing proper syntax and usage. Correct implementations are essential for ensuring that modules interact as expected.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arbitraryModuleNamespaceIdentifiers_syntax.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
==== values-valid.ts (0 errors) ====
    export const foo = 123;
    export { foo as "valid 1" };
    import { "valid 1" as bar } from "./values-valid";
    export { "valid 1" as "valid 2" } from "./values-valid";
    export { foo as "valid 3" } from "./values-valid";
    export * as "valid 4" from "./values-valid";
```

----------------------------------------

TITLE: TypeScript Definition for DOM Element Members
DESCRIPTION: This snippet defines a collection of properties and methods available on DOM Element objects in TypeScript. It includes standard DOM properties like `id`, `className`, `children`, methods like `querySelector`, `append`, `remove`, ARIA attributes, and constants for node types and document positions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRecursiveInference.errors.txt#_snippet_23

LANGUAGE: TypeScript
CODE:
```
Y_REFERENCE_NODE: any; readonly ENTITY_NODE: any; readonly PROCESSING_INSTRUCTION_NODE: any; readonly COMMENT_NODE: any; readonly DOCUMENT_NODE: any; readonly DOCUMENT_TYPE_NODE: any; readonly DOCUMENT_FRAGMENT_NODE: any; readonly NOTATION_NODE: any; readonly DOCUMENT_POSITION_DISCONNECTED: any; readonly DOCUMENT_POSITION_PRECEDING: any; readonly DOCUMENT_POSITION_FOLLOWING: any; readonly DOCUMENT_POSITION_CONTAINS: any; readonly DOCUMENT_POSITION_CONTAINED_BY: any; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: any; dispatchEvent: any; ariaActiveDescendantElement: any; ariaAtomic: any; ariaAutoComplete: any; ariaBrailleLabel: any; ariaBrailleRoleDescription: any; ariaBusy: any; ariaChecked: any; ariaColCount: any; ariaColIndex: any; ariaColIndexText: any; ariaColSpan: any; ariaControlsElements: any; ariaCurrent: any; ariaDescribedByElements: any; ariaDescription: any; ariaDetailsElements: any; ariaDisabled: any; ariaErrorMessageElements: any; ariaExpanded: any; ariaFlowToElements: any; ariaHasPopup: any; ariaHidden: any; ariaInvalid: any; ariaKeyShortcuts: any; ariaLabel: any; ariaLabelledByElements: any; ariaLevel: any; ariaLive: any; ariaModal: any; ariaMultiLine: any; ariaMultiSelectable: any; ariaOrientation: any; ariaOwnsElements: any; ariaPlaceholder: any; ariaPosInSet: any; ariaPressed: any; ariaReadOnly: any; ariaRelevant: any; ariaRequired: any; ariaRoleDescription: any; ariaRowCount: any; ariaRowIndex: any; ariaRowIndexText: any; ariaRowSpan: any; ariaSelected: any; ariaSetSize: any; ariaSort: any; ariaValueMax: any; ariaValueMin: any; ariaValueNow: any; ariaValueText: any; role: any; animate: any; getAnimations: any; after: any; before: any; remove: any; replaceWith: any; readonly nextElementSibling: any; readonly previousElementSibling: any; readonly childElementCount: any; readonly children: any; readonly firstElementChild: any; readonly lastElementChild: any; append: any; prepend: any; querySelector: any; querySelectorAll: any; replaceChildren: any; readonly assignedSlot: any; }; readonly lastElementChild: { readonly attributes: any; classList: any; className: any; readonly clientHeight: any; readonly clientLeft: any; readonly clientTop: any; readonly clientWidth: any; readonly currentCSSZoom: any; id: any; innerHTML: any; readonly localName: any; readonly namespaceURI: any; onfullscreenchange: any; onfullscreenerror: any; outerHTML: any; readonly ownerDocument: any; part: any; readonly prefix: any; readonly scrollHeight: any; scrollLeft: any; scrollTop: any; readonly scrollWidth: any; readonly shadowRoot: any; slot: any; readonly tagName: any; attachShadow: any; checkVisibility: any; closest: any; computedStyleMap: any; getAttribute: any; getAttributeNS: any; getAttributeNames: any; getAttributeNode: any; getAttributeNodeNS: any; getBoundingClientRect: any; getClientRects: any; getElementsByClassName: any; getElementsByTagName: any; getElementsByTagNameNS: any; getHTML: any; hasAttribute: any; hasAttributeNS: any; hasAttributes: any; hasPointerCapture: any; insertAdjacentElement: any; insertAdjacentHTML: any; insertAdjacentText: any; matches: any; releasePointerCapture: any; removeAttribute: any; removeAttributeNS: any; removeAttributeNode: any; requestFullscreen: any; requestPointerLock: any; scroll: any; scrollBy: any; scrollIntoView: any; scrollTo: any; setAttribute: any; setAttributeNS: any; setAttributeNode: any; setAttributeNodeNS: any; setHTMLUnsafe: any; setPointerCapture: any; toggleAttribute: any; webkitMatchesSelector: any; addEventListener: any; removeEventListener: any; readonly baseURI: any; readonly childNodes: any; readonly firstChild: any; readonly isConnected: any; readonly lastChild: any; readonly nextSibling: any; readonly nodeName: any; readonly nodeType: any; nodeValue: any; readonly parentElement: any; readonly parentNode: any; readonly previousSibling: any; textContent: any; appendChild: any; cloneNode: any; compareDocumentPosition: any; contains: any; getRootNode: any; hasChildNodes: any; insertBefore: any; isDefaultNamespace: any; isEqualNode: any; isSameNode: any; lookupNamespaceURI: any; lookupPrefix: any; normalize: any; removeChild: any; replaceChild: any; readonly ELEMENT_NODE: any; readonly ATTRIBUTE_NODE: any; readonly TEXT_NODE: any; readonly CDATA_SECTION_NODE: any; readonly ENTITY_REFERENCE_NODE: any; readonly ENTITY_NODE: any; readonly PROCESSING_INSTRUCTION_NODE: any; readonly COMMENT_NODE: any; readonly DOCUMENT_NODE: any; readonly DOCUMENT_TYPE_NODE: any; readonly DOCUMENT_FRAGMENT_NODE: any; readonly NOTATION_NODE: any; readonly DOCUMENT_POSITION_DISCONNECTED: any; readonly DOCUMENT_POSITION_PRECEDING: any; readonly DOCUMENT_POSITION_FOLLOWING: any; readonly DOCUMENT_POSITION_CONTAINS: any; readonly DOCUMENT_POSITION_CONTAINED_BY: any; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: any; dispatchEvent: any; ariaActiveDescendantElement: any; ariaAtomic: any; ariaAutoComplete: any; ariaBrailleLabel: any; ariaBrailleRoleDescription: any; ariaBus
```

----------------------------------------

TITLE: Package Configuration for ES Module (JSON)
DESCRIPTION: This package.json snippet configures the project root as an ES module by setting the 'type' field to 'module'. It also marks the package as private.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsGeneratedNameCollisions(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Declaring JSX Namespace in TypeScript
DESCRIPTION: Defines the JSX namespace with interfaces for Element, IntrinsicElements, ElementAttributesProperty, and IntrinsicAttributes. This provides TypeScript with information about JSX syntax and attributes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution12.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare module JSX {
	interface Element { }
	interface IntrinsicElements {
	}
	interface ElementAttributesProperty {
		props;
	}
	interface IntrinsicAttributes {
		ref?: string;
	}
}
```

----------------------------------------

TITLE: Package Configuration for ES Modules in JSON
DESCRIPTION: This package.json configuration sets the project to use ES modules by default with the "type": "module" field.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesTopLevelAwait(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Importing Named and Default Exports in TypeScript
DESCRIPTION: Shows how to import a default export and named exports from another module using TypeScript syntax. This snippet requires module file \'./a\' to exist. It imports a default export along with named constants and interfaces.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports(isolatedmodules=true).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import a, { b, c, D } from "./a";
```

----------------------------------------

TITLE: TypeScript Error Example: Property Access
DESCRIPTION: This snippet demonstrates a TypeScript error that occurs when trying to access a property that does not exist on a given type. The error is triggered because `HTMLElement` interface only defines `isDisabled` but not `xyxyxyx`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownSymbolOffContextualType1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare var document: Document;
    interface Document {
        getElementById(elementId: string): HTMLElement;
    }
    interface HTMLElement {
        isDisabled: boolean;
    }
    function getMaxWidth(elementNames: string[]) {
        var elements = elementNames.map(function (name) {
            return document.getElementById(name);
        });
        var enabled = elements.filter(function (e) {
            return !e.isDisabled;
        });
        var widths = enabled.map(function (e) {
            return e.xyxyxyx;  // error expected here
                     
        });
        var maxWidth = widths.reduce(function (a, b) {
            return a > b ? a : b;
        });
        return maxWidth;
    }
```

----------------------------------------

TITLE: Demonstrating TypeScript's Implicit Any Type Errors in Function Parameters
DESCRIPTION: This code shows multiple examples of TypeScript functions with parameters that lack explicit type annotations, causing TS7006 and TS7019 errors. It includes both error cases (parameters without types) and non-error cases (parameters with default values or explicit type annotations).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implicitAnyDeclareFunctionWithoutFormalType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// these should be errors
function foo(x) { };
function bar(x: number, y) { };  // error at "y"; no error at "x"
function func2(a, b, c) { };     // error at "a,b,c"
function func3(...args) { };     // error at "args" 
function func4(z= null, w= undefined) { };  // error at "z,w"

// these shouldn't be errors
function noError1(x= 3, y= 2) { };
function noError2(x: number, y: string) { };
```

----------------------------------------

TITLE: Handling Static Member Access Incorrectly in TypeScript Class
DESCRIPTION: This code defines a generic class 'List<T>' and demonstrates an error when attempting to call a static method 'Foo' using an instance of the class. The correct way to access the static method is demonstrated within a class method using 'List.Foo()'. There are no additional dependencies beyond TypeScript itself.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/staticOffOfInstance2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class List<T> {
    public Blah() {
        this.Foo(); // no error
             ~~~
        List.Foo();
    }
    public static Foo() { }
}
```

----------------------------------------

TITLE: Number vs Number Object Type Assignments
DESCRIPTION: Illustrates type incompatibility between primitive number and Number object types, highlighting TypeScript's type strictness
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/primitiveMembers.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var n = 0;
var N: Number;

n = N;  // should not work, as 'number' has a different brand
N = n; // should work
```

----------------------------------------

TITLE: Defining Circular Type M2 and M3
DESCRIPTION: Demonstrates a circular type reference between interface M2 and type alias M3, causing TypeScript compilation errors about recursive self-referencing types
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/circularBaseTypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type M<T> = { value: T };
interface M2 extends M<M3> {};
type M3 = M2[keyof M2];
```

----------------------------------------

TITLE: Assignment to Unknown
DESCRIPTION: This function demonstrates that any type can be assigned to a variable of type 'unknown'. This includes primitive types, objects, arrays, errors, 'any', 'never', and type variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownType1.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
    // Anything is assignable to unknown
    
    function f21<T>(pAny: any, pNever: never, pT: T) {
        let x: unknown;
        x = 123;
        x = "hello";
        x = [1, 2, 3];
        x = new Error();
        x = x;
        x = pAny;
        x = pNever;
        x = pT;
    }
```

----------------------------------------

TITLE: Nullable and Required Prop Type Validation
DESCRIPTION: Illustrates type checking for nullable and required props in React components, demonstrating how TypeScript enforces prop type constraints
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxLibraryManagedAttributes.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
const r = <BothWithSpecifiedGeneric foo="no" bar={null} baz={0} />; // bar is nullable/undefinable since it's not marked `isRequired`
const s = <BothWithSpecifiedGeneric foo="eh" bar="yeah" baz={null} />; // Error, baz is _not_ nullable/undefinable since it's marked `isRequired`
```

----------------------------------------

TITLE: Button Component Implementation
DESCRIPTION: Defines a basic React class component and functional component returning simple JSX elements
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty7.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class Button extends React.Component<any, any> {
    render() {
        return (<div>My Button</div>)
    }
}

function AnotherButton(p: any) {
    return <h1>Just Another Button</h1>;
}
```

----------------------------------------

TITLE: Defining IPromise and Promise Interfaces in TypeScript
DESCRIPTION: This code snippet defines two interfaces: IPromise and Promise, both of which include a generic `then` method that takes a callback function and returns a new promise with potentially different type parameters. The snippet also demonstrates a type error when trying to declare a variable with conflicting types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promiseIdentityWithConstraints.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export interface IPromise<T, V> {
    then<U extends T, W extends V>(callback: (x: T) => IPromise<U, W>): IPromise<U, W>;
}
export interface Promise<T, V> {
    then<U extends T, W extends V>(callback: (x: T) => Promise<U, W>): Promise<U, W>;
}

// Error because constraint V doesn't match
var x: IPromise<string, number>;
var x: Promise<string, boolean>;
    ~
!!! error TS2403: Subsequent variable declarations must have the same type.  Variable 'x' must be of type 'IPromise<string, number>', but here has type 'Promise<string, boolean>'.
!!! related TS6203 promiseIdentityWithConstraints.ts:9:5: 'x' was also declared here.
```

----------------------------------------

TITLE: package.json for ESM Module
DESCRIPTION: This snippet defines a `package.json` file for a module that should be treated as an ES module.  Setting the `type` field to `module` indicates that `.js` files in this package should be interpreted as ES modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsTopLevelAwait(module=nodenext).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "name": "package",
  "private": true,
  "type": "module"
}
```

----------------------------------------

TITLE: TypeScript Default Export (ESM)
DESCRIPTION: This TypeScript code snippet shows a default export within an 'index.ts' file, implicitly configured as an ES module. This file does not produce an error, likely because ES modules handle default exports differently, not requiring the '__importDefault' helper.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportHelpersCollisions3(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
// esm format file
export {default} from "fs";
```

----------------------------------------

TITLE: Package JSON Structure
DESCRIPTION: This snippet defines the structure of the 'package.json' file for a Node.js package named 'pkg'. It includes the package name, version, and export settings. This file is essential for defining module metadata and ensuring proper module resolution in JavaScript and TypeScript environments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionWithModule(module=commonjs,moduleresolution=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "exports": "./entrypoint.js"
}
```

----------------------------------------

TITLE: Defining Class with Accessor Properties in TypeScript
DESCRIPTION: This code snippet defines a class 'C1' with instance and static properties using the 'accessor' modifier. It generates compilation errors when targeting ECMAScript versions below 2015.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/autoAccessor3(target=es5).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C1 {
    accessor "w": any;
    accessor "x" = 1;
    static accessor "y": any;
    static accessor "z" = 2;
}
```

----------------------------------------

TITLE: Mixing Default and Specific Imports
DESCRIPTION: In this snippet, both a default export and a specific named export are imported from a module. It demonstrates how to alias or directly reference imported module elements and use them in TypeScript code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importsNotUsedAsValues_error.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
import Default, { A } from './a';
const a = A;
let b: Default;
console.log(a, b);
```

----------------------------------------

TITLE: String Literal Type Checking in TypeScript
DESCRIPTION: Demonstrates TypeScript's type checking system with string literals, interfaces, and union types. Shows various equality comparisons and resulting type errors when comparing incompatible types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/stringLiteralsWithEqualityChecks03.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Runnable {
    isRunning: boolean;
}

interface Refrigerator extends Runnable {
    makesFoodGoBrrr: boolean;
}

let x: string;
let y: "foo" | Refrigerator;

let b: boolean;
b = x === y;
b = "foo" === y
b = y === "foo";
b = "foo" === "bar";
b = "bar" === x;
b = x === "bar";
b = y === "bar";
b = "bar" === y;

b = x !== y;
b = "foo" !== y
b = y !== "foo";
b = "foo" !== "bar";
b = "bar" !== x;
b = x !== "bar";
b = y !== "bar";
b = "bar" !== y;
```

----------------------------------------

TITLE: Interface Assignment Compatibility Error in TypeScript
DESCRIPTION: Demonstrates a type error when attempting to assign an interface with a number property 'one' to an object type expecting 'one' to be an array. The code shows how TypeScript prevents incompatible type assignments between different shapes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability16.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module __test1__ {
    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
    export var __val__obj4 = obj4;
}
module __test2__ {
    export var obj = {one: <any[]>[1]};
    export var __val__obj = obj;
}
__test2__.__val__obj = __test1__.__val__obj4
```

----------------------------------------

TITLE: Defining Interfaces with Optional and Required Properties in TypeScript
DESCRIPTION: This TypeScript snippet defines two interfaces where one interface has an optional property and the other requires it. An error occurs when trying to assign an object implementing the first interface to a variable of the second interface's type. The module demonstrates type incompatibility due to optional and required property mismatches. No external dependencies are required, but knowledge of TypeScript's type system is assumed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability43.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
module __test1__ {
    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
    export var __val__obj4 = obj4;
}
module __test2__ {
    export                   interface interfaceTwo<T,U> { one: T; two: U; };   var obj2: interfaceTwo<number,string> = { one: 1, two: "a" };;
    export var __val__obj2 = obj2;
}
__test2__.__val__obj2 = __test1__.__val__obj4
```

----------------------------------------

TITLE: Reporting Type Definition Errors in TypeScript
DESCRIPTION: This snippet captures various errors indicating that TypeScript cannot find the type definition for a library named 'foo'. It suggests possible solutions such as adjusting the 'moduleResolution' option or adding aliases to the 'paths' option in the configuration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolutionModeTypeOnlyImport1(moduleresolution=classic).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
error TS2688: Cannot find type definition file for 'foo'.
  The file is in the program because:
    Entry point for implicit type library 'foo'
/app.ts(1,35): error TS2792: Cannot find module 'foo'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
/app.ts(2,34): error TS2792: Cannot find module 'foo'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
/app.ts(3,35): error TS2792: Cannot find module 'foo'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
```

----------------------------------------

TITLE: Interface Declarations with Optional and Required Methods
DESCRIPTION: Definition of four interfaces demonstrating variations of optional and required properties. Shows different combinations of method and number type properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/optionalPropertiesTest.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
interface i1 { M: () => void; };
interface i2 { M?: () => void; };
interface i3 { M: number; };
interface i4 { M?: number; };
```

----------------------------------------

TITLE: Using @ts-ignore with Colon Syntax in TypeScript
DESCRIPTION: This snippet demonstrates the use of @ts-ignore with a colon followed by additional commenting. It includes both valid and invalid type assignments that are ignored by TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ts-ignore.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
// @ts-ignore: with additional commenting
var invalidCommentedFancy: number = 'nope';

// @ts-ignore: with additional commenting
var validCommentedFancy: string = 'nope';
```

----------------------------------------

TITLE: Defining React Component Props Interface in TypeScript
DESCRIPTION: Defines an interface 'Prop' with two properties: 'a' of type number and 'b' of type string. This interface is used to type the props of a React component.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxReactComponentWithDefaultTypeParameter3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Prop {
    a: number,
    b: string
}
```

----------------------------------------

TITLE: Inferring Argument Type from Methods
DESCRIPTION: Defines a type `X3<T>` that infers the argument type `U` from methods `a` and `b` of type `T`. If `T` has both methods `a` and `b` with the same argument type `U`, then `X3<T>` resolves to `U`; otherwise, it resolves to `never`. It shows how to use it with `{}`, `{ a: (x: string) => void }`, `{ a: (x: string) => void, b: (x: string) => void }`, `{ a: (x: number) => void, b: (x: string) => void }`, and `{ a: (x: number) => void, b: () => void }`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypes1.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
    type X3<T> = T extends { a: (x: infer U) => void, b: (x: infer U) => void } ? U : never;
    
    type T50 = X3<{}>;  // never
    type T51 = X3<{ a: (x: string) => void }>;  // never
    type T52 = X3<{ a: (x: string) => void, b: (x: string) => void }>;  // string
    type T53 = X3<{ a: (x: number) => void, b: (x: string) => void }>;  // never
    type T54 = X3<{ a: (x: number) => void, b: () => void }>;  // number
```

----------------------------------------

TITLE: Demonstrating String vs string Type Assignment Error in TypeScript
DESCRIPTION: This code shows the type incompatibility between the primitive string type and the String object wrapper in TypeScript. The error occurs when assigning a String object to a primitive string variable, while assigning in the reverse direction is allowed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignFromStringInterface.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var x = '';
var a: String;
x = a;
a = x;
```

----------------------------------------

TITLE: Creating JSX elements with type errors in TypeScript
DESCRIPTION: This section creates several JSX elements using the previously defined components (`FunctionComponent`, `ClassComponent`, `MixedComponent`). Each element is designed to trigger a specific TypeScript error because of type incompatibilities between the component's return type or instance type and the expected JSX element interfaces.  This highlights common mistakes and enforces type safety.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxComponentTypeErrors.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
const elem1 = <FunctionComponent type="abc" />;
                   ~~~~~~~~~~~~~~~~~
!!! error TS2786: 'FunctionComponent' cannot be used as a JSX component.
!!! error TS2786:   Its return type '{ type: "abc" | undefined; }' is not a valid JSX element.
!!! error TS2786:     Types of property 'type' are incompatible.
!!! error TS2786:       Type '"abc" | undefined' is not assignable to type '"element"'.
!!! error TS2786:         Type 'undefined' is not assignable to type '"element"'.
const elem2 = <FunctionComponent<"abc"> />;
                   ~~~~~~~~~~~~~~~~~      
!!! error TS2786: 'FunctionComponent' cannot be used as a JSX component.
!!! error TS2786:   Its return type '{ type: "abc" | undefined; }' is not a valid JSX element.
!!! error TS2786:     Types of property 'type' are incompatible.
!!! error TS2786:       Type '"abc" | undefined' is not assignable to type '"element"'.
!!! error TS2786:         Type 'undefined' is not assignable to type '"element"'.
const elem3 = <ClassComponent />;
                   ~~~~~~~~~~~~~      
!!! error TS2786: 'ClassComponent' cannot be used as a JSX component.
!!! error TS2786:   Its instance type 'ClassComponent' is not a valid JSX element.
!!! error TS2786:     Types of property 'type' are incompatible.
!!! error TS2786:       Type 'string' is not assignable to type '"element-class"'.
const elem4 = <MixedComponent />;
                   ~~~~~~~~~~~~~      
!!! error TS2786: 'MixedComponent' cannot be used as a JSX component.
!!! error TS2786:   Its element type 'ClassComponent | { type: string | undefined; }' is not a valid JSX element.
!!! error TS2786:     Type 'ClassComponent' is not assignable to type 'Element | ElementClass | null'.
!!! error TS2786:       Type 'ClassComponent' is not assignable to type 'Element | ElementClass'.
!!! error TS2786:         Type 'ClassComponent' is not assignable to type 'ElementClass'.
!!! error TS2786:           Types of property 'type' are incompatible.
!!! error TS2786:             Type 'string' is not assignable to type '"element-class"'.
```

----------------------------------------

TITLE: Object Literal Declaration
DESCRIPTION: This snippet declares and initializes an object 'obj' with properties 'z' and 'q'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationStatements.sourcemap.txt#2025-04-21_snippet_19

LANGUAGE: javascript
CODE:
```
>>>    var obj = {
```

----------------------------------------

TITLE: Defining Drawable Interface in TypeScript
DESCRIPTION: This snippet defines the Drawable interface that requires a draw method returning a number. It can be implemented by classes that need drawable capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocImplements_interface_multiple.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Drawable {
    draw(): number;
};
```

----------------------------------------

TITLE: Invalid Interface Property Initialization in TypeScript
DESCRIPTION: Shows incorrect usage of property initialization within an interface declaration. TypeScript interfaces can only declare types and cannot contain initializers or actual values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/errorOnInitializerInInterfaceProperty.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Foo {
    bar: number = 5;
}
```

----------------------------------------

TITLE: Invalid Type Import without type-only syntax
DESCRIPTION: Shows an error when importing a type using regular import syntax when verbatimModuleSyntax is enabled. The import must use type-only import syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/verbatimModuleSyntaxNoElisionCJS.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import I = require("./a");
```

----------------------------------------

TITLE: Destructuring Nested Object with Defaults in TypeScript
DESCRIPTION: This snippet illustrates how to destructure a nested object (`skills`) and its properties (`primary`, `secondary`) while providing default values. It sets default values for the nested properties if they are missing, and a default value for the entire nested object if the parent object lacks the `skills` property. This pattern is used here in the initialization of a for loop, processing data from `getMultiRobot()`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_42

LANGUAGE: typescript
CODE:
```
for ({
    skills: {
        primary = "primary",
        secondary = "secondary"
    } = { primary: "none", secondary: "none" }
} =
     getMultiRobot
                  ()
) {
    // Loop body would go here, processing primary and secondary
}
```

----------------------------------------

TITLE: Type Predicate Function and Array Filtering (TypeScript)
DESCRIPTION: This snippet demonstrates a type predicate function `isUndef` that checks if a value is undefined.  It then uses this function to filter an array `e` containing numbers and undefined values. The resulting array `g` is intended to contain only undefined values, leveraging the type narrowing provided by the predicate function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeFromJSInitializer.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
/** @type {(v: unknown) => v is undefined} */
const isUndef = v => v === undefined;
const e = [1, undefined];

// should be undefined[]
const g = e.filter(isUndef);
```

----------------------------------------

TITLE: Importing and Using Modules in TypeScript
DESCRIPTION: This snippet imports an external module and defines its own variables, classes, and functions. It serves to illustrate how modules can interact via imports, allowing usage of definitions from another module. The snippet creates an instance of a class and exposes it through a function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootRelativePathModuleSubfolderSpecifyOutputFile/node/sourceRootRelativePathModuleSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import m1 = require("ref/m1");
export var a1 = 10;
export class c1 {
    public p1: number;
}

export var instance1 = new c1();
export function f1() {
    return instance1;
}

export var a2 = m1.m1_c1;
```

----------------------------------------

TITLE: Defining Generic Class with Number Constraint
DESCRIPTION: This code defines a generic class `C` with a type parameter `T` that extends `number`. It includes a property `x`, a getter `X`, and a method `foo`, all of which use the generic type `T`. The getter and method return `null` as a placeholder, and this part of the code serves as the base class for subsequent inheritance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedGenericClassWithAny.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    class C<T extends number> {
        x: T;
        get X(): T { return null; }
        foo(): T {
            return null;
        }
    }
```

----------------------------------------

TITLE: Mapped Type Definition in TypeScript
DESCRIPTION: This code defines a mapped type `Predicates` that transforms a type `TaggedRecord` into a type where each key maps to a predicate function. The predicate function takes a value of type `TaggedRecord[keyof TaggedRecord]` and returns a boolean indicating whether the value is of type `TaggedRecord[T]`. The purpose is to create a type that provides type guards for each property in a record.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_23

LANGUAGE: typescript
CODE:
```
    // # 21185
    type Predicates<TaggedRecord> = {
      [T in keyof TaggedRecord]: (variant: TaggedRecord[keyof TaggedRecord]) => variant is TaggedRecord[T]
    }
```

----------------------------------------

TITLE: Handling JSX Attribute Errors in TypeScript
DESCRIPTION: This code snippet demonstrates a common JSX syntax error found in TypeScript React applications, where an attribute is not assigned a value correctly. The example highlights the need for using curly braces or JSX elements when specifying attributes. It is expected that each attribute should be correctly assigned to a JSX element or wrapped with curly braces to avoid the TS1145 error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxAttributeInitializer(jsx=preserve).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare var React: any;

<div>
    <div attr=<div /> />
    <div attr=<div>foo</div> />
    <div attr=<><div>foo</div></> />
    <div attr= />
               ~
!!! error TS1145: '{' or JSX element expected.
</div>
```

----------------------------------------

TITLE: Using Type Guards with Foo Type
DESCRIPTION: This snippet showcases how type guards can be used with the `Foo` type.  The function `f30` uses conditional checks on `kind` and `isA` to narrow down the types within the conditional branches, demonstrating how TypeScript infers the types of `kind` and `isA` based on the conditions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
    function f30({ kind, isA }: Foo) {
        if (kind === 'A') {
            isA;   // true
        }
        if (kind === 'B') {
            isA;   // false
        }
        if (kind === 'C') {
            isA;   // false
        }
        if (isA) {
            kind;  // 'A'
        }
        else {
            kind;  // 'B' | 'C'
        }
    }

```

----------------------------------------

TITLE: Declaring Method Decorator and Class with Decorator Usage in TypeScript
DESCRIPTION: This snippet declares a function 'dec' that acts as a method decorator. It demonstrates TypeScript's type checks by showing an error when the decorator is applied to a class method 'method' in class 'C'. The error highlights a type mismatch where the class 'C' does not meet the requirements for a Function type. It is essential for understanding decorator signatures in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/decoratorOnClassMethod10.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare function dec(target: Function, paramIndex: number): void;

class C {
    @dec method() {}
    ~~~
}
```

----------------------------------------

TITLE: Defining 'package.json' Exports and Types for Node.js Modules
DESCRIPTION: This JSON snippet outlines the 'package.json' configuration for a Node.js package called 'exports-and-types-versions'. It demonstrates how to define module exports, type declarations, and typesVersions for different TypeScript versions. Key dependencies include proper structuring of export paths corresponding to JavaScript and TypeScript files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsBlocksTypesVersions(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "name": "exports-and-types-versions",
  "version": "1.0.0",
  "exports": {
    "./foo": "./dist/foo.js",
    "./yep": {
      "types": "./types/foo.d.ts",
      "default": "./dist/foo.js"
    },
    "./versioned-yep": {
      "types@>=4": "./types/foo.d.ts"
    },
    "./versioned-nah": {
      "types@<4": "./types/foo.d.ts"
    }
  },
  "typesVersions": {
    "*": {
      "foo": ["./types/foo.d.ts"],
      "nope": ["./types/foo.d.ts"],
      "versioned-nah": ["./types/foo.d.ts"]
    }
  }
}
```

----------------------------------------

TITLE: Simple JSX Component Definition in TypeScript
DESCRIPTION: This code defines a simple class component `A` with a `view` method that returns an array of JSX elements. The component uses `<meta>` tags with a static content and one with dynamically accessed content using optional chaining and non-null assertion.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxFactoryAndReactNamespace.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import { Element} from './Element';

let c: {
	a?: {
		b: string
	}
};

class A {
	view() {
		return [
			<meta content="helloworld"></meta>,
			<meta content={c.a!.b}></meta>
		];
	}
}
```

----------------------------------------

TITLE: Project Configuration for ESM
DESCRIPTION: This package.json file configures the project to use ECMAScript modules by setting the 'type' field to 'module'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesTripleSlashReferenceModeOverride2(module=nodenext).errors.txt#2025-04-21_snippet_4

LANGUAGE: JSON
CODE:
```
{
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: TypeScript Function Parameter Type Checking Examples
DESCRIPTION: Collection of TypeScript function declarations demonstrating various parameter type checking scenarios, including implicit 'any' errors, rest parameters, and arrow functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyParametersInBareFunctions.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// No implicit-'any' errors.
function f1(): void { }

// Implicit-'any' error for x.
function f2(x): void { }

// No implicit-'any' errors.
function f3(x: any): void { }

// Implicit-'any' errors for x, y, and z.
function f4(x, y, z): void { }

// Implicit-'any' errors for x, and z.
function f5(x, y: any, z): void { }

// Implicit-'any[]' error for r.
function f6(...r): void { }

// Implicit-'any'/'any[]' errors for x, r.
function f7(x, ...r): void { }

// Implicit-'any' errors for x1, y2, x3, and y3.
function f8(x1, y1: number): any;
function f8(x2: string, y2): any;
function f8(x3, y3): any { } 

// No implicit-'any' errors.
var f9 = () => "";

// Implicit-'any' errors for x.
var f10 = (x) => "";

// Implicit-'any' errors for x, y, and z.
var f11 = (x, y, z) => "";

// Implicit-'any' errors for x and z.
var f12 = (x, y: any, z) => "";

// Implicit-'any[]' error for r.
var f13 = (...r) => "";

// Implicit-'any'/'any[]' errors for x, r.
var f14 = (x, ...r) => "";
```

----------------------------------------

TITLE: Implementing Property Value Conformance Checking in TypeScript
DESCRIPTION: This code demonstrates TypeScript's property value conformance checking. It shows type declarations, property access validation, and the 'satisfies' operator. The code illustrates how TypeScript detects missing properties and type mismatches while ensuring objects conform to expected interfaces.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeSatisfaction_propertyValueConformance2(nouncheckedindexedaccess=false).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type Facts = { [key: string]: boolean };
declare function checkTruths(x: Facts): void;
declare function checkM(x: { m: boolean }): void;
const x = {
    m: true
};

// Should be OK
checkTruths(x);
// Should be OK
checkM(x);
console.log(x.z);
              ~
!!! error TS2339: Property 'z' does not exist on type '{ m: boolean; }'.
// Should be OK under --noUncheckedIndexedAccess
const m: boolean = x.m;

// Should be 'm'
type M = keyof typeof x;

// Should be able to detect a failure here
const x2 = {
    m: true,
    s: "false"
    ~
!!! error TS2322: Type 'string' is not assignable to type 'boolean'.
!!! related TS6501 typeSatisfaction_propertyValueConformance2.ts:1:16: The expected type comes from this index signature.
} satisfies Facts;
```

----------------------------------------

TITLE: Invalid Type Assignments in TypeScript
DESCRIPTION: Demonstrates various type checking errors in TypeScript where values are assigned to incompatible types. Includes examples of invalid assignments to primitive types, classes, interfaces, namespaces, generic types, and enums.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/invalidStringAssignments.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var x = '';

var a: boolean = x;
var b: number = x;
var c: void = x;
var d: typeof undefined = x;

class C { foo: string; }
var e: C = x;

interface I { bar: string; }
var f: I = x;

var g: { baz: string } = 1;
var g2: { 0: number } = 1;

module M { export var x = 1; }
M = x;

function i<T>(a: T) {
    a = x;
}
i = x;

enum E { A }
var j: E = x;
```

----------------------------------------

TITLE: Accessing Non-existent Property on Promise<number> in TypeScript
DESCRIPTION: This code snippet defines a function that takes a Promise<number> as an argument and attempts to call the 'toLowerCase' method on it. This results in a TypeScript compilation error as 'toLowerCase' does not exist on Promise<number>.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nonexistentPropertyUnavailableOnPromisedType.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function f(x: Promise<number>) {
    x.toLowerCase();
}
```

----------------------------------------

TITLE: Export Const Variable Before Declaration
DESCRIPTION: Example showing TypeScript errors when trying to export a const variable before it is declared and assigned. Demonstrates TS2448 and TS2454 errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportBinding.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export { x }
export { x as xx }
export default x;

const x = 'x'

export { Y as Z }
class Y {}
```

----------------------------------------

TITLE: Function Type Compatibility Error Cases
DESCRIPTION: Shows type error scenarios where function signatures do not match the expected callback type, including multiple arguments and type mismatches.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCallWithFunctionTypedArguments5.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var arg = { cb: <T>(x: T) => '' };
var r = foo(arg); // {}

// more args not allowed
var r2 = foo({ cb: <T>(x: T, y: T) => '' }); // error

var r3 = foo({ cb: (x: string, y: number) => '' }); // error
```

----------------------------------------

TITLE: Defining and Using Classes in TypeScript
DESCRIPTION: The snippet demonstrates a TypeScript class declaration where class C1 extends class C2. It highlights an error where 'C2' is used before being declared, resulting in a TS2449 error. C2 is declared afterwards with an index signature using symbols and a method returning an object. Attention is needed to ensure class ordering to prevent usage before declaration errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/symbolProperty33.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C1 extends C2 {
    [Symbol.toStringTag]() {
        return { x: "" };
    }
}
class C2 {
    [s: symbol]: () => { x: string };
}
```

----------------------------------------

TITLE: Assigning Object with TypeScript Annotations in JavaScript
DESCRIPTION: This snippet defines a typedef using JSDoc to specify a map with string keys and boolean values, then attempts to satisfy this typedef with an object containing a string value. The aim is to demonstrate TypeScript's ability to detect type mismatches, helping developers catch errors early. The key parameters include map keys like 'm' and 's' with the expected boolean values. The mismatch generates an error, illustrating the type enforcement between JavaScript and TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocSatisfiesTag8.errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
/** @typedef {Object.<string, boolean>} Facts */

// Should be able to detect a failure here
const x = /** @satisfies {Facts} */ ({
    m: true,
    s: "false"
})
```

----------------------------------------

TITLE: Basic Type Definitions and Filtering in TypeScript
DESCRIPTION: Defines utility types Methods<T> and Filter<T> that filter object properties based on whether they are functions, and Modify<T> that transforms property names.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeAsClauseRelationships.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type Methods<T> = { [P in keyof T as T[P] extends Function ? P : never]: T[P] };
type H<T> = T[keyof Methods<T>];
type Filter<T> = { [P in keyof T as T[P] extends Function ? P : never]: T[P] };
type Modify<T> = { [P in keyof T as P extends string? `bool${P}`: P]: T[P] };
```

----------------------------------------

TITLE: Defining Stateless Component with Props Checking - TypeScript
DESCRIPTION: This snippet defines a stateless functional component 'TestComponent' that expects 'TestProps' as its properties. The interface 'ITestProps' specifies permissible properties, while the usage of 'INVALID_PROP_NAME' demonstrates a type error that arises from excess property checking.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/deepExcessPropertyCheckingWhenTargetIsIntersection.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface StatelessComponent<P = {}> {
  (props: P & { children?: number }, context?: any): null;
}
 
const TestComponent: StatelessComponent<TestProps> = (props) => {
  return null;
}
 
interface ITestProps {
  ariaLabel?: string;
}
 
interface NestedProp<TProps> {
  props: TProps;
}
 
interface TestProps {
  icon: NestedProp<ITestProps>;
}
 
TestComponent({icon: { props: { INVALID_PROP_NAME: 'share', ariaLabel: 'test label' } }});
                                    ~~~~~~~~~~~~~~~~~
!!! error TS2353: Object literal may only specify known properties, and 'INVALID_PROP_NAME' does not exist in type 'ITestProps'.
!!! related TS6500 deepExcessPropertyCheckingWhenTargetIsIntersection.ts:14:3: The expected type comes from property 'props' which is declared here on type 'NestedProp<ITestProps>'
```

----------------------------------------

TITLE: TypeScript Type Definition for Element Properties
DESCRIPTION: This code snippet defines a TypeScript type or interface that includes numerous ARIA attributes (like ariaAutoComplete, ariaChecked, ariaLabel) and standard DOM element properties and methods (like classList, id, innerHTML, querySelector, appendChild). It provides type safety when interacting with element properties in a TypeScript project.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRecursiveInference.errors.txt#_snippet_20

LANGUAGE: TypeScript
CODE:
```
 any; ariaAutoComplete: any; ariaBrailleLabel: any; ariaBrailleRoleDescription: any; ariaBusy: any; ariaChecked: any; ariaColCount: any; ariaColIndex: any; ariaColIndexText: any; ariaColSpan: any; ariaControlsElements: any; ariaCurrent: any; ariaDescribedByElements: any; ariaDescription: any; ariaDetailsElements: any; ariaDisabled: any; ariaErrorMessageElements: any; ariaExpanded: any; ariaFlowToElements: any; ariaHasPopup: any; ariaHidden: any; ariaInvalid: any; ariaKeyShortcuts: any; ariaLabel: any; ariaLabelledByElements: any; ariaLevel: any; ariaLive: any; ariaModal: any; ariaMultiLine: any; ariaMultiSelectable: any; ariaOrientation: any; ariaOwnsElements: any; ariaPlaceholder: any; ariaPosInSet: any; ariaPressed: any; ariaReadOnly: any; ariaRelevant: any; ariaRequired: any; ariaRoleDescription: any; ariaRowCount: any; ariaRowIndex: any; ariaRowIndexText: any; ariaRowSpan: any; ariaSelected: any; ariaSetSize: any; ariaSort: any; ariaValueMax: any; ariaValueMin: any; ariaValueNow: any; ariaValueText: any; role: any; animate: any; getAnimations: any; after: any; before: any; remove: any; replaceWith: any; readonly nextElementSibling: any; readonly previousElementSibling: any; readonly childElementCount: any; readonly children: any; readonly firstElementChild: any; readonly lastElementChild: any; append: any; prepend: any; querySelector: any; querySelectorAll: any; replaceChildren: any; readonly assignedSlot: any; }[]; ariaCurrent: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; ariaDescribedByElements: readonly { readonly attributes: any; classList: any; className: any; readonly clientHeight: any; readonly clientLeft: any; readonly clientTop: any; readonly clientWidth: any; readonly currentCSSZoom: any; id: any; innerHTML: any; readonly localName: any; readonly namespaceURI: any; onfullscreenchange: any; onfullscreenerror: any; outerHTML: any; readonly ownerDocument: any; part: any; readonly prefix: any; readonly scrollHeight: any; scrollLeft: any; scrollTop: any; readonly scrollWidth: any; readonly shadowRoot: any; slot: any; readonly tagName: any; attachShadow: any; checkVisibility: any; closest: any; computedStyleMap: any; getAttribute: any; getAttributeNS: any; getAttributeNames: any; getAttributeNode: any; getAttributeNodeNS: any; getBoundingClientRect: any; getClientRects: any; getElementsByClassName: any; getElementsByTagName: any; getElementsByTagNameNS: any; getHTML: any; hasAttribute: any; hasAttributeNS: any; hasAttributes: any; hasPointerCapture: any; insertAdjacentElement: any; insertAdjacentHTML: any; insertAdjacentText: any; matches: any; releasePointerCapture: any; removeAttribute: any; removeAttributeNS: any; removeAttributeNode: any; requestFullscreen: any; requestPointerLock: any; scroll: any; scrollBy: any; scrollIntoView: any; scrollTo: any; setAttribute: any; setAttributeNS: any; setAttributeNode: any; setAttributeNodeNS: any; setHTMLUnsafe: any; setPointerCapture: any; toggleAttribute: any; webkitMatchesSelector: any; addEventListener: any; removeEventListener: any; readonly baseURI: any; readonly childNodes: any; readonly firstChild: any; readonly isConnected: any; readonly lastChild: any; readonly nextSibling: any; readonly nodeName: any; readonly nodeType: any; nodeValue: any; readonly parentElement: any; readonly parentNode: any; readonly previousSibling: any; textContent: any; appendChild: any; cloneNode: any; compareDocumentPosition: any; contains: any; getRootNode: any; hasChildNodes: any; insertBefore: any; isDefaultNamespace: any; isEqualNode: any; isSameNode: any; lookupNamespaceURI: any; lookupPrefix: any; normalize: any; removeChild: any; replaceChild: any; readonly ELEMENT_NODE: any; readonly ATTRIBUTE_NODE: any; readonly TEXT_NODE: any; readonly CDATA_SECTION_NODE: any; readonly ENTITY_REFERENCE_NODE: any; readonly ENTITY_NODE: any; readonly PROCESSING_INSTRUCTION_NODE: any; readonly COMMENT_NODE: any; readonly DOCUMENT_NODE: any; readonly DOCUMENT_TYPE_NODE: any; readonly DOCUMENT_FRAGMENT_NODE: any; readonly NOTATION_NODE: any; readonly DOCUMENT_POSITION_DISCONNECTED: any; readonly DOCUMENT_POSITION_PRECEDING: any; readonly DOCUMENT_POSITION_FOLLOWING: any; readonly DOCUMENT_POSITION_CONTAINS: any; readonly DOCUMENT_POSITION_CONTAINED_BY: any; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: any; dispatchEvent: any; ariaActiveDescendantElement: any; ariaAtomic: any; ariaAutoComplete: any; ariaBrailleLabel: a
```

----------------------------------------

TITLE: ESM Import in JavaScript Module
DESCRIPTION: ES Module format file showing correct import syntax for package reference
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeAllowJsPackageSelfName(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
// esm format file
import * as self from "package";
self;
```

----------------------------------------

TITLE: Configuring ECMAScript Modules in package.json
DESCRIPTION: Sets the 'type' field to 'module' in package.json to indicate the use of ECMAScript modules in the project.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/impliedNodeFormatEmit3(module=esnext).errors.txt#2025-04-21_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "type": "module"
}
```

----------------------------------------

TITLE: Import Error in TypeScript Files
DESCRIPTION: Code snippets from two different TypeScript files, both trying to import from a non-existent module 'foo', causing TS2792 errors. The compiler suggests configuring 'moduleResolution' or 'paths' options.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/cachedModuleResolution8.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import {x} from "foo";
```

----------------------------------------

TITLE: Importing Dual Package in CommonJS TypeScript
DESCRIPTION: Attempt to import both ESM and CommonJS exports in a CommonJS TypeScript file (.cts), resulting in an error for the 'esm' import.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerNodeModules1(module=esnext).errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import { esm, cjs } from "dual";
```

----------------------------------------

TITLE: Exporting Constants in TypeScript
DESCRIPTION: Exports two constant values 'a' and 'b' from a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace3(module=system).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const a = 1;
export const b = 2;
```

----------------------------------------

TITLE: Implementing a Generic List Class in TypeScript
DESCRIPTION: Defines a generic list class `MyList` which can store any type of data. It includes a `clone` method to create a new instance of the list with the same size. The snippet showcases the issue encountered when attempting to assign cloned lists with mismatched generic types, highlighting TypeScript's type safety.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCloneReturnTypes2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class MyList<T> {
    public size: number;
    public data: T[];
    constructor(n: number) {
        this.size = n;
        this.data = new Array<T>(this.size);
    }
    public clone() {
        return new MyList<T>(this.size);
    }
}
var a: MyList<string>;
var b: MyList<any> = a.clone(); // ok
var c: MyList<string> = a.clone(); // bug was there was an error on this line
var d: MyList<number> = a.clone(); // error
```

----------------------------------------

TITLE: Testing let variable capture in nested scopes in for loops in TypeScript
DESCRIPTION: Demonstrates how let variables are captured in for loops with nested scopes. The function declares a let variable y in the loop initialization and a let variable x in the loop body, then creates closures referencing both.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop5.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
function foo8(x) {
    for (let y = 0; y < 1; ++y) {
        let x = 1;
        var v = x;
        (function() { return x + y + v });
        (() => x + y + v);
        if (x == 1) {
            return;
        }
    }
    
    use(v);
}
```

----------------------------------------

TITLE: Correct Usage of Custom JSX Elements in TypeScript
DESCRIPTION: This snippet demonstrates the correct usage of the custom JSX elements 'test1' and 'test2', adhering to the type definitions specified in the JSX module declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution6.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
// OK
<test1 n />;
<test1 n={false} />;
<test2 n />;
```

----------------------------------------

TITLE: Defining a Class with Getters and Setters - TypeScript
DESCRIPTION: This snippet shows the definition of a class named MyClass, which includes a getter method to retrieve a constant value and a setter method that does not perform any operation. The code emphasizes property definitions and demonstrates using the 'public' access modifier.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/properties.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class MyClass
{
    public get Count(): number
    {
        return 42;
    }

    public set Count(value: number)
    {
        //
    }
}
```

----------------------------------------

TITLE: Type-Only Re-Export in TypeScript
DESCRIPTION: Re-exports class 'A' from './a' using the type-only export syntax, which means it can only be used as a type and not as a value in importing files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDeclaration_moduleSpecifier.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export type { A } from './a';
```

----------------------------------------

TITLE: Generic Function Type Parameter Error Cases
DESCRIPTION: Demonstrates various error cases when working with generic functions in TypeScript, including providing type arguments to function calls incorrectly and type compatibility issues. Shows both valid and invalid usage patterns of generic function parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeArgumentsOnFunctionsWithNoTypeParameters.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo<T, U>(f: (v: T) => U) {
    var r1 = f<number>(1);
    var r2 = f(1);
    var r3 = f<any>(null);
    var r4 = f(null);
}
```

----------------------------------------

TITLE: Abstract Class Instantiation Error in TypeScript Module
DESCRIPTION: Demonstrates a TypeScript error when trying to create an instance of an abstract class defined in a module. The error occurs when trying to instantiate class M.A directly, while instantiating M.B (which extends the abstract class) is allowed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classAbstractInAModule.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module M {
    export abstract class A {}
    export class B extends A {}
}

new M.A;
new M.B;
```

----------------------------------------

TITLE: Accessing Base Class Properties with Super in TypeScript
DESCRIPTION: This snippet defines two classes, 'MyBase' and 'MyDerived'. 'MyDerived' attempts to access various properties and methods of 'MyBase' using the 'super' keyword. It illustrates proper use of 'super' for public and protected methods and highlights errors when attempting to access private members or non-method properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/superPropertyAccess.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    class MyBase {
        m1(a: string) { return a; }
        private p1() { }
        m2: () => void = function () { }
        d1: number = 42;
        private d2: number = 42;
        get value() {return 0 }
        set value(v: number) { }
    }
    
    
    class MyDerived extends MyBase {
    
        foo() {
            super.m1("hi");                                     // Should be allowed, method on base prototype
    
            var l2 = super.m1.bind(this);                       // Should be allowed, can access properties as well as invoke
    
            var x: (a: string) => string = super.m1;            // Should be allowed, can assign to var with compatible signature
    
            super.m2.bind(this);                                // Should error, instance property, not a public instance member function
                  ~~
!!! error TS2340: Only public and protected methods of the base class are accessible via the 'super' keyword.
    
            super.p1();                                         // Should error, private not public instance member function
                  ~~
!!! error TS2341: Property 'p1' is private and only accessible within class 'MyBase'.
    
            var l1 = super.d1;                                  // Should error, instance data property not a public instance member function
                           ~~
!!! error TS2340: Only public and protected methods of the base class are accessible via the 'super' keyword.
    
            var l1 = super.d2;                                  // Should error, instance data property not a public instance member function
                           ~~
!!! error TS2340: Only public and protected methods of the base class are accessible via the 'super' keyword.
    
            super.m1 = function (a: string) { return ""; };     // Should be allowed, we will not restrict assignment
    
            super.value = 0;                                    // Should error, instance data property not a public instance member function
                  ~~~~~
!!! error TS2340: Only public and protected methods of the base class are accessible via the 'super' keyword.
            
            var z = super.value;                                // Should error, instance data property not a public instance member function
                          ~~~~~
!!! error TS2340: Only public and protected methods of the base class are accessible via the 'super' keyword.
        }
    }
```

----------------------------------------

TITLE: TypeScript Enum and Object Index Access Examples
DESCRIPTION: Demonstrates various scenarios of enum and object index access in TypeScript, including proper and improper usage patterns that trigger type checking errors. Shows enum access, object property access, and generic map implementation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyIndexingSuppressed.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
enum MyEmusEnum {
    emu
}

// Should be okay; should be a string.
var strRepresentation1 = MyEmusEnum[0]

// Should be okay; should be a string.
var strRepresentation2 = MyEmusEnum[MyEmusEnum.emu]

// Should be okay, as we suppress implicit 'any' property access checks
var strRepresentation3 = MyEmusEnum["monehh"];

// Should be okay; should be a MyEmusEnum
var strRepresentation4 = MyEmusEnum["emu"];


// Should be okay, as we suppress implicit 'any' property access checks
var x = {}["hi"];

// Should be okay, as we suppress implicit 'any' property access checks
var y = {}[10];

var hi: any = "hi";

var emptyObj = {};

// Should be okay, as we suppress implicit 'any' property access checks
var z1 = emptyObj[hi];
var z2 = (<any>emptyObj)[hi];

interface MyMap<T> {
    [key: string]: T;
}

var m: MyMap<number> = {
    "0": 0,
    "1": 1,
    "2": 2,
    "Okay that's enough for today.": NaN
};

var mResult1 = m[MyEmusEnum.emu];
var mResult2 = m[MyEmusEnum[MyEmusEnum.emu]];
var mResult3 = m[hi];
```

----------------------------------------

TITLE: Defeating Type Guards in TypeScript
DESCRIPTION: This snippet includes functions that demonstrate how type guards can be defeated by code that modifies the variable's type. The `foo`, `foo2`, and `foo3` functions use type guards to determine the type of a variable, but within these functions, operations or functions change the type, leading to potential type mismatches and errors. Key parameters include 'x' with a union type of number or string. The main limitation is that type guards can be bypassed by reassignment, leading to runtime type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardsDefeat.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo(x: number | string) {
    function f() {
        x = 10;
    }
    if (typeof x === "string") {
        f();
        return x.length; // string
    }
    else {
        return x++; // number
    }
}
```

LANGUAGE: typescript
CODE:
```
function foo2(x: number | string) {
    if (typeof x === "string") {
        return x.length; // string
    }
    else {
        var f = function () {
            return x * x;
                   ~
!!! error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
                       ~
!!! error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
        };
    }
    x = "hello";
    f();
}
```

LANGUAGE: typescript
CODE:
```
function foo3(x: number | string) {
    if (typeof x === "string") {
        return x.length; // string
    }
    else {
        var f = () => x * x;
                      ~
!!! error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
                          ~
!!! error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
    }
    x = "hello";
    f();
}
```

----------------------------------------

TITLE: Destructuring Robot Arrays - Simple Pattern
DESCRIPTION: Demonstrates basic array destructuring to extract individual elements from the robot arrays. Extracts the skill array from multiRobotA and the name from multiRobotB.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
var skillA = multiRobotA[1];\nvar nameMB = multiRobotB[0];
```

----------------------------------------

TITLE: Destructuring Nested Object with Defaults in For Loop (TS)
DESCRIPTION: Demonstrates destructuring a nested 'skills' object from 'multiRobot'. It extracts 'primary' and 'secondary' properties, providing default string values if they are missing. It also provides a default object '{ primary: "none", secondary: "none" }' for the 'skills' property itself if 'multiRobot.skills' is undefined or null. This pattern is shown within the initialization part of a for loop.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_38

LANGUAGE: typescript
CODE:
```
for ({
    skills: {
        primary = "primary",
        secondary = "secondary"
    } = { primary: "none", secondary: "none" }
} =
     multiRobot
```

----------------------------------------

TITLE: Importing FS Module in ESM Format - TypeScript
DESCRIPTION: This snippet demonstrates the import of the 'fs' module using ECMAScript Module (ESM) syntax without errors. It includes both default and namespace imports of the 'fs' module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportHelpersCollisions(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
// esm format file
import {default as _fs} from "fs";
_fs.readFile;
import * as fs from "fs";
fs.readFile;
```

----------------------------------------

TITLE: DOM Element and ARIA Type Definitions - TypeScript
DESCRIPTION: This snippet provides a portion of the TypeScript type definitions for standard DOM element properties, methods, and ARIA attributes. It illustrates how these browser APIs are represented in the TypeScript type system, showing available properties like `ariaColIndex`, `ariaControlsElements`, `classList`, `id`, `innerHTML`, `tagName`, and methods like `addEventListener`, `removeEventListener`, `appendChild`, `cloneNode`, etc.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRecursiveInference.errors.txt#_snippet_19

LANGUAGE: TypeScript
CODE:
```
 normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; ariaColIndex: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; ariaColIndexText: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; ariaColSpan: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; ariaControlsElements: readonly { readonly attributes: any; classList: any; className: any; readonly clientHeight: any; readonly clientLeft: any; readonly clientTop: any; readonly clientWidth: any; readonly currentCSSZoom: any; id: any; innerHTML: any; readonly localName: any; readonly namespaceURI: any; onfullscreenchange: any; onfullscreenerror: any; outerHTML: any; readonly ownerDocument: any; part: any; readonly prefix: any; readonly scrollHeight: any; scrollLeft: any; scrollTop: any; readonly scrollWidth: any; readonly shadowRoot: any; slot: any; readonly tagName: any; attachShadow: any; checkVisibility: any; closest: any; computedStyleMap: any; getAttribute: any; getAttributeNS: any; getAttributeNames: any; getAttributeNode: any; getAttributeNodeNS: any; getBoundingClientRect: any; getClientRects: any; getElementsByClassName: any; getElementsByTagName: any; getElementsByTagNameNS: any; getHTML: any; hasAttribute: any; hasAttributeNS: any; hasAttributes: any; hasPointerCapture: any; insertAdjacentElement: any; insertAdjacentHTML: any; insertAdjacentText: any; matches: any; releasePointerCapture: any; removeAttribute: any; removeAttributeNS: any; removeAttributeNode: any; requestFullscreen: any; requestPointerLock: any; scroll: any; scrollBy: any; scrollIntoView: any; scrollTo: any; setAttribute: any; setAttributeNS: any; setAttributeNode: any; setAttributeNodeNS: any; setHTMLUnsafe: any; setPointerCapture: any; toggleAttribute: any; webkitMatchesSelector: any; addEventListener: any; removeEventListener: any; readonly baseURI: any; readonly childNodes: any; readonly firstChild: any; readonly isConnected: any; readonly lastChild: any; readonly nextSibling: any; readonly nodeName: any; readonly nodeType: any; nodeValue: any; readonly parentElement: any; readonly parentNode: any; readonly previousSibling: any; textContent: any; appendChild: any; cloneNode: any; compareDocumentPosition: any; contains: any; getRootNode: any; hasChildNodes: any; insertBefore: any; isDefaultNamespace: any; isEqualNode: any; isSameNode: any; lookupNamespaceURI: any; lookupPrefix: any; normalize: any; removeChild: any; replaceChild: any; readonly ELEMENT_NODE: any; readonly ATTRIBUTE_NODE: any; readonly TEXT_NODE: any; readonly CDATA_SECTION_NODE: any; readonly ENTITY_REFERENCE_NODE: any; readonly ENTITY_NODE: any; readonly PROCESSING_INSTRUCTION_NODE: any; readonly COMMENT_NODE: any; readonly DOCUMENT_NODE: any; readonly DOCUMENT_TYPE_NODE: any; readonly DOCUMENT_FRAGMENT_NODE: any; readonly NOTATION_NODE: any; readonly DOCUMENT_POSITION_DISCONNECTED: any; readonly DOCUMENT_POSITION_PRECEDING: any; readonly DOCUMENT_POSITION_FOLLOWING: any; readonly DOCUMENT_POSITION_CONTAINS: any; readonly DOCUMENT_POSITION_CONTAINED_BY: any; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: any; dispatchEvent: any; ariaActiveDescendantElement: any; ariaAtomic:
```

----------------------------------------

TITLE: TypeScript JSON Import
DESCRIPTION: This TypeScript code imports a JSON file (`b.json`) and uses its content. It demonstrates how TypeScript handles JSON imports and the potential for type checking.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/requireOfJsonFileWithComputedPropertyName.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import b1 = require('./b.json');
let x = b1;
import b2 = require('./b.json');
if (x) {
    x = b2;
}
```

----------------------------------------

TITLE: Package Configuration
DESCRIPTION: Package.json configuration specifying ES Module format and exports configuration
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeAllowJsPackageSelfName(module=node18).errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module",
    "exports": "./index.js"
}
```

----------------------------------------

TITLE: Main Package.json Configuration with ESM Type
DESCRIPTION: Package.json file for the main project that defines it as an ECMAScript module using the 'type': 'module' setting.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExportsExclude(module=node16).errors.txt#2025-04-21_snippet_10

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Configuring Package as ESM in package.json
DESCRIPTION: This snippet shows a package.json configuration that sets the package type to 'module', indicating it uses ECMAScript modules (ESM) format.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportAssignment(module=nodenext).errors.txt#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Defining Shape Interfaces with Discriminant
DESCRIPTION: Creates interfaces for different shape types with a common discriminant property 'kind' to enable type narrowing
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/discriminatedUnionTypes1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Square {
    kind: "square";
    size: number;
}

interface Rectangle {
    kind: "rectangle";
    width: number;
    height: number;
}

interface Circle {
    kind: "circle";
    radius: number;
}

type Shape = Square | Rectangle | Circle;
```

----------------------------------------

TITLE: Declaring Function with IFoo Return Type in TypeScript
DESCRIPTION: This snippet declares a variable 'c3t4' as a function that returns an object of type IFoo. The function is an arrow function that returns an empty object cast as IFoo.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
var c3t4: () => IFoo = function() { return <IFoo>({}) };
```

----------------------------------------

TITLE: Strict TypeScript Configuration
DESCRIPTION: Configuration file enabling strict TypeScript compiler options.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsconfigExtendsPackageJsonExportsWildcard.errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "strict": true
    }
}
```

----------------------------------------

TITLE: Incorrect Usage of Type-Only Import in TypeScript
DESCRIPTION: Attempts to use 'A' imported from './b' as a constructor, which fails because 'A' was exported as a type-only export and cannot be used as a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDeclaration_moduleSpecifier.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { A } from './b';
declare const a: A;
new A();
```

----------------------------------------

TITLE: Using Object Spread for Props in React
DESCRIPTION: This snippet utilizes an object to spread props into the 'Comp' component. The object 'o' contains the 'children' prop. This approach conforms to TypeScript's expected types and demonstrates dynamic prop assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty2.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
let o = {
     children:'Random'
}
let k1 =
        <Comp a={10} b='hi' {...o} >
            hi hi hi!
        </Comp>;
```

----------------------------------------

TITLE: Exporting Variables and Classes in TypeScript
DESCRIPTION: This snippet defines and exports a variable and a class from a TypeScript module. It allows other modules to import the defined entities for use, demonstrating the export functionality in TypeScript. The exported class includes a property that can be utilized in other parts of the application.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootRelativePathModuleSubfolderSpecifyOutputFile/node/sourceRootRelativePathModuleSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Demonstrating Literal Type Errors and Usage in TypeScript
DESCRIPTION: This code snippet shows various literal type errors and usage examples in TypeScript. It includes errors for null and undefined operations, octal literal usage, and demonstrates correct usage of boolean, number, string, and regular expression literals.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/literals.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
//typeof null is Null
//typeof true is Boolean
//typeof false is Boolean
//typeof numeric literal is Number
//typeof string literal is String
//typeof regex literal is Regex

var nu = null / null;
var u = undefined / undefined;

var b: boolean;
var b = true;
var b = false;

var n: number;
var n = 1;
var n = 1.0;
var n = 1e4;
var n = 001; // Error in ES5
var n = 0x1;
var n = -1;
var n = -1.0;
var n = -1e-4;
var n = -003; // Error in ES5
var n = -0x1;

var s: string;
var s = '';
var s = "";
var s = 'foo\
    bar';
var s = "foo\
    bar";

var r: RegExp;
var r = /what/;
var r = /\\\\/;
```

----------------------------------------

TITLE: Defining Action3 Type for Reducer
DESCRIPTION: This snippet defines a type `Action3` which is a union of two action types, 'add' and 'remove'.  Each action contains a `payload` with a specific property (toAdd or toRemove) representing the value to be added or removed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
    type Action3 =
        | {type: 'add', payload: { toAdd: number } }
        | {type: 'remove', payload: { toRemove: number } };

```

----------------------------------------

TITLE: Handling Destructuring Errors in TypeScript
DESCRIPTION: This code snippet demonstrates various TypeScript destructuring syntax errors related to optional properties and type assignments. It highlights errors that occur when trying to destructure object properties with incompatible types or nonexistent properties. Developers should ensure that the destructuring patterns match the types expected and correctly handle optional properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringObjectBindingPatternAndAssignment3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Error
    var {h?} = { h?: 1 };
          ~
!!! error TS1005: ',' expected.
    var {i}: string | number = { i: 2 };
        ~~~
!!! error TS2322: Type '{ i: number; }' is not assignable to type 'string | number'.
         ~
!!! error TS2339: Property 'i' does not exist on type 'string | number'.
    var {i1}: string | number| {} = { i1: 2 };
         ~~
!!! error TS2339: Property 'i1' does not exist on type 'string | number | {}'.
    var { f2: {f21} = { f212: "string" } }: any = undefined;
                        ~~~~
!!! error TS2353: Object literal may only specify known properties, and 'f212' does not exist in type '{ f21: any; }'.
    var {1} = { 1 };
          ~
!!! error TS1005: ':' expected.
                  ~
!!! error TS1005: ':' expected.
    var {"prop"} = { "prop": 1 };
               ~
!!! error TS1005: ':' expected.
```

----------------------------------------

TITLE: Extracting Return Types Using ReturnType
DESCRIPTION: This snippet uses the built-in `ReturnType<T>` utility type to extract the return type of various function types.  It shows how to use it with a function returning a `string`, `void`, a generic type, a tuple of generic types, a function's `typeof`, `any`, `never`, `string`, and `Function`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypes1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    function f1(s: string) {
        return { a: 1, b: s };
    }
    
    type T10 = ReturnType<() => string>;  // string
    type T11 = ReturnType<(s: string) => void>;  // void
    type T12 = ReturnType<(<T>() => T)>;  // {}
    type T13 = ReturnType<(<T extends U, U extends number[]>() => T)>;  // number[]
    type T14 = ReturnType<typeof f1>;  // { a: number, b: string }
    type T15 = ReturnType<any>;  // any
    type T16 = ReturnType<never>;  // never
    type T17 = ReturnType<string>;  // Error
                          ~~~~~~
!!! error TS2344: Type 'string' does not satisfy the constraint '(...args: any) => any'.
    type T18 = ReturnType<Function>;  // Error
                          ~~~~~~~~
!!! error TS2344: Type 'Function' does not satisfy the constraint '(...args: any) => any'.
!!! error TS2344:   Type 'Function' provides no match for the signature '(...args: any): any'.
```

----------------------------------------

TITLE: Generic Function with Keyof and Extract in TypeScript
DESCRIPTION: This code defines a generic function `f3` that takes an object `t`, a key `k` (constrained to be a string key of `t`), and a value `tk` (of the type `T[K]`). The function iterates over the keys of `t`, assigns `k` to each key (which is valid because `K` extends `keyof T`), and assigns `tk` to each property (which is valid because `T[K]` is assignable to `T[keyof T]`). The purpose is to demonstrate the usage of `keyof` and `Extract`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
    // Positive repro from #17166
    function f3<T, K extends Extract<keyof T, string>>(t: T, k: K, tk: T[K]): void {
        for (let key in t) {
            key = k // ok, K ==> keyof T
            t[key] = tk; // ok, T[K] ==> T[keyof T]
        }
    }
```

----------------------------------------

TITLE: Todo Component with Type Checking
DESCRIPTION: A functional component rendering a div with key and todo text, demonstrating prop type constraints
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadChildrenInvalidType(jsx=react,target=es5).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function Todo(prop: { key: number, todo: string }) {
    return <div>{prop.key.toString() + prop.todo}</div>;
}
```

----------------------------------------

TITLE: Implementing Generic Functions with Type Constraints in TypeScript
DESCRIPTION: This snippet defines two classes, C and D, demonstrating how TypeScript enforces type constraints within a generic function, `foo`, which accepts two type parameters. It shows how incorrect type arguments lead to assignability errors, specifically highlighting missing properties and type incompatibilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCallWithObjectTypeArgsAndConstraints5.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Generic call with constraints infering type parameter from object member properties

class C {
    x: string;
}

class D {
    x: string;
    y: string;
}

function foo<T, U extends T>(t: T, t2: U) {
    return (x: T) => t2;
}

var c: C;
var d: D;
var r2 = foo(d, c); // the constraints are self-referencing, no downstream error
                    ~
!!! error TS2345: Argument of type 'C' is not assignable to parameter of type 'D'.
!!! error TS2345:   Property 'y' is missing in type 'C' but required in type 'D'.
!!! related TS2728 genericCallWithObjectTypeArgsAndConstraints5.ts:9:5: 'y' is declared here.
var r9 = foo(() => 1, () => { }); // the constraints are self-referencing, no downstream error
                          ~~~~~~~~~
!!! error TS2345: Argument of type '() => void' is not assignable to parameter of type '() => number'.
!!! error TS2345:   Type 'void' is not assignable to type 'number'.

function other<T, U extends T>() {
    var r5 = foo<T, U>(c, d); // error
                           ~
!!! error TS2345: Argument of type 'C' is not assignable to parameter of type 'T'.
!!! error TS2345:   'T' could be instantiated with an arbitrary type which could be unrelated to 'C'.
```

----------------------------------------

TITLE: CFA with Null-Initialized Let Variable
DESCRIPTION: Illustrates control flow analysis for a 'let' variable initialized with null, showing how TypeScript handles null in type unions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowNoImplicitAny.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function f3() {
    let x = null;
    if (cond) {
        x = 1;
    }
    if (cond) {
        x = "hello";
    }
    const y = x;  // string | number | null
}
```

----------------------------------------

TITLE: Ambient Declarations in TypeScript .d.ts File
DESCRIPTION: This snippet demonstrates the use of 'declare' keyword for ambient declarations in a .d.ts file, including namespaces, enums, and nested structures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/erasableSyntaxOnlyDeclaration.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
declare namespace AmbientIsNotInstantiated {
    export const stillOk = 12;
}

declare enum LegalEnum {
    A = 1
}

declare namespace AmbientStuff {
    namespace Nested {
        export const stillOk = 12;
    }
    enum EnumInAmbientContext {
        B = 1
    }

    import FineAlias = EnumInAmbientContext.B;
}
```

----------------------------------------

TITLE: Function with Union Type and Type Guards
DESCRIPTION: This snippet demonstrates a function `fa1` that accepts a union type `[true, number] | [false, string]`. It destructures the tuple into `guard` and `value` and uses type guards to narrow the type of `value` based on the value of `guard` within `if` and `else` blocks that contain loops.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_33

LANGUAGE: typescript
CODE:
```
    function fa1(x: [true, number] | [false, string]) {
        const [guard, value] = x;
        if (guard) {
            for (;;) {
                value;  // number
            }
        }
        else {
            while (!!true) {
                value;  // string
            }
        }
    }

```

----------------------------------------

TITLE: TypeScript Null Type Control Flow Analysis
DESCRIPTION: Demonstrates TypeScript's control flow analysis with null checks and type narrowing. Shows how the compiler handles null values in union types and type assertions in conditional blocks.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowNullTypeAndLiteral.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const myNull: null = null;
const objWithValMaybeNull: { val: number | null } = { val: 1 };
const addOne = function (num: number) {
    return num + 1;
}

if (objWithValMaybeNull.val !== null)
    addOne(objWithValMaybeNull.val);
if (objWithValMaybeNull.val !== myNull)
    addOne(objWithValMaybeNull.val);

if (objWithValMaybeNull.val === null)
    addOne(objWithValMaybeNull.val);    // Error
if (objWithValMaybeNull.val === myNull)
    addOne(objWithValMaybeNull.val);    // Error

function f(x: number | null) {
    if(x === myNull) {
        const s: string = x;  // Error
    }
}
```

----------------------------------------

TITLE: Chaining .then() with testFunction8P on a Promise
DESCRIPTION: This snippet demonstrates chaining the `.then()` method on a `Promise<number>` instance with `testFunction8P` as the fulfillment, rejection, and notify handlers.  It results in a type error because the provided function's signature doesn't match the expected signature by the `then` method overload. The test checks type compatibility of the handler's parameters with expected types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations3.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
var s8b = s8.then(testFunction8P, testFunction8P, testFunction8P); // error
                      ~~~~~~~~~~~~~~
```

----------------------------------------

TITLE: Async Function Return Type Validation in TypeScript
DESCRIPTION: Demonstrates various scenarios of async function declarations with different return type patterns and validation errors. Includes cases for void returns, missing returns, and Promise type declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reachabilityChecks7.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// async function without return type annotation - error
async function f1() {    
}

let x = async function() {
}

// async function with which promised type is void - return can be omitted
async function f2(): Promise<void> {
    
}

async function f3(x) {
    if (x) return 10;
}

async function f4(): Promise<number> {
    
}

function voidFunc(): void {
}

function calltoVoidFunc(x) {
    if (x) return voidFunc();
}

declare function use(s: string): void;
let x1 = () => { use("Test"); }
```

----------------------------------------

TITLE: Initializing For Loop with Destructuring and Defaults (TypeScript/JavaScript)
DESCRIPTION: This snippet shows the initialization part of a for loop. It assigns multiple variables (`_q`, `_r`, `_s`, `_t`, `primarySkillA`, `_u`, `secondarySkillA`, `i`) using a combination of direct assignment, array indexing, destructuring-like patterns, and ternary operators to handle potential undefined values and provide defaults.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.sourcemap.txt#_snippet_29

LANGUAGE: TypeScript
CODE:
```
for (_q = ["trimmer", ["trimming", "edging"]], _r = _q[1], _s = _r === void 0 ? ["none", "none"] : _r, _t = _s[0], primarySkillA = _t === void 0 ? "primary" : _t, _u = _s[1], secondarySkillA = _u === void 0 ? "secondary" : _u, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Exporting Default in ES Module TypeScript
DESCRIPTION: This snippet shows the default export from the 'fs' module using ES Module syntax in TypeScript. It does not produce any errors, assuming appropriate environment support for ES Modules. No additional dependencies are needed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportHelpersCollisions3(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// esm format file
export {default} from "fs";
```

----------------------------------------

TITLE: Multiple JSX elements without parent
DESCRIPTION: This snippet highlights a common error in JSX: returning multiple top-level elements without a single parent element. JSX requires a single root element to be returned from a component.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxInvalidEsprimaTestSuite.errors.txt#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
"var x = <div>one</div> /* intervening comment */ <div>two</div>;;"
```

----------------------------------------

TITLE: Chaining .then() with nIPromise on a Promise
DESCRIPTION: This snippet demonstrates chaining the `.then()` method on a Promise with `nIPromise` as the fulfillment, rejection, and notify handlers. This example is marked as 'ok', indicating that the type signatures are compatible.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations3.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
var s8d = s8.then(nIPromise, nIPromise, nIPromise).then(nIPromise, nIPromise, nIPromise); // ok
```

----------------------------------------

TITLE: Creating React Component with TypeScript Props Interface
DESCRIPTION: This snippet defines an IProps interface and a VerticalNavMenuItem function component using TypeScript. It demonstrates prop type checking and usage in a React component.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution14.errors.txt#2025-04-21_snippet_1

LANGUAGE: TSX
CODE:
```
interface IProps {
  primaryText: string,
  [propName: string]: string | number
}

function VerticalNavMenuItem(prop: IProps) {
  return <div>props.primaryText</div>
}

function VerticalNav() {
  return (
    <div>
      <VerticalNavMenuItem primaryText={2} />  // error
      <VerticalNavMenuItem justRandomProp={2} primaryText={"hello"} />  // ok
      <VerticalNavMenuItem justRandomProp1={true} primaryText={"hello"} />  // error
    </div>
  )
}
```

----------------------------------------

TITLE: TypeScript Class with Parameter Properties in Constructor
DESCRIPTION: Demonstrates parameter properties in TypeScript, where constructor parameters are automatically assigned to class properties using accessibility modifiers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classUpdateTests.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class C {
	constructor(public p1=0, private p2=0, p3=0) {}
}
```

----------------------------------------

TITLE: Type Assertion Functions for DOM Elements in TypeScript
DESCRIPTION: Implements three utility functions for DOM node type checking: assertIsElement checks if a node is an Element, assertNodeTagName verifies element tag names, and assertNodeProperty validates element properties. Uses TypeScript generics and type predicates for type narrowing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionsOfLargeUnions.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export function assertIsElement(node: Node | null): node is Element {
    let nodeType = node === null ? null : node.nodeType;
    return nodeType === 1;
}

export function assertNodeTagName<
    T extends keyof ElementTagNameMap,
    U extends ElementTagNameMap[T]>(node: Node | null, tagName: T): node is U {
    if (assertIsElement(node)) {
        const nodeTagName = node.tagName.toLowerCase();
         return nodeTagName === tagName;
    }
    return false;
}

export function assertNodeProperty<
    T extends keyof ElementTagNameMap,
    P extends keyof ElementTagNameMap[T],
    V extends HTMLElementTagNameMap[T][P]>(node: Node | null, tagName: T, prop: P, value: V) {
    if (assertNodeTagName(node, tagName)) {
        node[prop];
    }
}
```

----------------------------------------

TITLE: Modifying Readonly Tuple Elements in TypeScript
DESCRIPTION: This snippet demonstrates attempts to modify elements of a readonly tuple, which are not allowed. It shows errors for direct assignments, deletions, and computed index assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/readonlyArraysAndTuples.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
declare var v: readonly[number, number, ...number[]];
v[0] = 1;        // Error
v[1] = 1;        // Error
v[2] = 1;        // Error
delete v[2];     // Error
v[0 + 1] = 1;    // Error
v[0 + 2] = 1;    // Error
delete v[0 + 1]; // Error
```

----------------------------------------

TITLE: Optional Chaining in While Loops with Array Access in TypeScript
DESCRIPTION: Demonstrates using optional chaining with array indexing in a while loop condition. This pattern safely handles potential undefined values when accessing array elements and their properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowOptionalChain.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
let i = 0;
declare const arr: { tag: ("left" | "right") }[];

while (arr[i]?.tag === "left") {
    i += 1;
    if (arr[i]?.tag === "right") {
        console.log("I should ALSO be reachable");
    }
}
```

----------------------------------------

TITLE: Destructuring Skills from MultiRobots in TypeScript
DESCRIPTION: This snippet destructures the skills from each robot in the 'multiRobots' array. It uses default values to ensure that if a skill is not provided, a fallback is used.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_11

LANGUAGE: TypeScript
CODE:
```
_d = multiRobots_1[_64].skills, _e = _d === void 0 ? { primary: "nosKill", secondary: "noSkill" } : _d, _f = _e.primary, primaryA = _f === void 0 ? "primary" : _f, _g = _e.secondary, secondaryA = _g === void 0 ? "secondary" : _g;
```

----------------------------------------

TITLE: Nested Object Destructuring with Rest in TypeScript
DESCRIPTION: Shows how to perform nested object destructuring with rest syntax, including deeply nested objects and renaming properties during destructuring.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectRest.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
let nestedrest: { x: number, n1: { y: number, n2: { z: number, n3: { n4: number } } }, rest: number, restrest: number };
var { x, n1: { y, n2: { z, n3: { ...nr } } }, ...restrest } = nestedrest;

let complex: { x: { ka, ki }, y: number };
var { x: { ka, ...nested }, y: other, ...rest } = complex;
({x: { ka, ...nested }, y: other, ...rest} = complex);
```

----------------------------------------

TITLE: Calling Union of Callable and Non-Callable Types (TS2349)
DESCRIPTION: Declares a variable `fnUnion` with a union type including both an object type (non-callable) and a function type (callable). Attempting to call this variable results in a TS2349 error because not all constituents are callable, specifically the object type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/betterErrorForUnionCall.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
declare const fnUnion: { a: string } | ((a: string) => void)
fnUnion("");
```

----------------------------------------

TITLE: Error Handling in Type Narrowing with Instanceof
DESCRIPTION: This snippet exemplifies the narrowing of 'any' to 'Error' type and highlights TypeScript errors caused by misreferenced properties. The example shows a common mistake in property names and suggests corrections for these errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowFromAnyWithInstanceof.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
if (x instanceof Error) { // 'any' is narrowed to types other than 'Function'/'Object'
        x.message;
        x.mesage;
          ~~~~~~
!!! error TS2551: Property 'mesage' does not exist on type 'Error'. Did you mean 'message'?
!!! related TS2728 lib.es5.d.ts:--:--: 'message' is declared here.
    }
```

----------------------------------------

TITLE: Declare JSX Module in TypeScript
DESCRIPTION: This snippet declares the JSX module with the Element and IntrinsicElements interfaces. This is a necessary step when working with JSX in TypeScript to define the types of JSX elements and their attributes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxParsingError3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    declare module JSX {
      interface Element {}
      interface IntrinsicElements {
        [s: string]: any;
      }
    }
    
```

----------------------------------------

TITLE: Defining Exported TypeScript Interface with Various Signatures
DESCRIPTION: This snippet defines an exported TypeScript interface with call signatures, construct signatures, index signatures, property signatures, and function signatures. It includes various parameter types and optional parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/giant.errors.txt#2025-04-21_snippet_6

LANGUAGE: TypeScript
CODE:
```
export interface eI {
    //Call Signature
    ();
    (): number;
    (p);
    (p1: string);
    (p2?: string);
    (...p3: any[]);
    (p4: string, p5?: string);
    (p6: string, ...p7: any[]);

    //Construct Signature
    new ();
    new (): number;
    new (p: string);
    new (p2?: string);
    new (...p3: any[]);
    new (p4: string, p5?: string);
    new (p6: string, ...p7: any[]);

    //Index Signature
    [p];
    [p1: string];
    [p2: string, p3: number];

    //Property Signature
    p;
    p1?;
    p2?: string;

    //Function Signature
    p3();
    p4? ();
    p5? (): void;
    p6(pa1): void;
    p7(pa1, pa2): void;
    p7? (pa1, pa2): void;
}
```

----------------------------------------

TITLE: Implementing Greeter Class in TypeScript
DESCRIPTION: Defines a Greeter class with a constructor accepting a greeting and rest parameters, a greet method, and a greetings property with getter and setter. It also includes private properties and methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationClass.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Greeter {
    constructor(public greeting: string, ...b: string[]) {
    }
    greet() {
        return "<h1>" + this.greeting + "</h1>";
    }
    private x: string;
    private x1: number = 10;
    private fn() {
        return this.greeting;
    }
    get greetings() {
        return this.greeting;
    }
    set greetings(greetings: string) {
        this.greeting = greetings;
    }
}
```

----------------------------------------

TITLE: Implementing Decorated Class with Private Fields
DESCRIPTION: Class implementation showing usage of ES decorators with private fields, getters, setters and methods
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-sourceMap(target=es2015).sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
let C = (() => {
    var _C_method_get, _C_x_get, _C_x_set, _C_y, _C_z_accessor_storage;
    let _classDecorators = [dec, dec];
    let _classThis;
    class C {
        method() { }
        get x() { return 1; }
        set x(value) { }
        get z() { return __classPrivateFieldGet(this, _C_z_1_accessor_storage, "f"); }
        set z(value) { __classPrivateFieldSet(this, _C_z_1_accessor_storage, value, "f"); }
    }
})();
```

----------------------------------------

TITLE: TypeScript For Loop Destructuring Initialization
DESCRIPTION: Initializes variables `name` and `skill` using object destructuring within the for loop's initialization block. It assigns values from an object literal `{ name: "trimmer", skill: "trimming" }` which is type-asserted as `<Robot>`. Default values "noName" and "skill" are provided for `name` and `skill` respectively in case the source object properties were undefined (though they are provided here). An additional loop counter `i` is also initialized.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_90

LANGUAGE: TypeScript
CODE:
```
for (
     { name = "noName", skill = "skill" } = <Robot>
           { 
             name
                 : 
                   "trimmer"
                            , 
                              skill
                                   : 
                                     "trimming"
                                                }
                                                 
                                                   name = "noName"
                                                                 
                                                                   name
                                                                        = 
                                                                                           "noName"
                                                                                                   
                                                                                                         , 
                                                                                                           skill = "skill"
                                                                                                                          
                                                                                                                            skill
                                                                                                                                  = 
                                                                                                                                                     "skill"
                                                                                                                                                            
                                                                                                                                                                   } = <Robot>{ name: "trimmer", skill: "trimming" }, 
                                                                                                                                                                    i
                                                                                                                                                                      = 
                                                                                                                                                                        0
                                                                                                                                                                         ; 
                                                                                                                                                                           i
                                                                                                                                                                             < 
                                                                                                                                                                               1
                                                                                                                                                                                ; 
                                                                                                                                                                                  i
                                                                                                                                                                                   ++
                                                                                                                                                                                     ) 
                                                                                                                                                                                       {
```

----------------------------------------

TITLE: Defining Collection Function Overloads and Base Interface in TypeScript
DESCRIPTION: Definition of the Collection function with overloads to handle different parameter types and the base Collection interface that extends ValueObject. Includes methods for value comparison and data access such as get, has, and includes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/complexRecursiveCollections.errors.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
export function Collection<I extends Collection<any, any>>(collection: I): I;
export function Collection<T>(collection: Iterable<T>): Collection.Indexed<T>;
export function Collection<V>(obj: {[key: string]: V}): Collection.Keyed<string, V>;
export interface Collection<K, V> extends ValueObject {
  // Value equality
  equals(other: any): boolean;
  hashCode(): number;
  // Reading values
  get<NSV>(key: K, notSetValue: NSV): V | NSV;
  get(key: K): V | undefined;
  has(key: K): boolean;
  includes(value: V): boolean;
  contains(value: V): boolean;
  first(): V | undefined;
  last(): V | undefined;
}
```

----------------------------------------

TITLE: Implementing Type-Safe Property Getters and Setters with 'this' Type
DESCRIPTION: This class C1 implements generic getter and setter methods that use 'keyof this' to ensure type-safe property access. The code demonstrates different ways to access properties, including direct access, bracket notation, and the custom get/set methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
class C1 {
    x: number;
    get<K extends keyof this>(key: K) {
        return this[key];
    }
    set<K extends keyof this>(key: K, value: this[K]) {
        this[key] = value;
    }
    foo() {
        let x1 = this.x;  // number
        let x2 = this["x"];  // number
        let x3 = this.get("x");  // this["x"]
        let x4 = getProperty(this, "x"); // this["x"]
        this.x = 42;
        this["x"] = 42;
        this.set("x", 42);
        setProperty(this, "x", 42);
    }
}
```

----------------------------------------

TITLE: Demonstrating TypeScript Error in React Component Usage
DESCRIPTION: This snippet shows a TypeScript error when a required prop 'someKey' is missing in a React component. It also includes the correct usage of the component with the required prop.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxInvokeComponentType.errors.txt#2025-04-21_snippet_0

LANGUAGE: TSX
CODE:
```
/// <reference path="/.lib/react16.d.ts" />
import React, { ComponentType } from "react";

declare const Elem: ComponentType<{ someKey: string }>;

const bad = <Elem />;

const good = <Elem someKey="ok" />;

declare const Elem2: ComponentType<{ opt?: number }>;
const alsoOk = <Elem2>text</Elem2>;
```

----------------------------------------

TITLE: Demonstrating TypeScript Implicit Any Type Errors
DESCRIPTION: This code showcases various scenarios where TypeScript produces errors due to implicit 'any' types in variable declarations and function parameters. It also includes examples of proper type declarations that avoid these errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implicitAnyDeclareVariablesWithoutTypeAndInit.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// this should be an error
var x;                   // no error, control flow typed
var y;                   // error because captured
declare var foo;         // error at "foo"
function func(k) { y };  // error at "k"
func(x);

// this shouldn't be an error
var bar = 3;            
var bar1: any;          
declare var bar2: any; 
var x1: any; var y1 = new x1;
```

----------------------------------------

TITLE: Implementing a React Functional Component with Props
DESCRIPTION: This snippet illustrates the implementation of the 'Comp' functional React component which takes 'Prop' as its argument and renders the 'b' property. It demonstrates how to access props within the component.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function Comp(p: Prop) {
    return <div>{p.b}</div>;
}
```

----------------------------------------

TITLE: TypeScript Intersection Types with Read-only Properties
DESCRIPTION: Demonstrates three scenarios of intersection types: combining readonly and non-readonly properties, getter/setter combinations, and all readonly properties. Shows how TypeScript handles property assignments in each case.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionsAndReadonlyProperties.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// readonly and non-readonly
type Intersection1 = { readonly a: number } & { a: number };
declare let i1: Intersection1;

i1.a = 2;

// getter and setter
type Intersection2 = { get a(): number } & { set a(v: number) };
declare let i2: Intersection2;

i2.a = 2;

// assignment to an all read-only property should still be disallowed
type IntersectionAllReadonly = { readonly a: number } & { get a(): number };
declare let ia: IntersectionAllReadonly;

ia.a = 2; // Error
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options
DESCRIPTION: TypeScript configuration file specifying compiler options including strict mode, ES2016 target, and import helpers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tslibMultipleMissingHelper.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "strict": true,
        "target": "ES2016",
        "importHelpers": true,
        "module": "commonjs"
    }
}
```

----------------------------------------

TITLE: Defining Class and Instance Creation in TypeScript
DESCRIPTION: This snippet illustrates the definition of a class along with the creation of its instance. It demonstrates how to declare a property within a class and how to instantiate a class to create an object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootWithNoSourceMapOption/amd/mapRootWithNoSourceMapOption.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Testing String Literal Type Assignment and Widening
DESCRIPTION: Tests assignment between string literal types and the widening behavior when assigning to a variable without an explicit type annotation. Demonstrates the difference between implicitly and explicitly typed variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/literalFreshnessPropagationOnNarrowing.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function f3() {
    type XY = 'x' | 'y';
    const x: XY = 'x';
    let x2 = x;
    // Desired: OK (up for debate?)
    // 3.0: Error
    // 3.1 as-is: OK
    x2 = 'y';
    ~~
!!! error TS2322: Type '"y"' is not assignable to type '"x"'.

    // Desired/actual: All OK
    let x3: XY = x;
    x3 = 'y';
}
```

----------------------------------------

TITLE: Defining JSX Namespace and Element Interfaces in TypeScript
DESCRIPTION: This snippet defines the JSX namespace with Element and IntrinsicElements interfaces. It specifies the expected types for 'div' and 'span' elements' attributes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare namespace JSX {
	interface Element { }
	interface IntrinsicElements {
		div: {
			text?: string;
			width?: number;
		}

		span: any;
	}
}
```

----------------------------------------

TITLE: Dynamic Import in TypeScript
DESCRIPTION: This snippet demonstrates a dynamic import in TypeScript. It imports the module 'inner' and calls the function 'x' on the imported module. The dynamic import allows for asynchronous loading of modules and can be useful for code splitting and lazy loading.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSpecifierGenerationConditions(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export const a = (await import("inner")).x();
```

----------------------------------------

TITLE: TypeScript Module with Scope Resolution Errors
DESCRIPTION: A TypeScript module containing a Test class with scope-related errors. The class has private member 'name' but tries to access it without 'this' qualifier in its methods, causing compiler errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/selfRef.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module M
{
    export class Test
    {
      private name = "hello";
      public setName = function(value: string): void {
	  (function () {
	      name=value;
	      ~~~~
!!! error TS2304: Cannot find name 'name'.
	  })();
      }
      public getName = function(): string {
          return name;
                 ~~~~
!!! error TS2304: Cannot find name 'name'.
      }
    }
}



```

----------------------------------------

TITLE: Exporting Calculator Class and Functions in TypeScript
DESCRIPTION: This snippet defines a class named 'Calculator' with a method 'handleChar', and two functions 'test' and 'test2', all of which are exported. It is assumed that these exports will be consumed by other TypeScript files. The class and functions do not have any implemented functionality, serving as placeholders or templates.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedImports9.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export class Calculator {
    handleChar() {}
}

export function test() {

}

export function test2() {

}

```

----------------------------------------

TITLE: Iterating Over Multi-Robot Array in JavaScript
DESCRIPTION: This snippet iterates over an array of robot objects, using for loops and destructuring to extract robot names and skills efficiently. It assigns default values if the robot's primary or secondary skills are undefined. It requires 'multiRobots', an array of robot objects with nested skill objects, for iteration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_34

LANGUAGE: JavaScript
CODE:
```
for (var _84 = 0, multiRobots_3 = multiRobots; _84 < multiRobots_3.length; _84++) {
```

----------------------------------------

TITLE: TypeScript Class Property Arrow Functions with Call Hierarchy
DESCRIPTION: Implementation of class C with two arrow function properties: 'caller' and 'callee'. The caller method invokes callee through 'this' context, demonstrating method relationships within a class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callHierarchyClassPropertyArrowFunction.callHierarchy.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    caller = () => {
        this.callee();
    }

    callee = () => {
    }
}
```

----------------------------------------

TITLE: Chaining .then() with sIPromise on an IPromise
DESCRIPTION: Chains the `.then()` method on an `IPromise<number>` instance with `sIPromise` as fulfillment, rejection and notify handlers. This should be type-compatible.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations3.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
var r9b = r9.then(sIPromise, sIPromise, sIPromise); // ok
```

----------------------------------------

TITLE: Await Using Declarations in Different Contexts
DESCRIPTION: Demonstrates the usage of 'await using' declarations in various contexts including top-level, functions, classes, and control structures. Shows implementation with async disposable objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitUsingDeclarations.1(target=es5).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
await using d1 = { async [Symbol.asyncDispose]() {} };

async function af() {
    await using d3 = { async [Symbol.asyncDispose]() {} };
    await null;
}

async function * ag() {
    await using d5 = { async [Symbol.asyncDispose]() {} };
    yield;
    await null;
}

const a = async () => {
    await using d6 = { async [Symbol.asyncDispose]() {} };
};

class C1 {
    a = async () => {
        await using d7 = { async [Symbol.asyncDispose]() {} };
    };

    async am() {
        await using d13 = { async [Symbol.asyncDispose]() {} };
        await null;
    }

    async * ag() {
        await using d15 = { async [Symbol.asyncDispose]() {} };
        yield;
        await null;
    }
}
```

----------------------------------------

TITLE: Await Usage Error in TypeScript
DESCRIPTION: This snippet showcases a TypeScript error (TS1308) that occurs when the `await` keyword is used within a non-async function. The error message suggests that `await` is only permitted inside async functions or at the top level of a module. A related error (TS1356) suggests marking the function as `async` to resolve the issue.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/plainJSGrammarErrors3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo() {
    await new Promise(undefined);
    ~~~~~
!!! error TS1308: 'await' expressions are only allowed within async functions and at the top levels of modules.
!!! related TS1356 /a.js:1:10: Did you mean to mark this function as 'async'?
}
```

----------------------------------------

TITLE: Exporting Variables in TypeScript
DESCRIPTION: This snippet defines and exports a variable in TypeScript, which is essential for module-based architectures where variables need to be shared across different files. It establishes the export keyword for making variables available outside of their defining module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/pathMappingBasedModuleResolution2_classic.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export var x = 1;
```

----------------------------------------

TITLE: Importing and Accessing Properties in TypeScript
DESCRIPTION: This snippet demonstrates importing objects from different modules and attempting to access their properties. It contains a TypeScript error when trying to access a non-existent property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importWithTrailingSlash.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
import a from ".";\nimport aIndex from "./";\na.a;\naIndex.aIndex;
```

----------------------------------------

TITLE: Exporting Variables and Classes in TypeScript
DESCRIPTION: This snippet exports a variable and a class from the m2 module. Similar to m1, 'm2_a1' is initialized with 10, and 'm2_c1' is a class with a property. An instance of this class is also created and exported alongside a function returning that instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlsourcerootUrlModuleMultifolderSpecifyOutputFile/node/maprootUrlsourcerootUrlModuleMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export var m2_a1 = 10;
export class m2_c1 {
    public m2_c1_p1: number;
}

export var m2_instance1 = new m2_c1();
export function m2_f1() {
    return m2_instance1;
}
```

----------------------------------------

TITLE: Defining and Satisfying TypeScript Function and Object Types
DESCRIPTION: This snippet defines a function type T3 and an object type T4, followed by the declaration of constants t4 to t8. It includes successful type satisfactions for t4, t5, t7, and fails with t8, where 'b' is not a known property in T4, showcasing type validation failures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocSatisfiesTag1.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
/** @typedef {(x: string) => string} T3 */

/** @typedef {Object} T4
 * @property {string} a
 */

/** @type {T2} */
const t4 = /** @satisfies {T2} */ ({ a: "a" });

/** @type {(m: string) => string} */
const t5 = /** @satisfies {T3} */((m) => m.substring(0));
const t6 = /** @satisfies {[number, number]} */ ([1, 2]);
const t7 = /** @satisfies {T4} */ ({ a: 'test' });
const t8 = /** @satisfies {T4} */ ({ a: 'test', b: 'test' });
```

----------------------------------------

TITLE: Function with All Default Parameters
DESCRIPTION: Creates a function where all parameters have default values, allowing flexible argument passing
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/requiredInitializedParameter1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function f2(a, b = 0, c = 0) { }
```

----------------------------------------

TITLE: Defining User Type Declaration in TypeScript
DESCRIPTION: Type declaration file defining a User interface with a name property of type string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowImportingTypesDtsExtension(allowimportingtsextensions=true,moduleresolution=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export declare type User = {
    name: string;
}
```

----------------------------------------

TITLE: Defining React Components with TypeScript
DESCRIPTION: This snippet defines two React components: a functional component 'MyComp2' and a class component 'MyComp'. Both components accept props with optional 'className' and 'htmlFor' properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/spellingSuggestionJSXAttribute.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function MyComp2(props: { className?: string, htmlFor?: string }) {
    return null!;
}
class MyComp extends React.Component<{ className?: string, htmlFor?: string }> { }
```

----------------------------------------

TITLE: Handling Missing TypeScript Module Declarations
DESCRIPTION: The TypeScript source code fragment illustrates how unresolved module declarations can cause errors. It includes examples of importing modules from 'exports-and-types-versions' that lack proper type declarations, suggesting the need to add explicit type definition files to resolve such errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsBlocksTypesVersions(module=node16).errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
import {} from "exports-and-types-versions/foo";
import {} from "exports-and-types-versions/nope";
import {} from "exports-and-types-versions/yep";
import {} from "exports-and-types-versions/versioned-yep";
import {} from "exports-and-types-versions/versioned-nah";
import {} from "just-types-versions/foo";
```

----------------------------------------

TITLE: Defining Interface with Implicit 'any' Return Type in TypeScript
DESCRIPTION: This code snippet declares a variable of type 'Entry' and defines an interface 'Entry' with a construct signature lacking a return-type annotation. This results in an implicit 'any' return type, which triggers an error when 'noImplicitAny' is enabled.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyForwardReferencedInterface.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare var x: Entry;

interface Entry {
    // Should return error for implicit any.
    new ();
}
```

----------------------------------------

TITLE: Defining Classes with Superclass Method Access
DESCRIPTION: This snippet defines two classes, C and D. Class D extends class C but incorrectly attempts to access properties and methods of class C that are not public or protected, leading to TypeScript compilation errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/superPropertyAccess1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
    public foo() { }
    public get x() {
        return 1;
    }

    public bar() { }
}

class D extends C {
    public foo() {
        super.bar();
        super.x;  // error
              ~
!!! error TS2340: Only public and protected methods of the base class are accessible via the 'super' keyword.
    }    

    constructor() {
        super();
        super.bar();
        super.x;  // error
              ~
!!! error TS2340: Only public and protected methods of the base class are accessible via the 'super' keyword.
    }

    public get y() {
        super.bar();
        super.x; // error
              ~
!!! error TS2340: Only public and protected methods of the base class are accessible via the 'super' keyword.
        return 1;
    }
}
```

----------------------------------------

TITLE: Testing let variable capture with multiple declarations in while loops in TypeScript
DESCRIPTION: Demonstrates how multiple let variables are captured in while loops. The function declares two let variables (x and y) inside the loop body and creates closures that reference both.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop5.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
function foo6(x) {
    while (1 === 1) {
        let x, y;
        var v = x;
        (function() { return x + y + v });
        (() => x + y + v);
        if (x == 1) {
            return;
        }
    };
    
    use(v)
}
```

----------------------------------------

TITLE: Correctly Using a Type-Only Import in TypeScript
DESCRIPTION: Shows the correct way to import and re-export a type-only declaration using 'import type' syntax. This approach works properly with the 'isolatedModules' flag enabled.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDeclaration(isolatedmodules=true).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import type { A } from './a';
export = A;
```

----------------------------------------

TITLE: Creating a Title Component Using JSX
DESCRIPTION: This snippet shows a functional component 'Title' that accepts a children property of type string and displays it within an h1 element. It also includes an example of using the component with a string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxNamespaceElementChildrenAttributeIgnoredWhenReactJsx(jsx=react-jsx).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const Title = (props: { children: string }) => <h1>{props.children}</h1>;

<Title>Hello, world!</Title>;
```

----------------------------------------

TITLE: ES Module with Mixed Imports
DESCRIPTION: An ES module format file showing various import patterns and TypeScript errors when mixing require and import statements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsSynchronousCallErrors(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// esm format file
import {h as _h} from "./index.js";
import mod = require("./index.js");
import {f} from "./subfolder/index.js";
import mod2 = require("./subfolder/index.js");
export async function h() {
    const mod3 = await import ("./index.js");
    const mod4 = await import ("./subfolder/index.js");
    f();
}
```

----------------------------------------

TITLE: Conditional Expression in TypeScript
DESCRIPTION: This snippet demonstrates the use of a conditional (ternary) operator in TypeScript.  It assigns a value to the variable 'z' based on the condition 'x == 1'. If the condition is true, 'z' is assigned 'x + 1'; otherwise, it is assigned 'x - 1'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationStatements.sourcemap.txt#2025-04-21_snippet_36

LANGUAGE: typescript
CODE:
```
var z = (x == 1) ? x + 1 : x - 1;
```

----------------------------------------

TITLE: Defining Interface with Promise Return Types in TypeScript
DESCRIPTION: This snippet defines an interface 'Stuff' with methods that return Promises of various types. It demonstrates the correct way to declare asynchronous method signatures in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/errorOnUnionVsObjectShouldDeeplyDisambiguate.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Stuff {
    a?: () => Promise<number[]>;
    b: () => Promise<string>;
    c: () => Promise<string>;
    d: () => Promise<string>;
    e: () => Promise<string>;
    f: () => Promise<string>;
    g: () => Promise<string>;
    h: () => Promise<string>;
    i: () => Promise<string>;
    j: () => Promise<string>;
    k: () => Promise<number>;
  }
```

----------------------------------------

TITLE: Defining external module in TypeScript
DESCRIPTION: This snippet defines an external module `m2` with exported declarations: a variable, a class, an instance, and a function. The `export` keyword is key to defining an external module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlMixedSubfolderSpecifyOutputFileAndOutputDirectory/node/maprootUrlMixedSubfolderSpecifyOutputFileAndOutputDirectory.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    export var m2_a1 = 10;
    export class m2_c1 {
        public m2_c1_p1: number;
    }
    
    export var m2_instance1 = new m2_c1();
    export function m2_f1() {
        return m2_instance1;
    }
```

----------------------------------------

TITLE: Implementing Function with Destructuring Parameter in TypeScript
DESCRIPTION: Defines a function 'foo1' that uses destructuring parameter with object binding pattern and default value for the 'name' property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringParameterObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function foo1({ name: nameA = "<NoName>" }: Robot = { }) {
    console.log(nameA);
}
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options in JSON
DESCRIPTION: This snippet sets up TypeScript compiler options in a JSON configuration file. It specifies the module system as 'esnext', resolution strategy for modules, and that no output files should be emitted. No additional types are included by default.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolutionModeTripleSlash5.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "module": "esnext",
    "moduleResolution": "node10",
    "noEmit": true,
    "types": []
  }
}
```

----------------------------------------

TITLE: TypeScript Class Privacy Enforcement Example
DESCRIPTION: Demonstrates TypeScript's enforcement of private class members through a class Foo with public and private methods/properties, and a module M containing class C. Shows both valid and invalid access attempts to private members.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateVisibility.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Foo {
	public pubMeth() {this.privMeth();}
	private privMeth() {}
	public pubProp = 0;
	private privProp = 0;
}

var f = new Foo();
f.privMeth(); // should not work
f.privProp; // should not work

f.pubMeth(); // should work
f.pubProp; // should work

module M {
    export class C { public pub = 0; private priv = 1; }
    export var V = 0;
}


var c = new M.C();

c.pub; // should work
c.priv; // should not work
```

----------------------------------------

TITLE: Iterating and Destructuring Robot Objects in JavaScript
DESCRIPTION: This snippet iterates over a collection of robots using a for-of loop and destructures the robot objects to access their 'name' and 'skills' properties. The key purpose is to extract specific information (e.g., a robot's name and its primary and secondary skills) from complex objects while iterating. It requires an iterable object, such as an array of robots, as input.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_28

LANGUAGE: JavaScript
CODE:
```
for ({name, skills: { primary, secondary } } of getMultiRobots()) {
    _w = _36[_35], name = _w.name, _x = _w.skills, primary = _x.primary, secondary = _x.secondary;
}
```

----------------------------------------

TITLE: Restricting Protected Member Access to Same Class Hierarchies in TypeScript
DESCRIPTION: This code shows how TypeScript enforces that protected members can only be accessed through instances of the same class hierarchy. It demonstrates how a protected member in class A can only be accessed through instances of class C or its subclasses when inside class C's methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/protectedMembers.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class A {
    protected x;
}

class B extends A {
    y;
}

class C extends A {
    z;
    static foo(a: A, b: B, c: C, d: D, e: E) {
        a.x = 1;  // Error, access must be through C or type derived from C
        b.x = 1;  // Error, access must be through C or type derived from C
        c.x = 1;
        d.x = 1;
        e.x = 1;
    }
}

class D extends C {
    d;
}

interface E extends C {
    e;
}
```

----------------------------------------

TITLE: Defining Interfaces for Union Types in TypeScript
DESCRIPTION: This snippet defines three interfaces: ConstructableA for a constructor, IDirectiveLinkFn for a function with a generic scope, and IDirectivePrePost for an object with optional pre and post functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/errorsWithInvokablesInUnions01.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface ConstructableA {
  new(): { somePropA: any };
}

interface IDirectiveLinkFn<TScope> {
    (scope: TScope): void;
}

interface IDirectivePrePost<TScope> {
    pre?: IDirectiveLinkFn<TScope>;
    post?: IDirectiveLinkFn<TScope>;
}
```

----------------------------------------

TITLE: Import ECMAScript Module in JavaScript
DESCRIPTION: Illustrates importing an ECMAScript module using JavaScript ES6 import syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesCJSResolvingToESM3_modulePackageJson.errors.txt#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import {} from "./module.mjs";
```

----------------------------------------

TITLE: TypeScript Module Class Implementation
DESCRIPTION: Implementation of StartFindAction class within Sample.Actions.Thing.Find namespace. The class implements the IAction interface with getId() and run() methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveClassReferenceTest.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare module Sample.Thing {
	export interface IWidget {
		getDomNode(): any;
		destroy();
		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
	}

	export interface ICodeThing {
		getDomNode(): Element;
		addWidget(widgetId:string, widget:IWidget);
		focus();
	}

	export interface IAction {
		run(Thing:ICodeThing):boolean;
		getId():string;
	}
}
```

----------------------------------------

TITLE: Demonstrating Private Static Property Access Error in TypeScript
DESCRIPTION: This code snippet shows a class 'C' with private properties and a module attempting to access a private static property, which results in a TypeScript compile-time error. It illustrates the scope limitations of private members in TypeScript classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateStaticNotAccessibleInClodule.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
    private foo: string;
    private static bar: string;
}

module C {
    export var y = C.bar; // error
}
```

----------------------------------------

TITLE: Declaring a React Component with TypeScript
DESCRIPTION: This code declares a React component named `Foo` using TypeScript. It extends `React.Component` and specifies that it accepts `PropsType` as props and an empty object `{}` as its state. This declaration establishes the type contract for the component's usage.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxChildrenWrongType.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
declare class Foo extends React.Component<PropsType, {}> {}
```

----------------------------------------

TITLE: Exporting Default Value in TypeScript
DESCRIPTION: This snippet demonstrates how to export a default value in TypeScript. It declares a variable 'a' and exports it as the default export.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ImportDefaultBindingFollowedWithNamespaceBinding1WithExport.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var a = 10;
export default a;
```

----------------------------------------

TITLE: Creating Custom React Component Module in TypeScript
DESCRIPTION: Defines a TestMod module with a TestClass interface extending ComponentClass. The TestClass requires a 'reqd' prop of type 'any'. This demonstrates how to create a custom component with required props.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution12.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
declare module TestMod {
	interface TestClass extends ComponentClass<{reqd: any}> {
	}
	var Test: TestClass;
}
```

----------------------------------------

TITLE: Class and Variable Identifier Collision in TypeScript
DESCRIPTION: This snippet demonstrates a TypeScript error that occurs when attempting to declare both a class and a variable with the same identifier 'c1'. TypeScript prohibits duplicate identifiers in the same scope.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/augmentedTypesClass.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
//// class then var
class c1 { public foo() { } }
var c1 = 1; // error
```

----------------------------------------

TITLE: Demonstrating TypeScript's Property Name Validation with Record Type and 'satisfies' Operator
DESCRIPTION: This code demonstrates how TypeScript validates object properties against a Record type using the 'satisfies' operator. It shows a property 'x' being flagged as an error because it's not in the defined 'Keys' type. It also shows that even though 'd' is in 'Keys', accessing it on the object is still an error because it wasn't actually defined in the object literal.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeSatisfaction_propertyNameFulfillment.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
type Keys = 'a' | 'b' | 'c' | 'd';

const p = {
    a: 0,
    b: "hello",
    x: 8 // Should error, 'x' isn't in 'Keys'
} satisfies Record<Keys, unknown>;

// Should be OK -- retain info that a is number and b is string
let a = p.a.toFixed();
let b = p.b.substring(1);
// Should error even though 'd' is in 'Keys'
let d = p.d;
```

----------------------------------------

TITLE: Extending Class without 'super' call in constructor - TypeScript
DESCRIPTION: This snippet defines a class 'D' that extends 'A'. Similar to the previous example, the constructor of 'D' is missing the 'super()' call, which is a requirement for derived classes. This omission results in a TS2377 error during compilation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/staticPropSuper.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    class D extends A {
        private p: number = 11;
    
        constructor() {
        ~~~~~~~~~~~
!!! error TS2377: Constructors for derived classes must contain a 'super' call.
            var x = 1; // should error
        }
    }
```

----------------------------------------

TITLE: Simple Template Literal String Return
DESCRIPTION: A simple function that returns a template literal string with a parameter interpolated into it. The return type is inferred as string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function ft2(s: string) {
    return `abc${s}`;
}
```

----------------------------------------

TITLE: Package Configuration in package.json
DESCRIPTION: This JSON snippet defines the package configuration for 'pkg'. It specifies conditional exports for both import and require scenarios, allowing different module resolution based on the module system used.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesTripleSlashReferenceModeOverride1(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "exports": {
        "import": "./import.js",
        "require": "./require.js"
    }
}
```

----------------------------------------

TITLE: Enabling No Implicit Any in TypeScript Configuration
DESCRIPTION: This TypeScript configuration snippet enables the 'noImplicitAny' option. It requires explicit type annotations for variables and parameters that would otherwise implicitly have an 'any' type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/configFileExtendsAsList.errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "noImplicitAny": true
    }
}
```

----------------------------------------

TITLE: Declare Variable with Array Destructuring - TypeScript
DESCRIPTION: Declares a variable 'x' using array destructuring to assign the first element of the array `[1, 2]`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPattern4.sourcemap.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
var [ x ] = [1, 2];
```

----------------------------------------

TITLE: Implementing tRPC Builder and Initialization in TypeScript
DESCRIPTION: This snippet defines the TRPCBuilder class and exports the initTRPC constant. It includes complex type definitions for the create method and its return value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitIsolatedDeclarationErrorNotEmittedForNonEmittedFile.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { RootConfig } from './internals/config';
import { ErrorFormatterShape, PickFirstDefined, ErrorFormatter, DefaultErrorShape } from './internals/utils';
declare class TRPCBuilder<TParams> {
    create<TOptions extends Record<string, any>>(): {
        procedure: {};
        middleware: <TNewParams extends Record<string, any>>(fn: import("./middleware").MiddlewareFunction<{
            _config: RootConfig<{
                errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape>>>;
            }>;
        }, TNewParams>) => import("./middleware").MiddlewareBuilder<{
            _config: RootConfig<{
                errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape>>>;
            }>;
        }, TNewParams>;
        router: {};
    };
} 

export declare const initTRPC: TRPCBuilder<object>;
export {};
```

----------------------------------------

TITLE: Configuring TypeScript with Extended Configuration Files
DESCRIPTION: This snippet shows a TypeScript configuration file that extends multiple other configuration files. It demonstrates how to combine multiple tsconfig files for more flexible project setups.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/configFileExtendsAsList.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "extends": ["./tsconfig1.json", "./tsconfig2.json"]
}
```

----------------------------------------

TITLE: Importing and Using path.normalize Method
DESCRIPTION: Example of importing the Node.js path module and accessing its normalize method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/autoImportVerbatimCJS1.baseline.md#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import path = require("path");

path.normalize
```

----------------------------------------

TITLE: Type Assignment Error in TypeScript
DESCRIPTION: This snippet demonstrates an error when trying to assign an array of type 'number[]' to a variable of type 'string[]'. The TypeScript compiler throws an error TS2322 indicating a type mismatch. This serves as an example of strict type checking in TypeScript, emphasizing the need for type compatibility in variable assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericArrayAssignment1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var s: string[];
var n: number[];

s = n;
~
!!! error TS2322: Type 'number[]' is not assignable to type 'string[]'.
!!! error TS2322:   Type 'number' is not assignable to type 'string'.
```

----------------------------------------

TITLE: Rest Parameter Position Error in TypeScript
DESCRIPTION: This TypeScript code demonstrates the TS1014 error, which occurs when a rest parameter (...A) is not the last parameter in a function's parameter list. The rest parameter must always be the final parameter to correctly capture any remaining arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserParameterList1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    class C {
       F(...A, B) { }
         ~~~
!!! error TS1014: A rest parameter must be last in a parameter list.
    }
```

----------------------------------------

TITLE: Implementing Interface and Type Checking in TypeScript
DESCRIPTION: This snippet imports objects from 'items.ts', defines an interface 'IFoo', and attempts to use the imported objects in a function expecting 'IFoo'. It demonstrates TypeScript's type checking, showing errors when object properties don't match the interface.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDefaultStripsFreshness.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import B, {q} from "./items";

interface IFoo {
    foo: string;
}

function nFoo(x: IFoo) {}


nFoo(q); // for comparison

nFoo(B);
```

----------------------------------------

TITLE: Enforcing Super Call in TypeScript Derived Class Constructor
DESCRIPTION: This snippet ensures that a 'super' call is made before 'this' is accessed in the constructor of a derived class in TypeScript, a requirement enforced by TypeScript's static type checker. The snippet represents a class 'Derived' extending another class 'Based'. Attempting to set a property on 'this' before calling 'super()' causes a compilation error (TS17009).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkSuperCallBeforeThisAccessing2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Based { }
class Derived extends Based {
    public x: number;
    constructor() {
        this.x = 100;
        super();
        this.x = 10;
        var that = this;
    }
}
```

----------------------------------------

TITLE: Type Narrowing with instanceof in TypeScript
DESCRIPTION: This function demonstrates type narrowing using instanceof to handle a union type (C1 | C2 | C3) and access the 'item' property correctly based on the specific class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/instanceofWithStructurallyIdenticalTypes.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function foo1(x: C1 | C2 | C3): string {
    if (x instanceof C1) {
        return x.item;
    }
    else if (x instanceof C2) {
        return x.item[0];
    }
    else if (x instanceof C3) {
        return x.item;
    }
    return "error";
}
```

----------------------------------------

TITLE: Invalid Prop Type Assignment
DESCRIPTION: Shows type errors when attempting to assign invalid prop types or adding unexpected properties to a React component
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxLibraryManagedAttributes.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
const q = <BothWithSpecifiedGeneric bar="yes" baz={12} bat="ohno" />; // Error, baz not a valid prop
```

----------------------------------------

TITLE: JSX Spread with non-object types
DESCRIPTION: This code snippet demonstrates the TypeScript compiler error (TS2698) that occurs when attempting to spread non-object types such as 'never', 'null', and 'undefined' into JSX element attributes.  The code defines variables of these types and then attempts to use them in a spread attribute within a div element. The TypeScript compiler enforces that only object types can be used in spread attributes within JSX elements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadInvalidType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
namespace JSX {
    export interface IntrinsicElements { [key: string]: any }
}

const a = {} as never;
const b = null;
const c = undefined;

const d = <div { ...a } />
                    
const e = <div { ...b } />
                    
const f = <div { ...c } />
                    
```

----------------------------------------

TITLE: Failed Static Imports without Extensions in ESM
DESCRIPTION: Examples of static import statements that fail because they lack explicit file extensions. ESM format files have no index resolution or extension resolution capability when using 'node16' or 'nodenext' moduleResolution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node16).errors.txt#2025-04-21_snippet_21

LANGUAGE: typescript
CODE:
```
import * as m13 from "./";
import * as m14 from "./index";
import * as m15 from "./subfolder";
import * as m16 from "./subfolder/";
import * as m17 from "./subfolder/index";
import * as m18 from "./subfolder2";
import * as m19 from "./subfolder2/";
import * as m20 from "./subfolder2/index";
import * as m21 from "./subfolder2/another";
import * as m22 from "./subfolder2/another/";
import * as m23 from "./subfolder2/another/index";
```

----------------------------------------

TITLE: Destructuring Multiple Properties from an Object in TypeScript
DESCRIPTION: This snippet destructures multiple properties from 'robotB', assigning them to separate variables 'nameB' and 'skillB'. It showcases how destructuring can simplify variable assignment from objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatement.sourcemap.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
var nameB = robotB.name, skillB = robotB.skill;
```

----------------------------------------

TITLE: Defining JSX Namespace for Element Types
DESCRIPTION: This code defines the JSX namespace, which is essential for TypeScript to understand and type-check JSX syntax. It includes interfaces for Element, ElementAttributesProperty, ElementChildrenAttribute, IntrinsicAttributes, and IntrinsicElements. These interfaces help TypeScript to infer types and provide type safety when using JSX elements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxChildrenGenericContextualTypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    namespace JSX {
        export interface Element {}
        export interface ElementAttributesProperty { props: {}; }
        export interface ElementChildrenAttribute { children: {}; }
        export interface IntrinsicAttributes {}
        export interface IntrinsicElements { [key: string]: Element }
    }
```

----------------------------------------

TITLE: Dual Package Configuration - package.json
DESCRIPTION: Package configuration for a dual-format module supporting both ESM and CJS imports with type definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerNodeModules1(module=preserve).errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "dual",
  "version": "1.0.0",
  "type": "module",
  "main": "index.cjs",
  "types": "index.d.cts",
  "exports": {
    ".": {
      "import": "./index.js",
      "require": "./index.cjs"
    }
  }
}
```

----------------------------------------

TITLE: TypeScript Error TS2554: Too many arguments
DESCRIPTION: This snippet demonstrates a TypeScript compiler error (TS2554) that occurs when a function is called with more arguments than it expects. The function `foo` is defined to accept one argument, but is called with two arguments in the `foo(myC, myC)` example, triggering the error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionCall7.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo(a:m1.c1){ a.a = 1; }; 
var myC = new m1.c1(); 
foo(myC, myC); 
             ~~~
```

----------------------------------------

TITLE: Type Error in TypeScript Variable Assignment
DESCRIPTION: Shows an incorrect assignment of a number value (3) to a variable declared with type string, resulting in a TypeScript compilation error. This demonstrates TypeScript's static type checking system catching type mismatches at compile time.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedModulesNoEmitOnError.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const x: string = 3;
```

----------------------------------------

TITLE: Type Parameter Assignability with Basic Constraints in TypeScript
DESCRIPTION: Demonstrates basic type parameter assignability where U extends T. Assigning U to T is valid, but assigning T to U generates an error since T might be a different type than what U requires.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeParameterAssignability2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo<T, U extends T>(t: T, u: U) {
    t = u; // error
    u = t; // ok
}
```

----------------------------------------

TITLE: Optional Chaining with Type Assertions in TypeScript
DESCRIPTION: This snippet shows how optional chaining interacts with type assertions and custom type guard functions. It demonstrates how TypeScript handles type narrowing in these scenarios.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowOptionalChain.errors.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
declare function assert(x: unknown): asserts x;
declare function assertNonNull<T>(x: T): asserts x is NonNullable<T>;

function f30(o: Thing | undefined) {
    if (!!true) {
        assert(o?.foo);
        o.foo;
    }
    if (!!true) {
        assert(o?.foo === 42);
        o.foo;
    }
    if (!!true) {
        assert(typeof o?.foo === "number");
        o.foo;
    }
    if (!!true) {
        assertNonNull(o?.foo);
        o.foo;
    }
}
```

----------------------------------------

TITLE: TypeScript Import Examples with ECMAScript Module Resolution Errors
DESCRIPTION: TypeScript code demonstrating different import patterns and associated errors. Shows how non-relative imports work in ESM, while relative imports require explicit file extensions when using 'node16' or 'nodenext' module resolution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeNextImportModeImplicitIndexResolution.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import { item } from "pkg"; // should work (`index.js` is assumed to be the entrypoint for packages found via nonrelative import)
import { item as item2 } from "./pkg";  // shouldn't work (`index.js` is _not_ assumed to be the entrypoint for packages found via relative import)
import { item as item3 } from "./node_modules/pkg" // _even if they're in a node_modules folder_
```

----------------------------------------

TITLE: Demonstrating Constructor 'super' Call Requirement in TypeScript Class Inheritance
DESCRIPTION: This code snippet shows a TypeScript error occurring when a derived class constructor does not include a 'super' call. The error is raised in class B, which extends class A but fails to call 'super' in its constructor.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/superCallInsideClassExpression.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class A {
}

class C {
}

class B extends A {
    constructor() {
        var D = class extends C {
            constructor() {
                super();
            }
        }
    }
}
```

----------------------------------------

TITLE: Creating Instances Using InstanceType
DESCRIPTION: This snippet uses the built-in `InstanceType<T>` utility type to extract the instance type of classes and constructors.  It shows how to use it with `C` class, `any`, `never`, `string`, `Function`, and `Abstract` class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypes1.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
    class C {
        x = 0;
        y = 0;
    }
    
    abstract class Abstract {
        x = 0;
        y = 0;
    }
    
    type U10 = InstanceType<typeof C>;  // C
    type U11 = InstanceType<any>;  // any
    type U12 = InstanceType<never>;  // never
    type U13 = InstanceType<string>;  // Error
                            ~~~~~~
!!! error TS2344: Type 'string' does not satisfy the constraint 'abstract new (...args: any) => any'.
    type U14 = InstanceType<Function>;  // Error
                            ~~~~~~~~
!!! error TS2344: Type 'Function' does not satisfy the constraint 'abstract new (...args: any) => any'.
!!! error TS2344:   Type 'Function' provides no match for the signature 'new (...args: any): any'.
    type U15 = InstanceType<typeof Abstract>;  // Abstract
    type U16<T extends any[]> = InstanceType<new (x: string, ...args: T) => T[]>;  // T[]
    type U17<T extends any[]> = InstanceType<abstract new (x: string, ...args: T) => T[]>;  // T[]
```

----------------------------------------

TITLE: Accessing Private Static Fields in TypeScript Classes
DESCRIPTION: This code shows the correct and incorrect ways to access private static fields in TypeScript. Static private fields must be accessed through the class name (A.#myField) and not through the instance (this.#myField).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameStaticFieldAccess.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
    static #myField = "hello world";
    constructor() {
        console.log(A.#myField); //Ok
        console.log(this.#myField); //Error
                         ~~~~~~~~
!!! error TS2339: Property '#myField' does not exist on type 'A'.
    }
}
```

----------------------------------------

TITLE: Implementing For-Of Loop with Destructuring for Robot Array
DESCRIPTION: This snippet demonstrates how TypeScript transpiles a for-of loop with array destructuring for a static array of robots. It transforms the original for-of loop into a traditional for loop that manually extracts the first element from each robot array.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
for (var _9 = 0, _10 = [robotA, robotB]; _9 < _10.length; _9++) {
    numberB = _10[_9][0];
    console.log(numberB);
}
```

----------------------------------------

TITLE: TypeScript Error TS2345: Type mismatch in function argument
DESCRIPTION: This snippet demonstrates a TypeScript compiler error (TS2345) that arises when the type of the argument passed to a function does not match the type expected by the function's definition. The function `foo` expects an argument of type `m1.c1`, but it is called with a number (`4`), leading to a type incompatibility.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionCall7.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function foo(a:m1.c1){ a.a = 1; }; 
foo(4);
        ~
```

----------------------------------------

TITLE: Using Intl.RelativeTimeFormat in TypeScript
DESCRIPTION: This snippet shows how to use Intl.RelativeTimeFormat to format relative time expressions in different languages and styles. It includes examples for English and Spanish with different formatting options.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es2020IntlAPIs.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const rtf1 = new Intl.RelativeTimeFormat('en', { style: 'narrow' });

console.log(rtf1.format(3, 'quarter'));
//expected output: "in 3 qtrs."

console.log(rtf1.format(-1, 'day'));
//expected output: "1 day ago"

const rtf2 = new Intl.RelativeTimeFormat('es', { numeric: 'auto' });

console.log(rtf2.format(2, 'day'));
//expected output: "pasado mañana"
```

----------------------------------------

TITLE: Handling Optional Payload with Switch and Destructuring
DESCRIPTION: This snippet uses a `switch` statement within the check for `payload` being defined. This pattern allows handling different `kind` values and operating on the `payload` based on its type, given that it is defined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
    function f23({ kind, payload }: Action2) {
        if (payload) {
            switch (kind) {
                case 'A':
                    payload.toFixed();
                    break;
                case 'B':
                    payload.toUpperCase();
                    break;
                default:
                    payload;  // never
            }
        }
    }

```

----------------------------------------

TITLE: Root Package Configuration
DESCRIPTION: Package.json configuration specifying module type as ESM.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportHelpersCollisions3(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Exporting Async Function in a Module in TypeScript
DESCRIPTION: This snippet defines an asynchronous function within a module, demonstrating how to export functions as asynchronous while retaining proper TypeScript syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncAwaitIsolatedModules_es6.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
module M {
	export async function f1() { }
}
```

----------------------------------------

TITLE: Handling Union Types of Pets - TypeScript
DESCRIPTION: This snippet shows how to handle union types in TypeScript, specifically between different pet types (Dog and Fish). It demonstrates how checking the type of the union can allow safe access to the properties specific to one type while maintaining type safety. This helps in error prevention while working with complex data structures in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowingOfQualifiedNames.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// Repro from #48289

type Fish = { type: 'fish', hasFins: true }
type Dog = { type: 'dog', saysWoof: true }

type Pet = Fish | Dog;

function handleDogBroken<PetType extends Pet>(pet: PetType) {
    if(pet.type === 'dog') {
        const _okay1 = pet.saysWoof;
        const _okay2: typeof pet.saysWoof = pet.saysWoof;
    }
}

function handleDogWorking(pet: Pet) {
    if(pet.type === 'dog') {
        const _okay1 = pet.saysWoof;
        const _okay2: typeof pet.saysWoof = pet.saysWoof;
    }
}
```

----------------------------------------

TITLE: Defining Interfaces and Type Assignments in TypeScript
DESCRIPTION: This snippet defines interfaces and demonstrates various type assignments, including object literals and interface implementations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeMatch1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface I { z; }
interface I2 { z; }

var x1: { z: number; f(n: number): string; f(s: string): number; }
var x2: { z:number;f:{(n:number):string;(s:string):number;}; } = x1;
var i:I;
var i2:I2;
var x3:{ z; }= i;
var x4:{ z; }= i2;
var x5:I=i2;
```

----------------------------------------

TITLE: Error on String Assignment in TypeScript
DESCRIPTION: This snippet shows a TypeScript error where a 'String' object is assigned to a primitive 'string' type. It underscores the recommendation to use primitive types instead of their corresponding wrapper objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nativeToBoxedTypes.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
    var S = new String();
    var s = "foge";
    s = S;
    ~
!!! error TS2322: Type 'String' is not assignable to type 'string'.
!!! error TS2322:   'string' is a primitive, but 'String' is a wrapper object. Prefer using 'string' when possible.
```

----------------------------------------

TITLE: Importing Non-Existent Modules in TypeScript
DESCRIPTION: This code snippet shows three import statements that are attempting to import modules that do not exist or cannot be found by the TypeScript compiler. Each import results in a TS2307 error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sideEffectImports1(module=nodenext,nouncheckedsideeffectimports=true).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import "does-not-exist";
import "./does-not-exist-either";
import "./does-not-exist-either.js";
```

----------------------------------------

TITLE: TypeScript Function Generics with Type Constraints
DESCRIPTION: This snippet defines several functions in TypeScript, each using generics with different type constraints. The purpose is to demonstrate how TypeScript handles type assertions and conversions when a generic type 'T' is involved. Key dependencies include TypeScript type inference and constraints, with each function illustrating specific cases where type conversion might lead to an error due to insufficient type overlap. Expected inputs are generic types 'T' constrained by different conditions, and the output depends on successful or erroneous type conversion. One notable limitation is the possibility of incorrect type conversion if constraints are not adequately defined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericWithNoConstraintComparableWithCurlyCurly.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo<T>() {
    let x = {};
    x as T;
}
```

LANGUAGE: typescript
CODE:
```
function bar<T extends unknown>() {
    let x = {};
    x as T;
}
```

LANGUAGE: typescript
CODE:
```
function baz<T extends {}>() {
    let x = {};
    x as T;
}
```

LANGUAGE: typescript
CODE:
```
function bat<T extends object>() {
    let x = {};
    x as T;
}
```

LANGUAGE: typescript
CODE:
```
function no<T extends null | undefined>() {
    let x = {};
    x as T; // should error
    ~~~~~~
!!! error TS2352: Conversion of type '{}' to type 'T' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
!!! error TS2352:   'T' could be instantiated with an arbitrary type which could be unrelated to '{}'.
}
```

LANGUAGE: typescript
CODE:
```
function yes<T extends object | null | undefined>() {
    let x = {};
    x as T;
}
```

----------------------------------------

TITLE: Destructuring Assignment with Hardcoded Array in TypeScript
DESCRIPTION: This snippet shows destructuring assignment using a hardcoded array of robot objects. It extracts name and nested skill properties from each object in the array.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_19

LANGUAGE: typescript
CODE:
```
for (var _3 = 0, _4 = [{ name: "mower", skills: { primary: "mowing", secondary: "none" } },
    { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }]; _3 < _4.length; _3++) {
```

----------------------------------------

TITLE: Initializing and Destructuring Robot Arrays in TypeScript
DESCRIPTION: Defines robot types, initializes robot variables, and demonstrates destructuring in function returns and for-loop statements. Includes both simple and multi-skilled robot examples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
type Robot = [number, string, string];
type MultiSkilledRobot = [string, [string, string]];

let robotA: Robot = [1, "mower", "mowing"];

function getRobot() {
    return robotA;
}

let multiRobotA: MultiSkilledRobot = ["mower", ["mowing", ""]];
let multiRobotB: MultiSkilledRobot = ["trimmer", ["trimming", "edging"]];

function getMultiRobot() {
    return multiRobotA;
}

for (let [, nameA] = robotA, i = 0; i < 1; i++) {
    console.log(nameA);
}
```

----------------------------------------

TITLE: Initializing Complex Array Destructuring with Default Values in TypeScript
DESCRIPTION: This code demonstrates advanced array destructuring in a for loop initialization. It uses nested arrays, default values, and multiple levels of destructuring to assign values to variables like nameMA, primarySkillA, and secondarySkillA.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_37

LANGUAGE: typescript
CODE:
```
for (let [nameMA = "noName",
    [
        primarySkillA = "primary",
        secondarySkillA = "secondary"
    ] = ["none", "none"]
]  = ["trimmer", ["trimming", "edging"]], i
```

----------------------------------------

TITLE: Configuring TypeScript Project with tsconfig.json
DESCRIPTION: TypeScript configuration file that sets up the project with CommonJS modules, Node.js module resolution, and output directory. It also enables compile-on-save for development workflow.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/maxNodeModuleJsDepthDefaultsToZero.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "compileOnSave": true,
    "compilerOptions": {
        "module": "commonjs",
        "moduleResolution": "node",
        "outDir": "bin"
    }
}
```

----------------------------------------

TITLE: Demonstrating Missing Super Call Error in TypeScript Class Inheritance
DESCRIPTION: This code snippet shows a class hierarchy where class B extends class A, but its constructor fails to call 'super()'. This results in a TypeScript error. The code also includes a nested class D that correctly calls 'super()' in its constructor.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/superCallInsideClassDeclaration.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class A {
}

class C {
}

class B extends A {
    constructor() {
        class D extends C {
            constructor() {
                super();
            }
        }
    }
}
```

----------------------------------------

TITLE: Importing Module with Resolution Error in TypeScript
DESCRIPTION: This code attempts to import a module './foo' which cannot be resolved. The error suggests setting 'moduleResolution' to 'nodenext' or adding aliases to 'paths' option.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/shorthand-property-es6-es6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import {foo} from './foo';
const baz = 42;
const bar = { foo, baz };
```

----------------------------------------

TITLE: Array Parameter Destructuring with Default Values - TypeScript
DESCRIPTION: Defines a function `b6` that uses destructuring to extract elements from an array parameter and assigns default values if the elements are not provided. This shows how to use default values within destructuring for function parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration1ES5.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
"function b6([a, z, y] = [undefined, null, undefined]) { }"
```

----------------------------------------

TITLE: React Component Implementation with Unused Import Error
DESCRIPTION: Shows a React component structure with nested components Bar and Foo, where TypeScript reports an error about React being imported but apparently unused. This is a common TypeScript error when working with JSX, as React is actually needed for JSX transformation even if not explicitly referenced.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reactImportUnusedInNewJSXEmit(jsx=react-jsx).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
/// <reference path="/.lib/react16.d.ts" />

import React from "react";

function Bar() {
  return <div />;
}

export function Foo() {
  return <Bar />;
}
```

----------------------------------------

TITLE: Declaring JSX Intrinsic Elements in TypeScript
DESCRIPTION: This snippet declares a module 'JSX' that customizes intrinsic elements with specific attribute types. `div` elements must have an attribute `n`, while `span` elements require an attribute `m`. It includes examples that demonstrate correct and incorrect attribute usage, highlighting a TypeScript error when the attribute `q` is used instead of mandatory `m` for a `span`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxElementResolution4.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare module JSX {
	interface Element { }
	interface IntrinsicElements {
	    div: { n: string; };
	    span: { m: string; };
	}
}

// OK
<div n='x' />;

// OK
<span m='ok' />;

// Error
<span q='' />;
```

----------------------------------------

TITLE: Importing and Using fromBar from External Module in TypeScript
DESCRIPTION: Demonstrates importing fromBar from the 'bar' external module and referencing it in code. The import uses a non-relative path to access the module from node_modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/autoImportAllowTsExtensions1.baseline.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { fromBar } from "bar";

fromBar
```

----------------------------------------

TITLE: Error Message for Missing TypeScript Declaration
DESCRIPTION: This snippet provides the TypeScript compiler error message (TS7016) indicating that it cannot find a declaration file for the module 'foo'. It gives further instructions on how to resolve this error, either by installing type definitions or creating a custom declaration file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/untypedModuleImport_noImplicitAny.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
!!! error TS7016: Could not find a declaration file for module 'foo'. '/node_modules/foo/index.js' implicitly has an 'any' type.
!!! error TS7016:   Try `npm i --save-dev @types/foo` if it exists or add a new declaration (.d.ts) file containing `declare module 'foo';`
```

----------------------------------------

TITLE: Valid and Invalid Prop Usage with React Components in TypeScript
DESCRIPTION: This snippet demonstrates correct and incorrect prop usage with React components, showing TypeScript errors for misnamed props (naaame/naaaaaaame), incorrect prop types (number instead of string), and missing required props.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponents1.errors.txt#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
// OK
let a = <Greet name='world' />;
let a1 = <Greet name='world' extra-prop />;
// Error
let b = <Greet naaame='world' />;

// OK
let c = <Meet />;
let c1 = <Meet extra-prop/>;
// OK
let d = <Meet name='me' />;
// Error
let e = <Meet name={42} />;
// Error
let f = <Meet naaaaaaame='no' />;

// OK
let g = <MeetAndGreet prop-name="Bob" />;
// Error
let h = <MeetAndGreet extra-prop-name="World" />;
```

----------------------------------------

TITLE: Destructuring and Accessing Object Properties in TypeScript
DESCRIPTION: This function demonstrates object destructuring with rest parameters and attempts to access various properties on the resulting objects. It shows how TypeScript handles type checking and reports errors for accessing non-existent properties on different object types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringUnspreadableIntoRest.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function destructure<T extends A>(x: T) {
    const {                 ...rest1 } = x;
    const {                 ...rest2 } = x as A;
    const { publicProp: _1, ...rest3 } = x;
    const { publicProp: _2, ...rest4 } = x as A;

    rest1.publicProp;
    rest2.publicProp;
    rest3.publicProp;
    rest4.publicProp;

    rest1.privateProp;
    rest2.privateProp;
    rest3.privateProp;
    rest4.privateProp;

    rest1.protectedProp;
    rest2.protectedProp;
    rest3.protectedProp;
    rest4.protectedProp;

    rest1.getter;
    rest2.getter;
    rest3.getter;
    rest4.getter;

    rest1.setter;
    rest2.setter;
    rest3.setter;
    rest4.setter;

    rest1.method;
    rest2.method;
    rest3.method;
    rest4.method;
}
```

----------------------------------------

TITLE: TypeScript ESM Module Declaration (.d.mts file)
DESCRIPTION: TypeScript declaration file in ESM format successfully importing modules of different types. This is the only snippet without errors, showing proper ESM module interoperability.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExportsExclude(module=node18).errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
// esm format file
import * as cjs from "inner/cjs/index";
import * as mjs from "inner/mjs/index";
import * as type from "inner/js/index";
export { cjs };
export { mjs };
export { type };
```

----------------------------------------

TITLE: Error on accessing super properties before super call in TypeScript
DESCRIPTION: This snippet defines two classes, B and C1, where C1 incorrectly attempts to access a super property before invoking the 'super()' constructor call. This leads to TypeScript error TS17011. The constructor of derived class C1 should call 'super()' before accessing properties of its parent class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/superPropertyInConstructorBeforeSuperCall.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class B {
    constructor(x?: string) {}
    x(): string { return ""; }
}
class C1 extends B {
    constructor() {
        super.x();
        ~~~~~
!!! error TS17011: 'super' must be called before accessing a property of 'super' in the constructor of a derived class.
        super();
    }
}
```

----------------------------------------

TITLE: Defining Comparable Interface in TypeScript
DESCRIPTION: This code defines a generic interface `Comparable<T>` with a `compareTo` method that takes an argument of type `T` and returns a number. It serves as a base interface for defining comparable objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericAssignmentCompatWithInterfaces1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Comparable<T> {
   compareTo(other: T): number;
}
```

----------------------------------------

TITLE: Package.json - ESM Module Definition
DESCRIPTION: This JSON snippet defines a package as an ECMAScript Module (ESM) by setting the "type" field to "module". This allows the use of modern JavaScript features like top-level await and import/export syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsTopLevelAwait(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
    {
        "name": "package",
        "private": true,
        "type": "module"
    }
```

----------------------------------------

TITLE: Using JSX to render a component in TypeScript
DESCRIPTION: This snippet demonstrates the use of JSX to create React elements utilizing a component 'Comp'. The purpose is to showcase TypeScript errors when trying to use an undefined component. It also features destructuring properties within JSX elements. Expected input involves valid React/TypeScript environment with a defined component. The output is expected to show compilation errors due to the undefined 'Comp'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxSpreadTag(target=esnext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    declare const React: any;
    
    const t1 = <div {...<span />} />;
    const t2 = <div {...<span className="foo" />} />;
    const t3 = <Comp
                ~~~~
!!! error TS2304: Cannot find name 'Comp'.
        right={<div>x</div>}
        {...{ wrong: <div>x</div>}}
    />;
    const t4 = <Comp
                ~~~~
!!! error TS2304: Cannot find name 'Comp'.
        right={<div>x</div>}
        {...{ wrong() { return <div>x</div>; }}
    />;
    const t5 = <Comp
                ~~~~
!!! error TS2304: Cannot find name 'Comp'.
        right={<div>x</div>}
        {...{ get wrong() { return <div>x</div>; }}
    />;
    const t6 = <Comp
                ~~~~
!!! error TS2304: Cannot find name 'Comp'.
        right={<div>x</div>}
        {...{ set wrong(s) { let a = <div>x</div>; }}
    />;
```

----------------------------------------

TITLE: TypeScript Import in ESM file
DESCRIPTION: This snippet demonstrates the usage of imports in an ES module context. It imports the 'fs' module using both default and namespace imports. The imports are 'import {default as _fs} from "fs";' and 'import * as fs from "fs";'. These import statements are the same as those in the commonjs file, but do not produce errors due to the correct module type specified.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportHelpersCollisions(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    // esm format file
    import {default as _fs} from "fs";
    _fs.readFile;
    import * as fs from "fs";
    fs.readFile;
```

----------------------------------------

TITLE: Server Module Export Declarations
DESCRIPTION: Defines a TypeScript module that exports several variables and a default export
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ImportDefaultBindingFollowedWithNamedImportWithExport.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var a = 10;
export var x = a;
export var m = a;
export default {};
```

----------------------------------------

TITLE: Class and Enum Identifier Collision in TypeScript
DESCRIPTION: This snippet shows the error that occurs when trying to declare both a class and an enum with the same identifier 'c4'. In TypeScript, enum declarations can only merge with namespace or other enum declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/augmentedTypesClass.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
//// class then enum
class c4 { public foo() { } }
enum c4 { One } // error
```

----------------------------------------

TITLE: Object Destructuring with Inline Object in TypeScript
DESCRIPTION: This snippet demonstrates object destructuring with an inline object literal representing a Robot. It extracts name and skill properties and uses them in a for loop, showing type assertion to Robot.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
for (var _e = { name: "trimmer", skill: "trimming" }, nameA = _e.name, skillA = _e.skill, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Iterating with Default Values in TypeScript
DESCRIPTION: This snippet shows how to iterate over an array and assign default values to variables if the corresponding elements in the array are undefined. This ensures that the variables always have a value, even if the data is incomplete.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_23

LANGUAGE: typescript
CODE:
```
"    _11 = _62[_61], _12 = _11[0], numberA2 = _12 === void 0 ? -1 : _12, _13 = _11[1], nameA2 = _13 === void 0 ? \"noName\" : _13, _14 = _11[2], skillA2 = _14 === void 0 ? \"skill\" : _14;"
```

----------------------------------------

TITLE: Defining Shared Type Utility for Higher-Order Components
DESCRIPTION: Implements a Shared utility type that extracts common properties between injected props and target props. Used for type safety in higher-order components by ensuring compatible prop types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/circularlyConstrainedMappedTypeContainingConditionalNoInfiniteInstantiationDepth.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export type Shared<
    InjectedProps,
    DecorationTargetProps extends Shared<InjectedProps, DecorationTargetProps>
    > = {
        [P in Extract<keyof InjectedProps, keyof DecorationTargetProps>]?: InjectedProps[P] extends DecorationTargetProps[P] ? DecorationTargetProps[P] : never;
    };
```

----------------------------------------

TITLE: Log Variable to Console (JS/TS)
DESCRIPTION: This snippet demonstrates a basic console.log statement used to print the value of the variable 'nameA' to the console.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_86

LANGUAGE: javascript
CODE:
```
console.log(nameA);
```

----------------------------------------

TITLE: Unresolved Name Error: ModuleFlags
DESCRIPTION: This error indicates that the symbol 'ModuleFlags' is not defined in the current scope. This likely means that the 'ModuleFlags' type or variable is either not imported, not declared, or misspelled in the code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserRealSource11.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
"parserRealSource11.ts(1145,74): error TS2304: Cannot find name 'ModuleFlags'."
```

----------------------------------------

TITLE: JSDoc Object Parameter Documentation in JavaScript
DESCRIPTION: This snippet shows how to document the properties of an object parameter using JSDoc. It specifies the type of the object and its properties (x, y, z, w) using the syntax 'param {type} object.property'. It also demonstrates optional parameters with '=' and default values within brackets.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocParamTagTypeLiteral.errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
    /**
     * @param {Object} opts1 doc1
     * @param {string} opts1.x doc2
     * @param {string=} opts1.y doc3
     * @param {string} [opts1.z] doc4
     * @param {string} [opts1.w="hi"] doc5
     */
    function foo1(opts1) {
        opts1.x;
    }
    
    foo1({x: 'abc'});
```

----------------------------------------

TITLE: Defining JSX Module in TypeScript
DESCRIPTION: This snippet declares the JSX module with interfaces for Element, IntrinsicElements, and ElementAttributesProperty. It sets up the basic structure for JSX typing in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution10.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare module JSX {
	interface Element { }
	interface IntrinsicElements {
	}
	interface ElementAttributesProperty {
		props;
	}
}
```

----------------------------------------

TITLE: Function with Union Type Narrowing in TypeScript
DESCRIPTION: A function that demonstrates type narrowing on a union type 'A | B' using instanceof checks. When either instance check passes, the type is narrowed to A, otherwise to B.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionWithConflictingPrivates.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function f1(node: A | B) {
  if (node instanceof A || node instanceof A) {
    node;  // A
  }
  else {
    node;  // B
  }
  node;  // A | B
}
```

----------------------------------------

TITLE: Demonstrating TypeScript Type vs Value Usage Errors
DESCRIPTION: This code snippet demonstrates several common TypeScript errors related to using types as values. It shows how interfaces, type aliases, and custom types cannot be directly referenced as values at runtime, and the resulting error messages that TypeScript produces when these mistakes are made.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeUsedAsValueError.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Interface {

}

class SomeClass {

}

type TypeAliasForSomeClass = SomeClass;
type someType = { x: number };

function acceptsSomeType(a: someType) {

}

let one = Interface;
              ~~~~~~~~~
!!! error TS2693: 'Interface' only refers to a type, but is being used as a value here.
    let two = InterfaceNotFound;
              ~~~~~~~~~~~~~~~~~
!!! error TS2304: Cannot find name 'InterfaceNotFound'.
    let three = TypeAliasForSomeClass;
                ~~~~~~~~~~~~~~~~~~~~~
!!! error TS2693: 'TypeAliasForSomeClass' only refers to a type, but is being used as a value here.
    let four = new TypeAliasForSomeClass();
                   ~~~~~~~~~~~~~~~~~~~~~
!!! error TS2693: 'TypeAliasForSomeClass' only refers to a type, but is being used as a value here.
    let five = new TypeAliasForSomeClassNotFound();
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2304: Cannot find name 'TypeAliasForSomeClassNotFound'.
    let six = someType;
              ~~~~~~~~
!!! error TS2693: 'someType' only refers to a type, but is being used as a value here.
    acceptsSomeType(someType);
                    ~~~~~~~~
!!! error TS2693: 'someType' only refers to a type, but is being used as a value here.
    acceptsSomeType(someTypeNotFound);
                    ~~~~~~~~~~~~~~~~
!!! error TS2304: Cannot find name 'someTypeNotFound'.
```

----------------------------------------

TITLE: Re-exporting Types from A and B with Type Keyword
DESCRIPTION: This snippet re-exports types from modules 'a' and 'b' again using the 'type' keyword, ensuring only type information is exported.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports_errors(isolatedmodules=false).errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import type { A } from "./a";
import type { B } from "./b";
export type { A, B as BB };
```

----------------------------------------

TITLE: Configuring TypeScript Module Resolution
DESCRIPTION: This snippet shows an error message indicating that the TypeScript compiler requires the 'module' option to be set to 'Node16' when the 'moduleResolution' option is 'Node16'. This configuration is necessary for compatibility with Node.js modules. The error guides the user to update their TypeScript configuration accordingly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionWithModule(module=commonjs,moduleresolution=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
error TS5110: Option 'module' must be set to 'Node16' when option 'moduleResolution' is set to 'Node16'.

!!! error TS5110: Option 'module' must be set to 'Node16' when option 'moduleResolution' is set to 'Node16'.
```

----------------------------------------

TITLE: Defining React Component with Generic Props in TypeScript
DESCRIPTION: This snippet defines a React component 'FieldFeedback' with generic props extending from a base interface. It includes type checking for the 'when' prop, which can be a function returning a boolean or specific string values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reactDefaultPropsInferenceSuccess.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface BaseProps {
  when?: ((value: string) => boolean) | "a" | "b";
  error?: boolean;
}

interface Props extends BaseProps {
}

class FieldFeedback<P extends Props = BaseProps> extends React.Component<P> {
  static defaultProps = {
    when: () => true
  };

  render() {
    return <div>Hello</div>;
  }
}
```

----------------------------------------

TITLE: TypeScript Configuration with Deprecated Import Options
DESCRIPTION: TypeScript configuration file showing errors for deprecated import-related options. The configuration uses removed options 'preserveValueImports' and 'importsNotUsedAsValues' which should be replaced with the new 'verbatimModuleSyntax' option.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/verbatimModuleSyntaxCompat2.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "verbatimModuleSyntax": true,
        "isolatedModules": true,
        "preserveValueImports": true,
        "importsNotUsedAsValues": "error"
    }
}
```

----------------------------------------

TITLE: Use TypeScript Generic Interface with Valid Types
DESCRIPTION: Declares a variable `v2` using the generic interface `G` with types `A` and `C` as type arguments.  This is a valid usage because `C` satisfies the constraint that `U` must extend `B`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generics2.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
var v2: G<{ a: string }, C>;   // Ok, equivalent to G<A, C>
```

----------------------------------------

TITLE: Block-scoped Variable Usage Before Declaration
DESCRIPTION: Example showing TypeScript errors when attempting to use block-scoped variables before their declaration. Demonstrates errors for both a local block-scoped constant and a variable that shadows an outer scope declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constDeclarations-useBeforeDefinition.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
{
    c1;
    const c1 = 0;
}

var v1;
{
    v1;
    const v1 = 0;
}
```

----------------------------------------

TITLE: Handling Type Safety in Loops
DESCRIPTION: This snippet shows type safety management using type guards when variable types change inside loops. It highlights correct implementations of type guards and addresses potential errors of uninitialized conditions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardsAsAssertions.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```

    function foo2() {
        let x: string | number | boolean = 0;
        x;  // number
        while (cond) {
               ~~~~
!!! error TS2454: Variable 'cond' is used before being assigned.
            x;  // number, then string | number
            if (typeof x === "string") {
                x = x.slice();
            }
            else {
                x = "abc";
            }
            x;  // string
        }
        x;
    }
    
```

----------------------------------------

TITLE: Callback with Error Handling
DESCRIPTION: This snippet shows the usage of a callback function to handle asynchronous file reading. It defines a callback that accepts either `[err: null, data: unknown[]]` on success, or `[err: Error, data: undefined]` on failure. The snippet then uses a conditional check on `err` to determine whether to access `data.length` (on success) or `err.message` (on error).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_24

LANGUAGE: typescript
CODE:
```
    declare function readFile(path: string, callback: (...args: [err: null, data: unknown[]] | [err: Error, data: undefined]) => void): void;
    
    readFile('hello', (err, data) => {
        if (err === null) {
            data.length;
        }
        else {
            err.message;
        }
    });

```

----------------------------------------

TITLE: Defining a Class in TypeScript
DESCRIPTION: This snippet demonstrates a simple class definition in TypeScript. Such classes can be part of a larger module or application using object-oriented principles. No additional dependencies are required for this basic structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationNoErrorWithoutDeclarationsWithJsFileReferenceWithNoOut.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class c {
}
```

----------------------------------------

TITLE: Defining JSX IntrinsicElements Interface in TypeScript
DESCRIPTION: This snippet extends the global JSX namespace to include custom intrinsic elements 'a-b' and 'a-c'. It demonstrates how to declare custom JSX elements in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unicodeEscapesInJsxtags.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare global {
    namespace JSX {
        interface IntrinsicElements {
            "a-b": any;
            "a-c": any;
        }
    }
}
```

----------------------------------------

TITLE: Uncalled Function Checks in TypeScript Conditionals
DESCRIPTION: Example TypeScript code demonstrating compiler error detection for uncalled functions in conditional statements. Shows various scenarios with boolean functions and variables, where the compiler identifies cases where function references should likely be function calls instead.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/uncalledFunctionChecksInConditional.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function isFoo(): boolean;
declare function isBar(): boolean;
declare const isUndefinedFoo: (() => boolean) | undefined;

if (isFoo) {
    // error on isFoo
}

if (isFoo || isBar) {
    // error on isFoo, isBar
}

if (isFoo || isFoo()) {
    // error on isFoo
}

if (isUndefinedFoo || isFoo()) {
    // no error
}

if (isFoo && isFoo()) {
    // no error
}

declare const x: boolean;
declare const ux: boolean | undefined;
declare const y: boolean;
declare const uy: boolean | undefined;
declare function z(): boolean;
declare const uz: (() => boolean) | undefined;

if (x || isFoo) {
    // error on isFoo
}

if (isFoo || x) {
    // error on isFoo
}

if (x || y || z() || isFoo) {
    // error on isFoo
}

if (x || uy || z || isUndefinedFoo) {
    // error on z
}

if (ux || y || uz || isFoo) {
    // error on isFoo
}

if (x && z) {
    // no error
    z();
}
```

----------------------------------------

TITLE: Defining React Functional Components with Different Prop Requirements in TypeScript
DESCRIPTION: This snippet defines four functional components with different prop requirements: EmptyPropSFC (no props), Greet (requires name prop), Meet (optional name prop with default), and MeetAndGreet (requires prop-name).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponents1.errors.txt#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
function EmptyPropSFC() {
    return <div> Default Greeting </div>;
}

function Greet(x: {name: string}) {
	return <div>Hello, {x}</div>;
}
function Meet({name = 'world'}) {
	return <div>Hello, {name}</div>;
}
function MeetAndGreet(k: {"prop-name": string}) {
	return <div>Hi Hi</div>;
}
```

----------------------------------------

TITLE: TypeScript Module with Implicit Any Parameter Errors
DESCRIPTION: A TypeScript module containing multiple function declarations and arrow functions demonstrating various cases where parameters implicitly have 'any' type, which violates the noImplicitAny compiler setting. Shows examples with regular parameters, rest parameters, and function overloads.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyParametersInModule.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module M {
    // No implicit-'any' errors.
    function m_f1(): void { }

    // Implicit-'any' error for x.
    function m_f2(x): void { }

    // No implicit-'any' errors.
    function m_f3(x: any): void { }

    // Implicit-'any' errors for x, y, and z.
    function m_f4(x, y, z): void { }

    // Implicit-'any' errors for x and z.
    function m_f5(x, y: any, z): void { }

    // Implicit-'any[]' error for r.
    function m_f6(...r): void { }

    // Implicit-'any'/'any[]' errors for x and r.
    function m_f7(x, ...r): void { }

    // Implicit-'any' errors for x1, y2, x3, and y3.
    function m_f8(x1, y1: number): any;
    function m_f8(x2: string, y2): any;
    function m_f8(x3, y3): any { }

    // No implicit-'any' errors.
    var m_f9 = () => "";

    // Implicit-'any' error for x.
    var m_f10 = (x) => "";

    // Implicit-'any' errors for x, y, and z.
    var m_f11 = (x, y, z) => "";

    // Implicit-'any' errors for x and z.
    var m_f12 = (x, y: any, z) => "";

    // Implicit-'any[]' errors for r.
    var m_f13 = (...r) => "";

    // Implicit-'any'/'any[]' errors for x and r.
    var m_f14 = (x, ...r) => "";
}
```

----------------------------------------

TITLE: Defining Base and Derived Classes in TypeScript
DESCRIPTION: This snippet defines a base class 'Base' and two derived classes 'Sub1' and 'SubSub1'. It demonstrates method overriding and the use of 'super' to call parent class methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/super.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Base {
    constructor() {
        var x;
    }
    public foo() {
        return "base";
    }

    public bar() {
        return "basebar";
    }
}

class Sub1 extends Base {
    public foo() {
        return "sub1" + super.foo() + super.bar();
    }
}


class SubSub1 extends Sub1 {
    public foo() {
        return "subsub1" + super.foo();
    }
}
```

----------------------------------------

TITLE: Exporting Module Variables and Classes in TypeScript
DESCRIPTION: This snippet demonstrates the exporting of variables and classes in TypeScript. It is used in the creation of modules that can be imported elsewhere. The 'export' keyword is used to make members of the module available for import. Returns instances of the exported classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootRelativePathModuleMultifolderSpecifyOutputFile/node/mapRootRelativePathModuleMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Static Import Statements in TypeScript
DESCRIPTION: These import statements demonstrate how static imports are used in TypeScript. They import modules from specified paths, assuming CommonJS resolution unless specified otherwise. No output or side effects exist for variables like m24 to m34.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=nodenext).errors.txt#2025-04-21_snippet_8

LANGUAGE: TypeScript
CODE:
```
import m31 = require("./subfolder2/index");
import m32 = require("./subfolder2/another");
import m33 = require("./subfolder2/another/");
import m34 = require("./subfolder2/another/index");
void m24;
void m25;
void m26;
void m27;
void m28;
void m29;
void m30;
void m31;
void m32;
void m33;
void m34;
```

----------------------------------------

TITLE: @satisfies Type Mismatch Error (string)
DESCRIPTION: This snippet shows an error with `@satisfies`. The `t8` variable is annotated with `@satisfies {string}`, but it is assigned a number `(1)`.  This causes a TypeScript error since a `number` is not assignable to a `string`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocSatisfiesTag12.errors.txt#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
    /** @satisfies {string} */ const t8 = (1);
         ~~~~~~~~~
```

----------------------------------------

TITLE: CommonJS Module with ESM Import Errors
DESCRIPTION: A CommonJS format file attempting to import ECMAScript modules, which results in errors. The file demonstrates why CommonJS modules can't directly import ESM modules with 'require' and suggests using dynamic imports instead.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsConditionalPackageExports(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
// cjs format file
import * as cjs from "package/cjs";
import * as mjs from "package/mjs";
import * as type from "package";
cjs;
mjs;
type;
import * as cjsi from "inner/a";
import * as mjsi from "inner/b";
import * as typei from "inner";
import * as ts from "inner/types";
cjsi.cjsSource;
mjsi.cjsSource;
typei.implicitCjsSource;
ts.cjsSource;
```

----------------------------------------

TITLE: Rendering UserName1 Component with Incorrect Child Type
DESCRIPTION: This component shows the TypeScript error TS2322, indicating a type mismatch when using `FetchUser`. The error arises because React expects a `ReactNode` (such as a direct JSX element or a string) as children, not a function that returns a `ReactNode`. To fix this, the function passed as children should be invoked directly, not passed as a function to be invoked by React.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty4.errors.txt#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
function UserName1() {
    return (
        <FetchUser>


            
            { user => (
              ~~~~~~~~~
                <h1>{ user.Name }</h1>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            ) }
~~~~~~~~~~~~~
!!! error TS2322: Type '(user: IUser) => Element' is not assignable to type 'boolean | any[] | ReactChild'.
!!! related TS6212 file.tsx:36:15: Did you mean to call this expression?
            { user => (
              ~~~~~~~~~
                <h1>{ user.Name }</h1>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            ) }
~~~~~~~~~~~~~
!!! error TS2322: Type '(user: IUser) => Element' is not assignable to type 'boolean | any[] | ReactChild'.
!!! related TS6212 file.tsx:39:15: Did you mean to call this expression?
        </FetchUser>
    );
}
```

----------------------------------------

TITLE: Valid Async Function Declaration returning a number
DESCRIPTION: This snippet defines an async function `fn8` that returns a number. TypeScript infers the return type as `Promise<number>`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncFunctionDeclaration15_es6.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
async function fn8() { return 1; }
```

----------------------------------------

TITLE: Handling Excess Props and Typescript Compatibility Errors
DESCRIPTION: The code snippet demonstrates the implementation of a Higher Order Component (HOC) in TypeScript with React, highlighting issues with type compatibility and excess property checks. The code requires TypeScript and React as dependencies and uses TypeScript's JSX syntax. The focus is on type errors that occur when spreading non-object types and ensuring composability via correct type definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxExcessPropsAndAssignability.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/// <reference path="/.lib/react16.d.ts" />
    
    import * as React from 'react';
    
    const myHoc = <ComposedComponentProps extends any>(
        ComposedComponent: React.ComponentClass<ComposedComponentProps>,
    ) => {
        type WrapperComponentProps = ComposedComponentProps & { myProp: string };
        const WrapperComponent: React.ComponentClass<WrapperComponentProps> = null as any;
    
        const props: ComposedComponentProps = null as any;
    
        <WrapperComponent {...props} myProp={'1000000'} />;
                              ~~~~~
!!! error TS2698: Spread types may only be created from object types.
        <WrapperComponent {...props} myProp={1000000} />;
         ~~~~~~~~~~~~~~~~
!!! error TS2322: Type 'ComposedComponentProps & { myProp: number; }' is not assignable to type 'IntrinsicAttributes & IntrinsicClassAttributes<Component<WrapperComponentProps, any, any>> & Readonly<{ children?: ReactNode; }> & Readonly<WrapperComponentProps>'.
!!! error TS2322:   Type 'ComposedComponentProps & { myProp: number; }' is not assignable to type 'Readonly<WrapperComponentProps>'.
                              ~~~~~
!!! error TS2698: Spread types may only be created from object types.
```

----------------------------------------

TITLE: Exporting Variables and Classes in TypeScript
DESCRIPTION: This snippet exports a variable, a class, an instance of that class, and a function that returns the instance. It demonstrates how to define and structure modules in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootRelativePathModuleSimpleSpecifyOutputFile/node/mapRootRelativePathModuleSimpleSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Checking Type with Conditional Statements in TypeScript
DESCRIPTION: This snippet uses the type predicate functions defined above to check the type of variable 'x'. It illustrates how TypeScript can help catch errors by type checking based on the narrowed types of 'x'. The approach helps to ensure that the functions are applied to the correct types and saves from runtime errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowFromAnyWithTypePredicate.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
if (isFunction(x)) { // 'any' is not narrowed when target type is 'Function'
    x();
    x(1, 2, 3);
    x("hello!");
    x.prop;
}

if (isObject(x)) { // 'any' is not narrowed when target type is 'Object'
    x.method();
    x();
}

if (isAnything(x)) { // 'any' is narrowed to types other than 'Function'/'Object' (including {})
    x.method();
      ~~~~~~
!!! error TS2339: Property 'method' does not exist on type '{}'.
    x();
    ~
!!! error TS2349: This expression is not callable.
!!! error TS2349:   Type '{}' has no call signatures.
}
```

----------------------------------------

TITLE: Correct Usage of React Component with Props in TypeScript JSX
DESCRIPTION: Shows the correct way to use the MyComp component by providing all required props with correct types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxReactComponentWithDefaultTypeParameter3.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
let x = <MyComp a={10} b="hi" />
```

----------------------------------------

TITLE: Examples of TypeScript Errors in React Component Usage
DESCRIPTION: Demonstrates various TypeScript errors that occur when using the MainButton component incorrectly, including providing incompatible props, incorrect prop types, and missing required props.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentOverload5.errors.txt#2025-04-21_snippet_3

LANGUAGE: TSX
CODE:
```
// Error
const b0 = <MainButton to='/some/path' onClick={(e)=>{}}>GO</MainButton>;  // extra property;
const b1 = <MainButton onClick={(e: any)=> {}} {...obj0}>Hello world</MainButton>;  // extra property;
const b2 = <MainButton {...{to: "10000"}} {...obj2} />;  // extra property
const b3 = <MainButton {...{to: "10000"}} {...{onClick: (k) => {}}} />;  // extra property
const b4 = <MainButton {...obj3} to />;  // Should error because Incorrect type; but attributes are any so everything is allowed
const b5 = <MainButton {...{ onClick(e: any) { } }} {...obj0} />;  // Spread retain method declaration (see GitHub #13365), so now there is an extra attributes
const b6 = <MainButton {...{ onClick(e: any){} }} children={10} />;  // incorrect type for optional attribute
const b7 = <MainButton {...{ onClick(e: any){} }} children="hello" className />;  // incorrect type for optional attribute
const b8 = <MainButton data-format />;  // incorrect type for specified hyphanated name
```

----------------------------------------

TITLE: Unpacking Types with Conditional Inference
DESCRIPTION: This snippet defines a type alias `Unpacked<T>` that uses conditional types and inference to extract the element type from arrays, return type from functions, or the resolved type from Promises. It demonstrates how to extract different types based on the structure of the input type `T`.  It shows how to use it with `string`, `string[]`, `() => string`, `Promise<string>`, `Unpacked<Promise<string>[]>`, `any`, and `never`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypes1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    type Unpacked<T> =
        T extends (infer U)[] ? U :
        T extends (...args: any[]) => infer U ? U :
        T extends Promise<infer U> ? U :
        T;
    
    type T00 = Unpacked<string>;  // string
    type T01 = Unpacked<string[]>;  // string
    type T02 = Unpacked<() => string>;  // string
    type T03 = Unpacked<Promise<string>>;  // string
    type T04 = Unpacked<Unpacked<Promise<string>[]>>;  // string
    type T05 = Unpacked<any>;  // any
    type T06 = Unpacked<never>;  // never
```

----------------------------------------

TITLE: Using Readonly<T> with Generic Types in TypeScript
DESCRIPTION: Shows assignment compatibility between generic types T and Readonly<T>. The error demonstrates that Readonly<T> only permits reading, not writing, highlighting TypeScript's enforcement of immutability.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRelationships.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
function f20<T>(x: T, y: Readonly<T>, k: keyof T) {
    x[k] = y[k];
    y[k] = x[k];  // Error
}
```

----------------------------------------

TITLE: Iterating Over Nested Robot Skills
DESCRIPTION: This code snippet iterates over an array 'multiRobots', destructures each object to extract nested 'primary' and 'secondary' skills, and theoretically performs operations using these destructured values. The input should be an array of objects where each object has 'name' and nested 'skills' properties. Although the operations are not fully specified, this pattern is used for extracting nested data within objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_18

LANGUAGE: JavaScript
CODE:
```
for (var _24 = 0, multiRobots_3 = multiRobots; _24 < multiRobots_3.length; _24++) {
    // Operations would be performed using destructured values
}
```

----------------------------------------

TITLE: TypeScript Error TS2305
DESCRIPTION: This code snippet shows the TypeScript error message 'TS2305: Module '"./b"' has no exported member 'default'.'  This error occurs because the module './b' does not have a default export, but 'a.ts' attempts to import one.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reexportMissingDefault3.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
a.ts(2,10): error TS2305: Module '"./b"' has no exported member 'default'.
```

----------------------------------------

TITLE: Type Narrowing with Arrays and 'length' Property
DESCRIPTION: Functions test1, test2, and test3 demonstrate type narrowing on a union of array and record types. They show different approaches to checking for array-like objects using Array.isArray and the 'in' operator.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=false).errors.txt#2025-04-21_snippet_26

LANGUAGE: typescript
CODE:
```
function test1<T extends any[] | Record<string, any>>(obj: T) {
    if (Array.isArray(obj) || 'length' in obj) {
      obj;  // T
    }
    else {
      obj;  // T
    }
}

function test2<T extends any[] | Record<string, any>>(obj: T) {
    if (Array.isArray(obj)) {
      obj;  // T & any[]
    }
    else {
      obj;  // T
    }
}

function test3<T extends any[] | Record<string, any>>(obj: T) {
    if ('length' in obj) {
      obj;  // T
    }
    else {
      obj;  // T
    }
}
```

----------------------------------------

TITLE: Incorrect and Correct NaN Equality Checks in TypeScript
DESCRIPTION: This snippet demonstrates several incorrect attempts to compare a number with NaN using equality (== and ===) and inequality (!= and !==) operators in TypeScript. It showcases common TypeScript errors (TS2845) where such conditions always return false or true. It suggests using 'Number.isNaN(x)' or '!Number.isNaN(x)' for proper validation of NaN conditions. The reference code is located in 'nanEquality.ts'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nanEquality.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare const x: number;

if (x === NaN) {}
if (NaN === x) {}

if (x == NaN) {}
if (NaN == x) {}

if (x !== NaN) {}
if (NaN !== x) {}

if (x != NaN) {}
if (NaN != x) {}

if (x === ((NaN))) {}
if (((NaN)) === x) {}

if (x !== ((NaN))) {}
if (((NaN)) !== x) {}

if (NaN === NaN) {}
if (NaN !== NaN) {}

if (NaN == NaN) {}
if (NaN != NaN) {}

declare let y: any;
if (NaN === y[0][1]) {}
```

LANGUAGE: typescript
CODE:
```
function t1(value: number, NaN: number) {
    return value === NaN; // ok
}

function t2(value: number, NaN: number) {
    return NaN == value; // ok
}

function t3(NaN: number) {
    return NaN === NaN; // ok
}
```

----------------------------------------

TITLE: Handling ECMA Imports in TypeScript (CJS)
DESCRIPTION: This snippet illustrates issues and warnings when importing ECMA modules in a CommonJS TypeScript file. The main dependency is TypeScript compiler with target ECMAScript modules. It highlights incompatibilities and advises dynamic import calls. Key inputs are incorrectly imported modules and expected outputs would be error messages unless resolved.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackageExports(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// cjs format file
import * as cjs from "package/cjs";
import * as mjs from "package/mjs";
                     ~~~~~~~~~~~~~
import * as type from "package";
                      ~~~~~~~~~
cjs;
mjs;
type;
import * as cjsi from "inner/cjs";
import * as mjsi from "inner/mjs";
                      ~~~~~~~~~~~
import * as typei from "inner";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: Arrow Function with typeof this.no (Error TS7041, TS7017)
DESCRIPTION: This example shows an error caused by capturing the global value of 'this' within an arrow function. TypeScript reports that the containing arrow function captures the global value of 'this' and that the element implicitly has an 'any' type because 'typeof globalThis' has no index signature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeofThis.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
    const Test8 = () => {
        let x: typeof this.no = 1;
                      ~~~~
!!! error TS7041: The containing arrow function captures the global value of 'this'.
                           ~~
!!! error TS7017: Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature.
    }
```

----------------------------------------

TITLE: TypeScript Generic Type Argument Error
DESCRIPTION: This TypeScript code defines a generic interface `Foo<T>` that requires a type argument `T`. The code then attempts to use this interface as the type of an argument in a lambda expression passed to the `foo` function. However, the type argument `T` is omitted, leading to a TypeScript error TS2314 indicating that the generic type requires the missing argument. The `foo` function itself is a placeholder and doesn't contribute to the error but provides context for the lambda expression.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericLambaArgWithoutTypeArguments.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Foo<T> {
   x: T;
}
function foo(a) {
   return null;
}
foo((arg: Foo) => { return arg.x; });

```

----------------------------------------

TITLE: Declaring Variables with Object Destructuring in TypeScript
DESCRIPTION: Uses object destructuring to extract `primary` and `secondary` properties from the object returned by `getMultiRobot()`, assigning them to `primaryA` and `secondaryA` respectively. Default string values are provided if the properties are not found. Additionally, it declares and initializes an integer variable `i`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_72

LANGUAGE: TypeScript
CODE:
```
let {
    primary: primaryA = "primary",
    secondary: secondaryA = "secondary"
} = getMultiRobot(),
i = 0;
```

----------------------------------------

TITLE: Installing TypeScript Stable Version via NPM
DESCRIPTION: Command to install the latest stable version of TypeScript as a development dependency using npm package manager.
SOURCE: https://github.com/microsoft/typescript/blob/main/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install -D typescript
```

----------------------------------------

TITLE: Defining Generic Interface with Type Constraints in TypeScript
DESCRIPTION: This code defines two interfaces A and B, and a generic interface C with a constraint that requires the type parameter T to extend interface A. It demonstrates both valid and invalid usage of the generic interface, showing how TypeScript enforces type constraints.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constraints0.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface A {
	a: number;
}

interface B {
	b: string;
}

interface C<T extends A> {
    x: T;
}

var v1: C<A>; // should work
var v2: C<B>; // should not work

var y = v1.x.a; // 'a' should be of type 'number'
```

----------------------------------------

TITLE: Defining Interfaces and Classes in TypeScript
DESCRIPTION: This snippet defines an interface 'I' and several classes implementing or extending it. The main purpose is to structure data types used within TypeScript, demonstrating inheritance and type definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ifDoWhileStatements.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I {
    id: number;
}

class C implements I {
    id: number;
    name: string;
}

class C2 extends C {
    valid: boolean;
}

class D<T>{
    source: T;
    recurse: D<T>;
    wrapped: D<D<T>>
}
```

----------------------------------------

TITLE: TypeScript Error TS2304: Cannot find name 'T'
DESCRIPTION: This error signifies that the TypeScript compiler cannot resolve the type parameter 'T'. This commonly occurs when the type parameter is not properly declared or is out of scope.  Check for typos or missing type definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocOuterTypeParameters3.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
"jsdocOuterTypeParameters3.js(1,16): error TS2304: Cannot find name 'T'."
```

----------------------------------------

TITLE: Formatting Dates and Numbers with Intl in TypeScript
DESCRIPTION: This snippet demonstrates how to use Intl.DateTimeFormat and Intl.NumberFormat to format dates and numbers for different locales. It defines a function that logs formatted date and number for a given locale.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es2020IntlAPIs.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const count = 26254.39;
const date = new Date("2012-05-24");

function log(locale: string) {
  console.log(
    `${new Intl.DateTimeFormat(locale).format(date)} ${new Intl.NumberFormat(locale).format(count)}`
  );
}

log("en-US");
// expected output: 5/24/2012 26,254.39

log("de-DE");
// expected output: 24.5.2012 26.254,39
```

----------------------------------------

TITLE: Defining ClassComponent Interface in TypeScript
DESCRIPTION: Defines the `ClassComponent` interface that extends `Lifecycle`.  It includes optional `oninit` and required `view` methods.  The `view` method takes a `Vnode` and returns a number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subclassThisTypeAssignable01.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
    interface ClassComponent<A> extends Lifecycle<A, ClassComponent<A>> {
    	oninit?(vnode: Vnode<A, this>): number;
    	view(vnode: Vnode<A, this>): number;
    }
```

----------------------------------------

TITLE: Declaring Asynchronous Functions
DESCRIPTION: This snippet showcases the declaration of various asynchronous functions in TypeScript, illustrating different return types including default Promises and custom Promise types. It introduces async functions with both traditional function syntax and arrow function syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncAwaitIsolatedModules_es2017.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare var p: Promise<number>;
declare var mp: MyPromise<number>;

async function f0() { }
async function f1(): Promise<void> { }
async function f3(): MyPromise<void> { }

let f4 = async function() { }
let f5 = async function(): Promise<void> { }
let f6 = async function(): MyPromise<void> { }

let f7 = async () => { };
let f8 = async (): Promise<void> => { };
let f9 = async (): MyPromise<void> => { }; 
let f10 = async () => p;
let f11 = async () => mp;
let f12 = async (): Promise<number> => mp;
let f13 = async (): MyPromise<number> => p;
```

----------------------------------------

TITLE: Derived Class Constructor Errors in TypeScript
DESCRIPTION: This TypeScript code demonstrates errors related to constructors in derived classes. The `SomeDerived` class extends `SomeBase`, but its constructor is missing a `super()` call, which is required. Additionally, the code attempts to access properties of `super` before calling `super()` and incorrectly uses type arguments with `super`, all leading to various TypeScript errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/taggedTemplatesWithTypeArguments2.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    class SomeBase<A, B, C> {
        a!: A; b!: B; c!: C;
    }
    
    class SomeDerived<T> extends SomeBase<number, string, T> {
        constructor() {
        ~~~
!!! error TS2377: Constructors for derived classes must contain a 'super' call.
            super<number, string, T> `hello world`;
            ~~~~
!!! error TS17011: 'super' must be called before accessing a property of 'super' in the constructor of a derived class.
                 ~~~~~~~~~~~~~~~~~~~
!!! error TS2754: 'super' may not use type arguments.
                                     ~~~~~~~~~~~~~
!!! error TS1034: 'super' must be followed by an argument list or member access.
        }
    }
```

----------------------------------------

TITLE: Invalid Use of 'let' in Global Const Declaration (TypeScript)
DESCRIPTION: This snippet demonstrates an error when trying to use 'let' as a variable name in a global const declaration. TypeScript raises an error because 'let' is a reserved keyword and cannot be used as a variable name in 'const' declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/letInConstDeclarations_ES6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
const x = 50, let = 5;
```

----------------------------------------

TITLE: TypeScript Error: Cannot find name
DESCRIPTION: The TypeScript compiler reports an error TS2304 because the identifier 'foo' is not defined in the current scope.  This likely occurs during the destructuring assignment of the result of `foo()` to the variable `x`. The code attempts to cast the result of `foo()` to `any` before destructuring.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringTypeAssertionsES5_3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var { x } = <any>(foo());
```

----------------------------------------

TITLE: Object Parameter Destructuring with Type Annotation - TypeScript
DESCRIPTION: Defines a function `a3` that uses destructuring to extract properties from an object parameter.  The function includes a type annotation specifying the expected structure of the object, including nested objects and arrays. It demonstrates how to destructure and specify the types for complex object parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration1ES5.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
"function a3({j, k, l: {m, n}, q: [a, b, c]}: { j: number, k: string, l: { m: boolean, n: number }, q: (number|string)[] }) { };"
```

----------------------------------------

TITLE: Implementing Interface with Optional Parameters in TypeScript
DESCRIPTION: Defines an interface I1 with multiple method signatures having different parameter configurations including optional parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/optionalParamArgsTest.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I1 {
    C1M1():number;
    C1M2(C1M2A1:number):number;
    C1M3(C1M3A1?:number,C1M3A2?:number):number;
    C1M4(C1M4A1:number,C1M4A2?:number):number;
}
```

----------------------------------------

TITLE: TypeScript Module Import and Type Checking
DESCRIPTION: Demonstrates type checking across imported modules, including type error detection and module resolution
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesMaxDepthIncreased/amd/nodeModulesMaxDepthIncreased.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import * as m1 from "m1";
import * as m4 from "m4";

m1.f1("test");
m1.f2.a = 10;

m1.f2.person.age = "10";    // Should error if loaded the .js files correctly

let r2 = 3 + m4.foo; // Should be OK if correctly using the @types .d.ts file
```

----------------------------------------

TITLE: Defining Control Class and SelectableControl Interface - TypeScript
DESCRIPTION: Defines a base class 'Control' and an interface 'SelectableControl' that extends 'Control'. 'SelectableControl' requires a 'select' method which must be implemented by its subclasses. The 'Control' class contains a private 'state' property, while 'SelectableControl' mandates the 'select()' method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inheritance1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Control {
    private state: any;
}
interface SelectableControl extends Control {
    select(): void;
}
```

----------------------------------------

TITLE: Declaring React Component Function Signatures - TypeScript
DESCRIPTION: This snippet defines multiple versions of a React component function 'OneThing' with different prop types. It demonstrates how to declare a component with strict type checking for the props using TypeScript. The expected default props include string and number types, illustrating type enforcement in a React environment. Function overloads enable the component to accept varying shapes of props.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentOverload1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import React = require('react')

declare function OneThing(k: {yxx: string}): JSX.Element;
declare function OneThing(k: {yxx1: string, children: string}): JSX.Element;
declare function OneThing(l: {yy: number, yy1: string}): JSX.Element;
declare function OneThing(l: {yy: number, yy1: string, yy2: boolean}): JSX.Element;
declare function OneThing(l1: {data: string, "data-prop": boolean}): JSX.Element;

// OK
const c1 = <OneThing yxx='ok' />
const c2 = <OneThing yy={100}  yy1="hello"/>
const c3 = <OneThing yxx="hello" ignore-prop />
const c4 = <OneThing data="hello" data-prop />
const c5 = <OneThing yxx1='ok'>Hello</OneThing>
```

----------------------------------------

TITLE: TypeScript Module Imports in CommonJS Module (.cts file)
DESCRIPTION: TypeScript code in a .cts file (CommonJS format) importing modules. Contains errors for missing modules and an ESM module that cannot be imported with 'require' in a CommonJS context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExportsExclude(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// cjs format file
import * as cjsi from "inner/cjs/exclude/index";
import * as mjsi from "inner/mjs/exclude/index";
import * as typei from "inner/js/exclude/index";
cjsi;
mjsi;
typei;
import * as cjsi2 from "inner/cjs/index";
import * as mjsi2 from "inner/mjs/index";
import * as typei2 from "inner/js/index";
cjsi2;
mjsi2;
typei2;
```

----------------------------------------

TITLE: Importing Modules with ESM Extensions in TypeScript
DESCRIPTION: Example of importing modules with explicit file extensions (.js, .mjs, .cjs) as required by node16/nodenext module resolution. This shows the correct pattern for ESM imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import * as m1 from "./index.js";
import * as m2 from "./index.mjs";
import * as m3 from "./index.cjs";
import * as m4 from "./subfolder/index.js";
import * as m5 from "./subfolder/index.mjs";
import * as m6 from "./subfolder/index.cjs";
import * as m7 from "./subfolder2/index.js";
import * as m8 from "./subfolder2/index.mjs";
import * as m9 from "./subfolder2/index.cjs";
import * as m10 from "./subfolder2/another/index.js";
import * as m11 from "./subfolder2/another/index.mjs";
import * as m12 from "./subfolder2/another/index.cjs";
```

----------------------------------------

TITLE: Demonstrating Error TS2356 in TypeScript
DESCRIPTION: This snippet demonstrates multiple occurrences of the TypeScript error TS2356, which is triggered when an arithmetic operation is attempted on a type that is not 'any', 'number', 'bigint', or an enum. This type of error commonly appears when decrementing string types or other incompatible variable types in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/decrementOperatorWithUnsupportedStringType.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
var ResultIsNumber21 = A.foo()--;
```

LANGUAGE: TypeScript
CODE:
```
var ResultIsNumber22 = (STRING + STRING)--;
```

LANGUAGE: TypeScript
CODE:
```
--"";
```

LANGUAGE: TypeScript
CODE:
```
--STRING;
```

LANGUAGE: TypeScript
CODE:
```
--STRING1;
```

LANGUAGE: TypeScript
CODE:
```
--STRING1[0];
```

LANGUAGE: TypeScript
CODE:
```
--foo();
```

LANGUAGE: TypeScript
CODE:
```
--objA.a;
```

LANGUAGE: TypeScript
CODE:
```
--M.n;
```

LANGUAGE: TypeScript
CODE:
```
--objA.a, M.n;
```

LANGUAGE: TypeScript
CODE:
```
""--;
```

LANGUAGE: TypeScript
CODE:
```
STRING--;
```

LANGUAGE: TypeScript
CODE:
```
STRING1--;
```

LANGUAGE: TypeScript
CODE:
```
STRING1[0]--;
```

LANGUAGE: TypeScript
CODE:
```
foo()--;
```

LANGUAGE: TypeScript
CODE:
```
objA.a--;
```

LANGUAGE: TypeScript
CODE:
```
M.n--;
```

LANGUAGE: TypeScript
CODE:
```
objA.a--, M.n--;
```

----------------------------------------

TITLE: Demonstrating Protected Property Access Rules in TypeScript Class Hierarchies
DESCRIPTION: This code illustrates TypeScript's enforcement of protected property access rules across a class hierarchy. It shows which contexts allow access to protected properties and which generate errors, specifically when dealing with inheritance and property redefinition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/protectedClassPropertyAccessibleWithinSubclass2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base {
    protected x: string;
    method() {
        var b: Base;
        var d1: Derived1;
        var d2: Derived2;
        var d3: Derived3;
        var d4: Derived4;

        b.x;            // OK, accessed within their declaring class
        d1.x;           // OK, accessed within their declaring class
        d2.x;           // OK, accessed within their declaring class
        d3.x;           // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
        d4.x;           // OK, accessed within their declaring class
    }
}

class Derived1 extends Base {
    method1() {
        var b: Base;
        var d1: Derived1;
        var d2: Derived2;
        var d3: Derived3;
        var d4: Derived4;

        b.x;            // Error, isn't accessed through an instance of the enclosing class
        d1.x;           // OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class
        d2.x;           // Error, isn't accessed through an instance of the enclosing class
        d3.x;           // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
        d4.x;           // Error, isn't accessed through an instance of the enclosing class
    }
}

class Derived2 extends Base {
    method2() {
        var b: Base;
        var d1: Derived1;
        var d2: Derived2;
        var d3: Derived3;
        var d4: Derived4;

        b.x;            // Error, isn't accessed through an instance of the enclosing class
        d1.x;           // Error, isn't accessed through an instance of the enclosing class
        d2.x;           // OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class
        d3.x;           // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
        d4.x;           // OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class or one of its subclasses
    }
}

class Derived3 extends Derived1 {
    protected x: string;
    method3() {
        var b: Base;
        var d1: Derived1;
        var d2: Derived2;
        var d3: Derived3;
        var d4: Derived4;

        b.x;            // Error, isn't accessed through an instance of the enclosing class
        d1.x;           // Error, isn't accessed through an instance of the enclosing class
        d2.x;           // Error, isn't accessed through an instance of the enclosing class
        d3.x;           // OK, accessed within their declaring class
        d4.x;           // Error, isn't accessed through an instance of the enclosing class
    }
}

class Derived4 extends Derived2 {
    method4() {
        var b: Base;
        var d1: Derived1;
        var d2: Derived2;
        var d3: Derived3;
        var d4: Derived4;

        b.x;            // Error, isn't accessed through an instance of the enclosing class
        d1.x;           // Error, isn't accessed through an instance of the enclosing class
        d2.x;           // Error, isn't accessed through an instance of the enclosing class
    }
}
```

----------------------------------------

TITLE: Type Definition Export in TypeScript
DESCRIPTION: Exports a function type definition FC that returns void.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedModulesSketchyAliasLocalMerge(isolatedmodules=true,verbatimmodulesyntax=true).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export type FC = () => void;
```

----------------------------------------

TITLE: Exporting Default Object in TypeScript
DESCRIPTION: A simple TypeScript file that exports a default object with a numeric property. This file is error-free and serves as a dependency for the user.ts file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAssignmentImportMergeNoCrash.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export default {
    foo: 12
};
```

----------------------------------------

TITLE: Invalid uses of 'this' type in static class members
DESCRIPTION: Examples showing that 'this' type cannot be used in static class members. Static members exist at the class level rather than instance level, making 'this' type invalid.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisTypeErrors.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
class C2 {
    static x: this;
    static y = <this>undefined;
    static foo(x: this): this {
        return undefined;
    }
}
```

----------------------------------------

TITLE: Declaring Variables with Union Types in TypeScript
DESCRIPTION: This snippet demonstrates the declaration of variables with union types and object types in TypeScript. It shows how TypeScript handles type inference and assignment for union types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTypeWithUnionTypeObjectLiteral.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var str: string;
var num: number;
var strOrNumber: string | number = str || num;
var objStr: { prop: string };
var objNum: { prop: number };
var objStrOrNum1: { prop: string } | { prop: number } = objStr || objNum;
var objStrOrNum2: { prop: string | number } = objStr || objNum;
```

----------------------------------------

TITLE: Defining Component Interface in TypeScript React
DESCRIPTION: Defines a component props interface with string and number properties for type checking
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadAttributesResolution14.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface ComponentProps {
    property1: string;
    property2: number;
}
```

----------------------------------------

TITLE: Returning Multi-Robot Data and Logging Skills in TypeScript
DESCRIPTION: This snippet demonstrates the retrieval of multi-robot data using the function 'getMultiRobot()' and logs the first primary skill to the console. It exemplifies the use of destructuring to assign skills from the returned data. The function 'getMultiRobot()' needs to be defined prior to this snippet.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
for (_d = getMultiRobot(), _e = _d[1], primarySkillA = _e[0], secondarySkillA = _e[1], i = 0; i < 1; i++) {
    console.log(primarySkillA);
}
```

----------------------------------------

TITLE: Defining TypeScript Interfaces and Function Overloads
DESCRIPTION: Demonstrates interface declarations with call signatures, generic interfaces, and function overloading patterns. Shows error cases for incompatible overloads and undefined references.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectTypesIdentityWithCallSignatures3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// object types are identical structurally

interface I {
    (x: string): string;
}

interface I2<T> {
    (x: T): T;
}

var a: { (x: string): string }

function foo2(x: I);
function foo2(x: I); // error
function foo2(x: any) { }

function foo3(x: typeof a);
function foo3(x: typeof a); // error
function foo3(x: any) { }

function foo4(x: typeof b);
function foo4(x: typeof b); // error
function foo4(x: any) { }

function foo13(x: I);
function foo13(x: typeof a); // error
function foo13(x: any) { }

function foo14(x: I);
function foo14(x: I2<string>); // error
function foo14(x: any) { }

function foo14b(x: typeof a);
function foo14b(x: I2<string>); // error
function foo14b(x: any) { }

function foo15(x: I);
function foo15(x: I2<number>); // ok
function foo15(x: any) { }
```

----------------------------------------

TITLE: Object Destructuring with Property Mismatch in TypeScript
DESCRIPTION: This snippet demonstrates object destructuring patterns in TypeScript, including cases where property names don't match, causing type errors. It shows both simple and nested destructuring patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitDestructuringObjectLiteralPattern.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var { } = { x: 5, y: "hello" };
var { x4 } = { x4: 5, y4: "hello" };
var { y5 } = { x5: 5, y5: "hello" };
var { x6, y6 } = { x6: 5, y6: "hello" };
var { x7: a1 } = { x7: 5, y7: "hello" };
var { y8: b1 } = { x8: 5, y8: "hello" };
var { x9: a2, y9: b2 } = { x9: 5, y9: "hello" };

var { a: x11, b: { a: y11, b: { a: z11 }}} = { a: 1, b: { a: "hello", b: { a: true } } };
```

----------------------------------------

TITLE: Implementing Using Declarations with Iterator Objects in TypeScript
DESCRIPTION: This code snippet demonstrates various use cases of 'using' declarations with different types of iterator objects. It includes examples of valid usage with IteratorObject, Generator, custom Iterator implementations, and built-in collection iterators. It also shows an invalid case where the iterator lacks the required [Symbol.dispose] method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/usingDeclarationsWithIteratorObject.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare const i: Iterator<string, undefined>;
declare const io: IteratorObject<string, undefined, unknown>;
declare const g: Generator<string, void>;

class MyIterator extends Iterator<string> {
    next() { return { done: true, value: undefined }; }
}

function f() {
    // should pass
    using it0 = io;
    using it1 = g;
    using it2 = Iterator.from(i)
    using it3 = new MyIterator();
    using it4 = [].values();
    using it5 = new Map<string, string>().entries();
    using it6 = new Set<string>().keys();

    // should fail
    using it7 = i;
}
```

----------------------------------------

TITLE: Implementing Invalid Type Guard Function in TypeScript
DESCRIPTION: This snippet defines an invalid type guard function that attempts to narrow 'any' to 'number'. It demonstrates TypeScript's handling of such guards in conditional statements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardFunctionOfFormThisErrors.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
function invalidGuard(c: any): this is number {
    return false;
}

let c: number | number[];
if (invalidGuard(c)) {
    c;
}
else {
    c;
}

let holder = {invalidGuard};

if (holder.invalidGuard(c)) {
    c;
    holder;
}
else {
    c;
    holder;
}
```

----------------------------------------

TITLE: Type Usage Error in TypeScript Import
DESCRIPTION: Example showing incorrect usage of interface and namespace as values, resulting in compilation errors. The code attempts to access 'world' property on types that only exist at compile time.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeUsedAsValueError2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import HelloInterface = require("helloInterface");
import HelloNamespace = require("helloNamespace");

HelloInterface.world;
HelloNamespace.world;
```

----------------------------------------

TITLE: Type Export Declaration
DESCRIPTION: Defines and exports a TypeScript interface using named type export syntax
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/verbatimModuleSyntaxRestrictionsESM(esmoduleinterop=true).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
interface Typey {}
export type { Typey };
```

----------------------------------------

TITLE: Additional Import Errors in TypeScript
DESCRIPTION: This snippet shows import errors in a TypeScript module where the exported members are incorrectly referenced or do not exist. It emphasizes the importance of correct module definitions and imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/modulePreserve4.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
// main2.mts
import { x, y } from "./a"; // No y
// !!! error TS2305: Module '"./a"' has no exported member 'y'.
import a1 = require("./a"); // { x: 0 }
a1.x;
a1.default.x; // Arguably should exist but doesn't
// !!! error TS2339: Property 'default' does not exist on type 'typeof import("/a")'.
```

----------------------------------------

TITLE: Illustrating Derived Class Transitivity Error in TypeScript
DESCRIPTION: This code snippet demonstrates a TypeScript error (TS2322) related to derived class transitivity. The error occurs because the method 'foo' in class 'E' has a different signature (optional string parameter) than the method 'foo' in class 'C' (required number parameter), leading to type incompatibility when assigning an instance of 'E' to a variable of type 'C'. The classes 'C', 'D', and 'E' define a class hierarchy, and the type incompatibility arises from method overloading rules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassTransitivity.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// subclassing is not transitive when you can remove required parameters and add optional parameters

class C {
    foo(x: number) { }
}

class D extends C {
    foo() { } // ok to drop parameters
}

class E extends D {
    foo(x?: string) { } // ok to add optional parameters
}

var c: C;
var d: D;
var e: E;
c = e;
var r = c.foo(1);
var r2 = e.foo('');
```

----------------------------------------

TITLE: Assigning Readonly Arrays in TypeScript
DESCRIPTION: Demonstrates assignments between readonly and mutable arrays of different element types, highlighting type compatibility issues.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/readonlyTupleAndArrayElaboration.errors.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
const a1: readonly number[] = [1];
const a2: readonly boolean[] = a1;

const a3: readonly number[] = [1];
const a4: boolean[] = a3;

const a5: number[] = [1];
const a6: readonly boolean [] = a5;

const a7: number[] = [1];
const a8: boolean[] = a7;
```

----------------------------------------

TITLE: Generic Type Constraints with Extract Operation
DESCRIPTION: Function demonstrating complex generic type constraints using Extract utility type and string literal types. Shows type checking for property access and assignment between related types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccessErrors.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
function f3<T, K extends Extract<keyof T, string>, U extends T, J extends K>(
    t: T, k: K, tk: T[K], u: U, j: J, uk: U[K], tj: T[J], uj: U[J]): void {
    for (let key in t) {
        key = k // ok, K ==> keyof T
        k = key // error, keyof T =/=> K
        t[key] = tk; // ok, T[K] ==> T[keyof T]
        tk = t[key]; // error, T[keyof T] =/=> T[K]
    }
}
```

----------------------------------------

TITLE: For Loop with Object Literal Destructuring
DESCRIPTION: JavaScript for loop that initializes nameA by destructuring the name property from an object literal containing robot data with name and skill properties
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
for (var nameA = { name: "trimmer", skill: "trimming" }.name, i = 0; i < 1; i++) {
    console.log(nameA);
}
```

----------------------------------------

TITLE: Abstract Class Extension with Override and Missing Override Modifier in TypeScript
DESCRIPTION: Defines an abstract class `AD3` that extends the abstract class `AB`.  It correctly uses 'override' for the `foo` method but fails to use it for `bar`. The `baz` method has an implementation, but since it overrides an abstract method, it should also use the 'override' modifier, leading to a TypeScript compiler error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/override2.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
"    abstract class AD3 extends AB {\n        override foo(v: ''): void { } // need override?\n        abstract bar(): void;\n                 ~~~\n!!! error TS4116: This member must have an 'override' modifier because it overrides an abstract method that is declared in the base class 'AB'.\n        baz(): void { }\n    }"
```

----------------------------------------

TITLE: Defining TypeScript Class Foo with Constructor and Method
DESCRIPTION: Defines a TypeScript class `Foo` with a constructor that takes two parameters, `x` (declared as a public property) and `y` (not declared as a property). The `foo` method attempts to access `this.x` and `this.y`. Accessing `this.y` results in a TS2339 error because `y` was not defined as a member of the class `Foo`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertyOrdering2.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Foo {
    constructor(public x, y) { }
       foo() {
        var a = this.x;
        return this.y;
                    ~
!!! error TS2339: Property 'y' does not exist on type 'Foo'.
    }
}
```

----------------------------------------

TITLE: Async Function in a Module in TypeScript
DESCRIPTION: Defines an asynchronous function within a module in TypeScript, demonstrating modular organization of async functionality.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncAwaitIsolatedModules_es5.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
module M {
	export async function f1() { }
}
```

----------------------------------------

TITLE: TypeScript Array Destructuring with Defaults
DESCRIPTION: Demonstrates assigning default string values ('primary', 'secondary') to variables during array destructuring. If the source array ([ 'none', 'none' ]) provides values, they would override the defaults, but in this case, the defaults are effectively assigned as the source array matches the structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.sourcemap.txt#_snippet_23

LANGUAGE: TypeScript
CODE:
```
[ primarySkillA = "primary",
    secondarySkillA = "secondary"
] = 
[ "none"
  , 
  "none"
]
```

----------------------------------------

TITLE: Assigning Readonly and Mutable Arrays and Tuples in TypeScript
DESCRIPTION: This function demonstrates type compatibility issues between mutable and readonly arrays and tuples. It shows various assignment scenarios and their associated errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/readonlyArraysAndTuples.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function f1(ma: string[], ra: readonly string[], mt: [string, string], rt: readonly [string, string]) {
    ma = ra;  // Error
    ma = mt;
    ma = rt;  // Error
    ra = ma;
    ra = mt;
    ra = rt;
    mt = ma;  // Error
    mt = ra;  // Error
    mt = rt;  // Error
    rt = ma;  // Error
    rt = ra;  // Error
    rt = mt;
}
```

----------------------------------------

TITLE: Defining Union Type Literals in TypeScript
DESCRIPTION: The code snippet showcases the definitions of union type literals in TypeScript, including simple unions of basic types and more complex unions involving function and constructor types. Key variables such as 'simpleUnion', 'unionOfUnion', and 'arrayOfUnions' demonstrate valid union declarations. However, there are errors in redeclaring 'unionOfFunctionType' and 'unionOfConstructorType' due to type mismatches, as highlighted by TypeScript's TS2403 error diagnostics.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionTypeLiterals.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
    // basic valid forms of union literals
    
    var simpleUnion: string | number;
    var unionOfUnion: string | number | boolean;
    
    var arrayOfUnions: (string | number)[];
    var arrayOfUnions: Array<string | number>;
    
    var unionOfFunctionType: (() => string) | (() => number);
    var unionOfFunctionType: { (): string } | { (): number };
    var unionOfFunctionType: () => string | number;
        ~~~~~~~~~~~~~~~~~~~
!!! error TS2403: Subsequent variable declarations must have the same type.  Variable 'unionOfFunctionType' must be of type '(() => string) | (() => number)', but here has type '() => string | number'.
!!! related TS6203 unionTypeLiterals.ts:9:5: 'unionOfFunctionType' was also declared here.
    
    var unionOfConstructorType: (new () => string) | (new () => number);
    var unionOfConstructorType: { new (): string } | { new (): number };
    var unionOfConstructorType: new () => string | number;
        ~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2403: Subsequent variable declarations must have the same type.  Variable 'unionOfConstructorType' must be of type '(new () => string) | (new () => number)', but here has type 'new () => string | number'.
!!! related TS6203 unionTypeLiterals.ts:13:5: 'unionOfConstructorType' was also declared here.
```

----------------------------------------

TITLE: React Component Type Checking in TypeScript
DESCRIPTION: Demonstrates TypeScript type checking for React components including empty SFCs and components with required props. Shows various type errors when props are mismatched or missing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxUnionElementType6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TSX
CODE:
```
import React = require('react');

function EmptySFC1() {
    return <div>Hi</div>
}

function EmptySFC2() {
    return <div>Hello</div>
}

function SFC2(prop: { x: boolean }) {
    return <h1>World</h1>;
}

var EmptySFCComp = EmptySFC1 || EmptySFC2;
var SFC2AndEmptyComp = SFC2 || EmptySFC1;
// Error
let a = <EmptySFCComp x />;
let b = <SFC2AndEmptyComp x="hi" />;
let c = <SFC2AndEmptyComp />;
let d = <SFC2AndEmptyComp data-prop />;
```

----------------------------------------

TITLE: Defining Class and Returning Instance in TypeScript
DESCRIPTION: This snippet defines a class 'm1_c1' with a property and a function 'm1_f1' that returns an instance of the class. It illustrates basic class definition and instantiation in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootRelativePathMultifolderSpecifyOutputFile/node/sourceRootRelativePathMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Exporting Constants in JavaScript
DESCRIPTION: This snippet demonstrates how to export a constant in JavaScript using ECMAScript modules. It requires no dependencies and serves to provide a module format compatible with ES module imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/impliedNodeFormatEmit1(module=system).errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
export const _ = 0;
```

----------------------------------------

TITLE: Exporting a Constant in ESM Format
DESCRIPTION: This snippet shows how to export a constant variable in an ECMAScript module (ESM) format file. It defines a constant 'x' with a value of 1 and exports it.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node18).errors.txt#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
// esm format file
const x = 1;
export {x};
```

----------------------------------------

TITLE: Valid JSX Component Usage Examples
DESCRIPTION: Demonstrates correct usage of JSX components with type-safe attributes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution1.errors.txt#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
// OK
<test1 x={0} />; // OK
<test1 />; // OK
<test1 data-x={true} />; // OK

<test2 reqd='true' />; // OK
<test2 reqd={'true'} />; // OK
```

----------------------------------------

TITLE: Valid Static Imports with Extensions in ESM
DESCRIPTION: Working import statements that correctly specify file extensions (.js, .mjs, .cjs) for various modules. These imports follow the ESM module resolution rules requiring explicit file extensions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node16).errors.txt#2025-04-21_snippet_20

LANGUAGE: typescript
CODE:
```
import * as m1 from "./index.js";
import * as m2 from "./index.mjs";
import * as m3 from "./index.cjs";
import * as m4 from "./subfolder/index.js";
import * as m5 from "./subfolder/index.mjs";
import * as m6 from "./subfolder/index.cjs";
import * as m7 from "./subfolder2/index.js";
import * as m8 from "./subfolder2/index.mjs";
import * as m9 from "./subfolder2/index.cjs";
import * as m10 from "./subfolder2/another/index.js";
import * as m11 from "./subfolder2/another/index.mjs";
import * as m12 from "./subfolder2/another/index.cjs";
```

----------------------------------------

TITLE: Using JSX with Valid and Invalid Props
DESCRIPTION: Creates JSX elements with the 'Yadda' component, demonstrating both valid and invalid prop combinations, including a missing required 'foo' property in the second example.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ignoredJsxAttributes.errors.txt#2025-04-21_snippet_3

LANGUAGE: TSX
CODE:
```
let x1 = <Yadda foo="hello" data-yadda={42}/>;
let x2 = <Yadda bar="hello" data-yadda={42}/>;  // Error
```

----------------------------------------

TITLE: TypeScript Typeof with Unknown Symbol
DESCRIPTION: Demonstrates a TypeScript error when attempting to use typeof with an undefined variable 'whatsthis'. The code triggers error TS2304 indicating the variable cannot be found in the current scope.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeofUnknownSymbol.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// previously gave no error here
var x = typeof whatsthis
```

----------------------------------------

TITLE: Accessing Object Properties with For-In Loop in TypeScript
DESCRIPTION: This code snippet demonstrates a common TypeScript type error. It attempts to iterate over an object using a for-in loop and access properties using the loop variable as an index, which fails because the object has no index signature defined for string keys.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nonPrimitiveIndexingWithForInSupressError.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var a: object;

for (var key in a) {
    var value = a[key];
}
```

----------------------------------------

TITLE: Demonstrating @ts-expect-error Usage in TypeScript
DESCRIPTION: This code snippet illustrates various scenarios of using @ts-expect-error directives in TypeScript. It shows both valid and invalid uses, including different comment styles and type mismatches.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ts-expect-error.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// @ts-expect-error additional commenting
var invalidCommentedFancySingle: number = 'nope';

/*
 @ts-expect-error additional commenting */
var invalidCommentedFancyMulti: number = 'nope';

// @ts-expect-error additional commenting
var validCommentedFancySingle: string = 'nope';

/* @ts-expect-error additional commenting */
var validCommentedFancyMulti: string = 'nope';

// @ts-expect-error
var invalidCommentedPlainSingle: number = 'nope';

/*
 @ts-expect-error */
var invalidCommentedPlainMulti: number = 'nope';

// @ts-expect-error
var validCommentedPlainSingle: string = 'nope';

/* @ts-expect-error */
var validCommentedPlainMulti1: string = 'nope';

/*
@ts-expect-error */
var validCommentedPlainMulti2: string = 'nope';

var invalidPlain: number = 'nope';

var validPlain: string = 'nope';

// @ts-expect-error
(({ a: true } as const).a === false); // <-- compiles (as expected via comment)
(({ a: true } as const).a === false); // Should error

(({ a: true } as const).a === false); // error
(({ a: true } as const).a === false); // error

// @ts-expect-error: additional commenting with no whitespace
var invalidCommentedFancySingle: number = 'nope';

/*
 @ts-expect-error: additional commenting with no whitespace */
var invalidCommentedFancyMulti: number = 'nope';
```

----------------------------------------

TITLE: Defining an async arrow function in TypeScript
DESCRIPTION: This code correctly defines and exports an async arrow function that returns 0. This example doesn't throw any errors because it uses the 'async' keyword properly as part of function declaration syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDefaultAsyncFunction2.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export default async () => { return 0; };
```

----------------------------------------

TITLE: Import Examples with Various Module Resolution Scenarios
DESCRIPTION: This extensive snippet demonstrates different import scenarios in TypeScript, including imports from various file types (js, mjs, cjs) and different directory structures. It also shows examples of imports that may not work due to ECMAScript module resolution rules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node18).errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import * as m1 from "./index.js";
import * as m2 from "./index.mjs";
import * as m3 from "./index.cjs";
import * as m4 from "./subfolder/index.js";
import * as m5 from "./subfolder/index.mjs";
import * as m6 from "./subfolder/index.cjs";
import * as m7 from "./subfolder2/index.js";
import * as m8 from "./subfolder2/index.mjs";
import * as m9 from "./subfolder2/index.cjs";
import * as m10 from "./subfolder2/another/index.js";
import * as m11 from "./subfolder2/another/index.mjs";
import * as m12 from "./subfolder2/another/index.cjs";
// The next ones shouldn't all work - esm format files have no index resolution or extension resolution
import * as m13 from "./";
import * as m14 from "./index";
import * as m15 from "./subfolder";
import * as m16 from "./subfolder/";
import * as m17 from "./subfolder/index";
import * as m18 from "./subfolder2";
import * as m19 from "./subfolder2/";
import * as m20 from "./subfolder2/index";
import * as m21 from "./subfolder2/another";
import * as m22 from "./subfolder2/another/";
import * as m23 from "./subfolder2/another/index";
void m1;
void m2;
void m3;
void m4;
void m5;
void m6;
void m7;
void m8;
void m9;
void m10;
void m11;
void m12;
void m13;
void m14;
void m15;
void m16;
void m17;
void m18;
void m19;
void m20;
void m21;
void m22;
void m23;

// These should _mostly_ work - `import = require` always desugars to require calls, which do have extension and index resolution (but can't load anything that resolves to esm!)
import m24 = require("./");
import m25 = require("./index");
import m26 = require("./subfolder");
import m27 = require("./subfolder/");
import m28 = require("./subfolder/index");
import m29 = require("./subfolder2");
import m30 = require("./subfolder2/");
import m31 = require("./subfolder2/index");
import m32 = require("./subfolder2/another");
import m33 = require("./subfolder2/another/");
import m34 = require("./subfolder2/another/index");
void m24;
void m25;
void m26;
void m27;
void m28;
void m29;
void m30;
void m31;
void m32;
void m33;
void m34;

// These shouldn't work - dynamic `import()` always uses the esm resolver, which does not have extension resolution
const _m35 = import("./");
const _m36 = import("./index");
const _m37 = import("./subfolder");
const _m38 = import("./subfolder/");
const _m39 = import("./subfolder/index");
const _m40 = import("./subfolder2");
const _m41 = import("./subfolder2/");
```

----------------------------------------

TITLE: Destructuring MultiRobot Array with Default Skills in TypeScript
DESCRIPTION: This snippet shows complex array destructuring for a MultiRobot array. It extracts primary and secondary skills with default values, handling cases where skills might be undefined. The code uses nested destructuring and provides fallback values for each skill.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
var _w = _v[_u].skills, _x = _w === void 0 ? { primary: "nosKill", secondary: "noSkill" } : _w, _y = _x.primary, primaryA = _y === void 0 ? "primary" : _y, _z = _x.secondary, secondaryA = _z === void 0 ? "secondary" : _z;
```

----------------------------------------

TITLE: React Type Definitions
DESCRIPTION: TypeScript type definitions for React components including HTML attributes and node types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/excessiveStackDepthFlatArray.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
declare namespace React {
  type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = E;
  interface HTMLAttributes<T> {
    children?: ReactNode;
  }
  type ReactNode = ReactChild | ReactFragment | boolean | null | undefined;
  type ReactText = string | number;
  type ReactChild = ReactText;
  type ReactFragment = {} | ReactNodeArray;
  interface ReactNodeArray extends Array<ReactNode> {}
}
declare namespace JSX {
  interface IntrinsicElements {
    ul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;
    li: React.DetailedHTMLProps<React.HTMLAttributes<HTMLLIElement>, HTMLLIElement>;
  }
}
declare var React: any;
```

----------------------------------------

TITLE: Complex Logical Assignment with Conditional Statements in TypeScript
DESCRIPTION: This function demonstrates various uses of logical assignment operators (&&=, ||=, ??=) within conditional statements, showcasing type narrowing and potential undefined value issues.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment4(target=esnext).errors.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
declare const v: number
function doSomethingWithAlias(thing: ThingWithOriginal | undefined, defaultValue: ThingWithOriginal | undefined) {
    if (v === 1) {
        if (thing &&= thing.original) {
            thing.name;
        }
    }
    else if (v === 2) {
        if (thing &&= defaultValue) {
            thing.name;
            defaultValue.name
        }
    }
    else if (v === 3) {
        if (thing ||= defaultValue) {
            thing.name;
            defaultValue.name;
        }
    }
    else {
        if (thing ??= defaultValue) {
            thing.name;
            defaultValue.name;
        }
    }
}
```

----------------------------------------

TITLE: Defining Variables, Classes, and Functions in TypeScript
DESCRIPTION: This snippet shows the definition of a variable, a class with a public property, and a function that returns an instance of the class. No external dependencies are required. The code assigns a number to a variable, defines a class with a numeric property, and a function that returns an object. This is a basic demonstration of TypeScript's syntax for variable and class handling.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/outSingleFileSpecifyOutputFile/node/outSingleFileSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var a1 = 10;\nclass c1 {\n    public p1: number;\n}\n\nvar instance1 = new c1();\nfunction f1() {\n    return instance1;\n}
```

----------------------------------------

TITLE: TypeScript Interface Property Validation with Nested Structures
DESCRIPTION: Demonstrates TypeScript interfaces with optional properties and nested structures, showing various cases of property validation including excess property checks. Contains examples of both valid and invalid property assignments to highlight TypeScript's type checking capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nonObjectUnionNestedExcessPropertyCheck.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface IProps {
    iconProp?: string;
    nestedProp?: {
        testBool?: boolean;
    }
}

interface INestedProps {
    nestedProps?: IProps;
}

// These are the types of errors we want:
const propB1: IProps | number = { INVALID_PROP_NAME: 'share', iconProp: 'test' };

// Nested typing works here and we also get an expected error:
const propB2: IProps | number = { nestedProp: { asdfasdf: 'test' }, iconProp: 'test' };

// Want an error generated here but there isn't one.
const propA1: INestedProps | number = { nestedProps: { INVALID_PROP_NAME: 'share', iconProp: 'test' } };
```

----------------------------------------

TITLE: Interface Definition with Function Signatures in TypeScript
DESCRIPTION: Defines a Base interface containing multiple function signatures with varying parameter requirements and optionality.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithCallSignaturesWithOptionalParameters.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Base { 
    a: () => number;
    a2: (x?: number) => number;
    a3: (x: number) => number;
    a4: (x: number, y?: number) => number;
    a5: (x?: number, y?: number) => number;
    a6: (x: number, y: number) => number;
}
```

----------------------------------------

TITLE: ESM Module Imports in JavaScript
DESCRIPTION: An ECMAScript module format file importing from various module types including package/cjs, package/mjs, and inner modules. The file demonstrates how to properly import and use modules in an ESM context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsConditionalPackageExports(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// esm format file
import * as cjs from "package/cjs";
import * as mjs from "package/mjs";
import * as type from "package";
cjs;
mjs;
type;
import * as cjsi from "inner/a";
import * as mjsi from "inner/b";
import * as typei from "inner";
import * as ts from "inner/types";
cjsi.mjsSource;
mjsi.mjsSource;
typei.mjsSource;
ts.mjsSource;
```

----------------------------------------

TITLE: Defining TypeScript Types with JSDoc in JavaScript
DESCRIPTION: This snippet demonstrates how to use JSDoc to define a TypeScript type in JavaScript. It features an object "Foo" with boolean properties "a" and "b", and illustrates exporting an object assigned to this type. JSDoc comments are used for type annotations, requiring properties 'a' and 'b' which the exported object 'bar' does not satisfy, triggering a TypeScript error. Required dependencies include an environment that supports TypeScript checking in JavaScript files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocTypeTagOnExportAssignment3.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
/**
 * @typedef {Object} Foo
 * @property {boolean} a
 * @property {boolean} b
 */

const bar = { c: 1 };

/** @type {Foo} */
export default bar;
```

----------------------------------------

TITLE: Configuring Package Exports in package.json
DESCRIPTION: This snippet shows the package.json configuration for a dependency named 'dep'. It defines the package name, version, and exports configuration for different module systems and TypeScript declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/conditionalExportsResolutionFallback(moduleresolution=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "name": "dep",
  "version": "1.0.0",
  "exports": {
    ".": {
        "import": "./dist/index.mjs",
        "require": "./dist/index.js",
        "types": "./dist/index.d.ts"
    }
  }
}
```

----------------------------------------

TITLE: Checking Any vs Unknown TypeScript
DESCRIPTION: This snippet checks if 'any' is a strict supertype of 'unknown' in TypeScript. It involves declaring constants with these types and creating arrays to test subtype relationships.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowingMutualSubtypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
    declare const ru1: { [x: string]: unknown };
    declare const ra1: { [x: string]: any };
    
    const a1a = [ru1, ra1];  // { [x: string]: any }[]
    const a1b = [ra1, ru1];  // { [x: string]: any }[]
```

----------------------------------------

TITLE: Circular Class Inheritance in TypeScript
DESCRIPTION: This code demonstrates a circular inheritance pattern that creates errors in TypeScript. Class 'a' extends class 'b', while class 'b' extends class 'a', creating a circular reference that is not allowed in TypeScript's type system.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indirectSelfReference.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class a extends b{ }
class b extends a{ }
```

----------------------------------------

TITLE: Unknown Type Narrowing
DESCRIPTION: Shows type narrowing from unknown to string using an aliased type check.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowAliasing.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function f11(x: unknown) {
    const isString = typeof x === "string";
    if (isString) {
        let t: string = x;
    }
}
```

----------------------------------------

TITLE: ES6 Module Export Example in TypeScript
DESCRIPTION: Simple TypeScript code example showing ES6 module export syntax in a file named noImplicitUseStrict_es6.ts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitUseStrict_es6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var x = 0;
```

----------------------------------------

TITLE: Type Assertion on Array in TypeScript
DESCRIPTION: This snippet declares a variable `c12t3` and assigns it an empty array. The array is type-asserted as `number[]`, explicitly specifying that it should be treated as an array of numbers. This is an example of type assertion used with an array literal.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#2025-04-21_snippet_39

LANGUAGE: typescript
CODE:
```
var c12t3 = [];
```

----------------------------------------

TITLE: Defining Interfaces and Function with Type Mismatch in TypeScript
DESCRIPTION: This snippet defines interfaces for Ref and Container, and a function 'foo' that demonstrates a type mismatch error when passed an argument of the wrong type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/errorElaboration.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Ref<T> {
    prop: T;
}
interface Container<T> {
    m1: Container<Ref<T>>;
    m2: T;
}
declare function foo(x: () => Container<Ref<number>>): void;
let a: () => Container<Ref<string>>;
foo(a);
```

----------------------------------------

TITLE: Handling Type Assignment Error in TypeScript
DESCRIPTION: This snippet illustrates a TypeScript error where a string array is incorrectly assigned to a number array. It showcases TypeScript's type system and how it prevents incompatible assignments. The key parameters include the variable declarations 'x' as a string array and 'y' as a number array, which leads to the compile-time error when 'x' is assigned to 'y'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkSpecialPropertyAssignments.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var A = {};
A.B = class {
    m() {
        /** @type {string[]} */
        var x = [];
        /** @type {number[]} */
        var y;
        y = x;
        ~
!!! error TS2322: Type 'string[]' is not assignable to type 'number[]'.
!!! error TS2322:   Type 'string' is not assignable to type 'number'.
    }
};
```

----------------------------------------

TITLE: Implementing Logical Assignment with OR in TypeScript
DESCRIPTION: This function uses the ||= (logical OR assignment) operator to assign a default arrow function to 'f' if it's falsy, then invokes it.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment5(target=esnext).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function foo2 (f?: (a: number) => void) {
    f ||= (a => a)
    f(42)
}
```

----------------------------------------

TITLE: Configuring Paths in TypeScript
DESCRIPTION: This JSON snippet configures TypeScript compiler options to set the base URL and define paths so that specific module locations can be resolved. It requires 'baseUrl' to be defined and paths mapped relative to it, with 'foo' mapped to 'foo/foo.ts'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/pathMappingBasedModuleResolution_withExtension_failedLookup.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "baseUrl": ".",
        "paths": {
            "foo": ["foo/foo.ts"]
        }
    }
}
```

----------------------------------------

TITLE: Implementing Class with Decorators in TypeScript
DESCRIPTION: This snippet defines a class 'C' with decorated methods, accessors, and properties. It includes both instance and static members, demonstrating various use cases for decorators in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-sourceMap(target=es2015).sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class C {
    @dec
    @dec
    method() {}

    @dec
    @dec
    get x() { return 1; }

    @dec
    @dec
    set x(value: number) { }

    @dec
    @dec
    y = 1;

    @dec
    @dec
    accessor z = 1;

    @dec
    @dec
    static #method() {}

    @dec
    @dec
    static get #x() { return 1; }

    @dec
    @dec
    static set #x(value: number) { }

    @dec
    @dec
    static #y = 1;

    @dec
    @dec
    static accessor #z = 1;
}
```

----------------------------------------

TITLE: Union Type Error Demonstration in TypeScript
DESCRIPTION: Demonstrates how TypeScript handles type errors for misspelled union type values in both function parameters and direct assignments. The example shows errors when trying to use 'hdpvd' instead of 'hddvd' in a union type of disc formats.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/errorsForCallAndAssignmentAreSimilar.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function minimalExample1() {
    type Disc =
        | { kind: "hddvd" }
        | { kind: "bluray" }

    function foo(x: Disc[]) {
    }

    foo([
        { kind: "bluray", },
        { kind: "hdpvd", }
    ]);

    const ds: Disc[] = [
        { kind: "bluray", },
        { kind: "hdpvd", }
    ];
}
```

----------------------------------------

TITLE: Defining and Using Obj2 with JSX in TypeScript
DESCRIPTION: This snippet defines an interface Obj2type with a 'pr' property and uses it in a JSX expression. It shows another valid usage of JSX attributes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxElementResolution12.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
interface Obj2type {
	new(n: string): { q?: number; pr: any };
}
var Obj2: Obj2type;
<Obj2 x={10} />; // OK
```

----------------------------------------

TITLE: React JSX with TypeScript Errors
DESCRIPTION: This snippet demonstrates React JSX code that uses an undefined component 'Comp'. The TypeScript compiler throws an error 'Cannot find name 'Comp'' because the component is not declared or imported. The code showcases different ways to pass props to the component, including spreading objects and using properties with different accessors (get, set).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxSpreadTag(target=es2015).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
 declare const React: any;
    
    const t1 = <div {...<span />} />;
    const t2 = <div {...<span className="foo" />} />;
    const t3 = <Comp
                ~~~~
!!! error TS2304: Cannot find name 'Comp'.
        right={<div>x</div>}
        {...{ wrong: <div>x</div>}}
    />;
    const t4 = <Comp
                ~~~~
!!! error TS2304: Cannot find name 'Comp'.
        right={<div>x</div>}
        {...{ wrong() { return <div>x</div>; }}}
    />;
    const t5 = <Comp
                ~~~~
!!! error TS2304: Cannot find name 'Comp'.
        right={<div>x</div>}
        {...{ get wrong() { return <div>x</div>; }}}
    />;
    const t6 = <Comp
                ~~~~
!!! error TS2304: Cannot find name 'Comp'.
        right={<div>x</div>}
        {...{ set wrong(s) { let a = <div>x</div>; }}}
    />;
```

----------------------------------------

TITLE: Union Types Function Calls with Errors - TypeScript
DESCRIPTION: Demonstrates various type errors that occur when attempting to use union type function signatures with incompatible argument types. This snippet highlights parameter type mismatches and instances where arguments are missing or incorrect according to the defined types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionTypeCallSignatures.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var numOrDate: number | Date;
var strOrBoolean: string | boolean;
var strOrNum: string | number;

// If each type in U has call signatures and the sets of call signatures are identical ignoring return types, 
// U has the same set of call signatures, but with return types that are unions of the return types of the respective call signatures from each type in U.
var unionOfDifferentReturnType: { (a: number): number; } | { (a: number): Date; };
numOrDate = unionOfDifferentReturnType(10);
strOrBoolean = unionOfDifferentReturnType("hello"); // error 
~~~~~~~~~~~~~~~~
!!! error TS2322: Type 'number | Date' is not assignable to type 'string | boolean'.
!!! error TS2322:   Type 'number' is not assignable to type 'string | boolean'.
                                              ~~~~~~~
!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
    unionOfDifferentReturnType1(true); // error in type of parameter
                                ~~~~
!!! error TS2769: No overload matches this call.
!!! error TS2769:   Overload 1 of 2, '(a: number): number | Date', gave the following error.
!!! error TS2769:     Argument of type 'boolean' is not assignable to parameter of type 'number'.
!!! error TS2769:   Overload 2 of 2, '(a: string): string | boolean', gave the following error.
!!! error TS2769:     Argument of type 'boolean' is not assignable to parameter of type 'string'.
    
var unionOfDifferentReturnType1: { (a: number): number; (a: string): string; } | { (a: number): Date; (a: string): boolean; };
numOrDate = unionOfDifferentReturnType1(10);
strOrBoolean = unionOfDifferentReturnType1("hello");
unionOfDifferentReturnType1(true); // error in type of parameter
                                ~~~~
!!! error TS2769: No overload matches this call.
!!! error TS2769:   Overload 1 of 2, '(a: number): number | Date', gave the following error.
!!! error TS2769:     Argument of type 'boolean' is not assignable to parameter of type 'number'.
!!! error TS2769:   Overload 2 of 2, '(a: string): string | boolean', gave the following error.
!!! error TS2769:     Argument of type 'boolean' is not assignable to parameter of type 'string'.
    unionOfDifferentReturnType1(); // error missing parameter
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2554: Expected 1 arguments, but got 0.
!!! related TS6210 unionTypeCallSignatures.ts:12:37: An argument for 'a' was not provided.
    
var unionOfDifferentParameterTypes: { (a: number): number; } | { (a: string): Date; };
unionOfDifferentParameterTypes(10);// error - no call signatures
                                   ~~
!!! error TS2345: Argument of type '10' is not assignable to parameter of type 'never'.
unionOfDifferentParameterTypes("hello");// error - no call signatures
                                   ~~~~~~~
!!! error TS2345: Argument of type '"hello"' is not assignable to parameter of type 'never'.
unionOfDifferentParameterTypes();// error - no call signatures
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2554: Expected 1 arguments, but got 0.
!!! related TS6210 unionTypeCallSignatures.ts:18:40: An argument for 'a' was not provided.
    
var unionOfDifferentNumberOfSignatures: { (a: number): number; } | { (a: number): Date; (a: string): boolean; };
unionOfDifferentNumberOfSignatures(); // error - no call signatures
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2554: Expected 1 arguments, but got 0.
!!! related TS6210 unionTypeCallSignatures.ts:23:44: An argument for 'a' was not provided.
unionOfDifferentNumberOfSignatures(10); // error - no call signatures
unionOfDifferentNumberOfSignatures("hello"); // error - no call signatures
                                       ~~~~~~~
!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
    
var unionWithDifferentParameterCount: { (a: string): string; } | { (a: string, b: number): number; } ;
unionWithDifferentParameterCount();// needs more args
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2554: Expected 2 arguments, but got 0.
!!! related TS6210 unionTypeCallSignatures.ts:28:69: An argument for 'a' was not provided.
unionWithDifferentParameterCount("hello");// needs more args
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2554: Expected 2 arguments, but got 1.
!!! related TS6210 unionTypeCallSignatures.ts:28:80: An argument for 'b' was not provided.
unionWithDifferentParameterCount("hello", 10);// OK
    
var unionWithOptionalParameter1: { (a: string, b?: number): string; } | { (a: string, b?: number): number; };
strOrNum = unionWithOptionalParameter1('hello');
strOrNum = unionWithOptionalParameter1('hello', 10);
strOrNum = unionWithOptionalParameter1('hello', "hello"); // error in parameter type
                                                    ~~~~~~~
!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
strOrNum = unionWithOptionalParameter1(); // error
               ~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2554: Expected 1-2 arguments, but got 0.
!!! related TS6210 unionTypeCallSignatures.ts:33:37: An argument for 'a' was not provided.
    
var unionWithOptionalParameter2: { (a: string, b?: number): string; } | { (a: string, b: number): number };
strOrNum = unionWithOptionalParameter2('hello'); // error no call signature
               ~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2554: Expected 2 arguments, but got 1.
!!! related TS6210 unionTypeCallSignatures.ts:39:87: An argument for 'b' was not provided.
strOrNum = unionWithOptionalParameter2('hello', 10); // error no call signature
strOrNum = unionWithOptionalParameter2('hello', "hello"); // error no call signature
                                                    ~~~~~~~
!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
strOrNum = unionWithOptionalParameter2(); // error no call signature
               ~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2554: Expected 2 arguments, but got 0.
!!! related TS6210 unionTypeCallSignatures.ts:39:76: An argument for 'a' was not provided.
    
var unionWithOptionalParameter3: { (a: string, b?: number): string; } | { (a: string): number; };
```

----------------------------------------

TITLE: String Case Transformation with Intrinsic Types in TypeScript
DESCRIPTION: Demonstrates the use of TypeScript's intrinsic types for string case transformations: Uppercase, Lowercase, Capitalize, and Uncapitalize. These types modify the casing of string literal types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes1.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
type Cases<T extends string> = `${Uppercase<T>} ${Lowercase<T>} ${Capitalize<T>} ${Uncapitalize<T>}`;

type TCA1 = Cases<'bar'>;  // 'BAR bar Bar bar'
type TCA2 = Cases<'BAR'>;  // 'BAR bar BAR bAR'
```

----------------------------------------

TITLE: Module Definition with Class and Function in TypeScript
DESCRIPTION: This code snippet describes a TypeScript module with a declared variable, a class, and a function that returns a class instance. It is part of a structured project which uses multiple files with references. There are no additional dependencies required.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcemapMultifolderSpecifyOutputFile/node/sourcemapMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var m2_a1 = 10;
class m2_c1 {
    public m2_c1_p1: number;
}

var m2_instance1 = new m2_c1();
function m2_f1() {
    return m2_instance1;
}
```

----------------------------------------

TITLE: Destructuring MultiRobot Object with Default Values in TypeScript
DESCRIPTION: This code snippet demonstrates complex object destructuring in TypeScript. It extracts 'name' and 'skills' properties from a MultiRobot object, providing default values for each property. The 'skills' object is further destructured into 'primary' and 'secondary' properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_29

LANGUAGE: TypeScript
CODE:
```
for (let {
    name: nameA = "noName",
    skills: {
        primary: primaryA = "primary",
        secondary: secondaryA = "secondary"
    } = { primary: "none", secondary: "none" }
} = <MultiRobot>{ 
  name: "trimmer", 
  skills: { 
    primary: "trimming", 
    secondary: "edging"
  }
}
name: nameA = "noName"
nameA = "noName",
skills: {
    primary: primaryA = "primary",
    secondary: secondaryA = "secondary"
} = { primary: "none", secondary: "none" }
skills: {
```

----------------------------------------

TITLE: Defining Greeter Class and Functions in TypeScript Module
DESCRIPTION: This snippet defines a module 'Foo.Bar' containing a Greeter class and two functions: 'foo' for creating a single greeter and 'foo2' for creating multiple greeters. It also includes usage examples of these components.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
module Foo.Bar {
    "use strict";

    class Greeter {
        constructor(public greeting: string) {
        }

        greet() {
            return "<h1>" + this.greeting + "</h1>";
        }
    }


    function foo(greeting: string): Foo.Bar.Greeter {
        return new Greeter(greeting);
    }

    var greeter = new Greeter("Hello, world!");
    var str = greeter.greet();

    function foo2(greeting: string, ...restGreetings: string[]) {
        var greeters: Greeter[] = [];
        greeters[0] = new Greeter(greeting);
        for (var i = 0; i < restGreetings.length; i++) {
            greeters.push(new Greeter(restGreetings[i]));
        }

        return greeters;
    }

    var b = foo2("Hello", "World", "!");
    for (var j = 0; j < b.length; j++) {
        b[j].greet();
    }
}
```

----------------------------------------

TITLE: Installing TypeScript Nightly Build via NPM
DESCRIPTION: Command to install the nightly (preview) build of TypeScript as a development dependency using npm package manager.
SOURCE: https://github.com/microsoft/typescript/blob/main/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install -D typescript@next
```

----------------------------------------

TITLE: Handling TypeScript Configuration Errors
DESCRIPTION: This snippet documents various TypeScript compilation errors encountered when module resolution settings are misconfigured or when JavaScript files are included without the 'allowJs' option. These errors pertain to missing declaration files for the 'foo' and 'bar' modules, indicating that their package.json or typings might need updates.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvesWithoutExportsDiagnostic1(moduleresolution=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
error TS5110: Option 'module' must be set to 'Node16' when option 'moduleResolution' is set to 'Node16'.
error TS6504: File '/node_modules/bar/index.js' is a JavaScript file. Did you mean to enable the 'allowJs' option?
  The file is in the program because:
    Root file specified for compilation
error TS6504: File '/node_modules/bar/index.mjs' is a JavaScript file. Did you mean to enable the 'allowJs' option?
  The file is in the program because:
    Root file specified for compilation
error TS6504: File '/node_modules/foo/index.js' is a JavaScript file. Did you mean to enable the 'allowJs' option?
  The file is in the program because:
    Root file specified for compilation
error TS6504: File '/node_modules/foo/index.mjs' is a JavaScript file. Did you mean to enable the 'allowJs' option?
  The file is in the program because:
    Root file specified for compilation
/index.mts(1,21): error TS7016: Could not find a declaration file for module 'foo'. '/node_modules/foo/index.mjs' implicitly has an 'any' type.
  There are types at '/node_modules/foo/index.d.ts', but this result could not be resolved when respecting package.json "exports". The 'foo' library may need to update its package.json or typings.
/index.mts(2,21): error TS7016: Could not find a declaration file for module 'bar'. '/node_modules/bar/index.mjs' implicitly has an 'any' type.
  There are types at '/node_modules/@types/bar/index.d.ts', but this result could not be resolved when respecting package.json "exports". The '@types/bar' library may need to update its package.json or typings.
```

----------------------------------------

TITLE: Error Reporting for Undefined Variables in TypeScript
DESCRIPTION: This code snippet reports multiple TypeScript errors due to the undefined variable 'asdf'. The errors indicate various contexts where 'asdf' is expected to be defined, such as variable declarations and function parameters. Developers should ensure all symbols are correctly defined or imported to avoid these errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownSymbols1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
unknownSymbols1.ts(1,9): error TS2304: Cannot find name 'asdf'.
unknownSymbols1.ts(2,8): error TS2304: Cannot find name 'asdf'.
unknownSymbols1.ts(4,17): error TS2304: Cannot find name 'asdf'.
unknownSymbols1.ts(4,35): error TS2304: Cannot find name 'asdf'.
unknownSymbols1.ts(6,12): error TS2304: Cannot find name 'asdf'.
unknownSymbols1.ts(9,10): error TS2304: Cannot find name 'asdf'.
unknownSymbols1.ts(12,10): error TS2304: Cannot find name 'asdf'.
unknownSymbols1.ts(13,12): error TS2304: Cannot find name 'asdf'.
unknownSymbols1.ts(16,21): error TS2304: Cannot find name 'asdf'.
unknownSymbols1.ts(17,21): error TS2304: Cannot find name 'adsf'.
unknownSymbols1.ts(22,15): error TS2304: Cannot find name 'asdf'.
unknownSymbols1.ts(30,14): error TS2339: Property 'asdf' does not exist on type 'C5'.
unknownSymbols1.ts(30,21): error TS2304: Cannot find name 'asdf'.

==== unknownSymbols1.ts (13 errors) ====
    var x = asdf;
            ~~~~
!!! error TS2304: Cannot find name 'asdf'.
    var y: asdf;
           ~~~~
!!! error TS2304: Cannot find name 'asdf'.
    function foo(x: asdf, y: number): asdf { }
                    ~~~~
!!! error TS2304: Cannot find name 'asdf'.
                                      ~~~~
!!! error TS2304: Cannot find name 'asdf'.
    function foo2() {
        return asdf;
               ~~~~
!!! error TS2304: Cannot find name 'asdf'.
    }
    
    var z = <asdf>x; // should be an error
             ~~~~
!!! error TS2304: Cannot find name 'asdf'.
    
    class C<T> {
        foo: asdf;
             ~~~~
!!! error TS2304: Cannot find name 'asdf'.
        bar: C<asdf>;
               ~~~~
!!! error TS2304: Cannot find name 'asdf'.
    }
    
    class C2 implements asdf { }
                        ~~~~
!!! error TS2304: Cannot find name 'asdf'.
    interface I extends adsf { }
                        ~~~~
!!! error TS2304: Cannot find name 'adsf'.
    
    class C3 { constructor(x: any) { } }
    class C4 extends C3 {
        constructor() {
            super(asdf);
                  ~~~~
!!! error TS2304: Cannot find name 'asdf'.
        }
    }
    
    var x2 = this.asdf; // no error, this is any
    
    class C5 {
        constructor() {
            this.asdf = asdf;
                 ~~~~
!!! error TS2339: Property 'asdf' does not exist on type 'C5'.
                        ~~~~
!!! error TS2304: Cannot find name 'asdf'.
        }
    }
```

----------------------------------------

TITLE: Importing and Exporting Modules in TypeScript
DESCRIPTION: This snippet shows how to import and export modules using TypeScript with an ECMAScript Module format. It highlights typical errors you might encounter when modules are not properly referenced. The key parameters include module names and import paths; an essential dependency is the inner/other module which may require a type declaration file. Inputs are module paths, and expected outputs are the imported/exported modules. Limitation: It assumes all modules are properly set up and available.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSourceTs(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    // esm format file
    import { Thing } from "inner/other";
                          ~~~~~~~~~~~~~
!!! error TS2307: Cannot find module 'inner/other' or its corresponding type declarations.
    export const a = (await import("inner")).x();
                 ~
!!! error TS2742: The inferred type of 'a' cannot be named without a reference to './node_modules/inner/other.js'. This is likely not portable. A type annotation is necessary.
    import {a as a2} from "package";
```

----------------------------------------

TITLE: TypeScript Module Import Examples
DESCRIPTION: Comprehensive example showing various module import patterns in TypeScript, including relative imports with different file extensions and directory structures. Demonstrates common import syntax errors when using node16/nodenext module resolution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=nodenext).errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
import * as m1 from "./index.js";
import * as m2 from "./index.mjs";
import * as m3 from "./index.cjs";
import * as m4 from "./subfolder/index.js";
import * as m5 from "./subfolder/index.mjs";
import * as m6 from "./subfolder/index.cjs";
import * as m7 from "./subfolder2/index.js";
import * as m8 from "./subfolder2/index.mjs";
import * as m9 from "./subfolder2/index.cjs";
import * as m10 from "./subfolder2/another/index.js";
import * as m11 from "./subfolder2/another/index.mjs";
import * as m12 from "./subfolder2/another/index.cjs";

// The next ones shouldn't all work - esm format files have no index resolution or extension resolution
import * as m13 from "./";
import * as m14 from "./index";
import * as m15 from "./subfolder";
import * as m16 from "./subfolder/";
import * as m17 from "./subfolder/index";
import * as m18 from "./subfolder2";
import * as m19 from "./subfolder2/";
import * as m20 from "./subfolder2/index";
import * as m21 from "./subfolder2/another";
import * as m22 from "./subfolder2/another/";
import * as m23 from "./subfolder2/another/index";
```

----------------------------------------

TITLE: Type Argument Mismatch in TypeScript
DESCRIPTION: This snippet demonstrates a type error where a function attempts to call the 'foo' method of a generic class with a specific type ('number') when the generic type parameter is not guaranteed to be a number. This results in a TypeScript error because the provided argument type ('number') is not assignable to the potentially arbitrary type 'T'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericWithOpenTypeParameters1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    var f = <T>(x: B<T>) => { return x.foo(1); } // error
                                           ~
```

----------------------------------------

TITLE: Logging nameA from static array
DESCRIPTION: For loop implementation using array destructuring with a static array [2, "trimmer", "trimming"]. It extracts the second element ("trimmer") into nameA variable and logs it to console.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
for (var _b = [2, "trimmer", "trimming"], nameA = _b[1], i = 0; i < 1; i++) {
    console.log(nameA);
}
```

----------------------------------------

TITLE: Rendering React Component with Invalid Children
DESCRIPTION: This code attempts to render the `Foo` component with children that do not match the defined `PropsType`. Specifically, it includes a `div` element cast as `unknown` and a string literal "aa".  This mismatch leads to the TypeScript error TS2769, indicating that the provided children are not assignable to the expected types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxChildrenWrongType.errors.txt#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
const b = (
    <Foo>
     ~~~ 
            {<div/> as unknown}
            {"aa"}
    </Foo>
);
```

----------------------------------------

TITLE: Implementing ES6 Class with Source Mapping
DESCRIPTION: Defines a TypeScript class 'A' with a constructor and method 'B' that returns 42. The code includes source mapping information for debugging and tracing back to the original TypeScript source.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6-sourcemap-amd.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
class A {
    constructor() {
    }
    B() {
        return 42;
    }
}
//# sourceMappingURL=es6-sourcemap-amd.js.map
```

----------------------------------------

TITLE: Implementing Function Currying
DESCRIPTION: This snippet shows a generic curry function that takes a function and partially applies its arguments over multiple calls. It allows flexible function invocation with varying argument counts and types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/variadicTuples1.errors.txt#2025-04-21_snippet_8

LANGUAGE: TypeScript
CODE:
```
function curry<T extends unknown[], U extends unknown[], R>(f: (...args: [...T, ...U]) => R, ...a: T) {
    return (...b: U) => f(...a, ...b);
}
```

----------------------------------------

TITLE: Implementing a TodoList Component with JSX Spread (TypeScript)
DESCRIPTION: This component 'TodoList' manages an array of todos and attempts to use JSX spread syntax for child elements. It requires 'react/jsx-runtime' module types and fails when attempting to spread a non-array child. The alternative function, 'TodoListNoError', sidesteps this restriction by casting to 'any'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadChildrenInvalidType(jsx=react-jsx,target=es5).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function TodoList({ todos }: TodoListProps) {
    return <div>
        {...<Todo key={todos[0].id} todo={todos[0].todo} />}
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2609: JSX spread child must be an array type.
    </div>;
}
function TodoListNoError({ todos }: TodoListProps) {
    // any is not checked
    return <div>
        {...(<Todo key={todos[0].id} todo={todos[0].todo} /> as any)}
    </div>;
}
let x: TodoListProps;
    <TodoList {...x}/>
```

----------------------------------------

TITLE: Greeter Class Instantiation and Method Call
DESCRIPTION: Creates a new instance of Greeter class and calls its greet method. The code includes source mapping details showing the relationship between generated code and original source.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationClasses.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var greeter = new Greeter("Hello, world!");
var str = greeter.greet();
```

----------------------------------------

TITLE: ESM Static Imports with Extensions
DESCRIPTION: This snippet demonstrates static ESM imports with explicit file extensions.  It showcases how to properly import modules using relative paths when the `moduleResolution` is set to `node16` or `nodenext`.  It imports modules from the same directory and subdirectories, specifying the `.js`, `.mjs`, and `.cjs` extensions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=nodenext).errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import * as m1 from "./index.js";
    import * as m2 from "./index.mjs";
    import * as m3 from "./index.cjs";
    import * as m4 from "./subfolder/index.js";
    import * as m5 from "./subfolder/index.mjs";
    import * as m6 from "./subfolder/index.cjs";
    import * as m7 from "./subfolder2/index.js";
    import * as m8 from "./subfolder2/index.mjs";
    import * as m9 from "./subfolder2/index.cjs";
    import * as m10 from "./subfolder2/another/index.js";
    import * as m11 from "./subfolder2/another/index.mjs";
    import * as m12 from "./subfolder2/another/index.cjs";
```

----------------------------------------

TITLE: Demonstrating TypeScript Compilation Errors
DESCRIPTION: This TypeScript code snippet showcases two common compilation errors: implicit 'any' type for function parameters and using a variable before it's assigned. It highlights the importance of strict type checking in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/configFileExtendsAsList.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function f(x) { } // noImplicitAny error
let y: string;
y.toLowerCase(); // strictNullChecks error
```

----------------------------------------

TITLE: Defining Interface with Optional Property - TypeScript
DESCRIPTION: This snippet defines an interface with a mandatory property 'one' of generic type T and an optional property 'two' of generic type U. It creates an object of this interface with 'one' assigned a value but omits 'two' since it is optional.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability39.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module __test1__ {
    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };
    var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };
    export var __val__obj4 = obj4;
}
```

----------------------------------------

TITLE: Handling Derived Class Overrides in TypeScript
DESCRIPTION: The provided snippet demonstrates a common error encountered when a derived class overrides a property in the base class with a function instead of maintaining the accessor. It highlights a TypeScript error where the derived class 'Derived' incorrectly attempts to override an accessor 'x' from the base class 'Base' with a method, leading to incompatible type assignments. To avoid this, ensure that derived properties maintain compatible types with their base counterparts. The code requires TypeScript and understanding of class inheritance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassFunctionOverridesBaseClassAccessor.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base {
    get x() {
        return 1;
    }
    set x(v) {
    }
}

// error
class Derived extends Base {
    x() {
    ~
!!! error TS2416: Property 'x' in type 'Derived' is not assignable to the same property in base type 'Base'.
!!! error TS2416:   Type '() => number' is not assignable to type 'number'.
    ~
!!! error TS2426: Class 'Base' defines instance member accessor 'x', but extended class 'Derived' defines it as instance member function.
        return 1;
    }
}
```

----------------------------------------

TITLE: Importing from a Package with Conditional Exports in TypeScript
DESCRIPTION: A TypeScript file that imports the 'web' export from the 'conditions' package, which will resolve to the appropriate implementation based on the environment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerConditionsExcludesNode(module=preserve).errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import { web } from "conditions";
```

----------------------------------------

TITLE: Defining TypeScript Interfaces I1 and I2
DESCRIPTION: Defines two interfaces, I1 and I2, with different member signatures to demonstrate interface implementation in TypeScript. I1 includes properties and a method, while I2 defines an overloaded method signature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceImplementation1.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
interface I1 {
    iObj:{ };
    iNum:number;
    iAny:any;
    iFn():void;
}

interface I2 {
	iFn(n:number, s:string):void;
}
```

----------------------------------------

TITLE: Using Interface as Value in Class Extension
DESCRIPTION: Demonstrates an invalid attempt to use interface 'A' as a value argument in a factory function when extending a class. This produces TS2693 error because interfaces are type-level constructs and cannot be used as values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classExtendsInterfaceInExpression.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface A {}

function factory(a: any): {new(): Object} {
  return null;
}

class C extends factory(A) {}
```

----------------------------------------

TITLE: Implementing Nullish Coalescing Assignment with Arrays in TypeScript
DESCRIPTION: Function foo2 uses the nullish coalescing assignment operator (??=) to handle undefined arrays. Similar to foo1 but only assigns when the value is null or undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment7(target=es2021).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function foo2(results: number[] | undefined, results1: number[] | undefined) {
    (results ??= results1 ??= []).push(100);
}
```

----------------------------------------

TITLE: Defining Function Overloads
DESCRIPTION: This snippet defines a function 'foo' that has multiple signatures for different parameter types. The implementation uses a generic 'any' type for a single function body, which might lead to type errors when invoked incorrectly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionOverloads27.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo():string;
function foo(bar:string):number;
function foo(bar?:any):any{ return '' }
```

----------------------------------------

TITLE: package.json with Module Configuration
DESCRIPTION: This `package.json` file configures the module system as ECMAScript (`"type": "module"`) and defines import aliases for different module types (`.cjs`, `.mjs`, and `.js`). The "imports" field maps aliases to specific file paths, allowing for more readable import statements in the TypeScript code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackageImports(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module",
    "exports": "./index.js",
    "imports": {
        "#cjs": "./index.cjs",
        "#mjs": "./index.mjs",
        "#type": "./index.js"
    }
}
```

----------------------------------------

TITLE: Function with Type Guard for Function or Object
DESCRIPTION: Implements a helper function that checks if an instance is a function and validates its prototype chain. Uses typeof guard and null checks for type safety.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardConstructorClassAndNumber.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function foo(instance: Function | object) {
    if (typeof instance === 'function') {
        if (instance.prototype == null || instance.prototype.constructor == null) {
            return instance.length;
        }
    }
}
```

----------------------------------------

TITLE: TypeScript Keyof Literal Type Constraints
DESCRIPTION: Demonstrates type checking with keyof operator where T extends an object with string properties. Shows error when trying to access a property not included in the keyof constraint.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofIsLiteralContexualType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo<T extends { a: string, b: string }>() {
    let a: (keyof T)[] = ["a", "b"];
    let b: (keyof T)[] = ["a", "b", "c"];
}
```

----------------------------------------

TITLE: Defining Function with Type Annotations and Destructuring
DESCRIPTION: This snippet defines a function named `test` that takes an object with destructured parameters, applying explicit type annotations. It includes error messages that indicate when values assigned to parameters do not conform to the specified types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration8.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// explicit type annotation should cause `method` to have type 'x' | 'y'
function test({
    method = 'z',
    ~~~~~~
!!! error TS2322: Type '"z"' is not assignable to type '"x" | "y"'.
    nested: { p = 'c' }
              ~
!!! error TS2322: Type '"c"' is not assignable to type '"a" | "b"'.
}: {
    method?: 'x' | 'y',
    nested?: { p: 'a' | 'b' }
}) {
    method
    p
}

test({});
test({ method: 'x', nested: { p: 'a' } })
test({ method: 'z', nested: { p: 'b' } })
           ~~~~~~
!!! error TS2322: Type '"z"' is not assignable to type '"x" | "y"'.
!!! related TS6500 destructuringParameterDeclaration8.ts:7:5: The expected type comes from property 'method' which is declared here on type '{ method?: "x" | "y"; nested?: { p: "a" | "b"; }; }'
test({ method: 'one', nested: { p: 'a' } })
           ~~~~~~
!!! error TS2322: Type '"one"' is not assignable to type '"x" | "y"'.
!!! related TS6500 destructuringParameterDeclaration8.ts:7:5: The expected type comes from property 'method' which is declared here on type '{ method?: "x" | "y"; nested?: { p: "a" | "b"; }; }'
```

----------------------------------------

TITLE: Defining a Function Component in TypeScript
DESCRIPTION: This TypeScript snippet defines a functional component `FunctionComponent` that accepts a type parameter T. It returns an object with a `type` property which can be of type T or undefined. The component showcases how TypeScript infers the return type and flags errors when this return type is used incorrectly in JSX.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxComponentTypeErrors.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function FunctionComponent<T extends string>({type}: {type?: T}) {
  return {
    type
  }
}
```

----------------------------------------

TITLE: Declaring Functions in TypeScript
DESCRIPTION: This TypeScript snippet declares two functions, `foo` and `bar`, both returning `void`. It demonstrates a basic TypeScript declaration syntax, which can be used to define the types and signatures of functions in a TypeScript project.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parser509698.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    /// <style requireSemi="on" />
    declare function foo(): void;
    declare function bar(): void;
    
```

----------------------------------------

TITLE: Complex Destructuring Assignment in TypeScript For Loop
DESCRIPTION: This snippet demonstrates a for loop with complex destructuring assignment. It extracts 'name' and 'skills' (including 'primary' and 'secondary') from a 'multiRobot' object, providing default values at each level of nesting. The loop also includes an iterator 'i'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
for (let {
    name: nameA = "noName",
    skills: {
        primary: primaryA = "primary",
        secondary: secondaryA = "secondary"
    } = { primary: "none", secondary: "none" }
} = multiRobot, i = 0; i < 
```

----------------------------------------

TITLE: Using Type Guards in TypeScript
DESCRIPTION: This snippet defines the Optional type and associated type guards, illustrating how to use type guards to refine types and safely access properties. It addresses the assignment and usage of variables with multiple type possibilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardsAsAssertions.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```

    // Repro from #8513
    
    let cond: boolean;
    
    export type Optional<a> = Some<a> | None;
    
    export interface None { readonly none: string; }
    export interface Some<a> { readonly some: a; }
    
    export const none : None = { none: '' };
    
    export function isSome<a>(value: Optional<a>): value is Some<a> {
        return 'some' in value;
    }
    
    function someFrom<a>(some: a) {
        return { some };
    }
    
    export function fn<r>(makeSome: () => r): void {
        let result: Optional<r> = none;
        result;  // None
        while (cond) {
               ~~~~
!!! error TS2454: Variable 'cond' is used before being assigned.
            result;  // Some<r> | None
            result = someFrom(isSome(result) ? result.some : makeSome());
            result;  // Some<r>
        }
    }
    
```

----------------------------------------

TITLE: Demonstrating Missing Return Statement Error in TypeScript
DESCRIPTION: This code snippet shows a TypeScript class with a method that has a string return type but doesn't return any value, causing a TS2355 error. TypeScript requires functions with declared return types (other than 'undefined', 'void', or 'any') to explicitly return a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/missingReturnStatement.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module Test {
    export class Bug {
        public foo():string {
        }
    }    
}
```

----------------------------------------

TITLE: TypeScript Derived Class with Parameter Property Overriding Base Property
DESCRIPTION: Demonstrates a valid derived class implementation with a constructor that accepts a parameter property and properly calls super() to initialize the parent class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classUpdateTests.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
class J extends G {
	constructor(public p1:number) {
		super(); // NO ERROR
	}
}
```

----------------------------------------

TITLE: Invalid TypeScript Path Configuration
DESCRIPTION: This snippet demonstrates an invalid `tsconfig.json` configuration where non-relative paths are used within the `paths` compiler option without setting a `baseUrl`. This leads to TS5090 errors, indicating that the TypeScript compiler cannot resolve the specified paths because they are not relative and no base URL is provided.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/pathsValidation5.errors.txt#2025-04-21_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "compilerOptions": {
      "traceResolution": true,
      "paths": {
        "@interface/*": ["src/interface/*"],
        "@blah": ["blah"],
        "@humbug/*": ["*/generated"]
      }
  }
}
```

----------------------------------------

TITLE: Defining and Exporting a Type-Only Declaration in TypeScript
DESCRIPTION: Creates a class A and exports it as a type-only declaration using the 'export type' syntax. This means A can only be used as a type in importing modules, not as a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDeclaration(isolatedmodules=true).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {}
export type { A };
```

----------------------------------------

TITLE: Extending Generic Class with Valid Type Parameters
DESCRIPTION: This snippet shows a valid extension of class A where the type parameter satisfies the Foo constraint. Class B specifies type parameters that properly match the requirements defined in the base class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/extendsTag5.errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
/**
* @extends {A<{
*     a: string,
*     b: string[]
* }>}
*/
class B extends A {}
```

----------------------------------------

TITLE: Iterating Over Robots Collection in JavaScript
DESCRIPTION: This snippet iterates over an array of robots returned by the getMultiRobots() function, extracting each robot's name and skills using a for-of loop with destructuring syntax. No additional dependencies are required. It expects an array of objects with a 'name' and 'skills' field. Outputs include each robot's name and skills.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_51

LANGUAGE: JavaScript
CODE:
```
for (var _95 = 0, _96 = getMultiRobots(); _95 < _96.length; _95++) {
    _48 = _96[_95], _49 = _48.name, name = _49 === void 0 ? "noName" : _49, _50 = _48.skills, _51 = _50 === void 0 ? { primary: "noSkill", secondary: "noSkill" } : _50, _52 = _51.primary, primary = _52 === void 0 ? "primary" : _52, _53 = _51.secondary, secondary = _53 === void 0 ? "secondary" : _53;
}
```

----------------------------------------

TITLE: TypeScript Module Import Examples with Various Patterns
DESCRIPTION: Demonstrates different TypeScript import patterns including ES module imports, require calls, and dynamic imports. Shows various relative paths with different TypeScript file extensions (.ts, .mts, .cts, .tsx).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emit(jsx=react).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// Rewrite
import {} from "./foo.ts";
import {} from "../foo.mts";
import {} from "../../foo.cts";
import {} from "./foo.tsx";
import foo = require("./foo.ts");
import "./foo.ts";
export * from "./foo.ts";
//Shim
import("./foo.ts");
import("./foo.ts").then(() => {});
function acceptAny(arg: any) {}
acceptAny(import("./foo.ts"));
import("./foo.ts", { with: { attr: "value" } });
import("" + "./foo.ts");
```

----------------------------------------

TITLE: Defining Interfaces and Classes in TypeScript
DESCRIPTION: This snippet defines an interface I1 and three classes C1, C2, and C3. C1 implements I1, C2 extends C1, and C3 is a standalone class. These definitions are used to test array assignments later in the code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arrayAssignmentTest2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface I1 {
	IM1():void[];
}

class C1 implements I1 { 
	IM1():void[] {return null;}
	C1M1():C1[] {return null;}
 }
class C2 extends C1 {
	C2M1():C2[] { return null;}
}

class C3 {
	CM3M1() { return 3;}
}
```

----------------------------------------

TITLE: Defining Generic Interface in TypeScript
DESCRIPTION: This snippet defines a generic interface `IFoo` with a method `foo` that utilizes a generic type `T`, allowing for versatile implementations in concrete classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericSpecializations1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface IFoo<T> {
    foo<T>(x: T): T; // no error on implementors because IFoo's T is different from foo's T
}
```

----------------------------------------

TITLE: Root Package Configuration
DESCRIPTION: Package.json configuration for the root directory, setting the project to use ES modules by default.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsSynchronousCallErrors(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Handling Function Arity Mismatches in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates the declaration of overloaded functions with varying numbers of parameters and the resulting arity mismatch errors when these functions are called with incorrect numbers of arguments. The example highlights the importance of matching the expected number of parameters for each overload. Dependencies include a TypeScript environment for error checking. Key parameters are the varying numbers of arguments provided to the function calls, which lead to specific error messages. There are no specific inputs or outputs, as this snippet is focused on error occurrence rather than function execution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionParameterArityMismatch.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function f1(a: number);
declare function f1(a: number, b: number, c: number);
f1();
!!! error TS2554: Expected 1-3 arguments, but got 0.
!!! related TS6210 functionParameterArityMismatch.ts:1:21: An argument for 'a' was not provided.
f1(1, 2);
!!! error TS2575: No overload expects 2 arguments, but overloads do exist that expect either 1 or 3 arguments.
f1(1, 2, 3, 4);
!!! error TS2554: Expected 1-3 arguments, but got 4.
```

LANGUAGE: typescript
CODE:
```
declare function f2();
declare function f2(a: number, b: number);
declare function f2(a: number, b: number, c: number, d: number);
declare function f2(a: number, b: number, c: number, d: number, e: number, f: number);
f2(1);
!!! error TS2575: No overload expects 1 arguments, but overloads do exist that expect either 0 or 2 arguments.
f2(1, 2, 3);
!!! error TS2575: No overload expects 3 arguments, but overloads do exist that expect either 2 or 4 arguments.
f2(1, 2, 3, 4, 5);
!!! error TS2575: No overload expects 5 arguments, but overloads do exist that expect either 4 or 6 arguments.
f2(1, 2, 3, 4, 5, 6, 7);
!!! error TS2554: Expected 0-6 arguments, but got 7.
f2(1, 2, 3, 4, 5, ...[6, 7]);
!!! error TS2554: Expected 0-6 arguments, but got 7.
```

----------------------------------------

TITLE: Generic Link Component Declaration with Function Prop
DESCRIPTION: This declaration defines a Link component that accepts a function prop with a generic parameter type. The function prop must match the signature (arg: U) => void.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentsWithTypeArguments2.errors.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
declare function Link<U>(l: {func: (arg: U)=>void}): JSX.Element;
```

----------------------------------------

TITLE: Implementing Base and Derived Classes with Super Calls in TypeScript
DESCRIPTION: This snippet defines a base class and multiple derived classes, showcasing different scenarios of using 'super' in constructors. It highlights the requisite that 'super' must be called before accessing 'this' within derived class constructors, along with the errors that arise when this rule is violated.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassSuperCallsWithThisArg.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Base {
    x: string;
    constructor(a) { }
}
    
class Derived extends Base {
    constructor() {
        super(this); // ok
              ~~~~
!!! error TS17009: 'super' must be called before accessing 'this' in the constructor of a derived class.
    }
}
    
class Derived2 extends Base {
    constructor(public a: string) {
        super(this); // error
              ~~~~
!!! error TS17009: 'super' must be called before accessing 'this' in the constructor of a derived class.
    }
}
    
class Derived3 extends Base {
    constructor(public a: string) {
        super(() => this); // error
    }
}
    
class Derived4 extends Base {
    constructor(public a: string) {
        super(function () { return this; }); // ok
    }
}
```

----------------------------------------

TITLE: Defining Generic Component with Children
DESCRIPTION: This snippet defines a functional component `Elem` that accepts a generic type `T` for its `prop` and expects a `children` function that takes `T` as input and returns `T`. It demonstrates how generics can be used with JSX to ensure type safety between props and children.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxChildrenGenericContextualTypes.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    const Elem = <T,U=never>(p: { prop: T, children: (t: T) => T }) => <div></div>;
    Elem({prop: {a: "x"}, children: i => ({a: "z"})});
    const q = <Elem prop={{a: "x"}} children={i => ({a: "z"})} />
    const qq = <Elem prop={{a: "x"}}>{i => ({a: "z"})}</Elem>
```

----------------------------------------

TITLE: Handling Object Literals in TypeScript
DESCRIPTION: The functions `doStuffWithStuff` and `doStuffWithStuffArr` demonstrate how TypeScript handles object literals and type constraints, emphasizing the restriction against specifying properties not defined in the type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reverseMappedTypeIntersectionConstraint.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
interface Stuff {
    field: number;
    anotherField: string;
}

function doStuffWithStuff<T extends Stuff>(s: { [K in keyof T & keyof Stuff]: T[K] } ): T {
    if(Math.random() > 0.5) {
      return s as T
    } else {
      return s
    }
}

doStuffWithStuff({ field: 1, anotherField: 'a', extra: 123 })

function doStuffWithStuffArr<T extends Stuff>(arr: { [K in keyof T & keyof Stuff]: T[K] }[]): T[] {
    if(Math.random() > 0.5) {
      return arr as T[]
    } else {
      return arr
    }
}

doStuffWithStuffArr([
    { field: 1, anotherField: 'a', extra: 123 },
])

```

----------------------------------------

TITLE: Invalid Assignment Expression in TypeScript
DESCRIPTION: This code attempts to assign a value to the result of a function call, which is not allowed in TypeScript. The left-hand side of an assignment must be a variable or property access. Additionally, both 'foo' and 'bar' are undefined identifiers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserAssignmentExpression1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
(foo()) = bar;
```

----------------------------------------

TITLE: Lit Package Configuration
DESCRIPTION: Package.json configuration for the Lit library showing module type and exports configuration
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsDeclarationEmitExportedClassWithExtends.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "name": "lit",
    "version": "0.0.1",
    "type": "module",
    "exports": {
      ".": {
        "types": "./development/index.d.ts"
      }
    }
}
```

----------------------------------------

TITLE: Updated tsconfig.json with verbatimModuleSyntax
DESCRIPTION: Configuration file showing the correct usage of verbatimModuleSyntax option replacing deprecated import-related options.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/verbatimModuleSyntaxCompat3.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "extends": "./tsconfig.base.json",
    "compilerOptions": {
        "verbatimModuleSyntax": true
    }
}
```

----------------------------------------

TITLE: Rendering Default Components with Empty Props
DESCRIPTION: This snippet shows how to render a React component with default or empty props. It creates 'EmptyProp' and demonstrates different ways to render the component, including passing an empty object and handling ref attributes. TypeScript handles potential errors when props might be undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadAttributesResolution4.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
class EmptyProp extends React.Component<{}, {}> {
    render() {
        return <div>Default hi</div>;
    }
}

// OK
let j: any;
let e1 = <EmptyProp {...{}} />;
let e2 = <EmptyProp {...j} />
let e3 = <EmptyProp {...{ ref: (input) => { this.textInput = input; } }} />
                                             ~~~~
!!! error TS2532: Object is possibly 'undefined'.
let e4 = <EmptyProp data-prop />
let e5 = <EmptyProp {...{ "data-prop": true}} />
```

----------------------------------------

TITLE: For...of Loop with Destructuring in TypeScript
DESCRIPTION: This code snippet shows a for...of loop iterating over an array of robots. It uses destructuring assignment to extract skill values with default assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
for (let [, [
    primarySkillA = "primary",
    secondarySkillA = "secondary"
] = ["skill1", "skill2"]] of [multiRobotA, multiRobotB]) {
    console.log(primarySkillA);
}
```

----------------------------------------

TITLE: Exporting Variables and Classes in TypeScript
DESCRIPTION: This code snippet illustrates how to export variables and classes in TypeScript. It features the declaration and exportation of a variable, a class, an instance of the class, and a function returning that instance. There are no specific dependencies or prerequisites besides TypeScript itself.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcemapModuleSubfolderSpecifyOutputFile/node/sourcemapModuleSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Package.json with ESM Configuration
DESCRIPTION: Main package.json file specifying the package as using ES modules by default with the 'type' field set to 'module'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExportsExclude(module=nodenext).errors.txt#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Defining Functions with Different Signatures in TypeScript
DESCRIPTION: Defines various functions with different parameter and return types to demonstrate type checking. Functions f1 through f4 have different signatures, with f4 being overloaded to accept both string and number types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithOverloads.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f1(x: string): number { return null; }

function f2(x: string): string { return null; }

function f3(x: number): number { return null; }

function f4(x: string): string;

function f4(x: number): number;

function f4(x: any): any { return undefined; }
```

----------------------------------------

TITLE: Configuring Package with TypeScript Definitions
DESCRIPTION: JSON configuration for a package named 'pkg', specifying TypeScript type definitions and exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tripleSlashTypesReferenceWithMissingExports(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "name": "pkg",
    "types": "index.d.ts",
    "exports": "some-other-thing.js"
}
```

----------------------------------------

TITLE: Defining Lazyify Mapped Type in TypeScript
DESCRIPTION: Creates a mapped type that transforms properties into getter methods. It capitalizes the first letter of each property name and prefixes it with 'get'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeAsClauses.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
type Lazyify<T> = {
    [K in keyof T as `get${Capitalize<K & string>}`]: () => T[K]
};
```

----------------------------------------

TITLE: Importing and Exporting Interfaces in TypeScript
DESCRIPTION: Imports various interfaces and exports a function that returns a tuple of these interfaces. This demonstrates TypeScript's module import capabilities across different file structures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitCommonJsModuleReferencedType.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { OtherProps } from "./other";
import { OtherIndexProps } from "./other/index";
import { NestedProps } from "nested";
export interface SomeProps {}

export function foo(): [SomeProps, OtherProps, OtherIndexProps, NestedProps];
```

----------------------------------------

TITLE: Custom Type Guard and Type Narrowing in Class Method in TypeScript
DESCRIPTION: This example shows a custom type guard implementation and its usage in a class method. It demonstrates how TypeScript narrows the type of a class property based on the custom type guard.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowAliasing.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
class Utils {
  static isDefined<T>(value: T): value is NonNullable<T> {
    return value != null;
  }
}

class A53267 {
  public readonly testNumber: number | undefined;

  foo() {
    const isNumber = Utils.isDefined(this.testNumber);

    if (isNumber) {
      const x: number = this.testNumber;
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Implicit 'any' Types in TypeScript Class Methods
DESCRIPTION: This code snippet demonstrates different scenarios where TypeScript's 'noImplicitAny' rule is applied to method parameters in various class contexts. It includes examples of ambient and non-ambient classes with both public and private methods, showing how the compiler handles implicit 'any' types in each case.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyForMethodParameters.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare class A {
    private foo(a); // OK - ambient class and private method - no error
}

declare class B {
    public foo(a); // OK - ambient class and public method - error
}

class C {
    private foo(a) { } // OK - non-ambient class and private method - error
}
class D {
    public foo(a) { } // OK - non-ambient class and public method - error
}
```

----------------------------------------

TITLE: Initializing JSX Components with React
DESCRIPTION: Demonstrates the usage of JSX in a TypeScript file with React as the JSX import source. Requires React library as a dependency and assumes the use of React TypeScript definitions. The snippet initializes elements and exports an empty module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxJsxsCjsTransformCustomImportPragma(jsx=react-jsxdev).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/// <reference path="/.lib/react16.d.ts" />
/* @jsxImportSource react */
import "./preact";
const a = <>
  <p></p>
  text
  <div className="foo"></div>
</>

export {};
```

----------------------------------------

TITLE: Defining and Instantiating Classes in TypeScript
DESCRIPTION: This snippet demonstrates the definition of a class with properties and its instantiation. The class 'm1_c1' has a property 'm1_c1_p1' and an instance 'm1_instance1' is created. The function 'm1_f1' returns this instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcerootUrlSimpleSpecifyOutputFile/node/sourcerootUrlSimpleSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Defining and Implementing Function Overloads in TypeScript
DESCRIPTION: This snippet demonstrates the definition of function overloads in TypeScript for a function named 'foo'. The function can accept either a string or a number as its argument and returns a result of the same type. An error is raised when 'foo' is called without any arguments. TypeScript requires at least one argument to match the overload signature. This example highlights the importance of adhering to function signatures in TypeScript to avoid runtime errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionOverloads29.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function foo(bar:string):string;
function foo(bar:number):number;
function foo(bar:any):any{ return bar }
var x = foo();
        ~~~
!!! error TS2554: Expected 1 arguments, but got 0.
!!! related TS6210 functionOverloads29.ts:1:14: An argument for 'bar' was not provided.
```

----------------------------------------

TITLE: Importing and Re-exporting Type in TypeScript
DESCRIPTION: This snippet imports type C from './b' using the 'import type' syntax and re-exports it as D.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/chained.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
import type { C } from './b';
export { C as D };
```

----------------------------------------

TITLE: Object Property Assignment with Interface
DESCRIPTION: Creates an object conforming to IPlaceHolder interface with multiple function and property type definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
var objc8 = ({});
objc8.t1 = (function (s) { return s; });
```

----------------------------------------

TITLE: Variable Declaration and Generic Function with Type Error
DESCRIPTION: Declares a variable of Derived type and calls a generic function that causes a type error. The function foo takes a generic parameter T and a function that maps from T to T, but the callback returns a Base when T is Derived.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/fixingTypeParametersRepeatedly2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var derived: Derived;

declare function foo<T>(x: T, func: (p: T) => T): T;
var result = foo(derived, d => d.toBase());
```

----------------------------------------

TITLE: Importing and Exporting in TypeScript
DESCRIPTION: This snippet illustrates how to import variables and classes from another module and define new ones in the current module. Dependencies include having the 'm1' module available for import, as well as TypeScript handling import syntax. It demonstrates how to use imported variables alongside local definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootRelativePathModuleSimpleSpecifyOutputFile/node/sourceRootRelativePathModuleSimpleSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import m1 = require("m1");
export var a1 = 10;
export class c1 {
    public p1: number;
}

export var instance1 = new c1();
export function f1() {
    return instance1;
}

export var a2 = m1.m1_c1;
```

----------------------------------------

TITLE: Class Expression with Regular Methods
DESCRIPTION: Implementation using regular method syntax where parameters lack type annotations, causing implicit 'any' type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextuallyTypedClassExpressionMethodDeclaration02.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function getFoo1(): Foo {
    return class {
        method1(arg) {
            arg.numProp = 10;
        }
        method2(arg) {
            arg.strProp = "hello";
        }
    }
}
```

----------------------------------------

TITLE: Defining ZeroOf Conditional Type in TypeScript
DESCRIPTION: This snippet defines a conditional type 'ZeroOf<T>' which maps different types to specific zero-like representations. It showcases the versatility of conditional types in TypeScript by handling null, undefined, strings, numbers, and booleans.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/distributiveConditionalTypeConstraints.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
type ZeroOf<T> =
    T extends null ? null :
    T extends undefined ? undefined :
    T extends string ? "" :
    T extends number ? 0 :
    T extends boolean ? false :
    never;

function f10<T extends {}>(x: ZeroOf<T>) {
    let t: "" | 0 | false = x;
}
```

----------------------------------------

TITLE: Generic Interface Definition for Component with Array Values and Callback
DESCRIPTION: This interface defines a prop structure for components that need an array of values and a handler for selections. It uses a generic type parameter to ensure type consistency between the array elements and callback parameter.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentsWithTypeArguments2.errors.txt#2025-04-21_snippet_6

LANGUAGE: TypeScript
CODE:
```
interface InferParamProp<T> {
    values: Array<T>;
    selectHandler: (selectedVal: T) => void;
}
```

----------------------------------------

TITLE: Invalid Super Call Examples in TypeScript Classes
DESCRIPTION: Comprehensive examples of invalid super() call usage in TypeScript, demonstrating various error cases including calls outside constructors, in static methods, with type arguments, and in derived classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/errorSuperCalls.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
//super call in class constructor with no base type
class NoBase {
    constructor() {
        super();
    }

    //super call in class member function with no base type
    fn() {
        super();
    }

    //super call in class accessor (get and set) with no base type
    get foo() {
        super();
        return null;
    }
    set foo(v) {
        super();
    }

    //super call in class member initializer with no base type
    p = super();

    //super call in static class member function with no base type
    static fn() {
        super();
    }

    //super call in static class member initializer with no base type
    static k = super();

    //super call in static class accessor (get and set) with no base type
    static get q() {
        super();
        return null;
    }
    static set q(n) {
        super();
    }
}

class Base<T> { private n: T; }
class Derived<T> extends Base<T> {
    //super call with type arguments 
    constructor() {
        super<string>();
        super();
    }
}


class OtherBase {
    private n: string;
}

class OtherDerived extends OtherBase {
    //super call in class member initializer of derived type
    t = super();

    fn() {
        //super call in class member function of derived type
        super();
    }

    //super call in class accessor (get and set) of derived type
    get foo() {
        super();
        return null;
    }
    set foo(n) {
        super();
    }
}
```

----------------------------------------

TITLE: Initializing Array with Object Literals in TypeScript
DESCRIPTION: This code attempts to initialize an array of objects with a specific type constraint. It demonstrates a TypeScript error when an object literal includes a property not defined in the type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping9.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var foo:{id:number;}[] = [{id:1}, {id:2, name:"foo"}];
```

----------------------------------------

TITLE: Defining Interfaces with Common and Unique Properties in TypeScript
DESCRIPTION: This code snippet defines two interfaces, I1 and I2, that have common properties and methods as well as unique members. The union type illustrates how members are determined and how compile-time errors such as missing properties are surfaced. Dependencies include TypeScript environment setup for code execution. Key elements are the definition of methods and properties that demonstrate union type behavior in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionTypeMembers.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface I1<T> {
    commonMethodType(a: string): string;
    commonPropertyType: string;

    commonMethodDifferentParameterType(a: string): string;
    commonMethodDifferentReturnType(a: string): string;
    commonPropertyDifferenType: string;

    commonMethodWithTypeParameter(a: T): T;
    commonMethodWithOwnTypeParameter<U>(a: U): U;

    methodOnlyInI1(a: string): string;
    propertyOnlyInI1: string;
}

interface I2<T> {
    commonMethodType(a: string): string;
    commonPropertyType: string;

    commonMethodDifferentParameterType(a: number): number;
    commonMethodDifferentReturnType(a: string): number;
    commonPropertyDifferenType: number;

    commonMethodWithTypeParameter(a: T): T;
    commonMethodWithOwnTypeParameter<U>(a: U): U;

    methodOnlyInI2(a: string): string;
    propertyOnlyInI2: string;
}

var x : I1<number> | I2<number>;
var str: string;
var num: number;
var strOrNum: string | number;

str = x.commonPropertyType;
str = x.commonMethodType(str);
strOrNum = x.commonPropertyDifferenType;
strOrNum = x.commonMethodDifferentReturnType(str);
x.commonMethodDifferentParameterType;
x.commonMethodDifferentParameterType(strOrNum);
num = x.commonMethodWithTypeParameter(num);
num = x.commonMethodWithOwnTypeParameter(num);
str = x.commonMethodWithOwnTypeParameter(str);
strOrNum = x.commonMethodWithOwnTypeParameter(strOrNum);

x.propertyOnlyInI1;
x.propertyOnlyInI2;
x.methodOnlyInI1("hello");
x.methodOnlyInI2(10);
```

----------------------------------------

TITLE: Argument count mismatch in arrow function - TypeScript
DESCRIPTION: This TypeScript snippet demonstrates a TS2345 error related to an incorrect number of arguments provided to an arrow function.  The function `f` expects a function with no arguments and a return type of `number`. However, the arrow function provided has four arguments (`a`, `b`, `c`, `d`), leading to the error. The error message states that the target signature provides too few arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arrowFunctionErrorSpan.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
    function f(a: () => number) { }
    
    // multiline 4, arguments
    f((a,
      
        b,
    
        c,
    
        d) => { });

```

----------------------------------------

TITLE: Void Return Type Examples - TypeScript
DESCRIPTION: Functions `f4`, `f5`, `f6`, and `f7` demonstrate valid usages of the `void` return type.  They can either have no return statement or explicitly return `undefined` or `null`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionsMissingReturnStatementsAndExpressions.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
    function f4(): void {
        // Fine since we are typed void.
    }
    
    function f5(): void {
        // Fine since we are typed void.
        return;
    }
    
    function f6(): void {
        // Fine since we are typed void and return undefined
        return undefined;
    }
    
    function f7(): void {
        // Fine since we are typed void and return null
        return null;
    }
```

----------------------------------------

TITLE: Defining TypeScript Classes with Inheritance
DESCRIPTION: This snippet defines a base class and attempts to extend it with derived classes using TypeScript. The 'super' keyword is incorrectly used in 'Derived2', which leads to a TS2335 error as it is not placed in a situation that directly references a derived class. The code also includes JSDoc comments for structure descriptors. This demonstration is focused on understanding inheritance and proper keyword usage in TypeScript with class syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkSuperCallBeforeThisAccessing9.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
class Based { }
/** @extends {Based} */
class Derived {
    constructor() {
        this;
        this.x = 10;
        var that = this;
    }
}

/** @extends {Based} */
class Derived2 {
    constructor() {
        super();
        ~~~~~
!!! error TS2335: 'super' can only be referenced in a derived class.
    }
}
```

----------------------------------------

TITLE: TypeScript Generic Constraint Violation
DESCRIPTION: This code defines several TypeScript interfaces (A, B, and C) with inheritance relationships. Interface B extends A, adding a 'b' property. The generic interface G<T, U extends B> requires the second type parameter 'U' to extend B.  The error occurs when trying to instantiate G with type A for 'U' because A does not satisfy the constraint 'B' since 'A' lacks the 'b' property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generics5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface A { a: string; }
interface B extends A { b: string; }

interface C extends B { c: string; }
interface G<T, U extends B> {


}

var v3: G<A, A>;               // Error, A not valid argument for U
```

----------------------------------------

TITLE: Defining TypeScript Interface with Various Signatures
DESCRIPTION: This snippet defines a TypeScript interface with call signatures, construct signatures, index signatures, property signatures, and function signatures. It includes various parameter types and optional parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/giant.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
interface I {
    //Call Signature
    ();
    (): number;
    (p);
    (p1: string);
    (p2?: string);
    (...p3: any[]);
    (p4: string, p5?: string);
    (p6: string, ...p7: any[]);

    //Construct Signature
    new ();
    new (): number;
    new (p: string);
    new (p2?: string);
    new (...p3: any[]);
    new (p4: string, p5?: string);
    new (p6: string, ...p7: any[]);

    //Index Signature
    [p];
    [p1: string];
    [p2: string, p3: number];

    //Property Signature
    p;
    p1?;
    p2?: string;

    //Function Signature
    p3();
    p4? ();
    p5? (): void;
    p6(pa1): void;
    p7(pa1, pa2): void;
    p7? (pa1, pa2): void;
}
```

----------------------------------------

TITLE: Defining Variables with Incorrect Types in TypeScript
DESCRIPTION: The snippet attempts to assign a number value (12) to a variable explicitly typed as a string. TypeScript raises type errors for these assignments, notifying the developer that 'number' is not assignable to 'string'. The intention here is to illustrate the language's strong typing capabilities and the importance of adhering to type definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/prettyFileWithErrorsAndTabs.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
const x: string = 12;
```

LANGUAGE: TypeScript
CODE:
```
const y: string = 12;
```

LANGUAGE: TypeScript
CODE:
```
const z: string = 12;
```

----------------------------------------

TITLE: DOM Element Members Type Definition
DESCRIPTION: This snippet provides a comprehensive list of properties, methods, and constants available on a DOM Element object, including nested definitions like the `lastElementChild` property. It follows TypeScript syntax for type declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRecursiveInference.errors.txt#_snippet_60

LANGUAGE: TypeScript
CODE:
```
ny; readonly ENTITY_REFERENCE_NODE: any; readonly ENTITY_NODE: any; readonly PROCESSING_INSTRUCTION_NODE: any; readonly COMMENT_NODE: any; readonly DOCUMENT_NODE: any; readonly DOCUMENT_TYPE_NODE: any; readonly DOCUMENT_FRAGMENT_NODE: any; readonly NOTATION_NODE: any; readonly DOCUMENT_POSITION_DISCONNECTED: any; readonly DOCUMENT_POSITION_PRECEDING: any; readonly DOCUMENT_POSITION_FOLLOWING: any; readonly DOCUMENT_POSITION_CONTAINS: any; readonly DOCUMENT_POSITION_CONTAINED_BY: any; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: any; dispatchEvent: any; ariaActiveDescendantElement: any; ariaAtomic: any; ariaAutoComplete: any; ariaBrailleLabel: any; ariaBrailleRoleDescription: any; ariaBusy: any; ariaChecked: any; ariaColCount: any; ariaColIndex: any; ariaColIndexText: any; ariaColSpan: any; ariaControlsElements: any; ariaCurrent: any; ariaDescribedByElements: any; ariaDescription: any; ariaDetailsElements: any; ariaDisabled: any; ariaErrorMessageElements: any; ariaExpanded: any; ariaFlowToElements: any; ariaHasPopup: any; ariaHidden: any; ariaInvalid: any; ariaKeyShortcuts: any; ariaLabel: any; ariaLabelledByElements: any; ariaLevel: any; ariaLive: any; ariaModal: any; ariaMultiLine: any; ariaMultiSelectable: any; ariaOrientation: any; ariaOwnsElements: any; ariaPlaceholder: any; ariaPosInSet: any; ariaPressed: any; ariaReadOnly: any; ariaRelevant: any; ariaRequired: any; ariaRoleDescription: any; ariaRowCount: any; ariaRowIndex: any; ariaRowIndexText: any; ariaRowSpan: any; ariaSelected: any; ariaSetSize: any; ariaSort: any; ariaValueMax: any; ariaValueMin: any; ariaValueNow: any; ariaValueText: any; role: any; animate: any; getAnimations: any; after: any; before: any; remove: any; replaceWith: any; readonly nextElementSibling: any; readonly previousElementSibling: any; readonly childElementCount: any; readonly children: any; readonly firstElementChild: any; readonly lastElementChild: any; append: any; prepend: any; querySelector: any; querySelectorAll: any; replaceChildren: any; readonly assignedSlot: any; }; readonly lastElementChild: { readonly attributes: any; classList: any; className: any; readonly clientHeight: any; readonly clientLeft: any; readonly clientTop: any; readonly clientWidth: any; readonly currentCSSZoom: any; id: any; innerHTML: any; readonly localName: any; readonly namespaceURI: any; onfullscreenchange: any; onfullscreenerror: any; outerHTML: any; readonly ownerDocument: any; part: any; readonly prefix: any; readonly scrollHeight: any; scrollLeft: any; scrollTop: any; readonly scrollWidth: any; readonly shadowRoot: any; slot: any; readonly tagName: any; attachShadow: any; checkVisibility: any; closest: any; computedStyleMap: any; getAttribute: any; getAttributeNS: any; getAttributeNames: any; getAttributeNode: any; getAttributeNodeNS: any; getBoundingClientRect: any; getClientRects: any; getElementsByClassName: any; getElementsByTagName: any; getElementsByTagNameNS: any; getHTML: any; hasAttribute: any; hasAttributeNS: any; hasAttributes: any; hasPointerCapture: any; insertAdjacentElement: any; insertAdjacentHTML: any; insertAdjacentText: any; matches: any; releasePointerCapture: any; removeAttribute: any; removeAttributeNS: any; removeAttributeNode: any; requestFullscreen: any; requestPointerLock: any; scroll: any; scrollBy: any; scrollIntoView: any; scrollTo: any; setAttribute: any; setAttributeNS: any; setAttributeNode: any; setAttributeNodeNS: any; setHTMLUnsafe: any; setPointerCapture: any; toggleAttribute: any; webkitMatchesSelector: any; addEventListener: any; removeEventListener: any; readonly baseURI: any; readonly childNodes: any; readonly firstChild: any; readonly isConnected: any; readonly lastChild: any; readonly nextSibling: any; readonly nodeName: any; readonly nodeType: any; nodeValue: any; readonly parentElement: any; readonly parentNode: any; readonly previousSibling: any; textContent: any; appendChild: any; cloneNode: any; compareDocumentPosition: any; contains: any; getRootNode: any; hasChildNodes: any; insertBefore: any; isDefaultNamespace: any; isEqualNode: any; isSameNode: any; lookupNamespaceURI: any; lookupPrefix: any; normalize: any; removeChild: any; replaceChild: any; readonly ELEMENT_NODE: any; readonly ATTRIBUTE_NODE: any; readonly TEXT_NODE: any; readonly CDATA_SECTION_NODE: any; readonly ENTITY_REFERENCE_NODE: any; readonly ENTITY_NODE: any; readonly PROCESSING_INSTRUCTION_NODE: any; readonly COMMENT_NODE: any; readonly DOCUMENT_NODE: any; readonly DOCUMENT_TYPE_NODE: any; readonly DOCUMENT_FRAGMENT_NODE: any; readonly NOTATION_NODE: any; readonly DOCUMENT_POSITION_DISCONNECTED: any; readonly DOCUMENT_POSITION_PRECEDING: any; readonly DOCUMENT_POSITION_FOLLOWING: any; readonly DOCUMENT_POSITION_CONTAINS: any; readonly DOCUMENT_POSITION_CONTAINED_BY: any; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: any; dispatchEvent: any; ariaActiveDescendantElement: any; ariaAtomic: any; ariaAutoComplete: any; ariaBrailleLabel: any; ariaBrailleRoleDescrip
```

----------------------------------------

TITLE: Using Generic Class setState Method with Different Inputs
DESCRIPTION: Examples of using the generic setState method with various property combinations, demonstrating type errors when using undefined values or unknown properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeErrors.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
let c = new C<Foo>();
c.setState({ a: "test", b: 43 });
c.setState({ a: "hi" });
c.setState({ b: undefined });
c.setState({ });
c.setState(foo);
c.setState({ a: undefined });  // Error
c.setState({ c: true });  // Error
```

----------------------------------------

TITLE: Invalid Class Extensions in TypeScript
DESCRIPTION: This code demonstrates various invalid class extension attempts in TypeScript. It shows that classes can only extend other constructor functions, and trying to extend primitive values (undefined, true, false, 42, "hello"), empty objects, or regular functions results in type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classExtendingNonConstructor.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var x: {};

function foo() {
    this.x = 1;
}

class C1 extends undefined { }
class C2 extends true { }
class C3 extends false { }
class C4 extends 42 { }
class C5 extends "hello" { }
class C6 extends x { }
class C7 extends foo { }
```

----------------------------------------

TITLE: Testing let variable capture in do-while loops in TypeScript
DESCRIPTION: Demonstrates how let variables are captured in do-while loops. The function declares an uninitialized let variable inside the loop body and creates closures that reference it.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop5.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
function foo3(x) {
    do {
        let x;
        var v;
        (function() { return x + v });
        (() => x + v);
        if (x == 1) {
            return;
        }
    } while (1 === 1)
    
    use(v);
}
```

----------------------------------------

TITLE: Defining Package Exports in package.json
DESCRIPTION: This package.json file defines the entry points for the 'pkg' module using the 'exports' field. It specifies different files ('import.js' and 'require.js') to be used depending on whether the module is imported via 'import' (ESM) or 'require' (CJS).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesTripleSlashReferenceModeOverride1(module=node18).errors.txt#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "exports": {
        "import": "./import.js",
        "require": "./require.js"
    }
}
```

----------------------------------------

TITLE: Class with optional properties and typeof this
DESCRIPTION: This snippet demonstrates how to use 'typeof this' with optional properties and conditional checks for type narrowing. It showcases how TypeScript narrows types based on conditional checks within the class methods when dealing with optional properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeofThis.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
    class Test10 {
        a?: { b?: string }
    
        foo() {
            let a: typeof this.a = undefined as any;
            if (this.a) {
                let a: typeof this.a = undefined as any;    // should narrow to { b?: string }
                let b: typeof this.a.b = undefined as any;
    
                if (this.a.b) {
                    let b: typeof this.a.b = undefined as any;   // should narrow to string
                }
            }
        }
    }
```

----------------------------------------

TITLE: Checking Properties in Object Type - TypeScript
DESCRIPTION: Function f2 checks for properties in an object type variable x using the 'in' operator, ensuring the presence of properties 'a', 'b', and 'c' before accessing them.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=true).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function f2(x: object) {
    if ("a" in x) {
        x.a;
    }
    if ("a" in x && "b" in x && "c" in x) {
        x.a;
        x.b;
        x.c;
    }
}
```

----------------------------------------

TITLE: TypeScript Interface Inheritance with Property Type Incompatibility
DESCRIPTION: This code demonstrates type compatibility errors when extending interfaces in TypeScript. It shows that when an interface attempts to extend another interface, properties in the child interface must be assignable to corresponding properties in the parent interface. The example shows that while a subtype (Derived) can be assigned to a property expecting a supertype (Base), the reverse is not valid.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithObjectMembers2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Base {
    foo: string;
}

interface Derived extends Base {
    bar: string;
}

// N and M have the same name, same accessibility, same optionality, and N is a subtype of M
// foo properties are valid, bar properties cause errors in the derived class declarations
module NotOptional {
    interface A {
        foo: Base;
        bar: Base;
    }

    interface B extends A {
        foo: Derived; // ok
        bar: string; // error
    }

    interface A2 {
        1: Base;
        2.0: Base;
    }

    interface B2 extends A2 {
        1: Derived; // ok
        2: string; // error
    }

    interface A3 {
        '1': Base;
        '2.0': Base;
    }

    interface B3 extends A3 {
        '1': Derived; // ok
        '2.0': string; // error
    }
}

// same cases as above but with optional
module Optional {
    interface A {
        foo?: Base;
        bar?: Base;
    }

    interface B extends A {
        foo?: Derived; // ok
        bar?: string; // error
    }

    interface A2 {
        1?: Base;
        2.0?: Base;
    }

    interface B2 extends A2 {
        1?: Derived; // ok
        2?: string; // error
    }

    interface A3 {
        '1'?: Base;
        '2.0'?: Base;
    }

    interface B3 extends A3 {
        '1'?: Derived; // ok
        '2.0'?: string; // error
    }
}
```

----------------------------------------

TITLE: Iterating Over MultiRobots Array - JavaScript
DESCRIPTION: This code snippet iterates over an array named 'multiRobots', destructuring each object to extract nested 'skills' properties with default values. It sets default values for 'primary' and 'secondary' skills if they are not defined. It requires an array 'multiRobots' with objects having 'skills' properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_21

LANGUAGE: JavaScript
CODE:
```
for (var _74 = 0, multiRobots_2 = multiRobots; _74 < multiRobots_2.length; _74++) {
    _u = multiRobots_2[_74].skills, _v = _u === void 0 ? { primary: "noSkill", secondary: "noSkill" } : _u, _w = _v.primary, primary = _w === void 0 ? "primary" : _w, _x = _v.secondary, secondary = _x === void 0 ? "secondary" : _x;
}
```

----------------------------------------

TITLE: Defining Class with Getters and Setters in TypeScript
DESCRIPTION: This code example defines a class in TypeScript with a private getter and a public setter, which violates accessibility rules. To resolve the errors, ensure that the accessibility of the getter is at least as accessible as the setter.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/gettersAndSettersAccessibility.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C99 {
	private get Baz():number { return 0; }
	            ~~~
!!! error TS2808: A get accessor must be at least as accessible as the setter
	public set Baz(n:number) {} // error - accessors do not agree in visibility
	           ~~~
!!! error TS2808: A get accessor must be at least as accessible as the setter
}
```

----------------------------------------

TITLE: Function with Destructured Array Parameter
DESCRIPTION: Implements a function foo1 that takes a Robot tuple and destructures it with default values for the skills array. Demonstrates nested array destructuring with fallback values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringParametertArrayBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function foo1([, skillA = ["noSkill", "noSkill"]]: Robot= ["name", ["skill1", "skill2"]]) {
    console.log(skillA);
}
```

----------------------------------------

TITLE: Usage of React Component with PropTypes and DefaultProps
DESCRIPTION: This snippet shows various usages of the 'Component' React component, including correct prop passing and intentional errors to demonstrate TypeScript's type checking capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxLibraryManagedAttributes.errors.txt#2025-04-21_snippet_1

LANGUAGE: TSX
CODE:
```
const a = <Component foo={12} bar="yes" baz="yeah" />;
const b = <Component foo={12} />; // Error, missing required prop bar
const c = <Component bar="yes" baz="yeah" />;
const d = <Component bar="yes" baz="yo" bat="ohno" />; // Error, baz not a valid prop
const e = <Component foo={12} bar={null} baz="cool" />; // bar is nullable/undefinable since it's not marked `isRequired`
const f = <Component foo={12} bar="yeah" baz={null} />; // Error, baz is _not_ nullable/undefinable since it's marked `isRequired`
```

----------------------------------------

TITLE: Import Declaration from Decl Module
DESCRIPTION: Example showing import of 'fromDecl' from a declaration file and subsequent usage. Demonstrates importing from both Component and declaration files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/autoImportAllowTsExtensions3.baseline.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { Component } from "./Component.tsx";
import { fromDecl } from "./decl";
fromDecl
```

----------------------------------------

TITLE: Using Type Guards with Generic Union Type
DESCRIPTION: This snippet demonstrates how to use type guards with the generic union type `AB<T>`. The function `unrefined1` destructures the `variant` and `value` properties from an `AB<T>` object. It then uses a conditional check on `variant` to call different functions (`printValue` or `printValueList`) based on the type of `value`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_17

LANGUAGE: typescript
CODE:
```
    declare function printValue<T>(t: T): void;
    
    declare function printValueList<T>(t: Array<T>): void;
    
    function unrefined1<T>(ab: AB<T>): void {
        const { variant, value } = ab;
        if (variant === 'a') {
            printValue<T>(value);
        }
        else {
            printValueList<T>(value);
        }
    }

```

----------------------------------------

TITLE: Demonstrating Implicit 'any' Types in Destructuring Parameters in TypeScript
DESCRIPTION: This code snippet shows multiple function declarations with different parameter patterns, including array destructuring, object destructuring, and default values. It demonstrates where TypeScript infers implicit 'any' types, which are flagged as errors when the noImplicitAny option is enabled.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyDestructuringParameterDeclaration.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function f1([a], {b}, c, d) { // error
}
function f2([a = undefined], {b = null}, c = undefined, d = null) { // error
}
function f3([a]: [any], {b}: { b: any }, c: any, d: any) {
}
function f4({b}: { b }, x: { b }) { // error in type instead
}
function f5([a1] = [undefined], {b1} = { b1: null }, c1 = undefined, d1 = null) { // error
}
```

----------------------------------------

TITLE: Using await in class constructor and method (TypeScript)
DESCRIPTION: Example of TypeScript error when using 'for await' loop and 'await' expression in a class constructor and method. Shows that class members have the same restrictions as standalone functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitInNonAsyncFunction.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
class clazz {
  constructor(p: Promise<number>) {
    for await (const _ of []);
    await p;
  }
  method(p: Promise<number>) {
  for await (const _ of []);
    await p;
  }
}
```

----------------------------------------

TITLE: Type Compatibility Error Demonstration in TypeScript
DESCRIPTION: This snippet illustrates a type compatibility error that occurs when trying to assign an object with incompatible types. The variable from the first module containing a number instead of a boolean is pointed to in the second module, resulting in a TypeScript error indicating the incompatibility of types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability14.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
__test2__.__val__obj = __test1__.__val__obj4
    ~~~~~~~~~~~~~~~~~~~~
!!! error TS2322: Type 'interfaceWithPublicAndOptional<number, string>' is not assignable to type '{ one: boolean; }'.
!!! error TS2322:   Types of property 'one' are incompatible.
!!! error TS2322:     Type 'number' is not assignable to type 'boolean'.
```

----------------------------------------

TITLE: Assigning Object Literals to Union Types in TypeScript
DESCRIPTION: This snippet shows how TypeScript handles assignments of object literals to variables with union types. It demonstrates cases where TypeScript correctly identifies type mismatches.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTypeWithUnionTypeObjectLiteral.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var objStrOrNum3: { prop: string } | { prop: number } = {
    prop: strOrNumber
};
var objStrOrNum4: { prop: string | number } = {
    prop: strOrNumber
};
var objStrOrNum5: { prop: string; anotherP: string; } | { prop: number } = { prop: strOrNumber };
var objStrOrNum6: { prop: string; anotherP: string; } | { prop: number } = {
    prop: strOrNumber,
    anotherP: str
};
```

----------------------------------------

TITLE: Using ES6 Map Collection with ES5 Library in TypeScript
DESCRIPTION: Shows the error when attempting to use the ES6 Map collection which is not defined in ES5. The TypeScript compiler suggests changing the 'lib' compiler option to 'es2015' or later.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/modularizeLibrary_ErrorFromUsingES6FeaturesWithOnlyES5Lib.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var m = new Map<string, number>();
m.clear();
// Using ES6 iterable
m.keys();
```

----------------------------------------

TITLE: Destructuring with Default Values in Loop - TypeScript
DESCRIPTION: This TypeScript code snippet showcases destructuring with default values inside a `for...of` loop. It destructures the `skills` property (a nested object) from each element of the `multiRobots` array. Default values are assigned to `primary` and `secondary` if they are missing or undefined. The skills object itself defaults to `{ primary: "nosKill", secondary: "noSkill" }` if it is undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
for (let { skills: { primary: primaryA = "primary", secondary: secondaryA = "secondary" } =
    { primary: "nosKill", secondary: "noSkill" } } of 
     multiRobots
```

----------------------------------------

TITLE: Iterating Over Robot Skills with TypeScript
DESCRIPTION: The snippet iterates over an array of robot objects, destructures each object into variables, and logs the robot's name using the console. This requires an array of robot objects, each with 'name' and 'skill' properties. The expected input is an array of objects, and the output is a console log of each robot's name. The limitation is that it logs only the name of each robot, not their skills.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_17

LANGUAGE: JavaScript
CODE:
```
for (var _22 = 0, _23 = [{ name: "mower", skill: "mowing" }, { name: "trimmer", skill: "trimming" }]; _22 < _23.length; _22++) {
    _j = _23[_22], nameA = _j.name, skillA = _j.skill;
    console.log(nameA);
}
```

----------------------------------------

TITLE: Iterating Over Dynamic Robot Objects with Destructuring in TypeScript
DESCRIPTION: This code snippet shows a for...of loop that iterates over the result of a 'getRobots()' function call. It uses destructuring assignment with default values to extract 'name' and 'skill' properties from each robot object returned by the function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_46

LANGUAGE: typescript
CODE:
```
for ({ name = "noName", skill = "noSkill"  } of getRobots()) {
    // Loop body
}
```

----------------------------------------

TITLE: Form Class with Typed Child Form Factories
DESCRIPTION: A generic Form class that uses mapped types to create child form factories for each property. The set method ensures type safety when setting property values using keyof constraints.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_19

LANGUAGE: typescript
CODE:
```
class Form<T> {
    private childFormFactories: {[K in keyof T]: (v: T[K]) => Form<T[K]>}

    public set<K extends keyof T>(prop: K, value: T[K]) {
        this.childFormFactories[prop](value)
    }
}
```

----------------------------------------

TITLE: Valid Prop Spreading and Data Attributes in TypeScript React
DESCRIPTION: This snippet demonstrates valid ways to use components that don't accept specific props, including spreading an 'any' object, using data attributes, and spreading empty objects or objects with data attributes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponents1.errors.txt#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
let o1: any;
// OK
let j = <EmptyPropSFC {...o1} />
let j1 = <EmptyPropSFC />
let j2 = <EmptyPropSFC data-prop />
let j3 = <EmptyPropSFC {...{}} />
let j4 = <EmptyPropSFC {...{ "data-info": "hi"}} />
```

----------------------------------------

TITLE: Removing Class from HTMLElement - TypeScript
DESCRIPTION: This function, `removeClass`, takes an HTML element and a class name as arguments, and removes occurrences of the class from the element's class list using a regular expression. It uses a utility function, `_classNameRegexp`, to generate the regular expression needed for the replacement. It is essential that the `_classNameRegexp` function is defined elsewhere in the code since it is not included in this snippet. The function returns the adjusted class name as a string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserArgumentList1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export function removeClass (node:HTMLElement, className:string) {
	node.className = node.className.replace(_classNameRegexp(className), function (everything, leftDelimiter, name, rightDelimiter) {
												return leftDelimiter.length + rightDelimiter.length === 2 ? ' ' : '';
		});
}
```

----------------------------------------

TITLE: TypeScript Decorated Class Declaration
DESCRIPTION: Shows the original TypeScript class definition with decorators applied to various class members including methods, accessors, and private static fields.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-sourceMap(target=es2015).sourcemap.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
class C {
    @dec
    @dec
    method() {}

    @dec
    @dec
    get x() { return 1; }

    @dec
    @dec
    set x(value: number) { }

    @dec
    @dec
    y = 1;

    @dec
    @dec
    accessor z = 1;

    @dec
    @dec
    static #method() {}

    @dec
    @dec
    static get #x() { return 1; }

    @dec
    @dec
    static set #x(value: number) { }

    @dec
    @dec
    static #y = 1;

    @dec
    @dec
    static accessor #z = 1;
}
```

----------------------------------------

TITLE: Generic Function with Object Property Type Constraint in TypeScript
DESCRIPTION: This function demonstrates type inference and constraints on specific properties of generic types. It shows how TypeScript handles nullable and non-nullable types in the context of object properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/conditionalTypes1.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
function f4<T extends { x: string | undefined }>(x: T["x"], y: NonNullable<T["x"]>) {
    x = y;
    y = x;  // Error
}
```

----------------------------------------

TITLE: Exporting a Class in TypeScript
DESCRIPTION: This snippet defines a class and exports it as the default export. It demonstrates a simple module export in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveExportAssignmentAndFindAliasedType2.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
class ClassB { }
export = ClassB;
```

----------------------------------------

TITLE: Defining JSX Module and Element Interfaces in TypeScript
DESCRIPTION: This snippet defines a module for JSX, including an Element interface and IntrinsicElements interface with an indexer. This is typically used to set up JSX support in TypeScript projects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxReactEmit7.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare module JSX {
	interface Element { }
	interface IntrinsicElements {
		[s: string]: any;
	}
}
```

----------------------------------------

TITLE: Node Package Configuration (package.json)
DESCRIPTION: This JSON snippet defines the package configuration for a module named 'pkg'. It specifies the name, version, and exports, indicating that the module provides separate entry points for 'import' and 'require' resolution modes, pointing to 'import.js' and 'require.js' respectively.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportModeDeclarationEmit2(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "exports": {
        "import": "./import.js",
        "require": "./require.js"
    }
}
```

----------------------------------------

TITLE: Filtering Arrays with Truthiness Check in TypeScript
DESCRIPTION: Demonstrates how using truthiness (!!x) in filter functions doesn't correctly narrow types from 'number | null' to 'number', causing type errors when assigning to number[].
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypePredicates.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const numsOrNull = [1, 2, 3, 4, null];
const filteredNumsTruthy: number[] = numsOrNull.filter(x => !!x);  // should error
const filteredNumsNonNullish: number[] = numsOrNull.filter(x => x !== null);  // should ok
```

----------------------------------------

TITLE: Importing and Using Modules in TypeScript
DESCRIPTION: This code snippet from 'test.ts' shows how to import and utilize modules in TypeScript. Imports are done using the 'require' syntax for external modules 'ref/m1' and '../outputdir_module_multifolder_ref/m2'. The code also defines an additional variable, class, and integrates imported classes to demonstrate modular interactions. The successful import of 'm1' and 'm2' allows their classes to be stored and possibly manipulated within new variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootAbsolutePathModuleMultifolderSpecifyOutputFile/node/mapRootAbsolutePathModuleMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import m1 = require("ref/m1");
import m2 = require("../outputdir_module_multifolder_ref/m2");
export var a1 = 10;
export class c1 {
    public p1: number;
}

export var instance1 = new c1();
export function f1() {
    return instance1;
}

export var a2 = m1.m1_c1;
export var a3 = m2.m2_c1;
```

----------------------------------------

TITLE: Declaring Global JSX Type Definitions - TypeScript
DESCRIPTION: This snippet declares global types for JSX in TypeScript, including interfaces and namespaces to define how JSX elements and attributes are structured. It sets up the foundational types required for components and aims to help TypeScript enforce type checks for component props and children.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxEmptyExpressionNotCountedAsChild2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// repro from #38108

export {}

declare global {
    namespace JSX {
        type Element = any;
        interface ElementAttributesProperty {
            __properties__: {};
        }
        interface IntrinsicElements {
            [key: string]: string;
        }
        interface ElementChildrenAttribute {
            __children__: {};
        }
    }
}

interface MockComponentInterface {
    new (): {
        __properties__: { bar?: number } & { __children__: () => number };
    };
}

declare const MockComponent: MockComponentInterface;

<MockComponent>{}</MockComponent>; // error
 ~~~~~~~~~~~~~
!!! error TS2322: Type '{}' is not assignable to type '{ bar?: number | undefined; } & { __children__: () => number; }'.
!!! error TS2322:   Property '__children__' is missing in type '{}' but required in type '{ __children__: () => number; }'.
!!! related TS2728 jsxEmptyExpressionNotCountedAsChild2.tsx:22:46: '__children__' is declared here.
```

----------------------------------------

TITLE: Incorrect Prop Type Assignment: Boolean
DESCRIPTION: This snippet attempts to pass props to the `OverWriteAttr` component, but it introduces a type error by assigning `true` to the `y` property, which is defined as `false` in the `Prop` interface. This highlights TypeScript's type checking capabilities in React components.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadAttributesResolution12.errors.txt#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
// Error
    let x = <OverWriteAttr {...obj} y overwrite="hi" {...obj1} />
                                    ~
!!! error TS2322: Type 'true' is not assignable to type 'false'.
!!! related TS6500 file.tsx:14:5: The expected type comes from property 'y' which is declared here on type 'IntrinsicAttributes & IntrinsicClassAttributes<OverWriteAttr> & Prop & { children?: ReactNode; }'
```

----------------------------------------

TITLE: Interface Inheritance Type Mismatch in TypeScript
DESCRIPTION: Demonstrates TypeScript's type checking for interface inheritance. Shows how TypeScript enforces type compatibility between base and derived interfaces, with an error when trying to change property type from number to string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceDeclaration6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface i1 { foo: number; };
interface i2 extends i1 { foo: number; };
interface i3 extends i1 { foo: string; };
interface i4 {
 bar():any;
 bar():any;
}
```

----------------------------------------

TITLE: Root Package.json Configuration
DESCRIPTION: Root level package.json configuration specifying ES module type for the project.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesSynchronousCallErrors(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Class Expression with Function Expressions
DESCRIPTION: Implementation using function expression syntax where parameters lack type annotations, causing implicit 'any' type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextuallyTypedClassExpressionMethodDeclaration02.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function getFoo3(): Foo {
    return class {
        method1 = function (arg) {
            arg.numProp = 10;
        }
        method2 = function (arg) {
            arg.strProp = "hello";
        }
    }
}
```

----------------------------------------

TITLE: Using Readonly<T> Utility Type in TypeScript
DESCRIPTION: This snippet demonstrates the Readonly<T> utility type that makes all properties in a type readonly. It shows how TypeScript prevents assignment to any property when using Readonly<Bar>.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypes6.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
declare let x4: Readonly<Bar>;
x4.a = 1;  // Error
x4.b = 1;  // Error
```

----------------------------------------

TITLE: Updating Records with Type-Safe ID Mapping
DESCRIPTION: These functions demonstrate how to safely update string IDs in a record using mapped types and indexed access. The updateIds functions ensure type safety when mapping from old IDs to new IDs.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
function updateIds<T extends Record<K, string>, K extends string>(
    obj: T,
    idFields: K[],
    idMapping: Partial<Record<T[K], T[K]>>
): Record<K, string> {
    for (const idField of idFields) {
        const newId: T[K] | undefined = idMapping[obj[idField]];
        if (newId) {
            obj[idField] = newId;
        }
    }
    return obj;
}

function updateIds2<T extends { [x: string]: string }, K extends keyof T>(
    obj: T,
    key: K,
    stringMap: { [oldId: string]: string }
) {
    var x = obj[key];
    stringMap[x]; // Should be OK.
}
```

----------------------------------------

TITLE: TypeScript Interface and Namespace Definition
DESCRIPTION: Initial TypeScript file defining an interface A and namespace A without errors
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noSymbolForMergeCrash.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface A { }
namespace A {}
```

----------------------------------------

TITLE: Generic Function with Type Parameter Constraint - TypeScript
DESCRIPTION: This code snippet defines a generic function `foo` that accepts two functions as arguments. Both argument functions take a parameter of type `T` and return a value of type `T`. The snippet then demonstrates an incorrect usage where a function accepting a `string` is passed as an argument where a function accepting a `number` is expected, resulting in a type error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCallWithGenericSignatureArguments2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
        function foo<T>(a: (x: T) => T, b: (x: T) => T) {
            var r: (x: T) => T;
            return r;
        }
    
        var r1: (x: {}) => {} = foo((x: number) => 1, (x: string) => '');
                                                      ~~~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type '(x: string) => string' is not assignable to parameter of type '(x: number) => number'.
!!! error TS2345:   Types of parameters 'x' and 'x' are incompatible.
!!! error TS2345:     Type 'number' is not assignable to type 'string'.
```

----------------------------------------

TITLE: Reducing Arrays to Strings in TypeScript
DESCRIPTION: This snippet shows how to reduce an array of strings to a string type in TypeScript, emphasizing type safety. It illustrates the correct usage of generic types in the reduce method and points out a type error when attempting to use a number method on a string result.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericReduce.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    var n3 = b.reduce<string>( (x, y) => x + y, ""); // Initial value is of type string
    n3.toExponential(2); // should error if 'n3' is correctly type 'string'
       ~~~~~~~~~~~~~
!!! error TS2339: Property 'toExponential' does not exist on type 'string'.
    n3.charAt(0);        // should not error if 'n3' is correctly type 'string'
```

----------------------------------------

TITLE: Package Configuration for Module Resolution in JSON
DESCRIPTION: This snippet defines the package.json configuration for a package named 'pkg' with export paths for 'import' and 'require' modes. It's necessary for supporting TypeScript's import resolution. Expected input: none; Output: JSON configuration for the module package.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportModeDeclarationEmit1(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "exports": {
        "import": "./import.js",
        "require": "./require.js"
    }
}
```

----------------------------------------

TITLE: Defining an Object Type with JSDoc in TypeScript
DESCRIPTION: This snippet shows how to define an object type with multiple properties using JSDoc's @typedef tag. The type 'Type2' is defined as an object with 'num' (number), 'str' (string), and 'boo' (boolean) properties. The 'check' function then utilizes this type as the type of its 'obj' parameter, illustrating how to access properties of a JSDoc-defined object type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typedefTagWrapping.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    /** 
     * @typedef {{
     *   num: number,
     *   str: string,
     *   boo: boolean
     * }} Type2
     */
    
    /**
     * Makes use of a type with a multiline type expression.
     * @param {Type2} obj The object.
     * @returns {string|number} The return.
     */
    function check(obj) {
      return obj.boo ? obj.num : obj.str;
    }
    
```

----------------------------------------

TITLE: Defining a Generic React Component in TypeScript
DESCRIPTION: This code defines a generic React component named `GenericComponent`. It uses generics for `Props` and `Values`, extending `React.Component`. It also defines an interface `BaseProps` to enforce the structure of `initialValues` and `nextValues` props. The `nextValues` function takes a value of type `T` and returns a value of type `T`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxGenericTagHasCorrectInferences.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import * as React from "react";
    interface BaseProps<T> {
      initialValues: T;
      nextValues: (cur: T) => T;
    }
    declare class GenericComponent<Props = {}, Values = object> extends React.Component<Props & BaseProps<Values>, {}> {
      iv: Values;
    }
```

----------------------------------------

TITLE: Checking TypeScript Configuration for Deprecated Options
DESCRIPTION: This JSON snippet specifies compiler options in a 'tsconfig.json' file, but many options have been deprecated. It highlights errors related to deprecated options such as 'target', 'noImplicitUseStrict', 'keyofStringsOnly', and suggests replacing 'out' with 'outFile'. These options need revision to adhere to current TypeScript standards.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/deprecatedCompilerOptions5.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "target": "ES3",
        "noImplicitUseStrict": true,
        "keyofStringsOnly": true,
        "suppressExcessPropertyErrors": true,
        "suppressImplicitAnyIndexErrors": true,
        "noStrictGenericChecks": true,
        "charset": "utf8",
        "out": "dist.js",
        "ignoreDeprecations": "5.0"
    }
}
```

----------------------------------------

TITLE: Array Destructuring Loop in TypeScript
DESCRIPTION: Loop implementation using array destructuring to extract name and skill values from a robot array. The code assigns default values and handles nested array destructuring with console output.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_35

LANGUAGE: typescript
CODE:
```
for (var _62 = 0, robots_4 = robots; _62 < robots_4.length; _62++) {
    [nameMA = "noName", [
        primarySkillA = "primary",
        secondarySkillA = "secondary"
    ] = ["skill1", "skill2"]]
    console.log(nameMA);
}
```

----------------------------------------

TITLE: TypeScript Module Import/Export with Type Usage
DESCRIPTION: Demonstrates importing and re-exporting types, creating a user object, and implementing a getter function with explicit return type. Shows various TypeScript module syntax patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowImportingTypesDtsExtension(allowimportingtsextensions=false,moduleresolution=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import type { User } from "./types.d.ts";
export type { User } from "./types.d.ts";

export const user: User = { name: "John" };

export function getUser(): import("./types.d.ts").User {
    return user;
}
```

----------------------------------------

TITLE: Nested Array Parameter Destructuring with Default Values - TypeScript
DESCRIPTION: Defines a function `b7` that uses nested destructuring to extract elements from a deeply nested array parameter, also assigning default values if the elements are not provided.  This demonstrates how to use nested destructuring and default values for complex array structures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration1ES5.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
"function b7([[a], b, [[c, d]]] = [[undefined], undefined, [[undefined, undefined]]]) { }"
```

----------------------------------------

TITLE: Property Access Operations in TypeScript
DESCRIPTION: Demonstrates various property access patterns including dot notation and bracket notation. Shows type checking behavior for accessing properties that exist, don't exist, or are accessed with different types of keys.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertyAccess.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// Assign to a property access
obj.y = 4;

// Property access on value of type 'any'
anyVar.x = anyVar.y = obj.x = anyVar.z;

// Dotted property access of property that exists
var aa = obj.x;

// Dotted property access of property that exists on value's apparent type
var bb = obj.hasOwnProperty;

// Dotted property access of property that doesn't exist on value's apparent type
var cc = obj.qqq; // error

// Bracket notation property access using string literal value on type with property of that literal name
var dd = obj['literal property'];
var dd: number;

// Bracket notation property access using string literal value on type without property of that literal name
var ee = obj['wa wa wa wa wa'];
var ee: any;

// Bracket notation property access using numeric string literal value on type with property of that literal name
var ff = obj['10'];
var ff: string;

// Bracket notation property access using numeric string literal value on type without property of that literal name
var gg = obj['1'];
var gg: any;
```

----------------------------------------

TITLE: Importing from Non-existent Module in TypeScript
DESCRIPTION: Demonstrates an invalid import statement that attempts to import from a module that doesn't exist, resulting in TypeScript compilation error TS2307. This error occurs when TypeScript cannot find the module or its type declarations in the project's dependencies.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importEmptyFromModuleNotExisted.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import {} from 'module-not-existed'
```

----------------------------------------

TITLE: Multi-Robot Skills Destructuring Loop
DESCRIPTION: For loop with complex array destructuring for robot skills, including multiple default values and nested array patterns for primary and secondary skills.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
for (var _f = multiRobotA[1], _g = _f === void 0 ? ["none", "none"] : _f, _h = _g[0], primarySkillA = _h === void 0 ? "primary" : _h, _j = _g[1], secondarySkillA = _j === void 0 ? "secondary" : _j, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Error with Numeric Value in String Prop with Spread Attributes in React TSX
DESCRIPTION: This code demonstrates a type error when spreading an object into a React component and trying to override a property with the wrong type. The 'ignore-prop' expects a string but is given a number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentsWithTypeArguments2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function Bar<T extends {prop: number}>(arg: T) {
    let a1 = <ComponentSpecific1 {...arg} ignore-prop={10} />;
}
```

----------------------------------------

TITLE: Correct Generic Implementation with Flexibility
DESCRIPTION: In `StringFoo3`, the implementation correctly uses the generic type signature of `foo`, thus aligning with the principle of TypeScript's generics without causing type incompatibility errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericSpecializations1.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
class StringFoo3 implements IFoo<string> {
    foo<T>(x: T): T { return null; }
}
```

----------------------------------------

TITLE: Defining and Calling a Function with Type Checking in TypeScript
DESCRIPTION: This snippet defines a function 'foo' that takes a single string parameter and demonstrates various function calls, including correct usage and cases that produce TypeScript compilation errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionCall6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function foo(a:string){}; 
foo('bar');
foo(2);
foo('foo', 'bar');
foo();
```

----------------------------------------

TITLE: Iterating Arrays with Destructuring in TypeScript
DESCRIPTION: Code demonstrates array destructuring in for...of loops using arrays and function calls. Features default value assignment (-1) and rest parameter usage to collect remaining array elements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_36

LANGUAGE: typescript
CODE:
```
for (let [numberA3 = -1, ...robotAInfo] of robots) {
    console.log(numberA3);
}

for (let [numberA3 = -1, ...robotAInfo] of getRobots()) {
    console.log(numberA3);
}
```

----------------------------------------

TITLE: Importing Modules in ESM Format (TypeScript)
DESCRIPTION: Demonstrates importing modules from different file formats (CJS, MJS, JS) in an ESM-formatted TypeScript file. This snippet shows the correct way to import modules in an ESM context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExportsTrailers(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// esm format file
import * as cjsi from "inner/cjs/index.cjs";
import * as mjsi from "inner/mjs/index.mjs";
import * as typei from "inner/js/index.js";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: Fail Function that Throws an Error in TypeScript
DESCRIPTION: A utility function that explicitly indicates a failure scenario by throwing an error. It is defined to never return normally, which helps TypeScript understand control flow better within the application.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assertionsAndNonReturningFunctions.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
/**
 * @returns {never}
 */
function fail() {
    throw new Error();
}
```

----------------------------------------

TITLE: Declaring JSX Elements Interface and Methods in TypeScript
DESCRIPTION: This snippet declares a namespace 'JSX' with an interface 'Element' defining properties and methods relevant to a JSX element. It includes 'isElement' and 'createElement' methods to handle JSX elements. Dependencies include TypeScript for type definitions. Input is primarily JSX element arguments, and outputs consist of initialized component objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxFactoryNotIdentifierOrQualifiedName.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare namespace JSX {
    interface Element {
        name: string;
        isIntrinsic: boolean;
        isCustomElement: boolean;
        toString(renderId?: number): string;
        bindDOM(renderId?: number): number;
        resetComponent(): void;
        instantiateComponents(renderId?: number): number;
        props: any;
    }
}
export namespace Element {
    export function isElement(el: any): el is JSX.Element {
        return el.markAsChildOfRootElement !== undefined;
    }
    
    export function createElement(args: any[]) {
    
        return {
        }
    }
}

export let createElement = Element.createElement;

function toCamelCase(text: string): string {
    return text[0].toLowerCase() + text.substring(1);
}
```

----------------------------------------

TITLE: Valid Constructor Overloads with String Type
DESCRIPTION: Valid class declaration where string literal overloads are compatible with a string type implementation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constructorsWithSpecializedSignatures.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
declare class C2 {
    constructor(x: "hi");
    constructor(x: "foo");
    constructor(x: string);
}
```

----------------------------------------

TITLE: Generic Array Mapping with Conditional Check in TypeScript
DESCRIPTION: Implements a generic array mapping function that conditionally processes elements until a specific condition is met. Takes mapper and condition checker functions as parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowLoopAnalysis.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function mapUntilCant<a, b>(
    values: a[],
    canTake: (value: a, index: number) => boolean,
    mapping: (value: a, index: number) => b
): b[] {
    let result: b[] = [];
    for (let index = 0, length = values.length; index < length; index++) {
        let value = values[index];
        if (canTake(value, index)) {
            result.push(mapping(value, index));
        } else {
            return result;
        }
    }
    return result;
}
```

----------------------------------------

TITLE: Basic Class Exports in TypeScript
DESCRIPTION: Defines two base classes A and B for export in module a.ts
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace8.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export class A {}
export class B {}
```

----------------------------------------

TITLE: Class Constructor Inheritance and Type Checking in TypeScript
DESCRIPTION: This code demonstrates TypeScript's type checking for class constructor inheritance. It shows that a subclass with additional constructor parameters cannot be assigned to the parent class type, as the constructor signatures are incompatible. The example also shows a valid case where a subclass with matching constructor parameters can be assigned to the parent type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classSideInheritance3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
    constructor(public x: string) {
    }
}
class B extends A {
    constructor(x: string, public data: string) {
        super(x);
    }
}
class C extends A {
    constructor(x: string) {
        super(x);
    }
}

var r1: typeof A = B; // error
var r2: new (x: string) => A = B; // error
var r3: typeof A = C; // ok
```

----------------------------------------

TITLE: Defining Food Class Hierarchy in TypeScript
DESCRIPTION: This snippet defines a class hierarchy for different types of food, including base classes and subclasses. It demonstrates inheritance, constructor chaining, and property definitions in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectCreationOfElementAccessExpression.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Food {
    private amount: number;
    constructor(public name: string) {
        this.amount = 100;
    }
    public eat(amountToEat: number): boolean {
        this.amount -= amountToEat;
        if (this.amount <= 0) {
            this.amount = 0;
            return false;
        }
        else {
            return true;
        }
    }
}
class MonsterFood extends Food {
    constructor(name: string, public flavor: string) {
        super(name);
    }
}
class IceCream extends MonsterFood {
    private isDairyFree: boolean;
    constructor(public flavor: string) {
        super("Ice Cream", flavor);
    }
}
class Cookie extends MonsterFood {
    constructor(public flavor: string, public isGlutenFree: boolean) {
        super("Cookie", flavor);
    }
}
class PetFood extends Food {
    constructor(name: string, public whereToBuy: number) {
        super(name);
    }
}
class ExpensiveOrganicDogFood extends PetFood {
    constructor(public whereToBuy: number) {
        super("Origen", whereToBuy);
    }
}
class ExpensiveOrganicCatFood extends PetFood {
    constructor(public whereToBuy: number, public containsFish: boolean) {
        super("Nature's Logic", whereToBuy);
    }
}
class Slug {
    // This is NOT a food!!!
}
```

----------------------------------------

TITLE: Initializing For Loop with Destructuring and Default Values in TypeScript
DESCRIPTION: Initializes a for loop by calling 'getRobot()', destructuring the returned array into variables 'numberA2', 'nameA2', and 'skillA2' with default values if the array elements are undefined, and setting the loop counter 'i'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.sourcemap.txt#_snippet_54

LANGUAGE: TypeScript
CODE:
```
for (_4 = getRobot(), _5 = _4[0], numberA2 = _5 === void 0 ? -1 : _5, _6 = _4[1], nameA2 = _6 === void 0 ? "name" : _6, _7 = _4[2], skillA2 = _7 === void 0 ? "skill" : _7, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Attempting Default Import Without 'esModuleInterop' Flag in TypeScript
DESCRIPTION: This snippet attempts to use default import syntax to import from a module that uses 'export =' syntax. Without the 'esModuleInterop' flag, this results in a TypeScript compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ImportDefaultBindingInEs5.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import defaultBinding from "./es6ImportDefaultBindingInEs5_0";
```

----------------------------------------

TITLE: Using 'declare' Keyword in TypeScript
DESCRIPTION: This snippet shows the correct usage of the 'declare' keyword in TypeScript for ambient declarations, and common mistakes in its usage that result in compiler errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/commonMissingSemicolons.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
declare const myDeclareConst1: 1;
declared const myDeclareConst2: 1;
declare constd myDeclareConst3: 1;
declared constd myDeclareConst4: 1;
declareconst myDeclareConst5;
```

----------------------------------------

TITLE: Iterating and Destructuring Array with Default Values in TypeScript
DESCRIPTION: This code snippet demonstrates how to iterate over an array of arrays using a `for...of` loop and destructure the inner arrays.  Default values are provided for variables in case the corresponding elements in the inner arrays are undefined. This ensures that the variables `nameMA`, `primarySkillA`, and `secondarySkillA` always have a value, even if the data structure is incomplete.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_26

LANGUAGE: typescript
CODE:
```
for ([nameMA = "noName", [
    primarySkillA = "primary",
    secondarySkillA = "secondary"
] = ["skill1", "skill2"]] of multiRobots) {
    console.log(nameMA);
}
```

----------------------------------------

TITLE: Type mismatch in multiline arrow function with comment 3 - TypeScript
DESCRIPTION: This code snippet produces a TS2345 error for assigning a function with a return type of void to a location expecting a function that returns a number. The comments around the arrow function are irrelevant to the type checking process.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arrowFunctionErrorSpan.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
    function f(a: () => number) { }
    
    // multi line with a comment 3
    f(  // comment 1
        // comment 2
        () =>
        
        // comment 3
        {
            // comment 4
        }
        // comment 5
    ); 

```

----------------------------------------

TITLE: Defining a Mixed Component in TypeScript
DESCRIPTION: This code defines a `MixedComponent` as either a `FunctionComponent` or a `ClassComponent` based on the result of `Math.random()`. This showcases a union type for components and demonstrates how TypeScript handles type checking when dealing with potentially different component types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxComponentTypeErrors.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
const MixedComponent = Math.random() ? FunctionComponent : ClassComponent;
```

----------------------------------------

TITLE: Defining Class Inheritance with Super Call Error - TypeScript
DESCRIPTION: This code snippet defines two classes, A and B, where class A extends class B. It illustrates a TypeScript compilation error when trying to access 'this' before calling 'super()' in the A class constructor. The snippet serves as a key example for understanding the class inheritance rules in TypeScript, specifically the order of initialization.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameBadSuperUseDefineForClassFields(target=es2022).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class B {};
class A extends B {
  #x;
  constructor() {
    this;
    ~~~~
!!! error TS17009: 'super' must be called before accessing 'this' in the constructor of a derived class.
    super();
  }
}
```

----------------------------------------

TITLE: Importing and Calling Modules (b.mts) - Correct Usage
DESCRIPTION: This snippet demonstrates the correct way to call the default export of the imported modules, assuming the default export is a function. It accesses the `default` property of the imported module and calls it.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleNodeDefaultImports(module=nodenext).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    // should all work
    a.default();
    b.default();
    c.default();
    d.default();
    self.default.default();
    self.def.default();
```

----------------------------------------

TITLE: Importing Modules in ECMAScript Module (index.js)
DESCRIPTION: Demonstrates correct module imports in an ECMAScript module file. It imports from 'inner/cjs/index', 'inner/mjs/index', and 'inner/js/index' without errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExports(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
// esm format file
import * as cjsi from "inner/cjs/index";
import * as mjsi from "inner/mjs/index";
import * as typei from "inner/js/index";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: Demonstrating TypeScript's Let Variable Capture in Loops
DESCRIPTION: This snippet shows how 'let' variables are captured in various loop constructs (for, for-in, for-of, while, do-while). It demonstrates closures capturing these variables through both function declarations and arrow functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// ====let
for (let x of []) {
    (function() { return x});
    (() => x);
    if (x == 1) {
        break;
    }
    if (x == 2) {
        continue;
    }
}

for (let x in []) {
    (function() { return x});
    (() => x);
    if (x == "1") {
        break;
    }
    if (x == "2") {
        continue;
    }
}


for (let x = 0; x < 1; ++x) {
    (function() { return x});
    (() => x);
    if (x == 1) {
        break;
    }
    if (x == 2) {
        continue;
    }
}

while (1 === 1) {
    let x;
    (function() { return x});
    (() => x);
    if (x == 1) {
        break;
    }
    if (x == 2) {
        continue;
    }
}

do {
    let x;
    (function() { return x});
    (() => x);
    if (x == 1) {
        break;
    }
    if (x == 2) {
        continue;
    }
} while (1 === 1)

for (let y = 0; y < 1; ++y) {
    let x = 1;
    (function() { return x});
    (() => x);
    if (x == 1) {
        break;
    }
    if (x == 2) {
        continue;
    }
}

for (let x = 0, y = 1; x < 1; ++x) {
    (function() { return x + y});
    (() => x + y);
    if (x == 1) {
        break;
    }
    if (x == 2) {
        continue;
    }
}

while (1 === 1) {
    let x, y;
    (function() { return x + y});
    (() => x + y);
    if (x == 1) {
        break;
    }
    if (x == 2) {
        continue;
    }
}

do {
    let x, y;
    (function() { return x + y});
    (() => x + y);
    if (x == 1) {
        break;
    }
    if (x == 2) {
        continue;
    }
} while (1 === 1)

for (let y = 0; y < 1; ++y) {
    let x = 1;
    (function() { return x + y});
    (() => x + y);
    if (x == 1) {
        break;
    }
    if (x == 2) {
        continue;
    }
}
```

----------------------------------------

TITLE: Valid Parameter Properties in TypeScript Class Constructors
DESCRIPTION: Shows valid usage of parameter properties with accessibility modifiers in class constructor implementations. Parameter properties are a TypeScript feature that allows declaring a class property and assigning a constructor parameter to it in a single statement.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constructSignatureWithAccessibilityModifiersOnParameters.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    constructor(public x, private y) { }
}

class C2 {
    constructor(public x) { }
}

class C3 {
    constructor(private x) { }
}
```

----------------------------------------

TITLE: Class Constants and Static Methods - TypeScript
DESCRIPTION: This snippet extends the previous class declaration, adding static methods, private properties, and their corresponding decorators. It shows how to initialize static class properties and manage accessor methods with decorators.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-sourceMap(target=es2015).sourcemap.txt#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
static #method() {}
static get #x() { return 1; }
static set #x(value: number) { }
static #y = 1;
static accessor #z = 1;
```

----------------------------------------

TITLE: Class Extending Abstract Class Without Implementation
DESCRIPTION: Shows that a non-abstract class extending an abstract class must implement all abstract members, otherwise it causes a compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classAbstractInstantiations2.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
class C extends B { } // error -- not declared abstract
```

----------------------------------------

TITLE: Declaring JSX Module Types in TypeScript
DESCRIPTION: TypeScript declaration file defining JSX namespace and interfaces for React components, including Element and IntrinsicElements interfaces.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution9.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare module JSX {
    interface Element { }
    interface IntrinsicElements {
    }
    interface ElementAttributesProperty {
        props;
    }
}

interface Props {  
    foo: string;
}
```

----------------------------------------

TITLE: Invalid Tuple Assignment - Incorrect Types in TypeScript
DESCRIPTION: This code attempts to assign a tuple `[5, "foo"]` to `i1.tuple1`, which is defined as a tuple of `[string, number]`. This results in a TypeScript error because the element types are mismatched: a number is being assigned to a string, and a string is being assigned to a number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCallWithTupleType.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
i1.tuple1 = [5, "foo"];
```

----------------------------------------

TITLE: Importing Single Export in TypeScript
DESCRIPTION: Imports only the 'get' export from t1.ts
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportsAndImportsWithContextualKeywordNames01.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { get } from "./t1";
```

----------------------------------------

TITLE: Incorrectly Importing Types in b.ts
DESCRIPTION: This snippet demonstrates errors that occur when importing and re-exporting types without using type-only imports and exports with 'verbatimModuleSyntax' enabled. It shows the correct way to import and re-export types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/verbatimModuleSyntaxNoElisionESM.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    import { a, A, AClass } from \"./a\";
                ~
!!! error TS1484: 'A' is a type and must be imported using a type-only import when 'verbatimModuleSyntax' is enabled.
    import type { a as aValue, A as AType } from \"./a\";
    import { type A as AType2 } from \"./a\";
    
    export { A };
             ~
!!! error TS1205: Re-exporting a type when 'verbatimModuleSyntax' is enabled requires using 'export type'.
    export { A as A2 } from \"./a\";
             ~~~~~~~
!!! error TS1205: Re-exporting a type when 'verbatimModuleSyntax' is enabled requires using 'export type'.
    export type { A as A3 } from \"./a\";
    export { type A as A4 } from \"./a\";
    export type { AClass } from \"./a\";
    
```

----------------------------------------

TITLE: Implementing Number Type Guard Class
DESCRIPTION: Demonstrates a class method for type guarding between number and string types using typeof operator.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypePredicates.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
isNumber(x: number | string) {  // should ok
  return typeof x === 'number';
}
```

----------------------------------------

TITLE: Defining Getters Mapped Type in TypeScript
DESCRIPTION: Creates a mapped type that generates getter methods for each property of the input type. It uses template literal types to prefix each property with 'get' and capitalize the first letter.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeAsClauses.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type Getters<T> = { [P in keyof T & string as `get${Capitalize<P>}`]: () => T[P] };
```

----------------------------------------

TITLE: Exporting Objects and Properties in JavaScript
DESCRIPTION: This JavaScript snippet exports several properties and an object using CommonJS module syntax, demonstrating how to require modules and export specific properties for use elsewhere in the application.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesImportHigher/amd/nodeModulesImportHigher.errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
var m3 = require("m3");

module.exports = {
	"a": 42,
	"b": "hello, world",
	"person": m3.person
};
```

----------------------------------------

TITLE: Package.json with ESM Configuration
DESCRIPTION: A package.json file that configures the package as an ECMAScript module by default using "type": "module". It also defines conditional exports for different module formats (.cjs, .mjs, and default).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsConditionalPackageExports(module=node16).errors.txt#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module",
    "exports": {
        "./cjs": "./index.cjs",
        "./mjs": "./index.mjs",
        ".": "./index.js"
    }
}
```

----------------------------------------

TITLE: Optional Destructuring Parameters
DESCRIPTION: Illustrates parameter declarations with optional parameters and destructuring
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration1ES5iterable.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function d0(x?) { }
function d0(x = 10) { }

function d5({x, y} = { x: 1, y: 2 }) { }
```

----------------------------------------

TITLE: Handling Rest Parameters in JavaScript Function
DESCRIPTION: This snippet declares a JavaScript function `a` that demonstrates the usage of rest parameters along with object destructuring. The rest parameters are captured into an array `_a`, allowing individual access to the properties `a` and `b`. Key functionality includes iterating over 'arguments' using a rest parameter and initializing variables from destructured properties. The code requires ES6 compatibility to support object destructuring and the rest operator.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/restParameterWithBindingPattern1.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
function a() {
    var _a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        _a[_i] = arguments[_i];
    }
    var a = _a.a, b = _a.b;
}
```

----------------------------------------

TITLE: Robot Array Declaration and Destructuring
DESCRIPTION: Implements array destructuring patterns using a custom Robot type (tuple of [number, string, string]). Demonstrates variable declarations and different ways to extract values from arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
var robotA = [1, "mower", "mowing"];
var robotB = [2, "trimmer", "trimming"];
var nameA = robotA[1];
var numberB = robotB[0];
var numberA2 = robotA[0], nameA2 = robotA[1], skillA2 = robotA[2];
var numberC2 = [3, "edging", "Trimming edges"][0];
var _a = [3, "edging", "Trimming edges"], numberC = _a[0], nameC = _a[1], skillC = _a[2];
```

----------------------------------------

TITLE: Valid ES Module with Top-Level Await in TypeScript
DESCRIPTION: This snippet shows correct usage of top-level await in an ES module. ES modules support top-level await, so no errors are generated.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesTopLevelAwait(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
// esm format file
const x = await 1;
export {x};
for await (const y of []) {}
```

----------------------------------------

TITLE: Declaring Union Types for Exports in TypeScript
DESCRIPTION: Defines a union type 'x' that is exported from the module 'foo2'. The variable 'x' can either be an object with strings 'a' and 'c' or with numbers 'b' and 'c'. The lack of expected exports in other modules can lead to import errors as shown, indicating the importance of aligning interfaces when importing across modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/namedImportNonExistentName.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    let x: { a: string; c: string; } | { b: number; c: number; };
    export = x
```

----------------------------------------

TITLE: Testing let variable capture in while loops in TypeScript
DESCRIPTION: Demonstrates how let variables are captured in while loops. The function declares a let variable inside the loop body and creates closures that reference it.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop5.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function foo2(x) {
    while (1 === 1) {
        let x = 1;
        var v = x;
        (function() { return x + v });
        (() => x + v);
        if (x == 1) {
            return;
        }
    }
    
    use(v);
}
```

----------------------------------------

TITLE: Demonstrating TypeScript Intersection Types with Readonly Properties
DESCRIPTION: This code demonstrates how TypeScript handles readonly properties in intersection types. It defines several interfaces with readonly and mutable properties, then shows how TypeScript prevents assignment to readonly properties even when combined with other interfaces through intersection types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionTypeReadonly.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Base {
    readonly value: number;
}
interface Identical {
    readonly value: number;
}
interface Mutable {
    value: number;
}
interface DifferentType {
    readonly value: string;
}
interface DifferentName {
    readonly other: number;
}
let base: Base;
base.value = 12 // error, lhs can't be a readonly property

let identical: Base & Identical;
identical.value = 12; // error, lhs can't be a readonly property

let mutable: Base & Mutable;
mutable.value = 12;

let differentType: Base & DifferentType;
differentType.value = 12; // error, lhs can't be a readonly property

let differentName: Base & DifferentName;
differentName.value = 12; // error, property 'value' doesn't exist
```

----------------------------------------

TITLE: Valid Arrow Functions in TypeScript
DESCRIPTION: This code snippet shows examples of correctly defined arrow functions in TypeScript. The 'okay' module demonstrates different scenarios, including functions with and without parameters, and functions that return void. This is included for comparison with the error-inducing snippets.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arrowFunctionsMissingTokens.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
"module okay {
    var a = () => { };

    var b = (): void => { }

    var c = (x) => { };

    var d = (x: number, y: string) => { };

    var e = (x: number, y: string): void => { };
}"
```

----------------------------------------

TITLE: CommonJS Module Import Error (index.cts)
DESCRIPTION: Demonstrates import compatibility issues between CommonJS and ECMAScript modules with static imports
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackageExports(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// cjs format file
import * as cjs from "package/cjs";
import * as mjs from "package/mjs";
import * as type from "package";
cjs;
mjs;
type;
import * as cjsi from "inner/cjs";
import * as mjsi from "inner/mjs";
import * as typei from "inner";
cjsi;
mjs;
typei;
```

----------------------------------------

TITLE: Defining Robot Object with TypeScript
DESCRIPTION: This snippet defines a Robot object and its properties, including a name and skills. The skills are structured as primary and secondary skills, utilizing default values. The snippet serves to formalize the data structure, ensuring type safety and clarity in handling robot configurations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringParameterNestedObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
 {
  name: nameC = "name",
  skills: {
      primary: primaryB = "primary",
      secondary: secondaryB = "secondary"
  } = { primary: "SomeSkill", secondary: "someSkill" }
}: Robot = 
robotA
```

----------------------------------------

TITLE: Importing Modules using ES6 and CommonJS in TypeScript
DESCRIPTION: This snippet shows how to import modules using ES6 and CommonJS syntax. It attempts to import 'file1' using ES6 and 'file2' using CommonJS. However, it encounters errors due to missing modules. It is advised to set the 'moduleResolution' option to 'nodenext' or define aliases using the 'paths' option.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/systemModule10_ES5.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import n, {x} from 'file1'
import n2 = require('file2');
export {x}
export {x as y}
export {n}
export {n as n1}
export {n2}
export {n2 as n3}
```

----------------------------------------

TITLE: Demonstrating TypeScript Type Identity with Public and Private Properties
DESCRIPTION: This code snippet defines classes with public and private properties named 'name', and demonstrates TypeScript's type checking behavior. It shows that classes with public 'name' properties are compatible, while those with private 'name' properties are not.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeIdentityConsidersBrands.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class X{
      name: string;
}

class Y{
      name: string;
}

class X_1 {
    private name: string;
}

class Y_1 {
    private name: string;
}

function foo(arg: X){}
 
var a = new Y();
var b = new X();
 
a = b; // ok
foo(a); // ok

var a2 = new Y_1();
var b2 = new X_1();

function foo2(arg: X_1) { }

a2 = b2; // should error
foo2(a2); // should error
```

----------------------------------------

TITLE: Interface Implementation with Incompatible Return Type
DESCRIPTION: This snippet defines an interface `IFoo1` with a method `p1` that returns a number. The class `C1` implements `IFoo1`, but its `p1` method returns a string, resulting in a type error because the return types are incompatible.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/incompatibleTypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface IFoo1 {
        p1(): number;
    }
    
    class C1 implements IFoo1 { // incompatible on the return type
        public p1() {
            return "s";
        }
    }
```

----------------------------------------

TITLE: Incorrect Type Narrowing of Unknown with 'in'
DESCRIPTION: Illustrates issues with using the 'in' operator on an 'unknown' type without proper type narrowing before the check. The TypeScript compiler throws an error because it cannot guarantee that the 'unknown' type is an object before attempting to access its properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=false).errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
"function f1(x: unknown) {\n    if ("a" in x) {\n        x.a;\n    }\n    if (x && \"a\" in x) {\n        x.a;\n    }\n    if (x && typeof x === \"object\" && \"a\" in x) {\n        x.a;\n    }\n    if (x && typeof x === \"object\" && \"a\" in x && \"b\" in x && \"c\" in x) {\n        x.a;\n        x.b;\n        x.c;\n    }\n}"
```

----------------------------------------

TITLE: Exporting Module 'inner/other' in TypeScript
DESCRIPTION: This snippet exports the 'x' function and the 'Thing' interface from 'inner/other'. It is written in ESM format and properly defines the module's public API by re-exporting components to enhance modular structure. It serves as an example of how to structure exports in a TypeScript module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSourceTs(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// esm format file
export interface Thing {}
export const x: () => Thing = null as any;
```

----------------------------------------

TITLE: Abstract Class Definition with Abstract Methods in TypeScript
DESCRIPTION: Defines an abstract class `AB` with three abstract methods: `foo`, `bar`, and `baz`. These methods must be implemented by any concrete subclass of `AB`. The abstract class serves as a blueprint for its derived classes, ensuring that they provide implementations for these methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/override2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
"    abstract class AB {\n        abstract foo(v: string): void;\n    \n        abstract bar(v: string): void;\n        abstract baz(v: string): void;\n    }"
```

----------------------------------------

TITLE: Defining Class Types with Different Accessibility Modifiers
DESCRIPTION: Creates multiple class types with different levels of property visibility including default, public, protected, and private members
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionTypePropertyAccessibility.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Default {
    member: string;
}

class Public {
    public member: string;
}

class Protected {
    protected member: string;
}

class Private {
    private member: number;
}
```

----------------------------------------

TITLE: Function Expression with Args Tuple Type
DESCRIPTION: This snippet defines a function expression `f51` with a type annotation that specifies the argument types as the `Args` tuple union. Inside the function, type guards are used to narrow the type of `payload` based on the value of `kind`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
    const f51: (...args: ['A', number] | ['B', string]) => void = (kind, payload) => {
        if (kind === 'A') {
            payload.toFixed();
        }
        if (kind === 'B') {
            payload.toUpperCase();
        }
    };

```

----------------------------------------

TITLE: Destructuring with Default Values in TypeScript
DESCRIPTION: This snippet demonstrates destructuring with default values within a loop in TypeScript. It extracts 'name', 'primary', and 'secondary' values from objects in the 'multiRobots' array, providing default values if the properties are undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
for (let {
    name: nameA = "noName",
    skills: {
        primary: primaryA = "primary",
        secondary: secondaryA = "secondary"
    } = { primary: "noSkill", secondary: "noSkill" }
} of multiRobots) {
    console.log(nameA);
}
```

----------------------------------------

TITLE: Implementing React Component with TypeScript
DESCRIPTION: This snippet shows a React component implementation in TypeScript. It defines a MyComponent class with a render method and props type. The code also includes an example of component usage that triggers a TypeScript error due to an undefined prop.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution11.errors.txt#2025-04-21_snippet_1

LANGUAGE: TSX
CODE:
```
class MyComponent {  
  render() {
  }

  props: {
	  ref?: string;
  }
}

// Should be an OK
var x = <MyComponent bar='world' />;
```

----------------------------------------

TITLE: Initializing Variables and Destructuring - TypeScript
DESCRIPTION: This snippet initializes several variables with destructured assignments from an object. It shows how to extract properties from objects and also initializes a variable with a string value. The code highlights TypeScript's ability to simplify variable assignments and destructuring.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatement1.sourcemap.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
var b = hello, { name: nameB, skill: skillB } = robotB, skill: skillB } = robotB, b1 = "hello";
```

----------------------------------------

TITLE: Type Guard Assertion Function for Strings in TypeScript
DESCRIPTION: This snippet implements a type guard function that asserts the input is a string. If the input is not a string, it throws an error to enforce type safety within the codebase.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assertionsAndNonReturningFunctions.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
/** @type {(x: unknown) => asserts x is string } */
function assertIsString(x) {
    if (!(typeof x === "string")) throw new Error();
}
```

----------------------------------------

TITLE: Property Type Validation Examples
DESCRIPTION: Examples of variable assignments demonstrating type checking behavior with nested objects, showing both valid and invalid property assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/excessPropertyChecksWithNestedIntersections.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
let a: B = { a: { x: 'hello' } }; // ok
let b: B = { a: { x: 2 } }; // error
let c: B = { a: { x: 'hello', y: 2 } }; // error

let d: D = { a: { x: 'hello' }, c: 5 }; // ok
let e: D = { a: { x: 2 }, c: 5 }; // error
let f: D = { a: { x: 'hello', y: 2 }, c: 5 }; // error
```

----------------------------------------

TITLE: TypeScript Invalid Import
DESCRIPTION: Example of an invalid import statement causing a TS2307 error due to a non-existent file
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowImportingTsExtensions(moduleresolution=bundler).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import {} from "./thisfiledoesnotexist.ts";
```

----------------------------------------

TITLE: Valid Getter/Setter Pair Class Example
DESCRIPTION: Class E shows a valid implementation of getter and setter accessors for property 'x'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/twoAccessorsWithSameName.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class E {
    get x() {
        return 1;
    }
    set x(v) { }
}
```

----------------------------------------

TITLE: Iterating with Object Destructuring and Defaults in TypeScript
DESCRIPTION: This snippet shows a for loop utilizing object destructuring to extract properties from elements provided by 'getMultiRobot'. It includes default values for the 'name' property and nested 'primary' and 'secondary' properties within the 'skills' object, handling cases where these properties might be missing or undefined in the source object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_96

LANGUAGE: TypeScript
CODE:
```
for (
     {
         name = "noName",
         skills: {
             primary = "primary",
             secondary = "secondary"
         } = { primary: "none", secondary: "none" }
     } =
           getMultiRobot
)
```

----------------------------------------

TITLE: Set Creation and Successful Type Transformation in TypeScript
DESCRIPTION: Creates a SetOf<number> with sample values and transforms it using composed functions. This example shows a valid transformation chain where type inference works correctly through the composed function pipeline.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferFromGenericFunctionReturnTypes1.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
const testSet = new SetOf<number>();
testSet.add(1);
testSet.add(2);
testSet.add(3);

testSet.transform(
  compose(
    filter(x => x % 1 === 0),
    map(x => x + x),
    map(x => x + '!!!'),
    map(x => x.toUpperCase())
  )
)
```

----------------------------------------

TITLE: Defining Static Class Members with TypeScript
DESCRIPTION: This snippet defines two TypeScript classes, where class D extends class C. It shows how static members are initialized using values from both the current class and the base class. It highlights an error where accessing a base class's static member using 'super' is restricted to public and protected members.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeOfThisInStaticMembers4(target=es5).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    static a = 1;
    static b = this.a + 1;
}

class D extends C {
    static c = 2;
    static d = this.c + 1;
    static e = super.a + this.c + 1;
                     ~
!!! error TS2340: Only public and protected methods of the base class are accessible via the 'super' keyword.
}
```

----------------------------------------

TITLE: Destructuring Nested Object with Defaults (TypeScript)
DESCRIPTION: Extracts nested 'name' and 'skills' properties from an object, providing default values for the extracted variables ('nameA', 'primaryA', 'secondaryA') and default values for the nested 'skills' object itself if it's missing. Uses a type assertion `<MultiRobot>`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_76

LANGUAGE: TypeScript
CODE:
```
for (
     {
         name: nameA = "noName",
         skills: {
             primary: primaryA = "primary",
             secondary: secondaryA = "secondary"
         } = { primary: "none", secondary: "none" }
     } = <MultiRobot>
           { 
             name
                 : 
                   "trimmer"
                                , 
                                  skills
                                        : 
                                          { 
                                            primary
                                                   : 
                                                     "trimming"
                                                               , 
                                                                 secondary
                                                                          : 
                                                                            "edging"
                                                                                     }
                                                                                       }
)
```

----------------------------------------

TITLE: Package Definition with Conditional Exports
DESCRIPTION: Package.json file for 'pkg' that defines conditional exports based on import or require context. This configuration controls which type definitions are available in different module contexts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesTripleSlashReferenceModeOverride2(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "exports": {
        "import": "./import.js",
        "require": "./require.js"
    }
}
```

----------------------------------------

TITLE: Defining TypeScript Interface with Properties and Methods
DESCRIPTION: Defines an interface 'i1' with various properties and methods, some with JSDoc comments and some without. The interface includes regular properties, method signatures, and lambda function types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserAstSpans1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/** i1 is interface with properties*/
interface i1 {
    /** i1_p1*/
    i1_p1: number;
    /** i1_f1*/
    i1_f1(): void;
    /** i1_l1*/
    i1_l1: () => void;
    i1_nc_p1: number;
    i1_nc_f1(): void;
    i1_nc_l1: () => void;
    p1: number;
    f1(): void;
    l1: () => void;
    nc_p1: number;
    nc_f1(): void;
    nc_l1: () => void;
}
```

----------------------------------------

TITLE: Interface Definition with Generic Type
DESCRIPTION: This code defines a generic interface `IFoo<T>` with a method `foo` that also uses a generic type `T`. The `foo` method takes a parameter of type `T` and returns a value of type `T`. The intention is to create a base interface for specialized implementations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericSpecializations2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class IFoo<T> {
    foo<T>(x: T): T { // no error on implementors because IFoo's T is different from foo's T
        return null;
    }
}
```

----------------------------------------

TITLE: TypeScript Async Function Return Validation Examples
DESCRIPTION: Series of async function tests demonstrating TypeScript's type checking behavior for different return scenarios, including Promise<number>, Promise<any>, and Promise<void> return types. Shows both valid and invalid cases that trigger compiler errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitReturnsInAsync2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// Should be an error, Promise<number>, currently retorted correctly 
async function test3(isError: boolean = true) {
    if (isError === true) {
        return 6;
    }
}

// Should not be an error, Promise<any>, currently **not** working
async function test4(isError: boolean = true) {  
    if (isError === true) {
        return undefined;
    }
}

// should not be error, Promise<any> currently working correctly 
async function test5(isError: boolean = true): Promise<any> { //should not be error
    if (isError === true) {
        return undefined;
    }
}

// should be error, currently reported correctly 
async function test6(isError: boolean = true): Promise<number> { 
    if (isError === true) {
        return undefined;
    }
}

// infered to be Promise<void>, should not be an error, currently reported correctly 
async function test7(isError: boolean = true) { 
    if (isError === true) {
        return;
    }
}
```

----------------------------------------

TITLE: Basic Property Initialization Rules
DESCRIPTION: Demonstrates basic property initialization requirements in TypeScript classes. Shows errors for uninitialized non-optional properties and valid cases for optional/nullable properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictPropertyInitialization.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C1 {
    a: number;  // Error
    b: number | undefined;
    c: number | null;  // Error
    d?: number;
    #f: number; //Error
    #g: number | undefined;
    #h: number | null; //Error
    #i?: number;
}
```

----------------------------------------

TITLE: For Loop with Robot Object Destructuring
DESCRIPTION: Implements a for loop using destructured robot object properties including name and nested skills (primary and secondary). The code iterates once while logging the primary skill value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
for (var _g = getMultiRobot(), nameA = _g.name, _h = _g.skills, primaryA = _h.primary, secondaryA = _h.secondary, i = 0; i < 1; i++) {
    console.log(primaryA);
}
```

LANGUAGE: typescript
CODE:
```
for (var _j = { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }, nameA = _j.name, _k = _j.skills, primaryA = _k.primary, secondaryA = _k.secondary, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Defining TypeScript Interface Foo
DESCRIPTION: Defines a simple TypeScript interface named `Foo` with two numeric properties, `a` and `b`. This interface is used in other files for type checking.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocTypeTagOnExportAssignment2.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface Foo {
    a: number;
    b: number;
}
```

----------------------------------------

TITLE: Declaring Type Predicate Functions in TypeScript
DESCRIPTION: This snippet defines several type predicate functions that narrow the type of a variable to specific TypeScript types. Each function uses a conditional return type to verify whether the variable is of a specific type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowFromAnyWithTypePredicate.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare function isFunction(x): x is Function;
declare function isObject(x): x is Object;
declare function isAnything(x): x is {};
declare function isError(x): x is Error;
declare function isDate(x): x is Date;
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options
DESCRIPTION: TypeScript configuration file specifying compiler options including ES5 target, SystemJS module system, and decorator support. Also includes files to be compiled.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/emitDecoratorMetadataSystemJSISolatedModulesNoResolve/amd/emitDecoratorMetadataSystemJSISolatedModulesNoResolve.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "compileOnSave": true,
  "compilerOptions": {
    "target": "es5",
    "module": "system",
    "moduleResolution": "node",
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "isolatedModules": true,
    "noResolve": true
  },
  "files": [
    "main.ts"
  ]
}
```

----------------------------------------

TITLE: Defining JSX Namespace and Component Interfaces in TypeScript
DESCRIPTION: This snippet declares the JSX namespace and defines interfaces for JSX elements and components. It sets up the structure for type-checking JSX in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxElementResolution10.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare module JSX {
	interface Element { }
	interface ElementClass {
		render: any;
	}
	interface IntrinsicElements { }
}
```

----------------------------------------

TITLE: Interface Extension with Methods Containing Call Signatures in TypeScript
DESCRIPTION: Shows interface extension with properties that have call signatures. Demonstrates compatibility rules between base and derived interfaces, including error cases where return types in derived interfaces are incompatible with the base interface.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithCallSignaturesWithSpecializedSignatures.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
module MemberWithCallSignature {
    interface Base { // T
        // M's
        a: {
            (x: 'a'): void;
            (x: string): void;
        }
        a2: {
            (x: 'a', y: number): void;
            (x: string, y: number): void;
        }
        a3: <T>(x: T) => void;
    }

    // S's
    interface I extends Base {
        // N's
        a: (x: string) => number; // ok because base returns void
        a2: (x: string, y: number) => boolean; // ok because base returns void
        a3: <T>(x: T) => string; // ok because base returns void
    }

    interface Base2 { // T
        // M's
        a: {
            (x: 'a'): number;
            (x: string): number;
        }
        a2: <T>(x: T) => T;
    }

    // S's
    interface I2 extends Base2 {
        // N's
        a: (x: string) => string; // error because base returns non-void;
    }

    // S's
    interface I3 extends Base2 {
        // N's
        a2: <T>(x: T) => string; // error because base returns non-void;
    }
}
```

----------------------------------------

TITLE: Destructuring Union Types in TypeScript
DESCRIPTION: This TypeScript snippet attempts to destructure an object from a union type consisting of interfaces A and B. Due to the nature of union types, property 'a' cannot be guaranteed to exist on the object, causing a TypeScript error. There are no additional dependencies. The snippet highlights the importance of guarding against non-existent properties when working with union types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringFromUnionSpread.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface A { a: string }
interface B { b: number }

declare const x: A | B;
const { a } = { ...x } // error
        ~
```

----------------------------------------

TITLE: Defining Functions with Destructuring Parameters in TypeScript
DESCRIPTION: Functions are demonstrated with destructuring parameter declarations, illustrating the implications on parameter types. Examples include destructuring arrays and objects, as well as specifying optional parameters and dealing with initializer expressions. Errors such as mismatched element sizes and duplicate identifiers are highlighted.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration1ES6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    // Conformance for emitting ES6
    
    // A parameter declaration may specify either an identifier or a binding pattern.
    // The identifiers specified in parameter declarations and binding patterns
    // in a parameter list must be unique within that parameter list.
    
    // If the declaration includes a type annotation, the parameter is of that type
    function a1([a, b, [[c]]]: [number, number, string[][]]) { }
    function a2(o: { x: number, a: number }) { }
    function a3({j, k, l: {m, n}, q: [a, b, c]}: { j: number, k: string, l: { m: boolean, n: number }, q: (number|string)[] }) { };
    function a4({x, a}: { x: number, a: number }) { }
    
    a1([1, 2, [["world"]]]);
    a1([1, 2, [["world"]], 3]);
       ~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type '[number, number, string[][], number]' is not assignable to parameter of type '[number, number, string[][]]'.
!!! error TS2345:   Source has 4 element(s) but target allows only 3.
```

LANGUAGE: typescript
CODE:
```
    // If the declaration includes an initializer expression (which is permitted only
    // when the parameter list occurs in conjunction with a function body),
    // the parameter type is the widened form (section 3.11) of the type of the initializer expression.
    
    function b1(z = [undefined, null]) { };
    function b2(z = null, o = { x: 0, y: undefined }) { }
    function b3({z: {x, y: {j}}} = { z: { x: "hi", y: { j: 1 } } }) { }
    
    interface F1 {
        b5(z, y, [, a, b], {p, m: { q, r}});
    }
    
    function b6([a, z, y] = [undefined, null, undefined]) { }
    function b7([[a], b, [[c, d]]] = [[undefined], undefined, [[undefined, undefined]]]) { }
    
    b1([1, 2, 3]);  // z is widen to the type any[]
    b2("string", { x: 200, y: "string" });
    b2("string", { x: 200, y: true });
    

```

LANGUAGE: typescript
CODE:
```
    // If the declaration specifies a binding pattern, the parameter type is the implied type of that binding pattern (section 5.1.3)
    enum Foo { a }
    function c0({z: {x, y: {j}}}) { }
    function c1({z} = { z: 10 }) { }
    function c2({z = 10}) { }
    function c3({b}: { b: number|string} = { b: "hello" }) { }
    function c5([a, b, [[c]]]) { }
    function c6([a, b, [[c=1]]]) { }
    
    c0({z : { x: 1, y: { j: "world" } }});      // Implied type is { z: {x: any, y: {j: any}} }
    c0({z : { x: "string", y: { j: true } }});  // Implied type is { z: {x: any, y: {j: any}} }
    
    c1();             // Implied type is {z:number}?
    c1({ z: 1 })      // Implied type is {z:number}? 
    
    c2({});         // Implied type is {z?: number}
    c2({z:1});      // Implied type is {z?: number}
    
    c3({ b: 1 });     // Implied type is { b: number|string }.
    
    c5([1, 2, [["string"]]]);               // Implied type is is [any, any, [[any]]]
    c5([1, 2, [["string"]], false, true]);  // Implied type is is [any, any, [[any]]]
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type '[number, number, [[string]], boolean, boolean]' is not assignable to parameter of type '[any, any, [[any]]]'.
!!! error TS2345:   Source has 5 element(s) but target allows only 3.
```

LANGUAGE: typescript
CODE:
```
    // A parameter can be marked optional by following its name or binding pattern with a question mark (?)
    // or by including an initializer.
    
    interface F2 {
        d3([a, b, c]?);
        d4({x, y, z}?);
        e0([a, b, c]);
    }
    
    class C2 implements F2 {
        constructor() { }
        d3() { }
        d4() { }
        e0([a, b, c]) { }
    }
    
    class C3 implements F2 {
        d3([a, b, c]) { }
        d4({x, y, z}) { }
        e0([a, b, c]) { }
    }
    
    function d5({x, y} = { x: 1, y: 2 }) { }
    d5();  // Parameter is optional as its declaration included an initializer
    
    // Destructuring parameter declarations do not permit type annotations on the individual binding patterns,
    // as such annotations would conflict with the already established meaning of colons in object literals.
    // Type annotations must instead be written on the top- level parameter declaration
    
    function e1({x: number}) { }  // x has type any NOT number
    function e2({x}: { x: number }) { }  // x is type number
    function e3({x}: { x?: number }) { }  // x is an optional with type number
    function e4({x: [number,string,any] }) { }  // x has type [any, any, any]
    function e5({x: [a, b, c]}: { x: [number, number, number] }) { }  // x has type [any, any, any]
    
    function e6({x: [number, number, number]}) { }  // error, duplicate identifier;
                     ~~~~~~
!!! error TS2300: Duplicate identifier 'number'.
                             ~~~~~~
!!! error TS2300: Duplicate identifier 'number'.
                                     ~~~~~~
!!! error TS2300: Duplicate identifier 'number'.
    
```

----------------------------------------

TITLE: Destructuring Assignment with For Loop - TypeScript
DESCRIPTION: This snippet uses a for loop that incorporates destructuring assignment to initialize variables from 'robotA'. It shows how to set default values during destructuring in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_26

LANGUAGE: typescript
CODE:
```
for (let [numberA2 = -1, nameA2 = "name", skillA2 = "skill"] = robotA) {
```

----------------------------------------

TITLE: TypeScript Interface and Type Satisfaction Examples
DESCRIPTION: Demonstrates various use cases of the 'satisfies' operator with interfaces, types, and object literals. Shows error cases for excess properties, missing required properties, and type mismatches.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeSatisfaction.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I1 {
    a: number;
}

type T1 = {
    a: "a" | "b";
}

type T2 = (x: string) => void;

const t1 = { a: 1 } satisfies I1; // Ok
const t2 = { a: 1, b: 1 } satisfies I1; // Error
const t3 = { } satisfies I1; // Error

const t4: T1 = { a: "a" } satisfies T1; // Ok
const t5 = (m => m.substring(0)) satisfies T2; // Ok

const t6 = [1, 2] satisfies [number, number];

interface A {
    a: string
}
let t7 = { a: 'test' } satisfies A;
let t8 = { a: 'test', b: 'test' } satisfies A;
```

----------------------------------------

TITLE: Class with Private Fields Causing tslib Compatibility Errors
DESCRIPTION: A TypeScript class implementation using private fields (#a, #b, #c) that requires newer versions of the tslib helper functions. The code demonstrates private field access and modification that's incompatible with the current tslib version.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameEmitHelpers.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export class C {
    #a = 1;
    #b() { this.#c = 42; }
    set #c(v: number) { this.#a += v; }
}
```

----------------------------------------

TITLE: Property Access Error in TypeScript Class
DESCRIPTION: This snippet illustrates a TypeScript error caused by attempting to access a property that does not exist on a class.  The code tries to access `this.store` when the property `store` is not defined on the class `Foo`. The compiler suggests the intended property might be `_store` which is a property that actually exists.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertyOrdering.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
          public bar() { return this.store; } // should be an error
                                     ~~~~~
!!! error TS2551: Property 'store' does not exist on type 'Foo'. Did you mean '_store'?
!!! related TS2728 propertyOrdering.ts:6:14: '_store' is declared here.
    
    }
```

----------------------------------------

TITLE: Conditional Types with Select and Include in TypeScript
DESCRIPTION: A complex example using conditional types to enforce mutually exclusive 'select' and 'include' properties in function parameters, with type checking for different combinations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitedType.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
// repro from #46543

type SelectAndInclude = {
  select: any;
  include: any;
};
type HasSelect = {
  select: any;
};
type HasInclude = {
  include: any;
};

type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? "Please either choose `select` or `include`"
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S;

declare function findMany<T extends { select?: string; include?: string }>(
  args: T
): CheckSelect<T, Promise<1>, Promise<2>>;

async function findManyWrapper<
  T extends { select?: string; include?: string }
>(args: T) {
  const result = await findMany(args);
  return result;
}

async function mainFindMany() {
  const shouldBeErrorText = await findManyWrapper({
    select: "foo",
    include: "bar",
  });
  const itsOne = await findManyWrapper({});
  const itsTwo1 = await findManyWrapper({ select: "foo" });
  const itsTwo2 = await findManyWrapper({ include: "bar" });
}
```

----------------------------------------

TITLE: CFA with Undefined-Initialized Let Variable
DESCRIPTION: Shows control flow analysis for a 'let' variable initialized with undefined, demonstrating type union inference from subsequent assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowNoImplicitAny.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function f2() {
    let x = undefined;
    if (cond) {
        x = 1;
    }
    if (cond) {
        x = "hello";
    }
    const y = x;  // string | number | undefined
}
```

----------------------------------------

TITLE: Exporting Classes and Variables in TypeScript Modules
DESCRIPTION: This snippet showcases the export of a variable and a class from a TypeScript module. It demonstrates how to use 'export' keywords to make components available for import in other modules, along with class instantiation and function definition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcemapMixedSubfolderSpecifyOutputFileAndOutputDirectory/node/sourcemapMixedSubfolderSpecifyOutputFileAndOutputDirectory.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export var m2_a1 = 10;
export class m2_c1 {
    public m2_c1_p1: number;
}
export var m2_instance1 = new m2_c1();
export function m2_f1() {
    return m2_instance1;
}
```

----------------------------------------

TITLE: Defining Generic Class and Interface
DESCRIPTION: Demonstrates a generic class C<T> and interface I<T> with methods returning generic type T
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericsWithoutTypeParameters1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C<T> {
    foo(): T { return null }
}

interface I<T> {
    bar(): T;
}
```

----------------------------------------

TITLE: Importing and Using Properly Exported Types and Values in TypeScript
DESCRIPTION: This snippet shows the correct usage of imported entities when both types and values are exported. All usages are valid as both type information and value implementations are available.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace5.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { A, B, X } from "./d";
let _: A = new A();   // Ok
let __: B = new B();  // Ok
let ___: X = new X(); // Ok
```

----------------------------------------

TITLE: Separate Array Initialization with Nullish Coalescing
DESCRIPTION: Function showing a two-step approach using nullish coalescing assignment (??=) to initialize an array before pushing a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment4(target=es2020).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function foo4(results: number[] | undefined) {
    results ??= [];
    results.push(100);
}
```

----------------------------------------

TITLE: Define getRobot Function - JavaScript
DESCRIPTION: Defines a simple JavaScript function named `getRobot` that returns the value of the `robot` variable. This function likely provides access to a robot object or value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_2

LANGUAGE: JavaScript
CODE:
```
function getRobot() {
    return robot;
}
```

----------------------------------------

TITLE: Analyzing Control Flow in TypeScript Functions
DESCRIPTION: This snippet demonstrates various TypeScript functions with different control flow patterns, including infinite loops, conditional returns, and error handling. It showcases TypeScript's ability to detect potential issues like unreachable code and missing return statements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reachabilityChecks6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function f0(x) {
    while (true);
}

function f1(x) {
    if (x) {
        return 1
    }
}

function f2(x) {
    while (x) {
        throw new Error();
    }
    return 1;
}

function f3(x) {
    while (x) {
        throw new Error();
    }
}

function f3_1 (x) {
    while (x) {
    }
    throw new Error();
}

function f4(x) {
    try {
        if (x) {
            return 1;
        }
    }
    catch (e) {
    }
}

function f5(x) {
    try {
        if (x) {
            return 1;
        }
    }
    catch (e) {
        return 2;
    }
}

function f6(x) {
    try {
        if (x) {
            return 1;
        }
        else 
        {
            throw new Error();
        }
    }
    catch (e) {
    }
}

function f7(x) {
    try {
        if (x) {
            return 1;
        }
        else {
            throw new Error();
        }
    }
    catch (e) {
        return 1;
    }
}

function f8(x) {
    try {
        if (true) {
            x++;
        }
        else {
            return 1;
        }
    }
    catch (e) {
        return 1;
    }
}

function f9(x) {
    try {
        while (false) {
            return 1;
        }
    }
    catch (e) {
        return 1;
    }
}

function f10(x) {
    try {
        do {
            x++;
        } while (true);
    }
    catch (e) {
        return 1;
    }
}

function f11(x) {
    test:
    try {
        do {
            do {
                break test;
            } while (true);
            x++;
        } while (true);
    }
    catch (e) {
        return 1;
    }
}
```

----------------------------------------

TITLE: Destructuring Nested Objects in TypeScript
DESCRIPTION: This code snippet demonstrates how to destructure nested objects within a loop. It iterates through the 'multiRobots' array and extracts the 'primary' and 'secondary' skills from the nested 'skills' object into variables 'primaryA' and 'secondaryA'. This simplifies accessing deeply nested properties within complex data structures during iteration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
"for (var _e = 0, multiRobots_1 = multiRobots; _e < multiRobots_1.length; _e++) {\n    var _f = multiRobots_1[_e].skills, primaryA = _f.primary, secondaryA = _f.secondary;\n}"
```

----------------------------------------

TITLE: Nested Object Path Access with Template Literals in TypeScript
DESCRIPTION: A function that accepts dot-notation object paths using template literals. This enables type-safe property path access for nested objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes3.errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
type Schema = { a: { b: { c: number } } };

declare function chain<F extends keyof Schema>(field: F | `${F}.${F}`): void;

chain("a");
```

----------------------------------------

TITLE: TypeScript Configuration with Path Mapping
DESCRIPTION: Demonstrates tsconfig.json configuration with custom path mappings and module options causing a compiler error
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolutionCandidateFromPackageJsonField2(moduleresolution=bundler).errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "paths": {
            "foo/*": ["./dist/*"],
            "baz/*.ts": ["./types/*.d.ts"]
        }
    }
}
```

----------------------------------------

TITLE: TypeScript Function Declaration with Optional Parameter
DESCRIPTION: This code snippet demonstrates a TypeScript function declaration that accepts an object parameter with a required 'id' property and an optional 'name' property. Various function calls are shown, including valid usages and errors when parameter types or required properties are incorrect.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatFunctionsWithOptionalArgs.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo(x: { id: number; name?: string; }): void;
foo({ id: 1234 });                 // Ok
foo({ id: 1234, name: "hello" });  // Ok
foo({ id: 1234, name: false });    // Error, name of wrong type
foo({ name: "hello" });            // Error, id required but missing
```

----------------------------------------

TITLE: package.json - Defining Module Type as CommonJS
DESCRIPTION: This snippet shows a `package.json` file setting the module type to CommonJS using the `"type": "commonjs"` field.  This setting specifies that JavaScript files within this package should be interpreted as CommonJS modules, which don't support ES module features like `import.meta`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportMeta(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
    "type": "commonjs"
}
```

----------------------------------------

TITLE: Subfolder Package Configuration for CommonJS (JSON)
DESCRIPTION: This package.json snippet, located in a subfolder, sets the module type to 'commonjs', overriding the root configuration for this specific directory.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsGeneratedNameCollisions(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "type": "commonjs"
}
```

----------------------------------------

TITLE: Importing from Module with TypeScript
DESCRIPTION: This snippet shows an attempt to import a variable 'x' from another module './b'. It demonstrates a common error scenario in TypeScript where the specified module cannot be found, typically due to incorrect paths or module resolution settings.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/relativeNamesInClassicResolution.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import {x} from "./b"
```

----------------------------------------

TITLE: Illustrating Prop Type Mismatch Error in TSX
DESCRIPTION: This snippet demonstrates a type error caused by passing an object with incorrect prop types to a React component. The object `obj` has `y: number` while `PoisonedProp` expects `y: 2`, resulting in a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadAttributesResolution5.errors.txt#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
let obj = {
        x: "hello world",
        y: 2
    };
    
    // Error as "obj" has type { x: string; y: number }
    let p = <Poisoned {...obj} />;
```

----------------------------------------

TITLE: Importing JSON in TypeScript
DESCRIPTION: Demonstrates how to import a JSON file into a TypeScript module using the standard import syntax. This functionality relies on the 'resolveJsonModule' compiler option being enabled in the TypeScript configuration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/requireOfJsonFileWithModuleNodeResolutionEmitUmd.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import * as b from './b.json';
```

----------------------------------------

TITLE: ESM Import Statements
DESCRIPTION: Collection of ES module import statements demonstrating various import paths and extensions. Shows both valid and invalid import patterns when using node16/nodenext module resolution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node18).errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import * as m1 from "./index.js";
import * as m2 from "./index.mjs";
import * as m3 from "./index.cjs";
import * as m4 from "./subfolder/index.js";
import * as m5 from "./subfolder/index.mjs";
import * as m6 from "./subfolder/index.cjs";
import * as m7 from "./subfolder2/index.js";
import * as m8 from "./subfolder2/index.mjs";
import * as m9 from "./subfolder2/index.cjs";
import * as m10 from "./subfolder2/another/index.js";
import * as m11 from "./subfolder2/another/index.mjs";
import * as m12 from "./subfolder2/another/index.cjs";
```

----------------------------------------

TITLE: Demonstrating TypeScript Function Call Errors
DESCRIPTION: Defines a TypeScript function 'foo' with required, optional, and rest parameters, and then shows several calls that trigger type errors (TS2345) due to incorrect argument types or count errors (TS2555) due to missing required arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionCall16.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
function foo(a:string, b?:string, ...c:number[]){}
foo('foo', 1);
foo('foo');
foo('foo', 'bar');
foo();
foo(1, 'bar');
foo('foo', 'bar', 3);
```

----------------------------------------

TITLE: CSS Class Name Type Definitions in TypeScript
DESCRIPTION: Defines utility types for handling CSS class names including ClassName, ClassNameMap, ClassNameObjectMap, and ClassNameArg for type-safe class name manipulation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveTypeRelations.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
type ClassName<S> = keyof S;
type ClassNameMap<S> = { [K in keyof S]?: boolean }
type ClassNameObjectMap<S> = object & ClassNameMap<S>;
type ClassNameArg<S> = ClassName<S> | ClassNameObjectMap<S>;
```

----------------------------------------

TITLE: Defining Union Type in TypeScript
DESCRIPTION: This snippet defines a union type 'Data' that can be either a string or a boolean. It then declares a variable 'obj' of type 'Data' and assigns it a boolean value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitInferredTypeAlias1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
{
    type Data = string | boolean;
    let obj: Data = true;
}
export { }
```

----------------------------------------

TITLE: Testing Promise chaining and compatibility in TypeScript
DESCRIPTION: Demonstrates chaining of promise methods with different callback functions, showing type compatibility issues between Promise<T> and IPromise<T> interfaces when passing callbacks with mismatched parameter types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations2.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var r1: IPromise<number>;
var r1a = r1.then(testFunction, testFunction, testFunction);
var r1b = r1.then(testFunction, testFunction, testFunction).then(testFunction, testFunction, testFunction);
var r1c = r1.then(testFunctionP, testFunctionP, testFunctionP);
var s1: Promise<number>;
var s1a = s1.then(testFunction, testFunction, testFunction);
var s1b = s1.then(testFunctionP, testFunctionP, testFunctionP);
var s1c = s1.then(testFunctionP, testFunction, testFunction);
var s1d = s1.then(testFunctionP, testFunction, testFunction).then(testFunction, testFunction, testFunction);

var r2: IPromise<{ x: number; }>;
var r2a = r2.then(testFunction2, testFunction2, testFunction2);
var r2b = r2.then(testFunction2, testFunction2, testFunction2).then(testFunction2, testFunction2, testFunction2);
var s2: Promise<{ x: number; }>;
var s2a = s2.then(testFunction2, testFunction2, testFunction2);
var s2b = s2.then(testFunction2P, testFunction2P, testFunction2P);
var s2c = s2.then(testFunction2P, testFunction2, testFunction2);
var s2d = s2.then(testFunction2P, testFunction2, testFunction2).then(testFunction2, testFunction2, testFunction2);

var r3: IPromise<number>;
var r3a = r3.then(testFunction3, testFunction3, testFunction3);
var r3b = r3.then(testFunction3, testFunction3, testFunction3).then(testFunction3, testFunction3, testFunction3);
var s3: Promise<number>;
var s3a = s3.then(testFunction3, testFunction3, testFunction3);
var s3b = s3.then(testFunction3P, testFunction3P, testFunction3P);
var s3c = s3.then(testFunction3P, testFunction3, testFunction3);
var s3d = s3.then(testFunction3P, testFunction3, testFunction3).then(testFunction3, testFunction3, testFunction3); // Should error

var r4: IPromise<string>;
var sIPromise: (x: any) => IPromise<string>;
var sPromise: (x: any) => Promise<string>;
var r4a = r4.then(testFunction4, testFunction4, testFunction4); // error
var r4b = r4.then(sIPromise, testFunction4, testFunction4).then(sIPromise, testFunction4, testFunction4); // ok
var s4: Promise<string>;
var s4a = s4.then(testFunction4, testFunction4, testFunction4); // error
var s4b = s4.then(testFunction4P, testFunction4P, testFunction4P); // error 
var s4c = s4.then(testFunction4P, testFunction4, testFunction4); // error
var s4d = s4.then(sIPromise, testFunction4P, testFunction4).then(sIPromise, testFunction4P, testFunction4);

var r5: IPromise<string>;
var r5a = r5.then(testFunction5, testFunction5, testFunction5); // error
```

----------------------------------------

TITLE: Defining Uppercase Type Transformations in TypeScript
DESCRIPTION: This snippet defines multiple types that utilize the 'Uppercase' transformation in TypeScript. It demonstrates various cases, including valid transformations from literal strings to errors when attempting to use non-string types. The transformations help enforce strong typing in TypeScript applications.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intrinsicTypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
    type TU1 = Uppercase('hello');  // "HELLO"
    type TU2 = Uppercase('foo' | 'bar');  // "FOO" | "BAR"
    type TU3 = Uppercase<string>;  // Uppercase<string>
    type TU4 = Uppercase<any>;  // Uppercase<\`${any}\`>
    type TU5 = Uppercase<never>;  // never
    type TU6 = Uppercase<42>;  // Error
                         ~~
!!! error TS2344: Type 'number' does not satisfy the constraint 'string'.
```

----------------------------------------

TITLE: TypeScript Import Statement Errors in ESM Context
DESCRIPTION: TypeScript errors related to missing file extensions in import paths when using Node.js ESM resolution mode (node16/nodenext).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import './'                // TS2307: Cannot find module
import './index'           // TS2835: Need explicit file extension
import './subfolder/index'  // TS2834: Need explicit file extension
```

----------------------------------------

TITLE: Working with Discriminated Union Type Errors in TypeScript
DESCRIPTION: Demonstrates type errors that may arise when incorrectly handling a discriminated union type in TypeScript. The function `f13` attempts to assign a property not specified in the initial type, resulting in a TS2353 error. Validation of union types should only include recognized properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/discriminatedUnionTypes2.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function f13(x: { a: null; b: string } | { a: string, c: number }) {
    x = { a: null, b: "foo", c: 4};  // Error
                             ~
!!! error TS2353: Object literal may only specify known properties, and 'c' does not exist in type '{ a: null; b: string; }'.
}
```

----------------------------------------

TITLE: Importing Module with Incompatible Syntax in JavaScript
DESCRIPTION: This snippet shows an error when importing a module without proper TypeScript configuration. It requires enabling 'esModuleInterop' and 'allowSyntheticDefaultImports' flags for compatibility.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importNonExportedMember10.errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { Foo } from './a';
```

----------------------------------------

TITLE: Defining a Class and Function in TypeScript
DESCRIPTION: This snippet illustrates the definition of a simple class named 'c1' and a function 'f1' that returns an instance of that class. It serves as a basic example of TypeScript syntax and structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootAbsolutePathSingleFileSpecifyOutputFile/node/sourceRootAbsolutePathSingleFileSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: Defining Overload Signatures for a Function in TypeScript
DESCRIPTION: This snippet demonstrates how to define overload signatures for the 'attr' function, showcasing assignment compatibility with implementation. It checks for string or object input and returns appropriate types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadAssignmentCompat.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// ok - overload signatures are assignment compatible with their implementation
class Accessor {}

function attr(name: string): string;
function attr(name: string, value: string): Accessor;
function attr(map: any): Accessor;
function attr(nameOrMap: any, value?: string): any {
    if (nameOrMap && typeof nameOrMap === "object") {
        // handle map case
        return new Accessor;
    }
    else {
        // handle string case
        return "s";
    }
}
```

----------------------------------------

TITLE: Demonstrating TypeScript Method Overloading Error in Class
DESCRIPTION: This code snippet shows a TypeScript class with method overloading that results in a compiler error. The error occurs because the implementation name 'bar' does not match the overloaded method name 'foo'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classWithOverloadImplementationOfWrongName.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
    foo(): string;
    foo(x): number;
    bar(x): any { }
}
```

----------------------------------------

TITLE: Declaring Callable Function with Rest Parameters - TypeScript
DESCRIPTION: This snippet defines a generic function 'call' which takes a function 'fn' along with its required parameters. The purpose is to demonstrate TypeScript's ability to ensure that the correct number of arguments is provided when calling the function. In this particular case, an error is generated as the second required parameter is missing when invoking 'call'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/spreadOfParamsFromGeneratorMakesRequiredParams.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function call<Fn extends (...args: any[]) => any>(
    fn: Fn,
    ...args: Parameters<Fn>
): any;

call(function* (a: 'a') { }); // error, 2nd argument required
~~~~
```

----------------------------------------

TITLE: Interface Derived Assignments in TypeScript
DESCRIPTION: In this snippet, interface 'i5' showcases derived interfaces with specific required properties. The code elucidates on how assignments fail when these properties are absent in assigned objects. Pay attention to omitted property errors when using types like 'Base' and 'Object'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intTypeCheck.errors.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
var obj44: i5;
var obj45: i5 = {};
var obj46: i5 = new Object();
var obj47: i5 = new obj44;
var obj48: i5 = new Base;
var obj49: i5 = null;
var obj50: i5 = function () { };
//var obj51: i5 = function foo() { };
var obj52: i5 = <i5> anyVar;
var obj53: i5 = new <i5> anyVar;
var obj54: i5 = new {};
```

----------------------------------------

TITLE: Looping and Array Destructuring in JavaScript
DESCRIPTION: This snippet shows a `for` loop that iterates once, destructuring an array and assigning values to variables. It illustrates how TypeScript's array destructuring feature is translated into standard JavaScript variable assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_26

LANGUAGE: javascript
CODE:
```
">>>for (var _o = [\"trimmer\", [\"trimming\", \"edging\"]], nameMA = _o[0], _p = _o[1], primarySkillA = _p[0], secondarySkillA = _p[1], i = 0; i < 1; i++) {\n1->\n2 >^^^^^\n3 >     ^^^^\n4 >         ^^^^^\n5 >              ^\n6 >               ^^^^^^^^^\n7 >                        ^^\n8 >                          ^\n9 >                           ^^^^^^^^^^\n10>                                     ^^\n11>                                       ^^^^^^^^\n12>                                               ^\n13>                                                ^\n14>                                                 ^^\n15>                                                   ^^^^^^\n16>                                                         ^^^^^^^^\n17>                                                                 ^^\n18>                                                                   ^^^^^^^^^^\n19>                                                                             ^^\n20>                                                                               ^^^^^^^^^^^^^\n21>                                                                                            ^^^^^^^^\n22>                                                                                                    ^^\n23>                                                                                                      ^^^^^^^^^^^^^^^\n24>                                                                                                                     ^^^^^^^^\n25>                                                                                                                             ^^\n26>                                                                                                                               ^\n27>                                                                                                                                ^^^\n28>                                                                                                                                   ^\n29>                                                                                                                                    ^^\n30>                                                                                                                                      ^\n31>                                                                                                                                       ^^^\n32>                                                                                                                                          ^\n33>                                                                                                                                           ^^\n34>                                                                                                                                             ^\n35>                                                                                                                                              ^^\n36>                                                                                                                                                ^^\n37>                                                                                                                                                  ^\n1->\n  >\n2 >for (let \n3 >     \n4 >         [nameMA, [primarySkillA, secondarySkillA]] = \n5 >              [\n6 >               \"trimmer\"\n7 >                        , \n8 >                          [\n9 >                           \"trimming\"\n10>                                     , \n11>                                       \"edging\"\n12>                                               ]\n13>                                                ]\n14>                                                 \n15>                                                   nameMA\n16>                                                         \n17>                                                                 , \n18>                                                                   [primarySkillA, secondarySkillA]\n19>                                                                             \n20>                                                                               primarySkillA\n21>                                                                                            \n22>                                                                                                    , \n23>                                                                                                      secondarySkillA\n24>                                                                                                                     \n25>                                                                                                                             ]] = [\"trimmer\", [\"trimming\", \"edging\"]], \n26>                                                                                                                               i\n27>                                                                                                                                 =\n28>                                                                                                                                   0\n29>                                                                                                                                    ; \n30>                                                                                                                                      i\n31>                                                                                                                                        < \n32>                                                                                                                                          1\n33>                                                                                                                                           ; \n34>                                                                                                                                             i\n35>                                                                                                                                              ++\n36>                                                                                                                                                ) \n37>                                                                                                                                                  {"
```

----------------------------------------

TITLE: Defining Classes and Instances in TypeScript
DESCRIPTION: Defines a class 'm1_c1' with a public property 'm1_c1_p1' in TypeScript. A variable 'm1_a1' is initialized and an instance of 'm1_c1' is created and returned by the function 'm1_f1'. Requires TypeScript setup and assumes classes and functions will be called accordingly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlsourcerootUrlSubfolderSpecifyOutputFile/node/maprootUrlsourcerootUrlSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
    var m1_a1 = 10;
    class m1_c1 {
        public m1_c1_p1: number;
    }
    
    var m1_instance1 = new m1_c1();
    function m1_f1() {
        return m1_instance1;
    }
```

----------------------------------------

TITLE: TypeScript Error: Property 'toFixed' not found
DESCRIPTION: This code snippet shows the TypeScript compiler throwing an error when trying to call the `toFixed()` method on a property that can be either a number or a string.  The `toFixed()` method is only available on the `number` type, hence the error. The code relies on external module 'mod1' and its exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleExportWithExportPropertyAssignment3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
    /// <reference path='./requires.d.ts' />
    var mod1 = require('./mod1')
    mod1.justExport.toFixed()
    mod1.bothBefore.toFixed() // error, 'toFixed' not on 'string | number'
                    ~~~~~~~
!!! error TS2339: Property 'toFixed' does not exist on type 'number | "string"'.
!!! error TS2339:   Property 'toFixed' not exist on type '"string"'.
    mod1.bothAfter.toFixed() // error, 'toFixed' not on 'string | number'
                   ~~~~~~~
!!! error TS2339: Property 'toFixed' does not exist on type 'number | "string"'.
!!! error TS2339:   Property 'toFixed' not exist on type '"string"'.
    mod1.justProperty.length
```

----------------------------------------

TITLE: Demonstrating TypeScript Intersection Types and Generic Constraints
DESCRIPTION: This code defines interfaces A and B, and a function f with generic type parameters T, U, and V. It then attempts various assignments to demonstrate TypeScript's type checking for intersection types and generic constraints.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/errorMessagesIntersectionTypes03.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface A {
    a;
}

interface B {
    b;
}

function f<T, U extends A, V extends U>(): void {
    let t: T;
    let u: U;
    let v: V;

    let a_and_b: A & B;
    let t_and_b: T & B;

    t = a_and_b;
    u = a_and_b;
    v = a_and_b;

    t = t_and_b;
    u = t_and_b;
    v = t_and_b;
}
```

----------------------------------------

TITLE: Calling createModelReference from registerDefaultLanguageCommand Function
DESCRIPTION: Implementation of registerDefaultLanguageCommand function in file c.ts that calls the createModelReference function. This function also has no incoming calls itself.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callHierarchyCrossFile.callHierarchy.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function registerDefaultLanguageCommand() {
  createModelReference();
}
```

----------------------------------------

TITLE: New Expression Without Construct Signature in TypeScript
DESCRIPTION: This snippet demonstrates a new expression that triggers an error when noImplicitAny is enabled. The Test function lacks a construct signature, causing the 'new' expression to implicitly have an 'any' type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/newExpressionWithCast.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function Test() { }
// valid but error with noImplicitAny
var test = new Test();
```

----------------------------------------

TITLE: Defining Object Literals with Type Constraints in TypeScript
DESCRIPTION: This snippet defines a constant object 'p' that attempts to use a type constraint with a partial record. It includes an incorrect property 'x' which leads to a compilation error. Necessary type constraints are provided via the 'Keys' typedef. The snippet showcases TypeScript's type checking capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocSatisfiesTag10.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/** @typedef {"a" | "b" | "c" | "d"} Keys */
    
    const p = /** @satisfies {Partial<Record<Keys, unknown>>} */ ({
        a: 0,
        b: "hello",
        x: 8 // Should error, 'x' isn't in 'Keys'
        ~
!!! error TS2353: Object literal may only specify known properties, and 'x' does not exist in type 'Partial<Record<Keys, unknown>>'.
    });
```

----------------------------------------

TITLE: Exporting a Component with TypeScript
DESCRIPTION: This snippet defines and exports a TypeScript class named 'AppComponent' that is intended for use with JSX. It shows the declaration of a module for JSX intrinsic elements, a class with a render method, and the export statement. The class relies on 'createElement' as a parameter in its 'render' method to output a simple 'div' element. It demonstrates foundational knowledge of TypeScript's interaction with JSX, having no external dependencies except a JavaScript runtime that supports class syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxFactoryIdentifierAsParameter.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppComponent = void 0;
class AppComponent {
    render(createElement) {
        return createElement("div", null);
    }
}
exports.AppComponent = AppComponent;
//# sourceMappingURL=test.js.map
```

----------------------------------------

TITLE: Optional Parameters with Unused Arguments in TypeScript
DESCRIPTION: This function shows the use of optional parameters. TypeScript raises an error for the unused 'arg' parameter, but not for '_arg' which is prefixed with an underscore.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedParametersWithUnderscore.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
function f6(arg?, _arg?) {
}
```

----------------------------------------

TITLE: Using arguments in Arrow Function Field Initializer and Nested Functions - TypeScript (TS2815)
DESCRIPTION: This snippet shows 'arguments' referenced within an arrow function field initializer and a nested arrow function (both invalid, TS2815), but also correctly referenced within a nested standard function declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/argumentsUsedInClassFieldInitializerOrStaticInitializationBlock.errors.txt#_snippet_6

LANGUAGE: TypeScript
CODE:
```
function D1() {
  return class T {
    a = () => {
      arguments;    // should error
      const b = () => {
        return arguments;     // should error
      }

      function f() {
        return arguments;      // ok
      }
    }
 }
}
```

----------------------------------------

TITLE: Invalid TypeScript Configuration - Missing Required Options
DESCRIPTION: A tsconfig.json configuration file that incorrectly specifies 'declarationDir' without the required 'declaration' or 'composite' options, resulting in TS5069 error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitToDeclarationDirWithoutCompositeAndDeclarationOptions.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "compilerOptions": { "declarationDir": "out" }
}
```

----------------------------------------

TITLE: Declaring Functions with Array Parameters in TypeScript
DESCRIPTION: Declares two functions that accept number arrays as parameters. These declarations showcase different ways of specifying array types in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/readonlyTupleAndArrayElaboration.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
declare function arryFn(x: number[]): void;
declare function arryFn2(x: Array<number>): void;
```

----------------------------------------

TITLE: Implementing FunctionExpression with Inferred Return Types in TypeScript
DESCRIPTION: Shows function expressions with no return type annotations but inferred return types based on the returned values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionImplementations.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
var n = function () {
    return 3;
} ();

var nu = null;
var nu = function () {
    return null;
} ();

var un = undefined;
var un = function () {
    return undefined;
} ();

var n = function <T>(x: T) {
    return x;
} (4);

var n = function <T extends {}>(x: T) {
    return x;
} (4);
```

----------------------------------------

TITLE: Using TodoList Component with Props - TypeScript
DESCRIPTION: This snippet demonstrates how to use the TodoList component by passing an object 'x' of type TodoListProps. It illustrates how the component is expected to receive its props.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadChildrenInvalidType(jsx=react-jsx,target=es2015).errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
let x: TodoListProps;
<TodoList {...x}/>
```

----------------------------------------

TITLE: Creating Adders with Optional Parameters - TypeScript
DESCRIPTION: The function 'makeAdder' illustrates how optional parameters can be utilized in creating functions that return another function, showcasing type handling and defaults with TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowingPastLastAssignment.errors.txt#2025-04-21_snippet_12

LANGUAGE: TypeScript
CODE:
```
function makeAdder(n?: number) {
    n ??= 0;
    return (m: number) => n + m;
}
```

----------------------------------------

TITLE: Using a Function Expression with Call
DESCRIPTION: This snippet invokes the c9t5 function with an anonymous function as an argument. The anonymous function takes a parameter n and returns an object conforming to the IFoo interface.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#2025-04-21_snippet_33

LANGUAGE: typescript
CODE:
```
c9t5(function (n) {
    return ({});
});

```

----------------------------------------

TITLE: Using Template Literal Types with Different Value Types
DESCRIPTION: Demonstrates creating template literals with different value types (string, number, union literals, generic type) and assigning them to template literal types. Shows how TypeScript infers and enforces template literal type constraints.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function ft1<T extends string>(s: string, n: number, u: 'foo' | 'bar' | 'baz', t: T) {
    const c1 = `abc${s}`;
    const c2 = `abc${n}`;
    const c3 = `abc${u}`;
    const c4 = `abc${t}`;
    const d1: `abc${string}` = `abc${s}`;
    const d2: `abc${number}` = `abc${n}`;
    const d3: `abc${'foo' | 'bar' | 'baz'}` = `abc${u}`;
    const d4: `abc${T}` = `abc${t}`;
}
```

----------------------------------------

TITLE: TypeScript Function Overload Error Example
DESCRIPTION: Demonstrates a TypeScript error case where function overload signatures are incompatible with the implementation. The implementation requires two parameters while the overload signatures only specify one parameter.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/anyIdenticalToItself.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo(x: any);
function foo(x: any);
function foo(x: any, y: number) { }
```

----------------------------------------

TITLE: Decorating Class with Missing tslib Helpers in TypeScript
DESCRIPTION: This code snippet demonstrates the use of a decorator on a class, which requires helper functions from tslib that are not present. The compiler suggests upgrading tslib to resolve the errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classExpression-missingEmitHelpers-classDecorator.12.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export {};
declare var dec: any;

// uses __esDecorate, __runInitializers, __setFunctionName
function f(C = @dec class {}) {}
```

----------------------------------------

TITLE: Re-Export Errors in TypeScript
DESCRIPTION: Demonstrates a typical error scenario with re-exporting types when isolatedModules is enabled, and shows where the error originates.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports_errors(isolatedmodules=true).errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
export { A as AA } from "./a";
export { B as BB } from "./b";
```

----------------------------------------

TITLE: Defining Generic Functions in TypeScript
DESCRIPTION: This snippet declares generic functions 'fx' with different type parameter configurations. It demonstrates function overloading with generic types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/instantiationExpressions.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare function fx<T>(x: T): T;
declare function fx<T>(x: T, n: number): T;
declare function fx<T, U>(t: [T, U]): [T, U];
```

----------------------------------------

TITLE: Accessing Undefined Property in TypeScript Object
DESCRIPTION: This code demonstrates a TypeScript error that occurs when attempting to access a property 'b' that doesn't exist on an object type that only has property 'a' defined. TypeScript's type system catches this error during compilation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertyAccess1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var foo: { a: number; };
foo.a = 4;
foo.b = 5;
```

----------------------------------------

TITLE: Defining Interfaces and Union Types in TypeScript
DESCRIPTION: This snippet defines several interfaces (Foo, Bar, Other, CatDog, ManBearPig, Platypus) and a union type (ExoticAnimal). It demonstrates the structure of different object types that will be used in function parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/errorsOnUnionsOfOverlappingObjects01.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Foo {
    a: string;
    b: number;
};

interface Bar {
    b: string;
}

interface Other {
    totallyUnrelatedProperty: number;
}

interface CatDog { cat: any, dog: any }
interface ManBearPig { man: any, bear: any, pig: any }
interface Platypus { platypus: any }

type ExoticAnimal =
    | CatDog
    | ManBearPig
    | Platypus;
```

----------------------------------------

TITLE: TypeScript Module Import and Export Patterns
DESCRIPTION: TypeScript file showing different ways to import and export modules. It includes empty imports, import with require, and different export syntaxes with comments about potential errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerSyntaxRestrictions(module=preserve).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import {} from "./a";
import _ = require("./a"); // Error in esnext
export = {}; // Error
export {};
```

----------------------------------------

TITLE: Defining and Instantiating Generic Class in TypeScript
DESCRIPTION: This snippet defines a generic class 'C' and demonstrates instantiating it with type arguments, as well as using its static generic method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/instantiationExpressions.errors.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
declare class C<T> {
    constructor(x: T);
    static f<U>(x: U): U[];
}

function f3() {
    let c1 = C<string>;  // { new (x: string): C<string>; f<U>(x: U): T[]; prototype: C<any>; }
    let f1 = C.f<string>;  // (x: string) => string[]
}
```

----------------------------------------

TITLE: Package Configuration with Conditional Exports in Node.js
DESCRIPTION: A package.json configuration that uses conditional exports to provide different module implementations based on environment. It specifies different entry points for Node.js versus web environments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerConditionsExcludesNode(module=preserve).errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "name": "conditions",
    "version": "1.0.0",
    "type": "module",
    "main": "index.cjs",
    "types": "index.d.cts",
    "exports": {
      ".": {
        "node": "./index.node.js",
        "default": "./index.web.js"
      }
    }
  }
```

----------------------------------------

TITLE: Control Flow Analysis with Destructured Properties in TypeScript
DESCRIPTION: Demonstrates TypeScript's control flow analysis with destructured properties from discriminated unions. Shows how type narrowing works with aliased properties in both direct and indirect conditions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowAliasedDiscriminants.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const { data: data1, isSuccess: isSuccess1 } = useQuery();
const { data: data2, isSuccess: isSuccess2 } = useQuery();
const { data: data3, isSuccess: isSuccess3 } = useQuery();

if (isSuccess1 && isSuccess2 && isSuccess3) {
    data1.toExponential();  // should ok
    data2.toExponential();  // should ok
    data3.toExponential();  // should ok
}

const areSuccess = isSuccess1 && isSuccess2 && isSuccess3;
if (areSuccess) {
    data1.toExponential();  // should ok
    data2.toExponential();  // should ok
    data3.toExponential();  // should ok
}
```

----------------------------------------

TITLE: Handling ECMA Imports in TypeScript (ESM)
DESCRIPTION: This snippet demonstrates importing modules in an ECMAScript (ESM) environment using import statements in TypeScript. The imports are gathered from two locations and multiple modules from each file are utilized. No dependencies are required beyond TypeScript's standard library. Inputs are module paths, and outputs are the imported modules for use within the file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackageExports(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// esm format file
import * as cjs from "package/cjs";
import * as mjs from "package/mjs";
import * as type from "package";
cjs;
mjs;
type;
import * as cjsi from "inner/cjs";
import * as mjsi from "inner/mjs";
import * as typei from "inner";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: Optional Chaining with Type Narrowing for Nested Properties in TypeScript
DESCRIPTION: Function that extracts coordinates from a Feature object, using optional chaining and type narrowing. It safely accesses the nested geometry.coordinates property after checking the geometry.type value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowOptionalChain.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
type Feature = {
  id: string;
  geometry?: {
    type: string;
    coordinates: number[];
  };
};


function extractCoordinates(f: Feature): number[] {
    if (f.geometry?.type !== 'test') {
        return [];
    }
    return f.geometry.coordinates;
}
```

----------------------------------------

TITLE: Package Configuration for ES Modules
DESCRIPTION: This JSON snippet shows a package.json configuration that sets the module type to 'module', indicating that the project uses ES modules by default.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportAssignment(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Union Type Property Checking - TypeScript
DESCRIPTION: Function f5 checks properties in a union type of two different structures, validating which structure is present before accessing the corresponding properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=true).errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
function f5(x: { a: string } | { b: string }) {
    if ("a" in x) {
        x;  // { a: string }
    }
    else if ("b" in x) {
        x;  // { b: string }
    }
    else {
        x;  // never
    }
}
```

----------------------------------------

TITLE: TypeScript Type Assignment Error Examples
DESCRIPTION: A series of invalid type assignments showing TypeScript's type checking system in action. The code attempts to assign a number value to variables of different types including primitive types, class types, interface types, object literals, namespaces, and generic type parameters, resulting in compile-time errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/invalidNumberAssignments.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var x = 1;

var a: boolean = x;
var b: string = x;
var c: void = x;
var d: typeof undefined = x;

class C { foo: string; }
var e: C = x;

interface I { bar: string; }
var f: I = x;

var g: { baz: string } = 1;
var g2: { 0: number } = 1;

module M { export var x = 1; }
M = x;

function i<T>(a: T) {
    a = x;
}
i = x;
```

----------------------------------------

TITLE: Exporting Variables and Classes in TypeScript
DESCRIPTION: This snippet exports a variable and a class from the m1 module. The variable 'm1_a1' is set to 10, and 'm1_c1' is a class with a numeric property. An instance of the class is created and exported alongside a function which returns that instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlsourcerootUrlModuleMultifolderSpecifyOutputFile/node/maprootUrlsourcerootUrlModuleMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Unresolved Name Error: BasicBlock
DESCRIPTION: This error indicates that the symbol 'BasicBlock' is not defined in the current scope. This likely means that the 'BasicBlock' type or variable is either not imported, not declared, or misspelled in the code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserRealSource11.errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
"parserRealSource11.ts(1339,26): error TS2304: Cannot find name 'BasicBlock'."
```

----------------------------------------

TITLE: Demonstrating TypeScript Type Checking Errors with Incompatible Types
DESCRIPTION: This code snippet defines an empty interface I, an enum E, and a function containing variables of different types. It then attempts various operations between incompatible types that trigger TypeScript type errors including logical operations and comparisons.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/expr.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I {
}

enum E {
    Red, Green, Blue
}

function f() {
    var a: any;
    var n=3;
    var s="";
    var b=false;
    var i:I;
    var e:E;

    n&&a;
    n&&s;
    n&&b;
    n&&i;
    n&&n;
    n&&e;

    s&&a;
    s&&n;
    s&&b;
    s&&i;
    s&&s;
    s&&e;

    a&&n;
    a&&s;
    a&&b;
    a&&i;
    a&&a;
    a&&e;

    i&&n;
    i&&s;
    i&&b;
    i&&a;
    i&&i;
    i&&e;

    e&&n;
    e&&s;
    e&&b;
    e&&a;
    e&&i;
    e&&e;

    n||a;
    n||s;
    n||b;
    n||i;
    n||n;
    n||e;

    s||a;
    s||n;
    s||b;
    s||i;
    s||s;
    s||e;

    a||n;
    a||s;
    a||b;
    a||i;
    a||a;
```

----------------------------------------

TITLE: Illustrating 'override' Modifier Usage Errors in TypeScript
DESCRIPTION: This snippet demonstrates common errors and rules concerning the 'override' modifier in TypeScript classes. It requires knowledge of TypeScript class inheritance, and illustrates multiple errors such as misordering of modifiers and illegal use of 'override' in contexts where class extension is absent. The code showcases incorrect modifier combinations and serves as a learning tool for adherence to TypeScript modification rules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/override7.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class B {
    p1: number = 1;
    p2: number = 2;
    p3: number = 3;
    p4: number = 4;
}

class D extends B{
    declare p1: number

    override declare p2: number;
             ~~~~~~~
!!! error TS1040: 'override' modifier cannot be used in an ambient context.

    readonly override p3: number;
             ~~~~~~~~
!!! error TS1029: 'override' modifier must precede 'readonly' modifier.

    override readonly p4: number;

    static override sp: number;
                    ~~
!!! error TS4113: This member cannot have an 'override' modifier because it is not declared in the base class 'B'.

    override override oop: number;
             ~~~~~~~~
!!! error TS1030: 'override' modifier already seen.
                      ~~~
!!! error TS4113: This member cannot have an 'override' modifier because it is not declared in the base class 'B'.

    public override pp: number;
                    ~~
!!! error TS4113: This member cannot have an 'override' modifier because it is not declared in the base class 'B'.
    override public op: number;
             ~~~~~~
!!! error TS1029: 'public' modifier must precede 'override' modifier.
                    ~~
!!! error TS4113: This member cannot have an 'override' modifier because it is not declared in the base class 'B'.

    override constructor () {
    ~~~~~~~~
!!! error TS1089: 'override' modifier cannot appear on a constructor declaration.
        super();
    }
}


abstract class AB {
    abstract f (): void;
    abstract b (): void;
}

abstract class AD extends AB {
    override abstract f(): void;
             ~~~~~~~~
!!! error TS1029: 'abstract' modifier must precede 'override' modifier.
    abstract override b(): void;
}

abstract class AND {
    override abstract f(): void;
             ~~~~~~~~
!!! error TS1029: 'abstract' modifier must precede 'override' modifier.
                      ~
!!! error TS4112: This member cannot have an 'override' modifier because its containing class 'AND' does not extend another class.
    abstract override b(): void;
                      ~
!!! error TS4112: This member cannot have an 'override' modifier because its containing class 'AND' does not extend another class.
}

class ADD extends AD {
    override f(): void {

    }
    override b(): void {

    }
}

```

----------------------------------------

TITLE: Class and Enum Definitions in TypeScript
DESCRIPTION: Defines two classes with inheritance relationship and an enum type that will be used in property access examples. Class A has a numeric property, and B extends A with an additional property. The Compass enum defines cardinal directions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertyAccess.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
    a: number;
}
class B extends A {
    b: number;
}
enum Compass {
    North, South, East, West
}
```

----------------------------------------

TITLE: Assigning Default Values with Array Destructuring in TypeScript
DESCRIPTION: Demonstrates assigning default values to variables using array destructuring. This pattern is often used to provide fallback values when destructuring arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.sourcemap.txt#_snippet_65

LANGUAGE: TypeScript
CODE:
```
[ ] = ["none", "none"]
```

----------------------------------------

TITLE: Iterating and Destructuring Objects in TypeScript
DESCRIPTION: This code demonstrates how to iterate through an array of objects and destructure the 'name' property into a variable named 'nameA'. It utilizes a 'for...of' loop to iterate over the array, extracting and logging the 'name' property of each object. This is useful for accessing specific properties from objects within a collection.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
"for (let {name: nameA } of \n     [{ name: \"mower\", skill: \"mowing\" }, { name: \"trimmer\", skill: \"trimming\" }]\n) {\n    console.log(nameA);\n}"
```

----------------------------------------

TITLE: Defining TypeScript Compiler Options in tsconfig.json
DESCRIPTION: This snippet defines the compilerOptions section for TypeScript, setting parameters such as baseUrl and paths, essential for module resolution. Key parameters include 'baseUrl' to specify the root directory and 'paths' for configuring module paths. This setup is necessary for large projects with complex folder structures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/pathsValidation4.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "traceResolution": true,
        "baseUrl": "./src",
        "paths": {
          "@interface/**/*" : ["./src/interface/*"],
          "@service/**/*": ["./src/service/**/*"],
          "@controller/*": ["controller/*"]
        }
    }
}
```

----------------------------------------

TITLE: Defining TypeScript Class with Readonly Properties
DESCRIPTION: This snippet defines a class 'D' with two readonly properties: 'noWiden' initialized to 1, and 'widen' defaulting to 2 in the constructor. It demonstrates TypeScript's type checking for readonly properties and literal types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/literalTypesWidenInParameterPosition.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class D {
    readonly noWiden = 1
    constructor(readonly widen = 2) {
        this.noWiden = 5; // error
        this.widen = 6; // ok
    }
}
new D(7); // ok
```

----------------------------------------

TITLE: Defining Exportable Interface in TypeScript
DESCRIPTION: This snippet defines an interface named 'Sammy' with a constructor signature and a call signature. The interface is then exported as the default export of the module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAssignmentOfDeclaredExternalModule.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
interface Sammy {
    new (): any; // a constructor signature
    (): number; // a 0 arg call signature
}
export = Sammy;
```

----------------------------------------

TITLE: Object Parameter Destructuring with Default Object - TypeScript
DESCRIPTION: Defines a function `d5` that destructures properties from an object parameter and provides a default object as the default value for the parameter itself. This demonstrates how to make object parameters optional by providing a default object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration1ES5.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
"function d5({x, y} = { x: 1, y: 2 }) { }"
```

----------------------------------------

TITLE: Demonstrating 'super' and 'this' Usage Error in TypeScript Derived Class Constructor
DESCRIPTION: This code snippet shows two classes, Foo and Foo2, both extending a Base class. Each class incorrectly attempts to use 'this' as an argument to the 'super()' call in the constructor, resulting in a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisInSuperCall2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Base { 
    constructor(a: any) {}
}

class Foo extends Base {
    public x: number;
    constructor() {
        super(this); // error: "super" has to be called before "this" accessing
    }
}


class Foo2 extends Base {
    public x: number = 0;
    constructor() {
        super(this); // error
    }
}
```

----------------------------------------

TITLE: Shape Type Discriminated Union Switch
DESCRIPTION: Implementation of area calculation for different shapes using discriminated unions and switch statements on the kind property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exhaustiveSwitchStatements1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface Square { kind: "square"; size: number; }
interface Rectangle { kind: "rectangle"; width: number; height: number; }
interface Circle { kind: "circle"; radius: number; }
interface Triangle { kind: "triangle"; side: number; }

type Shape = Square | Rectangle | Circle | Triangle;

function area(s: Shape): number {
    let area;
    switch (s.kind) {
        case "square": area = s.size * s.size; break;
        case "rectangle": area = s.width * s.height; break;
        case "circle": area = Math.PI * s.radius * s.radius; break;
        case "triangle": area = Math.sqrt(3) / 4 * s.side * s.side; break;
    }
    return area;
}
```

----------------------------------------

TITLE: Defining TypeScript Class and Function
DESCRIPTION: Demonstrates a basic TypeScript class definition with a number property and a function returning a class instance
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlsourcerootUrlSingleFileSpecifyOutputFile/node/maprootUrlsourcerootUrlSingleFileSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: Defining Interface with Public and Optional Properties - TypeScript
DESCRIPTION: This snippet defines an interface named 'interfaceWithPublicAndOptional' with a required public property 'one' and an optional public property 'two'. It also creates an instance of this interface named 'obj4' initialized with the 'one' property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability42.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
module __test1__ {
    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
    export var __val__obj4 = obj4;
}
```

----------------------------------------

TITLE: Implementing Typed Property Path Access Function
DESCRIPTION: This snippet demonstrates a type-safe path accessor function with multiple overloads for accessing nested properties. The function provides proper type inference for up to three levels of property access.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
function path<T, K1 extends keyof T>(obj: T, key1: K1): T[K1];
function path<T, K1 extends keyof T, K2 extends keyof T[K1]>(obj: T, key1: K1, key2: K2): T[K1][K2];
function path<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(obj: T, key1: K1, key2: K2, key3: K3): T[K1][K2][K3];
function path(obj: any, ...keys: (string | number)[]): any;
function path(obj: any, ...keys: (string | number)[]): any {
    let result = obj;
    for (let k of keys) {
        result = result[k];
    }
    return result;
}

type Thing = {
    a: { x: number, y: string },
    b: boolean
};


function f1(thing: Thing) {
    let x1 = path(thing, 'a');  // { x: number, y: string }
    let x2 = path(thing, 'a', 'y');  // string
    let x3 = path(thing, 'b');  // boolean
    let x4 = path(thing, ...['a', 'x']);  // any
}
```

----------------------------------------

TITLE: TypeScript Configuration File
DESCRIPTION: Empty TypeScript configuration file that provides project settings.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/libTypeScriptSubfileResolvingConfig.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{ }
```

----------------------------------------

TITLE: Package.json Exports and TypesVersions Configuration
DESCRIPTION: This snippet showcases the 'exports' and 'typesVersions' configuration within a 'package.json' file. It defines how different modules are exposed and how type declarations are associated with them based on TypeScript versions. The example shows exports for modules like 'foo', 'yep', 'versioned-yep', and 'versioned-nah'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsBlocksTypesVersions(module=nodenext).errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "exports-and-types-versions",
  "version": "1.0.0",
  "exports": {
    "./foo": "./dist/foo.js",
    "./yep": {
      "types": "./types/foo.d.ts",
      "default": "./dist/foo.js"
    },
    "./versioned-yep": {
      "types@>=4": "./types/foo.d.ts"
    },
    "./versioned-nah": {
      "types@<4": "./types/foo.d.ts"
    }
  },
  "typesVersions": {
    "*": {
      "foo": ["./types/foo.d.ts"],
      "nope": ["./types/foo.d.ts"],
      "versioned-nah": ["./types/foo.d.ts"]
    }
  }
}
```

----------------------------------------

TITLE: Defining and Using Generic React Components in TypeScript
DESCRIPTION: This snippet defines a generic function 'test' that creates a stateless functional component (SFC) and a class component. It then demonstrates various ways of using these components, triggering TypeScript errors related to prop types and generic constraints.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxNotUsingApparentTypeOfSFC.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function test<P>(wrappedProps: P) {
    let MySFC = function(props: P) {
        return <>hello</>;
    };
    class MyComponent extends React.Component<P> {
        render() {
            return <>hello</>;
        }
    }
    let x = <MySFC />;
    let y = <MyComponent />;
    
    let z = <MySFC {...wrappedProps} />
    let q = <MyComponent {...wrappedProps} />
}
```

----------------------------------------

TITLE: Importing Modules in ESM Format TypeScript
DESCRIPTION: This snippet demonstrates importing modules using the ES module format in a TypeScript file. It includes imports of various modules and shows how to access module exports. There are no explicit errors depicted here. The imports are assumed to be available and do not require any backend logic like 'require'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesConditionalPackageExports(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    // esm format file
    import * as cjs from "package/cjs";
    import * as mjs from "package/mjs";
    import * as type from "package";
    cjs;
    mjs;
    type;
    import * as cjsi from "inner/a";
    import * as mjsi from "inner/b";
    import * as typei from "inner";
    import * as ts from "inner/types";
    cjsi.mjsSource;
    mjsi.mjsSource;
    typei.mjsSource;
    ts.mjsSource;
```

----------------------------------------

TITLE: Enabling Strict Null Checks in TypeScript Configuration
DESCRIPTION: This TypeScript configuration snippet enables strict null checks. It helps catch errors related to null and undefined values, improving type safety in the project.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/configFileExtendsAsList.errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "strictNullChecks": true
    }
}
```

----------------------------------------

TITLE: Handling Discriminated Unions with Conditional Logic in TypeScript
DESCRIPTION: This snippet demonstrates how to handle a discriminated union type using if-else statements. The function `f10` checks the `kind` property to determine which union branch to work with, supporting three possibilities with different properties. It's necessary to ensure that variables of type `x` have a 'kind' attribute of type `boolean` or `string`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/discriminatedUnionTypes2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f10(x : { kind: false, a: string } | { kind: true, b: string } | { kind: string, c: string }) {
    if (x.kind === false) {
        x.a;
    }
    else if (x.kind === true) {
        x.b;
    }
    else {
        x.c;
    }
}
```

----------------------------------------

TITLE: Object Parameter Destructuring with Type Inference - TypeScript
DESCRIPTION: Defines a function `c0` that uses destructuring to extract properties from an object parameter. The code demonstrates that type inference can determine the types of the destructured elements based on how the function is called, even without explicit type annotations on the binding pattern itself. The implied type is { z: {x: any, y: {j: any}} }.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration1ES5.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
"function c0({z: {x, y: {j}}}) { }"
```

----------------------------------------

TITLE: Defining Conditional Type with Template Literal Inference in TypeScript
DESCRIPTION: A type that extracts the content between asterisks in a template literal string. It uses conditional types with the 'infer' keyword to capture the substring between asterisk delimiters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type Foo1<T> = T extends `*${infer U}*` ? U : never;
```

----------------------------------------

TITLE: Boolean Literal Union Types in TypeScript
DESCRIPTION: Demonstrates the use of discriminated unions with boolean literals to create type-safe conditional objects. Shows how TypeScript can infer proper types based on boolean conditions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/booleanLiteralsContextuallyTypedFromUnion.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface A { isIt: true; text: string; }
interface B { isIt: false; value: number; }
type C = A | B;
const isIt = Math.random() > 0.5;
const c: C = isIt ? { isIt, text: 'hey' } : { isIt, value: 123 };
const cc: C = isIt ? { isIt: isIt, text: 'hey' } : { isIt: isIt, value: 123 };
```

----------------------------------------

TITLE: TypeScript Import Statement with Module Resolution Error
DESCRIPTION: This snippet shows a TypeScript import statement that causes a module resolution error (TS2307). The compiler cannot locate the module 'inner/other' or its type declarations, likely due to incorrect path or misconfiguration of module resolution settings. The import statement attempts to import 'Thing' from the specified module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSpecifierGenerationPattern(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// esm format file
import { Thing } from "inner/other";
                      ~~~~~~~~~~~~~
!!! error TS2307: Cannot find module 'inner/other' or its corresponding type declarations.
export const a = (await import("inner/index.js")).x();
```

----------------------------------------

TITLE: Implementing an Interface Extending Class with Protected Members in TypeScript
DESCRIPTION: This code demonstrates various error cases and correct implementations when a class tries to implement an interface that extends another class with protected members. It showcases visibility constraints, property requirements, and inheritance relationships that must be satisfied.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implementingAnInterfaceExtendingClassWithProtecteds.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Foo {
    protected x: string;
}

interface I extends Foo {
    y: number;
}

class Bar implements I { // error
}

class Bar2 implements I { // error
    y: number;
}

class Bar3 implements I { // error
    x: string;
    y: number;
}

class Bar4 implements I { // error
    protected x: string;
    y: number;
}

class Bar5 extends Foo implements I { // error
}

class Bar6 extends Foo implements I { // error
    protected y: number;
}

class Bar7 extends Foo implements I {
    y: number;
}

class Bar8 extends Foo implements I {
    x: string;
    y: number;
}
```

----------------------------------------

TITLE: Multiple Construct Signatures with CConstructor in TypeScript
DESCRIPTION: Defines an interface CConstructor with multiple construct signatures returning different types. Shows type narrowing behavior with instanceof.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardsWithInstanceOfByConstructorSignature.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
interface CConstructor {
    new (value: string): C1;
    new (value: number): C2;
}
interface C1 {
    foo: string;
    c: string;
    bar1: number;
}
interface C2 {
    foo: string;
    c: string;
    bar2: number;
}
declare var C: CConstructor;

var obj5: C1 | A;
if (obj5 instanceof C) { // narrowed to C1.
    obj5.foo;
    obj5.c;
    obj5.bar1;
    obj5.bar2;
}
```

----------------------------------------

TITLE: Iterating with Object Destructuring and Counter in TypeScript
DESCRIPTION: This code defines a for loop. The initializer uses object destructuring to extract `name` and `skill` properties from a `robot` object, providing default string values if the properties are missing. It also initializes a counter variable `i`. The loop continues as long as `i` is less than 1, incrementing `i` after each iteration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_82

LANGUAGE: TypeScript
CODE:
```
for ({
     name = "noName", skill = "skill" } =
           robot,
           i = 0; 
         i < 1;
           i
             ++
               ) 
                 {
```

----------------------------------------

TITLE: Defining TypeScript Interface
DESCRIPTION: This snippet defines a TypeScript interface named 'I' in a file named '0.ts'. The file contains no errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importTag15(module=es2015).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface I { }
```

----------------------------------------

TITLE: Defining Interface and Classes in TypeScript
DESCRIPTION: This snippet defines an interface 'ifoo' with an optional property 'x' and a required property 'y'. It then demonstrates three different class implementations of this interface, including one that incorrectly omits the required property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/optionalPropertiesInClasses.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface ifoo {
	x?:number;
	y:number;
}

class C1 implements ifoo {
	public y:number;
}

class C2 implements ifoo { // ERROR - still need 'y'
	public x:number;
}

class C3 implements ifoo {
	public x:number;
	public y:number;
}
```

----------------------------------------

TITLE: Basic TypeScript Class and Variable Declaration
DESCRIPTION: Demonstrates basic TypeScript syntax including variable declaration, class definition with a number property, class instantiation, and a function returning the instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootAbsolutePathSingleFileSpecifyOutputFile/node/mapRootAbsolutePathSingleFileSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: Loop with Object Destructuring in TypeScript
DESCRIPTION: Loop construct using object destructuring to extract name and skill properties from a Robot type object. The code includes source mapping information showing the relationship between compiled JavaScript and original TypeScript code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
for (_h = { name: "trimmer", skill: "trimming" }, nameA = _h.name, skillA = _h.skill, i = 0; i < 1; i++) {
    console.log(nameA);
}
```

LANGUAGE: typescript
CODE:
```
for (nameA = multiRobot.name, _j = multiRobot.skills, primaryA = _j.primary, secondaryA = _j.secondary, i = 0; i < 1; i++) {
    console.log(nameA);
}
```

----------------------------------------

TITLE: Exporting Types and Values from a Module in TypeScript
DESCRIPTION: This snippet re-exports all types from './a' and specifically exports the X class. It demonstrates the difference between type-only exports and value exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace5.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export type * from "./a";
export { X } from "./a";
```

----------------------------------------

TITLE: Type Guarding with Constructors in TypeScript
DESCRIPTION: The code snippet illustrates the use of constructor checks for type guarding in TypeScript classes. The examples provide various cases where derived classes have different or similar structures and the impact on the type guarding logic. Key parameters include the variable being checked and the class constructor used for comparison. The output of these checks determines whether the variable is narrowed to a more specific type or remains 'never', highlighting potential pitfalls in type inference. Limitations include incorrect assumptions about variables leading to errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardConstructorDerivedClass.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Derived class with different structures
class C1 {
    property1: number;
}

class C2 extends C1 {
    property2: number;
}

let var1: C2 | string;
if (var1.constructor === C1) {
    var1; // never
    var1.property1; // error
         ~~~~~~~~~
!!! error TS2339: Property 'property1' does not exist on type 'never'.
}
if (var1.constructor === C2) {
    var1; // C2
    var1.property1; // number
}

// Derived classes with the same structure
class C3 {}

class C4 extends C3 {}

let var2: C4 | string;
if (var2.constructor === C3) {
    var2; // never
}
if (var2.constructor === C4) {
    var2; // C4
}

// Disjointly structured classes
class C5 {
    property1: number;
}

class C6 {
    property2: number;
}

let let3: C6 | string;
if (let3.constructor === C5) {
    let3; // never
}
if (let3.constructor === C6) {
    let3; // C6
}

// Classes with the same structure
class C7 {
    property1: number
}

class C8 {
    property1: number;
}

let let4: C8 | string;
if (let4.constructor === C7) {
    let4; // never
}
if (let4.constructor === C8) {
    let4; // C8
}
```

----------------------------------------

TITLE: Using ECMAScript Dynamic Imports in TypeScript
DESCRIPTION: This snippet highlights the use of ECMAScript dynamic imports in TypeScript. It demonstrates the limitations of ECMAScript imports when resolving modules without explicit file extensions. The module import paths require specific extensions in configurations such as 'node16' or 'nodenext'. The example emphasizes the importance of specifying file extensions when using the ECMAScript module resolver.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node16).errors.txt#2025-04-21_snippet_9

LANGUAGE: TypeScript
CODE:
```
const _m35 = import("./");
                    ~~~~
const _m36 = import("./index");
                    ~~~~~~~~~
const _m37 = import("./subfolder");
                    ~~~~~~~~~~~~~
const _m38 = import("./subfolder/");
                    ~~~~~~~~~~~~~~
const _m39 = import("./subfolder/index");
                    ~~~~~~~~~~~~~~~~~~~
const _m40 = import("./subfolder2");
                    ~~~~~~~~~~~~~~
const _m41 = import("./subfolder2/");
                    ~~~~~~~~~~~~~~~
const _m42 = import("./subfolder2/index");
                    ~~~~~~~~~~~~~~~~~~~~
const _m43 = import("./subfolder2/another");
                    ~~~~~~~~~~~~~~~~~~~~~~
const _m44 = import("./subfolder2/another/");
                    ~~~~~~~~~~~~~~~~~~~~~~~
const _m45 = import("./subfolder2/another/index");
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

```

----------------------------------------

TITLE: Function with Generic Tuple Union Type Guards
DESCRIPTION: This snippet demonstrates a function `f60` that uses a generic tuple union type `Func` and type guards to narrow the type of `payload` based on the value of `kind`.  The errors indicate that the type narrowing isn't working as expected, and the compiler is unable to correctly infer the type of payload.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_31

LANGUAGE: typescript
CODE:
```
    const f60: Func = (kind, payload) => {
        if (kind === "a") {
            payload.toFixed();  // error
        }
        if (kind === "b") {
            payload.toUpperCase();  // error
        }
    };

```

----------------------------------------

TITLE: Defining Type Export in TypeScript
DESCRIPTION: This snippet shows a simple type export in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedModulesReExportType.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export type T = number;
```

----------------------------------------

TITLE: Destructuring Object with Nested Defaults in TypeScript
DESCRIPTION: This code snippet shows how to destructure an object, renaming properties (`name: nameA`), accessing nested properties (`skills`), and providing default values for both individual properties (`nameA = "noName"`) and nested objects (`skills = { primary: "none", secondary: "none" }`). The destructuring is applied to the result of the `getMultiRobot()` function within the context of a `for` loop.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_71

LANGUAGE: TypeScript
CODE:
```
for (
     {
         name: nameA = "noName",
         skills: {
             primary: primaryA = "primary",
             secondary: secondaryA = "secondary"
         } = { primary: "none", secondary: "none" }
     } =
           getMultiRobot
                        ()
)
```

----------------------------------------

TITLE: Exporting Default Class in TypeScript
DESCRIPTION: Defines and exports a default class in TypeScript. This snippet is error-free and serves as the source for the import in the next file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importHelpersWithImportOrExportDefaultNoTslib.2(esmoduleinterop=true,module=commonjs).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default class { }
```

----------------------------------------

TITLE: Using Parameter Initializers in TypeScript Function Implementations
DESCRIPTION: This code shows valid uses of parameter initializers in function declarations, function expressions, arrow functions, and class methods. Parameter initializers allow functions to have default parameter values when arguments are not provided.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callSignaturesWithParameterInitializers.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo(x = 1) { }
var f = function foo(x = 1) { }
var f2 = (x: number, y = 1) => { }

foo(1);
foo();
f(1);
f();
f2(1);
f2(1, 2);

class C {
    foo(x = 1) { }
}

var c: C;
c.foo();
c.foo(1);
```

----------------------------------------

TITLE: Export Constants Module (0.ts)
DESCRIPTION: Exports two constant values a and b from a TypeScript module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace3(module=esnext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const a = 1;
export const b = 2;
```

----------------------------------------

TITLE: ES6 Module Import/Export with Missing Module
DESCRIPTION: TypeScript code demonstrating various ES6 module import and export syntaxes that are failing due to missing module resolution configuration. Shows default imports, named imports, namespace imports, and various export patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6modulekindWithES5Target9.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import d from "mod";

import {a} from "mod";

import * as M from "mod";

export {a};

export {M};

export {d};

export * from "mod";

export {b} from "mod"

export default d;
```

----------------------------------------

TITLE: Generic Collection Interface Definition in TypeScript
DESCRIPTION: Defines a generic Collection interface with methods for managing items of type T, including length property, add and remove operations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTypingOfGenericFunctionTypedArguments1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Collection<T> {
    length: number;
    add(x: T): void;
    remove(x: T): boolean;
}
```

----------------------------------------

TITLE: Type-Safe Property Path Access with Template Literals in TypeScript
DESCRIPTION: Implements type-safe property access using dot notation string paths. Using template literals with inference, it preserves type information when accessing nested properties in an object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes1.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
declare function getProp<T, P0 extends keyof T & string, P1 extends keyof T[P0] & string, P2 extends keyof T[P0][P1] & string>(obj: T, path: `${P0}.${P1}.${P2}`): T[P0][P1][P2];
declare function getProp<T, P0 extends keyof T & string, P1 extends keyof T[P0] & string>(obj: T, path: `${P0}.${P1}`): T[P0][P1];
declare function getProp<T, P0 extends keyof T & string>(obj: T, path: P0): T[P0];
declare function getProp(obj: object, path: string): unknown;

let p1 = getProp({ a: { b: {c: 42, d: 'hello' }}} as const, 'a');
let p2 = getProp({ a: { b: {c: 42, d: 'hello' }}} as const, 'a.b');
let p3 = getProp({ a: { b: {c: 42, d: 'hello' }}} as const, 'a.b.d');

type PropType<T, Path extends string> =
    string extends Path ? unknown :
    Path extends keyof T ? T[Path] :
    Path extends `${infer K}.${infer R}` ? K extends keyof T ? PropType<T[K], R> : unknown :
    unknown;

declare function getPropValue<T, P extends string>(obj: T, path: P): PropType<T, P>;
declare const s: string;

const obj = { a: { b: {c: 42, d: 'hello' }}};

getPropValue(obj, 'a');  // { b: {c: number, d: string } }
getPropValue(obj, 'a.b');  // {c: number, d: string }
getPropValue(obj, 'a.b.d');  // string
getPropValue(obj, 'a.b.x');  // unknown
getPropValue(obj, s);  // unknown
```

----------------------------------------

TITLE: Handling Unknown Type in Catch Block with TypeScript
DESCRIPTION: This snippet demonstrates TypeScript's behavior with 'unknown' type in catch blocks. It shows type errors when trying to use methods or operations on an unknown type, and illustrates proper type narrowing techniques.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/useUnknownInCatchVariables01.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
try {
    // ...
}
catch (e) {
    // error!
    void e.toUpperCase();
    void e++;
    void e();

    if (typeof e === "string") {
        // works!
        // We've narrowed 'e' down to the type 'string'.
        console.log(e.toUpperCase());
    }
    if (e instanceof Error) {
        e.stack?.toUpperCase();
    }
    if (typeof e === "number") {
        e.toExponential();
        e++;
    }
}
```

----------------------------------------

TITLE: Initialize For Loop with Array Destructuring and Counter in TypeScript
DESCRIPTION: Initializes a `for` loop. It uses array destructuring with a default value (`numberA3 = -1`) and a rest element (`...robotAInfo`) to assign values from a typed array literal (`<Robot>[2, "trimmer", "trimming"]`). It also initializes a standard loop counter `i`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.sourcemap.txt#_snippet_91

LANGUAGE: TypeScript
CODE:
```
for (
     [numberA3 = -1, ...robotAInfo] = <Robot>[2, "trimmer", "trimming"],
                 i = 0;
                 i < 1;
                 i++
                   )
```

----------------------------------------

TITLE: Type Narrowing with Switch in TypeScript
DESCRIPTION: This code snippet demonstrates type narrowing in TypeScript using switch statements with the kind property on a union type. It defines three interfaces, A, B, and C, and a union type, MyType. The function 'isA' contains multiple switch cases without valid type checks, leading to TypeScript errors when accessing properties specific to certain types within the union. Key parameters include the 'kind' property used for type distinction. The inputs expected are of type 'MyType', and improper type handling results in errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowByClauseExpressionInSwitchTrue6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface A {\n    kind: \"a\";\n    aProps: string;\n}\n\ninterface B {\n    kind: \"b\";\n    bProps: string;\n}\n\ninterface C {\n    kind: \"c\";\n    cProps: string;\n}\n\ntype MyType = A | B | C;\n\nfunction isA(x: MyType) {\n    switch (true) {\n        default:\n            const never: never = x;\n        case x.kind === \"a\":\n            x.aProps;\n            break;\n        case x.kind === \"b\":\n            x.bProps;\n            break;\n        case x.kind === \"c\":\n            x.cProps;\n            break;\n    }\n\n    switch (true) {\n        default:\n            const never: never = x;\n        case x.kind === \"a\": {\n            x.aProps;\n            break;\n        }\n        case x.kind === \"b\": {\n            x.bProps;\n            break;\n        }\n        case x.kind === \"c\": {\n            x.cProps;\n            break;\n        }\n    }\n    \n    switch (true) {\n        default:\n            x.aProps;\n            break;\n        case x.kind === \"b\":\n            x.bProps;\n            break;\n        case x.kind === \"c\":\n            x.cProps;\n            break;\n    }\n\n    switch (true) {\n        default:\n            const never: never = x;\n        case x.kind === \"a\":\n            x.aProps;\n            // fallthrough\n        case x.kind === \"b\":\n            x.bProps;\n              ~~~~~~\n// error TS2339: Property \'bProps\' does not exist on type \'A | B\'.\n// error TS2339:   Property \'bProps\' does not exist on type \'A\'.\n            // fallthrough\n        case x.kind === \"c\":\n            x.cProps;\n              ~~~~~~\n// error TS2339: Property \'cProps\' does not exist on type \'MyType\'.\n// error TS2339:   Property \'cProps\' does not exist on type \'A\'.\n    }\n}
```

----------------------------------------

TITLE: Correct Usage of Type-Only Imports to Resolve Conflicts
DESCRIPTION: Fixed version using 'import type' syntax to avoid conflicts between imported types and global values when using the same names.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedModulesShadowGlobalTypeNotValue(isolatedmodules=true,verbatimmodulesyntax=false).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import type { Date, Event } from './types';
import { Console } from 'node:console';
function foo(a: Date) {
    const b = new Date(a.year, a.month, a.day);
    return b.getTime();
}
function bar() {
    return new Event('bar') as Event.T;
}
const baz: Console = new Console();
```

----------------------------------------

TITLE: Importing Module with Missing Declaration in TypeScript
DESCRIPTION: This code snippet demonstrates an import statement for the module 'foo' in TypeScript. It highlights the error TS7016 that occurs when the TypeScript compiler cannot find a declaration file for the imported module, implying that the module is treated as having an 'any' type. It suggests possible solutions to resolve this issue.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/untypedModuleImport_noImplicitAny.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import * as foo from "foo";
                         ~~~~~
```

----------------------------------------

TITLE: Demonstrating 'await using' Declaration in TypeScript
DESCRIPTION: A TypeScript code example showing the 'await using' declaration syntax, which provides automatic resource management for asynchronous disposable resources. The code assigns a null value to a variable 'a' that will be automatically disposed when execution leaves the block scope.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitUsingDeclarations.9.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
{
    await using a = null;
}

export {};
```

----------------------------------------

TITLE: TypeScript Compiler Error - Property Does Not Exist
DESCRIPTION: This error indicates that a property is being accessed on a type that does not have that property defined. This usually arises from type mismatches or incorrect assumptions about the structure of the object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocOuterTypeParameters2.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
"jsdocOuterTypeParameters1.js(7,35): error TS2339: Property 'foo' does not exist on type 'Bar'."
```

----------------------------------------

TITLE: Package.json with Conditional Exports
DESCRIPTION: The package.json file for 'pkg' defines conditional exports, mapping 'import' resolution to './import.js' and 'require' resolution to './require.js'. This configuration influences how TypeScript resolves types based on the context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesTripleSlashReferenceModeOverride4(module=node18).errors.txt#_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "exports": {
        "import": "./import.js",
        "require": "./require.js"
    }
}
```

----------------------------------------

TITLE: Importing and Using path.join Method
DESCRIPTION: Example of importing the Node.js path module and accessing its join method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/autoImportVerbatimCJS1.baseline.md#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import path = require("path");

path.join
```

----------------------------------------

TITLE: Advanced Array Destructuring with Default Values
DESCRIPTION: Complex iteration over multiRobots array using nested destructuring with default values for variable assignments
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_29

LANGUAGE: typescript
CODE:
```
for (var [nameMA = "noName", [primarySkillA = "primary", secondarySkillA = "secondary"] = ["skill1", "skill2"]] of multiRobots) {
```

LANGUAGE: typescript
CODE:
```
var _40 = multiRobots_3[_39], _41 = _40[0], nameMA = _41 === void 0 ? "noName" : _41, _42 = _40[1], _43 = _42 === void 0 ? ["skill1", "skill2"] : _42, _44 = _43[0], primarySkillA = _44 === void 0 ? "primary" : _44, _45 = _43[1], secondarySkillA = _45 === void 0 ? "secondary" : _45;
```

----------------------------------------

TITLE: Using Assertion Functions in a Sample Function in TypeScript
DESCRIPTION: This snippet demonstrates how to use various assertion functions within a function that processes an input. The code attempts to assert the type of 'x' and checks for unreachable code scenarios, raising compile-time errors accordingly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assertionsAndNonReturningFunctions.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
/**
 * @param {*} x 
 */
function f1(x) {
    if (!!true) {
        assert(typeof x === "string");
        x.length;
    }
    if (!!true) {
        assert2(typeof x === "string");
        x.length;
    }
    if (!!true) {
        assertIsString(x);
        x.length;
    }
    if (!!true) {
        fail();
        x;  // Unreachable
        ~~
!!! error TS7027: Unreachable code detected.
    }
}
```

----------------------------------------

TITLE: Importing Module Formats in TypeScript ESM (.mts)
DESCRIPTION: ESM format file with .mts extension importing from different module format types (CJS, MJS, JS) and referencing the imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExportsTrailers(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// esm format file
import * as cjsi from "inner/cjs/index.cjs";
import * as mjsi from "inner/mjs/index.mjs";
import * as typei from "inner/js/index.js";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: Destructuring Multiple Array Elements with Defaults in TypeScript
DESCRIPTION: This TypeScript code demonstrates destructuring multiple elements from an array with default values for each element. It extracts three elements from `robotA`, assigning default values "noName", -1 and "noSkill" if they are undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_8

LANGUAGE: TypeScript
CODE:
```
let [numberA2 = -1, nameA2 = "noName", skillA2 = "noSkill"] = robotA;
```

----------------------------------------

TITLE: Implementing Class Inheritance in TypeScript
DESCRIPTION: This code demonstrates the use of class inheritance in TypeScript by exporting a base class and a child class that extends the base class within a module. This pattern facilitates code reuse and structure in TypeScript projects where relationships between classes are essential. The snippet does not specify any dependencies.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/prologueEmit/node/prologueEmit.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    // class inheritance to ensure __extends is emitted
    module m {
        export class base {}
        export class child extends base {}
    }
```

----------------------------------------

TITLE: Defining Classes in TypeScript
DESCRIPTION: Defines two classes, A and B, which are exported for use in other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export class A {}
export class B {}
```

----------------------------------------

TITLE: Defining a Class and Instance in TypeScript
DESCRIPTION: This snippet demonstrates the definition of a class named 'm1_c1' with a property and its instantiation. The class also includes a function that returns the instance of the class. No external dependencies are required for this snippet, as it only relies on TypeScript's class syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootWithNoSourceMapOption/amd/sourceRootWithNoSourceMapOption.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Extracting Argument Types Using Conditional Inference
DESCRIPTION: Defines a type `ArgumentType<T>` that uses conditional types and `infer` to extract the argument type of a function. It works by checking if `T` extends a function type that takes one argument of type `A` and returns `any`. If it does, it infers the type `A`; otherwise, it defaults to `any`. It shows how to use it with `() => void`, `(x: string) => number`, `(x?: string) => number`, `(...args: string[]) => number`, `(x: string, y: string) => number`, `Function`, `any`, and `never`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypes1.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
    type ArgumentType<T extends (x: any) => any> = T extends (a: infer A) => any ? A : any;
    
    type T20 = ArgumentType<() => void>;  // {}
    type T21 = ArgumentType<(x: string) => number>;  // string
    type T22 = ArgumentType<(x?: string) => number>;  // string | undefined
    type T23 = ArgumentType<(...args: string[]) => number>;  // string
    type T24 = ArgumentType<(x: string, y: string) => number>;  // Error
                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2344: Type '(x: string, y: string) => number' does not satisfy the constraint '(x: any) => any'.
!!! error TS2344:   Target signature provides too few arguments. Expected 2 or more, but got 1.
    type T25 = ArgumentType<Function>;  // Error
                            ~~~~~~~~
!!! error TS2344: Type 'Function' does not satisfy the constraint '(x: any) => any'.
!!! error TS2344:   Type 'Function' provides no match for the signature '(x: any): any'.
    type T26 = ArgumentType<any>;  // any
    type T27 = ArgumentType<never>;  // never
```

----------------------------------------

TITLE: Complex Type Narrowing with Multiple Conditions in TypeScript
DESCRIPTION: This function demonstrates more complex type narrowing with multiple conditions and a union type of number, string, and boolean. It shows how TypeScript narrows the type in nested conditions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardsInIfStatement.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
function foo7(x: number | string | boolean) {
    if (typeof x === "string") {
        return x === "hello"; // string
    }
    else if (typeof x === "boolean") {
        return x; // boolean
    }
    else {
        return x == 10; // number
    }
}
```

----------------------------------------

TITLE: Type Definitions with String Literals and Mapped Types in TypeScript
DESCRIPTION: This code defines two types, `Dict` and `DictDict`. `Dict` maps string literal types to the number type. `DictDict` maps string literal types to `Dict` types. Two functions `ff1` and `ff2` are defined that access properties within the nested type using index access. This shows how to create complex type structures using string literal types and mapped types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_31

LANGUAGE: typescript
CODE:
```
    // Repro from #21770
    
    type Dict<T extends string> = { [key in T]: number };
    type DictDict<V extends string, T extends string> = { [key in V]: Dict<T> };
    
    function ff1<V extends string, T extends string>(dd: DictDict<V, T>, k1: V, k2: T): number {
        return dd[k1][k2];
    }
    
    function ff2<V extends string, T extends string>(dd: DictDict<V, T>, k1: V, k2: T): number {
        const d: Dict<T> = dd[k1];
        return d[k2];
    }
```

----------------------------------------

TITLE: TypeScript Optional Properties Declaration Examples
DESCRIPTION: Shows various ways to declare optional properties in TypeScript using interfaces, classes, and object literals. Includes both valid syntax with the '?' optional modifier and an invalid usage that generates TS1162 error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectTypesWithOptionalProperties.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// Basic uses of optional properties

var a: {
    x?: number; // ok
}

interface I {
    x?: number; // ok
}

class C {
    x?: number; // ok
}

interface I2<T> {
    x?: T; // ok
}

class C2<T> {
    x?: T; // ok
}

var b = {
    x?: 1 // error
}
```

----------------------------------------

TITLE: Defining JSX Module and Element Types in TypeScript
DESCRIPTION: Declares the JSX module with Element and IntrinsicElements interfaces to set up the environment for JSX usage in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxElementResolution8.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare module JSX {
	interface Element { }
	interface IntrinsicElements { }
}
```

----------------------------------------

TITLE: Defining Classes and Enums in TypeScript
DESCRIPTION: This snippet defines a default class, a named class, a type alias, and an enum in TypeScript. These definitions serve as the core exports of a module, which can be consumed by other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importsNotUsedAsValues_error.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default class {}
export class A {}
export type B = {};
export const enum C { One, Two }
```

----------------------------------------

TITLE: Defining Function and Constructor Parameter Lists in TypeScript
DESCRIPTION: This snippet illustrates how to use TypeScript utility types, such as Parameters and ConstructorParameters, to extract types for function and constructor parameters. It demonstrates type errors that occur when the extracted types are improperly used, and how function and constructor signatures are evaluated differently. Key focus is on understanding type constraints and signature matching with Parameters and ConstructorParameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parameterListAsTupleType.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function foo(a: number, b: string) {
  return true;
}
type Foops = Parameters<typeof foo>;

const x = (a: number) => 5;
type Xps = Parameters<typeof x>;
const a: Xps = ['should-not-work']; // works, but shouldn't
                ~~~~~~~~~~~~~~~~~
!!! error TS2322: Type 'string' is not assignable to type 'number'.
function t(...args: Xps) {} // should work

class C {
    constructor(a: number, b: string) {
    }
}

type Cps = Parameters<typeof C>; // should not work
                      ~~~~~~~~
!!! error TS2344: Type 'typeof C' does not satisfy the constraint '(...args: any) => any'.
!!! error TS2344:   Type 'typeof C' provides no match for the signature '(...args: any): any'.
type Ccps = ConstructorParameters<typeof C>; // should be [number, string]

class D {
    constructor(a: number, ...rest: string[]) {
    }
}
type Dcps = ConstructorParameters<typeof D>; // should be [number, ...string[]]
```

----------------------------------------

TITLE: Variable Destructuring with Defaults in TypeScript
DESCRIPTION: This snippet demonstrates object destructuring in TypeScript, where the properties `name` and `skill` are destructured from an object with default values being assigned in case the original values are undefined. The syntax utilizes inline default values to ensure there are fallback values available.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementDefaultValues.sourcemap.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
var _d = { name: "Edger", skill: "cutting edges" }, _e = _d.name, nameC = _e === void 0 ? "<NoName>" : _e, _f = _d.skill, skillC = _f === void 0 ? "<skillUnspecified>" : _f;
```

----------------------------------------

TITLE: Destructuring Object with Default Values in TypeScript
DESCRIPTION: This code demonstrates object destructuring in TypeScript with default values. It extracts a 'name' property with default value 'noName', and a nested 'skills' object with 'primary' and 'secondary' properties that have their own default values. This pattern is useful for handling potentially undefined object properties gracefully.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_40

LANGUAGE: typescript
CODE:
```
name: nameA = "noName", skills: { primary: primaryA = "primary", secondary: secondaryA = "secondary" } = { primary: "noSkill", secondary: "noSkill" }
```

----------------------------------------

TITLE: TypeScript Interface Assignment Compatibility Example
DESCRIPTION: Shows an error case where an interface with an optional property 'two' cannot be assigned to a type requiring a mandatory 'two' property. The code demonstrates type checking behavior for optional vs required properties in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability13.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module __test1__ {
    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
    export var __val__obj4 = obj4;
}
module __test2__ {
    export var obj = {two: "1"};
    export var __val__obj = obj;
}
__test2__.__val__obj = __test1__.__val__obj4
```

----------------------------------------

TITLE: Utility Function with Dynamic Key Invocation
DESCRIPTION: This function allows invoking a method of an object dynamically by key, supporting generic arguments and return type. It uses TypeScript features for type-safe access and invocation, ensuring the object method can handle the provided argument types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypes1.errors.txt#2025-04-21_snippet_20

LANGUAGE: typescript
CODE:
```
function invoker <K extends string | number | symbol, A extends any[]> (key: K, ...args: A) {
    return <T extends Record<K, (...args: A) => any>> (obj: T): ReturnType<T[K]> => obj[key](...args)
}

const result = invoker('test', true)({ test: (a: boolean) => 123 })

type Foo2<A extends any[]> = ReturnType<(...args: A) => string>;
```

----------------------------------------

TITLE: Implementing Class Methods with Destructuring Assignment in TypeScript
DESCRIPTION: This snippet defines a class 'C' with two methods: 'm' and 'f'. The 'm' method demonstrates correct usage of destructuring assignment, while 'f' triggers a TypeScript error for an unused local variable.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noUnusedLocals_destructuringAssignment.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
    private x = 0;

    m(): number {
        let x: number;
        ({ x } = this);
        return x;
    }

    private f(): Function {
        let f: Function;
        ({ f } = this);
        return f;
    }
}
```

----------------------------------------

TITLE: Basic Object Rest and Destructuring in TypeScript
DESCRIPTION: Demonstrates basic object rest and destructuring operations, including cloning an object, extracting specific properties, and using rest to capture remaining properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectRest.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var o = { a: 1, b: 'no' }
var { ...clone } = o;
var { a, ...justB } = o;
var { a, b: renamed, ...empty } = o;
var { ['b']: renamed, ...justA } = o;
var { 'b': renamed, ...justA } = o;
var { b: { '0': n, '1': oooo }, ...justA } = o;
```

----------------------------------------

TITLE: Package Configuration for ESM (JSON)
DESCRIPTION: This package.json snippet configures the project to use ECMAScript modules by setting the 'type' field to 'module'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsExportAssignment(module=node18).errors.txt#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: React TextComponent Class Implementation
DESCRIPTION: Implements a React component with type-restricted props using the TextProps discriminated union type. Renders a simple span element.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadAttributesResolution6.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class TextComponent extends React.Component<TextProps, {}> {
    render() {
        return <span>Some Text..</span>;
    }
}
```

----------------------------------------

TITLE: Type Guards for Custom Type Narrowing in TypeScript
DESCRIPTION: The second snippet showcases custom type guards using functions `isA` and `isB` to validate if a variable `x` is an instance of classes A or B, respectively. The `f2` function then uses these guards for type-specific property access.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowingOfDottedNames.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function f2(x: A | B) {
    while (true) {
        if (isA(x)) {
            x.prop.a;
        }
        else if (isB(x)) {
            x.prop.b;
        }
    }
}
```

----------------------------------------

TITLE: Error Handling for Import Meta in CommonJS TypeScript
DESCRIPTION: This snippet demonstrates an error encountered when attempting to use the 'import.meta' property in a CommonJS formatted TypeScript file. The error message indicates that 'import.meta' is not permissible in files that compile to CommonJS, highlighting the need for compliance with module type configurations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportMeta(module=nodenext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// cjs format file
const x = import.meta.url;
          ~~~~~~~~~~~
!!! error TS1470: The 'import.meta' meta-property is not allowed in files which will build into CommonJS output.
export {x};
```

----------------------------------------

TITLE: Exporting Variables and Classes using TypeScript
DESCRIPTION: This snippet demonstrates how to export variables, classes, and functions from a TypeScript module. The module 'm1.ts' exports a variable, a class with a property, a module instance, and a function that returns the instance. It serves as a basic example of how to structure TypeScript modules for exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcerootUrlModuleSimpleSpecifyOutputFile/node/sourcerootUrlModuleSimpleSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Defining and Using Functions with TypeScript Annotations in JavaScript
DESCRIPTION: This snippet defines two functions (fn1 and fn2) with TypeScript type annotations. Both functions attempt to pass a potentially undefined argument to a function that expects a number, resulting in type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextuallyTypedParametersOptionalInJSDoc.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
/**
 * 
 * @param {number} num 
 */
function acceptNum(num) {}

/**
 * @typedef {(a: string, b: number) => void} Fn
 */

/** @type {Fn} */
const fn1 =
  /**
   * @param [b]
   */
  function self(a, b) {
    acceptNum(b); // error
                ~
!!! error TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'number'.
!!! error TS2345:   Type 'undefined' is not assignable to type 'number'.
    self("");
    self("", undefined);
  };

/** @type {Fn} */
const fn2 =
  /**
   * @param {number} [b]
   */
  function self(a, b) {
    acceptNum(b); // error
                ~
!!! error TS2345: Argument of type 'number | undefined' is not assignable to parameter of type 'number'.
!!! error TS2345:   Type 'undefined' is not assignable to type 'number'.
    self("");
    self("", undefined);
  };
```

----------------------------------------

TITLE: Exporting Default Object in TypeScript
DESCRIPTION: This snippet shows a simple TypeScript file exporting an empty object as the default export.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importAttributes9.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default {};
```

----------------------------------------

TITLE: State management with discriminated unions
DESCRIPTION: Function demonstrating state management using discriminated union types within try-catch blocks with type narrowing checks.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tryCatchFinallyControlFlow.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
type State = { tag: "one" } | { tag: "two" } | { tag: "three" };

function notallowed(arg: number) {
    let state: State = { tag: "one" };
    try {
        state = { tag: "two" };
        try {
            state = { tag: "three" };
        }
        finally { }
    }
    catch (err) {
        state.tag;
        if (state.tag !== "one" && state.tag !== "two") {
            console.log(state.tag);
        }
    }
}
```

----------------------------------------

TITLE: Implementing Interfaces and Class Inheritance with Type Mismatches in TypeScript
DESCRIPTION: This snippet demonstrates interface implementation and class inheritance scenarios where return types do not match the expected types. It shows how TypeScript identifies missing properties and incompatible types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/invalidReturnStatements.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
interface I { id: number }
class C implements I {
    id: number;
    dispose() {}
}
class D extends C {
    name: string;
}
function fn10(): D { return { id: 12 }; } 

function fn11(): D { return new C(); }
```

----------------------------------------

TITLE: Defining Base and Derived Classes in TypeScript
DESCRIPTION: This snippet defines a base class and three derived classes to illustrate inheritance in TypeScript. The base class 'Base' contains a method 'foo', while each derived class ('Derived1', 'Derived2', and 'Derived3') adds its own unique method. This setup serves to demonstrate the relationship between base and derived classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadingOnConstants1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base { foo() { } }
class Derived1 extends Base { bar() { } }
class Derived2 extends Base { baz() { } }
class Derived3 extends Base { biz() { } }
```

----------------------------------------

TITLE: Destructuring Array in TypeScript
DESCRIPTION: Demonstrates array destructuring to extract the second element of an array, ignoring the first element. The extracted element is assigned to the variable `multiSkillB`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPattern3.sourcemap.txt#_snippet_13

LANGUAGE: typescript
CODE:
```
[, multiSkillB] = ["roomba", ["vacuum", "mopping"]];
```

----------------------------------------

TITLE: Defining and Implementing Interfaces in TypeScript
DESCRIPTION: This snippet shows the definition of interfaces and classes in TypeScript, including correct and incorrect implementations. It demonstrates interface extension, class implementation of interfaces, and common errors related to property types and missing properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceDeclaration4.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Import this module when test harness supports external modules. Also remove the internal module below.
// import Foo = require("interfaceDeclaration5")
module Foo {
    export interface I1 { item: string; }
    export class C1 { }
}

class C1 implements Foo.I1 {
	public item:string;
}

// Allowed
interface I2 extends Foo.I1 {
	item:string;
}

// Negative Case
interface I3 extends Foo.I1 {
    item:number;
}

interface I4 extends Foo.I1 {
    token:string;
}

// Err - not implemented item
class C2 implements I4 {
    public token: string;
}

interface I5 extends Foo { }

// Negative case
interface I6 extends Foo.C1 { }

class C3 implements Foo.I1 { }

// Negative case 
interface Foo.I1 { }
```

----------------------------------------

TITLE: Generic function with string constraints causing TS2345 error
DESCRIPTION: This snippet defines a generic function `logLength` that expects a string argument (constrained by `T extends string`).  Calling this function with a number (42) results in a TypeScript error TS2345 because a number is not assignable to a string. The goal is to demonstrate type checking errors with incorrectly typed arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferenceShouldFailOnEvolvingArrays.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// repro from https://github.com/Microsoft/TypeScript/issues/25675
// The type of `arg` blocks inference but simplifies to T.
function logLength<T extends string, U extends string>(arg: { [K in U]: T }[U]): T {
    console.log(arg.length);
    return arg;
}
logLength(42);  // error
          
```

----------------------------------------

TITLE: Defining and Using a TypeScript Typedef in JavaScript
DESCRIPTION: This snippet defines a typedef in JavaScript using JSDoc comments with an incorrectly spelled type name 'sting', which should be 'string'. The function 'f' takes a parameter 'p' of type 'MyType'. It demonstrates how typedefs can be used to describe object shapes for better code documentation and tooling integration. The usage of the typedef showcases the benefits of integrating TypeScript with JavaScript for type-checking but also highlights the necessity of using correct and known type names.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocPropertyTagInvalid.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
/**\n * @typedef MyType\n * @property {sting} [x]\n              ~~~~~\n!!! error TS2552: Cannot find name 'sting'. Did you mean 'string'?\n */\n\n/** @param {MyType} p  */\nexport function f(p) { }
```

----------------------------------------

TITLE: Importing Default and Named Exports
DESCRIPTION: This snippet illustrates how to import both the default export and all named exports from a single module. It shows TypeScript's syntax for combining default imports with named ones.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importsNotUsedAsValues_error.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
import Default, * as named from './a'; // Error
let a: Default;
let b: named.B;
console.log(a, b);
```

----------------------------------------

TITLE: Attempting to Access Private Static Properties in Derived Classes
DESCRIPTION: This code demonstrates the TypeScript error that occurs when trying to access a private static property (#prop) from a derived class context. The #prop accessor is private to the Base class and cannot be accessed from Derived class methods even though Derived extends Base.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameStaticAccessorssDerivedClasses.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base {
    static get #prop(): number { return  123; }
    static method(x: typeof Derived) {
        console.log(x.#prop);
                      ~~~~~
!!! error TS2339: Property '#prop' does not exist on type 'typeof Derived'.
    }
}
class Derived extends Base {
    static method(x: typeof Derived) {
        console.log(x.#prop);
                      ~~~~~
!!! error TS2339: Property '#prop' does not exist on type 'typeof Derived'.
    }
}
```

----------------------------------------

TITLE: Interface, Type Alias, and Function Declaration with Generics in TypeScript
DESCRIPTION: This code defines an interface `I7` with a property `x` of type `any`. It also defines a type alias `Foo7` that simply returns its generic type parameter. Finally, it declares a function `f7` that takes a key `K` of `I7` and returns a `Foo7` of the type of the property at that key. This example showcases how to use generics with interfaces and type aliases.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_30

LANGUAGE: typescript
CODE:
```
    // Repro from #23940
    
    interface I7 {
        x: any;
    }
    type Foo7<T extends number> = T;
    declare function f7<K extends keyof I7>(type: K): Foo7<I7[K]>;
```

----------------------------------------

TITLE: Implementing Overloaded React Component with Multiple Prop Types
DESCRIPTION: Implements the MainButton component with three overload signatures to accept different prop types (ButtonProps, LinkProps, or HyphenProps). The implementation checks for the presence of specific props to determine rendering behavior.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentOverload5.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
export function MainButton(buttonProps: ButtonProps): JSX.Element;
export function MainButton(linkProps: LinkProps): JSX.Element;
export function MainButton(hyphenProps: HyphenProps): JSX.Element;
export function MainButton(props: ButtonProps | LinkProps | HyphenProps): JSX.Element {
    const linkProps = props as LinkProps;
    if(linkProps.to) {
        return this._buildMainLink(props);
    }

    return this._buildMainButton(props);
}
```

----------------------------------------

TITLE: Interface Implementation with Incompatible Object Property Type
DESCRIPTION: This example defines an interface `IFoo4` with a property `p1` that is an object with specific nested properties. The class `C4` implements `IFoo4`, but its `p1` property has a different object structure, resulting in a type error because the object types do not match.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/incompatibleTypes.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
interface IFoo4 {
        p1: { a: { a: string; }; b: string; };
    }
    
    class C4 implements IFoo4 { // incompatible on the property type
        public p1: { c: { b: string; }; d: string; };
    }
```

----------------------------------------

TITLE: Defining Base Interface with Rest Parameters in TypeScript
DESCRIPTION: Definition of a Base interface containing four function signatures that use rest parameters and optional parameters. This serves as the foundation for the subsequent interface extensions that demonstrate various type compatibility issues.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithCallSignaturesWithRestParameters.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Base { 
    a: (...args: number[]) => number;
    a2: (x: number, ...z: number[]) => number;
    a3: (x: number, y?: string, ...z: number[]) => number;
    a4: (x?: number, y?: string, ...z: number[]) => number;
}
```

----------------------------------------

TITLE: Defining React Components with Type Props
DESCRIPTION: Multiple React component classes with different prop type signatures, showcasing type compatibility challenges in TypeScript
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxUnionElementType4.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class RC1 extends React.Component<{x : number}, {}> {
    render() {
        return null;
    }
}

class RC2 extends React.Component<{ x: string }, {}> {
    render() {
        return null;
    }
    private method() { }
}

class RC3 extends React.Component<{}, {}> {
    render() {
        return null;
    }
}

class RC4 extends React.Component<{}, {}> {
    render() {
        return null;
    }
}
```

----------------------------------------

TITLE: Using ES2015 Collections in TypeScript
DESCRIPTION: Examples of using ES2015 collection types Map, Set, WeakMap, WeakSet, and Iterator interfaces. These require 'lib' compiler option to be set to 'es2015' or later.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/doYouNeedToChangeYourTargetLibraryES2015.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
const testMap: Map<any, any> = null as any;
const testSet: Set<any> = null as any;
const testWeakMap: WeakMap<any, any> = null as any;
const testWeakSet: WeakMap<any, any> = null as any;
const testIterator: Iterator<any, any, any> = null as any;
const testAsyncIterator: AsyncIterator<any, any, any> = null as any;
```

----------------------------------------

TITLE: Accessing Property on Null Value in TypeScript
DESCRIPTION: This code attempts to call the method 'toBAZ()' on a null value, which TypeScript correctly identifies as an error. TypeScript prevents this at compile time with error TS18050, highlighting its capability to catch potential runtime errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertyAccess4.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
null.toBAZ();
```

----------------------------------------

TITLE: Implementing a Generic Map Function in TypeScript
DESCRIPTION: Defines a generic map function that transforms an array of type T to an array of type U using a mapping function. The function iterates through the input array and applies the provided mapping function to each element, collecting results in a new array.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mismatchedExplicitTypeParameterAndArgumentType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function map<T, U>(xs: T[], f: (x: T) => U) {
    var ys: U[] = [];
    xs.forEach(x => ys.push(f(x)));
    return ys;
}
```

----------------------------------------

TITLE: Defining Union Type State with Variants
DESCRIPTION: Creates a discriminated union type representing two possible state variants with different data types
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeOfThisInstanceMemberNarrowedWithLoopAntecedent.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type State = {
    type: "numberVariant";
    data: number;
} | {
    type: "stringVariant";
    data: string;
};
```

----------------------------------------

TITLE: Defining a Function with Type Annotations - TypeScript
DESCRIPTION: This snippet defines a function 'g' with a single string parameter and demonstrates a TypeScript error when called without arguments, showcasing the language's enforcement of parameter requirements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocTypeTagRequiredParameters.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
/** @type {(s: string) => void} */
function g(s) {
}
g() // should error
~
!!! error TS2554: Expected 1 arguments, but got 0.
!!! related TS6210 a.js:4:13: An argument for 's' was not provided.
```

----------------------------------------

TITLE: Object Destructuring with Default Values in Loop
DESCRIPTION: Demonstrates object destructuring with default values in a for loop context. Extracts the name property with a default value of 'noName' if undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
for (var _a = robot.name, nameA = _a === void 0 ? "noName" : _a, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Invalid Function Return Type with Mixed Types
DESCRIPTION: Function with return type 'undefined | number' that requires an explicit return value due to type constraints
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionsMissingReturnStatementsAndExpressionsStrictNullChecks.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function f11(): undefined | number {
    // Error, return type isn't just undefined
}
```

----------------------------------------

TITLE: Defining Global Interface in TypeScript
DESCRIPTION: This snippet defines a global interface 'GlobalThing' with a single property 'a' of type number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tripleSlashTypesReferenceWithMissingExports(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface GlobalThing { a: number }
```

----------------------------------------

TITLE: Extracting Types from String Literals with Template Literals
DESCRIPTION: Demonstrates how string literal types can be used with template literals and the infer keyword to extract strongly-typed values. Shows relationships between string literals and various types including enums, numbers, booleans, and more.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes4.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
type PStringLiteralEnum07 = "false" extends `${infer T extends StringLiteralEnum | boolean}` ? T : never; // StringLiteralEnum.False

// string-literal-enum > (boolean-literal | undefined | null)
type PStringLiteralEnum08 = "true" extends `${infer T extends StringLiteralEnum | true}` ? T : never; // StringLiteralEnum.True
type PStringLiteralEnum09 = "false" extends `${infer T extends StringLiteralEnum | false}` ? T : never; // StringLiteralEnum.False
type PStringLiteralEnum10 = "undefined" extends `${infer T extends StringLiteralEnum | undefined}` ? T : never; // StringLiteralEnum.Undefined
type PStringLiteralEnum11 = "null" extends `${infer T extends StringLiteralEnum | null}` ? T : never; // StringLiteralEnum.Null
```

----------------------------------------

TITLE: Function Signature Mismatch in React Component Props
DESCRIPTION: This code demonstrates an error when passing a function with more parameters than the receiving function type expects. The Link component expects a function that takes one argument, but the provided function requires two.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentsWithTypeArguments2.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
function createLink(func: (a: number, b: string)=>void) {
    let o = <Link func={func} />
}
```

----------------------------------------

TITLE: Testing ES2020 Features in TypeScript
DESCRIPTION: This snippet tests ES2020 features including Promise.allSettled, String.prototype.matchAll, RegExp.prototype[Symbol.matchAll], and BigInt. TypeScript compiler errors are shown for each unsupported feature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/doYouNeedToChangeYourTargetLibraryES2016Plus.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
const testPromiseAllSettled = Promise.allSettled([]);
const testStringMatchAll = "".matchAll();
const testRegExpMatchAll = /matchAll/g[Symbol.matchAll]("matchAll");
const testBigInt = BigInt(123);
```

----------------------------------------

TITLE: Switch Case Handling for String Types in TypeScript
DESCRIPTION: This snippet showcases a TypeScript switch statement that checks the value of a variable against predefined string types. It highlights a type error when an invalid case is included. The variable 'value' should only take the values 'foo' or 'bar', and including 'invalid' results in a TypeScript compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parenthesizedJSDocCastDoesNotNarrow.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
let value = "";

switch (/** @type {"foo" | "bar"} */ (value)) {
  case "bar":
    value;
    break;

  case "foo":
    value;
    break;

  case "invalid":
       ~~~~~~~~~
!!! error TS2678: Type '"invalid"' is not comparable to type '"foo" | "bar"'.
    value;
    break;
}
```

----------------------------------------

TITLE: Defining Basic and Abstract Classes in TypeScript
DESCRIPTION: Defines a regular class A and an abstract class B with an abstract method. The abstract class has a concrete method that depends on the abstract method implementation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classAbstractInstantiations2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
    // ...
}

abstract class B {
    foo(): number { return this.bar(); }
    abstract bar() : number;
}
```

----------------------------------------

TITLE: Robot Function Result Iteration
DESCRIPTION: For loop that iterates through results of getRobots() function using destructuring assignment with a default value of 'noName' for the nameA variable.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
for (var _c = 0, _d = getRobots(); _c < _d.length; _c++) {
    var _e = _d[_c], _f = _e[1], nameA = _f === void 0 ? "noName" : _f;
    console.log(nameA);
}
```

----------------------------------------

TITLE: Todo Component Definition - TypeScript
DESCRIPTION: This snippet defines the Todo component that renders a div containing a key and a todo item. The purpose is to show individual Todo details. It utilizes props to display data dynamically.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadChildrenInvalidType(jsx=react-jsx,target=es2015).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function Todo(prop: { key: number, todo: string }) {
    return <div>{prop.key.toString() + prop.todo}</div>;
}
```

----------------------------------------

TITLE: Implementing the HashTable Class in TypeScript
DESCRIPTION: This class implements a hash table structure, managing key-value entries with collisions handled via chaining, and provides methods for adding, removing, looking up, and counting items in the hash table.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserRealSource4.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
export class HashTable {
    public itemCount: number = 0;
    public table = new HashEntry[];

    constructor (public size: number, public hashFn: (key) =>number,
                public equalsFn: (key1, key2) =>boolean) {
        for (var i: number = 0; i < this.size; i++) {
            this.table[i] = null;
        }
    }

    public add(key, data): boolean {
        var current: HashEntry;
        var entry: HashEntry = new HashEntry(key, data);
        var val: number = this.hashFn(key);
        val = val % this.size;

        for (current = this.table[val]; current != null ; current = current.next) {
            if (this.equalsFn(key, current.key)) {
                return false;
            }
        }
        entry.next = this.table[val];
        this.table[val] = entry;
        this.itemCount++;
        return true;
    }

    public remove(key) {
        var current: HashEntry;
        var val: number = this.hashFn(key);
        val = val % this.size;
        var result = null;
        var prevEntry: HashEntry = null;

        for (current = this.table[val]; current != null ; current = current.next) {
            if (this.equalsFn(key, current.key)) {
                result = current.data;
                this.itemCount--;
                if (prevEntry) {
                    prevEntry.next = current.next;
                }
                else {
                    this.table[val] = current.next;
                }
                break;
            }
            prevEntry = current;
        }
        return result;
    }

    public count(): number { return this.itemCount; }

    public lookup(key) {
        var current: HashEntry;
        var val: number = this.hashFn(key);
        val = val % this.size;
        for (current = this.table[val]; current != null ; current = current.next) {
            if (this.equalsFn(key, current.key)) {
                return (current.data);
            }
        }
        return (null);
    }
}
```

----------------------------------------

TITLE: Creating a Greeter Instance in TypeScript
DESCRIPTION: This snippet demonstrates the instantiation of the Greeter class by creating an object and invoking the greet method to get the greeting string. It illustrates instance creation and method invocation in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationClasses.sourcemap.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
var greeter = new Greeter("Hello, world!");
var str = greeter.greet();
```

----------------------------------------

TITLE: Defining a Generic Interface with Constraints - TypeScript
DESCRIPTION: This snippet defines a generic interface 'I' with a type parameter 'S' and a method 'f' that takes a parameter 'x' of type 'T', constrained to be a subtype of 'S'. The snippet demonstrates the instantiation of this interface with a specific type and the resulting type error when an incompatible type is passed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericConstraintSatisfaction1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface I<S> {
   f: <T extends S>(x: T) => void
}
 
var x: I<{s: string}>
x.f({s: 1})
     ~
```

----------------------------------------

TITLE: Initializing Robot Objects in TypeScript
DESCRIPTION: Defines and initializes Robot and MultiRobot objects with name and skill properties. The code includes interfaces and object initialization with specific property values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
var robot = { name: "mower", skill: "mowing" };
var multiRobot = { name: "mower", skills: { primary: "mowing", secondary: "none" } };
```

----------------------------------------

TITLE: Creating a Simple React Component in TypeScript
DESCRIPTION: This snippet defines a React functional component 'Compa' using TypeScript. It takes a prop 'x' of type number and renders it within a div element.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unicodeEscapesInJsxtags.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
const Compa = (x: {x: number}) => <div>{"" + x}</div>;
```

----------------------------------------

TITLE: Defining Greeter Class with Default Constructor in TypeScript
DESCRIPTION: This snippet defines a Greeter class with a default constructor that initializes two public properties: 'a' as a number with value 10, and 'nameA' as a string with value "Ten".
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationClassWithDefaultConstructor.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Greeter {
    public a = 10;
    public nameA = "Ten";
}
```

----------------------------------------

TITLE: Defining Interface with Various Signature Types in TypeScript
DESCRIPTION: This snippet demonstrates an interface declaration with various signature types including call signatures, construct signatures, index signatures, property signatures, and function signatures. It shows TypeScript errors related to index signatures and overload signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/giant.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
export interface eI {
    //Call Signature
    ();
    (): number;
    (p);
    (p1: string);
    (p2?: string);
    (...p3: any[]);
    (p4: string, p5?: string);
    (p6: string, ...p7: any[]);
    
    //Construct Signature
    new ();
    new (): number;
    new (p: string);
    new (p2?: string);
    new (...p3: any[]);
    new (p4: string, p5?: string);
    new (p6: string, ...p7: any[]);

    //Index Signature
    [p];
    [p1: string];
    [p2: string, p3: number];

    //Property Signature
    p;
    p1?;
    p2?: string;
    
    //Function Signature
    p3();
    p4? ();
    p5? (): void;
    p6(pa1): void;
    p7(pa1, pa2): void;
    p7? (pa1, pa2): void;
}
```

----------------------------------------

TITLE: Dynamic Import Resolution Errors
DESCRIPTION: Examples of dynamic import() statements showing extension resolution requirements in ESM context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node18).errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
const _m35 = import("./");
const _m36 = import("./index");
const _m37 = import("./subfolder");
const _m38 = import("./subfolder/");
const _m39 = import("./subfolder/index");
const _m40 = import("./subfolder2");
```

----------------------------------------

TITLE: Logging with Default Parameters in TypeScript
DESCRIPTION: This snippet defines a function `foo2` that accepts an optional object with a `name` property, which has a default value of "noSkill". If no argument or an object without the `name` property is provided, the default value is used. The function then logs the `nameB` to the console.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringParameterObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
>>>    console.log(nameB);
1 >^^^^
2 >    ^^^^^^^
3 >           ^
4 >            ^^^
5 >               ^
6 >                ^^^^^
7 >                     ^
8 >                      ^
1 > }: Robot = {}) {
  >    
2 >    console
3 >           .
4 >            log
5 >               (
6 >                nameB
7 >                     )
8 >                      ;
1 >Emitted(9, 5) Source(15, 5) + SourceIndex(0)
2 >Emitted(9, 12) Source(15, 12) + SourceIndex(0)
3 >Emitted(9, 13) Source(15, 13) + SourceIndex(0)
4 >Emitted(9, 16) Source(15, 16) + SourceIndex(0)
5 >Emitted(9, 17) Source(15, 17) + SourceIndex(0)
6 >Emitted(9, 22) Source(15, 22) + SourceIndex(0)
7 >Emitted(9, 23) Source(15, 23) + SourceIndex(0)
8 >Emitted(9, 24) Source(15, 24) + SourceIndex(0)
```

----------------------------------------

TITLE: Defining a generic class A in TypeScript
DESCRIPTION: Defines a generic class 'A' with a type parameter 'T' and a non-nullable property 'a' of type 'T'.  Also defines a type alias 'B' for 'A'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generic.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export class A<T> { a!: T }
export type { A as B };
```

----------------------------------------

TITLE: TypeScript Import Path Resolution Example
DESCRIPTION: Demonstrates an error case where importing with .ts extension leads to ambiguous path resolution. The import './foo.ts' could refer to either a file or directory, making it unsafe to rewrite. The type-only import works without error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/cjsErrors(module=nodenext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import foo = require("./foo.ts"); // Error
import type _foo = require("./foo.ts"); // Ok
```

LANGUAGE: typescript
CODE:
```
export = {};
```

----------------------------------------

TITLE: Decorating Class Export in TypeScript
DESCRIPTION: This snippet demonstrates an attempt to use a decorator on a class export. It requires helper functions '__esDecorate', '__runInitializers', and '__setFunctionName' from tslib, which are not present in the current version.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classExpression-missingEmitHelpers-classDecorator.13.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare var dec: any;

// uses __esDecorate, __runInitializers, __setFunctionName
export const C = ((@dec class {}));
```

----------------------------------------

TITLE: JSX Compilation with React - TypeScript
DESCRIPTION: This snippet demonstrates the use of JSX with React in a TypeScript file. It utilizes the `/* @jsxImportSource react */` pragma to specify React as the JSX factory.  The code defines a simple JSX structure with a paragraph and a div element. The code compiles without errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxJsxsCjsTransformCustomImportPragma(jsx=react-jsx).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    /// <reference path="/.lib/react16.d.ts" />
    /* @jsxImportSource react */
    import "./preact";
    const a = <>
      <p></p>
      text
      <div className="foo"></div>
    </>
    
    export {};
```

----------------------------------------

TITLE: Destructuring Catch Clause (Array)
DESCRIPTION: This snippet demonstrates destructuring an array in a catch clause where the caught error's type is implicitly 'unknown'. Attempting to use array destructuring on an 'unknown' type results in a TypeScript error, as the compiler cannot guarantee that the caught value is actually an array.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructureCatchClause(strict=true,useunknownincatchvariables=true).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
"try {} catch ([ x ]) { x }"
```

----------------------------------------

TITLE: Processing Robot Arrays with Destructuring
DESCRIPTION: Multiple for...of loops demonstrating destructuring and iteration over robot-related arrays with complex mapping and logging
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
for ([, nameA] of [robotA, robotB]) {
    console.log(nameA);
}
```

LANGUAGE: typescript
CODE:
```
for ([, [primarySkillA, secondarySkillA]] of multiRobots) {
    console.log(primarySkillA);
}
```

LANGUAGE: typescript
CODE:
```
for ([, [primarySkillA, secondarySkillA]] of getMultiRobots()) {
    // Code snippet truncated
}
```

----------------------------------------

TITLE: JSX Runtime Function Definitions for Preact
DESCRIPTION: This snippet declares functions for creating JSX elements in a type-safe manner within a Preact context. It outlines the `jsx`, `jsxs`, and `jsxDEV` functions, detailing how to manage HTML and SVG attributes along with handling child components. These functions are essential for transforming JSX syntax into corresponding virtual DOM nodes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxNamespaceGlobalReexportMissingAliasTarget.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export function jsx(
	type: string,
	props: JSXInternal.HTMLAttributes &
		JSXInternal.SVGAttributes &
		Record<string, any> & { children?: ComponentChild },
	key?: string
): VNode<any>;
export function jsx<P>(
	type: ComponentType<P>,
	props: Attributes & P & { children?: ComponentChild },
	key?: string
): VNode<any>;

export function jsxs(
	type: string,
	props: JSXInternal.HTMLAttributes &
		JSXInternal.SVGAttributes &
		Record<string, any> & { children?: ComponentChild[] },
	key?: string
): VNode<any>;
export function jsxs<P>(
	type: ComponentType<P>,
	props: Attributes & P & { children?: ComponentChild[] },
	key?: string
): VNode<any>;

export function jsxDEV(
	type: string,
	props: JSXInternal.HTMLAttributes &
		JSXInternal.SVGAttributes &
		Record<string, any> & { children?: ComponentChildren },
	key?: string
): VNode<any>;
export function jsxDEV<P>(
	type: ComponentType<P>,
	props: Attributes & P & { children?: ComponentChildren },
	key?: string
): VNode<any>;
```

----------------------------------------

TITLE: TypeScript Error: Property does not exist
DESCRIPTION: This code snippet from a.js demonstrates a TypeScript error where property 'f' is accessed on a 'number' type, which does not exist, resulting in a TS2339 error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleExportWithExportPropertyAssignment2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    /// <reference path='./requires.d.ts' />
    var mod1 = require('./mod1')
    mod1.toFixed(12)
    mod1.f() // error, 'f' is not a property on 'number'
         ~
```

----------------------------------------

TITLE: JSX Type Errors with Optional Properties
DESCRIPTION: Examples showing type errors when using components with optional properties or when providing incompatible types for required properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentOverload4.errors.txt#2025-04-21_snippet_8

LANGUAGE: jsx
CODE:
```
const e1 = <TestingOptional y1 y3="hello"/>
const e2 = <TestingOptional y1="hello" y2={1000} y3 />
const e3 = <TestingOptional y1="hello" y2={1000} children="hi" />
const e4 = <TestingOptional y1="hello" y2={1000}>Hi</TestingOptional>
```

----------------------------------------

TITLE: Inner package.json with conditional exports configuration
DESCRIPTION: A package.json for the 'inner' module that defines conditional exports mapping for different module formats using path patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExports(module=node18).errors.txt#2025-04-21_snippet_7

LANGUAGE: json
CODE:
```
{
    "name": "inner",
    "private": true,
    "exports": {
        "./cjs/*": "./*.cjs",
        "./mjs/*": "./*.mjs",
        "./js/*": "./*.js"
    }
}
```

----------------------------------------

TITLE: Destructuring with Default Naming JavaScript
DESCRIPTION: This snippet extracts the robot name into the nameMB variable from multiRobotB, with a default fallback to 'noName'. It demonstrates how to implement defaults during destructuring.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
var _b = multiRobotB[0], nameMB = _b === void 0 ? "noName" : _b;
```

----------------------------------------

TITLE: Type Narrowing with Undefined Checks for Intersection Types in TypeScript
DESCRIPTION: Function f2 shows type narrowing when explicitly checking against undefined. When x is not undefined, the type narrows to T & string; otherwise, it narrows to T & undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionNarrowing.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function f2<T>(x: T & string | T & undefined) {
    if (x !== undefined) {
        x;  // Should narrow to T & string
    }
    else {
        x;  // Should narrow to T & undefined
    }
}
```

----------------------------------------

TITLE: TypeScript Module Export (b.ts)
DESCRIPTION: Simple module exporting a constant value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noCrashOnImportShadowing.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const zzz = 123;
```

----------------------------------------

TITLE: Defining Asynchronous Methods in Classes
DESCRIPTION: This snippet illustrates the definition of asynchronous methods within a class in TypeScript. It includes both instance methods and static methods, showcasing different return types including Promises and custom Promise-like types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncAwaitIsolatedModules_es2017.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class C {
	async m1() { }
	async m2(): Promise<void> { }
	async m3(): MyPromise<void> { }
	static async m4() { }
	static async m5(): Promise<void> { }
	static async m6(): MyPromise<void> { }
};
```

----------------------------------------

TITLE: Defining React Component Class in TypeScript
DESCRIPTION: Declares a generic Component class with props and state, including methods like setState, forceUpdate, and render. Also defines a ComponentClass interface for class components.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution12.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
declare class Component<P, S>  {
	constructor(props?: P, context?: any);
	setState(f: (prevState: S, props: P) => S, callback?: () => any): void;
	setState(state: S, callback?: () => any): void;
	forceUpdate(callBack?: () => any): void;
	render(): JSX.Element;
	props: P;
	state: S;
	context: {};
}

interface ComponentClass<P> {
	new (props?: P, context?: any): Component<P, any>;
}
```

----------------------------------------

TITLE: Exporting createElement function in TypeScript
DESCRIPTION: This exports the `createElement` function from the `Element` namespace, making it available for use when transpiling JSX code. This allows the custom `createElement` function to be used when JSX is compiled.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxFactoryAndReactNamespace.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
export let createElement = Element.createElement;
```

----------------------------------------

TITLE: Handling Action Type with Destructuring and Switch Statement
DESCRIPTION: This snippet utilizes a `switch` statement to handle different `kind` values from the `Action` type after destructuring the object in the function parameter. The `f12` function destructures `kind` and `payload` and uses a switch statement to call the correct method based on whether `kind` is 'A' or 'B'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
    function f12({ kind, payload }: Action) {
        switch (kind) {
            case 'A':
                payload.toFixed();
                break;
            case 'B':
                payload.toUpperCase();
                break;
            default:
                payload;  // never
        }
    }

```

----------------------------------------

TITLE: Incorrect Super Call Order - Initial Example
DESCRIPTION: Demonstrates an incorrect constructor implementation where local variable declaration precedes super() call, causing compilation errors
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassParameterProperties.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class Derived extends Base {
    constructor(y: string) {
        var a = 1;
        super();
    }
}
```

----------------------------------------

TITLE: Creating Generic Property Assignment and Event Handlers
DESCRIPTION: Various utility functions for type-safe property assignment and event handler registration. These functions demonstrate the use of keyof with generic type parameters to create type-safe property interactions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
const assignTo2 = <T, K1 extends keyof T, K2 extends keyof T[K1]>(object: T, key1: K1, key2: K2) =>
    (value: T[K1][K2]) => object[key1][key2] = value;

declare function one<T>(handler: (t: T) => void): T
var empty = one(() => {}) // inferred as {}, expected

type Handlers<T> = { [K in keyof T]: (t: T[K]) => void }
declare function on<T>(handlerHash: Handlers<T>): T
var hashOfEmpty1 = on({ test: () => {} });  // {}
var hashOfEmpty2 = on({ test: (x: boolean) => {} });  // { test: boolean }
```

----------------------------------------

TITLE: TypeScript Type Error: Assigning String to Number
DESCRIPTION: A TypeScript example that generates a type error by attempting to assign a string value to a property that was initialized as a number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileClassPropertyType.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
(new C()).p = "string";
```

----------------------------------------

TITLE: JSX identifier name not found
DESCRIPTION: The following snippet contains errors related to the usage of names in JSX. It highlights cases where the TypeScript compiler cannot find the defined name within the scope, leading to compilation errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxInvalidEsprimaTestSuite.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
"<a.b:c></a.b:c>;"
```

----------------------------------------

TITLE: Implementing Class Inheritance with Generic Getters and Setters
DESCRIPTION: This snippet shows a base class with generic get/set methods and how derived classes can leverage these methods for type-safe property access. The example demonstrates how to use keyof with 'this' type in class hierarchies.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
class Base {
    get<K extends keyof this>(prop: K) {
        return this[prop];
    }
    set<K extends keyof this>(prop: K, value: this[K]) {
        this[prop] = value;
    }
}

class Person extends Base {
    parts: number;
    constructor(parts: number) {
        super();
        this.set("parts", parts);
    }
    getParts() {
        return this.get("parts")
    }
}

class OtherPerson {
    parts: number;
    constructor(parts: number) {
        setProperty(this, "parts", parts);
    }
    getParts() {
        return getProperty(this, "parts")
    }
}
```

----------------------------------------

TITLE: Defining a Generic Function with Type Constraints - TypeScript
DESCRIPTION: This snippet defines a generic function 'foo' which takes an object with properties 'bar' and 'baz'. It demonstrates type checking, highlighting an error when a string is assigned where a number is expected. The function is designed to ensure type safety by enforcing that both properties of the input object share the same type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCallWithObjectLiteralArgs.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function foo<T>(x: { bar: T; baz: T }) {
    return x;
}

var r = foo({ bar: 1, baz: '' }); // error
                          ~~~
!!! error TS2322: Type 'string' is not assignable to type 'number'.
!!! related TS6500 genericCallWithObjectLiteralArgs.ts:1:30: The expected type comes from property 'baz' which is declared here on type '{ bar: number; baz: number; }'
var r2 = foo({ bar: 1, baz: 1 }); // T = number
var r3 = foo({ bar: foo, baz: foo }); // T = typeof foo
var r4 = foo<Object>({ bar: 1, baz: '' }); // T = Object
```

----------------------------------------

TITLE: Nested Destructuring of Robot Attributes
DESCRIPTION: Demonstrates multi-level array destructuring to extract primary and secondary skills from a complex nested array structure
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_23

LANGUAGE: typescript
CODE:
```
for ([nameMA, [primarySkillA, secondarySkillA]] = multiRobotA, i = 0; i < 1; i++) {}
```

----------------------------------------

TITLE: Promise.all with Mixed Promise Types and Spread Operator in TypeScript
DESCRIPTION: Example demonstrating how to use Promise.all with an array containing different Promise types, using the spread operator to combine arrays of promises.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitedType.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
// repro from #40330

async function test40330() {

    const promiseNumber = Promise.resolve(1);
    const promiseVoid = async () => {}

    const res = await Promise.all([
        promiseNumber,
        ...[promiseVoid()]
    ])
}
```

----------------------------------------

TITLE: Non-Generic Interface Multiple Base Types
DESCRIPTION: Demonstrates defining interfaces with multiple base types and property compatibility requirements
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceWithMultipleBaseTypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Base1 {
    x: {
        a: string;
    }
}

interface Base2 {
    x: {
        b: string;
    }
}

interface Derived extends Base1, Base2 {
    x: {
        a: string; b: string;
    }
}
```

----------------------------------------

TITLE: Testing Type Constraints in Array Literals - TypeScript
DESCRIPTION: This snippet demonstrates type checking in TypeScript where an array declared with a 'string' type constraint is erroneously assigned 'number' values, resulting in a type error. It shows how TypeScript enforces type safety in array literals.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/targetTypeTest3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Test target typing for array literals and call expressions

var a : string[] = [1,2,"3"]; // should produce an error
                    ~
!!! error TS2322: Type 'number' is not assignable to type 'string'.
                      ~
!!! error TS2322: Type 'number' is not assignable to type 'string'.

```

----------------------------------------

TITLE: Correct Super Call After Local Variable
DESCRIPTION: Illustrates a correct constructor pattern where super() is called before local variable declaration
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassParameterProperties.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
class Derived3 extends Base {
    constructor(public y: string) {
        super();
        var a = 1;
    }
}
```

----------------------------------------

TITLE: Destructuring and Default Values in TypeScript
DESCRIPTION: This code snippet demonstrates how to use destructuring assignment in TypeScript to initialize variables with default values. It uses a "for" loop to iterate over a MultiRobot object, setting default values for the primary and secondary skills, and shows how these defaults can be overridden by the object's properties. The "MultiRobot" object includes properties for "name" and "skills", with defaults provided for both.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_14

LANGUAGE: TypeScript
CODE:
```
for (let {\n    skills: {\n        primary: primaryA = \"primary\",\n        secondary: secondaryA = \"secondary\"\n    } = { primary: \"none\", secondary: \"none\" }\n} = <MultiRobot>\n{ \n  name: \"trimmer\", \n  skills: { \n    primary: \"trimming\", \n    secondary: \"edging\" \n  } \n} ) { \n  console.log(primaryA, secondaryA); \n}
```

----------------------------------------

TITLE: Function with Rest Parameter Destructuring
DESCRIPTION: Implements a function that destructures the first element separately and collects remaining elements using rest parameter syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringParametertArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
function foo4(_a) {
    var numberA3 = _a[0], robotAInfo = _a.slice(1);
    console.log(robotAInfo);
}
```

----------------------------------------

TITLE: Demonstrating Interface Implementation and Type Assignment Errors in TypeScript
DESCRIPTION: This code demonstrates several TypeScript errors including: 1) property type mismatch when implementing an interface, and 2) property missing errors when assigning between different interface types. The file intentionally creates errors to demonstrate TypeScript's type checking capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/elaboratedErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface FileSystem {
  read: number;
}

function fn(s: WorkerFS): void;
function fn(s: FileSystem): void;
function fn(s: FileSystem|WorkerFS) { }

// This should issue a large error, not a small one
class WorkerFS implements FileSystem {
  read: string;
}

interface Alpha { x: string; }
interface Beta { y: number; }
var x: Alpha;
var y: Beta;

// Only one of these errors should be large
x = y;
x = y;

// Only one of these errors should be large
y = x;
y = x;
```

----------------------------------------

TITLE: Defining and Invoking Function Overloads in TypeScript
DESCRIPTION: This snippet defines function overloads accepting arrays containing objects with a required 'a' property of either number or boolean type. The call to 'foo' with an empty object results in an error because the 'a' property is missing. It highlights the importance of matching parameter types with overload definitions. Key limitations include enforcing argument types according to overloads.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionOverloads41.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function foo(bar:{a:number;}[]):string;
function foo(bar:{a:boolean;}[]):number;
function foo(bar:{a:any;}[]):any{ return bar }
var x = foo([{}]);
```

----------------------------------------

TITLE: TypeScript Declarations for React and Redux
DESCRIPTION: This snippet includes TypeScript declaration files for React and Redux. It provides typings for React and a function creation for Redux's store, which can be utilized within TypeScript projects to enforce type safety and improve development efficiency.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAtTypesPriority.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
==== /node_modules/@types/react/index.d.ts (0 errors) ====\n    declare const React: any;\n    export = React;\n\n==== /node_modules/@types/redux/index.d.ts (0 errors) ====\n    export declare function createStore(): void;
```

----------------------------------------

TITLE: Destructuring Assignment with Default Values in TypeScript
DESCRIPTION: This snippet demonstrates a destructuring assignment with default values for object properties. It includes nested object destructuring for 'skills' with 'primary' and 'secondary' properties, and provides default values for all properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_50

LANGUAGE: TypeScript
CODE:
```
{ name = "noName", skills: { primary = "primary", secondary = "secondary" } = { primary: "noSkill", secondary: "noSkill" } }
```

----------------------------------------

TITLE: Importing Types from Module A and B
DESCRIPTION: This snippet imports types and default exports from modules 'a' and 'b'. It shows how to import both named and default exports in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports_errors(isolatedmodules=false).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import DefaultA from "./a";
import { A } from "./a";
import DefaultB from "./b";
import { B } from "./b";
```

----------------------------------------

TITLE: Implementing Try-Catch with Complete Error Handling in TypeScript
DESCRIPTION: This function uses a try-catch block with conditional return and error throw, properly handling all code paths and returning a value in all cases.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reachabilityChecks5.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
function f7(x): number {
    try {
        if (x) {
            return 1;
        }
        else {
            throw new Error();
        }
    }
    catch (e) {
        return 1;
    }
}
```

----------------------------------------

TITLE: Declaring Mixed Type Variables (JS/TS)
DESCRIPTION: Declares variables `numberA2` (number), `nameA2` (string), `skillA2` (string), and `nameMA` (string), showing both the emitted JavaScript and the original TypeScript with type annotations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.sourcemap.txt#_snippet_8

LANGUAGE: JavaScript
CODE:
```
var numberA2, nameA2, skillA2, nameMA;
```

LANGUAGE: TypeScript
CODE:
```
let numberA2: number, nameA2: string, skillA2: string, nameMA: string;
```

----------------------------------------

TITLE: Defining Sizable Interface in TypeScript
DESCRIPTION: This snippet defines the Sizable interface that requires a size method returning a number. This interface can be used for classes that need size capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocImplements_interface_multiple.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface Sizable {
    size(): number;
};
```

----------------------------------------

TITLE: Defining a Generic Function with Constraints in TypeScript
DESCRIPTION: This snippet defines a generic function `foo` that accepts two type parameters, T and U, where U must extend T. It illustrates how TypeScript infers types and provides examples of valid and invalid usages of the function based on the argument types provided. The snippet highlights the types of arguments that can cause type errors, particularly in the context of type constraints.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCallWithConstraintsTypeArgumentInference2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Generic call with parameters of T and U, U extends T, no parameter of type U

function foo<T, U extends T>(t: T) {
    var u: U;
    return u;
}

var r = foo(1); // ok
var r2 = foo(null); // {}
var r3 = foo(new Object()); // {}
var r4 = foo<Date, Date>(1); // error
                             ~
!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'Date'.
var r5 = foo<Date, Date>(new Date()); // no error
```

----------------------------------------

TITLE: Declaring Constants with 'as const' in TypeScript
DESCRIPTION: The code snippet establishes various constants using 'as const' for precise type inference. It ensures immutable constant expressions by casting them with 'as const', which TypeScript recognizes when enforcing isolated declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedDeclarationErrorsExpressions.errors.txt#2025-04-21_snippet_6

LANGUAGE: TypeScript
CODE:
```
numberLetAsConst = 1 as const; \nbigIntLetAsConst = 1n as const; \nstringLetAsConst = "s" as const; \ntemplateLetOk1AsConst = `s` as const; \ntemplateLetOk2AsConst = `s${1} - ${"S"}` as const; \ntemplateLetOk3AsConst = `s${1} - ${"S"} - ${false}` as const; \ntemplateLetOk4AsConst = `s${1 + 1} - ${"S"} - ${!false}` as const;
```

----------------------------------------

TITLE: Button Class Implementation of SelectableControl - TypeScript
DESCRIPTION: Implements the 'SelectableControl' interface in the 'Button' class, providing the required 'select()' method. Demonstrates correct implementation needed by classes that extend 'SelectableControl'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inheritance1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class Button extends Control implements SelectableControl {
    select() { }
}
```

----------------------------------------

TITLE: Defining and Assigning Function Types in TypeScript
DESCRIPTION: This snippet defines interfaces and variables for different function types and demonstrates assignment compatibility between them. It shows both valid assignments and type errors for incompatible assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithCallSignatures.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface T {
    (x: number): void;
}
var t: T;
var a: { (x: number): void };

t = a;
a = t;

interface S {
    (x: number): string;
}
var s: S;
var a2: { (x: number): string };
t = s;
t = a2;
a = s;
a = a2;

t = <T>(x: T) => 1;
t = () => 1;
t = function (x: number) { return ''; }
a = <T>(x: T) => 1;
a = () => 1;
a = function (x: number) { return ''; }

interface S2 {
    (x: string): void;
}
var s2: S2;
var a3: { (x: string): void };
// these are errors
t = s2;
t = a3;
t = (x: string) => 1;
t = function (x: string) { return ''; }
a = s2;
a = a3;
a = (x: string) => 1;
a = function (x: string) { return ''; }
```

----------------------------------------

TITLE: Error in Accessing Constructor Parameter with 'this'
DESCRIPTION: This snippet showcases a TypeScript error where an attempt to assign the instance member 'a' with 'x' results in an error, highlighting that 'x' is not found, and suggests using 'this.x'. This indicates issues with variable scope and naming within class constructors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/initializerReferencingConstructorParameters.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
class D {
    a = x; // error
        ~
!!! error TS2663: Cannot find name 'x'. Did you mean the instance member 'this.x'?
    b: typeof x; // error
              ~
!!! error TS2844: Type of instance member variable 'b' cannot reference identifier 'x' declared in the constructor.
    constructor(public x) { }
}
```

----------------------------------------

TITLE: Defining a Default Function Export
DESCRIPTION: This snippet exports a function named Foo as the default export of the module. It's an example of one approach to define a default export, but it encounters errors when another default export is attempted in the same module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/multipleExportDefault1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export default function Foo (){
    ~~~
}
```

----------------------------------------

TITLE: TypeScript Example File
DESCRIPTION: This TypeScript code defines a variable, a class with a public property, and a function that returns an instance of the class. The code itself does not generate any errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcerootUrlSingleFileSpecifyOutputFile/node/sourcerootUrlSingleFileSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: Demonstrating 'arguments' object accessibility in various function types in TypeScript
DESCRIPTION: This code illustrates the difference between arrow functions and regular functions regarding access to the 'arguments' object. Arrow functions do not have their own 'arguments' object, resulting in TypeScript errors, while regular function expressions and declarations can access 'arguments' without issues.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emitArrowFunctionWhenUsingArguments01_ES6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var a = () => {
    var arg = arguments[0];  // error
}

var b = function () {
    var a = () => {
        var arg = arguments[0];  // error
    }
}

function baz() {
	() => {
		var arg = arguments[0];
	}
}

function foo(inputFunc: () => void) { }
foo(() => {
    var arg = arguments[0];  // error
});

function bar() {
    var arg = arguments[0];  // no error
}


() => {
	function foo() {
		var arg = arguments[0];  // no error
	}
}
```

----------------------------------------

TITLE: Implementing Red Color Subclass in TypeScript
DESCRIPTION: Red subclass extending Color class with overridden shade method using arrow function for hue retrieval
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClasses.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class Red extends Color {
    public shade() { 
        var getHue = () => { return this.hue(); };
        return getHue() + " red"; 
    }
}
```

----------------------------------------

TITLE: Importing ECMAScript Module in CommonJS Module - TypeScript
DESCRIPTION: This snippet shows an import statement that generates an error because a CommonJS module cannot use 'require' for an ECMAScript module import. It suggests using 'import("./module.mjs")' instead or converting the file to an ECMAScript module by changing its extension to '.mts' or creating a package.json with { "type": "module" }. The expected input is the path to the ECMAScript module, and the output will be the resolved module upon successful import.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesCJSResolvingToESM4_noPackageJson.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import {} from "./module.mjs";
                   ~~~~~~~~~~~~~~
```

----------------------------------------

TITLE: Demonstrating Let and Const in Various Loop Constructs in TypeScript
DESCRIPTION: This code snippet showcases the usage of let and const in different loop types (for-of, for-in, for, while, do-while) in TypeScript. It demonstrates variable capture in closures and arrow functions, as well as break and continue statements with labels. The snippet also highlights TypeScript's strict type checking for comparisons.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop7.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
//===let
l0:
for (let x of []) {
    (function() { return x});
    (() => x);
    if (x == 1) {
        break;
    }
    if (x == 1) {
        break l0;
    }
    if (x == 2) {
        continue;
    }
    if (x == 2) {
        continue l0;
    }
}

// ... (similar patterns repeated for other loop types and const)

//===const
l0_c:
for (const x of []) {
    (function() { return x});
    (() => x);
    if (x == 1) {
        break;
    }
    if (x == 1) {
        break l0_c;
    }
    if (x == 2) {
        continue;
    }
    if (x == 2) {
        continue l0_c;
    }
}

// ... (similar patterns repeated for other loop types with const)
```

----------------------------------------

TITLE: Defining Public Classes and Inheritance in TypeScript
DESCRIPTION: This section defines a public class `publicClass` and a private class `privateClass` in the global scope. It then demonstrates class inheritance, including extending a public class and a private class. The goal is to highlight potential errors related to extending private classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privacyClassExtendsClauseDeclFile.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export class publicClass {
    private f1() {
    }
}

class privateClass {
}

class privateClassExtendingPublicClass extends publicClass {
}
class privateClassExtendingPrivateClassInModule extends privateClass {
}
export class publicClassExtendingPublicClass extends publicClass {
}
export class publicClassExtendingPrivateClass extends privateClass { // Should error
}

class privateClassExtendingFromPrivateModuleClass extends privateModule.publicClassInPrivateModule {
}
export class publicClassExtendingFromPrivateModuleClass extends privateModule.publicClassInPrivateModule { // Should error
}
```

----------------------------------------

TITLE: Incorrect Prop Type Assignment: Combined Object
DESCRIPTION: This example combines properties from different objects and attempts to pass them to the `OverWriteAttr` component. It results in a type error because the combined properties do not conform to the `Prop` interface, specifically the `y` property which is of boolean type `true` instead of `false` as defined in the Prop interface.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadAttributesResolution12.errors.txt#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
let x2 = <OverWriteAttr {...anyobj} x={3} />
    let x3 = <OverWriteAttr overwrite="hi" {...obj1} {...{y: true}} />
              ~~~~~~~~~~~~~
!!! error TS2322: Type '{ y: true; x: 2; overwrite: string; }' is not assignable to type 'Prop'.
!!! error TS2322:   Types of property 'y' are incompatible.
!!! error TS2322:     Type 'true' is not assignable to type 'false'.
```

----------------------------------------

TITLE: Property Access Function Implementation in TypeScript
DESCRIPTION: Generic functions for safely getting and setting properties on objects using keyof type constraints. Includes type-safe property access and assignment operations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccessErrors.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function getProperty<T, K extends keyof T>(obj: T, key: K) {
    return obj[key];
}

function setProperty<T, K extends keyof T>(obj: T, key: K, value: T[K]) {
    obj[key] = value;
}
```

----------------------------------------

TITLE: Mixed Type and Regular Imports with Assertions - TypeScript
DESCRIPTION: This snippet shows how to import both types and regular interfaces using import assertions in TypeScript. The correct resolution mode 'require' is used. Dependencies include definitions in 'pkg'. Inputs are various interfaces from the module, and outputs are TypeScript types and interfaces with import assertions applied.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportModeDeclarationEmitErrors1(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import {type RequireInterface as Req, RequireInterface as Req2} from "pkg" assert { "resolution-mode": "require" };
```

----------------------------------------

TITLE: Defining Overloaded Methods in TypeScript
DESCRIPTION: This snippet declares an interface I that includes overloaded methods for handling different types of parameters. Classes A, B, and C showcase inheritance, where B extends A and C extends B. The overloaded methods include various signatures for functions f, g, and h, accepting different types and numbers of arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overload1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module O {
    export class A {
        
    }

    export class B extends A {
    }

    export class C extends B {
        
    }

    export interface I {
        f(s:string):number;
        f(n:number):string;
        g(n1:number,n2:number):number;
        g(n:number):string;
        g(a:A):C;
        g(c:C):string;
        h(s1:string,s2:number):string;
        h(s1:number,s2:string):number;
    }
}

declare var x:O.I;

var e:string=x.g(new O.A()); // matches overload but bad assignment
var y:string=x.f(3); // good
y=x.f("nope"); // can't assign number to string
var z:string=x.g(x.g(3,3)); // good
z=x.g(2,2,2); // no match
z=x.g(); // no match
z=x.g(new O.B()); // ambiguous (up and down conversion)
z=x.h(2,2); // no match
z=x.h("hello",0); // good

var v=x.g;
```

----------------------------------------

TITLE: Defining Props Interface in TypeScript
DESCRIPTION: This snippet defines an interface 'Prop' for the component 'Comp'. It specifies that 'children' of type 'Button' is a required property along with 'a' and 'b'. This is essential for type-checking and ensuring that the component receives all necessary properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Prop {
    a: number,
    b: string,
    children: Button;
}
```

----------------------------------------

TITLE: Using and Assigning Class Instances with Inheritance
DESCRIPTION: Demonstrates creating and using instances of base and derived classes, including method calls and assignment from derived to base class variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserAstSpans1.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
var c2_i = new c2(10);
var c3_i = new c3();
c2_i.c2_f1();
c2_i.c2_nc_f1();
c2_i.f1();
c2_i.nc_f1();
c3_i.c2_f1();
c3_i.c2_nc_f1();
c3_i.f1();
c3_i.nc_f1();
// assign
c2_i = c3_i;
c2_i.c2_f1();
c2_i.c2_nc_f1();
c2_i.f1();
c2_i.nc_f1();
class c4 extends c2 {
}
var c4_i = new c4(10);
```

----------------------------------------

TITLE: Valid Generic Interface Extensions
DESCRIPTION: Demonstrates valid interface extensions that maintain type compatibility and correct parameter counts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithGenericCallSignaturesWithOptionalParameters.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
interface I1 extends Base2 {
    a: <T>() => T; // ok, same number of required params
}

interface I5 extends Base2 {
    a2: <T>(x?: T) => T; // ok, identical
}

interface I9 extends Base2 {
    a3: <T>(x: T) => T; // ok, identical, same number of required params
}
```

----------------------------------------

TITLE: Package Configuration for TypeScript Project
DESCRIPTION: This code snippet defines the package configuration for the TypeScript project. It indicates the package name, privacy status, and module type as 'module', which is essential for proper module resolution in ES module environments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSpecifierGenerationConditions(module=nodenext).errors.txt#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module",
    "exports": "./index.js"
}
```

----------------------------------------

TITLE: Accessing Non-Existent Property with Inline Type Annotation (Function Expression)
DESCRIPTION: Here, the 'this' type is explicitly defined as `import('./types').Foo` using an inline type annotation on a function expression. The code still attempts to access the undefined 'test' property on 'this', leading to a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocThisType.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
/** @type {(this: import('./types').Foo) => void} */
export const f3 = function() {
    this.test();
         ~~~~
!!! error TS2339: Property 'test' does not exist on type 'Foo'.
}
```

----------------------------------------

TITLE: Complex Filtering with Nested Objects in TypeScript
DESCRIPTION: Shows issues with filtering and mapping nested object structures, where TypeScript cannot correctly infer that undefined values have been filtered out in chained operations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypePredicates.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// https://github.com/microsoft/TypeScript/issues/16069#issuecomment-1327449914
// This doesn't work because the false condition prevents type guard inference.
// Breaking up the filters does work.
type MyObj = { data?: string };
type MyArray = { list?: MyObj[] }[];
const myArray: MyArray = [];

const result = myArray
  .map((arr) => arr.list)
  .filter((arr) => arr && arr.length)
  .map((arr) => arr
    .filter((obj) => obj && obj.data)
    .map(obj => JSON.parse(obj.data))
  );

const result2 = myArray
  .map((arr) => arr.list)
  .filter((arr) => !!arr)
  .filter(arr => arr.length)
  .map((arr) => arr
    .filter((obj) => obj)
    // inferring a guard here would require https://github.com/microsoft/TypeScript/issues/42384
    .filter(obj => !!obj.data)
    .map(obj => JSON.parse(obj.data))
  );
```

----------------------------------------

TITLE: TypeScript Logical Assignment Functions with Array Operations
DESCRIPTION: Three functions demonstrating different logical assignment operators with array manipulation. The first two functions use OR (||=) and nullish coalescing (??=) assignments, while the third function shows an error case with AND (&&=) assignment due to possible undefined values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment6(target=es2020).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo1(results: number[] | undefined, results1: number[] | undefined) {
    (results ||= (results1 ||= [])).push(100);
}

function foo2(results: number[] | undefined, results1: number[] | undefined) {
    (results ??= (results1 ??= [])).push(100);
}

function foo3(results: number[] | undefined, results1: number[] | undefined) {
    (results &&= (results1 &&= [])).push(100);
}
```

----------------------------------------

TITLE: For Loop with Destructuring in TypeScript
DESCRIPTION: Implementation of a for loop using object destructuring to extract values from a multiRobot object. The code includes nested destructuring of name and skills properties, with primary and secondary skill assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_23

LANGUAGE: typescript
CODE:
```
for ({ name: nameA, skills: { primary: primaryA, secondary: secondaryA } } = multiRobot, i = 0; i < 1; i++) {
    console.log(primaryA);
}
```

LANGUAGE: typescript
CODE:
```
for (_k = getMultiRobot(), nameA = _k.name, _l = _k.skills, primaryA = _l.primary, secondaryA = _l.secondary, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Defining TypeScript Module with Various Declarations
DESCRIPTION: This snippet defines a TypeScript module with variable, function, class, interface, and nested module declarations. It includes both regular and export declarations, as well as ambient declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/giant.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
module M {
    var V;
    function F() { };
    class C { };
    interface I { };
    module M { };
    export var eV;
    export function eF() { };
    export class eC { };
    export interface eI { };
    export module eM { };
    export declare var eaV;
    export declare function eaF() { };
    export declare class eaC { };
    export declare module eaM { };
}
```

----------------------------------------

TITLE: Invalid Module Import/Export with ES Modules Target
DESCRIPTION: Example showing incorrect usage of CommonJS-style 'import = require()' and 'export =' syntax when targeting ECMAScript modules. The code generates compilation errors suggesting the proper ES module syntax alternatives.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esnextmodulekindWithES5Target10.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import i = require("mod"); // Error;


namespace N {
}
export = N; // Error
```

----------------------------------------

TITLE: Referencing 'arguments' object in an arrow function (TypeScript error)
DESCRIPTION: This code snippet demonstrates an invalid attempt to reference the 'arguments' object from within an arrow function. In ES5, arrow functions do not have their own 'arguments' object, causing TypeScript to generate error TS2496.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emitArrowFunctionWhenUsingArguments02.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var a = () => arguments;
```

----------------------------------------

TITLE: Demonstrating Module Variable Visibility in TypeScript
DESCRIPTION: This code demonstrates TypeScript's module visibility rules. Module A exports variable x which can be accessed externally, but variable y is not exported and remains private to the module, causing a compilation error when accessed from outside.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ModuleWithExportedAndNonExportedVariables.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module A {
    export var x = 'hello world'
    var y = 12;
}


var x: string;
var x = A.x;

// Error, since y is not exported
var y = A.y;
```

----------------------------------------

TITLE: Utility Type T to Pick Property x
DESCRIPTION: Defines a utility type T that picks the property x from any given type X that extends an object with an x property. It serves to create simplified representations of complex types, providing focus on the shared property x.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericIndexedAccessVarianceComparisonResultCorrect.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
type T<X extends { x: any }> = Pick<X, 'x'>;
```

----------------------------------------

TITLE: Variable Declaration and Type Assignment with object Types in TypeScript
DESCRIPTION: Demonstrates TypeScript's type checking for object types when assigning null, undefined, or union types. Shows various error cases when trying to assign null/undefined to object type variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nonPrimitiveStrictNull.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var a: object
declare var b: object | null
declare var c: object | undefined
declare var d: object | null | undefined
var e: object | null
a.toString; // error
a = undefined; // error
a = null; // error
a = b; // error
a = c; // error
a = d; // error

e = a; // ok
a = e; // ok
```

----------------------------------------

TITLE: Class Declaration with this Type References
DESCRIPTION: Example of a TypeScript class demonstrating various uses of 'this' type in property and method declarations, showing both valid and invalid usage patterns. Includes error cases where 'this' type is used in static contexts or without proper type annotations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationFiles.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C1 {
    x: this;
    f(x: this): this { return undefined; }
    constructor(x: this) { }
}

class C2 {
    [x: string]: this;
}

interface Foo<T> {
    x: T;
    y: this;
}

class C3 {
    a: this[];
    b: [this, this];
    c: this | Date;
    d: this & Date;
    e: (((this)));
    f: (x: this) => this;
    g: new (x: this) => this;
    h: Foo<this>;
    i: Foo<this | (() => this)>;
    j: (x: any) => x is this;
}

class C4 {
    x1 = { a: this };
    x2 = [this];
    x3 = [{ a: this }];
    x4 = () => this;
    f1() {
        return { a: this };
    }
    f2() {
        return [this];
    }
    f3() {
        return [{ a: this }];
    }
    f4() {
        return () => this;
    }
}
```

----------------------------------------

TITLE: Generic Class Inheritance with Constructor Overloading in TypeScript
DESCRIPTION: This TypeScript snippet defines a generic base class 'Base2<T>' and a generic derived class 'D<T extends Date>'. The base class constructor allows one to three arguments, determining the properties of the class. The derived class 'D' inherits this constructor behavior but expects its arguments to be Dates. Instantiation of the 'D' class without arguments leads to an error, similar to the non-generic case. This demonstrates constructor overloading and the importance of correct instantiation per TypeScript's rules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassWithoutExplicitConstructor2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class Base2<T> {
    a: T;
    constructor(x: T, y?: T, z?: T);
    constructor(x: T, y?: T);
    constructor(x: T) { this.a = x; }
}

class D<T extends Date> extends Base2<T> {
    x = 2
    y: T = null;
}

var d = new D(); // error
        ~~~~~~~
!!! error TS2554: Expected 1-3 arguments, but got 0.
!!! related TS6210 derivedClassWithoutExplicitConstructor2.ts:20:17: An argument for 'x' was not provided.
var d2 = new D(new Date()); // ok
var d3 = new D(new Date(), new Date());
var d4 = new D(new Date(), new Date(), new Date());
```

----------------------------------------

TITLE: Configuring Package as ECMAScript Module
DESCRIPTION: This package.json snippet sets the project type to 'module', indicating that the package uses ECMAScript module format by default.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node18).errors.txt#2025-04-21_snippet_15

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Creating FetchUser Component in React with TypeScript
DESCRIPTION: This component attempts to fetch user data (although the fetching logic is not implemented in the provided code) and render its children. It receives a function as `children`, which is expected to render the user data.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty4.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class FetchUser extends React.Component<IFetchUserProps, any> {
    render() {
        return this.state
            ? this.props.children(this.state.result)
            : null;
    }
}
```

----------------------------------------

TITLE: Property Access on Objects with No Index Signatures
DESCRIPTION: Shows property access behaviors when accessing properties on objects that don't have index signatures. Demonstrates how TypeScript handles different types of access when there's no index signature defined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertyAccess.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
// Bracket notation property access using numeric value on type with no index signatures
var qq = noIndex[123];
var qq: any;

// Bracket notation property access using string value on type with no index signatures
var rr = noIndex['zzzz'];
var rr: any;

// Bracket notation property access using enum value on type with no index signatures
var ss = noIndex[Compass.South];
var ss: any;

// Bracket notation property access using value of type 'any' on type with no index signatures
var tt = noIndex[<any>null];
var tt: any;

// Bracket notation property access using values of other types on type with no index signatures
var uu = noIndex[someObject]; // Error
```

----------------------------------------

TITLE: TypeScript Enum Type Operations
DESCRIPTION: Demonstrates various ways to use the typeof operator with enum types, including basic enum declarations, type checking, and operator chaining. Shows both valid and invalid usage patterns that can lead to compiler errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeofOperatorWithEnumType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// typeof  operator on enum type

enum ENUM { };
enum ENUM1 { A, B, "" };

// enum type var
var ResultIsString1 = typeof ENUM;
var ResultIsString2 = typeof ENUM1;

// enum type expressions
var ResultIsString3 = typeof ENUM1["A"];
var ResultIsString4 = typeof (ENUM[0] + ENUM1["B"]);

// multiple typeof  operators
var ResultIsString5 = typeof typeof ENUM;
var ResultIsString6 = typeof typeof typeof (ENUM[0] + ENUM1.B);

// miss assignment operators
typeof ENUM;
typeof ENUM1;
typeof ENUM1["B"];
typeof ENUM, ENUM1;

// use typeof in type query
enum z { };
z: typeof ENUM;
z: typeof ENUM1;
```

----------------------------------------

TITLE: Complex Destructuring Assignment in TypeScript For Loop
DESCRIPTION: This snippet demonstrates a for loop with a complex destructuring assignment. It extracts 'primary' and 'secondary' skills from an object, assigns default values, and iterates once. The destructuring includes nested objects and uses the nullish coalescing operator.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_13

LANGUAGE: TypeScript
CODE:
```
for (var _m = { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }.skills, _o = _m === void 0 ? { primary: "none", secondary: "none" } : _m, _p = _o.primary, primaryA = _p === void 0 ? "primary" : _p, _q = _o.secondary, secondaryA = _q === void 0 ? "secondary" : _q, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Iterating and Destructuring Robot Object
DESCRIPTION: This snippet demonstrates a for loop that iterates once, destructuring a `Robot` object in each iteration. It uses default values in case properties are missing. The `console.log` prints the `nameA` property to the console.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
"for (let {\n     name: nameA = \"noName\" } = <Robot>\n              { \n                name\n                    : \n                      \"trimmer\"\n                               ,\n                                 skill\n                                      :\n                                        \"trimming\"\n                                                   }\n                                                    \n                                                         \n                                                           nameA\n                                                                 =\n                                                                                   \"noName\"\n                                                                                           \n                                                                                                 } = <Robot>{ name: \"trimmer\", skill: \"trimming\" }, \n                                                                                                  i\n                                                                                                    =\n                                                                                                      0\n                                                                                                       ;\n                                                                                                         i\n                                                                                                           <\n                                                                                                             1\n                                                                                                              ;\n                                                                                                                i\n                                                                                                                 ++\n                                                                                                                   ) {\n    console.log(nameA);\n}"
```

----------------------------------------

TITLE: Constructor Property Assignment
DESCRIPTION: Demonstrates property initialization through constructor assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictPropertyInitialization.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
class C5 {
    a: number;
    #b: number;
    constructor() {
        this.a = 0;
        this.#b = 0;
    }
}
```

----------------------------------------

TITLE: Importing from Undefined Module in lib.ts
DESCRIPTION: TypeScript code attempting to import an 'x' export from a non-existent 'foo' module. Generates TS2792 error suggesting to set moduleResolution to 'nodenext' or configure path aliases.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/cachedModuleResolution9.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import {x} from "foo";
```

----------------------------------------

TITLE: Class Definition and Module Structure in TypeScript
DESCRIPTION: Implementation of nested TypeScript modules containing class definitions, function implementations and type references. Shows patterns for referencing types across module boundaries and handling exported/non-exported classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeResolution.sourcemap.txt#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
return ClassB;
}
());
SubSubModule1.ClassB = ClassB;

var NonExportedClassQ = /** @class */ (function () {
    function NonExportedClassQ() {
        function QQ() {
            /* Sampling of stuff from AisIn1_1_1 */
            var a4;
            a4.AisIn1_1_1();
            var c1;
            c1.AisIn1_2_2();
            var d1;
        }
```

----------------------------------------

TITLE: Demonstrating TypeScript Implicit Type Errors
DESCRIPTION: This code snippet shows examples of TypeScript implicit type error cases (variables that trigger errors) and valid type declarations that don't trigger errors. It illustrates how TypeScript handles null, undefined, and array initialization when types aren't explicitly specified.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implicitAnyWidenToAny.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// these should be errors
var x = null;                        // error at "x"
var x1 = undefined;		             // error at "x1"
var widenArray = [null, undefined];  // error at "widenArray"
var emptyArray = [];

// these should not be error
class AnimalObj {
      x:any;
}
var foo = 5;
var bar = "Hello World";
var foo1: any = null;
var foo2: any = undefined;
var temp: number = 5;
var c: AnimalObj = { x: null }; 
var array1 = ["Bob",2];
var array2: any[] = [];
var array3: any[] = [null, undefined];
var array4: number[] = [null, undefined];
var array5 = <any[]>[null, undefined];

var objLit: { new (n: number): any; };
function anyReturnFunc(): any { }
var obj0 = new objLit(1);
var obj1 = anyReturnFunc();
```

----------------------------------------

TITLE: Defining Async Functions in TypeScript
DESCRIPTION: Demonstrates multiple ways to define asynchronous functions in TypeScript using the async keyword, varying by return type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncAwaitIsolatedModules_es5.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
async function f0() { }
async function f1(): Promise<void> { }
async function f3(): MyPromise<void> { }

let f4 = async function() { }
let f5 = async function(): Promise<void> { }
let f6 = async function(): MyPromise<void> { }

let f7 = async () => { };
let f8 = async (): Promise<void> => { };
let f9 = async (): MyPromise<void> => { };
let f10 = async () => p;
let f11 = async () => mp;
let f12 = async (): Promise<number> => mp;
let f13 = async (): MyPromise<number> => p;
```

----------------------------------------

TITLE: Implementing HOC with React and TypeScript
DESCRIPTION: This code snippet illustrates the creation of a Higher-Order Component (HOC) using TypeScript generics in a React environment. It imports React and defines a type 'Tags' that allows either 'span' or 'div'. The HOC called 'Hoc' takes a TagElement parameter constrained to these tag types and returns a functional component. TypeScript throws an error due to type incompatibility between '{}' and expected detailed HTML properties. The error highlights the challenge of managing HTML attributes using TypeScript in a strongly typed environment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxCallElaborationCheckNoCrash1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
    /// <reference path=\"/.lib/react16.d.ts\" />\n    \n    import * as React from \"react\";\n    \n    type Tags = \"span\" | \"div\";\n    \n    export const Hoc = <Tag extends Tags>(\n       TagElement: Tag,\n    ): React.SFC => {\n       const Component = () => <TagElement />;\n                                ~~~~~~~~~~\n!!! error TS2322: Type '{}' is not assignable to type 'LibraryManagedAttributes<Tag, DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>>'.\n       return Component;\n    };\n
```

----------------------------------------

TITLE: Iterating with Destructured Array Elements in TypeScript
DESCRIPTION: This snippet demonstrates iterating over an array using destructuring in a TypeScript environment. It highlights the use of destructuring to assign default values within a loop. Multi-element arrays can be handled by sequentially destructuring each element while applying default fallbacks.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_9

LANGUAGE: TypeScript
CODE:
```
for (var _41 = 0, _42 = [robotA, robotB]; _41 < _42.length; _41++) {
    _e = _42[_41], _f = _e[1], nameA = _f === void 0 ? "noName" : _f;
}
```

----------------------------------------

TITLE: Importing Module 'inner/other' in TypeScript
DESCRIPTION: This snippet attempts to import the 'Thing' module from 'inner/other'. It prompts TypeScript to raise errors due to a missing module declaration and a requirement for type annotation for variable 'a'. It demonstrates the challenges of using dynamic imports with type inference in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSourceTs(module=nodenext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// esm format file
import { Thing } from "inner/other";
                          ~~~~~~~~~~~~~
!!! error TS2307: Cannot find module 'inner/other' or its corresponding type declarations.
export const a = (await import("inner")).x();
                 ~
!!! error TS2742: The inferred type of 'a' cannot be named without a reference to './node_modules/inner/other.js'. This is likely not portable. A type annotation is necessary.
import {a as a2} from "package";
```

----------------------------------------

TITLE: Correct Type-Only Import Syntax with verbatimModuleSyntax
DESCRIPTION: The correct way to import a type in a CommonJS module when verbatimModuleSyntax is enabled. This uses the 'import type' syntax which doesn't produce any errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedModulesSketchyAliasLocalMerge(isolatedmodules=false,verbatimmodulesyntax=true).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import type { FC } from "./types";
let FC: FC | null = null;
```

----------------------------------------

TITLE: Defining Exported Interfaces in Import Module
DESCRIPTION: This snippet provides the definition of an 'ImportInterface' in an import module to be exported. Required by TypeScript imports resolving through 'import' mode. No inputs or outputs are involved, only interface definition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportModeDeclarationEmit1(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
export interface ImportInterface {}
```

----------------------------------------

TITLE: Defining Interface and Function for Object Literal Type Checking in TypeScript
DESCRIPTION: This snippet defines an interface I2 with a string value and a function doStuff, and a function f2 that accepts an argument of type I2. It demonstrates TypeScript's strict type checking for object literals passed as function arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectLiteralFunctionArgContextualTyping2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface I2 {
    value: string;
    doStuff: (t: string) => string;
}

function f2(args: I2) { }
```

----------------------------------------

TITLE: Error: Type Annotations Used in JavaScript File - TypeScript
DESCRIPTION: This snippet indicates an error generated when type annotations are present in a JavaScript file, which is not allowed in JavaScript syntax. It serves as a reminder that such annotations can only be utilized in TypeScript files, thus enforcing proper code compliance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationTypeOfParameter.errors.txt#2025-04-21_snippet_1

LANGUAGE: plaintext
CODE:
```
a.js(1,15): error TS8010: Type annotations can only be used in TypeScript files.
```

----------------------------------------

TITLE: Testing let variable capture with multiple declarations in for loops in TypeScript
DESCRIPTION: Demonstrates how multiple let variables are captured in for loops. The function declares two let variables (x and y) in the loop initialization and creates closures that reference both.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop5.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
function foo5(x) {
    for (let x = 0, y = 1; x < 1; ++x) {
        var v = x;
        (function() { return x + y + v });
        (() => x + y + v);
        if (x == 1) {
            return;
        }
    }
    
    use(v);
}
```

----------------------------------------

TITLE: Implementing Async Function with Incorrect Return Type in TypeScript
DESCRIPTION: This snippet shows a class 'Test' with an async method 'example' that incorrectly specifies 'Task<T>' as its return type instead of 'Promise<T>'. This causes a TypeScript compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncImportedPromise_es6.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { Task } from "./task";
class Test {
    async example<T>(): Task<T> { return; }
}
```

----------------------------------------

TITLE: Demonstrating Invalid Spread Operator Usage in TypeScript
DESCRIPTION: This code snippet illustrates various scenarios where the spread operator is used incorrectly in TypeScript, resulting in 'TS2698: Spread types may only be created from object types' errors. It covers spreading of different types including generics, unions, intersections, primitives, and enums.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/spreadInvalidArgumentType.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
enum E { v1, v2 };

function f<T extends { b: string }>(p1: T, p2: T[]) {
    var t: T;

    var i: T["b"];
    var k: keyof T;

    var mapped_generic: {[P in keyof T]: T[P]};
    var mapped: {[P in "b"]: T[P]};

    var union_generic: T | { a: number };
    var union_primitive: { a: number } | number;

    var intersection_generic: T & { a: number };
    var intersection_primitive: { a: number } | string;

    var num: number;
    var str: number;
    var literal_string: "string";
    var literal_number: 42;

    var u: undefined;
    var n: null;
    var a: any;


    var e: E;

    var o1 = { ...p1 };  // OK, generic type paramterre
    var o2 = { ...p2 };  // OK
    var o3 = { ...t };   // OK, generic type paramter
    var o4 = { ...i };   // Error, index access
    var o5 = { ...k };   // Error, index
    var o6 = { ...mapped_generic }; // OK, generic mapped object type
    var o7 = { ...mapped };  // OK, non-generic mapped type

    var o8 = { ...union_generic };  // OK, union with generic type parameter
    var o9 = { ...union_primitive };  // Error, union with generic type parameter

    var o10 = { ...intersection_generic };  // OK, intersection with generic type parameter
    var o11 = { ...intersection_primitive };  // Error, intersection with generic type parameter

    var o12 = { ...num };  // Error
    var o13 = { ...str };  // Error

    var o14 = { ...u };  // error, undefined-only not allowed
    var o15 = { ...n };  // error, null-only not allowed

    var o16 = { ...a };  // OK

    var o17 = { ...literal_string };  // Error
    var o18 = { ...literal_number };  // Error

    var o19 = { ...e };  // Error, enum
}
```

----------------------------------------

TITLE: Defining Class Methods with Generics in TypeScript
DESCRIPTION: This snippet defines a method within a class that utilizes generics. It showcases method creation using generic types, where the method returns values of a specified type defined in its parameterization. Dependencies are inferred from class structures which include generic type parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_28

LANGUAGE: TypeScript
CODE:
```
olitor(): rionegrensis.veraecrucis<lavali.xanthognathus, quasiater.bobrinskoi> { var x: rionegrensis.veraecrucis<lavali.xanthognathus, quasiater.bobrinskoi>; () => { var y = this; }; return x; }
```

----------------------------------------

TITLE: Defining Class with Incorrectly Typed Property in TypeScript
DESCRIPTION: This snippet shows a TypeScript class definition where a property is initialized with an empty object, resulting in a type error. The 'bar' property is expected to have an 'id' of type number, but it's missing in the initialization.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping5.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class foo { public bar:{id:number;} = { }; }
```

----------------------------------------

TITLE: Assigning null to undefined in TypeScript
DESCRIPTION: Example showing two different approaches to assign null to undefined in TypeScript. The first approach attempts to assign null directly to undefined, which produces error TS2539 because undefined is not a variable. The second approach declares a variable with type typeof undefined, which accepts a null value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nullAssignedToUndefined.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var x = undefined = null; // error
var y: typeof undefined = null; // ok, widened
```

----------------------------------------

TITLE: Defining Classes and a Generic Function in TypeScript
DESCRIPTION: This snippet defines two classes `C` and `D`, and a generic function `foo` that accepts parameters constrained by type relationships. The function demonstrates how TypeScript checks for assignability of types and the impact of required properties on function arguments. It highlights type errors when trying to pass incompatible types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCallWithObjectTypeArgsAndConstraints4.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Generic call with constraints infering type parameter from object member properties

class C {
    x: string;
}

class D {
    x: string;
    y: string;
}

function foo<T, U extends T>(t: T, t2: U) {
    return (x: T) => t2;
}

var c: C;
var d: D;
var r = foo(c, d);
var r2 = foo(d, c); // error because C does not extend D
                    ~
!!! error TS2345: Argument of type 'C' is not assignable to parameter of type 'D'.
!!! error TS2345:   Property 'y' is missing in type 'C' but required in type 'D'.
!!! related TS2728 genericCallWithObjectTypeArgsAndConstraints4.ts:9:5: 'y' is declared here.
var r3 = foo(c, { x: '', foo: c });
var r4 = foo(null, null);
var r5 = foo({}, null);
var r6 = foo(null, {});
var r7 = foo({}, {});
var r8 = foo(() => { }, () => { });
var r9 = foo(() => { }, () => 1);

function other<T, U extends T>() {
    var r4 = foo(c, d);
    var r5 = foo<T, U>(c, d); // error
                           ~
!!! error TS2345: Argument of type 'C' is not assignable to parameter of type 'T'.
!!! error TS2345:   'T' could be instantiated with an arbitrary type which could be unrelated to 'C'.
```

----------------------------------------

TITLE: Implementing Generic Function with Constrained Type Parameters in TypeScript
DESCRIPTION: This code defines interfaces and a generic function with constrained type parameters, illustrating how TypeScript handles type constraints. The error occurs because 'MyObjA' doesn't implement the required 'ObjA' interface properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/incorrectNumberOfTypeArgumentsDuringErrorReporting.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface ObjA {
  y?:string,
}

interface ObjB {[key:string]:any}

interface Opts<A, B> {a:A, b:B}

const fn = <
  A extends ObjA,
  B extends ObjB = ObjB
>(opts:Opts<A, B>):string => 'Z'

interface MyObjA {
  x:string,
}

fn<MyObjA>({
  a: {x: 'X', y: 'Y'},
  b: {},
})
```

----------------------------------------

TITLE: TypeScript Await in ESM Module
DESCRIPTION: This snippet shows the usage of `await` at the top level in an ESM module (`index.js`). This is valid syntax in ES modules. The code defines a variable `x` using `await` and includes an export statement and a `for await` loop.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsTopLevelAwait(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// esm format file
const x = await 1;
export {x};
for await (const y of []) {}
```

----------------------------------------

TITLE: Complex Object Destructuring Function Declaration
DESCRIPTION: Shows complex object destructuring with nested objects and arrays in function parameters
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration1ES5iterable.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function a3({j, k, l: {m, n}, q: [a, b, c]}: { j: number, k: string, l: { m: boolean, n: number }, q: (number|string)[] }) { };
```

----------------------------------------

TITLE: Importing ESM modules in CommonJS format TypeScript (.cts) file
DESCRIPTION: A CommonJS module format file that generates an error when attempting to import an ECMAScript module using static imports, which would produce 'require' calls at runtime.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExports(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// cjs format file
import * as cjsi from "inner/cjs/index";
import * as mjsi from "inner/mjs/index";
import * as typei from "inner/js/index";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: TypeScript Abstract Class Inheritance Example
DESCRIPTION: Demonstrates various class inheritance scenarios with abstract classes in TypeScript. Shows correct and incorrect implementations of abstract class inheritance, resulting in a compilation error when abstract methods are not implemented.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classAbstractExtends.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
    foo() {}
}

abstract class B extends A {
    abstract bar();
}

class C extends B { }

abstract class D extends B {}

class E extends B {
    bar() {}
}
```

----------------------------------------

TITLE: Defining Interfaces and Nested Modules in TypeScript
DESCRIPTION: This snippet defines a module 'A' with an interface 'Point' and a nested module 'inA' containing an extended interface 'Point3D'. It demonstrates interface extension and nested module structure in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importStatementsInterfaces.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
module A {
    export interface Point {
        x: number;
        y: number;
    }

    export module inA {
        export interface Point3D extends Point {
            z: number;
        }
    }
}
```

----------------------------------------

TITLE: Iterating Over Multi-Robot Data Structure - TypeScript/JavaScript
DESCRIPTION: Code showing iteration over a data structure containing robot information with destructuring of names and skills. Includes both the original TypeScript code and its compiled JavaScript output with detailed source mapping.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_21

LANGUAGE: typescript
CODE:
```
for (let [nameMA, [primarySkillA, secondarySkillA]] of multiRobots) {
    console.log(nameMA);
}
```

LANGUAGE: javascript
CODE:
```
for (var _15 = 0, _16 = getMultiRobots(); _15 < _16.length; _15++) {
    var _17 = _16[_15], nameMA = _17[0], _18 = _17[1], primarySkillA = _18[0], secondarySkillA = _18[1];
    console.log(nameMA);
}
```

----------------------------------------

TITLE: For-of Loop with Array Destructuring - Robot Array
DESCRIPTION: Source map entries for a for-of loop that destructures an array containing robotA and robotB to extract nameA values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
for (var _e = 0, _f = [robotA, robotB]; _e < _f.length; _e++) {
    var _g = _f[_e], nameA = _g[1];
}
```

----------------------------------------

TITLE: TypeScript Function Expression with Type Binding and Private Access Error
DESCRIPTION: This is a function expression assigned to `bindCopy2` and typed as `BindingFunction = (this: Foo) => void`. Similar to `bindCopy`, it attempts to access the private member `privat` of `Foo`, leading to the same TypeScript error TS2341.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/protectedAccessThroughContextualThis.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
type BindingFunction = (this: Foo) => void;

const bindCopy2: BindingFunction = function () {
  this.copy = this.protec; // Should OK
  console.log(this.privat); // Should error
                       ~~~~~~
!!! error TS2341: Property 'privat' is private and only accessible within class 'Foo'.
}
```

----------------------------------------

TITLE: Derived Class with Comments around Super - TypeScript
DESCRIPTION: This code demonstrates a scenario with comments around the `super()` call.  Although there are comments before and after, the call to `super()` occurs after accessing `this.x`. This will not result in a TS17009 error in this example.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassSuperStatementPosition.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
class DerivedComments extends Object {
        x: any;
        constructor() {
            // c1
            console.log(); // c2
            // c3
            super(); // c4
            // c5
            this.x = null; // c6
            // c7
        }
    }
```

----------------------------------------

TITLE: Conflicting var and const Declarations in TypeScript
DESCRIPTION: This code snippet demonstrates TypeScript errors that occur when attempting to declare a var variable in the same scope as a const declaration with the same name. It shows three different scenarios where this conflict arises.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constDeclarationShadowedByVarDeclaration.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Error as declaration of var would cause a write to the const value
var x = 0;
{
    const x = 0;

    var x = 0;
}


var y = 0;
{
    const y = 0;
    {
        var y = 0;
    }
}


{
  const z = 0;
  var z = 0
}
```

----------------------------------------

TITLE: Importing Module with Error in TypeScript
DESCRIPTION: This snippet attempts to import a default export and a namespace from './server'. However, it results in an error as server.ts doesn't have a default export. It also correctly uses the namespace import to create an instance of class 'a'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ImportDefaultBindingFollowedWithNamespaceBindingDts.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import defaultBinding, * as nameSpaceBinding  from "./server";
export var x = new nameSpaceBinding.a();
```

----------------------------------------

TITLE: TypeScript Class Access Control with Destructuring
DESCRIPTION: Example showing how TypeScript enforces access control rules when destructuring class members. Demonstrates valid and invalid access patterns for private and protected members both within the class, in derived classes, and in external contexts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateProtectedMembersAreNotAccessibleDestructuring.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class K {
    private priv;
    protected prot;
    private privateMethod() { }
    m() {
        let { priv: a, prot: b } = this; // ok
        let { priv, prot } = new K(); // ok
    }
}
class C extends K {
    m2() {
        let { priv: a } = this; // error
        let { prot: b } = this; // ok
    }
}
let k = new K();
let { priv } = k; // error
let { prot } = k; // error
let { privateMethod } = k; // error
let { priv: a, prot: b, privateMethod: pm } = k; // error
function f({ priv, prot, privateMethod }: K) {

}
```

----------------------------------------

TITLE: Defining Classes and Instances - TypeScript
DESCRIPTION: This snippet showcases the definition of a base class and derived classes in TypeScript, as well as different ways to create arrays containing instances of these classes. It demonstrates class inheritance and type assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base { private p; }
class Derived1 extends Base { private m; }
class Derived2 extends Base { private n; }
var b = new Base(), d1 = new Derived1(), d2 = new Derived2();
```

----------------------------------------

TITLE: Main Package.json for Module Resolution
DESCRIPTION: The main package.json file showcases export configurations for module resolution in a node environment, supporting different module types (CJS, ESM). It offers crucial definitions to guide module resolution for import and require statements based on environment compatibility.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesConditionalPackageExports(module=node16).errors.txt#2025-04-21_snippet_5

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module",
    "exports": {
        "./cjs": "./index.cjs",
        "./mjs": "./index.mjs",
        ".": "./index.js"
    }
}
```

----------------------------------------

TITLE: Defining a Function in TypeScript
DESCRIPTION: This code snippet declares a simple function 'f' and exports it. It's a type definition file that serves as an example of creating and exporting functions in TypeScript. This is relevant for modular programming and can be used alongside other TypeScript modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocReferenceGlobalTypeInCommonJs.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
declare function f(): string;
export = f;
```

----------------------------------------

TITLE: Variable Initialization and Try-Catch-Finally Block in JavaScript
DESCRIPTION: This snippet initializes a variable and executes arithmetic operations within a try-catch-finally block. The `try` section increases the variable `x`, the `catch` section decreases it in case of an error, and the `finally` section multiplies it. Errors are explicitly thrown and caught, illustrating standard error handling in JavaScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationTryCatchFinally.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
"var x = 10;\ntry {\n    x = x + 1;\n} catch (e) {\n    x = x - 1;\n} finally {\n    x = x * 10;\n}\ntry {\n    x = x + 1;\n    throw new Error();\n} catch (e) {\n    x = x - 1;\n} finally {\n    x = x * 10;\n}"
```

----------------------------------------

TITLE: Property Access Demonstration with Union Types
DESCRIPTION: Attempts to access 'member' property across different union type combinations, revealing TypeScript's type checking and accessibility restrictions
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionTypePropertyAccessibility.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
v1.member;
v2.member;
v3.member;
v4.member;
v5.member;
v6.member;
v7.member;
v8.member;
v9.member;
v10.member;
v11.member;
v12.member;
v13.member;
v14.member;
v15.member;
```

----------------------------------------

TITLE: Creating Nested Objects with Array Mapping in TypeScript
DESCRIPTION: Shows how to create objects with nested array properties using map. Demonstrates type inference for object properties in mapped arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferFromGenericFunctionReturnTypes3.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
interface Person {
  phoneNumbers: {
    __typename: 'PhoneNumber';
  }[];
}

function createPerson(): Person {
  return {
    phoneNumbers: [1].map(() => ({
      __typename: 'PhoneNumber'
    }))
  };
}
```

----------------------------------------

TITLE: Defining Overloaded Interfaces in TypeScript
DESCRIPTION: This snippet defines three interfaces (A, B, and C) with overloaded function signatures. Each interface declares two function overloads with different parameter and return types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/orderMattersForSignatureGroupIdentity.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface A {
    (x: { s: string }): string
    (x: { n: number }): number
}

interface B {
    (x: { s: string }): string
    (x: { n: number }): number
}

interface C {
    (x: { n: number }): number
    (x: { s: string }): string
}
```

----------------------------------------

TITLE: Using Intersection Types with Interfaces and Generics in TypeScript
DESCRIPTION: This snippet shows how intersection types can be used with interfaces and generics. It defines interfaces `A<T>` and `B<U>` and a function `foo` that takes an object of type `A<T> & B<U>`.  It demonstrates how to define and use an intersection type that combines properties from different generic interfaces.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionTypeInference.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface A<T> {
        a: T;
    }
    
    interface B<U> {
        b: U;
    }
    
    function foo<T, U>(obj: A<T> & B<U>): T | U {
        return undefined;
    }
```

----------------------------------------

TITLE: Subfolder Package Configuration - JSON
DESCRIPTION: The subfolder package.json file specifies the module type as 'commonjs', which indicates that the module exports follow the CommonJS standard.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportHelpersCollisions3(module=nodenext).errors.txt#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "type": "commonjs"
}
```

----------------------------------------

TITLE: Extending Class without 'super' call in constructor - TypeScript
DESCRIPTION: This snippet defines a class 'E' that extends 'A'.  Again, the constructor is missing the 'super()' call, leading to a TS2377 error. This highlights the necessity of including 'super()' in the constructor of any class that extends another class in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/staticPropSuper.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
    class E extends A {
        p: number = 12;
    
        constructor() {
        ~~~~~~~~~~~
!!! error TS2377: Constructors for derived classes must contain a 'super' call.
            var x = 1; // should error
        }
    }
```

----------------------------------------

TITLE: Exporting a variable in TypeScript
DESCRIPTION: This code snippet demonstrates a simple TypeScript export statement for a variable as part of a CommonJS format. It shows how to define and export a variable consistently with TypeScript conventions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node18).errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
// cjs format file
    const x = 1;
    export {x};
```

----------------------------------------

TITLE: Importing Modules in TypeScript
DESCRIPTION: This snippet shows different ways of importing modules and interfaces in TypeScript. It includes examples of importing entire modules, nested modules, and using imported types. An error is highlighted where a namespace is incorrectly used as a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importStatementsInterfaces.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
// no code gen expected
module B {
    import a = A;
}

// no code gen expected
module C {
    import a = A;
    import b = a.inA;
    var m: typeof a;
    var p: b.Point3D;
    var p = {x:0, y:0, z: 0 };
}

// no code gen expected
module D {
    import a = A;

    var p : a.Point;
}

// no code gen expected
module E {
    import a = A.inA;
    export function xDist(x: a.Point3D) {
        return 0 - x.x;
    }
}
```

----------------------------------------

TITLE: Exporting Function in TypeScript Module
DESCRIPTION: Simple TypeScript module exporting a function named 'foo' that returns a string value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importCallExpressionErrorInES2015.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export function foo() { return "foo"; }
```

----------------------------------------

TITLE: TypeScript Type Mismatch in Class Method
DESCRIPTION: Demonstrates a type error where a method n() with void return type is incorrectly assigned to a variable of type string within an arrow function. The error occurs because the method n() doesn't return anything (void) but the code attempts to assign its result to a string variable.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisWhenTypeCheckFails.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class c {
    public n() {
        var k = () => {
            var s: string = this.n();
        }
    }    
}
```

----------------------------------------

TITLE: Destructuring and Iteration in TypeScript
DESCRIPTION: This snippet demonstrates the use of destructuring assignment in a for-loop. It initializes variables along with an array containing strings, and it opens a loop that can manipulate these variables. The intended use is to efficiently manage multiple variables associated with skills.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
for (let [, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Arrow Function with Single Implicit Any Parameter
DESCRIPTION: A private class method using an arrow function with one parameter that lacks type annotation, causing an implicit 'any' type error. TypeScript flags parameter 'x' for not having an explicit type declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyParametersInClass.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
private priv_f10 = (x) => "";
```

----------------------------------------

TITLE: Control Flow Type Analysis Example
DESCRIPTION: Demonstrates TypeScript's control flow analysis with a loop involving type narrowing. Shows interaction between string and number union types in a while loop context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowSelfReferentialLoop.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface DataShape {
  message: { id: string }
}

function getObject(id: string | number) {
  return {} as any
}

;(() => {
  let id: string | number = 'a'
  while (1) {
    const data = getObject(id) as DataShape
    const message = data.message
    id = message.id
  }
})()
```

----------------------------------------

TITLE: ESM TypeScript Module Import
DESCRIPTION: Standard ESM format TypeScript file importing from a package using ES Module syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodePackageSelfNameScoped(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// esm format file
import * as self from "@scope/package";
self;
```

----------------------------------------

TITLE: Missing JSX closing tag
DESCRIPTION: This snippet demonstrates an error where a JSX element is opened but not closed. JSX requires all elements to be properly closed, either with a closing tag or as a self-closing tag.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxInvalidEsprimaTestSuite.errors.txt#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
"<a><a />;"
```

----------------------------------------

TITLE: Configuring Package Type as Module
DESCRIPTION: Defines the node package configuration to treat the module as an ECMAScript module, influencing how imports should be handled.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesCJSResolvingToESM3_modulePackageJson.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{ "type": "module" }
```

----------------------------------------

TITLE: Exporting Default Value in TypeScript
DESCRIPTION: This snippet illustrates exporting a default string value from a TypeScript module located in a subdirectory.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/extensionLoadingPriority(moduleresolution=nodenext).errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
export default "dir/index.ts";
```

----------------------------------------

TITLE: Defining TypeScript Interface for Disposable Objects
DESCRIPTION: Defines a TypeScript interface named 'IDisposable' which specifies a single method 'Dispose' that takes no arguments and returns void. This pattern is common for resource management.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constructorWithIncompleteTypeAnnotation.errors.txt#_snippet_18

LANGUAGE: TypeScript
CODE:
```
interface IDisposable {
    Dispose(): void;
}
```

----------------------------------------

TITLE: Correct Type Import in TypeScript
DESCRIPTION: Shows proper type-only import syntax using the 'type' keyword for importing types when verbatimModuleSyntax is enabled.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedModulesSketchyAliasLocalMerge(isolatedmodules=true,verbatimmodulesyntax=true).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import type { FC } from "./types";
let FC: FC | null = null;
```

----------------------------------------

TITLE: Declaring Class Foo in TypeScript
DESCRIPTION: This snippet declares a class named Foo in a declaration file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mergedClassWithNamespacePrototype.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare class Foo {}
```

----------------------------------------

TITLE: Destructuring Catch Clause (Object)
DESCRIPTION: This snippet demonstrates destructuring an object in a catch clause without specifying the type, which defaults to 'unknown' when `useUnknownInCatchVariables` is enabled.  Accessing a property directly on the destructured object results in a TypeScript error because the compiler cannot guarantee that the property exists on the 'unknown' type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructureCatchClause(strict=true,useunknownincatchvariables=true).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
"try {} catch ({ x }) { x }"
```

----------------------------------------

TITLE: Exporting in CommonJS Format (JavaScript)
DESCRIPTION: This snippet demonstrates the correct way to export in CommonJS format. It defines an object and exports it using module.exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsExportAssignment(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
// cjs format file
const a = {};
module.exports = a;
```

----------------------------------------

TITLE: Defining Functions with Implicit Return in TypeScript
DESCRIPTION: This code snippet contains functions in TypeScript demonstrating an implicit return of undefined. The functions have return types such as unknown, any, void, object, etc., and show how undefined is assignable to these types when strictNullChecks is off. Such cases might result in errors if not handled properly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionsWithImplicitReturnTypeAssignableToUndefined(strictnullchecks=true).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function f1(): unknown {
    if (Math.random() < 0.5) return true;

    // Implicit return, but undefined is always assignable to unknown.
}

type MyUnknown = unknown;
function f2(): unknown {
    if (Math.random() < 0.5) return true;

    // Implicit return, but undefined is always assignable to unknown.
}

function f3(): any {
    // Implicit return, but undefined is always assignable to any.
}

function f4(): void {
    // Implicit return, but undefined is always assignable to void.
}

function f5(): {} {
               ~~
!!! error TS2366: Function lacks ending return statement and return type does not include 'undefined'.
    if (Math.random() < 0.5) return {};

    // Implicit return, but undefined is assignable to object when strictNullChecks is off.
}

function f6(): Record<string, any> {
               ~~~~~~~~~~~~~~~~~~~
!!! error TS2366: Function lacks ending return statement and return type does not include 'undefined'.
    if (Math.random() < 0.5) return { "foo": true };

    // Implicit return, but undefined is assignable to records (which are just fancy objects)
    // when strictNullChecks is off.
}

function f7(): null {
               ~~~~
!!! error TS2366: Function lacks ending return statement and return type does not include 'undefined'.
    if (Math.random() < 0.5) return null;

    // Implicit return, but undefined is assignable to null when strictNullChecks is off.
}

function f8(): string | null {
               ~~~~~~~~~~~~~
!!! error TS2366: Function lacks ending return statement and return type does not include 'undefined'.
    if (Math.random() < 0.5) return "foo";

    // Implicit return, but undefined is assignable to null when strictNullChecks is off.
}
```

----------------------------------------

TITLE: package.json Configuration for ECMAScript Module
DESCRIPTION: This snippet defines a `package.json` file that configures a module to use the ECMAScript module system. Setting the `type` property to `module` indicates that the module should be treated as an ES module by Node.js.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesGeneratedNameCollisions(module=node16).errors.txt#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
"{
        \"name\": \"package\",
        \"private\": true,
        \"type\": \"module\"
    }"
```

----------------------------------------

TITLE: Package Configuration JSON
DESCRIPTION: Package.json configuration showing dual export paths for import and require modes
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesTripleSlashReferenceModeOverride3(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "exports": {
        "import": "./import.js",
        "require": "./require.js"
    }
}
```

----------------------------------------

TITLE: Package Configuration with Conditional Exports
DESCRIPTION: A package.json file that defines conditional exports based on module resolution mode. It provides different entry points for 'import' and 'require' module resolution strategies.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesTripleSlashReferenceModeOverrideModeError(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "exports": {
        "import": "./import.js",
        "require": "./require.js"
    }
}
```

----------------------------------------

TITLE: Implementing Overloaded MainButton Component in TypeScript React
DESCRIPTION: This snippet shows the implementation of a MainButton component with overloaded function signatures. It handles both ButtonProps and LinkProps, determining the rendering based on the presence of the goTo prop.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextuallyTypedStringLiteralsInJsxAttributes02.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export function MainButton(buttonProps: ButtonProps): JSX.Element;
export function MainButton(linkProps: LinkProps): JSX.Element;
export function MainButton(props: ButtonProps | LinkProps): JSX.Element {
    const linkProps = props as LinkProps;
    if(linkProps.goTo) {
        return this._buildMainLink(props);
    }

    return this._buildMainButton(props);
}
```

----------------------------------------

TITLE: Class with Lambda Method Demonstrating Scoping Error
DESCRIPTION: A TypeScript class with a private field and a lambda method that incorrectly tries to access the field without using 'this', resulting in a compiler error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classMemberInitializerWithLamdaScoping4.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
declare var console: {
    log(msg?: any): void;
};
export class Test1 {
    constructor(private field1: string) {
    }
    messageHandler = () => {
        console.log(field1); // Should be error that couldnt find symbol field1
    };
}
```

----------------------------------------

TITLE: TypeScript Class Extension with Import
DESCRIPTION: Creates a derived class B that extends class A, demonstrating module import from a relative path and class inheritance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/outModuleConcatES6.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import {A} from "./ref/a";
export class B extends A { }
```

----------------------------------------

TITLE: Type Narrowing in Class Constructor with ReadOnly Properties in TypeScript
DESCRIPTION: This class demonstrates type narrowing within a constructor for a readonly property. It shows how TypeScript handles narrowing for both the property and the constructor parameter.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowAliasing.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
class C10 {
    constructor(readonly x: string | number) {
        const thisX_isString = typeof this.x === 'string';
        const xIsString = typeof x === 'string';
        if (thisX_isString && xIsString) {
            let s: string;
            s = this.x;
            s = x;
        }
    }
}
```

----------------------------------------

TITLE: Demonstrating Type Error with Mismatched Child Type
DESCRIPTION: This snippet showcases a TypeScript error where the `children` function returns a type (`"y"`) that is not assignable to the expected type (`"x"`). It highlights how TypeScript enforces type safety in JSX, even when using generic components with children.  The error occurs because the generic type `T` is inferred as `"x"` from the `prop`, but the child function returns `"y"`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxChildrenGenericContextualTypes.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
    // Should error
    const arg = <ElemLit prop="x" children={p => "y"} />
    const argchild = <ElemLit prop="x">{p => "y"}</ElemLit>
    const mismatched = <ElemLit prop="x">{() => 12}</ElemLit>
```

----------------------------------------

TITLE: Variable Assignments and Type Compatibility - TypeScript
DESCRIPTION: Demonstrates variable assignments between different types, including 'SelectableControl' and its subclasses like 'Button' and 'TextBox'. Illustrates TypeScript's type checking and the resulting errors when expected properties are missing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inheritance1.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
var sc: SelectableControl;
var c: Control;
var b: Button;
sc = b;
c = b;
b = sc;
b = c;
var t: TextBox;
sc = t;
c = t;
t = sc;
t = c;
var i: ImageBase;
sc = i;
c = i;
i = sc;
i = c;
var i1: Image1;
sc = i1;
c = i1;
i1 = sc;
i1 = c;
var l: Locations;
sc = l;
c = l;
l = sc;
l = c;
var l1: Locations1;
sc = l1;
c = l1;
l1 = sc;
l1 = c;
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options
DESCRIPTION: This snippet demonstrates how to configure the TypeScript compiler using the 'tsconfig.json' file. The 'maxNodeModuleJsDepth' property limits the depth of module resolution, potentially affecting type checking. The 'allowJs' property enables the compilation of JavaScript files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesMaxDepthExceeded/node/nodeModulesMaxDepthExceeded.errors.txt#2025-04-21_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "compilerOptions": { 
    "allowJs": true,
    "maxNodeModuleJsDepth": 1, // Note: Module m1 is already included as a root file
    "outDir": "built"
  },
  "include": ["**/*", "node_modules/**/*"],
  "exclude": ["node_modules/m2/**/*"]
}
```

----------------------------------------

TITLE: Exporting Class and Instance in TypeScript
DESCRIPTION: This snippet exports a variable 'm2_a1', a class 'm2_c1', and an instance 'm2_instance1' for use in other TypeScript files. It also includes a function 'm2_f1' to return the instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootRelativePathMixedSubfolderSpecifyOutputFileAndOutputDirectory/node/sourceRootRelativePathMixedSubfolderSpecifyOutputFileAndOutputDirectory.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export var m2_a1 = 10;
export class m2_c1 {
    public m2_c1_p1: number;
}

export var m2_instance1 = new m2_c1();
export function m2_f1() {
    return m2_instance1;
}
```

----------------------------------------

TITLE: Object Property Assignment Error Cases in TypeScript
DESCRIPTION: Sample code showing various ways object literal assignments can fail type checking in TypeScript, including extra property errors and missing required property errors
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatBug2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var b2: { b: number;} = { a: 0 }; // error

b2 = { a: 0 }; // error

b2 = {b: 0, a: 0 };

var b3: { f(n: number): number; g(s: string): number; m: number; n?: number; k?(a: any): any; };

b3 = {
    f: (n) => { return 0; },
    g: (s) => { return 0; },
    m: 0,
}; // ok

b3 = {
    f: (n) => { return 0; },
    g: (s) => { return 0; },
}; // error

b3 = {
    f: (n) => { return 0; },
    m: 0,
}; // error

b3 = {
    f: (n) => { return 0; },
    g: (s) => { return 0; },
    m: 0,
    n: 0,
    k: (a) =>{ return null; },
}; // ok

b3 = {
    f: (n) => { return 0; },
    g: (s) => { return 0; },
    n: 0,
    k: (a) =>{ return null; },
}; // error
```

----------------------------------------

TITLE: Handling Type Checking with Generators in TypeScript
DESCRIPTION: The snippet defines two classes, Foo and Baz, and uses a generator function that is expected to yield instances of type Foo. A type checking error occurs because Baz instances lack the required 'x' property of Foo. This demonstrates the type safety enforced by TypeScript, showing that all yielded objects must conform to the expected interface, in this case, Foo. The absence of 'x' in Baz leads to a compilation error, showcasing TypeScript's commitment to structural type systems.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatorTypeCheck20.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Foo { x: number }
class Baz { z: number }
function* g(): IterableIterator<Foo> {
    yield;
    yield * [new Baz];
            ~~~~~~~~~
}
```

----------------------------------------

TITLE: Dynamic Import Resolution Errors
DESCRIPTION: Illustrates dynamic import() scenarios that trigger module resolution errors in TypeScript with strict module resolution settings
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node18).errors.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
const _m35 = import("./");
```

LANGUAGE: typescript
CODE:
```
const _m36 = import("./index");
```

----------------------------------------

TITLE: Generic Base and Derived Classes in TypeScript
DESCRIPTION: This snippet defines a generic base class 'Base2' and a generic derived class 'D'. It shows that the derived class inherits the constructor signature from the base class, requiring an argument during instantiation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classWithBaseClassButNoConstructor.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
class Base2<T,U> {
    constructor(x: T) { }
}

class D<T,U> extends Base2<T,U> {
    foo: U;
}

var r2 = D;
var d = new D(); // error
var d2 = new D(1); // ok
```

----------------------------------------

TITLE: TypeScript Class Inheritance Type Mismatch
DESCRIPTION: Demonstrates a type error where the property 'x' in derived class C2<T> is declared as 'string' but must match the type 'C2<T>' from base class C1<T>. This violates TypeScript's type safety rules for class inheritance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/instanceSubtypeCheck2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C1<T> {
    x: C2<T>;
}

class C2<T> extends C1<T> {
    x: string
}
```

----------------------------------------

TITLE: Demonstrating Variable Assignment and Usage with Nullish Coalescing in TypeScript
DESCRIPTION: This snippet shows an error case where a variable 'a' is used before being assigned. The nullish coalescing operator is used in an attempt to assign a value, but the control flow analysis detects potential issues.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowNullishCoalesce.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// assignments in shortcutting rhs
let a: number;
o ?? (a = 1);
a.toString();
```

----------------------------------------

TITLE: Multiple Default Exports TypeScript Error Example
DESCRIPTION: Demonstrates an invalid TypeScript module that attempts to export both a class and a type as default exports. This results in TS2528 errors since TypeScript only allows one default export per module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDefaultTypeAndClass.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export default class Foo {}
type Bar = {}
export default Bar
```

----------------------------------------

TITLE: Defining Class with JSX View Method in TypeScript
DESCRIPTION: Defines a class `A` with a method `view` that returns an array of JSX elements. The JSX elements are `<meta>` tags. The snippet demonstrates the use of JSX syntax within a TypeScript class method, including accessing nested properties (`c.a!.b`) within JSX attributes. Note the accompanying errors indicating `React` is required in scope for JSX processing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxFactoryNotIdentifierOrQualifiedName2.errors.txt#_snippet_6

LANGUAGE: TypeScript
CODE:
```
class A {
	view() {
		return [
			<meta content="helloworld"></meta>,
			<meta content={c.a!.b}></meta>
		];
	}
}
```

----------------------------------------

TITLE: Basic Variable Exports in TypeScript
DESCRIPTION: Simple module exporting two number variables x and y.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportStar.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var x = 1;
export var y = 2;
```

----------------------------------------

TITLE: Missing Property in Argument
DESCRIPTION: This snippet highlights an error when calling a function with an object that is missing a required property defined in the function's destructuring parameter.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration2.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
    c1({});            // Error, implied type is {z:number}?
       ~~
!!! error TS2345: Argument of type '{}' is not assignable to parameter of type '{ z: number; }'.
!!! error TS2345:   Property 'z' is missing in type '{}' but required in type '{ z: number; }'.
!!! related TS2728 destructuringParameterDeclaration2.ts:27:21: 'z' is declared here.
```

----------------------------------------

TITLE: Using Union of Type Predicates to Narrow Types
DESCRIPTION: Demonstrates how union of type predicates functions work for type narrowing. Shows different combinations of type predicates with regular functions and their effects on type inference.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typePredicatesInUnion3.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function f1(x: unknown, p: P1 | P2) {
    if (p(x)) {
        x;  // string | number
    }
}

function f2(x: unknown, p: P1 | P2 | F1) {
    if (p(x)) {
        x;  // string | number
    }
}

function f3(x: unknown, p: P1 | P2 | F2) {
    if (p(x)) {
        x;  // unknown
    }
}

function f4(x: unknown, p: P1 | P2 | F3) {
    if (p(x)) {
        x;  // unknown
    }
}
```

----------------------------------------

TITLE: Using the Comp Component with Incorrect JSX.Element
DESCRIPTION: This snippet shows an attempt to use the 'Comp' component with a JSX element 'Button' as a child. TypeScript raises an error because the expected type for 'children' does not match, demonstrating the strict type-checking in TypeScript when working with React components.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty5.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// Error: JSX.element is not the same as JSX.ElementClass
let k1 =
    <Comp a={10} b="hi">
        <Button />
        ~~~~~~~~~~
!!! error TS2740: Type 'ReactElement<any>' is missing the following properties from type 'Button': render, setState, forceUpdate, state, and 2 more.
!!! related TS6500 file.tsx:6:5: The expected type comes from property 'children' which is declared here on type 'IntrinsicAttributes & Prop'
    </Comp>;
```

----------------------------------------

TITLE: Inferring 'any' yield type from empty array in g003
DESCRIPTION: This snippet initializes a generator function `g003` and attempts to yield from an empty array. Due to the lack of a return type annotation and the type of `[]` defaulting to `undefined[]` in non-strict mode, the compiler infers an implicit 'any' yield type, causing a TypeScript error. This demonstrates the importance of return type annotations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatorReturnTypeInferenceNonStrict.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
"function* g003() { // Generator<any (implicit), void, unknown>
    // NOTE: In strict mode, `[]` produces the type `never[]`.
    //       In non-strict mode, `[]` produces the type `undefined[]` which is implicitly any.
    yield* [];
}"
```

----------------------------------------

TITLE: Array Destructuring For Loop
DESCRIPTION: For loop implementation with array destructuring and default value assignment for 'nameA'
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
for (var _b = getRobot(), _c = _b[1], nameA = _c === void 0 ? "name" : _c, i = 0; i < 1; i++) {
    console.log(nameA);
}
```

----------------------------------------

TITLE: TypeScript Promise Type Mismatch Error
DESCRIPTION: This snippet demonstrates a TypeScript error (TS2769) occurring when attempting to assign a function with an incompatible signature to a Promise's `then` method. The error indicates a mismatch in the types of parameters expected by the `onfulfilled` callback, specifically a `number` where a `string` is expected.  The error highlights the strict type checking performed by TypeScript when dealing with Promises and their callbacks.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations3.errors.txt#2025-04-21_snippet_26

LANGUAGE: typescript
CODE:
```
var r12 = testFunction12(x => x);
var r12a = r12.then(testFunction12, testFunction12, testFunction12); // ok
var s12 = testFunction12(x => x);
var s12a = s12.then(testFunction12, testFunction12, testFunction12); // ok
var s12b = s12.then(testFunction12P, testFunction12P, testFunction12P); // ok
                    ~~~~~~~~~~~~~~
```

----------------------------------------

TITLE: Defining Promise Filter Method Overloads in TypeScript
DESCRIPTION: Declares multiple overloaded signatures for a static filter method on the Promise class. These overloads handle different combinations of input value types (Promise.Thenable<R[]>, R[], etc.) and filterer function return types (boolean or Promise.Thenable<boolean>).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bluebirdStaticThis.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
static filter<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>;
static filter<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>;
static filter<R>(dit: typeof Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>;
static filter<R>(dit: typeof Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>;
static filter<R>(dit: typeof Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>;
static filter<R>(dit: typeof Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>;
static filter<R>(dit: typeof Promise, values: R[], filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>;
static filter<R>(dit: typeof Promise, values: R[], filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>;
```

----------------------------------------

TITLE: Defining Class C with Implicit Any Parameter Errors in TypeScript
DESCRIPTION: This code snippet defines a class 'C' with multiple public and private methods, demonstrating various cases where TypeScript raises implicit 'any' type errors for method parameters. It includes methods with single parameters, multiple parameters, rest parameters, and arrow function methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyParametersInClass.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
    // No implicit-'any' errors.
    public pub_f1(): void { }

    // Implicit-'any' errors for x.
    public pub_f2(x): void { }

    // No implicit-'any' errors.
    public pub_f3(x: any): void { }

    // Implicit-'any' errors for x, y, and z.
    public pub_f4(x, y, z): void { }

    // Implicit-'any' errors for x, and z.
    public pub_f5(x, y: any, z): void { }

    // Implicit-'any[]' errors for r.
    public pub_f6(...r): void { }

    // Implicit-'any'/'any[]' errors for x, r.
    public pub_f7(x, ...r): void { }

    // Implicit-'any' errors for x1, y2, x3, and y3.
    public pub_f8(x1, y1: number): any;
    public pub_f8(x2: string, y2): any;
    public pub_f8(x3, y3): any { }

    // No implicit-'any' errors.
    public pub_f9 = () => "";

    // Implicit-'any' errors for x.
    public pub_f10 = (x) => "";

    // Implicit-'any' errors for x, y, and z.
    public pub_f11 = (x, y, z) => "";

    // Implicit-'any' errors for x and z.
    public pub_f12 = (x, y: any, z) => "";

    // Implicit-'any[]' error for r.
    public pub_f13 = (...r) => "";

    // Implicit-'any'/'any[]' errors for x, r.
    public pub_f14 = (x, ...r) => "";

    ///////////////////////////////////////////

    // No implicit-'any' errors.
    private priv_f1(): void { }

    // Implicit-'any' errors for x.
    private priv_f2(x): void { }

    // No implicit-'any' errors.
    private priv_f3(x: any): void { }

    // Implicit-'any' errors for x, y, and z.
    private priv_f4(x, y, z): void { }

    // Implicit-'any' errors for x, and z.
    private priv_f5(x, y: any, z): void { }

    // Implicit-'any[]' errors for r.
    private priv_f6(...r): void { }

    // Implicit-'any'/'any[]' errors for x, r.
    private priv_f7(x, ...r): void { }

    // Implicit-'any' errors for x1, y2, x3, and y3.
    private priv_f8(x1, y1: number): any;
    private priv_f8(x2: string, y2): any;
    private priv_f8(x3, y3): any { }
}
```

----------------------------------------

TITLE: Defining Generic Class T5 in TypeScript
DESCRIPTION: Creates a generic class T5 with a generic type T. The class has a public property 'foo' of type T and a constructor that takes a parameter 'bar' of type T.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/superCallArgsMustMatch.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class T5<T>{

    public foo: T;

    constructor(public bar: T) { }

}
```

----------------------------------------

TITLE: Type Definitions and Default Properties - TypeScript
DESCRIPTION: This snippet defines a Props type and an InputProps type with optional and required properties. It also defines default properties using the Pick utility type, showcasing how default values can be managed in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictOptionalProperties1.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
// Example from #13195

type Props = {
        foo: string;
        bar: string
    }
    
type InputProps = {
        foo?: string;
        bar: string;
    }
    
    const defaultProps: Pick<Props, 'foo'> = { foo: 'foo' };
```

----------------------------------------

TITLE: JSX Component Function Declaration with Special Property Names
DESCRIPTION: Function declaration for TestingOneThing component that accepts either an object with 'extra-data' property or an object with 'yy' and optional 'direction' properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentOverload4.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
declare function TestingOneThing(j: {"extra-data": string}): JSX.Element;
declare function TestingOneThing(n: {yy: string, direction?: number}): JSX.Element;
```

----------------------------------------

TITLE: Derived Interface Re-defining Index for Compatibility in TypeScript
DESCRIPTION: This snippet shows a revised Derived5 interface that introduces a numeric property but correctly satisfies the expected type constraints of the Base interface, demonstrating how redefinition can lead to type compatibility.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedInterfaceIncompatibleWithBaseIndexer.errors.txt#2025-04-21_snippet_6

LANGUAGE: TypeScript
CODE:
```
interface Derived5 extends Base {
        '1': { x: number } // error
    }
```

----------------------------------------

TITLE: Array Destructuring Assignment in TypeScript
DESCRIPTION: Assigns values from an array literal [2, "trimmer", "trimming"] using array destructuring. The variables being assigned to are not shown in this fragment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.sourcemap.txt#_snippet_60

LANGUAGE: TypeScript
CODE:
```
] = [2, "trimmer", "trimming"], 
```

----------------------------------------

TITLE: Defining a Function with Type Annotations - TypeScript
DESCRIPTION: This snippet defines a function 'f' with a single string parameter and demonstrates a TypeScript error when called without arguments. This highlights TypeScript's type-checking capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocTypeTagRequiredParameters.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/** @type {function(string): void} */
const f = (value) => {
};
f() // should error
~
!!! error TS2554: Expected 1 arguments, but got 0.
!!! related TS6210 a.js:1:21: An argument for '0' was not provided.
```

----------------------------------------

TITLE: Importing Modules in TypeScript (ESM format)
DESCRIPTION: This snippet shows the correct way to import modules in an ECMAScript module format TypeScript file. It imports from '#cjs', '#mjs', and '#type' without any errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackageImports(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// esm format file
import * as cjs from "#cjs";
import * as mjs from "#mjs";
import * as type from "#type";
cjs;
mjs;
type;
```

----------------------------------------

TITLE: Custom Spacing Type System in TypeScript
DESCRIPTION: Defines a type system for spacing values with support for pixels, rem units, and numbered scale. Shows error when combinations become too complex.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes1.errors.txt#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
export type Spacing =
    | `0`
    | `${number}px`
    | `${number}rem`
    | `s${1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20}`;

export type SpacingShorthand =
    | `${Spacing} ${Spacing}`
    | `${Spacing} ${Spacing} ${Spacing}`
    | `${Spacing} ${Spacing} ${Spacing} ${Spacing}`;

const spacing: Spacing = "s12";
const test1: SpacingShorthand = "0 0 0";
```

----------------------------------------

TITLE: Exporting Variables and Classes in TypeScript
DESCRIPTION: This snippet defines and exports a variable and a class similar to the previous snippet but in a different module. It includes instance creation and a function that returns this instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcemapModuleMultifolderSpecifyOutputFile/node/sourcemapModuleMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export var m2_a1 = 10;
export class m2_c1 {
    public m2_c1_p1: number;
}

export var m2_instance1 = new m2_c1();
export function m2_f1() {
    return m2_instance1;
}
```

----------------------------------------

TITLE: Declaring Function with Optional Number Parameter in TypeScript
DESCRIPTION: Declaration of a function named 'foo' that accepts an optional number parameter and returns void. This function is defined in a declaration file and is called by the 'bar' function in main.ts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callHierarchyFunctionAmbiguity.1.callHierarchy.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function foo(x?: number): void;
```

----------------------------------------

TITLE: Recursive Partial Type Implementation
DESCRIPTION: Defines a recursive partial type that handles nested objects and arrays for deep partial type creation
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/conditionalTypes1.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
type RecursivePartial<T> = {
  [P in keyof T]?: T[P] extends Array<any> ? {[index: number]: RecursivePartial<T[P][0]>} :
    T[P] extends object ? RecursivePartial<T[P]> : T[P];
};
```

----------------------------------------

TITLE: String Literal Type Equality Comparisons in TypeScript
DESCRIPTION: Demonstrates TypeScript's type checking behavior when comparing string literal types using equality operators. Shows how TypeScript prevents comparisons between non-overlapping string literal types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/stringLiteralsWithEqualityChecks02.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
let x: "foo";
let y: "foo" | "bar";

let b: boolean;
b = x == y;
b = "foo" == y
b = y == "foo";
b = "foo" == "bar";
b = "bar" == x;
b = x == "bar";
b = y == "bar";
b = "bar" == y;

b = x != y;
b = "foo" != y
b = y != "foo";
b = "foo" != "bar";
b = "bar" != x;
b = x != "bar";
b = y != "bar";
b = "bar" != y;
```

----------------------------------------

TITLE: Direct Property Initialization
DESCRIPTION: Shows valid property initialization using direct value assignment in property declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictPropertyInitialization.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
class C4 {
    a = 0;
    b: number = 0;
    c: string = "abc";
    #d = 0
    #e: number = 0
    #f: string= "abc"
}
```

----------------------------------------

TITLE: Incorrect Implementation of Interface in JavaScript
DESCRIPTION: Attempts to implement interface 'A' in class 'B2' with an incorrect return type in 'mNumber', leading to a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocImplements_interface.errors.txt#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
/** @implements {A} */
class B2 {
    mNumber() {
        return "";
    }
}
```

----------------------------------------

TITLE: Defining JSX Module and Interface Types in TypeScript
DESCRIPTION: Declares the JSX namespace and defines interfaces for Element and IntrinsicElements, including custom component attribute types Attribs1.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution1.errors.txt#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
declare module JSX {
	interface Element { }
	interface IntrinsicElements {
		test1: Attribs1;
		test2: { reqd: string };
		var: { var: string };
	}
}
interface Attribs1 {
	x?: number;
	s?: string;
}
```

----------------------------------------

TITLE: Valid JSDoc Comments in JavaScript
DESCRIPTION: This code snippet demonstrates the correct way to use JSDoc comments to document a JavaScript function. The `@param` tags are properly formatted, specifying the parameter name, type, and description.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/paramTagWrapping.errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
    /**
     * @param
     * {number} x Arg x.
     * @param {number}
     * y Arg y.
     * @param {number} z
     * Arg z.
     */
    function good(x, y, z) {
    }
    
    good(1, 2, 3)
```

----------------------------------------

TITLE: Defining React Component Props with TypeScript
DESCRIPTION: This code defines the `PropsType` interface for a React component. It specifies that the component's children should be either an array containing a string and an optional number, or an iterable of booleans. This definition is crucial for type checking when using the component.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxChildrenWrongType.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface PropsType {
    children: [string, number?] | Iterable<boolean>;
}
```

----------------------------------------

TITLE: Iterating and Extracting Skills with TypeScript
DESCRIPTION: This snippet demonstrates a for-loop that iterates over an array 'multiRobotA', extracting 'primarySkillA' and 'secondarySkillA', and initializes a counter 'i'. The array destructuring syntax is used to assign values. It has a dependency on the array 'multiRobotA' being properly defined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
for (var _c = multiRobotA[1], primarySkillA = _c[0], secondarySkillA = _c[1], i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Destructuring Assignment in For-Of Loop with Object Binding Pattern
DESCRIPTION: This code snippet shows a for-of loop using destructuring assignment with an object binding pattern. It extracts values from an array of objects, applies default values, and logs a variable to the console.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_57

LANGUAGE: typescript
CODE:
```
secondary = "secondary"

secondary = "secondary"

console.log(nameA);
```

----------------------------------------

TITLE: Declaring Type Predicate Functions
DESCRIPTION: Defines functions that perform type checking and return type predicates for identifying string and string array types
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assertionTypePredicates1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function isString(value: unknown): value is string;
declare function isArrayOfStrings(value: unknown): value is string[];
```

----------------------------------------

TITLE: Correct Usage of JSX Attributes in TypeScript
DESCRIPTION: This snippet demonstrates the correct usage of attributes in JSX elements, including assigning a string to 'data-foo' and using other attributes without type conflicts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution7.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
// OK
<test1 data-foo={'32'} />;
<test1 data-bar={'32'} />;
<test1 data-bar={32} />;
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options
DESCRIPTION: This JSON configuration sets up the TypeScript compiler options to use ECMAScript modules with a bundler style resolution. It also specifies that no files should be emitted and no additional types are included.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolutionModeTripleSlash1.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "module": "esnext",
    "moduleResolution": "bundler",
    "noEmit": true,
    "types": []
  }
}
```

----------------------------------------

TITLE: Importing and Re-exporting a Type-Only Export Using 'import type' in TypeScript
DESCRIPTION: Correctly imports 'A' as a type using 'import type' syntax and re-exports it. This usage is valid because it's consistent with the type-only nature of the original export.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDeclaration(isolatedmodules=false).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import type { A } from './a';
export = A;
```

----------------------------------------

TITLE: Define Function with Array Pattern Parameter - TypeScript
DESCRIPTION: Defines a function `takeFirstTwoEntries` that uses a rest parameter with array pattern matching. It expects an array of `[string, number]` tuples and attempts to destructure the first two elements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/iterableArrayPattern26.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
function takeFirstTwoEntries(...[[k1, v1], [k2, v2]]: [string, number][]) { }
```

----------------------------------------

TITLE: Detecting Object Comparison Error in JavaScript
DESCRIPTION: This snippet showcases TypeScript's error reporting for potentially problematic JavaScript code. TypeScript identifies that the strict equality operator (===) will always return `false` when comparing two distinct object literals, because JavaScript compares objects by reference, not by value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/plainJSTypeErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
    // should error
    if ({} === {}) {}
        ~~~~~~~~~
!!! error TS2839: This condition will always return 'false' since JavaScript compares objects by reference, not value.
    
    // should not error
    if ({} == {}) {}
```

----------------------------------------

TITLE: TypeScript String Literal Type Assignments and Errors
DESCRIPTION: Shows various type checking scenarios with string literal types 'Hello' and 'World'. Demonstrates type assignments, function calls, and resulting type errors when attempting incompatible assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeArgumentsWithStringLiteralTypes01.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
namespace n3 {
    export let a = fun2<"Hello", "World">("Hello", "World");
    export let b = fun2<"Hello", "World">("World", "Hello");
    export let c = fun2<"World", "Hello">("Hello", "Hello");
    export let d = fun2<"World", "Hello">("World", "World");
    export let e = fun3<"Hello" | "World">("Hello", "World");

    // Assignment validations
    a = takeReturnString(a);
    b = takeReturnString(b);
    c = takeReturnString(c);
    d = takeReturnString(d);
    e = takeReturnString(e);

    a = takeReturnHello(a);
    b = takeReturnHello(b);
    c = takeReturnHello(c);
    d = takeReturnHello(d);
    e = takeReturnHello(e);

    a = takeReturnHelloWorld(a);
    b = takeReturnHelloWorld(b);
    c = takeReturnHelloWorld(c);
    d = takeReturnHelloWorld(d);
    e = takeReturnHelloWorld(e);
}
```

----------------------------------------

TITLE: Implementing Logical OR Assignment in TypeScript
DESCRIPTION: Function foo1 uses the ||= operator to assign a value to 'results' if it's falsy, then to 'results1' if that's falsy, defaulting to an empty array. It then pushes 100 to the resulting array.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment7(target=es2020).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function foo1(results: number[] | undefined, results1: number[] | undefined) {
    (results ||= results1 ||= []).push(100);
}
```

----------------------------------------

TITLE: TypeScript Private Property Access
DESCRIPTION: This code snippet defines a class `Foo` with a private property `privProp`. It then attempts to access this property from an instance of `Foo` outside the class. This results in a TypeScript compiler error because private properties are only accessible within the class they are defined in.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertyAccessibility1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    class Foo {
      private privProp = 0;
    }
    var f = new Foo();
    f.privProp;
```

----------------------------------------

TITLE: Object Destructuring with Variable Extraction
DESCRIPTION: Demonstrates TypeScript object destructuring to extract specific properties from an object, with type annotations and partial extraction.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatement1.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var a, nameA = robotA.name;
```

----------------------------------------

TITLE: Extracting Return Types with Generics
DESCRIPTION: Demonstrates `ReturnType` utility type in extracting return types with a generic function. It defines a type `T19` which uses `ReturnType` to determine the return type of a generic function that accepts a string and a variable number of arguments of type `T`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypes1.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    type T19<T extends any[]> = ReturnType<(x: string, ...args: T) => T[]>;  // T[]
```

----------------------------------------

TITLE: Inner Package Configuration with Module Exports (node_modules/inner/package.json)
DESCRIPTION: Defines export mappings for different module types (CommonJS, ECMAScript, and JavaScript) in the 'inner' package.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExports(module=node16).errors.txt#2025-04-21_snippet_7

LANGUAGE: JSON
CODE:
```
{
    "name": "inner",
    "private": true,
    "exports": {
        "./cjs/*": "./*.cjs",
        "./mjs/*": "./*.mjs",
        "./js/*": "./*.js"
    }
}
```

----------------------------------------

TITLE: Defining and Using Obj3 with JSX in TypeScript (with Errors)
DESCRIPTION: This snippet defines an interface Obj3type without a 'pr' property and attempts to use it in JSX expressions. It demonstrates type errors due to missing 'pr' property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxElementResolution12.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
interface Obj3type {
	new(n: string): { x: number; };
}
var Obj3: Obj3type;
<Obj3 x={10} />; // Error
var attributes: any;
<Obj3 {...attributes} />; // Error
<Obj3 {...{}} />; // OK
```

----------------------------------------

TITLE: Incorrect Type Conversion in TypeScript Function Assignment
DESCRIPTION: This code snippet attempts to assign a function returning a string to a variable typed as a function returning a number, causing a TypeScript compilation error. The error highlights the incompatibility between string and number types in this context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping41.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var foo = <{():number; (i:number):number; }> (function(){return "err";});
```

----------------------------------------

TITLE: Defining TypeScript Module m1
DESCRIPTION: This snippet defines a TypeScript module named 'm1'. It exports a variable `m1_a1`, a class `m1_c1`, an instance of the class `m1_instance1`, and a function `m1_f1` that returns the instance. This module serves as a basic example of exporting different types of members.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootRelativePathModuleMultifolderSpecifyOutputFile/node/sourceRootRelativePathModuleMultifolderSpecifyOutputFile.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Implementing Variable Arguments in TypeScript Class Methods
DESCRIPTION: Demonstrates a TypeScript class with three methods implementing variable arguments (rest parameters) with different type constraints. Shows method implementations for string and number array parameters with type checking.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/vararg.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module M {
    export class C {
        public f(x:string,...rest:number[]) {
            var sum=0;
            for (var i=0;i<rest.length;i++) {
                sum+=rest[i];
            }
            result+=(x+": "+sum);
            return result;
        }

        public fnope(x:string,...rest:number) {
            
        }

        public fonly(...rest:string[]) {
            builder="";
            for (var i=0;i<rest.length;i++) {
                builder+=rest[i];
            }
            return builder;
        }
    }
}

var x=new M.C();
var result="";
result+=x.f(x,3,3);
result+=x.f(3,"hello",3);
result+=x.f("hello",3,3,3,3,3);
result+=x.f("hello");
result+=x.fonly(3);
result+=x.fonly(x);
result+=x.fonly("a");
result+=x.fonly("a","b","c","d");
```

----------------------------------------

TITLE: TypeScript Function Parameter Type Mismatch
DESCRIPTION: Illustrates a type error where a number (123) is passed to function foo1 that expects a string parameter. The error occurs in a default parameter initialization.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/invocationExpressionInFunctionParameter.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo1(val: string) {
}
function foo3(x = foo1(123)) { //should error, 123 is not string
}
```

----------------------------------------

TITLE: Using React Component with Incorrect Children
DESCRIPTION: This code snippet shows an incorrect usage of the `ResizablePanel` component.  It attempts to pass three `div` elements as children. Since the `ResizablePanelProps` interface defines the `children` prop as a tuple of length two (`[React.ReactNode, React.ReactNode]`), this causes a TypeScript type error because the number of children does not match the expected tuple type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenCanBeTupleType.errors.txt#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
const testErr = <ResizablePanel>
      <div />
      <div />
      <div />
    </ResizablePanel>
```

----------------------------------------

TITLE: Incorrect Module Export in ESM Format (JavaScript)
DESCRIPTION: This snippet demonstrates an incorrect use of module.exports in an ESM format file. It also shows an import statement for the 'fs' module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsExportAssignment(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
// esm format file
import "fs";
const a = {};
module.exports = a;
```

----------------------------------------

TITLE: Importing and Calling Modules (b.mts) - Incorrect Usage
DESCRIPTION: This snippet demonstrates incorrect attempts to call imported modules directly.  The file imports the default export from `mod.cjs` in various ways and then attempts to call these imports as functions, which leads to TypeScript errors because the imported module itself isn't callable, but rather it has properties/methods like `.default` which can be callable if `default` is a function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleNodeDefaultImports(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    import a from "./mod.cjs";
    import { default as b } from "./mod.cjs";
    import c, { default as d } from "./mod.cjs";
    import * as self from "./b.mjs";
    export { default } from "./mod.cjs";
    export { default as def } from "./mod.cjs";
    
    a === b;
    b === c;
    c === d;
    d === self.default;
    self.default === self.def;
    
    // should all fail
    a();
    b();
    c();
    d();
    self.default();
    self.def();
```

----------------------------------------

TITLE: Catch Clause Destructuring with Object - Property Does Not Exist
DESCRIPTION: This snippet demonstrates the error TS2339, which occurs when trying to access a property on an object destructured from a catch clause variable when `useUnknownInCatchVariables` is enabled. The error indicates that the property 'x' does not exist on the empty object type ('{}').
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructureCatchClause(strict=false,useunknownincatchvariables=true).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
"try {} catch ({ x }) { x }"
```

----------------------------------------

TITLE: Chaining Map and Filter Operations in TypeScript
DESCRIPTION: Shows how chaining map and filter operations with truthiness checks doesn't properly narrow types from 'number | null' to 'number', resulting in type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypePredicates.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const evenSquaresInline: number[] =  // should error
    [1, 2, 3, 4]
        .map(x => x % 2 === 0 ? x * x : null)
        .filter(x => !!x); // tests truthiness, not non-nullishness

const isTruthy = (x: number | null) => !!x;

const evenSquares: number[] =  // should error
    [1, 2, 3, 4]
    .map(x => x % 2 === 0 ? x * x : null)
      .filter(isTruthy);

const evenSquaresNonNull: number[] =  // should ok
    [1, 2, 3, 4]
    .map(x => x % 2 === 0 ? x * x : null)
    .filter(x => x !== null);
```

----------------------------------------

TITLE: Configurable Options Type Definition
DESCRIPTION: Shows the implementation of configurable options using intersection types and interfaces for text change operations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/weakType.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
type ConfigurableStart = { useStart?: boolean }
type ConfigurableEnd = { useEnd?: boolean }
type ConfigurableStartEnd = ConfigurableStart & ConfigurableEnd
interface InsertOptions {
    prefix?: string
    suffix?: string
}
type ChangeOptions = ConfigurableStartEnd & InsertOptions;

function del(options: ConfigurableStartEnd = {},
             error: { error?: number } = {}) {
    let changes: ChangeOptions[];
    changes.push(options);
    changes.push(error);
}
```

----------------------------------------

TITLE: Defining Types and Namespaces in JavaScript with JSDoc
DESCRIPTION: Defines a myTypes namespace with multiple type definitions using JSDoc annotations. Includes nested type definitions and exports the namespace.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsDeclarationsImportAliasExposedWithinNamespace.errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
/**
 * @namespace myTypes
 * @global
 * @type {Object<string,*>}
 */
const myTypes = {
    // SOME PROPS HERE
};

/** @typedef {string|RegExp|Array<string|RegExp>} myTypes.typeA */

/**
 * @typedef myTypes.typeB
 * @property {myTypes.typeA}    prop1 - Prop 1.
 * @property {string}           prop2 - Prop 2.
 */

/** @typedef {myTypes.typeB|Function} myTypes.typeC */

export {myTypes};
```

----------------------------------------

TITLE: Instantiating ClassComponent in JavaScript
DESCRIPTION: This JavaScript snippet attempts to create an instance of the class `C` and assign it to the `test9` variable, which is declared as `ClassComponent<any>` using a JSDoc comment. This is similar to the TypeScript example above, but it is in JavaScript and uses a JSDoc type hint.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subclassThisTypeAssignable01.errors.txt#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
    /** @type {ClassComponent<any>} */
    const test9 = new C();
          ~~~~~
```

----------------------------------------

TITLE: Defining Class and Instance in TypeScript
DESCRIPTION: This snippet defines a class 'm1_c1' with a property 'm1_c1_p1' and creates an instance of the class 'm1_instance1'. It includes a function 'm1_f1' that returns the instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootRelativePathMixedSubfolderSpecifyOutputFileAndOutputDirectory/node/sourceRootRelativePathMixedSubfolderSpecifyOutputFileAndOutputDirectory.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Invalid Continue Statement in Switch Block
DESCRIPTION: Demonstrates an error case where a continue statement is incorrectly used inside a switch statement without an enclosing loop. This generates TypeScript error TS1104.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/continueNotInIterationStatement3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
switch (0) {
  default:
    continue;
}
```

----------------------------------------

TITLE: Importing and Destructuring Object in TypeScript
DESCRIPTION: This snippet shows how to import a default export from another module and destructure specific properties from the imported object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportsAndImportsWithUnderscores1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import R from "./m1";
const { __, _, ___ } = R;
```

----------------------------------------

TITLE: Invalid String Overload Implementation
DESCRIPTION: Class implementation with string literal overloads that are incompatible with the implementation signature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constructorsWithSpecializedSignatures.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
class D2 {
    constructor(x: "hi");
    constructor(x: "foo");
    constructor(x: string);
    constructor(x: "hi") { }
}
```

----------------------------------------

TITLE: Subfolder Package Configuration for CommonJS in JSON
DESCRIPTION: This package.json snippet, located in a subfolder, configures that specific part of the project to use CommonJS modules by setting the 'type' field to 'commonjs'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsGeneratedNameCollisions(module=nodenext).errors.txt#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "type": "commonjs"
}
```

----------------------------------------

TITLE: Iterating Over MultiRobot Array with Destructuring in TypeScript
DESCRIPTION: This code snippet shows a for...of loop that iterates over an array of MultiRobot objects, using destructuring to extract the 'skills' property and further destructure it into 'primary' and 'secondary' variables with default values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
for (let { skills: { primary: primaryA = "primary", secondary: secondaryA = "secondary" } =
    { primary: "nosKill", secondary: "noSkill" } } of getMultiRobots()) {
    console.log(primaryA);
}
```

----------------------------------------

TITLE: Using ES2015 Array Constructor Methods in TypeScript
DESCRIPTION: This snippet demonstrates the usage of ES2015 Array constructor methods 'from' and 'of'. These methods are not available in the default TypeScript configuration and require the 'lib' compiler option to be set to 'es2015' or later.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/doYouNeedToChangeYourTargetLibraryES2015.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
const testArrayConstructorFrom = Array.from([]);
const testArrayConstructorOf = Array.of([]);
```

----------------------------------------

TITLE: Package Configurations - TypeScript
DESCRIPTION: These snippets contain JSON configurations defining module types for the main package and a subfolder. It indicates the package's private status and type settings.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportHelpersCollisions(module=nodenext).errors.txt#2025-04-21_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

LANGUAGE: JSON
CODE:
```
{
    "type": "commonjs"
}
```

----------------------------------------

TITLE: Function Composition with Type Inference
DESCRIPTION: Examples of using pipe function to compose functions with different generic type transformations and type inference scenarios
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericFunctionInference1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const f00 = pipe(list);
const f01 = pipe(list, box);
const f02 = pipe(box, list);
```

----------------------------------------

TITLE: Defining Function with Generic Constraints in TypeScript
DESCRIPTION: This snippet defines a TypeScript function, foo, using generic type parameters T and U. The function returns the first parameter, y, with T extending U. It demonstrates usage of generic type constraints. The key parameters are y and z, representing types T and U respectively. The output is y of type T. The snippet assumes T extends U and expects properly declared types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericMergedDeclarationUsingTypeParameter.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function foo<T extends U, U>(y: T, z: U) { return y; }
```

----------------------------------------

TITLE: Iterating with Destructuring and Function Call
DESCRIPTION: This snippet iterates over the result of the getRobots() function, using destructuring to extract numberB, which represents the first element of each sub-array returned by the function. It then logs numberB to the console.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
>>>for (var _v = 0, _w = getRobots(); _v < _w.length; _v++) {
1->
2 >^^^^^
3 >     ^^^^^^^^^^
4 >               ^^
5 >                 ^^^^^
6 >                      ^^^^^^^^^
7 >                               ^^
8 >                                 ^^
9 >                                   ^^^^^^^^^^^^^^
10>                                                 ^^
11>                                                   ^^^^
12>                                                       ^^
13>                                                         ^
1->
  >
2 >for (let [numberB] of 
3 >     getRobots()
4 >               
5 >                 
6 >                      getRobots
7 >                               ()
8 >                                 
9 >                                   getRobots()
10>                                                 
11>                                                   getRobots()
12>                                                       ) 
13>                                                         {
1->Emitted(41, 1) Source(43, 1) + SourceIndex(0)
2 >Emitted(41, 6) Source(43, 23) + SourceIndex(0)
---
```

----------------------------------------

TITLE: TypeScript Additive Expression Parser Error
DESCRIPTION: This snippet demonstrates a TypeScript error where the variable 'm' is not defined, causing a "Cannot find name 'm'" error during parsing. The expression attempts to perform addition using properties of 'm' (m.index, m[0].length). The expected behavior would be successful parsing and execution if 'm' were a valid object or variable.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserAdditiveExpression1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
"m.index+1+m[0].length;"
```

----------------------------------------

TITLE: Demonstrating Invalid Arithmetic Operations in TypeScript
DESCRIPTION: This code snippet demonstrates various invalid arithmetic operations in TypeScript, resulting in compiler errors. It shows attempts to perform multiplication with incompatible types such as boolean, string, and object types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arithmeticOperatorWithInvalidOperands.errors.txt#2025-04-21_snippet_8

LANGUAGE: TypeScript
CODE:
```
enum E { a, b, c }

var a: any;
var b: boolean;
var c: number;
var d: string;
var e: { a: number };
var f: Number;

// All of the below should be an error unless otherwise noted
// operator *
var r1a1 = a * a; //ok
var r1a2 = a * b;
var r1a3 = a * c; //ok
var r1a4 = a * d;
var r1a5 = a * e;
var r1a6 = a * f;

var r1b1 = b * a;
var r1b2 = b * b;
var r1b3 = b * c;
var r1b4 = b * d;
var r1b5 = b * e;
var r1b6 = b * f;

var r1c1 = c * a; //ok
var r1c2 = c * b;
var r1c3 = c * c; //ok
var r1c4 = c * d;
var r1c5 = c * e;
var r1c6 = c * f;

var r1d1 = d * a;
var r1d2 = d * b;
var r1d3 = d * c;
```

----------------------------------------

TITLE: Incorrect Export Statement with Missing Comma in TypeScript
DESCRIPTION: This snippet illustrates an incorrect export statement where a comma is missing between the exported item and the 'from' clause. It shows the syntax error that occurs when trying to export an item with an alias.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unclosedExportClause02.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
export { x as a from
    "./t1";
```

----------------------------------------

TITLE: Destructuring Nested Object Properties in TypeScript
DESCRIPTION: This TypeScript code snippet shows object destructuring with nested properties. It extracts `primary` and `secondary` from the `skills` property of `robotA` and assigns them to `primaryA` and `secondaryA`. This showcases a concise way to access nested properties in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementNestedObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
var { 

    skills: { primary: primaryA, secondary: secondaryA } } = 
         robotA;
```

----------------------------------------

TITLE: Default Parameter Initialization
DESCRIPTION: Demonstrates function parameters with default value initialization and type widening
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration1ES5iterable.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function b1(z = [undefined, null]) { };
function b2(z = null, o = { x: 0, y: undefined }) { }
```

----------------------------------------

TITLE: Defining Class with Incomplete Method in TypeScript
DESCRIPTION: This snippet shows a TypeScript class 'A' with a method 'a' that has only a signature without an implementation. This causes a TS2391 error, indicating that the function implementation is missing or not immediately following the declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/crashOnMethodSignatures.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class A {
    a(completed: () => any): void;
}
```

----------------------------------------

TITLE: Using Type as Value Error
DESCRIPTION: This snippet shows the TypeScript error that occurs when a type (like `string`) is used as a value. `typeof string` is intended to get the type of a string, but `string` itself refers to the string type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfacedeclWithIndexerErrors.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
interface f {
        prop: typeof string;
    }
```

----------------------------------------

TITLE: Reducing Arrays to Numbers in TypeScript
DESCRIPTION: This snippet demonstrates reducing an array of strings to a number using the reduce method in TypeScript. The snippet also shows type-related errors when trying to access properties that are not defined on numbers. It includes reducing using both 'reduce' and 'reduceRight' methods and highlights type checking issues with the results.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericReduce.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    var a = ["An", "array", "of", "strings"];
    var b = a.map(s => s.length);
    var n1 = b.reduce((x, y) => x + y);
    var n2 = b.reduceRight((x, y) => x + y);
    
    n1.x = "fail";       // should error, as 'n1' should be type 'number', not 'any'.
       ~
!!! error TS2339: Property 'x' does not exist on type 'number'.
    n1.toExponential(2); // should not error if 'n1' is correctly number.
    n2.x = "fail";       // should error, as 'n2' should be type 'number', not 'any'.
       ~
!!! error TS2339: Property 'x' does not exist on type 'number'.
    n2.toExponential(2); // should not error if 'n2' is correctly number.
```

----------------------------------------

TITLE: Asserting Literal Numeric Types in TypeScript
DESCRIPTION: This code demonstrates TypeScript's literal type assertion pattern, where a numeric value is not only assigned but also explicitly typed as that exact literal number. This pattern ensures that the value property has a singleton type equal to the specific numeric literal rather than the general 'number' type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionSubtypeReductionErrors.errors.txt#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
{ value: 580 as 580 }
```

----------------------------------------

TITLE: Implementing Generic Class with Private Fields in TypeScript
DESCRIPTION: Demonstrates a generic class C<T> with private field #foo, private method #bar, and property accessors. Shows type checking and assignment compatibility between different generic type instantiations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNamesAndGenericClasses-2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C<T> {
    #foo: T;
    #bar(): T {
      return this.#foo;
    }
    constructor(t: T) {
      this.#foo = t;
      t = this.#bar();
    }
    set baz(t: T) {
      this.#foo = t;

    }
    get baz(): T {
      return this.#foo;
    }
}

let a = new C(3);
let b = new C("hello");

a.baz = 5                                 // OK
const x: number = a.baz                   // OK
a.#foo;                                   // Error
a = b;                                    // Error
b = a;                                    // Error
```

----------------------------------------

TITLE: TypeScript Configuration for Node Module Depth
DESCRIPTION: Configures TypeScript compiler options to allow JavaScript files and set maximum node module JS depth
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesMaxDepthIncreased/amd/nodeModulesMaxDepthIncreased.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "compilerOptions": { 
    "allowJs": true,
    "maxNodeModuleJsDepth": 3
  }
}
```

----------------------------------------

TITLE: Importing Non-Existent Module Member in TypeScript
DESCRIPTION: Attempts to import 'assertNevar' from a module that doesn't export it, causing a TypeScript compiler error. The error suggests using the correct export 'assertNever' instead.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportSpellingSuggestion.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { assertNevar } from "./a";
```

----------------------------------------

TITLE: Creating Scoped Action Types with Template Literals in TypeScript
DESCRIPTION: Demonstrates using template literals to create scoped action types with string interpolation. The function creates a type-safe way to generate action strings with a specific scope prefix.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const createScopedActionType = <S extends string>(scope: S) => <T extends string>(type: T) => `${scope}/${type}` as `${S}/${T}`;
const createActionInMyScope = createScopedActionType("MyScope");  // <T extends string>(type: T) => `MyScope/${T}`
const MY_ACTION = createActionInMyScope("MY_ACTION");  // 'MyScope/MY_ACTION'
```

----------------------------------------

TITLE: Importing FullCalendar and EventInput in Application Entry File
DESCRIPTION: This snippet demonstrates the usage of FullCalendar in an application entry file. It shows how to import FullCalendar from the react package and EventInput from the core package, which is critical for setting up the calendar component in a React application.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkerInitializationCrash.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// /index.tsx
import FullCalendar from "@fullcalendar/react";
import { EventInput } from "@fullcalendar/core";
```

----------------------------------------

TITLE: Incorrect Array Creation and Access in TypeScript
DESCRIPTION: This snippet showcases multiple errors in TypeScript related to array creation and element access. It includes attempts to create arrays using type names as constructors, which is incorrect, and element access expressions without arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/createArray.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var na=new number[];

class C {
}

new C[];
var ba=new boolean[];
var sa=new string[];
function f(s:string):number { return 0;
}
if (ba[14]) {
    na[2]=f(sa[3]);
}

new C[1]; // not an error
```

----------------------------------------

TITLE: Iterating with Destructuring on Function Call in TypeScript
DESCRIPTION: This snippet iterates over the result of a function call `getMultiRobots()` using a `for...of` loop and destructures each element to extract `primarySkillA` and `secondarySkillA`.  It demonstrates iterating over the result of a function that returns an array and destructuring within the loop. The function `getMultiRobots` should return an array of arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
>>>for (var _l = 0, _m = getMultiRobots(); _l < _m.length; _l++) {

```

LANGUAGE: typescript
CODE:
```
>>>    var _o = _m[_l], _p = _o[1], primarySkillA = _p[0], secondarySkillA = _p[1];

```

LANGUAGE: typescript
CODE:
```
>>>    console.log(primarySkillA);

```

----------------------------------------

TITLE: Iterating Over Robots Array in JavaScript
DESCRIPTION: This snippet demonstrates iterating over an array of robots, using a for loop with destructuring assignment to extract and log the 'name' property of each robot. It sets a default name 'noName' if the 'name' property is undefined. It shows the handling of multiple robot objects, each with 'name' and 'skill' properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_4

LANGUAGE: JavaScript
CODE:
```
for (var _e = 0, _f = [{ name: "mower", skill: "mowing" }, { name: "trimmer", skill: "trimming" }]; _e < _f.length; _e++) {
    var _g = _f[_e].name, nameA = _g === void 0 ? "noName" : _g;
    console.log(nameA);
}
```

----------------------------------------

TITLE: Defining JSX Elements and React Component (TypeScript)
DESCRIPTION: This snippet defines a TypeScript module for JSX with interfaces for elements and intrinsic elements, followed by a React component 'Todo' responsible for rendering a todo item. The 'Todo' component function accepts props with a key and todo, formatting its output as a string. The inclusion of a module path, 'react/jsx-runtime', is necessary to prevent certain errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadChildrenInvalidType(jsx=react-jsx,target=es5).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare module JSX {
	interface Element { }
	interface IntrinsicElements {
		[s: string]: any;
	}
}
declare var React: any;

interface TodoProp {
    id: number;
    todo: string;
}
interface TodoListProps {
    todos: TodoProp[];
}
function Todo(prop: { key: number, todo: string }) {
    return <div>{prop.key.toString() + prop.todo}</div>;
    			   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2875: This JSX tag requires the module path 'react/jsx-runtime' to exist, but none could be found. Make sure you have types for the appropriate package installed.
}
```

----------------------------------------

TITLE: Exporting a const
DESCRIPTION: Exports a constant x with the value "other".
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolutionModeImportType1(moduleresolution=classic).errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
export const x = "other";
```

----------------------------------------

TITLE: Defining Base Class with Method 'x'
DESCRIPTION: Base class 'a' defines an instance method 'x' that returns a string value
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inheritanceMemberAccessorOverridingMethod.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class a {
    x() {
        return "20";
    }
}
```

----------------------------------------

TITLE: Defining Promise and IPromise Interfaces in TypeScript
DESCRIPTION: Defines two interface types for promises: the standard Promise interface and a custom IPromise interface. Both define then() method overloads for chaining promises with different callback patterns, but IPromise has an optional done() method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Promise<T> {
    then<U>(success?: (value: T) => Promise<U>, error?: (error: any) => Promise<U>, progress?: (progress: any) => void): Promise<U>;
    then<U>(success?: (value: T) => Promise<U>, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>;
    then<U>(success?: (value: T) => U, error?: (error: any) => Promise<U>, progress?: (progress: any) => void): Promise<U>;
    then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>;
    done<U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
}

interface IPromise<T> {
    then<U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
    then<U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
    then<U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
    then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
    done? <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
}
```

----------------------------------------

TITLE: Defining a TypeScript Class with Private Members
DESCRIPTION: This snippet defines a TypeScript class 'C' with various private instance and static members, including properties, getters, setters, and methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classPropertyAsPrivate.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    private x: string;
    private get y() { return null; }
    private set y(x) { }
    private foo() { }

    private static a: string;
    private static get b() { return null; }
    private static set b(x) { }
    private static foo() { }
}
```

----------------------------------------

TITLE: Defining Button Component with Prop Interface
DESCRIPTION: A React component that defines a ButtonProp interface with number, string, and children type specifications
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty13.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface ButtonProp {
    a: number,
    b: string,
    children: Button;
}
```

----------------------------------------

TITLE: Destructuring Object with Nested Default Values in TypeScript
DESCRIPTION: This code snippet demonstrates TypeScript object destructuring with default values. It extracts 'name' and 'skills' properties from an object, with 'skills' being a nested object containing 'primary' and 'secondary' properties. Default values are provided for all properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_24

LANGUAGE: typescript
CODE:
```
{
    name: nameA = "noName",
    skills: {
        primary: primaryA = "primary",
        secondary: secondaryA = "secondary"
    } = { primary: "noSkill", secondary: "noSkill" }
}
```

----------------------------------------

TITLE: Correct Generic Specialization (StringFoo3)
DESCRIPTION: This code snippet demonstrates a correct implementation of the `IFoo<string>` interface. The `foo` method in `StringFoo3` uses the same generic type `T` as the interface, ensuring compatibility. The method takes a parameter of type `T` and returns a value of type `T`, satisfying the interface contract.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericSpecializations2.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
class StringFoo3 implements IFoo<string> {
    foo<T>(x: T): T { return null; }
}
```

----------------------------------------

TITLE: Object Literal Type Checking in TypeScript
DESCRIPTION: This snippet demonstrates type checking for object literals, showing errors for missing properties and excess properties. It uses a predefined type with 'x' and 'y' properties of type number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeMatch2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function f1() {
	var a = { x: 1, y: 2 };
	a = {}; // error
	a = { x: 1 }; // error
	a = { x: 1, y: 2, z: 3 };
	a = { x: 1, z: 3 };  // error
}
```

----------------------------------------

TITLE: TypeScript Function Overload Definition
DESCRIPTION: Defines a function `foo` with multiple overload signatures. The first signature expects an array of objects with a numeric 'a' property and returns a string. The second signature expects an array of objects with a boolean 'a' property and returns a number. The implementation signature accepts an array of objects with an 'a' property of any type and returns any type. This structure allows the function to handle different input types with corresponding return types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionOverloads37.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo(bar:{a:number;}[]):string;
function foo(bar:{a:boolean;}[]):number;
function foo(bar:{a:any;}[]):any{ return bar }
```

----------------------------------------

TITLE: Defining Interface Foo
DESCRIPTION: Defines the interface `Foo` with a single method `foo`. This interface is then used to define a type `M` which is a function with `Foo` as its `this` context. This ensures that methods called on instances of `Foo` are type-checked.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocThisType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Foo {
    foo: () => void;
}

export type M = (this: Foo) => void;
```

----------------------------------------

TITLE: Defining React Component with Tuple Children
DESCRIPTION: This snippet defines a React component called `ResizablePanel` in TypeScript. It specifies that the component expects its `children` prop to be a tuple of two `ReactNode` elements. This means the component expects exactly two child elements of any type that is a React node.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenCanBeTupleType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
 interface ResizablePanelProps {
      children: [React.ReactNode, React.ReactNode]
    }
    
    class ResizablePanel extends React.Component<
      ResizablePanelProps, any> {}
```

----------------------------------------

TITLE: Class Inheritance with Correct Ambient Declaration
DESCRIPTION: Demonstrates the correct use of the 'declare' keyword in a derived class.  The `declare` keyword signals to the compiler that this property is provided elsewhere, preventing an uninitialized property error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedUninitializedPropertyDeclaration.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class BD extends A {
 declare property: any; // ok because it's implicitly initialised
 }
```

----------------------------------------

TITLE: Destructuring Skills from MultiRobots - TypeScript
DESCRIPTION: This snippet iterates over a collection of multiRobots and extracts their primary and secondary skills using destructuring. It also logs the primary skills to the console. It requires the multiRobots data structure to hold objects with a skills property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
for ({ skills: { primary: primaryA, secondary: secondaryA } } of 
     multiRobots) {
    console.log(primaryA);
}
```

----------------------------------------

TITLE: Base Class B Definition in TypeScript
DESCRIPTION: Defines a base class with a public property and a constructor with parameter properties
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/override6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class B {
    public baz: number = 1;
    constructor(public foo: string, public bar: number) {

    }
}
```

----------------------------------------

TITLE: Exporting Variables in TypeScript Module
DESCRIPTION: This snippet defines a TypeScript module that exports three variables: 'a', 'x', and 'm'. It demonstrates how to export individual variables from a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ImportDefaultBindingFollowedWithNamedImportInEs5.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export var a = 10;
export var x = a;
export var m = a;
```

----------------------------------------

TITLE: Exporting Default Value in TypeScript
DESCRIPTION: This snippet defines a variable 'a' and exports it as the default export of the module. It demonstrates the correct way to export a default value in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ImportDefaultBindingFollowedWithNamedImport1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var a = 10;
export default a;
```

----------------------------------------

TITLE: Defining Base Class with Private Property
DESCRIPTION: Creates a base class with a private property that cannot be accessed outside its original class definition
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateAccessInSubclass1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base {
  private options: any;
}
```

----------------------------------------

TITLE: TypeScript Class Override Error Example
DESCRIPTION: This TypeScript code defines a base class 'B' with several members and two derived classes 'D' and 'DD' that attempt to override some of these members. The TypeScript compiler flags errors (TS4114) when a member overrides a base class member without the 'override' modifier. This example illustrates how to properly use the 'override' modifier when inheriting and overriding members in TypeScript classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/override4.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class B {
    p1: number = 1;
    p2: number = 1;
    p3: () => void;
    p4: () => void;
    foo (v: string) {}
    fooo (v: string) {}
}

class D extends B {
    p1: number = 2;
    override p2: number = 3;
    p3: () => void;
    override p4: () => void;
    override foo (v: string) {}

    fooo (v: string) {}

}

class DD extends B {
    override foo: () => void
    fooo: () => void;
}
```

----------------------------------------

TITLE: TypeScript Type Error - String to Number Assignment
DESCRIPTION: Shows a type error when attempting to assign a number value to a variable previously declared as string type. Demonstrates TypeScript's static type checking functionality.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsFiles.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
var x = "string";
x = 0;
```

----------------------------------------

TITLE: Nested JSX tag mismatch
DESCRIPTION: This snippet demonstrates a mismatch in nested JSX tags. The opening tag `<a>` expects a corresponding closing tag `</a>`, but finds `</b>` instead, leading to a syntax error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxInvalidEsprimaTestSuite.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
"<a:b></b>;"
```

----------------------------------------

TITLE: Destructuring array of objects with default value in TypeScript
DESCRIPTION: This snippet demonstrates destructuring an array of objects with a default value assignment in TypeScript.  The `for...of` loop iterates through the array, destructuring each object and assigning a default value to the nameA variable if the name property is missing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
2 >for ({name: nameA = "noName" } of 
3 >     [{ name: "mower", skill: "mowing" }, { name: "trimmer", skill: "trimming" }]
```

----------------------------------------

TITLE: Defining Class with Required Property - TypeScript
DESCRIPTION: Defines a class 'A' with a required property 'a' of type string and exports it as type 'B'. This is essential for ensuring that any instances of 'A' must include the property 'a'. No dependencies are needed beyond standard TypeScript features.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/renamed.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A { a!: string }
export type { A as B };
```

----------------------------------------

TITLE: TypeScript Error: Import Assignment with ECMAScript Modules
DESCRIPTION: This snippet demonstrates the errors generated when using `import D = require('./d')` in TypeScript files that are targeting ECMAScript modules. The errors suggest alternative import syntax such as `import * as ns from 'mod'`, `import {a} from 'mod'`, or `import d from 'mod'` to be compatible with ECMAScript module format.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports(isolatedmodules=false).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
"e.ts(1,1): error TS1202: Import assignment cannot be used when targeting ECMAScript modules. Consider using 'import * as ns from \"mod\"', 'import {a} from \"mod\"', 'import d from \"mod\"', or another module format instead.\ne.ts(2,1): error TS1202: Import assignment cannot be used when targeting ECMAScript modules. Consider using 'import * as ns from \"mod\"', 'import {a} from \"mod\"', 'import d from \"mod\"', or another module format instead."
```

----------------------------------------

TITLE: Duplicate Identifier Errors in TypeScript Export
DESCRIPTION: This code snippet highlights two duplicate identifier errors related to the `export` syntax in TypeScript. These errors need to be addressed to ensure the module exports are unique and valid.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/multipleExportAssignments.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
!!! error TS2300: Duplicate identifier 'export='.
    export = connectExport;
             ~~~~~~~~~~~~~
```

----------------------------------------

TITLE: Implementing Generic Functions with Intersection Types and Keyof Constraints
DESCRIPTION: This snippet shows three different functions f72, f73, and f74 that demonstrate how to use keyof with intersection and union types to control property access. Each function accepts objects and a key parameter, using different type constraints to determine what keys are valid.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
function f72(func: <T, U, K extends keyof T | keyof U>(x: T, y: U, k: K) => (T & U)[K]) {
    let a = func({ a: 1, b: "hello" }, { c: true }, 'a');  // number
    let b = func({ a: 1, b: "hello" }, { c: true }, 'b');  // string
    let c = func({ a: 1, b: "hello" }, { c: true }, 'c');  // boolean
}

function f73(func: <T, U, K extends keyof (T & U)>(x: T, y: U, k: K) => (T & U)[K]) {
    let a = func({ a: 1, b: "hello" }, { c: true }, 'a');  // number
    let b = func({ a: 1, b: "hello" }, { c: true }, 'b');  // string
    let c = func({ a: 1, b: "hello" }, { c: true }, 'c');  // boolean
}

function f74(func: <T, U, K extends keyof (T | U)>(x: T, y: U, k: K) => (T | U)[K]) {
    let a = func({ a: 1, b: "hello" }, { a: 2, b: true }, 'a');  // number
    let b = func({ a: 1, b: "hello" }, { a: 2, b: true }, 'b');  // string | boolean
}
```

----------------------------------------

TITLE: TypeScript Interface Property Assignments with Undefined
DESCRIPTION: This snippet demonstrates TypeScript's behavior when assigning values to interface properties that may or may not include undefined in their type. It shows how 'exactOptionalPropertyTypes' affects these assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictOptionalProperties1.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
interface U1 {
    name: string
    email?: string | number | undefined
}
interface U2 {
    name: string
    email?: string | number
}
declare const e: string | boolean | undefined
declare const u1: U1
declare let u2: U2
u1.email = e // error, but only because boolean isn't in email's type
u2.email = e // error, and suggest adding undefined
u2 = {
    name: 'hi',
    email: undefined
}
```

----------------------------------------

TITLE: Handling Type Conversion Error in TypeScript
DESCRIPTION: This snippet demonstrates an error in TypeScript where a number is incorrectly cast to a string type. The TypeScript compiler raises an error TS2352 when it identifies that the types do not overlap sufficiently. To resolve this, the value should be converted to 'unknown' first before making the conversion to the desired type. The snippet serves as an educational example for developers to understand typecasting limitations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asOperator2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var x = 23 as string;
            ~~~~~~~~~~~~
```

----------------------------------------

TITLE: Defining String Property Interface (TypeScript)
DESCRIPTION: Defines a TypeScript interface named `Foo` with a single property `a` of type `string`. This interface is used as one of the potential types in the dynamic import examples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importTypeGeneric.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface Foo {
    a: string;
}
```

----------------------------------------

TITLE: Defining Classes and Instances in TypeScript
DESCRIPTION: This snippet demonstrates the creation of a simple class in TypeScript, 'm1_c1', with a public property and an instance of the class. It shows how to initialize an instance and return it from a function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/outMixedSubfolderSpecifyOutputFile/node/outMixedSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Implementing Interface with Private Property Error in TypeScript
DESCRIPTION: This code shows an error where class 'Foo' incorrectly implements interface 'Qux' by declaring the 'Bar' property as private when the interface requires it to be public.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/publicMemberImplementedAsPrivateInDerivedClass.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Qux {
 Bar: number;
}
class Foo implements Qux {
 private Bar: number;
}
```

----------------------------------------

TITLE: Generic Base Class and Derived Class with Constructor Requirements in TypeScript
DESCRIPTION: This snippet introduces a generic base class that can accept any type. It contains a derived class that extends the generic base class with a specific type constraint. It highlights the error when an attempt is made to instantiate the derived class without the required argument, alongside a correct instantiation example.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassWithoutExplicitConstructor.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
class Base2<T> {
    a: T;
    constructor(x: T) { this.a = x; }
}
    
class D<T extends Date> extends Base2<T> {
    x = 2
    y: T = null;
}
    
var d = new D(); // error
            ~~~~~~~
!!! error TS2554: Expected 1 arguments, but got 0.
!!! related TS6210 derivedClassWithoutExplicitConstructor.ts:16:17: An argument for 'x' was not provided.
var d2 = new D(new Date()); // ok
```

----------------------------------------

TITLE: Exporting Variables and Classes - m1 Module - TypeScript
DESCRIPTION: This snippet defines and exports a variable and a class within the m1 module. It creates an instance of the class and exports it along with a function that returns the instance, allowing for easy consumption in other modules. Dependencies include the TypeScript compiler setup for module resolution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcerootUrlModuleMultifolderSpecifyOutputFile/node/sourcerootUrlModuleMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Generic Interface Implementation - TypeScript
DESCRIPTION: This code defines a generic interface and implements it in a class. It showcases TypeScript's ability to use generics for better type safety and abstraction.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
interface Genric<T> { func(n: T[]); }
var x12: Genric<Base> = { func: n => { return [d1, d2]; } };
```

----------------------------------------

TITLE: Accessing 'this' Before 'super()' Call in TypeScript Class Constructor
DESCRIPTION: This code shows an error case where a derived class constructor attempts to access 'this' before calling super(). In TypeScript (and JavaScript), the parent constructor must be called with super() before the 'this' reference can be used in derived classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameBadSuperUseDefineForClassFields(target=esnext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class B {};
class A extends B {
  #x;
  constructor() {
    this;
    super();
  }
}

```

----------------------------------------

TITLE: 'in' Operator with Defined Type
DESCRIPTION: Demonstrates the use of the 'in' operator with a defined type '{ a: string }'.  The code checks for the existence of properties 'a', 'b', and 'c' before accessing them. Since the type is well defined, this does not raise any errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=false).errors.txt#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
"function f4(x: { a: string }) {\n    if ("a" in x) {\n        x.a;\n    }\n    if ("a" in x && "b" in x && "c" in x) {\n        x.a;\n        x.b;\n        x.c;\n    }\n}"
```

----------------------------------------

TITLE: Interface Assignment Type Mismatch in TypeScript
DESCRIPTION: Demonstrates a type error when attempting to assign an interface with property 'one' of type number to an object requiring property 'one' of type number[]. The code defines two modules with incompatible type structures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability18.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module __test1__ {
    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
    export var __val__obj4 = obj4;
}
module __test2__ {
    export var obj = {one: [1]};
    export var __val__obj = obj;
}
__test2__.__val__obj = __test1__.__val__obj4
```

----------------------------------------

TITLE: Demonstrating Abstract Class Declaration Syntax Errors in TypeScript
DESCRIPTION: Code showing both valid and invalid abstract class declarations in TypeScript. The first two declarations are valid, while the last two generate syntax errors because 'default' requires 'export' prefix and 'import abstract class' is invalid syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classAbstractManyKeywords.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export default abstract class A {}
export abstract class B {}
default abstract class C {}
import abstract class D {}
```

----------------------------------------

TITLE: Destructuring Complex Objects in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates destructuring a complex object to extract specific properties. Dependencies include a structured object named `getMultiRobot`. The code extracts 'primary' and 'secondary' skills and logs them. It requires TypeScript support for object destructuring.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
for ({ skills: { primary: primaryA, secondary: secondaryA } } = getMultiRobot(), i = 0; i < 1; i++) {
    console.log(primaryA);
}
```

----------------------------------------

TITLE: Defining Class with Default Constructor and Captured This in TypeScript
DESCRIPTION: This code snippet shows the original TypeScript class 'Greeter' with a public property 'a' and a method 'returnA' that uses an arrow function to capture 'this'. The class uses a default constructor.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationClassWithDefaultConstructorAndCapturedThisStatement.sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
class Greeter {
    public a = 10;
    public returnA = () => this.a;
}
```

----------------------------------------

TITLE: TypeScript Function Overload Type Error
DESCRIPTION: This TypeScript code defines a function `foo` with two overloads: one with no arguments that returns a string, and another that accepts a string argument and returns a number. The code then attempts to call `foo` with a number argument, which doesn't match any of the defined overloads, resulting in a TypeScript error (TS2345). This highlights how TypeScript enforces type safety during function calls with overloads.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionOverloads.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    function foo(): string;
    function foo(bar: string): number;
    function foo(bar?: string): any { return "" };
    var x = foo(5);
                ~
```

----------------------------------------

TITLE: Illustrating TypeScript Modules
DESCRIPTION: This code snippet demonstrates a simple TypeScript module 'm1' with a variable, a class, an instance, and a function. This module is referenced in the subsequent 'test.ts' file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootWithNoSourceMapOption/node/sourceRootWithNoSourceMapOption.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    var m1_a1 = 10;
    class m1_c1 {
        public m1_c1_p1: number;
    }
    
    var m1_instance1 = new m1_c1();
    function m1_f1() {
        return m1_instance1;
    }
```

----------------------------------------

TITLE: Object Destructuring with Default Values in TypeScript
DESCRIPTION: Demonstrates destructuring with default values for object properties, used in array iteration context
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_28

LANGUAGE: typescript
CODE:
```
{ primary: primaryA = "noSkill", secondary: secondaryA = "noSkill" }
```

----------------------------------------

TITLE: Implementing Interface with Explicit and Implicit 'this' Types in TypeScript
DESCRIPTION: This snippet defines interfaces and a class that demonstrates explicit and implicit 'this' typing in TypeScript. It shows how to declare methods with explicit 'this' parameters and how TypeScript enforces type compatibility between methods with different 'this' types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/looseThisTypeInFunctions.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I {
    n: number;
    explicitThis(this: this, m: number): number;
}
interface Unused {
    implicitNoThis(m: number): number;
}
class C implements I {
    n: number;
    explicitThis(this: this, m: number): number {
        return this.n + m;
    }
    implicitThis(m: number): number {
        return this.n + m;
    }
    explicitVoid(this: void, m: number): number {
        return m + 1;
    }
}
let c = new C();
c.explicitVoid = c.explicitThis; // error, 'void' is missing everything
```

----------------------------------------

TITLE: Demonstrating TypeScript Optional Properties in Interface Assignment
DESCRIPTION: This code snippet shows TypeScript's behavior with the Foo interface that has a mix of required and optional properties. It demonstrates how TypeScript enforces required properties during object assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypes6.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
declare let x1: Foo;

x1.a;  // number
x1.b;  // number | undefined
x1.c;  // number | undefined
x1.d;  // number | undefined

x1 = { a: 1 };  // Error
x1 = { a: 1, b: 1 };
x1 = { a: 1, b: 1, c: 1 };
x1 = { a: 1, b: 1, c: 1, d: 1 };
```

----------------------------------------

TITLE: Using Destructuring in Function Parameters
DESCRIPTION: This snippet shows functions that use destructured parameters. It demonstrates how TypeScript validates these parameters against expected types and throws errors if the number or type of arguments does not match the function signature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration3ES6.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var array = [1, 2, 3];
var array2 = [true, false, "hello"]; 
a2([...array]);
a1(...array);
a9([1, 2, [["string"]], false, true]);   // Parameter type is [any, any, [[any]]]
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type '[number, number, [[string]], boolean, boolean]' is not assignable to parameter of type '[any, any, [[any]]]'.
!!! error TS2345:   Source has 5 element(s) but target allows only 3.

a10([1, 2, [["string"]], false, true]);   // Parameter type is any[]
a10([1, 2, 3, false, true]);              // Parameter type is any[]
               ~
!!! error TS2322: Type 'number' is not assignable to type '[[any]]'.
a10([1, 2]);                              // Parameter type is any[]
        ~~~~~~
!!! error TS2345: Argument of type '[number, number]' is not assignable to parameter of type '[any, any, [[any]], ...any[]]'.
!!! error TS2345:   Source has 2 element(s) but target requires 3.
a11([1, 2]);                              // Parameter type is number[];
```

----------------------------------------

TITLE: Interface Extension and Implementation with Return Type Conflicts
DESCRIPTION: Demonstrates type conflicts in interface extension and implementation. Shows how interfaces with incompatible method signatures cannot be merged, and how class implementation must match the exact return type of the interface method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceImplementation7.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface i1{ name(): { s: string; }; }
interface i2{ name(): { n: number; }; }

interface i3 extends i1, i2 { }
interface i4 extends i1, i2 { name(): { s: string; n: number; }; }

class C1 implements i4 {
    public name(): string { return ""; }
}
```

----------------------------------------

TITLE: Root Package JSON Configuration
DESCRIPTION: Root level package.json configuration specifying ESM module type for the package
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node16).errors.txt#2025-04-21_snippet_25

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Importing Modules in ECMAScript Module (index.mjs)
DESCRIPTION: Shows correct module imports in an explicit ECMAScript module file (.mjs). It imports from 'inner/cjs/index', 'inner/mjs/index', and 'inner/js/index' without errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExports(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
// esm format file
import * as cjsi from "inner/cjs/index";
import * as mjsi from "inner/mjs/index";
import * as typei from "inner/js/index";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: Defining Value Type in TypeScript
DESCRIPTION: Defines a simple TypeScript type Value holding a string literal. This type is imported and used in another file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importTypeNested.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
export type Value = "yes";
```

----------------------------------------

TITLE: Defining Custom JSX Element and Attributes in TypeScript
DESCRIPTION: This snippet defines a custom JSX element 'test1' and its attribute interface 'Attribs1'. It demonstrates how to declare custom JSX elements and their corresponding attribute types in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution4.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare module JSX {
	interface Element { }
	interface IntrinsicElements {
		test1: Attribs1;
	}
}
interface Attribs1 {
	x(n: string): void;
}
```

----------------------------------------

TITLE: Generic Class with Private Fields in TypeScript
DESCRIPTION: Demonstrates a generic class 'C<T>' with private fields (#foo, #method, #prop) and methods showing valid and invalid access patterns. Includes type checking between different generic instantiations and access restrictions for private members.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNamesInGenericClasses.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C<T> {
    #foo: T;
    #method(): T { return this.#foo; }
    get #prop(): T { return this.#foo; }
    set #prop(value : T) { this.#foo = value; }
    
    bar(x: C<T>) { return x.#foo; }          // OK
    bar2(x: C<T>) { return x.#method(); }    // OK
    bar3(x: C<T>) { return x.#prop; }        // OK

    baz(x: C<number>) { return x.#foo; }     // OK
    baz2(x: C<number>) { return x.#method; } // OK
    baz3(x: C<number>) { return x.#prop; }   // OK

    quux(x: C<string>) { return x.#foo; }    // OK
    quux2(x: C<string>) { return x.#method; }// OK
    quux3(x: C<string>) { return x.#prop; }  // OK
}

declare let a: C<number>;
declare let b: C<string>;
a.#foo;                                   // Error
a.#method;                                // Error
a.#prop;                                  // Error
a = b;                                    // Error
b = a;                                    // Error
```

----------------------------------------

TITLE: Destructuring Robot Skills Object in TypeScript
DESCRIPTION: Code snippet showing destructuring assignment of a robot skills object with default values for primary and secondary skills. Includes source mapping information from the TypeScript compiler.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_17

LANGUAGE: typescript
CODE:
```
{ name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }];
_m = _68[_67].skills, 
_o = _m === void 0 ? { primary: "nosKill", secondary: "noSkill" } : _m, 
_p = _o.primary, 
primaryA = _p === void 0 ? "primary" : _p, 
_q = _o.secondary, 
secondaryA = _q === void 0 ? "secondary" : _q;
```

----------------------------------------

TITLE: Type Imports in TypeScript
DESCRIPTION: This snippet demonstrates the importation of types A, B, and C from './mod.js' into the current module. This allows the importing module to use these type definitions. Dependencies include TypeScript and the availability of the 'mod.js' file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports_importsNotUsedAsValues.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { type A, type B, type C } from "./mod.js";
```

----------------------------------------

TITLE: Interface Definition with Unterminated Generic Type in TypeScript
DESCRIPTION: This snippet defines an interface `IQService` with a method `all` that takes an array of `IPromise` as input. The code causes TypeScript errors because `IPromise` is not a known type, and the generic type definition is not correctly terminated, resulting in a missing closing bracket '>'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserUnterminatedGeneric1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
     interface IQService {
            all(promises: IPromise < any > []): IPromise<
                          ~~~~~~~~
!!! error TS2552: Cannot find name 'IPromise'. Did you mean 'Promise'?
                                                ~~~~~~~~
!!! error TS2552: Cannot find name 'IPromise'. Did you mean 'Promise'?
                                                         
!!! error TS1005: '>' expected.
```

----------------------------------------

TITLE: Destructuring Missing Properties - Basic Examples
DESCRIPTION: Demonstrates TypeScript errors when attempting to destructure properties from an empty object. Shows various combinations of default values and property access.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/missingAndExcessProperties.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f1() {
    var { x, y } = {};
    var { x = 1, y } = {};
    var { x, y = 1 } = {};
    var { x = 1, y = 1 } = {};
}
```

----------------------------------------

TITLE: Defining Interface F with foo1 Property in TypeScript
DESCRIPTION: This snippet defines an interface F with a single property foo1 of type number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/errorWithSameNameType.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface F {
    foo1: number
}
```

----------------------------------------

TITLE: Implementing Interfaces in TypeScript
DESCRIPTION: This snippet demonstrates the implementation of an interface in TypeScript, highlighting the error that occurs when a class property is more restrictive than the interface property. Class 'c1' attempts to implement interface 'i1' but fails due to 'name' being private in 'c1' while 'i1' expects it to be public. 'Class c2' demonstrates correct implementation with a public 'name' property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateInterfaceProperties.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface i1 { name:string; }

// should be an error 
class c1 implements i1 { private name:string; }

// should be ok 
class c2 implements i1 { public name:string; }
```

----------------------------------------

TITLE: Iterating and Logging with Loop in TypeScript
DESCRIPTION: This snippet shows a for loop in TypeScript where multiple variables are assigned from an array called 'robotA'. The loop iterates once, setting the variables 'numberA2', 'nameA2', and 'skillA2', which are printed later. Pre-defined values in 'robotA' are necessary for this snippet to execute correctly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_19

LANGUAGE: TypeScript
CODE:
```
for (numberA2 = robotA[0], nameA2 = robotA[1], skillA2 = robotA[2], i = 0; i < 1; i++) {
1->
2 >^^^^^
3 >     ^^^^^^^^
4 >             ^^^
5 >                ^^^^^^
6 >                      ^^^
7 >                         ^^
```

----------------------------------------

TITLE: Multiple Module Imports in TypeScript
DESCRIPTION: TypeScript file demonstrating various import patterns for .ts, .tsx, and .d.ts files including their JavaScript equivalents
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowImportingTsExtensions(moduleresolution=node10).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import {} from "./ts.js";
import {} from "./ts.ts";
import type {} from "./ts.d.ts";

import {} from "./tsx.js";
import {} from "./tsx.jsx";
import {} from "./tsx.ts";
import {} from "./tsx.tsx";
import type {} from "./tsx.d.ts";

import {} from "./dts.js";
import {} from "./dts.ts";
import type {} from "./dts.d.ts";
```

----------------------------------------

TITLE: Module Import Usage (2.ts)
DESCRIPTION: Imports and uses the namespace from file '1.ts' correctly through the module import.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace1(module=esnext).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import * as foo from './1'

foo.ns.a;
foo.ns.b;
```

----------------------------------------

TITLE: Named Exports in TypeScript
DESCRIPTION: Shows named exports from various module types. Some exports result in TypeScript errors due to missing exports or incompatible module types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ExportEqualsInterop.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
export { a as a1 } from "interface";
export { a as a2 } from "variable";
export { a as a3 } from "interface-variable";
export { a as a4 } from "module";
export { a as a5 } from "interface-module";
export { a as a6 } from "variable-module";
export { a as a7 } from "function";
export { a as a8 } from "function-module";
export { a as a9 } from "class";
export { a as a0 } from "class-module";
```

----------------------------------------

TITLE: Demonstrating Scope and Property Access Errors in TypeScript Static Methods
DESCRIPTION: This code example illustrates two common TypeScript errors in static methods: trying to access an instance variable directly without proper qualification, and attempting to access an instance property via 'this' in a static context where 'this' refers to the class itself rather than an instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/scopeCheckInsideStaticMethod1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
   private v;
   public p;
   static s;
   static b() {
      v = 1; // ERR
      C.s = 1;
      this.p = 1; // ERR
   }
}
```

----------------------------------------

TITLE: ESM Module Import Implementation
DESCRIPTION: Implementation of ESM format file with imports from different module types (CJS, MJS, JS)
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExportsTrailers(module=nodenext).errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// esm format file
import * as cjsi from "inner/cjs/index.cjs";
import * as mjsi from "inner/mjs/index.mjs";
import * as typei from "inner/js/index.js";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: Iterating Over Array of Objects with Destructuring in TypeScript
DESCRIPTION: This snippet illustrates iterating over a hardcoded array of objects using a `for...of` loop and destructuring. Each object in the array represents a robot with `name` and `skills`, and the `primary` and `secondary` skills are extracted using destructuring.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
>>>for (var _k = 0, _l = [{ name: "mower", skills: { primary: "mowing", secondary: "none" } },
1->
2 >^^^^^
3 >     ^^^^^^^^^^
4 >               ^^
5 >                 ^^^^^^
6 >                       ^^
7 >                         ^^^^
8 >                             ^^
9 >                               ^^^^^^^
10>                                      ^^
11>                                        ^^^^^^
12>                                              ^^
13>                                                ^^
14>                                                  ^^^^^^^
15>                                                         ^^
16>                                                           ^^^^^^^^
17>                                                                   ^^
18>                                                                     ^^^^^^^^^
19>                                                                              ^^
20>                                                                                ^^^^^^
21>                                                                                      ^^
22>                                                                                        ^^
23>                                                                                          ^^^^^^^^^^^^^^->
1->
  >
2 >for (let { skills: { primary: primaryA, secondary: secondaryA } } of 
3 >     [{ name: "mower", skills: { primary: "mowing", secondary: "none" } },
  >         { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }]
4 >               
5 >                 [
6 >                       { 
7 >                         name
8 >                             : 
9 >                               "mower"
10>                                      , 
11>                                        skills
12>                                              : 
13>                                                { 
14>                                                  primary
15>                                                         : 
16>                                                           "mowing"
17>                                                                   , 
18>                                                                     secondary
19>                                                                              : 
20>                                                                                "none"
21>                                                                                       }
22>                                                                                         }
1->Emitted(30, 1) Source(44, 1) + SourceIndex(0)
2 >Emitted(30, 6) Source(44, 70) + SourceIndex(0)
3 >Emitted(30, 16) Source(45, 79) + SourceIndex(0)
4 >Emitted(30, 18) Source(44, 70) + SourceIndex(0)
5 >Emitted(30, 24) Source(44, 71) + SourceIndex(0)
6 >Emitted(30, 26) Source(44, 73) + SourceIndex(0)
7 >Emitted(30, 30) Source(44, 77) + SourceIndex(0)
8 >Emitted(30, 32) Source(44, 79) + SourceIndex(0)
9 >Emitted(30, 39) Source(44, 86) + SourceIndex(0)
10>Emitted(30, 41) Source(44, 88) + SourceIndex(0)
11>Emitted(30, 47) Source(44, 94) + SourceIndex(0)
12>Emitted(30, 49) Source(44, 96) + SourceIndex(0)
13>Emitted(30, 51) Source(44, 98) + SourceIndex(0)
14>Emitted(30, 58) Source(44, 105) + SourceIndex(0)
15>Emitted(30, 60) Source(44, 107) + SourceIndex(0)
16>Emitted(30, 68) Source(44, 115) + SourceIndex(0)
17>Emitted(30, 70) Source(44, 117) + SourceIndex(0)
18>Emitted(30, 79) Source(44, 126) + SourceIndex(0)
19>Emitted(30, 81) Source(44, 128) + SourceIndex(0)
20>Emitted(30, 87) Source(44, 134) + SourceIndex(0)
21>Emitted(30, 89) Source(44, 136) + SourceIndex(0)
22>Emitted(30, 91) Source(44, 138) + SourceIndex(0)
---
```

----------------------------------------

TITLE: Destructuring Variables in Try-Catch Block with TypeScript
DESCRIPTION: Demonstrates variable declarations and destructuring assignments within a try-catch block, showing TypeScript's strict checking of potentially unassigned variables when they are used after the try-catch block. The code includes function declarations, array destructuring, and object destructuring patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowDestructuringVariablesInTryCatch.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function f1(): string;
declare function f2(): [b: string];
declare function f3(): { c: string };

try {
    var a = f1();
    var [b] = f2();
    var { c } = f3();

    var [d = 1] = [];
    var { e = 1 } = { };
} catch {
    console.error("error");
}

a;
b;
c;
d;
e;
```

----------------------------------------

TITLE: Type Exports in TypeScript
DESCRIPTION: This code snippet shows the export of types A, B, and C from the module file 'mod.js'. The types declared are used to ensure type safety and can be consumed in other parts of the application. No specific dependencies are needed beyond TypeScript itself.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports_importsNotUsedAsValues.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export type A = unknown;\nexport type B = never;\nexport type C = any;
```

----------------------------------------

TITLE: Declaring a Variable of the Generic Type with Errors in TypeScript
DESCRIPTION: This snippet declares a variable `tuvwx` of type `Everything` with specific type arguments. It then attempts to declare two more variables, `wrong` and `insufficient`. The `wrong` variable declaration results in a TS2344 error because the type provided for the first generic type `T` does not satisfy the constraint { a: number, b: string } defined in the `Everything` type. The `insufficient` variable declaration causes a TS2314 error because the generic type `Everything` requires 5 type arguments, but only one is provided.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typedefMultipleTypeParameters.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    /** @type {Everything<{ a: number, b: 'hi', c: never }, undefined, { c: true, d: 1 }, number, string>} */
    var tuvwx;
    
    /** @type {Everything<{ a: number  }, undefined, { c: 1, d: 1 }, number, string>} */
                          ~~~~~~~~~~~~~~
    var wrong;
    
    /** @type {Everything<{ a: number  }>} */
               ~~~~~~~~~~~~~~~~~~~~~~~~~~
```

----------------------------------------

TITLE: Assigning Skills to Robots in TypeScript
DESCRIPTION: This snippet assigns primary and secondary skills to a set of robots using destructuring. It provides default values for each skill in case they are not specified. The primary skill defaults to 'primary' and the secondary skill defaults to 'secondary'. The values are extracted from an array that can vary in its contents.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
    _s = _47[_46], _t = _s[1], _u = _t === void 0 ? ["skill1", "skill2"] : _t, _v = _u[0], primarySkillA = _v === void 0 ? "primary" : _v, _w = _u[1], secondarySkillA = _w === void 0 ? "secondary" : _w;
```

----------------------------------------

TITLE: Async Function with Implicit Any Return Type in Generic Context
DESCRIPTION: Demonstrates an async function passed to f2 that expects a PromiseLike<T> return. The callback lacks an explicit return type annotation, resulting in an implicit 'any' error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implicitAnyGenericTypeInference.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
declare function f2<T>(cb: () => PromiseLike<T>): void;
f2(async () => null);
```

----------------------------------------

TITLE: Importing Re-exported Types
DESCRIPTION: This snippet imports the re-exported types 'AA' and 'BB' from module 'd'. It shows the usage of imported types in a TypeScript module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports_errors(isolatedmodules=false).errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import { AA, BB } from "./d";
```

----------------------------------------

TITLE: JSDoc Array of Objects Parameter Documentation in JavaScript
DESCRIPTION: This snippet shows how to document an array of objects as a function parameter using JSDoc. The syntax 'param {type[]} parameter' denotes an array, and 'param {type} parameter[].property' specifies the type of properties within the objects in the array. Includes optional property example with 'string= opts2[].anotherY'
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocParamTagTypeLiteral.errors.txt#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
    /**
     * @param {Object[]} opts2
     * @param {string} opts2[].anotherX
     * @param {string=} opts2[].anotherY
     */
    function foo2(/** @param opts2 bad idea theatre! */opts2) {
        opts2[0].anotherX;
    }
    
    foo2([{anotherX: "world"}]);
```

----------------------------------------

TITLE: Optional Chaining with Undefined Checks in TypeScript
DESCRIPTION: This snippet shows how optional chaining interacts with undefined checks. It demonstrates type narrowing behavior and error reporting when accessing properties of potentially undefined objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowOptionalChain.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
function f12(o: Thing | undefined, value: number | undefined) {
    if (o?.foo === value) {
        o.foo;  // Error
        ~
!!! error TS18048: 'o' is possibly 'undefined'.
    }
    if (o?.["foo"] === value) {
        o["foo"];  // Error
        ~
!!! error TS18048: 'o' is possibly 'undefined'.
    }
    if (o?.bar() === value) {
        o.bar;  // Error
        ~
!!! error TS18048: 'o' is possibly 'undefined'.
    }
    // ... (similar checks with == operator)
}
```

----------------------------------------

TITLE: Incompatible Types in Interface Implementation
DESCRIPTION: This snippet demonstrates an error caused by an incompatible type in the implementation of an interface method, specifically related to destructuring parameters and missing properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration2.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
    interface F2 {
        d3([a, b, c]?);
        d4({x, y, z}?);
        e0([a, b, c]);
    }
    
    class C4 implements F2 {
        d3([a, b, c]?) { }  // Error, binding pattern can't be optional in implementation signature
           ~~~~~~~~~~
!!! error TS2463: A binding pattern parameter cannot be optional in an implementation signature.
        d4({x, y, c}) { }
        ~~
!!! error TS2416: Property 'd4' in type 'C4' is not assignable to the same property in base type 'F2'.
!!! error TS2416:   Type '({ x, y, c }: { x: any; y: any; c: any; }) => void' is not assignable to type '({ x, y, z }?: { x: any; y: any; z: any; }) => any'.
!!! error TS2416:     Types of parameters '__0' and '__0' are incompatible.
!!! error TS2416:       Property 'c' is missing in type '{ x: any; y: any; z: any; }' but required in type '{ x: any; y: any; c: any; }'.
        e0([a, b, q]) { }
    }
```

----------------------------------------

TITLE: Robot Array Iteration
DESCRIPTION: Demonstrates iterating over robot arrays using for...of loops with object destructuring to access the name property of each robot object. Includes both direct array iteration and function-based array access.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
for (var _i = 0, robots_1 = robots; _i < robots_1.length; _i++) {
    var nameA = robots_1[_i].name;
    console.log(nameA);
}

for (var _a = 0, _b = getRobots(); _a < _b.length; _a++) {
    var nameA = _b[_a].name;
    console.log(nameA);
}

for (var _c = 0, _d = [{ name: "mower", skill: "mowing" }, { name: "trimmer", skill: "trimming" }]; _c < _d.length; _c++) {
    var nameA = _d[_c].name;
    console.log(nameA);
}
```

----------------------------------------

TITLE: Defining Base and Derived Interfaces in TypeScript
DESCRIPTION: Defines two interfaces, Base and Derived, where Derived extends Base and adds an additional property. This sets up the foundation for subsequent subtyping examples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithObjectMembers3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Base {
    foo: string;
}

interface Derived extends Base {
    bar: string;
}
```

----------------------------------------

TITLE: Nested Type Discrimination with Object Patterns in TypeScript
DESCRIPTION: Shows type narrowing behavior with nested object patterns and discriminated unions. Demonstrates how TypeScript handles type checking with aliased nested properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowAliasedDiscriminants.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
type Nested = {
    type: 'string';
    resp: {
        data: string
    }
} | {
    type: 'number';
    resp: {
        data: number;
    }
}

{
    let resp!: Nested;
    const { resp: { data }, type } = resp;
    if (type === 'string') {
        data satisfies string;
    }
    if (resp.type === 'string') {
        resp.resp.data satisfies string;
    }    
}
```

----------------------------------------

TITLE: Demonstrating Private Name Field Access Error in TypeScript Class Inheritance
DESCRIPTION: This code shows how TypeScript handles private name fields in class inheritance. The error occurs because a private field (#prop) defined in Base class cannot be accessed in the Derived class, even though Derived extends Base. TypeScript throws error TS18013 to enforce this encapsulation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameFieldDerivedClasses.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base {
    #prop: number = 123;
    static method(x: Derived) {
        console.log(x.#prop);
    }
}
class Derived extends Base {
    static method(x: Derived) {
        console.log(x.#prop);
                      ~~~~~
!!! error TS18013: Property '#prop' is not accessible outside class 'Base' because it has a private identifier.
    }
}

```

----------------------------------------

TITLE: Exporting Interface and Function in TypeScript
DESCRIPTION: This snippet illustrates how to export an interface and a function from a TypeScript module. It defines the Thing interface and a constant x, which is a function that returns Thing type, although it is currently set to null.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSourceTs(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// esm format file
export interface Thing {}
export const x: () => Thing = null as any;
```

----------------------------------------

TITLE: Class Method Bind Type Checking
DESCRIPTION: Demonstrates TypeScript's strict type checking for binding class methods, including context and argument type validation
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictBindCallApply1.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
let f10 = c.foo.bind(c);
let f11 = c.foo.bind(c, 10);
let f12 = c.foo.bind(c, 10, "hello");
let f13 = c.foo.bind(c, 10, 20);  // Error
let f14 = c.foo.bind(undefined);  // Error
```

----------------------------------------

TITLE: Generic Function Returning Type in JavaScript
DESCRIPTION: Illustrates a generic function 'g' that takes a parameter and returns a function yielding the same parameter, displaying the flexibility of template types. It showcases the return of immediate function call results, being beneficial in type-safe assignments in TypeScript contexts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocTemplateTag.errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
/**
 * @param {T} a
 * @template T
 * @returns {function(): T}
 */
function g(a) {
    return () => a
}
let s = g('hi')()
```

----------------------------------------

TITLE: Defining Root Interface and Function in TypeScript
DESCRIPTION: Declares a RootProps interface and exports a function that returns this interface type. This is defined in a separate root node_modules package.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitCommonJsModuleReferencedType.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
export interface RootProps {}

export function bar(): RootProps;
```

----------------------------------------

TITLE: Demonstrating Type Constraints in TypeScript
DESCRIPTION: This TypeScript snippet defines two generic functions, `dupe` and `dupeAndGetDist`, to illustrate how generic types can lead to type inference errors due to missing constraints. The function `dupeAndGetDist` attempts to call a method `getDist` on a generic type `U`, which lacks a constraint to ensure `getDist` exists on `U`. This results in a TypeScript error. The snippet highlights the importance of specifying constraints when working with generics.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCallSpecializedToTypeArg.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function dupe<T>(x: T): T {
  return x;
}
function dupeAndGetDist<U>(x: U): U {
  var y = dupe(x); //<-- dupe has incorrect type here
  y.getDist();     //<-- this requires a missing constraint, but it\'s not caught
    ~~~~~~~
!!! error TS2339: Property 'getDist' does not exist on type 'U'.
  return y;
}
```

----------------------------------------

TITLE: Using JSX in React with TypeScript
DESCRIPTION: This snippet demonstrates the proper configuration and usage of JSX with React in a TypeScript file. It includes necessary references and jsxImportSource comments to correctly process React JSX. The snippet expects a valid React setup with all dependencies correctly installed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxJsxsCjsTransformKeyPropCustomImportPragma(jsx=react-jsxdev).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```

    /// <reference path=\"/.lib/react16.d.ts\" />
    /* @jsxImportSource react */
    import \"./preact\";
    const props2 = { answer: 42 }
    const a2 = <div key=\"foo\" {...props2}>text</div>;
    const b2 = <div {...props2} key=\"bar\">text</div>;
    
    export {};

```

----------------------------------------

TITLE: Destructuring and Initializing with Object Literals - TypeScript
DESCRIPTION: This snippet demonstrates another way to initialize variables using object destructuring. It showcases how to merge object properties while destructuring them into variables, particularly with nested objects and default values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatement1.sourcemap.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
var c = hello, { name: nameC, skill: skillC } = { name: "Edger", skill: "cutting edges" }, c1 = hello;
```

----------------------------------------

TITLE: Error on Boolean Assignment in TypeScript
DESCRIPTION: This snippet points out a TypeScript type error that occurs when trying to assign a 'Boolean' object to a primitive 'boolean' type, emphasizing the stated preference for using the primitive type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nativeToBoxedTypes.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
    var B = new Boolean();
    var b = true;
    b = B;
    ~
!!! error TS2322: Type 'Boolean' is not assignable to type 'boolean'.
!!! error TS2322:   'boolean' is a primitive, but 'Boolean' is a wrapper object. Prefer using 'boolean' when possible.
```

----------------------------------------

TITLE: Destructuring Function Without Type Annotations
DESCRIPTION: Function demonstrating basic array destructuring without explicit type annotations, causing implicit 'any' type errors
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringWithLiteralInitializers2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f00([x, y]) {}
```

----------------------------------------

TITLE: Implementing mapValues Utility Function in TypeScript
DESCRIPTION: Defines a mapValues function that transforms dictionary values using a callback function, similar to Lodash's implementation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emptyObjectNotSubtypeOfIndexSignatureContainingObject1.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function mapValues<T, TResult>(
  obj: Dictionary<T> | NumericDictionary<T> | null | undefined,
  callback: DictionaryIterator<T, TResult>
): Dictionary<TResult> {
  return null as any;
}
```

----------------------------------------

TITLE: Failed Module Import in CommonJS Format
DESCRIPTION: Demonstrates a TypeScript error when attempting to import a non-existent module './mod' using CommonJS require syntax. The code is wrapped in an IIFE with mock CommonJS parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noCrashOnParameterNamedRequire.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
(function(require, module, exports){
    const mod = require("./mod");
    mod.foo;
})(null, null, null);
```

----------------------------------------

TITLE: Null to String Assignment Error in TypeScript
DESCRIPTION: This snippet showcases a type error caused by assigning `null` to a property declared as a string type in TypeScript.  The `twice` property within the `Installer` class, which has a type of `string | undefined`, is later assigned the value `null` within the `second` method, leading to the error TS2322. This error occurs because null is not assignable to string unless the `strictNullChecks` compiler option is disabled or the type explicitly includes null.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeFromJSConstructor.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
        this.twice = null // error
        ~~~~~~~~~~
!!! error TS2322: Type 'null' is not assignable to type 'string'.

```

----------------------------------------

TITLE: Implementing Merged Class and Interface in TypeScript
DESCRIPTION: This snippet defines a class C1 with a property x, and an interface C1 with a property y. It then demonstrates various implementations of C1, showing errors when properties are missing and a correct implementation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classImplementsMergedClassInterface.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare class C1 {
    x : number;
}

interface C1 {
    y : number;
}

class C2 implements C1 { // error -- missing x
}

class C3 implements C1 { // error -- missing y
    x : number;
}

class C4 implements C1 { // error -- missing x
    y : number;
}

class C5 implements C1 { // okay
    x : number;
    y : number;
}
```

----------------------------------------

TITLE: Destructuring with Default Value in TypeScript
DESCRIPTION: This snippet demonstrates destructuring an object with a default value.  It shows how to assign a default value to 'nameA' if the 'name' property does not exist.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
2 >for ({name: nameA = "noName" } of 
3 >     getRobots()
```

----------------------------------------

TITLE: Defining Generic Interfaces A and B
DESCRIPTION: This snippet defines two generic interfaces, `A` and `B`. Interface `A` has a `variant` property with the literal type 'a' and a `value` property of type `T`. Interface `B` has a `variant` property with the literal type 'b' and a `value` property of type `Array<T>`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
    interface A<T> { variant: 'a', value: T }
    
    interface B<T> { variant: 'b', value: Array<T> }

```

----------------------------------------

TITLE: Defining Interface Inheritance Hierarchy in TypeScript
DESCRIPTION: Defines a base interface and two derived interfaces that extend it with additional properties. These interfaces are used to test assignment compatibility with string index signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithStringIndexer2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Base { foo: string; }
interface Derived extends Base { bar: string; }
interface Derived2 extends Derived { baz: string; }
```

----------------------------------------

TITLE: Defining TypeScript Enums and Exports
DESCRIPTION: Defines SyntaxKind and SymbolFlags enums and exports them with different methods. SyntaxKind is exported as a type while SymbolFlags is exported as a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enums.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
enum SyntaxKind {
  ImportClause,
  ExportDeclaration
}

const enum SymbolFlags {
  Type = "Type",
  Value = "Value"
}

export type { SyntaxKind };
export { SymbolFlags };
```

----------------------------------------

TITLE: Referencing and Using a Class in TypeScript
DESCRIPTION: This snippet shows how to reference another TypeScript file and define a class in the referenced file. Similar to the previous snippet, it includes the definition of a class and the instantiation of an object, followed by a function returning the object instance. This code assumes there is a reference to 'm1.ts'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootWithNoSourceMapOption/amd/sourceRootWithNoSourceMapOption.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
/// <reference path='m1.ts'/>
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: Handling Mixed Child Types in React Components (TypeScript)
DESCRIPTION: This snippet illustrates the Blah3 component that accepts either a single function or an array of functions for its children. It demonstrates TypeScript's flexibility with prop types while still enforcing type safety.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxChildrenIndividualErrorElaborations.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
type Cb = (x: number) => string;
interface PropsMixed {
  children: Cb | Cb[];
}

export function Blah3(props: PropsMixed) {
  return <></>;
}

// Incompatible child.
var a = <Blah3>
  {x => x}
  ~~~~~~~~
!!! error TS2322: Type '(x: number) => number' is not assignable to type 'Cb | Cb[]'.
!!! error TS2322:   Type '(x: number) => number' is not assignable to type 'Cb'.
!!! error TS2322:     Type 'number' is not assignable to type 'string'.
```

----------------------------------------

TITLE: TypeScript Control Flow Analysis with While Loops
DESCRIPTION: Demonstrates various scenarios of type narrowing and widening in while loops using union types. Shows type behavior with break, continue, and conditional assignments. Includes error case for invalid type comparison.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowWhileStatement.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
let cond: boolean;
function a() {
    let x: string | number;
    x = "";
    while (cond) {
        x; // string
    }
}
function b() {
    let x: string | number;
    x = "";
    while (cond) {
        x; // string
        x = 42;
        break;
    }
}
function c() {
    let x: string | number;
    x = "";
    while (cond) {
        x; // string
        x = undefined;
        if (typeof x === "string") continue;
        break;
    }
}
function d() {
    let x: string | number;
    x = "";
    while (x = x.length) {
        x; // number
        x = "";
    }
}
function e() {
    let x: string | number;
    x = "";
    while (cond) {
        x; // string | number
        x = 42;
        x; // number
    }
    x; // string | number
}
function f() {
    let x: string | number | boolean | RegExp | Function;
    x = "";
    while (cond) {
        if (cond) {
            x = 42;
            break;
        }
        if (cond) {
            x = true;
            continue;
        }
        x = /a/;
    }
    x; // string | number | boolean | RegExp
}
function g() {
    let x: string | number | boolean | RegExp | Function;
    x = "";
    while (true) {
        if (cond) {
            x = 42;
            break;
        }
        if (cond) {
            x = true;
            continue;
        }
        x = /a/;
    }
    x; // number
}
function h1() {
    let x: string | number | boolean;
    x = "";
    while (x > 1) {
        x; // string | number
        x = 1;
        x; // number
    }
    x; // string | number
}
declare function len(s: string | number): number;
function h2() {
    let x: string | number | boolean;
    x = "";
    while (cond) {
        x = len(x);
        x; // number
    }
    x; // string | number
}
function h3() {
    let x: string | number | boolean;
    x = "";
    while (cond) {
        x; // string | number
        x = len(x);
    }
    x; // string | number
}
```

----------------------------------------

TITLE: Export Default in TypeScript
DESCRIPTION: This snippet shows a default export in TypeScript, which does not throw any errors. It is a simple example of module exporting.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/modulePreserve4.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// b.ts
export default 0;
```

----------------------------------------

TITLE: Using Custom React Component with TypeScript Type Checking
DESCRIPTION: Demonstrates usage of the custom TestMod.Test component, showing TypeScript's ability to detect missing required props. Both examples should trigger type errors due to the missing 'reqd' prop.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution12.errors.txt#2025-04-21_snippet_3

LANGUAGE: TSX
CODE:
```
// Errors correctly
const T = TestMod.Test;
var t1 = <T />;

// Should error
var t2 = <TestMod.Test />;
```

----------------------------------------

TITLE: Accessing Non-existent Property on Empty Object in TypeScript
DESCRIPTION: This snippet demonstrates an attempt to access a non-existent property 'hello' on an empty object, resulting in a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyStringIndexerOnObject.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var a = {}["hello"];
```

----------------------------------------

TITLE: Defining classes A, B, and C with protected members in TypeScript
DESCRIPTION: This code defines three classes: A, B (which extends A), and C (which also extends A). Class A has protected members x and f. Class B has a protected member y and a method g which attempts to access members of A, B and C in various ways. Class C has a protected member z.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/protectedInstanceMemberAccessibility.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
    protected x: string;
    protected f(): string {
        return "hello";
    }
}

class B extends A {
    protected y: string;
    g() {
        var t1 = this.x;
        var t2 = this.f();
        var t3 = this.y;
        var t4 = this.z;     // error

        var s1 = super.x;    // error
        var s2 = super.f();
        var s3 = super.y;    // error
        var s4 = super.z;    // error

        var a: A;
        var a1 = a.x;    // error
        var a2 = a.f();  // error
        var a3 = a.y;    // error
        var a4 = a.z;    // error

        var b: B;
        var b1 = b.x;
        var b2 = b.f();
        var b3 = b.y;
        var b4 = b.z;    // error

        var c: C;
        var c1 = c.x;    // error
        var c2 = c.f();  // error
        var c3 = c.y;    // error
        var c4 = c.z;    // error
    }
}

class C extends A {
    protected z: string;
}
```

----------------------------------------

TITLE: Defining DOM Event Listener Methods - TypeScript
DESCRIPTION: Defines the standard methods for managing event listeners on a DOM Node: adding, dispatching, and removing events.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRecursiveInference.errors.txt#_snippet_40

LANGUAGE: typescript
CODE:
```
addEventListener: any;
dispatchEvent: any;
removeEventListener: any;
```

----------------------------------------

TITLE: Defining TypeScript Class with Private Field
DESCRIPTION: This TypeScript code snippet defines a class with a private field using ECMAScript private syntax. The snippet illustrates how to declare a private field and highlights the potential errors that occur when the ECMAScript version is not set to 2015 or higher. Additionally, it shows an error with type assignability due to missing properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateFieldAssignabilityFromUnknown.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export class Class {
  #field: any
  ~~~~~~
}
```

LANGUAGE: typescript
CODE:
```
const task: Class = {} as unknown;
      ~~~~
```

----------------------------------------

TITLE: Getter with Return Expression - TypeScript
DESCRIPTION: The `m3` getter method within class `C` returns a string, satisfying the requirement for a getter to return a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionsMissingReturnStatementsAndExpressions.errors.txt#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
        public get m3() {
            return "Okay, because this is a return expression.";
        }
```

----------------------------------------

TITLE: Correct Function Calls on CommonJS Imports (b.mts)
DESCRIPTION: This snippet demonstrates the correct way to call a function imported as a default export from a CommonJS module in a TypeScript ECMAScript module. By accessing the function as a property of the imported object (e.g., `a.default()`), the TypeScript compiler correctly identifies the function and allows the call. This is essential when working with mixed module types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleNodeDefaultImports(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
// should all work
a.default();
b.default();
c.default();
d.default();
self.default.default();
self.def.default();
```

----------------------------------------

TITLE: Node Package Configuration for ES and CJS
DESCRIPTION: This JSON snippet configures package exports in a TypeScript project, distinguishing module formats (ESM vs CJS) for different environments. It helps the TypeScript compiler and Node.js understand which version of a module to import based on the environment or import type. It serves as a guide for defining and managing module visibility and accessibility in complex projects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesConditionalPackageExports(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
    {
        "name": "package",
        "private": true,
        "type": "module",
        "exports": {
            "./cjs": "./index.cjs",
            "./mjs": "./index.mjs",
            ".": "./index.js"
        }
    }
```

----------------------------------------

TITLE: Defining Exportable Classes in TypeScript
DESCRIPTION: This snippet defines three classes (A, B, and X) that are exported for use in other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace5.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export class A {}
export class B {}
export class X {}
```

----------------------------------------

TITLE: Defining and Managing Instances in TypeScript Module m2.ts
DESCRIPTION: This snippet showcases the 'm2.ts' TypeScript module with a similar structure to 'm1.ts'. It defines a class 'm2_c1' with a public property 'm2_c1_p1' and provides a function 'm2_f1' to return an instance of this class. This code requires TypeScript configuration and demonstrates basic class instantiation and management.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/outMultifolderSpecifyOutputFile/node/outMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
var m2_a1 = 10;
class m2_c1 {
    public m2_c1_p1: number;
}

var m2_instance1 = new m2_c1();
function m2_f1() {
    return m2_instance1;
}
```

----------------------------------------

TITLE: Main Package JSON Structure - TypeScript
DESCRIPTION: This snippet shows the package.json for the main package, which also specifies its name, privacy status, module type, and entry point for exports. The configuration is essential for setting up module type and ensuring proper resolution of imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSpecifierGenerationPattern(module=node18).errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module",
    "exports": "./index.js"
}
```

----------------------------------------

TITLE: Object Type Narrowing in TypeScript
DESCRIPTION: Demonstrates various type narrowing scenarios in TypeScript, including instanceof checks, typeof guards, and handling of object types. Shows common type errors when attempting to assign incompatible types or access properties on never type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nonPrimitiveNarrow.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Narrow {
    narrowed: boolean
}

var a: object

if (a instanceof Narrow) {
    a.narrowed; // ok
    a = 123; // error
}

if (typeof a === 'number') {
    a.toFixed(); // error, never
}

var b: object | null

if (typeof b === 'object') {
   b.toString(); // ok, object | null
} else {
   b.toString(); // error, never
}
```

----------------------------------------

TITLE: Implementing Class Methods with Arrow Function Closures in TypeScript
DESCRIPTION: Each method follows a consistent pattern where it declares a variable of the return type, defines an arrow function that captures 'this' in a closure, and returns the variable. This pattern appears to be designed for testing TypeScript's type system with complex generic types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
phillipsii() : macrorhinos.konganensis { var x : macrorhinos.konganensis; () => { var y = this; }; return x; }
```

----------------------------------------

TITLE: Decorating Static Private Getter in TypeScript
DESCRIPTION: This snippet shows the TypeScript source for a static private getter `#x` decorated with two `@dec` decorators. The emitted JavaScript creates a variable `_static_private_get_x_decorators` holding an array of these decorators.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-sourceMap(target=es2022).sourcemap.txt#_snippet_16

LANGUAGE: TypeScript
CODE:
```
@\ndec\n                                                   @\ndec\n    static get #x() { return 1; }
```

LANGUAGE: JavaScript
CODE:
```
_static_private_get_x_decorators = [dec, dec];
```

----------------------------------------

TITLE: Decorating Static Private Field in TypeScript
DESCRIPTION: This snippet shows the TypeScript source for a static private field `#y` decorated with two `@dec` decorators. The emitted JavaScript creates a variable `_static_private_y_decorators` holding an array of these decorators.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-sourceMap(target=es2022).sourcemap.txt#_snippet_18

LANGUAGE: TypeScript
CODE:
```
@\ndec\n                                                @\ndec\n    static #y = 1;
```

LANGUAGE: JavaScript
CODE:
```
_static_private_y_decorators = [dec, dec];
```

----------------------------------------

TITLE: Module Import Usage - TypeScript
DESCRIPTION: Imports and uses the namespace correctly through module import, demonstrating proper namespace access syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace2(module=commonjs).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import * as foo from './1'

foo.ns.a;
foo.ns.b;
```

----------------------------------------

TITLE: TypeScript Interface Definition
DESCRIPTION: A TypeScript file defining and exporting an interface 'Foo' with a numeric property 'x'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitToDeclarationDirWithoutCompositeAndDeclarationOptions.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface Foo {
    x: number;
}
export default Foo;
```

----------------------------------------

TITLE: Module Declarations in TypeScript
DESCRIPTION: Defines various module types including interfaces, variables, modules, functions, and classes. These declarations are used in the import and export examples above.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ExportEqualsInterop.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
declare module "interface" {
    interface Foo {
        x: number;
        y: number;
    }
    export = Foo;
}

declare module "variable" {
    var Foo: {
        a: number;
        b: number;
    }
    export = Foo;
}

declare module "interface-variable" {
    interface Foo {
        x: number;
        y: number;
    }
    var Foo: {
        a: number;
        b: number;
    }
    export = Foo;
}

declare module "module" {
    module Foo {
        export var a: number;
        export var b: number;
    }
    export = Foo;
}

declare module "interface-module" {
    interface Foo {
        x: number;
        y: number;
    }
    module Foo {
        export var a: number;
        export var b: number;
    }
    export = Foo;
}

declare module "variable-module" {
    module Foo {
        interface Bar {
            x: number;
            y: number;
        }
    }
    var Foo: {
        a: number;
        b: number;
    }
    export = Foo;
}

declare module "function" {
    function foo();
    export = foo;
}

declare module "function-module" {
    function foo();
    module foo {
        export var a: number;
        export var b: number;
    }
    export = foo;
}

declare module "class" {
    class Foo {
        x: number;
        y: number;
    }
    export = Foo;
}

declare module "class-module" {
    class Foo {
        x: number;
        y: number;
    }
    module Foo {
        export var a: number;
        export var b: number;
    }
    export = Foo;
}
```

----------------------------------------

TITLE: package.json Configuration (Root)
DESCRIPTION: This snippet presents the package.json configuration for the root project, setting 'type' to 'module' and defining exports. This indicates that the project uses ES modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsBlocksSpecifierResolution(module=node18).errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
    {
        "name": "package",
        "private": true,
        "type": "module",
        "exports": "./index.js"
    }
```

----------------------------------------

TITLE: Defining 'pkg' Package Exports in JSON Format
DESCRIPTION: Specifies the exports configuration for a package named 'pkg' in a 'package.json' file. It defines distinct module keys for 'import' and 'require', pointing to corresponding JavaScript files. This configuration allows Node.js and build tools to differentiate which module system the exports are compatible with.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportAttributesModeDeclarationEmit1(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "exports": {
        "import": "./import.js",
        "require": "./require.js"
    }
}
```

----------------------------------------

TITLE: Main Module Implementation
DESCRIPTION: Main module that imports both Foo classes and attempts to use the copy method, resulting in a compile error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNamesUnique-2.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { Foo as A } from "./a";
import { Foo as B } from "./b";

const a = new A();
const b = new B();
a.copy(b); // error
```

----------------------------------------

TITLE: Exporting a Person Object in JavaScript
DESCRIPTION: This JavaScript snippet exports a simple object representing a person with properties name and age, emphasizing the export of literal objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesImportHigher/amd/nodeModulesImportHigher.errors.txt#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
exports.person = {
    "name": "John Doe",
    "age": 42
}
```

----------------------------------------

TITLE: Defining Variables, Class and Function in m1.ts
DESCRIPTION: This TypeScript code defines a variable (m1_a1), a class (m1_c1) with a public property, an instance of the class (m1_instance1), and a function (m1_f1) that returns the class instance. This snippet illustrates basic TypeScript syntax for variable declaration, class definition, object instantiation and function declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootRelativePathMixedSubfolderSpecifyOutputFile/node/sourceRootRelativePathMixedSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    var m1_a1 = 10;
    class m1_c1 {
        public m1_c1_p1: number;
    }
    
    var m1_instance1 = new m1_c1();
    function m1_f1() {
        return m1_instance1;
    }
```

----------------------------------------

TITLE: Defining a TypeScript module (m1.ts)
DESCRIPTION: This snippet defines a TypeScript module 'm1' with a variable, class, instance, and function. It shows the basic structure of a TypeScript module with different elements, demonstrating the standard module definition syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcemapSimpleSpecifyOutputFile/node/sourcemapSimpleSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    var m1_a1 = 10;
    class m1_c1 {
        public m1_c1_p1: number;
    }
    
    var m1_instance1 = new m1_c1();
    function m1_f1() {
        return m1_instance1;
    }
```

----------------------------------------

TITLE: Channel Creation Function Implementation
DESCRIPTION: Implements a generic function makeNewChannel that creates a new channel of specified type with type safety. Includes usage examples showing type inference and property assignment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/complicatedIndexedAccessKeyofReliesOnKeyofNeverUpperBound.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export function makeNewChannel<T extends ChannelType>(type: T): NewChannel<ChannelOfType<T>> {
    const localChannelId = `blahblahblah`;
    return { type, localChannelId };
}

const newTextChannel = makeNewChannel('text');
// This should work
newTextChannel.phoneNumber = '613-555-1234';

const newTextChannel2 : NewChannel<TextChannel> = makeNewChannel('text');
// Compare with this, which ofc works.
newTextChannel2.phoneNumber = '613-555-1234';
```

----------------------------------------

TITLE: TypeScript Function Declarations with Implicit Any Types
DESCRIPTION: Collection of function declarations showing different scenarios of TypeScript type inference and explicit type annotations. Includes examples of compiler errors when return types or parameter types are not explicitly specified with noImplicitAny enabled.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyFunctions.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function f1();

declare function f2(): any;

function f3(x) {
}

function f4(x: any) {
    return x;
}

function f5(x: any): any {
    return x;
}

function f6(x: string, y: number);
function f6(x: string, y: string): any;
function f6(x: string, y) {
    return null;
}
```

----------------------------------------

TITLE: Creating Class with Private Properties in TypeScript
DESCRIPTION: This snippet defines a class 'classWithTwoPrivate' with two private properties. The constructor requires two parameters to initialize these private properties. This demonstrates how TypeScript enforces encapsulation through access modifiers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability41.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
module __test2__ {
        export        class classWithTwoPrivate<T,U> { constructor(private one: T, private two: U) {} }  var x6 = new classWithTwoPrivate(1, "a");;
        export var __val__x6 = x6;
    }
```

----------------------------------------

TITLE: Referencing and Defining Variables, Class, and Function in TypeScript (test.ts)
DESCRIPTION: This snippet includes a reference path to `ref/m1.ts`, then defines its own variable `a1`, class `c1` with a public property, an instance of the class `instance1`, and a function `f1` that returns the class instance. It demonstrates how to reference external TypeScript files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcemapSubfolderSpecifyOutputFile/node/sourcemapSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
/// <reference path='ref/m1.ts'/>
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: Demonstrating Type Errors in Chained Assignments in TypeScript
DESCRIPTION: This code example shows how TypeScript enforces property requirements when assigning objects between classes. Three classes with different property sets are defined, and assignments between instances trigger errors when a source object lacks required properties of the target type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/chainedAssignment1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class X {
    constructor(public z) { }
    a: number;
}

class Y {
    constructor(public z) {
    }
    a: number;
    b: string;
}

class Z {
    z: any;
    c: string;
}

var c1 = new X(3);
var c2 = new Y(5);
var c3 = new Z();
c1 = c2 = c3; // a bug made this not report the same error as below
c2 = c3; // Error TS111: Cannot convert Z to Y
```

----------------------------------------

TITLE: Implementing Class with Array Parameter in TypeScript
DESCRIPTION: This snippet presents a class 'Bar4' with a constructor that takes a parameter of type Array. It demonstrates an error where the Array type is used without a type argument.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedDeclarationsAddUndefined2.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
export class Bar4 {
    constructor(private x: Array) {}
}
```

----------------------------------------

TITLE: Import Meta Assignments and Interface Augmentation in TypeScript
DESCRIPTION: Demonstrates attempts to assign to import.meta properties and augment the ImportMeta interface. It shows usage of import.meta in various contexts, including property access and destructuring.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importMeta(module=commonjs,target=es5).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
export const foo: ImportMeta = import.meta.blah = import.meta.blue = import.meta;
import.meta = foo;

// @Filename augmentations.ts
declare global {
  interface ImportMeta {
    wellKnownProperty: { a: number, b: string, c: boolean };
  }
}

const { a, b, c } = import.meta.wellKnownProperty;
```

----------------------------------------

TITLE: TypeScript Class with Proper Super Call Implementation
DESCRIPTION: Shows the correct implementation of a derived class with a constructor that properly calls super(), following TypeScript's inheritance requirements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classUpdateTests.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
class G extends D {
	public p1 = 0;
	constructor() { super(); } // NO ERROR
}
```

----------------------------------------

TITLE: For-Of Loop Type Error in TypeScript
DESCRIPTION: This code demonstrates a type error in TypeScript where a variable of type 'string' is used to iterate over an array containing both numbers and strings. TypeScript detects that the variable 'v' cannot hold values of type 'number' that would be assigned during iteration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/for-of12.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var v: string;
for (v of [0, ""].values()) { }
```

----------------------------------------

TITLE: Error Handling for String Assignments in TypeScript
DESCRIPTION: This snippet outlines TypeScript errors that arise when assigning arrays to primitive string types. Similar to number assignments, various array types such as number[], string[], and (string | number)[] cannot be assigned to a string primitive, showing strict type enforcement in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentIndexedToPrimitives.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const s1: string = [0];
          ~~
!!! error TS2322: Type 'number[]' is not assignable to type 'string'.
    const s2: string = ["0"];
          ~~
!!! error TS2322: Type 'string[]' is not assignable to type 'string'.
    const s3: string = [0, "1"];
          ~~
!!! error TS2322: Type '(string | number)[]' is not assignable to type 'string'.
    const s4: "01" = ["0", "1"];
          ~~
!!! error TS2322: Type 'string[]' is not assignable to type '"01"'.
```

----------------------------------------

TITLE: Exporting Incorrect Object Type
DESCRIPTION: Attempts to export an object with an undefined property 'c', causing a TypeScript type error
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocTypeTagOnExportAssignment1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
/** @type {Foo} */
export default { c: false };
```

----------------------------------------

TITLE: Handling Unknown Types with Functions in TypeScript
DESCRIPTION: This section includes several functions that illustrate how to work with unknown types, as well as examples handling nullable, undefined, and generic types. The code aims to demonstrate various ways to ensure type safety and prevent type-related errors, crucial in TypeScript. Key inputs include any data type that might be unknown, and outputs usually demonstrate safe type operations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownControlFlow.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type T01 = {} & string;  // {} & string
type T02 = {} & 'a';  // 'a'
type T03 = {} & object;  // object
type T04 = {} & { x: number };  // { x: number }
type T05 = {} & null;  // never
type T06 = {} & undefined;  // never
type T07 = undefined & void;  // undefined
    
type T10 = string & {};  // Specially preserved
type T11 = number & {};  // Specially preserved
type T12 = bigint & {};  // Specially preserved

function f01(u: unknown) {
    let x1: {} = u;  // Error
        ~~
!!! error TS2322: Type 'unknown' is not assignable to type '{}'.
    let x2: {} | null | undefined = u;
    let x3: {} | { x: string } | null | undefined = u;
    let x4: ThisOrThatNode | null | undefined = u;
}

function f10(x: unknown) {
    if (x) {
        x;  // {}
    }
    else {
        x;  // unknown
    }
    if (!x) {
        x;  // unknown
    }
    else {
        x;  // {}
    }
}

function f11<T>(x: T) {
    if (x) {
        x;  // T & {}
    }
    else {
        x;  // T
    }
    if (!x) {
        x;  // T
    }
    else {
        x;  // T & {}
    }
}

function f12<T extends {}>(x: T) {
    if (x) {
        x;  // T
    }
    else {
        x;  // T
    }
}

function f20(x: unknown) {
    if (x !== undefined) {
        x;  // {} | null
    }
    else {
        x;  // undefined
    }
    if (x !== null) {
        x;  // {} | undefined
    }
    else {
        x;  // null
    }
    if (x !== undefined && x !== null) {
        x;  // {}
    }
    else {
        x;  // null | undefined
    }
    if (x != undefined) {
        x;  // {}
    }
    else {
        x;  // null | undefined
    }
    if (x != null) {
        x;  // {}
    }
    else {
        x;  // null | undefined
    }
}

function f21<T>(x: T) {
    if (x !== undefined) {
        x;  // T & ({} | null)
    }
    else {
        x;  // T
    }
    if (x !== null) {
        x;  // T & ({} | undefined)
    }
    else {
        x;  // T
    }
    if (x !== undefined && x !== null) {
        x;  // T & {}
    }
    else {
        x;  // T
    }
    if (x != undefined) {
        x;  // T & {}
    }
    else {
        x;  // T
    }
    if (x != null) {
        x;  // T & {}
    }
    else {
        x;  // T
    }
}

function f22<T extends {} | undefined>(x: T) {
    if (x !== undefined) {
        x;  // T & {}
    }
    else {
        x;  // T
    }
    if (x !== null) {
        x;  // T
    }
    else {
        x;  // T
    }
    if (x !== undefined && x !== null) {
        x;  // T & {}
    }
    else {
        x;  // T
    }
    if (x != undefined) {
        x;  // T & {}
    }
    else {
        x;  // T
    }
    if (x != null) {
        x;  // T & {}
    }
    else {
        x;  // T
    }
}

function f23<T>(x: T | undefined | null) {
    if (x !== undefined) {
        x;  // T & {} | null
    }
    if (x !== null) {
        x;  // T & {} | undefined
    }
    if (x != undefined) {
        x;  // T & {}
    }
    if (x != null) {
        x;  // T & {}
    }
}

function f30(x: {}) {
    if (typeof x === "object") {
        x;  // object
    }
}

function f31<T>(x: T) {
    if (typeof x === "object") {
        x;  // T & object | T & null
    }
    if (x && typeof x === "object") {
        x;  // T & object
    }
    if (typeof x === "object" && x) {
        x;  // T & object
    }
}

function f32<T extends {} | undefined>(x: T) {
    if (typeof x === "object") {
        x;  // T & object
    }
}
```

LANGUAGE: typescript
CODE:
```
function possiblyNull<T>(x: T) {
    return !!true ? x : null;  // T | null
}

function possiblyUndefined<T>(x: T) {
    return !!true ? x : undefined;  // T | undefined
}

function possiblyNullOrUndefined<T>(x: T) {
    return possiblyUndefined(possiblyNull(x));  // T | null | undefined
}

function ensureNotNull<T>(x: T) {
    if (x === null) throw Error();
    return x;  // T & ({} | undefined)
}

function ensureNotUndefined<T>(x: T) {
    if (x === undefined) throw Error();
    return x;  // T & ({} | null)
}

function ensureNotNullOrUndefined<T>(x: T) {
    return ensureNotUndefined(ensureNotNull(x));  // T & {}
}

function f40(a: string | undefined, b: number | null | undefined) {
    let a1 = ensureNotNullOrUndefined(a);  // string
    let b1 = ensureNotNullOrUndefined(b);  // number
}

type QQ<T> = NonNullable<NonNullable<NonNullable<T>>>;

function f41<T>(a: T) {
    let a1 = ensureNotUndefined(ensureNotNull(a));  // T & {}
    let a2 = ensureNotNull(ensureNotUndefined(a));  // T & {}
    let a3 = ensureNotNull(ensureNotNull(a));  // T & {} | T & undefined
    let a4 = ensureNotUndefined(ensureNotUndefined(a));  // T & {} | T & null
    let a5 = ensureNotNullOrUndefined(ensureNotNullOrUndefined(a));  // T & {}
    let a6 = ensureNotNull(possiblyNullOrUndefined(a));  // T & {} | undefined
    let a7 = ensureNotUndefined(possiblyNullOrUndefined(a));  // T & {} | null
    let a8 = ensureNotNull(possiblyUndefined(a));  // T & {} | undefined
    let a9 = ensureNotUndefined(possiblyNull(a));  // T & {} | null
}
```

LANGUAGE: typescript
CODE:
```
function deepEquals<T>(a: T, b: T): boolean {
    if (typeof a !== 'object' || typeof b !== 'object' || !a || !b) {
        return false;
    }
    if (Array.isArray(a) || Array.isArray(b)) {
        return false;
    }
    if (Object.keys(a).length !== Object.keys(b).length) { // Error here
        return false;
    }
    return true;
}

function foo<T>(x: T | null) {
    let y = x;
    if (y !== null) {
        y;
    }
}

function ff1<T>(t: T, k: keyof T) {
    t[k];
}

function ff2<T>(t: T & {}, k: keyof T) {
    t[k];
}

function ff3<T>(t: T, k: keyof (T & {})) {
    t[k];  // Error
    ~~~~
!!! error TS2536: Type 'keyof (T & {})' cannot be used to index type 'T'.
}

function ff4<T>(t: T & {}, k: keyof (T & {})) {
    t[k];
}

ff1(null, 'foo');  // Error
          ~~~~~
!!! error TS2345: Argument of type '"foo"' is not assignable to parameter of type 'never'.
ff2(null, 'foo');  // Error
    ~~~~
!!! error TS2345: Argument of type 'null' is not assignable to parameter of type 'never'.
ff3(null, 'foo');
ff4(null, 'foo');  // Error
    ~~~~
!!! error TS2345: Argument of type 'null' is not assignable to parameter of type 'never'.

function fx0<T>(value: T & ({} | null)) {
    if (value === 42) {
        value;  // T & {}
    }
    else {
        value;  // T & ({} | null)
    }
}

function fx1<T extends unknown>(value: T & ({} | null)) {
    if (value === 42) {
        value;  // T & {}
    }
    else {
        value;  // T & ({} | null)
    }
}

function fx2<T extends {}>(value: T & ({} | null)) {
    if (value === 42) {
        ~~~~~~~~~~~~
!!! error TS2367: This comparison appears to be unintentional because the types 'T' and 'number' have no overlap.
        value;  // T & {}
    }
    else {
        value;  // T & ({} | null)
    }
}

function fx3<T extends {} | undefined>(value: T & ({} | null)) {
    if (value === 42) {

```

----------------------------------------

TITLE: Correct Value Import Usage
DESCRIPTION: Shows correct usage of importing and using enum values by using regular import instead of import type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enums.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { SymbolFlags } from './a';
import type { TypeFlag } from './b';
const flags: TypeFlag = SymbolFlags.Type;
```

----------------------------------------

TITLE: Generic Class with Constructor Overloads and Module Merging
DESCRIPTION: Shows a generic class with constructor overloads properly merged with a module. Class C2 takes a type parameter T and has multiple constructor signatures that are correctly implemented.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constructSignaturesWithOverloads2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class C2<T> {
    constructor(x: T, y?: string);
    constructor(x: T, y: string);
    constructor(x: T) { }
}
module C2 {
    export var x = 1;
}

var r2 = new C2(1, '');
```

----------------------------------------

TITLE: Type Error Demonstration with Generic Function Arguments
DESCRIPTION: Demonstrates type errors where functions returning string are incorrectly used where Date return types are expected. Shows both named function and lambda expression cases.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTypingOfGenericFunctionTypedArguments1.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var c2: Collection<number>;
var _: Combinators;

var f = (x: number) => { return x.toFixed() };
var r5 = _.forEach<number>(c2, f); 
var r6 = _.forEach<number>(c2, (x) => { return x.toFixed() }); 
```

----------------------------------------

TITLE: Missing Initializer Error in Derived Class Property
DESCRIPTION: Similar to the previous snippet, this demonstrates the same error in a derived class. The property 'p' is declared in the base class without an initializer, and the derived class also declares it without initialization or assignment in the constructor, leading to an error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedUninitializedPropertyDeclaration.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
class D extends C {
 p: 'hi'; // error
 ~
!!! error TS2564: Property 'p' has no initializer and is not definitely assigned in the constructor.
 }
```

----------------------------------------

TITLE: TypeScript Object Literal Type Mismatch
DESCRIPTION: Demonstrates a type error where an object literal with properties {id, name} is being assigned to a type that only allows {id}. The compiler catches the extra 'name' property as an error since it's not part of the declared type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping17.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var foo: {id:number;} = {id:4}; foo = {id: 5, name:"foo"};
```

----------------------------------------

TITLE: Generic Function with Multiple Type Parameters
DESCRIPTION: Demonstrates type mismatch error when calling a generic function with incorrect argument type. The function expects a string but receives a number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeArgumentInferenceErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function someGenerics1<T, U>(n: T, m: number) { }
someGenerics1<string, number>(3, 4); // Error
```

----------------------------------------

TITLE: Destructuring Assignment with Console Output in TypeScript
DESCRIPTION: TypeScript code showing object destructuring with default values and nested property assignments, followed by console logging. The code includes detailed source mapping and demonstrates TypeScript's type system with complex object structures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_44

LANGUAGE: typescript
CODE:
```
name: nameA = "noName",
skills: {
    primary: primaryA = "primary",
    secondary: secondaryA = "secondary"
} = { primary: "noSkill", secondary: "noSkill" }
console.log(nameA);
```

----------------------------------------

TITLE: Defining Enum in TypeScript
DESCRIPTION: Defines a constant enum named 'Enum' with a single member 'One' set to value 1.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importElisionConstEnumMerge1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export const enum Enum {
  One = 1,
}
```

----------------------------------------

TITLE: Declaring Class C in TypeScript
DESCRIPTION: This snippet defines an empty class named 'C' within the TypeScript file 'fileC.ts'. It serves as a base class with no properties or methods defined. It can be extended or referenced by other classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/rootDirectoryErrors/node/rootDirectoryErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    }
```

----------------------------------------

TITLE: Freezing Array in TypeScript with Type Error
DESCRIPTION: Shows freezing an array and attempting to modify it, resulting in type errors. Demonstrates that frozen arrays are read-only and type-safe.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectFreeze.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
const a = Object.freeze([1, 2, 3]);
a[0] = a[2].toString();
```

----------------------------------------

TITLE: Demonstrating Interface Property Type Mismatch in TypeScript
DESCRIPTION: This code demonstrates a TypeScript error (TS2717) that occurs when the same property is declared with different types in multiple declarations of the same interface. The 'bold' property is first declared as a method returning a string, then incorrectly redeclared as a string property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/methodSignatureHandledDeclarationKindForSymbol.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Foo {
    bold(): string;
}

interface Foo {
    bold: string;
}
```

----------------------------------------

TITLE: Incorrectly Using Type Import as Value in TypeScript
DESCRIPTION: Attempts to use 'a' (imported as a type) as a value, resulting in a TypeScript error in d.ts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace2.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { a } from './c';
new a.A(); // Error
```

----------------------------------------

TITLE: TypeScript Let Declaration Scoping Examples
DESCRIPTION: Comprehensive demonstration of let declaration scoping in different contexts including global scope, control flows, functions, classes, and modules. Shows how let creates block-scoped variables and includes various use cases including error cases with 'with' statements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/letDeclarations-scopes.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// global
let l = "string";

var n: number;

// Control flow statements with blocks
if (true) {
    let l = 0;
    n = l;
}
else {
    let l = 0;
    n = l;
}

while (true) {
    let l = 0;
    n = l;
}

do {
   let l = 0;
    n = l;
} while (true);

var obj;
with (obj) {
    let l = 0;
    n = l;
}

for (var i = 0; i < 10; i++) {
    let l = 0;
    n = l;
}

for (var i2 in {}) {
    let l = 0;
    n = l;
}

if (true) {
    label: let l = 0;
    n = l;
}

while (false) {
    label2: label3: label4: let l = 0;
    n = l;
}

for (let l = 0; n = l; l++) {
    let l = true;
    var b3: boolean = l;
}

for (let l in {}) {

}

// Try/catch/finally
try {
    let l = 0;
    n = l;
}
catch (e) {
    let l = 0;
    n = l;
}
finally {
    let l = 0;
    n = l;
}

// Switch
switch (0) {
    case 0:
        let l = 0;
        n = l;
        break;
}

// blocks
{
    let l = 0;
    n = l;
    {
        let l = false;
        var b: boolean = l;
    }
}

// functions
function F() {
    let l = 0;
    n = l;
}

var F2 = () => {
    let l = 0;
    n = l;
};

var F3 = function () {
    let l = 0;
    n = l;
};

// modules
module m {
    let l = 0;
    n = l;

    {
       let l = false;
       var b2: boolean = l;
    }

    lable: let l2 = 0;
}

// methods
class C {
    constructor() {
        let l = 0;
        n = l;
    }

    method() {
        let l = 0;
        n = l;
    }

    get v() {
        let l = 0;
        n = l;
        return n;
    }

    set v(value) {
        let l = 0;
        n = l;
    }
}

// object literals
var o = {
    f() {
        let l = 0;
        n = l;
    },
    f2: () => {
        let l = 0;
        n = l;
    }
}
```

----------------------------------------

TITLE: Implementing a Simple Generic Store with Type Narrowing in TypeScript
DESCRIPTION: This snippet demonstrates a SimpleStore class that manages entries of NumClass or StrClass types. It shows how type narrowing works in a one-dimensional dictionary context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/quickinfoTypeAtReturnPositionsInaccurate.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class SimpleStore<Entries extends { [index: string]: NumClass<number> | StrClass<string> }> {
    private entries = { } as Entries;

    public get<EntryId extends keyof Entries>(entryId: EntryId): Entries[EntryId] {
        let entry = this.entries[entryId];

        entry.numExclusive(); // error - expected.

        if (isNumClass(entry)) {
            entry.numExclusive(); // works
            return entry;
        }

        return entry; // type is Entries[EntryId] - all fine
    }
}
```

----------------------------------------

TITLE: Defining Asynchronous Functions in TypeScript
DESCRIPTION: This snippet demonstrates correct and incorrect ways of defining asynchronous functions in TypeScript. It shows the proper 'async' keyword usage and common typos that lead to compiler errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/commonMissingSemicolons.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
async function myAsyncFunction1() {}
asynd function myAsyncFunction2() {}
sasync function myAsyncFunction3() {}

// Arrow functions don't (yet?) parse as nicely as standalone functions.
// Eventually it would be good to get them the same "did you mean" for typos such as "asyncd".
const myAsyncArrow1 = async () => 3;
const myAsyncArrow2 = asyncd () => 3;
```

----------------------------------------

TITLE: Defining Functions with Invalid Return Statements in TypeScript
DESCRIPTION: This snippet shows multiple functions with declared return types that do not match their actual return values. TypeScript catches these errors and provides appropriate error messages.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/invalidReturnStatements.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// all the following should be error
function fn1(): number {  }
function fn2(): string { }
function fn3(): boolean { }
function fn4(): Date {  }
function fn7(): any {  } // should be valid: any includes void
```

----------------------------------------

TITLE: ESM Await Example in JavaScript
DESCRIPTION: This JavaScript code snippet shows the usage of 'await' at the top level within an ECMAScript Module (ESM). ESM modules natively support top-level await, allowing asynchronous operations to be performed outside of async functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsTopLevelAwait(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
    // esm format file
    const x = await 1;
    export {x};
    for await (const y of []) {}
```

----------------------------------------

TITLE: Exporting Variables and Classes in TypeScript
DESCRIPTION: This code snippet demonstrates how to export variables and classes in TypeScript. The 'm1.ts' and 'm2.ts' files both export variables and classes, allowing these components to be reused in other modules. This pattern supports modular code design. Each file exports a numeric variable, a class, and a module-level function that returns an instance of the exported class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootAbsolutePathModuleMultifolderSpecifyOutputFile/node/mapRootAbsolutePathModuleMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

LANGUAGE: TypeScript
CODE:
```
export var m2_a1 = 10;
export class m2_c1 {
    public m2_c1_p1: number;
}

export var m2_instance1 = new m2_c1();
export function m2_f1() {
    return m2_instance1;
}
```

----------------------------------------

TITLE: Unresolved Name Error: IFileReference
DESCRIPTION: This error indicates that the symbol 'IFileReference' is not defined in the current scope. This likely means that the 'IFileReference' type or variable is either not imported, not declared, or misspelled in the code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserRealSource11.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
"parserRealSource11.ts(1111,33): error TS2304: Cannot find name 'IFileReference'."
```

----------------------------------------

TITLE: Undefined Variable in Logical NOT Expression in TypeScript
DESCRIPTION: Code snippet showing a logical NOT operation (!foo) where 'foo' is an undefined variable, resulting in a TypeScript compiler error TS2304.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalNotExpression1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
!foo;
```

----------------------------------------

TITLE: Defining Utility Types and Functions in TypeScript
DESCRIPTION: This snippet defines utility types 'Omit' and 'PartialProperties', and implements functions 'doSomething_Actual' and 'doSomething_Expected' to demonstrate type inference with mapped types and union constraints.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeUnionConstraintInferences.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export declare type PartialProperties<T, K extends keyof T> = Partial<Pick<T, K>> & Omit<T, K>;
export function doSomething_Actual<T extends {
    prop: string;
}>(a: T) {
    const x: { [P in keyof PartialProperties<T, "prop">]: PartialProperties<T, "prop">[P]; } = null as any;
    return x;
}
export declare function doSomething_Expected<T extends {
    prop: string;
}>(a: T): { [P in keyof PartialProperties<T, "prop">]: PartialProperties<T, "prop">[P]; };

export let a = doSomething_Actual({ prop: "test" });
a = {} // should be fine, equivalent to below

export let b = doSomething_Expected({ prop: "test" });
b = {} // fine
```

----------------------------------------

TITLE: Initializing TypeScript Class with JSX Fragment
DESCRIPTION: A TypeScript class method using JSX fragment syntax without proper React import, causing compilation errors about missing React scope
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxFragmentFactoryReference(jsx=react).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export class LoggedOut {
    content = () => (
        <></>
    )
}
```

----------------------------------------

TITLE: Module C Circular Import
DESCRIPTION: TypeScript module demonstrating an invalid circular import by importing itself, which causes a compiler error
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveExportAssignmentAndFindAliasedType4.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import self = require("recursiveExportAssignmentAndFindAliasedType4_moduleC");
export = self;
```

----------------------------------------

TITLE: Implicit Any in Generic Constraint (TypeScript)
DESCRIPTION: This generic function constraint (`T extends { x, y }`) demonstrates implicitly having 'any' types for properties 'x' and 'y' when no explicit type is provided, which can be flagged as an error (TS7008) depending on compiler options.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectRestNegative.errors.txt#_snippet_3

LANGUAGE: TypeScript
CODE:
```
function generic<T extends { x, y }>(t: T) {
    let { x, ...rest } = t;
    return rest;
}
```

----------------------------------------

TITLE: Configuring Package Exports in package.json
DESCRIPTION: This JSON snippet defines the package configuration, including the package name, type, and exports. It specifies an export map entry for the root ('.') pointing to './dist/index.js'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeNextPackageSelfNameWithOutDir.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "@this/package",
  "type": "module",
  "exports": {
    ".": "./dist/index.js"
  }
}
```

----------------------------------------

TITLE: Error Handling for Super Property Access in Constructor - TypeScript
DESCRIPTION: This code snippet demonstrates an error that arises when a derived class attempts to access a property of its superclass using 'super' before calling 'super()' in its constructor. The example showcases the correct sequence of operations in constructor invocation to avoid the TypeScript error TS17011.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/superPropertyAccessInSuperCall01.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
	constructor(f: string) {
	}
	public blah(): string { return ""; }
}

class B extends A {
	constructor() {
		super(super.blah())
		      ~~~~~
!!! error TS17011: 'super' must be called before accessing a property of 'super' in the constructor of a derived class.
	}
}
```

----------------------------------------

TITLE: Accessing Method on undefined Value in TypeScript
DESCRIPTION: This code attempts to call the 'toBAZ()' method on the undefined value, which triggers TypeScript error TS18050. This is a compile-time error that prevents potential runtime errors that would occur with this invalid property access.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertyAccess5.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
undefined.toBAZ();
```

----------------------------------------

TITLE: Function with Required and Optional Parameters
DESCRIPTION: Defines function variants demonstrating different parameter initialization strategies in TypeScript, including required, default, and optional parameters
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/requiredInitializedParameter1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f1(a, b = 0, c) { }
```

----------------------------------------

TITLE: Package Configuration for Node.js Project
DESCRIPTION: This package.json file configures a Node.js project. It sets the package name, marks it as private, and specifies the project type as module, indicating the use of ECMAScript modules by default.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExportsExclude(module=node18).errors.txt#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Exporting Components and Interfaces in TypeScript
DESCRIPTION: Defines a function 'Component' and an interface 'ComponentProps' for use in other modules. This is implemented in a TypeScript file, showcasing how components and interfaces are made available for other parts of the project.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports_mixedImports.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export function Component() {}
export interface ComponentProps {}
```

----------------------------------------

TITLE: Testing let variable capture in for-of loops in TypeScript
DESCRIPTION: Demonstrates how let variables are captured in for-of loops. The function creates closures that reference the loop variable x and checks equality conditions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo0(x) {
    for (let x of []) {
        var v = x;
        (function() { return x + v });
        (() => x + v);
        if (x == 1) {
            return;
        }
    }

    use(v);
}
```

----------------------------------------

TITLE: Defining an Angular 2 Component Class in TypeScript
DESCRIPTION: This snippet demonstrates a TypeScript file with an Angular 2 import statement and a class definition using a decorator. It shows the usage of ElementRef from Angular's core module and a custom decorator function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/emitDecoratorMetadataSystemJS/node/emitDecoratorMetadataSystemJS.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import * as ng from "angular2/core";

declare function foo(...args: any[]);

@foo
export class MyClass1 {
    constructor(private _elementRef: ng.ElementRef){}
}
```

----------------------------------------

TITLE: Calculation and Arrow Function Example - TypeScript
DESCRIPTION: This snippet provides a valid example of a TypeScript arrow function that calculates the square of a given number. It demonstrates correct syntax usage in TypeScript arrow functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arrowFunctionMissingCurlyWithSemicolon.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
var b = 1 * 2 * 3 * 4;
var square = (x: number) => x * x;
```

----------------------------------------

TITLE: Importing and Using fromAtTypesFoo from NPM Package in TypeScript
DESCRIPTION: Shows how to import fromAtTypesFoo from the 'foo' package (likely an @types definition package) and use it in code. The import uses a non-relative path to access the module from node_modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/autoImportAllowTsExtensions1.baseline.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { fromAtTypesFoo } from "foo";

fromAtTypesFoo
```

----------------------------------------

TITLE: Importing Modules with TypeScript - TypeScript
DESCRIPTION: This snippet shows how to import different modules and types in TypeScript using the 'import' statement. It emphasizes the use of multiple import styles for various export types from common JS modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleExportNonStructured.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
import * as exportAny from "./exportAny.cjs";
import * as exportUnknown from "./exportUnknown.cjs";
import * as exportSymbol from "./exportSymbol.cjs";

import type * as exportAnyType from "./exportAny.cjs";
import type * as exportUnknownType from "./exportUnknown.cjs";
import type * as exportSymbolType from "./exportSymbol.cjs";
```

----------------------------------------

TITLE: Defining a React Component with Empty Props in TSX
DESCRIPTION: This snippet defines an `EmptyProp` React component that doesn't require any specific props. It showcases a scenario where the component expects a default props object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadAttributesResolution5.errors.txt#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
class EmptyProp extends React.Component<{}, {}> {
        render() {
            return <div>Default hi</div>;
        }
        greeting: string;
    }
```

----------------------------------------

TITLE: Defining React Component with TypeScript Interfaces
DESCRIPTION: This snippet defines a React component 'MyComponent' with TypeScript interfaces for props. It includes nested prop types and a basic component implementation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxDeepAttributeAssignabilityError.errors.txt#2025-04-21_snippet_0

LANGUAGE: TSX
CODE:
```
import * as React from 'react'

interface MyProps {
    x: string;
    y: MyInnerProps;
}

interface MyInnerProps {
    value: string;
}

export function MyComponent(_props: MyProps) {
    return <span>my component</span>;
}
```

----------------------------------------

TITLE: Simple TypeScript Module Export
DESCRIPTION: A simple TypeScript module that exports a string constant 'a'. This represents a basic module that can be imported by other files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerSyntaxRestrictions(module=preserve).errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
export const a = "a";
```

----------------------------------------

TITLE: TypeScript Module Export in index.ts
DESCRIPTION: A simple TypeScript module that exports a constant variable x with a value of 0.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerRelative1(module=preserve).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const x = 0;
```

----------------------------------------

TITLE: Defining Default Export Class in TypeScript
DESCRIPTION: This snippet shows the definition of a default exported class in TypeScript. It conflicts with another default export in the module, leading to a compilation error. This example highlights the constraint that a TypeScript module can only have one default export.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/multipleExportDefault3.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export default class C { }
```

----------------------------------------

TITLE: Defining a Generic Class with Constrained Type Parameter in TypeScript
DESCRIPTION: Defines a class Foo with a generic type parameter T that is constrained to have properties 'a' of type string and 'b' of type number. The class stores the passed object in a property 'test' and is exported as a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAssignmentConstrainedGenericType.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class Foo<T extends {a: string; b:number;}>{\n\ttest: T;\n\tconstructor(x: T){}\n}\n\nexport = Foo;
```

----------------------------------------

TITLE: Valid TypeScript Exports
DESCRIPTION: Source file containing valid variable exports that will be used as import targets.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ImportNamedImportParsingError.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var a = 10;
export var x = a;
export var m = a;
```

----------------------------------------

TITLE: ESM Import in TypeScript File
DESCRIPTION: Standard ESM import in a TypeScript file (.ts) which works correctly
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodePackageSelfName(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// esm format file
import * as self from "package";
self;
```

----------------------------------------

TITLE: Type Mapping and Keyof Usage
DESCRIPTION: Illustrates the use of the keyof operator and type mapping in TypeScript, providing various examples of extracting keys from types like Shape, Object, arrays, and enums. Highlights how keyof behaves with different types and constructs.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
type K00 = keyof any;  // string
type K01 = keyof string;  // "toString" | "charAt" | ...
type K02 = keyof number;  // "toString" | "toFixed" | "toExponential" | ...
type K03 = keyof boolean;  // "valueOf"
type K04 = keyof void;  // never
type K05 = keyof undefined;  // never
type K06 = keyof null;  // never
type K07 = keyof never;  // string | number | symbol
type K08 = keyof unknown; // never
```

----------------------------------------

TITLE: Implementing Property Class with Flags Enum in TypeScript
DESCRIPTION: Defines the Property class with name, type, and flags, along with an equality checking method. Includes a PropertyFlags enum for defining property characteristics.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unspecializedConstraints.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class Property extends Symbol {
    constructor(public name: string, public type: Type, public flags: PropertyFlags) {
        super();
    }
    equals(other: Property): boolean {
        return this.name === other.name &&
            this.flags === other.flags &&
            this.type.equals(other.type);
    }
}

enum PropertyFlags {
    Optional = 1,
    Private = 2
}
```

----------------------------------------

TITLE: Demonstrating Type Error with Indexed Access Types in TypeScript
DESCRIPTION: This function demonstrates a type error where T[keyof T] cannot be assigned to number because T[keyof T] could be any type within the object T, not necessarily a number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indexedAccessConstraints.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo<T extends object>(a: T[keyof T]) {
    let b: number = a;  // Error
}
```

----------------------------------------

TITLE: Corrected Mixed Type Import and Export
DESCRIPTION: Refines the mixed import and export to ensure type-only specification, crucial for modules under isolatedModules constraint.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports_errors(isolatedmodules=true).errors.txt#2025-04-21_snippet_9

LANGUAGE: TypeScript
CODE:
```
import type { A } from "./a";
import type { B } from "./b";
export type { A, B as BB };
```

----------------------------------------

TITLE: Defining a Generic Function 'foo2' in TypeScript
DESCRIPTION: This snippet defines a generic function `foo2` that takes a value of type `T` and a callback function that takes a value of type `T` and returns a value of type `U`.  It demonstrates how contextual signature instantiation applies to generic functions and how type inference works with function arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCallWithFunctionTypedArguments.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    function foo2<T, U>(x: T, cb: (a: T) => U) {
        return cb(x);
    }
    
    var r4 = foo2(1, function <Z>(a: Z) { return '' }); // string, contextual signature instantiation is applied to generic functions
    var r5 = foo2(1, (a) => ''); // string
    var r6 = foo2<string, number>('', <Z>(a: Z) => 1);
```

----------------------------------------

TITLE: Checking Property Existence in Union Types - TypeScript
DESCRIPTION: This code snippet uses interfaces and union types to depict property checking in TypeScript. It demonstrates how TypeScript errors occur when trying to access properties that may not exist on all types within a union. The interfaces 'A', 'B', and 'C' define different sets of properties, then union types 'AB' and 'ABC' are used to orchestrate property access checks. No special dependencies are required beyond TypeScript, and it showcases how TypeScript strictly adheres to defined types, ensuring type safety even within unions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionPropertyExistence.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```

    interface A {
        inAll: string;
        notInB: string;
        notInC: string;
    }
    
    interface B {
        inAll: boolean;
        onlyInB: number;
        notInC: string;
    }
    
    interface C {
        inAll: number;
        notInB: string;
    }
    
    type AB = A | B;
    type ABC = C | AB;
    
    var ab: AB;
    var abc: ABC;
    
    declare const x: "foo" | "bar";
    declare const bFoo: B | "foo";
    
    x.nope();
      ~~~~
!!! error TS2339: Property 'nope' does not exist on type '"foo" | "bar"'.
!!! error TS2339:   Property 'nope' does not exist on type '"foo"'.
    bFoo.onlyInB;
         ~~~~~~~
!!! error TS2339: Property 'onlyInB' does not exist on type 'B | "foo"'.
!!! error TS2339:   Property 'onlyInB' does not exist on type '"foo"'.
    x.length; // Ok
    bFoo.length;
         ~~~~~~
!!! error TS2339: Property 'length' does not exist on type 'B | "foo"'.
!!! error TS2339:   Property 'length' does not exist on type 'B'.
    
    ab.onlyInB;
       ~~~~~~~
!!! error TS2339: Property 'onlyInB' does not exist on type 'AB'.
!!! error TS2339:   Property 'onlyInB' does not exist on type 'A'.
    
    ab.notInC; // Ok
    abc.notInC;
        ~~~~~~
!!! error TS2339: Property 'notInC' does not exist on type 'ABC'.
!!! error TS2339:   Property 'notInC' does not exist on type 'C'.
    ab.notInB;
       ~~~~~~
!!! error TS2551: Property 'notInB' does not exist on type 'AB'. Did you mean 'notInC'?
!!! error TS2551:   Property 'notInB' does not exist on type 'B'.
    abc.notInB;
        ~~~~~~
!!! error TS2339: Property 'notInB' does not exist on type 'ABC'.
!!! error TS2339:   Property 'notInB' does not exist on type 'B'.
    
    abc.inAll; // Ok
    abc.inNone;
        ~~~~~~
!!! error TS2339: Property 'inNone' does not exist on type 'ABC'.
!!! error TS2339:   Property 'inNone' does not exist on type 'A'.

```

----------------------------------------

TITLE: Handling TypeScript Global Type Errors
DESCRIPTION: This snippet illustrates multiple TypeScript errors that occur when global types such as 'Boolean', 'IArguments', 'Number', and 'Object' are not found. It highlights the importance of having the correct type definitions available for successful compilation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/modularizeLibrary_ErrorFromUsingES6ArrayWithOnlyES6ArrayLib.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
error TS2318: Cannot find global type 'Boolean'.
error TS2318: Cannot find global type 'IArguments'.
error TS2318: Cannot find global type 'Number'.
error TS2318: Cannot find global type 'Object'.
```

----------------------------------------

TITLE: Importing ESM in TypeScript (.ts file)
DESCRIPTION: TypeScript code in a regular .ts file importing from a package defined as ES Module. This example works without errors as TypeScript allows imports to be converted appropriately.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodePackageSelfName(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// esm format file
import * as self from "package";
self;
```

----------------------------------------

TITLE: Declaring Optional and Required Props - TypeScript
DESCRIPTION: This snippet illustrates the definition of a React component function 'TestingOptional' that can handle both required and optional props. It shows how to use TypeScript to enforce props' presence by declaring them with or without the '?' operator. Different usages of this component in valid JSX syntax demonstrate how TypeScript helps catch potential errors at compile-time while providing flexibility in component usage.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentOverload1.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
declare function TestingOptional(a: {y1?: string, y2?: number}): JSX.Element;
declare function TestingOptional(a: {y1: boolean, y2?: number, y3: boolean}): JSX.Element;

// OK
const e1 = <TestingOptional />
const e3 = <TestingOptional y1="hello"/>
const e4 = <TestingOptional y1="hello" y2={1000} />
const e5 = <TestingOptional y1 y3/>
const e6 = <TestingOptional y1 y3 y2={10} />
const e2 = <TestingOptional y1 y3 extra-prop/>
```

----------------------------------------

TITLE: Enum Switch Statement Pattern
DESCRIPTION: Example of switch statement usage with TypeScript enums including type checking and exhaustive cases.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exhaustiveSwitchStatements1.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
enum Level {
  One,
  Two,
}

const doSomethingWithLevel = (level: Level) => {
  let next: Level;
  switch (level) {
    case Level.One:
      next = Level.Two;
      break;
    case Level.Two:
      next = Level.One;
      break;
  }
  return next;
};
```

----------------------------------------

TITLE: Union Type Inference Guard
DESCRIPTION: Type guard that infers a union type (number | string) from unknown type using typeof checks.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypePredicates.errors.txt#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
function isNumOrStr(x: unknown) {
  return (typeof x === "number" || typeof x === "string");
}
```

----------------------------------------

TITLE: Iterating Over Robot Objects with Destructuring in TypeScript
DESCRIPTION: This code snippet demonstrates a for...of loop that iterates over a 'robots' array, using destructuring assignment with default values to extract 'name' and 'skill' properties from each robot object. It then logs the 'nameA' variable.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_45

LANGUAGE: typescript
CODE:
```
for ({ name = "noName", skill  = "noSkill" } of robots) {
    console.log(nameA);
}
```

----------------------------------------

TITLE: Array Destructuring with Nested Lists
DESCRIPTION: Demonstrates destructuring an array with nested elements and default values, extracting multi-skill robot data
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues3.sourcemap.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
[, multiSkillB = []] = ["roomba", ["vacuum", "mopping"]];
```

----------------------------------------

TITLE: TypeScript Logical Assignment Operations with Optional Arrays
DESCRIPTION: Demonstrates three different logical assignment patterns (||=, ??=, &&=) when working with potentially undefined arrays. Shows how TypeScript catches a type safety issue with the &&= operator where the object could be undefined before performing the push operation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment8(target=es2021).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare const bar: { value?: number[] } | undefined

function foo1(results: number[] | undefined) {
    (results ||= bar?.value ?? []).push(100);
}

function foo2(results: number[] | undefined) {
    (results ??= bar?.value ?? []).push(100);
}

function foo3(results: number[] | undefined) {
    (results &&= bar?.value ?? []).push(100);
}
```

----------------------------------------

TITLE: React Component with Optional Chaining in TypeScript
DESCRIPTION: Demonstrates a React component using optional chaining in TSX. It shows how TypeScript handles type checking in JSX expressions with optional properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowOptionalChain3.errors.txt#2025-04-21_snippet_3

LANGUAGE: TSX
CODE:
```
function Test3({ foo }: { foo: Foo | undefined }) {
  return (
    <div>
      {foo?.bar === false && "foo"}
      {foo.bar ? "true" : "false"}
    </div>
  );
}
```

----------------------------------------

TITLE: Defining Modules and Classes in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates the definition of modules and classes, showcasing the inheritance and method declarations with generics. The code also highlights issues where classes are used prior to their declaration, resulting in compile-time errors, especially in a complex module structure. Key dependencies include correct class declarations and order within the module system. The primary operation is extending classes with generics to enhance object-oriented capabilities within TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
module rionegrensis {
  export class caniventer extends Lanthanum.nitidus<petrophilus.minutilla, julianae.sumatrana> {
    
        salomonseni() : caniventer { var x : caniventer; () => { var y = this; }; return x; }
        uchidai() : lavali.xanthognathus { var x : lavali.xanthognathus; () => { var y = this; }; return x; }
        raffrayana() : lavali.otion { var x : lavali.otion; () => { var y = this; }; return x; }
        Uranium() : minutus.inez<minutus.inez<sagitta.stolzmanni, dammermani.melanops>, trivirgatus.falconeri> { var x : minutus.inez<minutus.inez<sagitta.stolzmanni, dammermani.melanops>, trivirgatus.falconeri>; () => { var y = this; }; return x; }
        nayaur() : gabriellae.amicus { var x : gabriellae.amicus; () => { var y = this; }; return x; }
      }
    
  export class veraecrucis<T0, T1> extends trivirgatus.mixtus<gabriellae.amicus, lutreolus.punicus> {
        
        naso() : panamensis.setulosus<lutreolus.punicus, howi.coludo<quasiater.bobrinskoi, provocax.melanoleuca>> { var x : panamensis.setulosus<lutreolus.punicus, howi.coludo<quasiater.bobrinskoi, provocax.melanoleuca>>; () => { var y = this; }; return x; }
        vancouverensis() : imperfecta.ciliolabrum<argurus.oreas, argurus.peninsulae> { var x : imperfecta.ciliolabrum<argurus.oreas, argurus.peninsulae>; () => { var y = this; }; return x; }
        africana() : argurus.gilbertii<panamensis.linulus<lavali.lepturus, argurus.oreas>, sagitta.cinereus<lavali.xanthognathus, argurus.oreas>> { var x : argurus.gilbertii<panamensis.linulus<lavali.lepturus, argurus.oreas>, sagitta.cinereus<lavali.xanthognathus, argurus.oreas>>; () => { var y = this; }; return x; }
        palliolata() : Lanthanum.jugularis { var x : Lanthanum.jugularis; () => { var y = this; }; return x; }
        nivicola() : samarensis.pallidus { var x : samarensis.pallidus; () => { var y = this; }; return x; }
      }
    }
module julianae {
  export class steerii {
  }
  export class nudicaudus {
    brandtii() : argurus.germaini { var x : argurus.germaini; () => { var y = this; }; return x; }
    maxwellii() : ruatanica.Praseodymium<Lanthanum.jugularis, dammermani.melanops> { var x : ruatanica.Praseodymium<Lanthanum.jugularis, dammermani.melanops>; () => { var y = this; }; return x; }
    endoi() : panglima.abidi<dogramacii.kaiseri, lavali.wilsoni> { var x : panglima.abidi<dogramacii.kaiseri, lavali.wilsoni>; () => { var y = this; }; return x; }
    venezuelae() : howi.marcanoi { var x : howi.marcanoi; () => { var y = this; }; return x; }
    zamicrus() : rionegrensis.caniventer { var x : rionegrensis.caniventer; () => { var y = this; }; return x; }
  }
  export class galapagoensis {
    isabellae() : panglima.amphibius<macrorhinos.daphaenodon, patas.uralensis> { var x : panglima.amphibius<macrorhinos.daphaenodon, patas.uralensis>; () => { var y = this; }; return x; }
    rueppellii() : ruatanica.americanus { var x : ruatanica.americanus; () => { var y = this; }; return x; }
    peregusna() : dogramacii.kaiseri { var x : dogramacii.kaiseri; () => { var y = this; }; return x; }
    gliroides() : howi.coludo<howi.marcanoi, lavali.wilsoni> { var x : howi.coludo<howi.marcanoi, lavali.wilsoni>; () => { var y = this; }; return x; }
    banakrisi() : macrorhinos.daphaenodon { var x : macrorhinos.daphaenodon; () => { var y = this; }; return x; }
    rozendaali() : lutreolus.foina { var x : lutreolus.foina; () => { var y = this; }; return x; }
    stuhlmanni() : panamensis.linulus<caurinus.megaphyllus, caurinus.megaphyllus> { var x : panamensis.linulus<caurinus.megaphyllus, caurinus.megaphyllus>; () => { var y = this; }; return x; }
  }
  export class albidens<T0, T1> {
    mattheyi() : samarensis.fuscus<lavali.wilsoni, chrysaeolus.sarasinorum<Lanthanum.jugularis, imperfecta.subspinosus>> { var x : samarensis.fuscus<lavali.wilsoni, chrysaeolus.sarasinorum<Lanthanum.jugularis, imperfecta.subspinosus>>; () => { var y = this; }; return x; }
    Astatine() : steerii { var x : steerii; () => { var y = this; }; return x; }
    vincenti() : argurus.dauricus<macrorhinos.konganensis, patas.uralensis> { var x : argurus.dauricus<macrorhinos.konganensis, patas.uralensis>; () => { var y = this; }; return x; }
    hirta() : Lanthanum.jugularis { var x : Lanthanum.jugularis; () => { var y = this; }; return x; }
    virginianus() : durangae { var x : durangae; () => { var y = this; }; return x; }
    macrophyllum() : howi.marcanoi { var x : howi.marcanoi; () => { var y = this; }; return x; }
    porcellus() : ruatanica.americanus { var x : ruatanica.americanus; () => { var y = this; }; return x; }
  }
  export class oralis<T0, T1> extends caurinus.psilurus {
    
    cepapi() : caurinus.psilurus { var x : caurinus.psilurus; () => { var y = this; }; return x; }
    porteri() : lavali.thaeleri { var x : lavali.thaeleri; () => { var y = this; }; return x; }
    bindi() : caurinus.mahaganus<gabriellae.amicus, panglima.amphibius<macrorhinos.daphaenodon, patas.uralensis>> { var x : caurinus.mahaganus<gabriellae.amicus, panglima.amphibius<macrorhinos.daphaenodon, patas.uralensis>>; () => { var y = this; }; return x; }
    puda() : sagitta.stolzmanni { var x : sagitta.stolzmanni; () => { var y = this; }; return x; }
    mindorensis() : trivirgatus.falconeri { var x : trivirgatus.falconeri; () => { var y = this; }; return x; }
    ignitus() : petrophilus.rosalia<panamensis.setulosus<gabriellae.echinatus, steerii>, lavali.wilsoni> { var x : petrophilus.rosalia<panamensis.setulosus<gabriellae.echinatus, steerii>, lavali.wilsoni>; () => { var y = this; }; return x; }
    rufus() : nudicaudus { var x : nudicaudus; () => { var y = this; }; return x; }
    monax() : imperfecta.subspinosus { var x : imperfecta.subspinosus; () => { var y = this; }; return x; }
  }
```

----------------------------------------

TITLE: TypeScript Function Return Type Tests
DESCRIPTION: Collection of functions demonstrating different return type behaviors with noImplicitReturns. Includes cases with undefined, void, any, union types, and conditional returns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitReturnsExclusions.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f1(b: boolean): undefined {
    if (b) return undefined;
}

function f2(b: boolean): void {
    if (b) return undefined;
}

function f3(b: boolean): any {
    if (b) return undefined;
}

function f4(b: boolean): string | undefined {
    if (b) return undefined;
}

function f5(b: boolean): string | void {
    if (b) return undefined;
}

function f6(b: boolean): unknown {
    if (b) return undefined;
}
```

----------------------------------------

TITLE: Chaining .then() with testFunction9 on an IPromise
DESCRIPTION: This snippet demonstrates chaining the `.then()` method on an `IPromise<number>` instance with `testFunction9` as the fulfillment, rejection, and notify handlers.  It results in a type error because the provided function's signature doesn't match the expected signature by the `then` method overload. The test checks type compatibility of the handler's parameters with expected types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations3.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
var r9a = r9.then(testFunction9, testFunction9, testFunction9); // error
                      ~~~~~~~~~~~~~
```

----------------------------------------

TITLE: Demonstrating Implicit Any Errors in TypeScript Type Declarations
DESCRIPTION: This code demonstrates various cases where TypeScript generates errors for implicitly typing variables as 'any'. The examples include object literals without type annotations, constructor signatures without return types, and function parameters without type annotations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implicitAnyDeclareTypePropertyWithoutType.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
    constructor() { }
}

// this should be an error
var x: { y; z; }             // error at "y,z"
var x1: { y1: C; z1; };      // error at "z1" 
var x11: { new (); };        // error at "new"
var x2: (y2) => number;      // error at "y2"
var x3: (x3: string, y3) => void ; // error at "y3"

// this should not be an error
var bar: { a: number; b: number };
var foo: { littleC: C; c: string };
var x4: new () => any;
var x5: () => any;
```

----------------------------------------

TITLE: Package Configuration with Exports Field in JSON
DESCRIPTION: Package.json configuration for a module named 'pkg' that uses the 'exports' field to define its entry points. The package has a main entry point pointing to 'untyped.js' but uses exports to direct to a different file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/node10Alternateresult_noTypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "pkg",
  "version": "1.0.0",
  "main": "./untyped.js",
  "exports": {
      ".": "./definitely-not-index.js"
  }
}
```

----------------------------------------

TITLE: Defining Interfaces and Type Destructuring in TypeScript
DESCRIPTION: This snippet illustrates the definition of interfaces and the use of destructuring with type aliases and function types in TypeScript. It includes potential TypeScript compiler errors related to unused renaming of types as type annotations. Key elements include interface declarations for `a`, `b`, and `c`, and various type and function definitions using these interfaces. The primary constraint here is ensuring that type renaming does not lead to unused or misnamed types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringInFunctionType.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface a { a }
interface b { b }
interface c { c }

type T1 = ([a, b, c]);
type F1 = ([a, b, c]) => void;

type T2 = ({ a });
type F2 = ({ a }) => void;

type T3 = ([{ a: b }, { b: a }]);
type F3 = ([{ a: b }, { b: a }]) => void;

!!! error TS2842: 'b' is an unused renaming of 'a'. Did you intend to use it as a type annotation?
!!! related TS2843 destructuringInFunctionType.ts:12:32: We can only write a type for 'a' by adding a type for the entire parameter here.

!!! error TS2842: 'a' is an unused renaming of 'b'. Did you intend to use it as a type annotation?
!!! related TS2843 destructuringInFunctionType.ts:12:32: We can only write a type for 'b' by adding a type for the entire parameter here.

type T4 = ([{ a: [b, c] }]);
type F4 = ([{ a: [b, c] }]) => void;

type C1 = new ([{ a: [b, c] }]) => void;

var v1 = ([a, b, c]) => "hello";
var v2: ([a, b, c]) => string;
```

----------------------------------------

TITLE: Defining JSX Element Interfaces in TypeScript
DESCRIPTION: This code snippet defines the JSX namespace with the `Element` and `ElementClass` interfaces. These interfaces specify the required 'type' property for valid JSX elements.  This is used later in the file to produce the errors related to incompatible types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxComponentTypeErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
namespace JSX {
  export interface Element {
    type: 'element';
  }
  export interface ElementClass {
    type: 'element-class';
  }
}
```

----------------------------------------

TITLE: Demonstrating TypeScript 'super' call error
DESCRIPTION: This snippet shows a TypeScript error (TS17009) that occurs when 'this' is accessed before calling 'super()' in a derived class constructor. The 'Super' class extends 'Base' and attempts to assign 'this' to a variable before calling 'super()', which results in the error. The error message indicates that 'super' must be called before accessing 'this'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkSuperCallBeforeThisAccessing8.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    class Base {
        constructor(...arg) {
        }
    }
    class Super extends Base {
        constructor() {
            var that = this;
                       ~~~~
!!! error TS17009: 'super' must be called before accessing 'this' in the constructor of a derived class.
            super();
        }
    }
```

----------------------------------------

TITLE: Defining JSX Interfaces in TypeScript
DESCRIPTION: This snippet defines TypeScript interfaces for JSX elements, including IntrinsicElements and IntrinsicAttributes. It sets up the structure for React components in a TypeScript environment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution11.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare module JSX {
	interface Element { }
	interface IntrinsicElements {
	}
	interface ElementAttributesProperty {
		props;
	}
	interface IntrinsicAttributes {
		ref?: string;
	}
}
```

----------------------------------------

TITLE: Defining Class T with 'this' Usage in TypeScript
DESCRIPTION: This snippet defines a class T with a method fo() that assigns 'this' to a variable. It demonstrates correct usage of 'this' within a class context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/lambdaPropSelf.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
class T {
     fo() {
        var x = this;
    }
}
```

----------------------------------------

TITLE: Importing Path Module and Exporting Class in TypeScript
DESCRIPTION: This snippet demonstrates importing the default export from the 'path' module, using it to resolve a path, and exporting a class named Foo.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esModuleInteropTslibHelpers.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import path from "path";
path.resolve("", "../");
export class Foo { }
```

----------------------------------------

TITLE: Error Case with Multiple Children in JSX
DESCRIPTION: This snippet demonstrates an incorrect implementation where the 'children' prop of the 'Comp' component is passed multiple children, which violates the expected type defined in the 'Prop' interface. TypeScript generates an error, showcasing type validation in action.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty2.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
let k2 =
        <Comp a={10} b='hi'>
         ~~~~
            <div> My Div </div>
            {(name: string) => <div> My name {name} </div>}
        </Comp>;
```

----------------------------------------

TITLE: Creating a Type Utility for Extracting Keys with Potentially Undefined Values in TypeScript
DESCRIPTION: A type utility that identifies keys in a record type where the value might be undefined. Includes a usage example that shows the resulting type behavior.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccessErrors.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
type UndefinedKeys<T extends Record<string, any>> = {
  [K in keyof T]: undefined extends T[K] ? K : never
};

type MyType = {a: string, b: string | undefined}

type Result1 = UndefinedKeys<MyType>;

const a1: Result1['a'] = 'a';  // Error
const b1: Result1['b'] = 'b';
```

----------------------------------------

TITLE: TypeScript Config with Deprecated Options
DESCRIPTION: TSConfig file containing removed options 'preserveValueImports' and 'importsNotUsedAsValues' that should be replaced with 'verbatimModuleSyntax'
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/verbatimModuleSyntaxCompat4.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "extends": "./tsconfig.base.json",
    "compilerOptions": {
        "isolatedModules": true,
        "preserveValueImports": true,
        "importsNotUsedAsValues": "error"
    }
}
```

----------------------------------------

TITLE: Defining Generic Class Foo in TypeScript
DESCRIPTION: This snippet defines a generic class called Foo which accepts a type parameter T, allowing for type-safe property declarations. It exports the class for use in other modules. Dependencies include TypeScript itself for type definitions and structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsNoImplicitAnyNoCascadingReferenceErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class Foo<T> {
    prop: T;
}
```

----------------------------------------

TITLE: TypeScript Node Modules Path Resolution Table
DESCRIPTION: A markdown table showing the relationship between @types directories and their corresponding watch directories for TypeScript type definition resolution. The table maps source @types paths to their respective watch directory locations across various filesystem hierarchies.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/canWatch/getDirectoryToWatchFailedLookupLocationFromTypeRootPosix.baseline.md#2025-04-21_snippet_11

LANGUAGE: markdown
CODE:
```
| Directory                                                                                | getDirectoryToWatchFailedLookupLocationFromTypeRoot                                      |
| ---------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------- |
| /folderAtRoot/folder1/folder2/node_modules/@types                                        | /folderAtRoot/folder1/folder2/node_modules                                               |
| /folderAtRoot/folder1/folder2/folder3/node_modules/@types                                | /folderAtRoot/folder1/folder2/folder3/node_modules                                       |
| /folderAtRoot/folder1/folder2/folder3/folder4/node_modules/@types                        | /folderAtRoot/folder1/folder2/folder3/folder4/node_modules                               |
| /folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules/@types                | /folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules                       |
```

----------------------------------------

TITLE: Package Configuration for TypeScript Modules
DESCRIPTION: This snippet contains the configuration for a package.json file to define module behavior and imports for a TypeScript project. It establishes mappings for module imports, including the '#type' module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportResolutionNoCycle(module=nodenext).errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module",
    "exports": "package",
    "imports": {
        "#type": "package"
    }
}
```

----------------------------------------

TITLE: Iterating over Fixed Array with Destructuring in JavaScript
DESCRIPTION: This code iterates over a fixed array [robotA, robotB], destructuring the first element of each item into 'numberB' and logging it to the console.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_15

LANGUAGE: JavaScript
CODE:
```
for (var _x = 0, _y = [robotA, robotB]; _x < _y.length; _x++) {
    var numberB = _y[_x][0];
    console.log(numberB);
}
```

----------------------------------------

TITLE: Project Package.json Definition
DESCRIPTION: This JSON defines the main project's package.json. The important part is the "type": "module", which indicates that this is an ES module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportModeDeclarationEmit2(module=node16).errors.txt#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Destructuring Array and Logging to Console - TypeScript
DESCRIPTION: This snippet demonstrates destructuring an array into a variable, followed by logging that variable to the console. The array includes integer and string values. It is suitable for understanding destructuring assignment in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
for (let [
        numberB
                ] = 
                   [
                    2
                     , 
                       "trimmer"
                                , 
                                  "trimming"
                                            ]
                                              
                                                ] = [2, "trimmer", "trimming"], 
                                                  i
                                                    = 
                                                      0
                                                       ; 
                                                         i
                                                           < 
                                                             1
                                                              ; 
                                                                i
                                                                 ++
                                                                   ) 
                                                                     {
>>>    console.log(numberB);
}

```

----------------------------------------

TITLE: Destructuring Assignments in TypeScript
DESCRIPTION: This snippet demonstrates different ways to apply array and tuple destructuring in TypeScript. It provides examples of default assignments, spread syntax, and variable assignment to show how elements are allocated from arrays and tuples. The code also highlights errors when destructuring empty tuples against patterns expecting elements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringArrayBindingPatternAndAssignment1ES5.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```

    // In a destructuring assignment expression, the type of the expression on the right must be assignable to the assignment target on the left.
    // An expression of type S is considered assignable to an assignment target V if one of the following is true
    
    // V is an array assignment pattern, S is the type Any or an array-like type (section 3.3.2), and, for each assignment element E in V,
    //      S is the type Any, or
    
    var [a0, a1]: any = undefined;
    var [a2 = false, a3 = 1]: any = undefined;
    
    // V is an array assignment pattern, S is the type Any or an array-like type (section 3.3.2), and, for each assignment element E in V,
    //      S is a tuple- like type (section 3.3.3) with a property named N of a type that is assignable to the target given in E,
    //        where N is the numeric index of E in the array assignment pattern, or
    var [b0, b1, b2] = [2, 3, 4];
    var [b3, b4, b5]: [number, number, string] = [1, 2, "string"];
    
    function foo() {
        return [1, 2, 3];
    }
    
    var [b6, b7] = foo();
    var [...b8] = foo();
    
    //      S is not a tuple- like type and the numeric index signature type of S is assignable to the target given in E.
    var temp = [1,2,3]
    var [c0, c1] = [...temp];
    var [c2] = [];
         ~~
!!! error TS2493: Tuple type '[]' of length '0' has no element at index '0'.
    var [[[c3]], [[[[c4]]]]] = [[[]], [[[[]]]]]
           ~~
!!! error TS2493: Tuple type '[]' of length '0' has no element at index '0'.
                     ~~
!!! error TS2493: Tuple type '[]' of length '0' has no element at index '0'.
    var [[c5], c6]: [[string|number], boolean] = [[1], true];
    var [, c7] = [1, 2, 3];
    var [,,, c8] = [1, 2, 3, 4];
    var [,,, c9] = [1, 2, 3, 4];
    var [,,,...c10] = [1, 2, 3, 4, "hello"];
    var [c11, c12, ...c13] = [1, 2, "string"];
    var [c14, c15, c16] = [1, 2, "string"];
    
```

----------------------------------------

TITLE: Root Package JSON with ESM Configuration
DESCRIPTION: Package.json configuration setting the project's default module type to ESM using the type field.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsTopLevelAwait(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Exporting Constants in TypeScript
DESCRIPTION: This snippet defines and exports two constants 'a' and 'b' from a TypeScript module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace3(module=umd).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export const a = 1;
export const b = 2;
```

----------------------------------------

TITLE: Defining an Assertion Function in TypeScript
DESCRIPTION: This snippet defines a custom assertion function that throws an error if the provided boolean condition is false, ensuring type safety during checks. It utilizes the TypeScript assertion signature to communicate the expectation that 'check' must be true if no error is thrown.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assertionsAndNonReturningFunctions.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/** @typedef {(check: boolean) => asserts check} AssertFunc */

/** @type {AssertFunc} */
const assert = check => {
    if (!check) throw new Error();
}
```

----------------------------------------

TITLE: Implementing Interfaces I1 and I2 with Class C1
DESCRIPTION: Defines a class C1 that attempts to implement interfaces I1 and I2. This snippet demonstrates common errors when implementing interfaces, specifically related to member visibility (private vs. public) and method signature compatibility.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceImplementation1.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
class C1 implements I1,I2 {
      ~~
!!! error TS2420: Class 'C1' incorrectly implements interface 'I1'.
!!! error TS2420:   Property 'iObj' is private in type 'C1' but not in type 'I1'.
      ~~
!!! error TS2420: Class 'C1' incorrectly implements interface 'I2'.
!!! error TS2420:   Property 'iFn' is private in type 'C1' but not in type 'I2'.
    private iFn();
	private iFn(n?:number, s?:string) { }
    private iAny:any;
    private iNum:number;
    private iObj:{ };
}
```

----------------------------------------

TITLE: Demonstrating Constructor Accessibility Modifiers in TypeScript
DESCRIPTION: This code demonstrates how TypeScript enforces access modifiers on class constructors. It shows that while public constructors can be accessed anywhere, private constructors can only be accessed within the class declaration, and protected constructors are only accessible within the class declaration and derived classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classConstructorAccessibility.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    public constructor(public x: number) { }
}

class D {
    private constructor(public x: number) { }
}

class E {
    protected constructor(public x: number) { }
}

var c = new C(1);
var d = new D(1); // error
var e = new E(1); // error

module Generic {
    class C<T> {
        public constructor(public x: T) { }
    }

    class D<T> {
        private constructor(public x: T) { }
    }

    class E<T> {
        protected constructor(public x: T) { }
    }

    var c = new C(1);
    var d = new D(1); // error
    var e = new E(1); // error
}
```

----------------------------------------

TITLE: Area Calculation Functions with Type Narrowing
DESCRIPTION: Demonstrates different approaches to calculating area for discriminated shape types using type guards and switch statements
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/discriminatedUnionTypes1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function area1(s: Shape) {
    if (s.kind === "square") {
        return s.size * s.size;
    }
    else if (s.kind === "circle") {
        return Math.PI * s.radius * s.radius;
    }
    else if (s.kind === "rectangle") {
        return s.width * s.height;
    }
    else {
        return 0;
    }
}

function area2(s: Shape) {
    switch (s.kind) {
        case "square": return s.size * s.size;
        case "rectangle": return s.width * s.height;
        case "circle": return Math.PI * s.radius * s.radius;
    }
}
```

----------------------------------------

TITLE: Incorrect Static Property Declaration in TypeScript Class Method
DESCRIPTION: This code demonstrates a TypeScript error where a static property 'z' is incorrectly declared inside an instance method 'foo'. Static properties must be declared at the class level, not within methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/staticClassProps.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C
{
    public foo() {
        static z = 1;
    }
}
```

----------------------------------------

TITLE: Exporting Default Value in TypeScript
DESCRIPTION: This snippet shows a TypeScript file (server.ts) that declares a variable and exports it as the default export. It demonstrates the correct way to export a default value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ImportDefaultBindingWithExport.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var a = 10;
export default a;
```

----------------------------------------

TITLE: Handling Imports and Type Annotations in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to import types and use them in functions while handling type errors. It showcases functions 'types' and 'values' utilizing imports from the module './mod' where missing members like 'Thing', 'AnotherThing', and 'foo' cause errors. The code provides an approach to combining TypeScript's type annotations with module imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleExportAssignment7.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
function types(
    a: import('./mod').Thing,
                       ~~~~~
!!! error TS2694: Namespace '"mod".export=' has no exported member 'Thing'.
    b: import('./mod').AnotherThing,
                           ~~~~~~~~~~~~
!!! error TS2694: Namespace '"mod".export=' has no exported member 'AnotherThing'.
    c: import('./mod').foo,
                           ~~~
!!! error TS2694: Namespace '"mod".export=' has no exported member 'foo'.
    d: import('./mod').qux,
                           ~~~
!!! error TS2694: Namespace '"mod".export=' has no exported member 'qux'.
    e: import('./mod').baz,
                           ~~~
!!! error TS2694: Namespace '"mod".export=' has no exported member 'baz'.
    f: import('./mod').buz,
    g: import('./mod').literal,
                           ~~~~~~~
!!! error TS2694: Namespace '"mod".export=' has no exported member 'literal'.
) {
    return a.x + b.y + c() + d() + e() + f() + g.length
}

function values(
    a: typeof import('./mod').Thing,
    b: typeof import('./mod').AnotherThing,
    c: typeof import('./mod').foo,
    d: typeof import('./mod').qux,
    e: typeof import('./mod').baz,
    f: typeof import('./mod').buz,
                                  ~~~
!!! error TS2694: Namespace '"mod".export=' has no exported member 'buz'.
    g: typeof import('./mod').literal,
) {
    return a.length + b.length + c() + d() + e() + f() + g.length
}
```

----------------------------------------

TITLE: Creating Object with Method Using setTimeout and Arrow Function in TypeScript
DESCRIPTION: This snippet creates an object 'messenger' with a message property and a start method. The start method uses setTimeout with an arrow function to maintain the correct 'this' context when accessing the message property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisBinding2.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
var messenger = {
    message: "Hello World",
    start: function () {
        return setTimeout(() => { var x = this.message; }, 3000);
    }
};
```

----------------------------------------

TITLE: Defining React Node Types in TypeScript
DESCRIPTION: Custom type definitions for React 18 nodes, supporting multiple return types for function components including primitives, fragments, and promises
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxElementType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type React18ReactFragment = ReadonlyArray<React18ReactNode>;
type React18ReactNode =
  | React.ReactElement<any>
  | string
  | number
  | React18ReactFragment
  | React.ReactPortal
  | boolean
  | null
  | undefined
  | Promise<React18ReactNode>;
```

----------------------------------------

TITLE: Defining Calculator Class and Functions in TypeScript
DESCRIPTION: This snippet defines a simple Calculator class with an empty method handleChar and two functions for testing functionality. It's intended as a base class for further development. No external dependencies are required.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedImports7.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export class Calculator {
    handleChar() {}
}

export function test() {

}

export default function test2() {

}
```

----------------------------------------

TITLE: Interface Mismatch Example with Missing Properties in TypeScript
DESCRIPTION: Demonstrates a case where ThroughStream is missing properties required by ReadStream. The error shows TypeScript's ability to list all missing properties in the error message.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeAssignabilityErrorMessage.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface ThroughStream {
    a: string;
}
interface ReadStream {
    f: string;
    g: number;
    h: boolean;
    i: BigInt;
    j: symbol;
}
function foo(): ReadStream {
    return undefined as any as ThroughStream;
}
function bar(): ReadStream {
    return undefined as any as ThroughStream;
}
```

----------------------------------------

TITLE: Variable Declaration in file1.ts
DESCRIPTION: First declaration of constant variable 'var1' that conflicts with file2.ts declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/letDeclarations-scopes-duplicates5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const var1 = 0;
```

----------------------------------------

TITLE: Todo and TodoList Component Type Definitions
DESCRIPTION: Type interfaces defining the structure for Todo and TodoList components, specifying prop types and constraints
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadChildrenInvalidType(jsx=react,target=es5).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface TodoProp {
    id: number;
    todo: string;
}
interface TodoListProps {
    todos: TodoProp[];
}
```

----------------------------------------

TITLE: package.json - Defining Module Type as ES Module
DESCRIPTION: This snippet demonstrates a `package.json` file specifying the module type as ES module using the `"type": "module"` field. This setting indicates that JavaScript files within this package should be treated as ES modules, allowing the use of ES module syntax like `import` and `export`, and also `import.meta`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportMeta(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: package.json Configuration for ES Module
DESCRIPTION: This snippet shows the 'package.json' configuration for an ES module. It sets the 'type' field to 'module', indicating that the files in this directory should be treated as ES modules.  This setting is crucial for enabling ES module syntax and ensuring that the necessary helpers are available.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportHelpersCollisions(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
    {
        "name": "package",
        "private": true,
        "type": "module"
    }
```

----------------------------------------

TITLE: Demonstrating Import Conflict Error in TypeScript
DESCRIPTION: This code demonstrates a naming conflict where a variable 'a' is declared and then an import with the same name is attempted, causing TypeScript error TS2440. The error occurs because the same identifier cannot be used for both a variable and an import in the same scope.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/duplicateVarAndImport2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// error since module is instantiated
var a;
module M { export var x = 1; }
import a = M;
```

----------------------------------------

TITLE: Using Generic Type A in TypeScript
DESCRIPTION: This snippet imports the generic type 'A' and its alias 'B' from './a.ts'. It then attempts to create instances of these types with varying type arguments and property assignments. TypeScript identifies errors when required properties are missing or type arguments are not provided for generic types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generic.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import type { A } from './a';
import { B } from './a';
let a: A<string> = { a: "" };
let b: B<number> = { a: 3 };
let c: A<boolean> = {};
let d: B = { a: "" };
```

----------------------------------------

TITLE: Defining Type Aliases in TypeScript
DESCRIPTION: Demonstrates how to define type aliases in TypeScript and highlights a common error resulting from duplicate declarations. Type aliases, unlike interfaces, cannot have merged declarations. This example also shows that type aliases cannot be extended like interfaces.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeAliasesForObjectTypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type T1 = { x: string }

// An interface can be named in an extends or implements clause, but a type alias for an object type literal cannot.
interface I1 extends T1 { y: string }
class C1 implements T1 {
    x: string;
}

// An interface can have multiple merged declarations, but a type alias for an object type literal cannot.
type T2 = { x: string }
     ~~
!!! error TS2300: Duplicate identifier 'T2'.
type T2 = { y: number }
     ~~
!!! error TS2300: Duplicate identifier 'T2'.

// An interface can have type parameters, but a type alias for an object type literal cannot.
type T3<T> = { x: T }

```

----------------------------------------

TITLE: Defining Enum e in TypeScript
DESCRIPTION: This snippet defines an enum named 'e' with members x and y. It demonstrates the syntax for enum declaration in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationEnums.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
enum e {
    x,
    y,
    x
}
```

----------------------------------------

TITLE: Defining Recursive Type Json in TypeScript
DESCRIPTION: This snippet defines a recursive type `Json` representing a JSON-like data structure. It can be a string, number, boolean, null, an array of `Json` values, or an object where keys are strings and values are also `Json`. A variable `data` is declared with this type, containing a nested JSON structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveTypeReferences1.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
type Json = string | number | boolean | null | Json[] | { [key: string]: Json };

let data: Json = {
    caption: "Test",
    location: { x: 10, y: 20 },
    values: [true, [10, 20], null]
};
```

----------------------------------------

TITLE: Declaring External Variable in TypeScript
DESCRIPTION: Declaration of an external variable using the 'declare' keyword, indicating an untyped variable that exists in the global scope
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithoutJsExtensions.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare var v;
```

----------------------------------------

TITLE: Creating Robot Object with Type Annotation
DESCRIPTION: Object declaration with explicit type annotation for a Robot interface. Shows type safety and object structure definition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatement1.sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var robotA: Robot = { name: "mower", skill: "mowing" };
```

----------------------------------------

TITLE: Class Inheritance and Method Overriding
DESCRIPTION: Shows basic class inheritance and method overriding in TypeScript
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/primitiveMembers.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
class baz { public bar(): void { }; }
class foo extends baz { public bar(){ return undefined}; }
```

----------------------------------------

TITLE: Defining Async Function in TypeScript without Error
DESCRIPTION: This TypeScript snippet defines an async function 'foo' that returns a Promise of void. Unlike the previous snippet, this one doesn't trigger any errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tslibMissingHelper.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export {};
async function foo(): Promise<void> {}
```

----------------------------------------

TITLE: Accessing Protected Properties in TypeScript Inheritance
DESCRIPTION: Demonstrates the rules for accessing protected properties in class inheritance. Protected properties are accessible within their declaring class and subclasses using 'this', but not through the 'super' keyword.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/protectedClassPropertyAccessibleWithinSubclass3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base {
    protected x: string;
    method() {
        this.x;            // OK, accessed within their declaring class
    }
}

class Derived extends Base {
    method1() {
        this.x;            // OK, accessed within a subclass of the declaring class
        super.x;           // Error, x is not public
    }
}
```

----------------------------------------

TITLE: Promise Chain Type Checking with Standard Promise Interface
DESCRIPTION: TypeScript code showing type checking errors when using Promise.then() with functions that return incompatible Promise types. The compiler detects that number types can't be assigned to string type requirements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
var s11: Promise<number>;
var s11a = s11.then(testFunction11, testFunction11, testFunction11); // ok
```

----------------------------------------

TITLE: Decorators on TypeScript Static Private Accessor
DESCRIPTION: Illustrates the application of multiple decorators (@dec) to a static private accessor (#z) with an initial value in TypeScript. This syntax is used to apply decorators to static accessor properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-sourceMap(target=es2022).sourcemap.txt#_snippet_44

LANGUAGE: typescript
CODE:
```
@dec
@dec
static accessor #z = 1;
```

----------------------------------------

TITLE: Defining and Using Abstract Classes in TypeScript
DESCRIPTION: This snippet defines abstract classes A and C, and a concrete class B. It demonstrates correct usage of abstract classes and the error that occurs when trying to instantiate an abstract class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classAbstractUsingAbstractMethod1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
abstract class A {
    abstract foo() : number;
}

class B extends A {
    foo() { return 1; }
}

abstract class C extends A  {
    abstract foo() : number;
}

var a = new B;
a.foo();

a = new C; // error, cannot instantiate abstract class.
a.foo();
```

----------------------------------------

TITLE: For Loop Variable Declaration - TypeScript
DESCRIPTION: This snippet demonstrates a for loop that destructures the first element of the 'robotA' array into 'numberA3' and the rest into 'robotAInfo'. It illustrates the use of array destructuring and iteration in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_29

LANGUAGE: typescript
CODE:
```
>>>for (numberA3 = robotA[0], robotAInfo = robotA.slice(1), i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Testing ES2018 Features in TypeScript
DESCRIPTION: This snippet tests ES2018 features including Promise.prototype.finally, RegExp named capture groups, RegExp dotAll flag, Intl.PluralRules, and various async-related types. TypeScript compiler errors are shown for each unsupported feature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/doYouNeedToChangeYourTargetLibraryES2016Plus.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
const testPromiseFinally = new Promise(() => {}).finally();
const testRegExpMatchArrayGroups = "2019-04-30".match(/(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/g).groups;
const testRegExpExecArrayGroups = /(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/g.exec("2019-04-30").groups;
const testRegExpDotAll = /foo/g.dotAll;
const testIntlPluralRules = new Intl.PluralRules("ar-EG").select(0);
const testAsyncGenerator: AsyncGenerator<any> = null as any;
const testAsyncGeneratorFunction: AsyncGeneratorFunction = null as any;
const testAsyncIterable: AsyncIterable<any> = null as any;
const testAsyncIterableIterator: AsyncIterableIterator<any> = null as any;
const testNumberFormatFormatToParts = new Intl.NumberFormat("en-US").formatToParts();
```

----------------------------------------

TITLE: Iterating Over Robot Skills Array in TypeScript
DESCRIPTION: This snippet uses a for-loop with destructuring assignment to iterate over an array of robot skills, assigning default 'primary' and 'secondary' values if none exist. The primary method of iteration is array destructuring, which sets default values for skills and iterates through 'multiRobotA'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_8

LANGUAGE: TypeScript
CODE:
```
for (let [, 
        [
            primarySkillA = "primary",
            secondarySkillA = "secondary"
        ] = ["none", "none"]] = multiRobotA, 
        i = 0; 
        i < 1; 
        i++) 
    {
```

----------------------------------------

TITLE: Implementing Generic and Non-Generic Function Overloads in TypeScript
DESCRIPTION: This code demonstrates function overloading in TypeScript with both generic and non-generic signatures. It shows how TypeScript selects different overload signatures based on whether type arguments are provided, leading to different return types and potential type errors when those types are mismatched in assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeArgumentsShouldDisallowNonGenericOverloads.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo(a: string): string;
function foo<T>(a: T): number;
function foo(a: any): any {
    return "hi";
}

var x: number = foo<string>("hi"); // return type should be 'number'
var y: string = foo("hi"); // return type should be 'string'

var w: string = foo<string>("hi"); // should error
var z: number = foo("hi"); // should error
```

----------------------------------------

TITLE: JSX Component with Optional Properties Declaration
DESCRIPTION: Function declaration for TestingOptional component with three overloads that have different property requirements and optional values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentOverload4.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
declare function TestingOptional(a: {y1?: string, y2?: number}): JSX.Element;
declare function TestingOptional(a: {y1?: string, y2?: number, children: JSX.Element}): JSX.Element;
declare function TestingOptional(a: {y1: boolean, y2?: number, y3: boolean}): JSX.Element;
```

----------------------------------------

TITLE: Package Configuration for Inner Module
DESCRIPTION: This JSON snippet represents the package configuration for the 'inner' module, defining its name, privacy status, module type, and exports configuration. This structure is crucial for module resolution and proper inter-module dependencies.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSpecifierGenerationConditions(module=nodenext).errors.txt#2025-04-21_snippet_4

LANGUAGE: JSON
CODE:
```
{
    "name": "inner",
    "private": true,
    "type": "module",
    "exports": {
        ".": {
            "default": "./index.js"
        },
        "./other": {
            "default": "./other.js"
        }
    }
}
```

----------------------------------------

TITLE: Static Method Access in TypeScript Class Inheritance
DESCRIPTION: Shows how static methods should be accessed through class names rather than instances. Demonstrates both incorrect usage leading to TS2576 errors and correct static method access patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classSideInheritance1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
  static bar(): string {
     return "";
    }
    foo(): number { return 1; }
}
 
class C2 extends A {}

var a: A;
var c: C2;
a.bar(); // static off an instance - should be an error
c.bar(); // static off an instance - should be an error
A.bar(); // valid
C2.bar(); // valid
```

----------------------------------------

TITLE: React Component Definition with TypeScript Props
DESCRIPTION: This snippet defines a React component `Foo` with a TypeScript interface `Props` to specify the expected props.  The `Props` interface defines required and optional properties. The component simply renders the value of the `a` prop within a div.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxSpreadOverwritesAttributeStrict.errors.txt#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import React = require('react');

interface Props {
    a: number;
    b: number;
    c?: number;
    d?: number;
}


const props: Props = { a: 1, b: 1 };
const Foo = (props: Props) => <div>{ props.a }</div>;
```

----------------------------------------

TITLE: Declaring and Using Overloaded Functions in TypeScript
DESCRIPTION: The snippets demonstrate function declarations in TypeScript with various overloads, showcasing common errors like incorrect type argument counts (TS2558) and missing function arguments (TS2554). Dependencies include TypeScript for static type checking. Key parameters include type arguments for generic types and a string parameter as a flag. Outputs focus on TypeScript error messages. Function signatures should match the number of expected type arguments and required parameters to avoid errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadsAndTypeArgumentArityErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare function Callbacks(flags?: string): void;
declare function Callbacks<T>(flags?: string): void;
declare function Callbacks<T1, T2>(flags?: string): void;

Callbacks<number, string, boolean>('s'); // wrong number of type arguments

new Callbacks<number, string, boolean>('s'); // wrong number of type arguments

declare function f<A, B = {}>(arg: number): void;
f<number>(); // wrong number of arguments (#25683)
```

----------------------------------------

TITLE: Importing Modules in ESM Format
DESCRIPTION: JavaScript code in ESM format that imports the fs module using named import with default and namespace import patterns. Unlike the CommonJS version, this file doesn't generate errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportHelpersCollisions1(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
// esm format file
import {default as _fs} from "fs";
_fs.readFile;
import * as fs from "fs";
fs.readFile;
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options
DESCRIPTION: This snippet defines the TypeScript compiler configuration in a JSON format. It specifies the module system as 'esnext', sets 'moduleResolution' to 'bundler', disables emitting files with 'noEmit', and leaves the 'types' array empty for global types. This configuration is crucial for managing module imports and ensuring compatibility with modern module systems.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolutionModeTripleSlash3.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{"compilerOptions": {"module": "esnext", "moduleResolution": "bundler", "noEmit": true, "types": []}}
```

----------------------------------------

TITLE: Defining React Component Types in TypeScript
DESCRIPTION: Defines TypeScript interfaces for React components including ExactProps, FunctionComponent, Component, and JSX element types. Demonstrates strict type checking for component props with union types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/coAndContraVariantInferences6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface ExactProps {
  value: "A" | "B";
}
interface FunctionComponent<P = {}> {
  (props: P): ReactElement<any> | null;
}
declare class Component<P> {
  constructor(props: P);
}
interface ComponentClass<P = {}> {
  new (props: P): Component<P>;
}

interface ReactElement<
  T extends string | JSXElementConstructor<any> =
    | string
    | JSXElementConstructor<any>,
> {
  type: T;
}

type JSXElementConstructor<P> =
  | ((props: P) => ReactElement<any> | null)
  | (new (props: P) => Component<any>);

declare function createElementIsolated<P extends {}>(
  type: FunctionComponent<P> | ComponentClass<P> | string,
  props?: P | null,
): void;

declare let WrapperIsolated: JSXElementConstructor<ExactProps>;
createElementIsolated(WrapperIsolated, { value: "C" });

declare const props: any[];
declare const stat: any;
[].push.apply(props, stat.properties);
```

----------------------------------------

TITLE: Implementing Protected Method Override in TypeScript Mixin
DESCRIPTION: Defines a Person class with a protected method and a PersonMixin that extends it while overriding the protected method. This demonstrates proper method override patterns in mixins.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mixinPrivateAndProtected.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
class Person {
	constructor(public name: string) {}

	protected myProtectedFunction() {
		// do something
	}
}

function PersonMixin<T extends Constructor<Person>>(Base: T) {
	return class extends Base {
		constructor(...args: any[]) {
			super(...args);
		}

		myProtectedFunction() {
			super.myProtectedFunction();
			// do more things
		}
	};
}
```

----------------------------------------

TITLE: Defining and Exporting TypeScript Module Members
DESCRIPTION: This snippet defines a TypeScript module (`m1`) and exports a variable, a class, an instance of the class, and a function. These members are made available for import by other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootAbsolutePathModuleSubfolderSpecifyOutputFile/node/sourceRootAbsolutePathModuleSubfolderSpecifyOutputFile.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Defining assertNever Function in TypeScript
DESCRIPTION: Implements an 'assertNever' function that throws an error when called. This is typically used for exhaustiveness checking in switch statements or type narrowing scenarios.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportSpellingSuggestion.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export function assertNever(x: never, msg: string) {
    throw new Error("Unexpected " + msg);
}
```

----------------------------------------

TITLE: Creating Test Objects for React Component Props
DESCRIPTION: Defines test objects (obj0, obj1, obj2, obj3) that implement partial prop interfaces for testing the MainButton component.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentOverload5.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
let obj0 = {
    to: "world"
};

let obj1 = {
    children: "hi",
    to: "boo"
}

let obj2 = {
    onClick: ()=>{}
}

let obj3: any;
```

----------------------------------------

TITLE: TypeScript Parser Error TS2304 in for...of Statement
DESCRIPTION: This snippet demonstrates a TypeScript error (TS2304) that arises when a variable ('X' in this case) used in a 'for...of' loop is not defined in the current scope. The error prevents the code from compiling, indicating a missing or misspelled variable name.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserForOfStatement13.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
for (let {a, b} of X) {
}
```

----------------------------------------

TITLE: Type mismatch in arrow function with comment - TypeScript
DESCRIPTION: This code snippet shows that the TS2345 error (type mismatch) still occurs even when there are comments present within the code. The function `f` expects a function with a `number` return type, but the arrow function `() => { }` returns `void`, causing the error, independent of the comments around the arrow function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arrowFunctionErrorSpan.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
    function f(a: () => number) { }
    
    // single line with a comment
    f(/*
        */() => { });

```

----------------------------------------

TITLE: TypeScript Type Definition Export
DESCRIPTION: Exports a type alias 'Foo' that represents a string type
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importTag24.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export type Foo = string;
```

----------------------------------------

TITLE: Incorrect Usage of Exported Types as Values in TypeScript
DESCRIPTION: Attempts to use A and B as values, which results in compilation errors because they were exported as types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace6.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { A, B } from "./c";
let _: A = new A();  // Error
let __: B = new B(); // Error
```

----------------------------------------

TITLE: Package Configuration
DESCRIPTION: Package.json configurations for both main package and inner module. Shows module type declaration and exports configuration that excludes specific module paths.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExportsExclude(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

LANGUAGE: json
CODE:
```
{
    "name": "inner",
    "private": true,
    "exports": {
        "./cjs/*": "./*.cjs",
        "./cjs/exclude/*": null,
        "./mjs/*": "./*.mjs",
        "./mjs/exclude/*": null,
        "./js/*": "./*.js",
        "./js/exclude/*": null
    }
}
```

----------------------------------------

TITLE: Re-exporting from a Module in TypeScript
DESCRIPTION: Re-exports all exports from the 'b' module, which includes the types from 'a'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace6.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
export * from "./b";
```

----------------------------------------

TITLE: Defining Properties with Object.defineProperty in JavaScript
DESCRIPTION: This JavaScript code defines an object `x` and uses `Object.defineProperty` to define various properties with specific attributes like `writable`, `get`, and `set`. This shows how to control the mutability and access behavior of object properties in JavaScript. It exports the object `x` using `module.exports = x;` to make it available to other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkObjectDefineProperty.errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
"const x = {};
    Object.defineProperty(x, \"name\", { value: \"Charles\", writable: true });
    Object.defineProperty(x, \"middleInit\", { value: \"H\" });
    Object.defineProperty(x, \"lastName\", { value: \"Smith\", writable: false });
    Object.defineProperty(x, \"zip\", { get() { return 98122 }, set(_) { /*ignore*/ } });
    Object.defineProperty(x, \"houseNumber\", { get() { return 21.75 } });
    Object.defineProperty(x, \"zipStr\", {
        /** @param {string} str */
        set(str) {
            this.zip = Number(str) 
        }
    });
    
    /**
     * @param {{name: string}} named
     */
    function takeName(named) { return named.name; }
    
    takeName(x);
    /**
     * @type {number}
     */
    var a = x.zip;
    
    /**
     * @type {number}
     */
    var b = x.houseNumber;
    
    const returnExemplar = () => x;
    const needsExemplar = (_ = x) => void 0;
    
    const expected = /** @type {{name: string, readonly middleInit: string, readonly lastName: string, zip: number, readonly houseNumber: number, zipStr: string}} */(/** @type {*} */(null));
    
    /**
     * 
     * @param {typeof returnExemplar} a 
     * @param {typeof needsExemplar} b 
     */
    function match(a, b) {}
    
    match(() => expected, (x = expected) => void 0);
    
    module.exports = x;"
```

----------------------------------------

TITLE: Handling Property Initialization in TypeScript Classes
DESCRIPTION: This snippet defines several TypeScript classes, each demonstrating potential errors related to property initialization order. Notably, it showcases error TS2729 when a property access is attempted before its initialization. Key dependencies include the use of TypeScript's class syntax and property initializers. Inputs are implicit, involving the instantiation of classes, and the output is compiler errors when building the code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/initializerWithThisPropertyAccess.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
    a: number;
    b = this.a;  // Error
    c = () => this.a;
    d = (new A()).a;
    constructor() {
        this.a = 1;
    }
}

class B extends A {
    x = this.a;
}

class C {
    a!: number;
    b = this.a;
}

// Repro from #37979

class Foo {
    private bar: Bar;
    readonly barProp = this.bar.prop;
    constructor() {
        this.bar = new Bar();
    }
}

class Bar {
    readonly prop = false;
}
```

----------------------------------------

TITLE: Unresolved Module Import in TypeScript
DESCRIPTION: Demonstrates an import error where the module './z' cannot be found or lacks type declarations
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/namespaceImportTypeQuery3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { A } from './z'; // unresolved
const A = 0;
export { A };
export class B {};
```

----------------------------------------

TITLE: Undefined Object Destructuring Assignment in TypeScript
DESCRIPTION: This code shows a TypeScript error arising from destructuring an `undefined` value on the right-hand side of an assignment, even though the left-hand side defines an object.  The compiler infers `undefined` and issues the error `TS2532: Object is possibly 'undefined'.`
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringAssignabilityCheck.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
    const { }: undefined = 1
          ~~~
!!! error TS2532: Object is possibly 'undefined'.
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options in tsconfig.json
DESCRIPTION: This JSON snippet defines the compiler options for a TypeScript project. It enables strict mode, targets ES2016, imports helpers, and uses the CommonJS module system.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tslibMissingHelper.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "strict": true,
        "target": "ES2016",
        "importHelpers": true,
        "module": "commonjs"
    }
}
```

----------------------------------------

TITLE: Collection and Sequence Interface Definitions in TypeScript
DESCRIPTION: Defines base interfaces for generic collections including Ara, Collection and Seq with map, flatMap and reduce operations. Includes nested interfaces N1 and N2 that extend the base Collection type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/complexRecursiveCollections.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Ara<T> { t: T }
interface Collection<K, V> {
    map<M>(mapper: (value: V, key: K, iter: this) => M): Collection<K, M>;
    flatMap<M>(mapper: (value: V, key: K, iter: this) => Ara<M>, context?: any): Collection<K, M>;
    reduce<R>(reducer: (reduction: R, value: V, key: K, iter: this) => R, initialReduction: R, context?: any): R;
    reduce<R>(reducer: (reduction: V | R, value: V, key: K, iter: this) => R): R;
    toSeq(): Seq<K, V>;
}
interface Seq<K, V> extends Collection<K, V> {
}
interface N1<T> extends Collection<void, T> {
    map<M>(mapper: (value: T, key: void, iter: this) => M): N1<M>;
    flatMap<M>(mapper: (value: T, key: void, iter: this) => Ara<M>, context?: any): N1<M>;
}
interface N2<T> extends N1<T> {
    map<M>(mapper: (value: T, key: void, iter: this) => M): N2<M>;
    flatMap<M>(mapper: (value: T, key: void, iter: this) => Ara<M>, context?: any): N2<M>;
    toSeq(): N2<T>;
}
```

----------------------------------------

TITLE: Package.json Configuration and Exports
DESCRIPTION: This snippet shows the content of package.json files for the 'foo' and 'bar' modules, which define their exports and type definitions. These configurations are crucial for proper module resolution and type declarations when using these modules in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvesWithoutExportsDiagnostic1(moduleresolution=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
        "name": "foo",
        "version": "1.0.0",
        "main": "index.js",
        "types": "index.d.ts",
        "exports": {
            ".": {
                "import": "./index.mjs",
                "require": "./index.js"
            }
        }
    }
```

LANGUAGE: JSON
CODE:
```
{
        "name": "@types/bar",
        "version": "1.0.0",
        "types": "index.d.ts",
        "exports": {
            ".": {
                "require": "./index.d.ts"
            }
        }
    }
```

LANGUAGE: JSON
CODE:
```
{
        "name": "bar",
        "version": "1.0.0",
        "main": "index.js",
        "exports": {
            ".": {
                "import": "./index.mjs",
                "require": "./index.js"
            }
        }
    }
```

----------------------------------------

TITLE: Concrete Class Implementation with and without Override Modifier in TypeScript
DESCRIPTION: Defines a concrete class `D4` that extends the abstract class `AB` and provides implementations for all abstract methods. It uses the `override` modifier for `foo` and `bar`. The `baz` method has an implementation, but since it overrides an abstract method, it should also use the 'override' modifier, but it is omitted in the snippet. It is assumed that the compiler will report an error for `baz` due to the missing `override` modifier.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/override2.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
"    class D4 extends AB {\n        override foo(v: ''): void {}\n        override bar(v: ''): void {}\n        baz(): void { }\n    }"
```

----------------------------------------

TITLE: Declaring React and JSX Elements in TypeScript
DESCRIPTION: This snippet declares the React library and sets up an interface for JSX intrinsic elements as well as declares variables X and a. It serves to ensure type safety for React components in TypeScript. The context provided indicates that there are errors relating to syntax during the use of these declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxParsingErrorImmediateSpreadInAttributeValue.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare const React: any

declare namespace JSX {
    interface IntrinsicElements {
        [k: string]: any
    }
}
    
const X: any
const a: any

<X a={...a} />
          ~~~
!!! error TS1109: Expression expected.
              ~
!!! error TS1003: Identifier expected.
```

----------------------------------------

TITLE: Interface Definition in TypeScript
DESCRIPTION: This snippet defines an interface `I1` with a call signature that takes a number and returns a number. It then assigns a function to a variable `i` of type `I1`. This demonstrates how interfaces can be used to define the types of functions in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/gettersAndSetters.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
    "interface I1 {
        (n:number):number;
    }
    
    var i:I1 = function (n) {return n;}"
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options
DESCRIPTION: This JSON snippet defines the compiler options for a TypeScript project. It specifies that the ECMAScript module should be used, node10 for module resolution, no emission of JavaScript files, and an empty array for type definitions. There are no constraints, but it assumes TypeScript tooling is available.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolutionModeTripleSlash4.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "module": "esnext",
    "moduleResolution": "node10",
    "noEmit": true,
    "types": []
  }
}
```

----------------------------------------

TITLE: Initializing Object with Default Values in TypeScript
DESCRIPTION: This snippet demonstrates how to initialize an object in TypeScript with default values for its properties, including nested objects. It showcases the syntax for assigning default values directly within the object literal. This allows properties to have fallback values if no explicit value is provided during object creation or when destructuring.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_27

LANGUAGE: typescript
CODE:
```
{
            "name": nameA = \"noName\",
            "skills": {
                "primary": primaryA = \"primary\",
                "secondary": secondaryA = \"secondary\"
            } = { primary: \"noSkill\", secondary: \"noSkill\" }
        }
```

----------------------------------------

TITLE: JSX 'props' Error Demonstration in TypeScript
DESCRIPTION: This snippet demonstrates the TS2607 error, which occurs when a JSX element class does not have a 'props' property and is used with attributes. The code defines an `Empty` React component without explicitly defining a `props` interface or type, leading to the error when attempting to spread properties into the component.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadAttributesResolution17.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare global {
    namespace JSX {
        interface Element {}
        interface ElementAttributesProperty { props: {} }
    }
}
declare var React: any;

export class Empty extends React.Component<{}, {}> {
    render() {
        return <div>Hello</div>;
    }
}

declare const obj: { a: number | undefined } | undefined;

// OK
let unionedSpread = <Empty {...obj} />;
                    ~~~~~~~~~~~~~~~~~~
```

----------------------------------------

TITLE: Module Importing in TypeScript
DESCRIPTION: These snippets illustrate two module import styles in TypeScript: standard ES module import and CommonJS require import. The code imports from module './a'. Modules must comply with TypeScript module resolution, requiring no specific prerequisites other than TypeScript configuration allowing module types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/impliedNodeFormatEmit1(module=umd).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import {} from "./a";
import a = require("./a");
```

----------------------------------------

TITLE: Invalid TypeScript Void Assignments and Type Checks
DESCRIPTION: Demonstrates various invalid type assignments in TypeScript, including attempts to assign void to different types and other type mismatches. Shows compiler errors for invalid assignments to boolean, string, number, class types, interfaces, and other constructs.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/invalidVoidAssignments.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var x: void;

var a: boolean = x;
var b: string = x;
var c: number = x;
var d: typeof undefined = x;

class C { foo: string; }
var e: C = x;

interface I { bar: string; }
var f: I = x;

var g: { baz: string } = 1;
var g2: { 0: number } = 1;

module M { export var x = 1; }
M = x;

function i<T>(a: T) {
    a = x;
}
i = x;

enum E { A }
x = E;
x = E.A;

x = { f() { } }
```

----------------------------------------

TITLE: Attempting Invalid Object Literal for ITextWriter2 in TypeScript
DESCRIPTION: Shows an attempt to create an object literal that does not conform to the ITextWriter2 interface, resulting in a TypeScript compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeInfer1.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
var yyyyyyyy: ITextWriter2 = {
    Moo: function() { return "cow"; }
}
```

----------------------------------------

TITLE: TypeScript Record satisfies type example
DESCRIPTION: This snippet shows how to use the `satisfies` keyword in TypeScript to ensure an object literal conforms to a `Record` type.  It defines a `Keys` type alias and then checks an object literal against `Record<Keys, unknown>`. The example demonstrates how TypeScript enforces that the object literal only contains properties defined in the `Keys` type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocSatisfiesTag7.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    /** @typedef {"a" | "b" | "c" | "d"} Keys */
    
    const p = /** @satisfies {Record<Keys, unknown>} */ ({
        a: 0,
        b: "hello",
        x: 8 // Should error, 'x' isn't in 'Keys'
        ~!!! error TS2353: Object literal may only specify known properties, and 'x' does not exist in type 'Record<Keys, unknown>'.
    })
    
    // Should be OK -- retain info that a is number and b is string
    let a = p.a.toFixed();
    let b = p.b.substring(1);
    
    // Should error even though 'd' is in 'Keys'
    let d = p.d;
              ~!!! error TS2339: Property 'd' does not exist on type '{ a: number; b: string; x: number; }'.
```

----------------------------------------

TITLE: TypeScript Class Definition and Default Export
DESCRIPTION: A TypeScript file defining a Member class and exporting it both as a named export and as the default export.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedImports12.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export class Member {}
export default Member;
```

----------------------------------------

TITLE: Initializing Variables with Default Values - JavaScript
DESCRIPTION: Initializes multiple variables within a loop's initialization statement. It demonstrates assigning properties from an object (`_25`, `_27`, `_28`) to new variables (`_26`, `nameA`, `_29`, `primaryA`, `_30`, `secondaryA`), providing default values using the `=== void 0 ? default : value` pattern if the source property is undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_75

LANGUAGE: JavaScript
CODE:
```
for (_25 = { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }, _26 = _25.name, nameA = _26 === void 0 ? "noName" : _26, _27 = _25.skills, _28 = _27 === void 0 ? { primary: "none", secondary: "none" } : _27, _29 = _28.primary, primaryA = _29 === void 0 ? "primary" : _29, _30 = _28.secondary, secondaryA = _30 === void 0 ? "secondary" : _30,
```

----------------------------------------

TITLE: Implementing Interface with Private Property Error in TypeScript
DESCRIPTION: This code demonstrates error TS2420 which occurs when a class implements an interface but declares a required public property as private. The interface 'I' requires a public property 'x', but class 'C' implements it as private, causing a type error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implementPublicPropertyAsPrivate.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I {
    x: number;
}
class C implements I {
    private x = 0; // should raise error at class decl
}
```

----------------------------------------

TITLE: Defining Derived Classes with Constructors in TypeScript
DESCRIPTION: This code snippet demonstrates how to define derived classes in TypeScript and highlights errors that occur when 'super' calls are omitted from constructors. It includes base class definitions and derived class constructors, showing errors like 'TS2377' when 'super' is not called and 'TS2337' when 'super' is incorrectly placed. Key focus is on the necessity of 'super' in constructors to ensure proper inheritance. No specific dependencies other than TypeScript are required.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassConstructorWithoutSuperCall.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```

    // derived class constructors must contain a super call
    
    class Base {
        x: string;
    }
    
    class Derived extends Base {
        constructor() { // error
        ~~~~~~~~~~~
!!! error TS2377: Constructors for derived classes must contain a 'super' call.
        }
    }
    
    class Base2<T> {
        x: T;
    }
    
    class Derived2<T> extends Base2<T> {
        constructor() { // error for no super call (nested scopes don't count)
        ~~~~~~~~~~~
!!! error TS2377: Constructors for derived classes must contain a 'super' call.
            var r2 = () => super(); // error for misplaced super call (nested function)
                           ~~~~~
!!! error TS2337: Super calls are not permitted outside constructors or in nested functions inside constructors.
        }
    }
    
    class Derived3<T> extends Base2<T> {
        constructor() { // error
        ~~~~~~~~~~~
!!! error TS2377: Constructors for derived classes must contain a 'super' call.
            var r = function () { super() } // error
                                  ~~~~~
!!! error TS2337: Super calls are not permitted outside constructors or in nested functions inside constructors.
        }
    }
    
    class Derived4<T> extends Base2<T> {
        constructor() {
            var r = super(); // ok
        }
    }
```

----------------------------------------

TITLE: Import and Namespace Conflict in TypeScript
DESCRIPTION: The snippet illustrates errors arising from conflicting imports and namespace declarations in TypeScript. Specifically, it showcases an import conflict and an attempt to merge namespaces improperly, which results in compilation errors. Dependencies include other TypeScript files and proper resolution of imports and namespaces. Key functionality pertains to handling import declarations and namespace merging correctly in TypeScript projects to avoid such conflicts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/namespaceMergedWithImportAliasNoCrash.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import * as Lib from './file1';
            ~~~
namespace Lib { // should fail to merge
    export const foo: string = "";
}
Lib.foo; // should work
var x: Lib.Bar; // should be an error
           ~~~
```

----------------------------------------

TITLE: Demonstrating TypeScript Type Assignment Errors
DESCRIPTION: This code snippet shows various scenarios of type assignments in TypeScript, highlighting errors when assigning incompatible types. It covers object assignments, primitive type assignments, and assignments involving wrapper objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nonPrimitiveAssignError.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var x = {};
var y = {foo: "bar"};
var a: object;
x = a;
y = a; // expect error
a = x;
a = y;

var n = 123;
var b = true;
var s = "fooo";

a = n; // expect error
a = b; // expect error
a = s; // expect error

n = a; // expect error
b = a; // expect error
s = a; // expect error

var numObj: Number = 123;
var boolObj: Boolean = true;
var strObj: String = "string";

a = numObj; // ok
a = boolObj; // ok
a = strObj; // ok
```

----------------------------------------

TITLE: Handling JSX Element Declaration in TypeScript
DESCRIPTION: This snippet declares a module for JSX in TypeScript, defining the Element interface and IntrinsicElements with string index signature. There are no errors in this snippet and it prepares TypeScript to handle JSX syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxParsingError2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare module JSX {
    interface Element { }
    interface IntrinsicElements {
        [s: string]: any;
    }
}
```

----------------------------------------

TITLE: Declaring JSX Elements in TypeScript
DESCRIPTION: The snippet defines a module and interface for JSX elements in TypeScript. This is necessary for TypeScript to understand and correctly compile JSX syntax. The IntrinsicElements interface allows for any string to be used as a JSX element, though doing so may result in errors if element names are misspelled or undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxFactoryQualifiedNameResolutionError.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare module JSX {
    interface IntrinsicElements {
        [s: string]: any;
    }
}
```

----------------------------------------

TITLE: Exporting Variables and Classes in TypeScript Module
DESCRIPTION: This snippet demonstrates the export of a variable, a class, and a function from a TypeScript module. The 'm1.ts' file exports a numeric variable, a class with a public member, and a function returning an instance of the exported class. There are no dependencies, and the classes are instantiated within the module. The use of TypeScript 'export' statements is showcased.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootRelativePathModuleSubfolderSpecifyOutputFile/node/mapRootRelativePathModuleSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Creating Utility Types for Type Inference in React Components
DESCRIPTION: Defines utility types for React component type inference. Includes GetProps to extract prop types from components, ConnectedComponentClass for higher-order components, and Matching for type-safe prop matching.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/circularlyConstrainedMappedTypeContainingConditionalNoInfiniteInstantiationDepth.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// Infers prop type from component C
export type GetProps<C> = C extends ComponentType<infer P> ? P : never;

export type ConnectedComponentClass<
    C extends ComponentType<any>,
    P
> = ComponentClass<P> & {
    WrappedComponent: C;
};

export type Matching<InjectedProps, DecorationTargetProps> = {
    [P in keyof DecorationTargetProps]: P extends keyof InjectedProps
        ? InjectedProps[P] extends DecorationTargetProps[P]
            ? DecorationTargetProps[P]
            : InjectedProps[P]
        : DecorationTargetProps[P];
};

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
```

----------------------------------------

TITLE: Destructuring Object with Nested Defaults - TypeScript
DESCRIPTION: This snippet illustrates how to destructure an object, providing default values for properties like 'name' and nested properties within 'skills' ('primary', 'secondary'). It also shows how to provide a default object for the 'skills' property itself if it's missing or null/undefined in the source object 'multiRobot'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_93

LANGUAGE: TypeScript
CODE:
```
{
     name = "noName",
         skills: {
             primary = "primary",
             secondary = "secondary"
         } = { primary: "none", secondary: "none" }
     } = multiRobot
```

----------------------------------------

TITLE: Declare a function in TypeScript (mod.cts)
DESCRIPTION: This snippet declares a function named `fun` that takes no arguments and returns void. This function is then exported as the default export of the module. This demonstrates a typical pattern for defining and exporting a default function in a TypeScript module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleNodeDefaultImports(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
declare function fun(): void;
export default fun;
```

----------------------------------------

TITLE: Implementing Abstract Class with Implicit 'any' Type in TypeScript
DESCRIPTION: A 'Child' class extending 'Parent' implements the 'message' setter, but also lacks type annotations. This results in TypeScript errors for implicit 'any' types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyMissingGetAccessor.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
class Child extends Parent {
    _x: any;
    public set message(str) {
        this._x = str;
    }
}
```

----------------------------------------

TITLE: Redux Dispatch Pattern with Parameter Inference
DESCRIPTION: This snippet shows a more complex TypeScript pattern for Redux-like dispatch functions. It defines types for function mappings and destructuring patterns, demonstrating parameter inference in higher-order functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bindingPatternCannotBeOnlyInferenceSource.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// Repro from #43605
type Dispatch<A = { type: any; [extraProps: string]: any }> = { <T extends A>(action: T): T };
type IFuncs = { readonly [key: string]: (...p: any) => void };
type IDestructuring<T extends IFuncs> = { readonly [key in keyof T]?: (...p: Parameters<T[key]>) => void };
type Destructuring<T extends IFuncs, U extends IDestructuring<T>> = (dispatch: Dispatch<any>, funcs: T) => U;
const funcs1 = {
    funcA: (a: boolean): void => {},
    funcB: (b: string, bb: string): void => {},
    funcC: (c: number, cc: number, ccc: boolean): void => {},
};
type TFuncs1 = typeof funcs1;
declare function useReduxDispatch1<T extends IDestructuring<TFuncs1>>(destructuring: Destructuring<TFuncs1, T>): T;
const {} = useReduxDispatch1(
    (d, f) => ({
        funcA: (...p) => d(f.funcA(...p)), // p should be inferrable
        funcB: (...p) => d(f.funcB(...p)),
        funcC: (...p) => d(f.funcC(...p)),
    })
);
```

----------------------------------------

TITLE: Defining Base Interface with Index Signatures in TypeScript
DESCRIPTION: This snippet defines a Base interface with numeric and string index signatures. It illustrates how to use index signatures to create flexible types while also exposing the potential for type compatibility issues when derived interfaces do not conform to the expected property types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedInterfaceIncompatibleWithBaseIndexer.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Base {
    [x: number]: { x: number; y: number; };
    [x: string]: { x: number; }
}
```

----------------------------------------

TITLE: Defining Prop Validation Types in TypeScript
DESCRIPTION: Creates type definitions for prop validation with support for type, default value, required status, and custom validator functions
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reverseMappedPartiallyInferableTypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export type PropOptions<T> = {
    type: PropType<T>;

    value?: PropDefaultValue<T>,
    required?: boolean;
    validator?: PropValidatorFunction<T>;
}
```

----------------------------------------

TITLE: Module Declarations in TypeScript
DESCRIPTION: Shows module declarations with various export statements, including ambient declarations and class members with access modifiers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/giant.errors.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
export module eM {
    var V;
    function F() { };
    class C { };
    interface I { };
    module M { };
    export var eV;
    export function eF() { };
    export class eC { };
    export interface eI { };
    export module eM { };
    export declare var eaV;
    export declare function eaF() { };
    export declare class eaC { };
    export declare module eaM { };
}
```

----------------------------------------

TITLE: Services Module Interface Definition
DESCRIPTION: Defines the IRequestService interface for handling HTTP requests and URL generation within the Services module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/variableDeclaratorResolvedDuringContextualTyping.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
module Services {
    export interface IRequestService {
        getRequestUrl(service: string, path?: string): string;
        getRequestUrl(service: string, path?: string, absolute?: boolean): string;
        makeRequest(options: WinJS.IXHROptions): WinJS.Promise;
    }
}
```

----------------------------------------

TITLE: Defining React Component with Single JSX Child in TypeScript
DESCRIPTION: This code defines a React component `SingleChildComp` that accepts a `SingleChildProp` interface. This interface enforces that the `children` prop must be a single JSX element, as declared by the type `JSX.Element`. The snippet also provides an example (k4) showcasing a valid usage of this component and an example (k5) that causes a TypeScript error due to multiple children being provided.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty14.errors.txt#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
interface SingleChildProp {
        a: number,
        b: string,
        children: JSX.Element;
    }
    
    function SingleChildComp(p: SingleChildProp) {
        return <div>{p.b}</div>;
    }
    
    // OK
    let k4 = <SingleChildComp a={10} b="hi"><><Button /><AnotherButton /></></SingleChildComp>;
    
    // Error
    let k5 = <SingleChildComp a={10} b="hi"><></><Button /><AnotherButton /></SingleChildComp>;
```

----------------------------------------

TITLE: Importing and Using A as a Value in TypeScript (with Error)
DESCRIPTION: Attempts to import A and use it as a value, which results in a compile-time error due to A being exported as a type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace1.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { A } from './c';
new A(); // Error
```

----------------------------------------

TITLE: Incompatible Function Overload in TypeScript
DESCRIPTION: Demonstrates a TypeScript compilation error where function overload signatures do not match the implementation signature. The first signature declares a return type of number, while the implementation returns a string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionOverloads4.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo():number;
function foo():string { return "a" }
```

----------------------------------------

TITLE: CommonJS to ESM Import Errors in TypeScript
DESCRIPTION: Collection of TypeScript errors (TS1479) showing invalid attempts to use require() for importing ECMAScript modules in CommonJS files (.cts). The errors suggest using dynamic import() statements instead.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
require('./index.js')        // Should be: import('./index.js')
require('./index.mjs')       // Should be: import('./index.mjs')
require('./subfolder/index.mjs') // Should be: import('./subfolder/index.mjs')
require('./subfolder2/index.mjs') // Should be: import('./subfolder2/index.mjs')
```

----------------------------------------

TITLE: Implementing Logical Assignment Operators in TypeScript
DESCRIPTION: Demonstrates three functions using different logical assignment operators (||=, ??=, &&=) with optional array parameters. Shows type checking behavior and error cases when dealing with possibly undefined values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment6(target=es2015).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo1(results: number[] | undefined, results1: number[] | undefined) {
    (results ||= (results1 ||= [])).push(100);
}

function foo2(results: number[] | undefined, results1: number[] | undefined) {
    (results ??= (results1 ??= [])).push(100);
}

function foo3(results: number[] | undefined, results1: number[] | undefined) {
    (results &&= (results1 &&= [])).push(100);
}
```

----------------------------------------

TITLE: tsconfig.json Configuration with TS5064 Error (JSON)
DESCRIPTION: This snippet shows a `tsconfig.json` file configuration that triggers the TS5064 error. The error occurs because the substitution value for the '*' pattern in the `paths` mapping is a number (1) instead of the expected string type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/pathsValidation2.errors.txt#_snippet_0

LANGUAGE: JSON
CODE:
```
{
    "compilerOptions": {
        "baseUrl": ".",
        "paths": {
            "*": [1]
        }
    }
}
```

----------------------------------------

TITLE: Iterating Over Function Result with Destructuring
DESCRIPTION: This code iterates over the result of a function call 'getMultiRobots()'. It uses object destructuring to extract 'primary' and 'secondary' properties from a 'skills' object within each element returned by the function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_13

LANGUAGE: javascript
CODE:
```
for (var _15 = 0, _16 = getMultiRobots(); _15 < _16.length; _15++) {
    _e = _16[_15].skills, primary = _e.primary, secondary = _e.secondary;
}
```

----------------------------------------

TITLE: Illegal Octal Literal in Strict Mode
DESCRIPTION: Using a numeric literal with a leading zero in strict mode, which is disallowed because it would be interpreted as an octal in non-strict mode.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationBindStrictModeErrors.errors.txt#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
"use strict";
var x = 009; // error
```

----------------------------------------

TITLE: Implementing a Class with a Generic Type Method
DESCRIPTION: This snippet demonstrates implementing the interface 'IFoo' in a class 'StringFoo3' with a method 'foo' having its own generic type 'T'. The method does not follow the expected method signature of the interface, leading to compilation errors. This implementation showcases complexities introduced by nested generics. The code needs TypeScript configured for development and illustrates constraints involved in generic method implementation within generic interfaces.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericSpecializations3.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
class StringFoo3 implements IFoo<string> { // error
    foo<T>(x: T): T { return null; }
}
var stringFoo3: StringFoo3;
```

----------------------------------------

TITLE: Importing Modules and Defining Variables in TypeScript
DESCRIPTION: This snippet imports a module and defines its own variables and classes, demonstrating how to leverage previously defined exports. The imported module must match the module format specified. Key parameters include 'a1', an exported number, and 'c1', a class that includes a property. The expected output is an instance of 'c1' and access to the imported class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcemapModuleSimpleSpecifyOutputFile/node/sourcemapModuleSimpleSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import m1 = require("m1");
export var a1 = 10;
export class c1 {
    public p1: number;
}

export var instance1 = new c1();
export function f1() {
    return instance1;
}

export var a2 = m1.m1_c1;
```

----------------------------------------

TITLE: Defining JSX Element Interface in TypeScript
DESCRIPTION: This snippet declares a module for JSX and defines an interface for JSX elements with an 'isElement' property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxGenericArrowFunctionParsing.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare module JSX {
	interface Element { isElement; }
}
```

----------------------------------------

TITLE: Using Partial and Record with Generic Types in TypeScript
DESCRIPTION: Two functions demonstrating the use of Partial<Record<>> type constructs with generic type parameters. These examples show how to work with potentially undefined properties in generic contexts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccessErrors.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
function f30<T, K extends keyof T>() {
    let x: Partial<Record<keyof T, string>>[K] = "hello";
}

function f31<T, K extends keyof T>() {
    let x: Partial<Partial<Partial<Partial<Partial<Partial<Partial<Record<keyof T, string>>>>>>>>[K] = "hello";
}
```

----------------------------------------

TITLE: Variable Assignment and Property Access in TypeScript
DESCRIPTION: This TypeScript code snippet demonstrates variable assignment using destructuring and property access within an array iteration. It handles potential undefined values by providing default values for `name`, `primary`, and `secondary` properties. The purpose is to extract and assign values from objects within the `_30` array to variables like `nameA`, `primaryA`, and `secondaryA`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_26

LANGUAGE: typescript
CODE:
```
var _31 = _30[_29], _32 = _31.name, nameA = _32 === void 0 ? "noName" : _32, _33 = _31.skills, _34 = _33 === void 0 ? { primary: "noSkill", secondary: "noSkill" } : _33, _35 = _34.primary, primaryA = _35 === void 0 ? "primary" : _35, _36 = _34.secondary, secondaryA = _36 === void 0 ? "secondary" : _36;
```

----------------------------------------

TITLE: Exporting Constants in TypeScript
DESCRIPTION: This snippet exports two constants 'a' and 'b' from a TypeScript module. It demonstrates basic module exports in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importAssertion1(module=es2015).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const a = 1;
export const b = 2;
```

----------------------------------------

TITLE: Creating JSX Components and Using Them in TypeScript
DESCRIPTION: This code snippet defines two functional components using JSX syntax in TypeScript. `Title` component expects a `children` prop of type string and renders an `h1` element. `Wrong` component expects an `offspring` prop of type string and renders an `h1` element. The code also demonstrates how to use these components, highlighting a type error due to a missing required property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxNamespaceElementChildrenAttributeIgnoredWhenReactJsx(jsx=react-jsxdev).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    const Title = (props: { children: string }) => <h1>{props.children}</h1>;
    
    <Title>Hello, world!</Title>;
    
    const Wrong = (props: { offspring: string }) => <h1>{props.offspring}</h1>;
    
    <Wrong>Byebye, world!</Wrong>
```

----------------------------------------

TITLE: Multiple Root Elements in JSX Expression (file2.tsx)
DESCRIPTION: This snippet demonstrates an invalid assignment of multiple JSX elements to a variable without wrapping them in a single parent element. It triggers a TS2657 error in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxErrorRecovery2.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
var x = <div></div><div></div>
```

----------------------------------------

TITLE: TypeScript Array Destructuring with Multiple Default Values Declaration
DESCRIPTION: This TypeScript code snippet showcases array destructuring with multiple default values defined directly within the destructuring pattern.  It demonstrates how to assign default values for `numberC`, `nameC`, and `skillC` if the corresponding elements in the array are undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
let 
    [numberC = -1, nameC = "noName", skillC = "noSkill"] = [3, "edging", "Trimming edges"]
```

----------------------------------------

TITLE: ES2023 Array Methods Implementation in TypeScript
DESCRIPTION: Example implementation showing usage of new ES2023 array methods including findLastIndex, findLast, toSorted, toSpliced, and with. The code demonstrates various ways to use these methods but requires the TypeScript compiler's 'lib' option to be set to 'es2023' or later.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/doYouNeedToChangeYourTargetLibraryES2023(target=es5).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export let array = [0, 2, 3, 4];

function somePredicate(x: any): boolean {
    return x === 4;
}

export let lastIndex1 = array.findLastIndex(v => v === 4);
export let lastIndex2 = array.findLastIndex(somePredicate);

export let last1 = array.findLast(somePredicate);
export let last2 = array.findLast(somePredicate);

export let sorted = array.toSorted();

export let spliced1 = array.toSpliced(2);
export let spliced2 = array.toSpliced(2, 1);
export let spliced3 = array.toSpliced(2, 1, 4, 5, 6, 7);
export let spliced4 = array.toSpliced(2, undefined);
export let spliced5 = array.toSpliced(2, undefined, 4, 5, 6, 7);

export let startsWithOne = array.with(0, 1);
export let inTheEnd = array.with(-1, 1);
```

----------------------------------------

TITLE: Function Declarations with Optional Parameters in TypeScript
DESCRIPTION: Defines standalone functions with various parameter configurations including default values and optional parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/optionalParamArgsTest.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function F1() { return 0; }
function F2(F2A1:number) { return F2A1; }
function F3(F3A1=0,F3A2=F3A1) {return F3A1 + F3A2; }
function F4(F4A1:number,F4A2?:number) { return F4A1 + F4A2; }
```

----------------------------------------

TITLE: TypeScript connect Definition and InferableComponentEnhancerWithProps
DESCRIPTION: This snippet shows the definition of the `connect` function with generics and a related type definition `InferableComponentEnhancerWithProps`. The `connect` function is overloaded to handle the case where `mapStateToProps` is null or undefined.  The snippet showcases how the `connect` function from libraries like Redux is typed using generics and utility types like `InferableComponentEnhancerWithProps` and `ResolveThunks` to maintain type safety when connecting components.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reactReduxLikeDeferredInferenceAllowsAssignment.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
declare const connect: {
      <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(MapDispatchToProps: TDispatchProps): InferableComponentEnhancerWithProps<
        ResolveThunks<TDispatchProps>,
        TOwnProps
      >;
      <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(MapStateToProps: null | undefined, MapDispatchToProps: TDispatchProps): InferableComponentEnhancerWithProps<
        ResolveThunks<TDispatchProps>,
        TOwnProps
      >;
    };
```

----------------------------------------

TITLE: Type Guard Functions in TypeScript
DESCRIPTION: Demonstrates various implementations of type guard functions that check for null values, including generic type guards and guards that flow between functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypePredicates.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function isNonNull(x: number | null) {
  return x !== null;
}

// factoring out a boolean works thanks to aliased discriminants
function isNonNullVar(x: number | null) {
  const ok = x !== null;
  return ok;
}

function isNonNullGeneric<T>(x: T) {
  return x !== null;
}

// Type guards can flow between functions
const myGuard = (o: string | undefined): o is string => !!o;
const mySecondGuard = (o: string | undefined) => myGuard(o);
```

----------------------------------------

TITLE: Defining Clickable, Button, and Link Interfaces in TypeScript
DESCRIPTION: This snippet defines TypeScript interfaces for clickable elements, buttons, and links. It specifies the common props and the specific props for buttons (onClick) and links (goTo).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextuallyTypedStringLiteralsInJsxAttributes02.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface ClickableProps {
    children?: string;
    className?: string;
}

export interface ButtonProps extends ClickableProps {
    onClick: (k: "left" | "right") => void;
}

export interface LinkProps extends ClickableProps {
    goTo: "home" | "contact";
}
```

----------------------------------------

TITLE: Defining Shape Type and Area Calculation
DESCRIPTION: This snippet defines a union type called Shape, which can either be a circle with a radius or a square with a side length. The function 'wat' attempts to compute the area based on the kind of shape provided. Due to type inconsistencies, TypeScript throws errors indicating the need for proper type checks.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowByClauseExpressionInSwitchTrue3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type Shape =
    | { kind: "circle", radius: number }
    | { kind: "square", sideLength: number }
    
function wat(shape: Shape) {
    switch (true) {
        case shape.kind === "circle":
            return Math.PI * shape.radius ** 2;
        case shape.kind === "circle": // should error
    }
    
    if (shape.kind === "circle") {
        ~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2367: This comparison appears to be unintentional because the types '"square"' and '"circle"' have no overlap.
        return Math.PI * shape.radius ** 2;
                                   ~~~~~~
!!! error TS2339: Property 'radius' does not exist on type 'never'.
    }
    else if (shape.kind === "circle") {
             ~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2367: This comparison appears to be unintentional because the types '"square"' and '"circle"' have no overlap.
        //         ~~~~
        // Property 'kind' does not exist on type 'never'.
    }
}
```

----------------------------------------

TITLE: Defining Interface and Class Implementation with Extended Properties in TypeScript
DESCRIPTION: This snippet defines a second interface 'i2' that includes an additional property 'age'. It shows how class 'C7' implements the 'name' property, and class 'C8' extends 'C7' to implement 'i2' by adding the 'age' property, thus adhering to the interface contracts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceImplementation8.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface i2 {
    name: string;
    age: number;
}

class C7 {
    public name:string;
}

class C8 extends C7 implements i2{
    public age:number;
}
```

----------------------------------------

TITLE: Defining React Component with Multiple JSX Children in TypeScript
DESCRIPTION: This code snippet defines a React component `Comp` that accepts a `Prop` interface which allows either a single JSX element or an array of JSX elements as children. This is achieved by using a union type `JSX.Element | JSX.Element[]` for the `children` property in the interface. The snippet also includes JSX examples (k1, k2, k3) showcasing how to pass valid children to this component.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty14.errors.txt#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import React = require('react');
    
    interface Prop {
        a: number,
        b: string,
        children: JSX.Element | JSX.Element[];
    }
    
    class Button extends React.Component<any, any> {
        render() {
            return (<div>My Button</div>)
        }
    }
    
    function AnotherButton(p: any) {
        return <h1>Just Another Button</h1>;
    }
    
    function Comp(p: Prop) {
        return <div>{p.b}</div>;
    }
    
    // OK
    let k1 = <Comp a={10} b="hi"><></><Button /><AnotherButton /></Comp>;
    let k2 = <Comp a={10} b="hi"><><Button /></><AnotherButton /></Comp>;
    let k3 = <Comp a={10} b="hi"><><Button /><AnotherButton /></></Comp>;
```

----------------------------------------

TITLE: Accessing Class Constructor Parameters with Different Access Modifiers in TypeScript
DESCRIPTION: This code demonstrates how constructor parameters with different access modifiers (public, private, protected) can be accessed in TypeScript. Public parameters are accessible from anywhere, private parameters are only accessible within the class, and protected parameters are accessible within the class and its subclasses.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classConstructorParametersAccessibility.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C1 {
    constructor(public x: number) { }
}
var c1: C1;
c1.x // OK


class C2 {
    constructor(private p: number) { }
}
var c2: C2;
c2.p // private, error


class C3 {
    constructor(protected p: number) { }
}
var c3: C3;
c3.p // protected, error
class Derived extends C3 {
    constructor(p: number) {
        super(p);
        this.p; // OK
    }
}
```

----------------------------------------

TITLE: Basic Import Example with Cursor Position in TypeScript
DESCRIPTION: A basic TypeScript import example showing the import of a Component from a local module with a cursor position marker indicating where auto-import suggestions might appear.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/autoImportAllowTsExtensions4.baseline.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// @Filename: /main.ts
import { Component } from "./local.js";
/*|*/
```

----------------------------------------

TITLE: Implementing Complex Nested Array Destructuring in TypeScript
DESCRIPTION: This code snippet demonstrates a complex nested array destructuring pattern with multiple default values. It extracts values from a nested array structure representing skills, with 'trimmer' as the primary element and an array of 'trimming' and 'edging' as secondary elements. Default values of 'primary' and 'secondary' are provided if the corresponding array elements are not present.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
for (let [, [[primarySkillA = "primary", secondarySkillA = "secondary"] = ["none", "none"]]] = ["trimmer", ["trimming", "edging"]], i = 0
```

----------------------------------------

TITLE: Interface Declarations in TypeScript
DESCRIPTION: Defines basic interfaces IFoo and IBar with type definitions for properties and methods
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface IFoo {
    n: number;
    s: string;
    f(i: number, s: string): string;
    a: number[];
}

interface IBar {
    foo: IFoo;
}
```

----------------------------------------

TITLE: Defining Exportable Class in TypeScript
DESCRIPTION: This snippet defines a class 'A' with a string property 'a' and exports it as a module. This class is used as a type import in the main file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importEqualsDeclaration.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
class A { a!: string }
export = A;
```

----------------------------------------

TITLE: Defining Class and Instance in TypeScript - test.ts
DESCRIPTION: This snippet demonstrates the use of class definitions and instances in a test file that references two other TypeScript files, 'm1.ts' and 'm2.ts'. It initializes a variable 'a1', defines a class 'c1', and creates an instance of this class. A function is defined to return the created instance, exemplifying how to reference and utilize classes from other files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlsourcerootUrlMultifolderSpecifyOutputFile/node/maprootUrlsourcerootUrlMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
/// <reference path='ref/m1.ts'/>
/// <reference path='../outputdir_multifolder_ref/m2.ts'/>
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: Define TypeScript Interfaces with Inheritance
DESCRIPTION: Defines three interfaces `A`, `B`, and `C` in TypeScript, where `B` extends `A`, and `C` extends `B`. This demonstrates interface inheritance and type hierarchies in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generics2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface A { a: string; }
interface B extends A { b: string; }
interface C extends B { c: string; }
```

----------------------------------------

TITLE: Function Interface with Variance Properties
DESCRIPTION: Definition of Fn interface demonstrating contravariant parameter types and covariant return types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/varianceMeasurement.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
interface Fn<A, B> {
  (a: A): B;
  then<C>(next: Fn<B, C>): Fn<A, C>;
}
```

----------------------------------------

TITLE: Iterating over Robots Array in JavaScript
DESCRIPTION: The snippet demonstrates iteration over an array obtained from getRobots(), destructuring each element into a number and additional robot info. It logs the numerical component of each element to the console. Prerequisites include a function getRobots() returning an array suitable for destructuring. The code outputs numbers from each robot entry.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_23

LANGUAGE: javascript
CODE:
```
for (var _25 = 0, _26 = getRobots(); _25 < _26.length; _25++) {
    var _27 = _26[_25], numberA3 = _27[0], robotAInfo = _27.slice(1);
    console.log(numberA3);
}
```

----------------------------------------

TITLE: Destructuring Skills with Default Values in TypeScript
DESCRIPTION: This code snippet destructures the skills properties of the robotA variable while providing default values in case those properties are undefined. It showcases TypeScript's handling of optional properties and default parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementNestedObjectBindingPatternWithDefaultValues.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var _a = robotA.skills, _b = _a === void 0 ? { primary: "noSkill", secondary: "noSkill" } : _a, _c = _b.primary, primaryA = _c === void 0 ? "noSkill" : _c, _d = _b.secondary, secondaryA = _d === void 0 ? "noSkill" : _d;
```

----------------------------------------

TITLE: Arrow Functions as Function Parameters in TypeScript
DESCRIPTION: Example of passing various arrow function styles as arguments to another function, demonstrating how arrow functions can be used as callbacks.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/fatarrowfunctionsOptionalArgs.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
// Function Parameters
function foo(...arg: any[]) { }

foo(
    (a) => 110, 
    ((a) => 111), 
    (a) => {
        return 112;
    },
    (a? ) => 113, 
    (a, b? ) => 114, 
    (a: number) => 115, 
    (a: number = 0) => 116, 
    (a = 0) => 117, 
    (a?: number = 0) => 118, 
    (...a: number[]) => 119, 
    (a, b? = 0, ...c: number[]) => 120,
    (a) => (b) => (c) => 121,
    false? (a) => 0 : (b) => 122
);
```

----------------------------------------

TITLE: Importing a Component from a local TSX file
DESCRIPTION: Example of importing a Component from a relative path TSX file and referencing it in the code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/autoImportAllowTsExtensions2.baseline.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { Component } from "./Component.tsx";

Component
```

----------------------------------------

TITLE: Exporting Variables via List in TypeScript (t3.ts)
DESCRIPTION: Illustrates exporting multiple variables ('x', 'y', 'z') using an export list syntax in a TypeScript module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportStar-amd.errors.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
var x = "x";
var y = "y";
var z = "z";
export { x, y, z };
```

----------------------------------------

TITLE: JavaScript Function Assignment with TypeScript Error
DESCRIPTION: This code snippet shows a JavaScript function assignment that results in a TypeScript error. The variable 'b' is used before it is defined, causing a compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noDuplicateJsdoc1.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
/** doc */
const a = b = () => 0;
```

----------------------------------------

TITLE: Declaring Promise-related test functions in TypeScript
DESCRIPTION: Declaration of various test functions that return either IPromise<T> or Promise<T> with different parameter patterns, including overloaded functions and generic type parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
declare function testFunction(): IPromise<number>;
declare function testFunctionP(): Promise<number>;
declare function testFunction2(): IPromise<{ x: number }>;
declare function testFunction2P(): Promise<{ x: number }>;
declare function testFunction3(x: number): IPromise<number>;
declare function testFunction3P(x: number): Promise<number>;
declare function testFunction4(x: number, y?: string): IPromise<string>;
declare function testFunction4P(x: number, y?: string): Promise<string>;
declare function testFunction5(x: number, cb: (a: string) => string): IPromise<string>;
declare function testFunction5P(x: number, cb: (a: string) => string): Promise<string>;
declare function testFunction6(x: number, cb: <T>(a: T) => T): IPromise<string>;
declare function testFunction6P(x: number, cb: <T>(a: T) => T): Promise<string>;
declare function testFunction7(cb: <T>(a: T) => T): IPromise<string>;
declare function testFunction7P(cb: <T>(a: T) => T): Promise<string>;
declare function testFunction8<T>(x: T, cb: (a: T) => T): IPromise<T>;
declare function testFunction8P<T>(x: T, cb: (a: T) => T): Promise<T>;
declare function testFunction9<T>(x: T, cb: <U>(a: U) => U): IPromise<T>;
declare function testFunction9P<T>(x: T, cb: <U>(a: U) => U): Promise<T>;
declare function testFunction10<T>(cb: <U>(a: U) => U): IPromise<T>;
declare function testFunction10P<T>(cb: <U>(a: U) => U): Promise<T>;

declare function testFunction11(x: number): IPromise<number>;
declare function testFunction11(x: string): IPromise<string>;
declare function testFunction11P(x: number): Promise<number>;
declare function testFunction11P(x: string): Promise<string>;

declare function testFunction12<T>(x: T): IPromise<T>;
declare function testFunction12<T>(x: T, y: T): IPromise<T>;
declare function testFunction12P<T>(x: T): IPromise<T>;
declare function testFunction12P<T>(x: T, y: T): Promise<T>;
```

----------------------------------------

TITLE: Logical Assignment with Object References in TypeScript
DESCRIPTION: This snippet shows usage of logical assignment operators with objects, demonstrating conditional handling of ThingWithOriginal type objects. It contains type safety issues with potentially undefined values, causing TypeScript errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment4(target=es2021).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface ThingWithOriginal {
    name: string;
    original?: ThingWithOriginal
}
declare const v: number
function doSomethingWithAlias(thing: ThingWithOriginal | undefined, defaultValue: ThingWithOriginal | undefined) {
    if (v === 1) {
        if (thing &&= thing.original) {
            thing.name;
        }
    }
    else if (v === 2) {
        if (thing &&= defaultValue) {
            thing.name;
            defaultValue.name
        }
    }
    else if (v === 3) {
        if (thing ||= defaultValue) {
            thing.name;
            defaultValue.name;
            ~~~~~~~~~~~~
!!! error TS18048: 'defaultValue' is possibly 'undefined'.
        }
    }
    else {
        if (thing ??= defaultValue) {
            thing.name;
            defaultValue.name;
            ~~~~~~~~~~~~
!!! error TS18048: 'defaultValue' is possibly 'undefined'.
        }
    }
}
```

----------------------------------------

TITLE: Destructuring Multi-Robot Skills with Default Values
DESCRIPTION: Uses object destructuring in a for...of loop to extract primary and secondary skills from a collection of robots, with fallback default values if skills are not specified
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
for ({\n    skills: {\n        primary = "primary",\n        secondary = "secondary"\n    } = { primary: "noSkill", secondary: "noSkill" }\n} of getMultiRobots()) {\n    // Loop body processing robot skills\n}
```

----------------------------------------

TITLE: Detect Supported Browsers
DESCRIPTION: This snippet performs checks to identify whether the user is using a supported browser of specific versions and types, including mobile and desktop environments. The detection is based on version numbers and browser types and categorizes them into grades for content delivery.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/fixSignatureCaching.errors.txt#2025-04-21_snippet_19

LANGUAGE: JavaScript
CODE:
```
( t.is('Firefox') && t.version('Firefox')>=12 ) ||\n\n    // Chrome for Android - Tested on Android 4.0, 4.1 device\n    ( t.is('Chrome') && t.is('AndroidOS') && t.version('Android')>=4.0 ) ||\n\n    // Skyfire 4.1 - Tested on Android 2.3 device\n    ( t.is('Skyfire') && t.version('Skyfire')>=4.1 && t.is('AndroidOS') && t.version('Android')>=2.3 ) ||\n\n    // Opera Mobile 11.5-12: Tested on Android 2.3\n    ( t.is('Opera') && t.version('Opera Mobi')>11 && t.is('AndroidOS') ) ||\n\n    // Meego 1.2 - Tested on Nokia 950 and N9\n    t.is('MeeGoOS') ||\n\n    // Tizen (pre-release) - Tested on early hardware\n    t.is('Tizen') ||\n\n    // Samsung Bada 2.0 - Tested on a Samsung Wave 3, Dolphin browser\n    // @todo: more tests here!\n    t.is('Dolfin') && t.version('Bada')>=2.0 ||\n\n    // UC Browser - Tested on Android 2.3 device\n    ( (t.is('UC Browser') || t.is('Dolfin')) && t.version('Android')>=2.3 ) ||\n\n    // Kindle 3 and Fire  - Tested on the built-in WebKit browser for each\n    ( t.match('Kindle Fire') ||\n        t.is('Kindle') && t.version('Kindle')>=3.0 ) ||\n\n    // Nook Color 1.4.1 - Tested on original Nook Color, not Nook Tablet\n    t.is('AndroidOS') && t.is('NookTablet') ||\n\n    // Chrome Desktop 11-21 - Tested on OS X 10.7 and Windows 7\n    t.version('Chrome')>=11 && !$isMobile ||\n\n    // Safari Desktop 4-5 - Tested on OS X 10.7 and Windows 7\n    t.version('Safari')>=5.0 && !$isMobile ||\n\n    // Firefox Desktop 4-13 - Tested on OS X 10.7 and Windows 7\n    t.version('Firefox')>=4.0 && !$isMobile ||\n\n    // Internet Explorer 7-9 - Tested on Windows XP, Vista and 7\n    t.version('MSIE')>=7.0 && !$isMobile ||\n\n    // Opera Desktop 10-12 - Tested on OS X 10.7 and Windows 7\n    // @reference: http://my.opera.com/community/openweb/idopera/\n    t.version('Opera')>=10 && !$isMobile\n\n    ){\n    return 'A';\n}\n\nif (\n    t.os('iOS') && t.version('iPad')<4.3 ||\n    t.os('iOS') && t.version('iPhone')<3.1 ||\n    t.os('iOS') && t.version('iPod')<3.1 ||\n\n    // Blackberry 5.0: Tested on the Storm 2 9550, Bold 9770\n    t.is('Blackberry') && t.version('BlackBerry')>=5 && t.version('BlackBerry')<6 ||\n\n    //Opera Mini (5.0-6.5) - Tested on iOS 3.2/4.3 and Android 2.3\n    ( t.version('Opera Mini')>=5.0 && t.version('Opera Mini')<=6.5 &&\n        (t.version('Android')>=2.3 || t.is('iOS')) ) ||\n\n    // Nokia Symbian^3 - Tested on Nokia N8 (Symbian^3), C7 (Symbian^3), also works on N97 (Symbian^1)\n    t.match('NokiaN8|NokiaC7|N97.*Series60|Symbian/3') ||\n\n    // @todo: report this (tested on Nokia N71)\n    t.version('Opera Mobi')>=11 && t.is('SymbianOS')\n    ){\n    return 'B';\n}\n\nif (\n// Blackberry 4.x - Tested on the Curve 8330\n    t.version('BlackBerry')<5.0 ||\n    // Windows Mobile - Tested on the HTC Leo (WinMo 5.2)\n    t.match('MSIEMobile|Windows CE.*Mobile') || t.version('Windows Mobile')<=5.2\n\n    ){\n    return 'C';\n}\n\n//All older smartphone platforms and featurephones - Any device that doesn't support media queries\n//will receive the basic, C grade experience.\nreturn 'C';
```

----------------------------------------

TITLE: Referencing and Instantiating Classes in TypeScript
DESCRIPTION: This snippet shows how to reference another TypeScript file and define a class with properties, creating an instance of the class as well. It provides a basic example of using references in TypeScript projects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlSimpleSpecifyOutputFile/node/maprootUrlSimpleSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
/// <reference path='m1.ts'/>
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: Valid Enum Initialization Examples - TypeScript
DESCRIPTION: Multiple examples of correctly initialized enums showing various initialization patterns including literal values, expressions, and references.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enumNoInitializerFollowsNonLiteralInitializer.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { foo } from "./helpers";
enum A {
    a = foo,
    b = 3,
}
enum B {
    a = 1 + 1,
    b,
}
enum C {
    a = +2,
    b,
}
enum D {
    a = (2),
    b,
}
enum E {
    a,
    b,
    c = a,
    d,
    e = d | b,
    f,
}
```

----------------------------------------

TITLE: Implementing Function with Multiple Destructuring Parameters in TypeScript
DESCRIPTION: Defines a function 'foo2' that uses destructuring parameters with object binding pattern and default values for both 'name' and 'skill' properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringParameterObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
function foo2({ name: nameB = "<NoName>", skill: skillB = "noSkill" }: Robot = {}) {
    // Function body not provided in the original snippet
}
```

----------------------------------------

TITLE: Function Block Level Name Conflicts in TypeScript
DESCRIPTION: Demonstrates naming conflicts between functions and variables within a function block scope. Shows how TypeScript handles duplicate identifiers in nested scopes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionNameConflicts.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function func() {
    var fn4;
    function fn4() { }

    function fn5() { }
    var fn5;
}
```

----------------------------------------

TITLE: Initializing Enum Constants with Various Numeric Values in TypeScript
DESCRIPTION: This snippet demonstrates different ways of initializing enum constants in TypeScript, including positive integers, negative numbers, and decimal values. It shows which initializations are valid and which ones cause errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enumConstantMembers.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
enum E1 {
    a = 1,
    b
}
enum E2 {
    a = - 1,
    b
}
enum E3 {
    a = 0.1,
    b // Error because 0.1 is not a constant
}

declare enum E4 {
    a = 1,
    b = -1,
    c = 0.1 // Not a constant
}
```

----------------------------------------

TITLE: Accessing Non-existent Property on Number Type in TypeScript
DESCRIPTION: This code demonstrates an incorrect property access on a number type variable, which results in a TypeScript compilation error. The variable 'foo' is declared as a number, but the code attempts to call a non-existent 'toBAZ' method on it.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertyAccess2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var foo: number;
foo.toBAZ();
```

----------------------------------------

TITLE: Creating React Components with TypeScript and Refs
DESCRIPTION: This code demonstrates a complete React component example in TypeScript, showing a stateless functional component (Greet) and a class component (BigGreeter). It illustrates correct and incorrect usage of refs, key props, and property access patterns with associated TypeScript errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponents2.errors.txt#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import React = require('react');

function Greet(x: {name?: string}) {
	return <div>Hello, {x}</div>;
}

class BigGreeter extends React.Component<{ name?: string }, {}> {
	render() {
		return <div></div>;
	}
	greeting: string;
}

// OK
let a = <Greet />;
// OK - always valid to specify 'key'
let b = <Greet key="k" />;
// Error - not allowed to specify 'ref' on SFCs
let c = <Greet ref="myRef" />;

// OK - ref is valid for classes
let d = <BigGreeter ref={x => x.greeting.substr(10)} />;
// Error ('subtr' not on string)
let e = <BigGreeter ref={x => x.greeting.subtr(10)} />;
// Error (ref callback is contextually typed)
let f = <BigGreeter ref={x => x.notARealProperty} />;

// OK - key is always valid
let g = <BigGreeter key={100} />;

// OK - contextually typed intrinsic ref callback parameter
let h = <div ref={x => x.innerText} />;
// Error - property not on ontextually typed intrinsic ref callback parameter
let i = <div ref={x => x.propertyNotOnHtmlDivElement} />;
```

----------------------------------------

TITLE: Separate Logical OR Assignment and Array Push in TypeScript
DESCRIPTION: This function demonstrates the use of the ||= operator to initialize an array if it's undefined, followed by a separate push operation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment4(target=esnext).errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
function foo3(results: number[] | undefined) {
    results ||= [];
    results.push(100);
}
```

----------------------------------------

TITLE: Separate Nullish Coalescing Assignment and Array Push in TypeScript
DESCRIPTION: This function shows the use of the ??= operator to initialize an array if it's undefined, followed by a separate push operation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment4(target=esnext).errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
function foo4(results: number[] | undefined) {
    results ??= [];
    results.push(100);
}
```

----------------------------------------

TITLE: Module Definition: m1.ts
DESCRIPTION: Defines a TypeScript module named 'm1' with a variable, a class, an instance of the class, and a function that returns the instance. It exports these elements for use in other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlsourcerootUrlModuleSimpleSpecifyOutputFile/node/maprootUrlsourcerootUrlModuleSimpleSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    export var m1_a1 = 10;
    export class m1_c1 {
        public m1_c1_p1: number;
    }
    
    export var m1_instance1 = new m1_c1();
    export function m1_f1() {
        return m1_instance1;
    }
```

----------------------------------------

TITLE: Destructuring Nested Object Properties and Renaming in JavaScript
DESCRIPTION: This JavaScript snippet destructures the `name` property directly from `robotB` into the `nameB` variable and also destructures the nested skills properties into `primaryB` and `secondaryB`, while using temporary variable `_b`. This illustrates destructuring and renaming variables simultaneously during the extraction process from a nested object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementNestedObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
var nameB = robotB.name, _b = robotB.skills, primaryB = _b.primary, secondaryB = _b.secondary;
```

----------------------------------------

TITLE: Defining and Using Object Types in JSX
DESCRIPTION: This snippet defines three different object types (Obj1type, Obj2type, Obj3type) and demonstrates their usage in JSX elements. It shows how TypeScript performs type checking on JSX props based on the defined interfaces.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxElementResolution11.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
interface Obj1type {
	new(n: string): any;
}
var Obj1: Obj1type;
<Obj1 x={10} />; // OK

interface Obj2type {
	new(n: string): { q?: number };
}
var Obj2: Obj2type;
<Obj2 x={10} />; // Error

interface Obj3type {
	new(n: string): { x: number; };
}
var Obj3: Obj3type;
<Obj3 x={10} />; // OK
```

----------------------------------------

TITLE: Invalid JSX Structure in TypeScript (file1.tsx)
DESCRIPTION: This snippet shows an invalid JSX structure in TypeScript where multiple root elements are defined without a single parent. It results in a TS2657 error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxErrorRecovery2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare namespace JSX { interface Element { } }

<div></div>
<div></div>
```

----------------------------------------

TITLE: Defining TypeScript Enum for Weekdays
DESCRIPTION: Defines a simple TypeScript enumeration named 'Weekdays' with members representing days of the week.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constructorWithIncompleteTypeAnnotation.errors.txt#_snippet_16

LANGUAGE: TypeScript
CODE:
```
enum Weekdays {
    Monday,
    Tuesday,
    Weekend,
}
```

----------------------------------------

TITLE: Decorating Static Private Members (TypeScript)
DESCRIPTION: TypeScript source code demonstrating the application of decorators (@dec) to static private methods, getters, setters, and fields within a class. This syntax is part of the updated decorator proposal.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-sourceMap(target=es2022).sourcemap.txt#_snippet_30

LANGUAGE: TypeScript
CODE:
```
@dec
@dec
static #method() {}

@dec
@dec
static get #x() { return 1; }

@dec
@dec
static set #x(value: number) { }

@dec
@dec
static #y = 1;
```

----------------------------------------

TITLE: Derived Interface Satisfying String but not Numeric Index in TypeScript
DESCRIPTION: This snippet defines a Derived5 interface that introduces a numeric index with an object type that does not meet the conditions expected by the numeric index signature in the Base interface, highlighting potential pitfalls in TypeScript's type system. It also shows how changing the representation to string indices can bypass type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedInterfaceIncompatibleWithBaseIndexer.errors.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
interface Derived5 extends Base {
        1: { x: number } // error
    }
```

----------------------------------------

TITLE: Implementing Iterator Protocol in TypeScript (Incorrect)
DESCRIPTION: This snippet shows an incorrect implementation of the iterator protocol in TypeScript. The SymbolIterator class defines a [Symbol.iterator]() method but fails to return an object with a next() method, causing a TypeScript error when used with the spread operator.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/iteratorSpreadInArray10.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class SymbolIterator {
    [Symbol.iterator]() {
        return this;
    }
}

var array = [...new SymbolIterator];
```

----------------------------------------

TITLE: Defining a Class with Default Export in TypeScript
DESCRIPTION: This snippet attempts to define a class 'C' with a default export in TypeScript. Due to the TypeScript language constraints, a module cannot have multiple default exports, leading to TS2528 errors in this scenario. The code demonstrates the incorrect attempt to export the same class multiple times, making it a learning point for developers about TypeScript's export rules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/multipleDefaultExports03.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export default class C {
                         ~
!!! error TS2528: A module cannot have multiple default exports.
!!! related TS2753 multipleDefaultExports03.ts:4:22: Another export default is here.
    }
    
    export default class C {
                         ~
!!! error TS2528: A module cannot have multiple default exports.
!!! related TS2752 multipleDefaultExports03.ts:1:22: The first export default is here.
    }
```

----------------------------------------

TITLE: Using ??= with Property Access in Assignment Right Side in TypeScript
DESCRIPTION: Illustrates the use of `??=` where the right side of the assignment attempts to access a property (`toString`) on the potentially undefined variable `f`. The compiler correctly reports an error (TS18048) because `f` is not guaranteed to be defined when the right side expression is evaluated.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment5(target=es2020).errors.txt#_snippet_3

LANGUAGE: TypeScript
CODE:
```
function bar1 (f?: (a: number) => void) {
    f ??= (f.toString(), (a => a))
    f(42)
}
```

----------------------------------------

TITLE: Demonstrating Property Initialization Order Errors in TypeScript Classes
DESCRIPTION: This code demonstrates TypeScript's property initialization order rules. It shows cases where accessing properties before initialization causes TS2729 errors, and cases where the access is valid. It includes examples of parameter properties, method definitions, and property initializers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignParameterPropertyToPropertyDeclarationESNext.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    qux = this.bar // should error
    bar = this.foo // should error
    quiz = this.bar // ok
    quench = this.m1() // ok
    quanch = this.m3() // should error
    m1() {
        this.foo // ok
    }
    m3 = function() { }
    constructor(public foo: string) {}
    quim = this.baz // should error
    baz = this.foo; // should error
    quid = this.baz // ok
    m2() {
        this.foo // ok
    }
}

class D extends C {
    quill = this.foo // ok
}

class E {
    bar = () => this.foo1 + this.foo2; // both ok
    foo1 = '';
    constructor(public foo2: string) {}
}

class F {
    Inner = class extends F {
        p2 = this.p1
    }
    p1 = 0
}
class G {
    Inner = class extends G {
        p2 = this.p1
    }
    constructor(public p1: number) {}
}
class H {
    constructor(public p1: C) {}

    public p2 = () => {
        return this.p1.foo;
    }

    public p3 = () => this.p1.foo;
}
```

----------------------------------------

TITLE: Error Handling in TypeScript - CommonJS Format - subfolder2/another/index.cts
DESCRIPTION: This snippet captures the same CommonJS syntax errors, reinforcing the crucial corrections needed to align with TypeScript's .cts syntax requirements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesForbidenSyntax(module=node18).errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
// cjs format file
const x = <T>() => <T><any>(void 0);
export {x};
```

----------------------------------------

TITLE: Handling Missing Return Type Annotations in TypeScript
DESCRIPTION: Here, a function arrow method is defined while enforcing explicit return types as per TypeScript's configuration. This example emphasizes best coding practices in TypeScript by promoting type safety.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedDeclarationErrorsReturnTypes.errors.txt#2025-04-21_snippet_9

LANGUAGE: TypeScript
CODE:
```
fnArrowMethodHasReturn = (cb = function(){ }): string => "S";
```

----------------------------------------

TITLE: Demonstrating Variable Scoping Rules with 'let' in TypeScript
DESCRIPTION: This code demonstrates block scoping rules in TypeScript for variables declared with 'let'. It shows that variables are only accessible within their declaring block and any nested blocks, but not in parent or sibling scopes. The compiler produces errors when attempting to access variables outside their scope.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/letDeclarations-scopes2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
let global = 0;

{ 
    let local = 0;

    local;  // OK
    global; // OK
    local2; // Error

    {
        let local2 = 0;

        local;  // OK
        global; // OK
        local2; // OK
    } 

    local;  // OK
    global; // OK
    local2; // Error
}

local;  // Error
global; // OK
local2; // Error
```

----------------------------------------

TITLE: TypeScript Object Type Literal Declaration Patterns
DESCRIPTION: Demonstrates three different ways of declaring object type literals in TypeScript, including proper comma separation, ASI (Automatic Semicolon Insertion), and an incorrect inline declaration missing a separator.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectTypeLiteralSyntax2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var x: {
    foo: string,
    bar: string
}

// ASI makes this work
var y: {
    foo: string
    bar: string
}

var z: { foo: string bar: string }
```

----------------------------------------

TITLE: Ambient Context Implementation Error in TypeScript
DESCRIPTION: This code demonstrates the TS1183 error.  The error arises because `declare class C` defines an ambient context, which is intended only for type declarations and not for implementations. Trying to provide an implementation, as is done with `get foo() { return 0; }`, leads to the error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserAccessors5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    declare class C {
      get foo() { return 0; }
    }
```

----------------------------------------

TITLE: Demonstrating Duplicate Object Literal Properties in TypeScript
DESCRIPTION: This code snippet shows multiple examples of object literals with duplicate properties, triggering TypeScript error TS1117. It covers cases with numeric literals, computed properties, and string literals, illustrating when TypeScript considers properties to be duplicates.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/duplicateObjectLiteralProperty_computedName1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const t1 = {
    1: 1,
    [1]: 0 // duplicate
}

const t2 = {
    1: 1,
    [+1]: 0 // duplicate
}

const t3 = {
    "1": 1,
    [+1]: 0 // duplicate
}

const t4 = {
    "+1": 1,
    [+1]: 0 // two different keys, "+1", "1"
}

const t5 = {
    "+1": 1,
    ["+1"]: 0 // duplicate
}

const t6 = {
    "-1": 1,
    [-1]: 0 // duplicate
}

const t7 = {
    "-1": 1,
    ["-1"]: 0 // duplicate
}
```

----------------------------------------

TITLE: Retrieving Skills with Default Values in TypeScript
DESCRIPTION: This code snippet initializes variables from the getMultiRobot function's return value, providing default values for primary and secondary skills. The variables primaryA and secondaryA are assigned default strings if the retrieved skill values are undefined. This snippet handles default assignments for variables using destructuring.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_10

LANGUAGE: TypeScript
CODE:
```
for (var _h = getMultiRobot().skills, _j = _h === void 0 ? { primary: "none", secondary: "none" } : _h, _k = _j.primary, primaryA = _k === void 0 ? "primary" : _k, _l = _j.secondary, secondaryA = _l === void 0 ? "secondary" : _l, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Demonstrating TypeScript Export Errors with 'isolatedModules'
DESCRIPTION: This code snippet illustrates various export scenarios in TypeScript, showing errors that occur when re-exporting types or type-only namespaces with the 'isolatedModules' flag enabled. It also demonstrates correct export patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedModulesReExportType.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Error, can't re-export something that's only a type.
export { T } from "./exportT";
export import T2 = require("./exportEqualsT");

// OK, has a value side
export { C } from "./exportValue";

// OK, even though the namespace it exports is only types.
import * as NS from "./exportT";
export { NS };

// OK, syntactically clear that a type is being re-exported.
export type T3 = T;

// Error, not clear (to an isolated module) whether `T4` is a type.
import { T } from "./exportT";
export { T as T4 };

// Ok, type-only import indicates that the export can be elided.
import type { T as TT } from "./exportT";
export { TT };

// Error, type-only declaration is in a different file.
import { C as CC } from "./reExportValueAsTypeOnly";
export { CC };
```

----------------------------------------

TITLE: Package Configuration for ESM - JSON
DESCRIPTION: This package.json snippet indicates that the project is configured as an ECMAScript module through the 'type' field. This enables the use of ESM features throughout the project. The dependency is Node.js that supports module types according to the defined configuration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportMeta(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Template Literal Type Assignment Compatibility
DESCRIPTION: Shows how template literal types can be assigned to more general types like string, String, Object, and object types with specific properties, demonstrating the subtype relationship.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes2.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
type T0 = string | `${number}px`;

function ft14(t: `foo${number}`) {
    let x1: string = t;
    let x2: String = t;
    let x3: Object = t;
    let x4: {} = t;
    let x6: { length: number } = t;
}
```

----------------------------------------

TITLE: Declaring variable with non-existent Null type (TypeScript)
DESCRIPTION: This TypeScript code snippet attempts to declare a variable 'x' with the type annotation 'Null'. In TypeScript, 'null' is a value, but 'Null' is not a recognized built-in type, leading to a compilation error TS2304 ('Cannot find name 'Null'').
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/directReferenceToNull.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
var x: Null;
```

----------------------------------------

TITLE: Module A Class Definition
DESCRIPTION: Defines a module 'a' containing a Foo class with doThing method and static factory method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationMapsOutFile.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare module "a" {
    export class Foo {
        doThing(x: {
            a: number;
        }): {
            b: number;
        };
        static make(): Foo;
    }
}
```

----------------------------------------

TITLE: Package Configuration
DESCRIPTION: Package.json configuration specifying module type and exports
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExportsTrailers(module=node18).errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

LANGUAGE: json
CODE:
```
{
    "name": "inner",
    "private": true,
    "exports": {
        "./cjs/*.cjs": "./*.cjs",
        "./mjs/*.mjs": "./*.mjs",
        "./js/*.js": "./*.js"
    }
}
```

----------------------------------------

TITLE: Function to Create Greeter Object
DESCRIPTION: This snippet defines a function `foo` that takes a greeting string as input and returns a new `Greeter` object. It illustrates how to instantiate objects of a class within a function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
 "function foo(greeting: string): Foo.Bar.Greeter {\n    return new Greeter(greeting);\n}"
```

----------------------------------------

TITLE: TypeScript ESM Format Import Configuration
DESCRIPTION: Import statements demonstrating module resolution across different file types in ESM format
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesConditionalPackageExports(module=nodenext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import * as cjs from "package/cjs";
import * as mjs from "package/mjs";
import * as type from "package";
cjs;
mjs;
type;
import * as cjsi from "inner/a";
import * as mjsi from "inner/b";
import * as typei from "inner";
import * as ts from "inner/types";
cjsi.mjsSource;
mjsi.mjsSource;
typei.mjsSource;
ts.mjsSource;
```

----------------------------------------

TITLE: Importing and Using Namespace in TypeScript (with Errors)
DESCRIPTION: This snippet attempts to import all exports from './0' as a namespace 'ns' and use its properties. However, it results in compilation errors due to the 'ns' identifier not being recognized.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace1(module=es2015).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export * as ns from './0';
ns.a;
ns.b;
```

----------------------------------------

TITLE: ESM Module Import Example in index.mjs
DESCRIPTION: JavaScript module using .mjs extension and ESM format to import modules using import map aliases
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackageImports(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// esm format file
import * as cjs from "#cjs";
import * as mjs from "#mjs";
import * as type from "#type";
cjs;
mjs;
type;
```

----------------------------------------

TITLE: Generic Constraints with object Type in TypeScript
DESCRIPTION: Demonstrates using object type as a generic constraint and shows error cases when trying to use primitive types, null, or undefined as type parameters that should extend object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nonPrimitiveStrictNull.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
interface Proxy<T extends object> {}

var x: Proxy<number>; // error
var y: Proxy<null>; // error
var z: Proxy<undefined>; // error

interface Blah {
  foo: number;
}

var u: Proxy<Blah>; // ok
```

----------------------------------------

TITLE: Definite Assignment and Ambient Declarations in Extended Class
DESCRIPTION: Illustrates a class extending a declared class (E) and using definite assignment assertions and ambient declarations for its properties. This showcases how to override properties from a declared base class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedUninitializedPropertyDeclaration.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
declare class E {
 p1: string
 p2: string
 }
 class F extends E {
 p1!: 'z'
 declare p2: 'alpha'
 }
```

----------------------------------------

TITLE: Array Literals and Inheritance with Contextual Typing in TypeScript
DESCRIPTION: This snippet focuses on how inheritance and contextual typing interact when dealing with array literals in TypeScript. It shows that an array literal containing derived classes can be assigned to a variable with a contextual type of an array of the base class. The compiler treats instances of derived classes as instances of the base class in this context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arrayLiterals.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
   // Contextual type C with numeric index signature of type Base makes array literal of Derived have type Base[]
    class Base { private p; }
    class Derived1 extends Base { private m };
    class Derived2 extends Base { private n };
    var context3: Base[] = [new Derived1(), new Derived2()];
    
    // Contextual type C with numeric index signature of type Base makes array literal of Derived1 and Derived2 have type Base[]
    var context4: Base[] = [new Derived1(), new Derived1()];
```

----------------------------------------

TITLE: Promise Chain with Promise-returning Functions
DESCRIPTION: Code snippet demonstrating TypeScript error when chaining Promise operations with functions that return Promise objects with incompatible types. The example shows type errors when mixing number and string promises.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
var s11b = s11.then(testFunction11P, testFunction11P, testFunction11P); // error
```

----------------------------------------

TITLE: Multiple Default Exports in JavaScript Module with TypeScript Error Annotations
DESCRIPTION: This code example shows an invalid JavaScript module with two default exports (a class and a variable with the same name), which TypeScript rejects. It demonstrates several TypeScript errors including TS2528 (multiple default exports), TS2652 (merged declaration issues), and TS1109 (syntax error).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationBindMultipleDefaultExports.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default class a {
}
export default var a = 10;
```

----------------------------------------

TITLE: Class A Getter with Incomplete Return Path
DESCRIPTION: Method returns string or null but lacks comprehensive return handling, potentially causing type inference error
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/getterControlFlowStrictNull.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
   a(): string | null {
        if (Math.random() > 0.5) {
            return '';
        }

        // it does error here as expected
    }
}
```

----------------------------------------

TITLE: Declaring Overloaded Function Signatures - TypeScript Declaration File
DESCRIPTION: This snippet defines the type 'Foo.Whatever' and declares two overloaded signatures for the function 'Foo'. The first overload accepts an optional 'Foo.Whatever' object, and the second overload accepts a function and an optional 'Foo.Whatever' object. This file provides type definitions for the imported module in 'index.ts'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/namespaceMergedWithFunctionWithOverloadsUsage.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
declare namespace Foo {
        interface Whatever {
            prop: any;
        }
    }
    
    declare function Foo(opts?: Foo.Whatever): void;
    declare function Foo(cb: Function, opts?: Foo.Whatever): void;
    
    export = Foo;
```

----------------------------------------

TITLE: Testing let variable capture with nested declarations in for loops in TypeScript
DESCRIPTION: Demonstrates how let variables are captured in for loops with nested declarations. The function declares a let variable y in the loop initialization and a second let variable x in the loop body.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop5.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
function foo4(x) {
    for (let y = 0; y < 1; ++y) {
        var v = y;
        let x = 1;
        (function() { return x + v });
        (() => x + v);
        if (x == 1) {
            return;
        }
    }
    
    use(v);
}
```

----------------------------------------

TITLE: Abstract Class Overriding Concrete Methods
DESCRIPTION: Shows an abstract class that extends another abstract class, implementing one abstract method but declaring a different concrete method as abstract.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classAbstractInstantiations2.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
abstract class F extends B {
    abstract foo() : number;
    bar() { return 2; }
}
```

----------------------------------------

TITLE: Destructuring Arrays with Default Values in TypeScript
DESCRIPTION: This snippet illustrates array destructuring with default values and highlights errors due to referencing undeclared variables or self-referencing parameters. It demonstrates how TypeScript enforces block-scoping rules and the correct order of declarations. No external dependencies are required other than TypeScript setup. Input is arrays to be destructured, and output can potentially be assignment errors if the patterns are incorrect.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringArrayBindingPatternAndAssignment3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
const [a, b = a] = [1]; // ok
const [c, d = c, e = e] = [1]; // error for e = e
const [f, g = f, h = i, i = f] = [1]; // error for h = i

(function ([a, b = a]) { // ok
})([1]);
(function ([c, d = c, e = e]) { // error for e = e
})([1]);
(function ([f, g = f, h = i, i = f]) { // error for h = i
})([1])
```

----------------------------------------

TITLE: Package Configuration for ES Module
DESCRIPTION: Package.json configuration that sets the project as an ES module using the type field
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodePackageSelfName(module=node18).errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module",
    "exports": "./index.js"
}
```

----------------------------------------

TITLE: Valid Interface Extensions for Method a2 with Compatible Parameter Counts in TypeScript
DESCRIPTION: These interfaces (I4, I5, I6) correctly extend the Base interface with various signatures for method 'a2'. They demonstrate valid variations that include the same number of required parameters or making optional parameters required.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithCallSignaturesWithOptionalParameters.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
interface I4 extends Base {
    a2: () => number; // ok, same number of required params
}

interface I5 extends Base {
    a2: (x?: number) => number; // ok, same number of required params
}

interface I6 extends Base {
    a2: (x: number) => number; // ok, same number of params
}
```

----------------------------------------

TITLE: Generic Class with setState Method Using Pick<T, K>
DESCRIPTION: Implementation of a generic class C with a setState method that uses Pick<T, K> to ensure only valid properties are updated. The method iterates through properties and updates the state.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeErrors.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
class C<T> {
    state: T;
    setState<K extends keyof T>(props: Pick<T, K>) {
        for (let k in props) {
            this.state[k] = props[k];
        }
    }
}
```

----------------------------------------

TITLE: Chaining .then() with testFunction11 on a Promise
DESCRIPTION: Chains the `.then()` method on a `Promise<number>` instance with `testFunction11` as the fulfillment, rejection, and notify handlers.  It results in a type error because the provided function's return type `IPromise<number>` or `IPromise<string>` is not assignable to `IPromise<string>`. The test checks type compatibility of the handler's parameters with expected types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations3.errors.txt#2025-04-21_snippet_23

LANGUAGE: typescript
CODE:
```
var s11a = s11.then(testFunction11, testFunction11, testFunction11); // ok
                        ~~~~~~~~~~~~~~
```

----------------------------------------

TITLE: Destructuring Multi-Robot Object in TypeScript
DESCRIPTION: Demonstrates nested destructuring assignment with object patterns, including primary and secondary values with default initializations. The code shows pattern matching with default values 'none' for both primary and secondary properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_26

LANGUAGE: typescript
CODE:
```
{
  primaryA = "primary",
  secondary: secondaryA = "secondary"
  secondaryA = "secondary"
} = { primary: "none", secondary: "none" }
```

----------------------------------------

TITLE: Generic Type Constrained Class
DESCRIPTION: Defines a generic class Bar that requires its type parameter to extend the Foo class
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericTypeConstraints.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class Bar<T extends Foo> { }
```

----------------------------------------

TITLE: Importing and Using Type in TypeScript
DESCRIPTION: This snippet imports the 'Type' from a local module and uses it in a spread operation. It demonstrates how to import and utilize a custom type in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitComputedPropertyNameEnum3.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { type Type } from "./type";

export const foo = { ...({} as Type) };
```

----------------------------------------

TITLE: JavaScript Array Destructuring with Multiple Default Values
DESCRIPTION: This JavaScript code snippet expands on array destructuring with multiple default values. It destructures the array into `numberC`, `nameC`, and `skillC`, assigning default values if the corresponding elements are missing or undefined. The emitted JavaScript code handles the default value assignments using ternary operators.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
>>>var _g = [3, "edging", "Trimming edges"], _h = _g[0], numberC = _h === void 0 ? -1 : _h, _j = _g[1], nameC = _j === void 0 ? "noName" : _j, _k = _g[2], skillC = _k === void 0 ? "noSkill" : _k;
```

----------------------------------------

TITLE: Collection Method Interface Definitions in TypeScript
DESCRIPTION: Defines TypeScript interfaces for collection utility methods including select, where, findWhere, reject, every, etc. Supports both array and dictionary operations with generic type parameters and method overloading.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
select(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
where(properties: Object): ChainedArray<T>;
findWhere(properties: Object): ChainedObject<T>;
reject(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
every(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
all(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
some(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
any(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
contains(value: T): ChainedObject<boolean>;
include(value: T): ChainedObject<boolean>;
invoke(methodName: string, ...args: any[]): ChainedArray<any>;
pluck(propertyName: string): ChainedArray<any>;
max(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
min(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
sortBy(iterator: Iterator_<T, any>, context?: any): ChainedArray<T>;
sortBy(propertyName: string): ChainedArray<T>;
```

----------------------------------------

TITLE: Importing Generic Class Without Type Parameter
DESCRIPTION: Demonstrates incorrect and correct usage of an imported generic class. Shows compiler error when type parameter is missing and proper usage with type specification.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/externalModuleExportingGenericClass.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import a = require('./externalModuleExportingGenericClass_file0');
var v: a; // this should report error
var v2: any = (new a()).foo;
var v3: number = (new a<number>()).foo;
```

----------------------------------------

TITLE: Root Package.json ESM Configuration
DESCRIPTION: Package.json configuration setting the project type to ES modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportMeta(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Circular Class Inheritance with Generic Types in TypeScript
DESCRIPTION: This code snippet demonstrates an invalid TypeScript pattern where two generic classes attempt to extend each other in a circular reference. The compiler catches this and reports errors related to self-reference in base expressions and using a class before its declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indirectSelfReferenceGeneric.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class a<T> extends b<T> { }
class b<T> extends a<T> { }
```

----------------------------------------

TITLE: Demonstrating TypeScript Error for Unused Variable in JavaScript
DESCRIPTION: This code snippet shows a JavaScript file with an unused variable 'x', which triggers a TypeScript error. The error message indicates that 'x' is declared but never read. The code also exports a variable 'y'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/commonJsUnusedLocals.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
const x = 0;
exports.y = 1;
```

----------------------------------------

TITLE: Defining IPromise2 and Promise2 Interfaces in TypeScript
DESCRIPTION: This code snippet defines a custom `IPromise2` interface and a corresponding `Promise2` interface. Both are generic, accepting type parameters T and V.  The critical difference lies in the `then` method of the `Promise2` interface, where the callback's return type is restricted to `Promise2<string, any>` instead of allowing any type `U` like the `IPromise2` interface.  This demonstrates an intentional type mismatch.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promiseIdentityWithAny2.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    interface IPromise2<T, V> {
        then<U, W>(callback: (x: T) => IPromise2<U, W>): IPromise2<U, W>;
    }
    interface Promise2<T, V> {
        then<U, W>(callback: (x: T) => Promise2<string, any>): Promise2<any, any>; // Uses string instead of any!
    }
```

----------------------------------------

TITLE: Using Defined and Undefined JSX Elements in TypeScript
DESCRIPTION: This snippet shows the usage of a defined JSX element ('div') which is accepted by the TypeScript compiler, and an undefined element ('span') which results in a compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxElementResolution1.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
// OK
<div />;

// Fail
<span />;
```

----------------------------------------

TITLE: Exporting Variables in TypeScript
DESCRIPTION: These snippets show the export of variables in TypeScript files. They are part of the project structure but don't contain errors themselves.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/duplicatePackage_globalMerge.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export var x = 1
```

LANGUAGE: TypeScript
CODE:
```
export var y = 2
```

----------------------------------------

TITLE: Nested Property Handling in TypeScript Interfaces
DESCRIPTION: Illustrates how nested properties and unwanted properties are managed in TypeScript with the `withNestedProp` function, ensuring no excess properties are allowed in the object literal.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reverseMappedTypeIntersectionConstraint.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
interface WithNestedProp {
  prop: string;
  nested: {
    prop: string;
  }
}

declare function withNestedProp<T extends WithNestedProp>(props: {[K in keyof T & keyof WithNestedProp]: T[K]}): T;

const wnp = withNestedProp({prop: 'foo', nested: { prop: 'bar' }, extra: 10 });

```

----------------------------------------

TITLE: Iterating Robots with Destructuring in JavaScript
DESCRIPTION: This snippet demonstrates a `for...of` loop through a `robots` array, leveraging destructuring assignment to separate an ID (`numberA3`) and the rest of the robot information (`robotAInfo`). It logs the ID to the console. The code assumes the existence of a `robots` array.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_24

LANGUAGE: JavaScript
CODE:
```
"for (var _26 = 0, robots_4 = robots; _26 < robots_4.length; _26++) {\n    let _u = robots_4[_26], numberA3 = _u[0], robotAInfo = _u.slice(1);\n    console.log(numberA3);\n}"
```

----------------------------------------

TITLE: Demonstrating Read-Only Property Access Errors in TypeScript
DESCRIPTION: This code demonstrates TypeScript's enforcement of const declarations in modules. It shows various attempts to modify a read-only property that all result in compile-time errors, as well as valid read-only access patterns that don't trigger errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constDeclarations-access4.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare module M {
    const x: number;
}

// Errors
M.x = 1;
M.x += 2;
M.x -= 3;
M.x *= 4;
M.x /= 5;
M.x %= 6;
M.x <<= 7;
M.x >>= 8;
M.x >>>= 9;
M.x &= 10;
M.x |= 11;
M.x ^= 12;

M.x++;
M.x--;
++M.x;
--M.x;

++((M.x));

M["x"] = 0;

// OK
var a = M.x + 1;

function f(v: number) { }
f(M.x);

if (M.x) { }

M.x;
(M.x);

-M.x;
+M.x;

M.x.toString();
```

----------------------------------------

TITLE: Batched Character Inference for String Processing in TypeScript
DESCRIPTION: Implements a Chars utility type that breaks down strings into arrays of individual characters using batched inference for better performance with long strings. Demonstrates optimization techniques for recursive types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes1.errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
type Chars<S extends string> =
    string extends S ? string[] :
    S extends `${infer C0}${infer C1}${infer C2}${infer C3}${infer C4}${infer C5}${infer C6}${infer C7}${infer C8}${infer C9}${infer R}` ? [C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, ...Chars<R>] :
    S extends `${infer C}${infer R}` ? [C, ...Chars<R>] :
    S extends '' ? [] :
    never;

type L1 = Chars<'FooBarBazThisIsALongerString'>;  // ['F', 'o', 'o', 'B', 'a', 'r', ...]
```

----------------------------------------

TITLE: Optional Modifier Type Definitions in TypeScript
DESCRIPTION: Defines four utility types with different optional modifiers (+? and -?) combined with filtering and modification of property names.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeAsClauseRelationships.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
type FilterInclOpt<T> = { [P in keyof T as T[P] extends Function ? P : never]+?: T[P] };
type ModifyInclOpt<T> = { [P in keyof T as P extends string? `bool${P}`: never ]+?: T[P] };
type FilterExclOpt<T> = { [P in keyof T as T[P] extends Function ? P : never]-?: T[P] };
type ModifyExclOpt<T> = { [P in keyof T as P extends string? `bool${P}`: never ]-?: T[P] };
```

----------------------------------------

TITLE: Handling Overloads in TypeScript Class Constructors
DESCRIPTION: This TypeScript snippet demonstrates a series of class constructors with overloads and the resulting type errors when incorrect arguments or type parameters are used. The classes include both generic and non-generic overloads, showcasing various combinations and the conditions under which TypeScript raises errors due to argument or type mismatch. Dependencies include a TypeScript environment capable of processing class structures and generics. The snippet requires understanding of TypeScript's type system, particularly overload resolution and generics. Inputs include class instances with various incorrect argument types or type parameters, while outputs are type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadResolutionClassConstructors.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class SomeBase {
    private n;

    public s: string;
}
class SomeDerived1 extends SomeBase {
    private m;
}
class SomeDerived2 extends SomeBase {
    private m;
}
class SomeDerived3 extends SomeBase {
    private m;
}


// Ambiguous call picks the first overload in declaration order
class fn1 {
    constructor(s: string);
    constructor(s: number);
    constructor() { }
}

new fn1(undefined);

// No candidate overloads found
new fn1({}); // Error
        ~~

// Generic and non - generic overload where generic overload is the only candidate when called with type arguments
class fn2<T> {
    constructor(s: string, n: number);
    constructor(n: number, t: T);
    constructor() { }
}

var d = new fn2<Date>(0, undefined);

// Generic and non - generic overload where generic overload is the only candidate when called without type arguments
var s = new fn2(0, '');

// Generic and non - generic overload where non - generic overload is the only candidate when called with type arguments
new fn2<Date>('', 0); // OK

// Generic and non - generic overload where non - generic overload is the only candidate when called without type arguments
new fn2('', 0); // OK

// Generic overloads with differing arity called without type arguments
class fn3<T, U, V> {
    constructor(n: T);
    constructor(s: string, t: T, u: U);
    constructor(v: V, u: U, t: T);
    constructor() { }
}

new fn3(3);
new fn3('', 3, '');
new fn3(5, 5, 5);

// Generic overloads with differing arity called with type arguments matching each overload type parameter count
new fn3<number>(4); // Error
        ~~~~~~

new fn3<string, string>('', '', '');  // Error
        ~~~~~~~~~~~~~~

new fn3<number, string, string>('', '', 3);

// Generic overloads with differing arity called with type argument count that doesn't match any overload
new fn3<number, number, number, number>(); // Error
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Generic overloads with constraints called with type arguments that satisfy the constraints
class fn4<T extends string, U extends number> {
    constructor(n: T, m: U);
    constructor() { }
}
new fn4<string, number>('', 3);

new fn4<string, number>(3, ''); // Error
                        ~

new fn4<number, string>('', 3); // Error
        ~~~~~~

new fn4<number, string>(3, ''); // Error
        ~~~~~~

// Generic overloads with constraints called without type arguments but with types that satisfy the constraints
new fn4('', 3);

new fn4(3, ''); // Error
        ~

new fn4(3, undefined); // Error
        ~

new fn4('', null);

// Generic overloads with constraints called with type arguments that do not satisfy the constraints
new fn4<boolean, Date>(null, null); // Error
        ~~~~~~~

// Generic overloads with constraints called without type arguments but with types that do not satisfy the constraints
new fn4(true, null); // Error
        ~~~~

new fn4(null, true); // Error
              ~~~~

// Non - generic overloads where contextual typing of function arguments has errors
class fn5 {
    constructor(f: (n: string) => void);
    constructor(f: (n: number) => void);
    constructor() { return undefined; }
}
new fn5((n) => n.toFixed());
                 ~~~~~~~

new fn5((n) => n.substr(0));
new fn5((n) => n.blah); // Error
                 ~~~~
```

----------------------------------------

TITLE: Protected Constructor in TypeScript Classes
DESCRIPTION: This snippet demonstrates a class with a protected constructor, which means the class cannot be directly instantiated but can be extended by subclasses.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/protectedMembers.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class CC {
    protected constructor() {
    }
}
```

----------------------------------------

TITLE: Class Member Initialization Scoping Error Example in TypeScript
DESCRIPTION: This code snippet demonstrates two TypeScript errors: 1) an error when initializing an instance member variable with an identifier that will be redeclared in the constructor, and 2) a type mismatch error when trying to assign a string to a number property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classMemberInitializerScoping.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var aaa = 1;
class CCC {
    y: number = aaa;
    static staticY: number = aaa; // This shouldnt be error
    constructor(aaa) {
        this.y = ''; // was: error, cannot assign string to number
    }
}
```

----------------------------------------

TITLE: TypeScript Module: f.ts - Import Type and Named Imports
DESCRIPTION: This TypeScript module `f.ts` demonstrates importing a type `a` and named exports `b` and `c` from module `a.ts`. It showcases type-only imports and usage of named imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports(isolatedmodules=false).errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
"    import type a from \"./a\";\n    import { b, c } from \"./a\";\n    b;\n    "
```

----------------------------------------

TITLE: Defining Generic Classes A and B in TypeScript
DESCRIPTION: This code defines two generic classes, `A<T>` and `B<T>`, where `B<T>` extends `A<T>`. Class `A<T>` has a method `foo` that takes a parameter of type `T`. Class `B<T>` extends A and introduces a method `bar` that returns a value of type `T`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericTypeAssertions2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    class A<T> { foo(x: T) { } }
    class B<T> extends A<T> {
        bar(): T {
            return null;
        }
    }
```

----------------------------------------

TITLE: Accessing Length Property on Number Type in Extended Class (TypeScript)
DESCRIPTION: This code shows a TypeScript class extending from a base with 'any' type. TypeScript catches errors when trying to access the 'length' property on number-typed class properties, while allowing access to properties with implicit 'any' type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/extendFromAny.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare var Base: any;
class C extends Base {
    known = 1;
    static sknown = 2;
}

let c = new C();
c.known.length; // error, 'known' has no 'length' property
C.sknown.length; // error, 'sknown' has no 'length' property
c.unknown.length; // ok, unknown: any
C.sunknown.length; // ok: sunknown: any
```

----------------------------------------

TITLE: Defining Primitive Types with Discriminated Unions in TypeScript
DESCRIPTION: This snippet defines a set of interfaces for primitive types (Int, Float, Str, Bool) with a common Base interface. It then creates a union type 'Primitive' and demonstrates an excess property check error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/excessPropertyCheckWithMultipleDiscriminants.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Base<T> {
    value: T;
}

interface Int extends Base<number> {
    type: "integer";
    multipleOf?: number;
}

interface Float extends Base<number> {
    type: "number";
}

interface Str extends Base<string> {
    type: "string";
    format?: string;
}

interface Bool extends Base<boolean> {
    type: "boolean";
}

type Primitive = Int | Float | Str | Bool;

const foo: Primitive = {
    type: "number",
    value: 10,
    multipleOf: 5, // excess property
    format: "what?"
}
```

----------------------------------------

TITLE: Defining Exportable Class and Types in TypeScript
DESCRIPTION: Source file defining a class A, type B, and constant C that can be imported by other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importClause_namedImports.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export class A {}
export type B  = { b: string };
export const C = "";
```

----------------------------------------

TITLE: Package Configuration for ESM
DESCRIPTION: Package JSON configuration defining the project as an ESM module with export settings
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSpecifierGenerationDirectory(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module",
    "exports": "./index.js"
}
```

----------------------------------------

TITLE: TypeScript Type Resolution Directory Mapping Table
DESCRIPTION: A markdown table showing the mapping between @types directories and their corresponding node_modules parent directories. The table demonstrates the resolution pattern for different directory depths and user locations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/canWatch/getDirectoryToWatchFailedLookupLocationFromTypeRootUncDos.baseline.md#2025-04-21_snippet_7

LANGUAGE: markdown
CODE:
```
| Directory                                                                                               | getDirectoryToWatchFailedLookupLocationFromTypeRoot                                                     |
| ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |
| //vda1cs4850/c$/folderAtRoot/node_modules/@types                                                        | //vda1cs4850/c$/folderAtRoot/node_modules                                                               |
```

----------------------------------------

TITLE: Defining Generic Classes and Interfaces in TypeScript
DESCRIPTION: This code snippet defines two generic classes, A and B, and two interfaces, I1 and I2. Class A accepts type parameters T and U where U extends T. Class B has T which extends an Object, and U extends T, demonstrating advanced type constraint concepts in TypeScript. The interfaces I1 and I2 define structures with properties 'a' and 'a'+'b' respectively. The code illustrates valid and invalid type assignments that either comply with or violate these constraints.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeParamExtendsOtherTypeParam.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class A<T, U extends T> { }
class B<T extends Object, U extends T> {
    data: A<Object, Object>;
}

// Below 2 should compile without error 
var x: A< { a: string }, { a: string; b: number }>;
var y: B< { a: string }, { a: string; b: number }>;


// Below should be in error
var x1: A<{ a: string;}, { b: string }>;
var x2: A<{ a: string;}, { a: number }>;
var x3: B<{ a: string;}, { b: string }>;
var x4: B<{ a: string;}, { a: number }>;
var x5: A<{ a: string; b: number }, { a: string }>;
var x6: B<{ a: string; b: number }, { a: string }>;

interface I1 {
    a: string;
}

interface I2 {
    a: string;
    b: number;
}

var x7: A<I2, I1>;
var x8: B<I2, I1>;
```

----------------------------------------

TITLE: Type Definitions for Awaited Type Utility in TypeScript
DESCRIPTION: Demonstrates various type definitions using the Awaited utility type with different input types including primitives, promises, unions, and thenable objects. Shows how TypeScript unwraps promise types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitedType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type T1 = Awaited<number>;
type T2 = Awaited<Promise<number>>;
type T3 = Awaited<number | Promise<number>>;
type T4 = Awaited<number | Promise<string>>;
type T5 = Awaited<{ then: number }>;
type T6 = Awaited<{ then(): void }>; // never (non-promise "thenable")
type T7 = Awaited<{ then(x: number): void }>; // never (non-promise "thenable")
type T8 = Awaited<{ then(x: () => void): void }>; // unknown
type T9 = Awaited<any>;
type T10 = Awaited<never>;
type T11 = Awaited<unknown>;
type T12 = Awaited<Promise<Promise<number>>>;
type T13 = _Expect<Awaited<Promise<Promise<number>> | string | null>, /*expected*/ string | number | null>; // otherwise just prints T13 in types tests, which isn't very helpful
type T14 = _Expect<Awaited<Promise<Promise<number>> | string | undefined>, /*expected*/ string | number | undefined>; // otherwise just prints T14 in types tests, which isn't very helpful
type T15 = _Expect<Awaited<Promise<Promise<number>> | string | null | undefined>, /*expected*/ string | number | null | undefined>; // otherwise just prints T15 in types tests, which isn't very helpful

type TUndefined = Awaited<undefined>;
type TNull = Awaited<null>;
type TNullOrUndefined = Awaited<null | undefined>;
```

----------------------------------------

TITLE: Defining TypeScript Module and Class Structure
DESCRIPTION: This snippet showcases the overall structure of TypeScript modules and classes used in the file. It includes generic type parameters, method declarations, and complex return types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_44

LANGUAGE: TypeScript
CODE:
```
module argurus {
    export class gilbertii<T0, T1> {
        nasutus(): lavali.lepturus { var x: lavali.lepturus; () => { var y = this; }; return x; }
        poecilops(): julianae.steerii { var x: julianae.steerii; () => { var y = this; }; return x; }
        // ... other method declarations
    }
}

module petrophilus {
    export class minutilla {
    }
}

module lutreolus {
    export class punicus {
        strandi(): gabriellae.klossii<Lanthanum.jugularis, Lanthanum.jugularis> { var x: gabriellae.klossii<Lanthanum.jugularis, Lanthanum.jugularis>; () => { var y = this; }; return x; }
        // ... other method declarations
    }
}

// ... other module and class declarations
```

----------------------------------------

TITLE: Destructuring Array and Logging Robot Name
DESCRIPTION: Performs array destructuring to extract robot number, name, and skill, then iterates once to log the name
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
for ([numberA2, nameA2, skillA2] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
    console.log(nameA2);
}
```

----------------------------------------

TITLE: Derived Class D with Override Errors
DESCRIPTION: Demonstrates compilation errors when overriding class members without using the 'override' modifier, including property and constructor parameter overrides
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/override6.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class D extends B {
    public bar: number = 1
           ~~~
!!! error TS4114: This member must have an 'override' modifier because it overrides a member in the base class 'B'.
    constructor(public foo: string, public baz: number) {
                ~~~~~~~~~~~~~~~~~~
!!! error TS4115: This parameter property must have an 'override' modifier because it overrides a member in base class 'B'.
                                    ~~~~~~~~~~~~~~~~~~
!!! error TS4115: This parameter property must have an 'override' modifier because it overrides a member in base class 'B'.
        super(foo, 42)
    }
}
```

----------------------------------------

TITLE: Entity State Interface Definition
DESCRIPTION: TypeScript interface definitions for entity management, including generic types for entity IDs and state management.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess2.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export interface Entity {
    id: number | string;
}

export type IdOf<E extends Entity> = E['id'];

export interface EntityState<E extends Entity> {
    ids: IdOf<E>[];
    entities: { [key: string]: E, [key: number]: E };
}
```

----------------------------------------

TITLE: TypeScript Logical Assignment Operators with Undefined Checking
DESCRIPTION: This code demonstrates the behavior of logical assignment operators (??=, ||=, &&=) when working with optional function parameters. It shows how TypeScript handles type safety in different assignment scenarios, detecting cases where undefined values might be used.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment5(target=es2021).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo1 (f?: (a: number) => void) {
    f ??= (a => a)
    f(42)
}

function foo2 (f?: (a: number) => void) {
    f ||= (a => a)
    f(42)
}

function foo3 (f?: (a: number) => void) {
    f &&= (a => a)
    f(42)
}

function bar1 (f?: (a: number) => void) {
    f ??= (f.toString(), (a => a))
    f(42)
}

function bar2 (f?: (a: number) => void) {
    f ||= (f.toString(), (a => a))
    f(42)
}

function bar3 (f?: (a: number) => void) {
    f &&= (f.toString(), (a => a))
    f(42)
}
```

----------------------------------------

TITLE: TypeScript Class Auto-Accessor Implementation
DESCRIPTION: Multiple class examples demonstrating TypeScript's auto-accessor feature with various type checking and control flow scenarios. Includes examples of number handling, optional values, null assignments, and static accessors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowAutoAccessor1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Example {
  accessor test;

  constructor(test: number) {
    this.test = test;
  }

  getTest() {
    return this.test;
  }
}

class Example2 {
  accessor test;

  constructor(test: number | undefined) {
    this.test = test;
  }

  getTest() {
    if (this.test) {
      return this.test;
    }
    return 0;
  }
}

// https://github.com/microsoft/TypeScript/issues/59728

class Example3 {
  accessor value;

  constructor(n: number) {
    this.value = n;

    if (n < 0) {
      this.value = null;
    }
  }
}

declare var n: number;
class Example4 {
  static accessor value;
  static {
    this.value = n;
    if (n < 0) {
      this.value = null;
    }
  }
}

class Example5 {
  static accessor value; // error
}
Example5.value = 123;
Example5.value++;
```

----------------------------------------

TITLE: Importing modules in ESM format TypeScript Module (.mts) file
DESCRIPTION: An explicit ECMAScript module file (.mts extension) that imports from various module types without generating errors, similar to the standard .ts file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExports(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// esm format file
import * as cjsi from "inner/cjs/index";
import * as mjsi from "inner/mjs/index";
import * as typei from "inner/js/index";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: Destructuring Array with Default Value in TypeScript
DESCRIPTION: This snippet demonstrates destructuring an array within a `for...of` loop, assigning a default value (`"noName"`) to `nameA` if the corresponding element in the array is undefined. The `robotA` and `robotB` variables are assumed to be defined elsewhere in the code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
for (let [, nameA = "noName"] of 
     [robotA, robotB]
               
                 [
                       robotA
                             , 
                               robotB
                                     ]
                                      
                                        [robotA, robotB]
                                                      
                                                        [robotA, robotB]
                                                            ) 
                                                              {
    console.log(nameA);
}
```

----------------------------------------

TITLE: Defining a simple decorator function (TypeScript)
DESCRIPTION: Defines a basic function intended for use as a decorator. It accepts any arguments and returns any type, serving as a placeholder or simple decorator implementation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/decoratorUsedBeforeDeclaration.errors.txt#_snippet_10

LANGUAGE: TypeScript
CODE:
```
function deco(...args: any[]): any {}
```

----------------------------------------

TITLE: TypeScript Import Error in index.ts
DESCRIPTION: This snippet demonstrates a TypeScript error (TS2307) where the module 'inner/other' cannot be found. This is likely due to incorrect module resolution configuration or missing type declarations for the module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsBlocksSpecifierResolution(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    // esm format file
    import { Thing } from "inner/other";
                          ~~~~~~~~~~~~~
!!! error TS2307: Cannot find module 'inner/other' or its corresponding type declarations.
    export const a = (await import("inner")).x();
                 ~
!!! error TS2742: The inferred type of 'a' cannot be named without a reference to './node_modules/inner/other.js'. This is likely not portable. A type annotation is necessary.
```

----------------------------------------

TITLE: Type mismatch in multiline arrow function with comment 2 - TypeScript
DESCRIPTION: This example again produces a TS2345 error because the assigned arrow function has a return type of `void`, while function `f` expects a return type of `number`. The placement of the comment around the arrow function does not influence the type checking process.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arrowFunctionErrorSpan.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
    function f(a: () => number) { }
    
    // multi line with a comment 2
    f(/*
        */() => { 
    
        });

```

----------------------------------------

TITLE: Number Literal Type Extraction with Template Literals
DESCRIPTION: Shows extraction of number literal types from string literals using template literals with infer. Demonstrates how number literals interact with bigint types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes4.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
// #region number-literal
// number-literal > bigint
type PNumberLiteral0 = "0" extends `${infer T extends 0 | bigint}` ? T : never; // 0

// number-literal > bigint-literal
type PNumberLiteral1 = "0" extends `${infer T extends 0 | 0n}` ? T : never; // 0
// #endregion number-literal
```

----------------------------------------

TITLE: Generic Function Call with Common Type Arguments in TypeScript
DESCRIPTION: This code calls the generic function 'someGenerics9' with multiple object literals sharing a common structure. TypeScript infers the return type based on the common properties of the arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeArgumentInferenceWithConstraints.errors.txt#2025-04-21_snippet_13

LANGUAGE: TypeScript
CODE:
```
var a9d = someGenerics9({ x: 3 }, { x: 6 }, { x: 6 });
var a9d: { x: number; };
```

----------------------------------------

TITLE: Defining Class A in TypeScript
DESCRIPTION: Exports a class named A from the file a.ts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export class A {}
```

----------------------------------------

TITLE: TypeScript Object Literal Usage Examples
DESCRIPTION: Shows different cases of object literal usage with the foo function, demonstrating how type inference works with varying property combinations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectLiteralContextualTyping.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var x = foo({ name: "Sprocket" });
var x: string;

var y = foo({ name: "Sprocket", description: "Bumpy wheel" });
var y: string;

var z = foo({ name: "Sprocket", description: false });
var z: number;

var w = foo({ a: 10 });
var w: number;
```

----------------------------------------

TITLE: Class Definition with Type Annotations
DESCRIPTION: TypeScript class Bar definition with optional properties and type assertions using a numeric literal type
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedDeclarationsAddUndefined.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type N = 1;
export class Bar {
    c? = [2 as N] as const;
    c3? = 1 as N;
    readonly r = 1;
    f = 2;
}
```

----------------------------------------

TITLE: Defining Class with Numeric Indexer Constraints in TypeScript
DESCRIPTION: This snippet defines a class 'C' with a numeric indexer of type string. It demonstrates various property declarations and their compatibility with the indexer type, including cases that result in TypeScript errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/numericIndexerConstrainsPropertyDeclarations.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    [x: number]: string;

    constructor() { } // ok

    a: string; // ok
    b: number; // ok
    c: () => {} // ok
    "d": string; // ok
    "e": number; // ok
    1.0: string; // ok
    2.0: number; // error
    "3.0": string; // ok
    "4.0": number; // error
    3.0: MyNumber // error

    get X() { // ok
        return '';
    }
    set X(v) { } // ok

    foo() { 
        return '';
    }

    static sa: number; // ok
    static sb: string; // ok

    static foo() { } // ok
    static get X() { // ok
        return 1;
    }
}
```

----------------------------------------

TITLE: Defining JSX Element Interface in TypeScript
DESCRIPTION: This code defines a custom `JSX.Element` interface in TypeScript, which specifies the properties and methods that a JSX element should have.  It includes properties like `name`, `isIntrinsic`, `isCustomElement`, `props`, and methods for rendering and binding to the DOM. This definition allows for custom JSX element types and behavior within the TypeScript project.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxFactoryAndReactNamespace.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
declare namespace JSX {
    interface Element {
        name: string;
        isIntrinsic: boolean;
        isCustomElement: boolean;
        toString(renderId?: number): string;
        bindDOM(renderId?: number): number;
        resetComponent(): void;
        instantiateComponents(renderId?: number): number;
        props: any;
    }
}
```

----------------------------------------

TITLE: Implementing Recursive Type Definitions in TypeScript
DESCRIPTION: Defines recursive and conditional types including type A (recursive string union), type F (conditional tuple type), and type G (mapped type). Demonstrates type inference issues when working with null and nested arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveTupleTypeInference.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export type A = "number" | "null" | A[];

export type F<T> = null extends T
    ? [F<NonNullable<T>>, "null"]
    : T extends number
    ? "number"
    : never;

export type G<T> = { [k in keyof T]: F<T[k]> };

interface K {
    b: number | null;
}

const gK: { [key in keyof K]: A } = { b: ["number", "null"] };

function foo<T>(g: G<T>): T {
    return {} as any;
}

foo(gK);
```

----------------------------------------

TITLE: Evaluating TypeScript Syntax
DESCRIPTION: This TypeScript code snippet showcases errors found when identifiers are not declared, resulting in unresolved name errors. The code also illustrates the usage of TypeScript-specific syntax such as type annotations and optional parameters, which are correctly placed within a TypeScript context but still cause unresolved identifier errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserArrowFunctionExpression14.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
    a() ? (b: number, c?: string): void => d() : e;
    ~
!!! error TS2304: Cannot find name 'a'.
                                           ~
!!! error TS2304: Cannot find name 'd'.
                                                 ~
!!! error TS2304: Cannot find name 'e'.
```

----------------------------------------

TITLE: Extending a generic class with type constraints
DESCRIPTION: This code defines a base class `B1` with a generic type parameter `T` and a property `foo` of type `T`. It then defines several derived classes `D1`, `D2`, `D3`, `D4`, `D5`, `D6`, `D7`, `D8`, and `D9` that extend `B1` with different type parameters and constraints, including a string index signature. These classes test how properties with specific type constraints interact with the base class's generic type and the index signature, leading to type errors when the types are incompatible.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypesOfTypeParameterWithConstraints4.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class B1<T> {
    foo: T;
}

class D1<T extends Foo, U extends Foo, V> extends B1<Foo> {
    [x: string]: Foo;
    foo: T; // ok
}

class D2<T extends Foo, U extends Foo, V> extends B1<Foo> {
    [x: string]: Foo;
    foo: U; // ok
}

class D3<T extends Foo, U extends Foo, V> extends B1<Foo> {
    [x: string]: Foo;
    foo: V; // error
}

class D4<T extends Foo, U extends Foo, V> extends B1<T> {
    [x: string]: T;
    foo: T; // ok
}

class D5<T extends Foo, U extends Foo, V> extends B1<T> {
    [x: string]: T;
    foo: U; // error
}

class D6<T extends Foo, U extends Foo, V> extends B1<T> {
    [x: string]: T;
    foo: V; // error
}

class D7<T extends Foo, U extends Foo, V> extends B1<U> {
    [x: string]: U;
    foo: T; // error
}

class D8<T extends Foo, U extends Foo, V> extends B1<U> {
    [x: string]: U;
    foo: U; // ok
}

class D9<T extends Foo, U extends Foo, V> extends B1<U> {
    [x: string]: U;
    foo: V; // error
}

```

----------------------------------------

TITLE: Null/Undefined Check Error in TypeScript Destructuring
DESCRIPTION: This snippet demonstrates a potential error related to accessing properties that may be `undefined` after destructuring.  The `value` variable is possibly undefined, and attempting to call `toUpperCase()` on it can result in a runtime error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringControlFlow.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
type KeyValue = [string, string?];
let [key, value]: KeyValue = ["foo"];
value.toUpperCase();  // Error
```

----------------------------------------

TITLE: JSDoc Promise Type Error - Missing Type Argument
DESCRIPTION: This snippet exhibits a TypeScript error (TS2314) when using the `Promise` type in JSDoc without a type argument. The code defines `notAnyPromise` as a `Promise` without specifying the type of the value the promise resolves to. The generic `Promise` requires a type argument (e.g., `Promise<number>`).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocArrayObjectPromiseNoImplicitAny.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
    /** @type {Promise} */
               ~~~~~~~
!!! error TS2314: Generic type 'Promise<T>' requires 1 type argument(s).
    var notAnyPromise = Promise.resolve(5);
```

----------------------------------------

TITLE: Function with Generic Type and Index Access in TypeScript
DESCRIPTION: This code defines a function `getFlagsFromSimpleRecord` that takes a `SimpleDBRecord` and an array of flags. It accesses a property of the record using the first flag in the array. Similarly, `getFlagsFromDynamicRecord` does the same for `DynamicDBRecord`. These examples highlight accessing object properties using generic types and index signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_27

LANGUAGE: typescript
CODE:
```
    function getFlagsFromSimpleRecord<Flag extends string>(record: SimpleDBRecord<Flag>, flags: Flag[]) {
        return record[flags[0]];
    }
    
    type DynamicDBRecord<Flag extends string> = ({ dynamicField: number } | { dynamicField: string }) & DBBoolTable<Flag>
    function getFlagsFromDynamicRecord<Flag extends string>(record: DynamicDBRecord<Flag>, flags: Flag[]) {
        return record[flags[0]];
    }
```

----------------------------------------

TITLE: Referencing Other Enum Members in TypeScript Enum Definition
DESCRIPTION: This snippet shows how to properly reference members from the same enum when defining enum values. This is a valid pattern in TypeScript where one enum member can reference another.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enumErrors.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
enum E9 {
    A,
    B = A
}
```

----------------------------------------

TITLE: Implementing Generic Linked List with Static Factory Methods in TypeScript
DESCRIPTION: Definition of a generic List class with static factory methods showing both incorrect usage of class type parameters in static methods (MakeHead) and correct implementations using method-level type parameters (MakeHead2 and MakeHead3).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classTypeParametersInStatics.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module Editor {
    export class List<T> {
        public next: List<T>;
        public prev: List<T>;

        constructor(public isHead: boolean, public data: T) {
        }

        public static MakeHead(): List<T> { // should error
            var entry: List<T> = new List<T>(true, null);
            entry.prev = entry;
            entry.next = entry;
            return entry;
        }        

        public static MakeHead2<T>(): List<T> { // should not error
            var entry: List<T> = new List<T>(true, null);
            entry.prev = entry;
            entry.next = entry;
            return entry;
        }  

        public static MakeHead3<U>(): List<U> { // should not error
            var entry: List<U> = new List<U>(true, null);
            entry.prev = entry;
            entry.next = entry;
            return entry;
        }  
    }
}
```

----------------------------------------

TITLE: Interface with Implicit Any Type Errors in TypeScript
DESCRIPTION: This code snippet defines an interface with members that lack type annotations, resulting in TypeScript errors. It demonstrates errors for interface properties, constructor parameters, method parameters, and construct signatures that implicitly have 'any' types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implicitAnyDeclareMemberWithoutType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// this should be an error
interface IFace {
    member1;  // error at "member1"
    member2: string;
    constructor(c1, c2: string, c3);  // error at "c1, c3, "constructor"
    funcOfIFace(f1, f2, f3: number);   // error at "f1, f2, funcOfIFace"
    new ();
}
```

----------------------------------------

TITLE: TypeScript Error Demonstration in example.js
DESCRIPTION: This snippet demonstrates TypeScript errors related to missing return type annotation, type expectations, and the usage of an undefined name 'foo' within a JSDoc type definition. The errors are highlighted by the TypeScript compiler. The example showcases the importance of defining function return types and resolving type definitions correctly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocParameterParsingInfiniteLoop.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// @ts-check
    /**
     * @type {function(@foo)}
              ~~~~~~~~~~~~~~
!!! error TS7014: Function type, which lacks return-type annotation, implicitly has an 'any' return type.
                       ~
!!! error TS1110: Type expected.
                        ~~~
!!! error TS2304: Cannot find name 'foo'.
     */
    let x;
```

----------------------------------------

TITLE: Invalid Array Destructuring in For-of Loop
DESCRIPTION: Demonstrates an invalid attempt to use array destructuring pattern [a = 0, b = 1] with number values in a for-of loop. The code fails because you cannot destructure a number type as if it were an array.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ES5For-of26.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
for (var [a = 0, b = 1] of [2, 3]) {
    a;
    b;
}
```

----------------------------------------

TITLE: Demonstrating Uninitialized 'await using' Declaration Error in TypeScript
DESCRIPTION: This code snippet shows an incorrect usage of the 'await using' declaration in TypeScript. The 'await using' statement requires initialization, but in this case, 'a' is declared without being initialized, resulting in a compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitUsingDeclarations.8.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
{
    await using a;
}

export {};
```

----------------------------------------

TITLE: Referencing and Using External Modules in TypeScript
DESCRIPTION: The 'test.ts' code snippet demonstrates how to reference and utilize external TypeScript modules 'm1.ts' and 'm2.ts'. It includes references to external files, declares a simple class with public properties, and defines a function to return an instance of this class. This structure is foundational for integrating multiple TypeScript modules within a single project, with dependencies on the referenced files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/outMultifolderSpecifyOutputFile/node/outMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
/// <reference path='ref/m1.ts'/>
/// <reference path='../outputdir_multifolder_ref/m2.ts'/>
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: Testing Addition Operator with Null Values in TypeScript
DESCRIPTION: This code demonstrates TypeScript's type checking when using the addition (+) operator between null values and various types including any, number, enum, and string. It shows type errors when attempting to add null with numbers and enums, while highlighting valid cases with any and string types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/additionOperatorWithNullValueAndValidOperator.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// If one operand is the null or undefined value, it is treated as having the type of the other operand.

enum E { a, b, c }

var a: any;
var b: number;
var c: E;
var d: string;

// null + any
var r1: any = null + a;
var r2: any = a + null;

// null + number/enum
var r3 = null + b;
var r4 = null + 1;
var r5 = null + c;
var r6 = null + E.a;
var r7 = null + E['a'];
var r8 = b + null;
var r9 = 1 + null;
var r10 = c + null
var r11 = E.a + null;
var r12 = E['a'] + null;

// null + string
var r13 = null + d;
var r14 = null + '';
var r15 = d + null;
var r16 = '' + null;
```

----------------------------------------

TITLE: Using 'await' as an Identifier in TypeScript Class Static Blocks
DESCRIPTION: This code demonstrates how 'await' is restricted as an identifier in TypeScript class static blocks. It shows various scenarios where 'await' is illegal (when declaring a new binding directly in the static block) versus legal usages (inside function boundaries, as property names, or in destructuring patterns with renaming).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classStaticBlock22(target=es2022).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
let await: "any";
class C {
  static {
    let await: any; // illegal, cannot declare a new binding for await
  }
  static {
    let { await } = {} as any; // illegal, cannot declare a new binding for await
  }
  static {
    let { await: other } = {} as any; // legal
  }
  static {
    let await; // illegal, cannot declare a new binding for await
  }
  static {
    function await() { }; // illegal
  }
  static {
    class await { }; // illegal
  }

  static {
    class D {
      await = 1; // legal
      x = await; // legal (initializers have an implicit function boundary)
    };
  }
  static {
    (function await() { }); // legal, 'await' in function expression name not bound inside of static block
  }
  static {
    (class await { }); // legal, 'await' in class expression name not bound inside of static block
  }
  static {
    (function () { return await; }); // legal, 'await' is inside of a new function boundary
  }
  static {
    (() => await); // legal, 'await' is inside of a new function boundary
  }

  static {
    class E {
      constructor() { await; }
      method() { await; }
      get accessor() {
        await;
        return 1;
      }
      set accessor(v: any) {
        await;
      }
      propLambda = () => { await; }
      propFunc = function () { await; }
    }
  }
  static {
    class S {
      static method() { await; }
      static get accessor() {
        await;
        return 1;
      }
      static set accessor(v: any) {
        await;
      }
      static propLambda = () => { await; }
      static propFunc = function () { await; }
    }
  }
}
```

----------------------------------------

TITLE: Contextual Typing with Getters and Setters in TypeScript
DESCRIPTION: This snippet illustrates contextual typing. It defines an object `o` with a type that specifies the type of the `Foo` property as a number. The getter and setter for `Foo` are then contextually typed to accept and return numbers, respectively. This shows how TypeScript can infer types based on the context in which getters and setters are used.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/gettersAndSetters.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    "// The Foo accessors' return and param types should be contextually typed to the Foo field
    var o : {Foo:number;} = {get Foo() {return 0;}, set Foo(val:number){val}}; // o
    
    var ofg = o.Foo;
    o.Foo = 0;"
```

----------------------------------------

TITLE: Derived Class Accessing 'this' Before Super (Rest Parameter) - TypeScript
DESCRIPTION: This example demonstrates a similar error as the previous one, but with a rest parameter in the constructor of `DerivedAfterRestParameter`. Accessing `this.x1` before calling `super(x)` results in a TypeScript error (TS17009).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassSuperStatementPosition.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class DerivedAfterRestParameter extends Object {
        x1: boolean[];
        x2: boolean[];
        constructor(...x: boolean[]) {
            this.x1 = x;
            super(x);
            this.x2 = x;
        }
    }
```

----------------------------------------

TITLE: Testing Function Overloads and Parameter Matching
DESCRIPTION: This code snippet demonstrates function overloads and parameter matching using tuples and rest parameters in TypeScript. Functions are defined with complex signatures to illustrate how TypeScript resolves different argument structures and type errors. Understanding function overloading and tuple types in TypeScript is necessary.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericRestParameters3.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
declare function hmm<A extends [] | [number, string]>(...args: A): void;
hmm(); // okay, A = []
hmm(1, "s"); // okay, A = [1, "s"]
hmm("what"); // no error?  A = [] | [number, string] ?

declare function foo2(...args: string[] | number[]): void;
let x2: ReadonlyArray<string> = ["hello"];
foo2(...x2);

type RestParams = [y: string] | [y: number];

type Signature = (x: string, ...rest: RestParams) => void;

type MergedParams = Parameters<Signature>;  // [x: string, y: string] | [x: string, y: number]

declare let ff1: (...rest: [string, string] | [string, number]) => void;
declare let ff2: (x: string, ...rest: [string] | [number]) => void;
```

----------------------------------------

TITLE: Importing and Exporting TypeScript Module Members
DESCRIPTION: This snippet demonstrates importing members from another TypeScript module (`m1`) using `require`. It then defines and exports its own members (variable, class, instance, function) and also re-exports a member (`m1_c1`) from the imported module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootAbsolutePathModuleSubfolderSpecifyOutputFile/node/sourceRootAbsolutePathModuleSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import m1 = require("ref/m1");
export var a1 = 10;
export class c1 {
    public p1: number;
}

export var instance1 = new c1();
export function f1() {
    return instance1;
}

export var a2 = m1.m1_c1;
```

----------------------------------------

TITLE: Defining Base and Derived Classes in TypeScript
DESCRIPTION: This snippet defines a base class and several derived classes to be used in subsequent assignment compatibility tests.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithConstructSignatures5.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Base { foo: string; }
class Derived extends Base { bar: string; }
class Derived2 extends Derived { baz: string; }
class OtherDerived extends Base { bing: string; }
```

----------------------------------------

TITLE: Defining Calculator Class and Test Function in TypeScript
DESCRIPTION: This snippet defines a Calculator class with a handleChar method and exports a test function. Both are exportable modules that can be imported by other files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedImports2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export class Calculator {
    handleChar() {}
}

export function test() {

}
```

----------------------------------------

TITLE: Class Inheritance with Property Initialization and Super Calls in TypeScript
DESCRIPTION: Demonstrates different patterns of class constructor implementation with strict mode and super() calls. Shows valid and invalid scenarios when accessing this, calling super(), and using strict mode in derived class constructors with initialized properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictModeInConstructor.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
}

class B extends A {
    public s: number = 9;

    constructor () {
        "use strict";   // No error
        super();
    }
}

class C extends A {
    public s: number = 9;

    constructor () {
        super();            // No error
        "use strict";
    }
}

class D extends A {
    public s: number = 9;

    constructor () {
        var x = 1; // No error
        var y = this.s; // Error
        super();
        "use strict";
    }
}

class Bs extends A {
    public static s: number = 9;

    constructor () {
        "use strict";   // No error
        super();
    }
}

class Cs extends A {
    public static s: number = 9;

    constructor () {
        super();            // No error
        "use strict";
    }
}

class Ds extends A {
    public static s: number = 9;

    constructor () {
        var x = 1; // no Error
        super();
        "use strict";
    }
}
```

----------------------------------------

TITLE: Defining a React Component with Specific Prop Types in TSX
DESCRIPTION: This snippet defines a `PoisonedProp` interface with specific type constraints (y: 2) and a `Poisoned` React component that uses this interface for its props. It demonstrates how TypeScript enforces type safety for React component props.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadAttributesResolution5.errors.txt#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import React = require('react');
    
    interface PoisonedProp {
        x: string;
        y: 2;
    }
    
    class Poisoned extends React.Component<PoisonedProp, {}> {
        render() {
            return <div>Hello</div>;
        }
    }
```

----------------------------------------

TITLE: Accessing Non-existent Property of Union Type in TypeScript
DESCRIPTION: This snippet shows errors when trying to access a property that doesn't exist in all members of a union type, and when using a type as a namespace.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/errorForUsingPropertyOfTypeAsType01.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
namespace Test5 {
    export type Foo = { bar: number }
                    | { wat: string }

    var x: Foo.bar = "";
    var y: Test5.Foo.bar = "";
}

import lol = Test5.Foo.
```

----------------------------------------

TITLE: TypeScript Multiple Import Statements
DESCRIPTION: Multiple import statements demonstrating different file extension patterns and import types including .js, .ts, .tsx, .jsx, and .d.ts files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowImportingTsExtensions(moduleresolution=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import {} from "./ts.js";
import {} from "./ts.ts";
import type {} from "./ts.d.ts";

import {} from "./tsx.js";
import {} from "./tsx.jsx";
import {} from "./tsx.ts";
import {} from "./tsx.tsx";
import type {} from "./tsx.d.ts";

import {} from "./dts.js";
import {} from "./dts.ts";
import type {} from "./dts.d.ts";
```

----------------------------------------

TITLE: Chaining .then() with testFunctionP, sIPromise, nIPromise on a Promise
DESCRIPTION: Chains the `.then()` method on a `Promise<number>` instance with `testFunctionP` for fulfillment and `sIPromise` for rejection handler. It results in a type error because `sIPromise` returns an `IPromise<string>`, which is not assignable to `Promise<number>`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations3.errors.txt#2025-04-21_snippet_21

LANGUAGE: typescript
CODE:
```
var s10f = s10.then(testFunctionP, sIPromise, nIPromise); // error
                                       ~~~~~~~~~
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options with maxNodeModuleJsDepth (JSON)
DESCRIPTION: Defines TypeScript compiler options, including enabling JavaScript processing (allowJs), setting the maximum depth for JavaScript module resolution (maxNodeModuleJsDepth), and specifying output directory (outDir). It also includes and excludes specific files/directories.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesMaxDepthExceeded/amd/nodeModulesMaxDepthExceeded.errors.txt#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "compilerOptions": { 
    "allowJs": true,
    "maxNodeModuleJsDepth": 1, 
    "outDir": "built"
  },
  "include": ["**/*", "node_modules/**/*"],
  "exclude": ["node_modules/m2/**/*"]
}
```

----------------------------------------

TITLE: Importing Missing Module in TypeScript
DESCRIPTION: Attempt to import a module that cannot be found, resulting in a type declaration error. The import statement references a local module that is not correctly resolved.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/relativePathMustResolve.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import foo = require('./test/foo');
var z = foo.x + 10;
```

----------------------------------------

TITLE: Defining an Async Generator with Valid Method Name
DESCRIPTION: Defines an async generator method within a class, demonstrating a valid use case of the async generator syntax without errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parser.asyncGenerators.classMethods.es2018.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
    class C1 {
        async * f() {
        }
    }
```

----------------------------------------

TITLE: Package JSON Configuration for 'inner'
DESCRIPTION: This snippet specifies the package configuration for the 'inner' module in TypeScript, including metadata such as 'name', 'private', 'type', and 'exports' fields. It expresses the execution context and export paths for the module, ensuring compatibility with ES modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSourceTs(module=nodenext).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "name": "inner",
    "private": true,
    "type": "module",
    "exports": "./index.ts"
}
```

----------------------------------------

TITLE: Async Function with Undefined Return Promise
DESCRIPTION: Asynchronous function returning Promise of undefined, allowing implicit undefined return
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionsMissingReturnStatementsAndExpressionsStrictNullChecks.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
async function f30(): Promise<undefined> {
    // Ok, return type allows implicit return of undefined
}
```

----------------------------------------

TITLE: Defining TypeScript Class with Constructor Overloads and Methods
DESCRIPTION: This snippet defines a TypeScript class 'a' with multiple constructor overloads, public and private methods, getter/setter methods, and static methods. It demonstrates various TypeScript features but contains a syntax error in the setter method 'd'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserErrantSemicolonInClass1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class a {
    //constructor ();
    constructor (n: number);
    constructor (s: string);
    constructor (ns: any) {

    }

    public pgF() { };

    public pv;
    public get d() {
        return 30;
    }
    public set d() {
    }

    public static get p2() {
        return { x: 30, y: 40 };
    }

    private static d2() {
    }
    private static get p3() {
        return "string";
    }
    private pv3;

    private foo(n: number): string;
    private foo(s: string): string;
    private foo(ns: any) {
        return ns.toString();
    }
}
```

----------------------------------------

TITLE: Double Loop Type Assignment in TypeScript
DESCRIPTION: Shows a nested while loop implementation with type assignment, demonstrating control flow with number|undefined type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowLoopAnalysis.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function test2() {
    let x: number | undefined;
    x = 1;
    while (cond) {
        while (cond) {
            x = foo(x);
        }
    }
}
```

----------------------------------------

TITLE: Variable Declaration in file2.ts Causing Redeclaration Error
DESCRIPTION: Declaration of 'var1' as a const variable in file2.ts. This causes a TS2451 error because the same variable is also declared in file1.ts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/letDeclarations-scopes-duplicates3.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const var1 = 0;
```

----------------------------------------

TITLE: Correct Intl.NumberFormat useGrouping Usage
DESCRIPTION: Demonstrates correct usage of useGrouping with a boolean value
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intlNumberFormatES5UseGrouping.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
new Intl.NumberFormat('en-GB', { useGrouping: true });
```

----------------------------------------

TITLE: JavaScript for...of Loop
DESCRIPTION: This is JavaScript code resulting from the compilation of a TypeScript for...of loop over the result of `getRobots()`. It initializes the loop and destructures the array elements into variables numberA2, nameA2, and skillA2, providing default values if they are undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_24

LANGUAGE: javascript
CODE:
```
>>>for (var _27 = 0, _28 = getRobots(); _27 < _28.length; _27++) {
>>>    var _29 = _28[_27], _30 = _29[0], numberA2 = _30 === void 0 ? -1 : _30, _31 = _29[1], nameA2 = _31 === void 0 ? "noName" : _31, _32 = _29[2], skillA2 = _32 === void 0 ? "skill" : _32;
```

----------------------------------------

TITLE: Defining Generic Interface with Optional Property
DESCRIPTION: Creates a generic interface with two type parameters, where the first property is required and the second is optional
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability37.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };
```

----------------------------------------

TITLE: Variadic Tuple Assignment in TypeScript
DESCRIPTION: This snippet demonstrates assigning different types of arrays to a variable typed as a variadic tuple. It shows how TypeScript enforces type constraints on the tuple elements when using rest parameters. The example also includes an error case when the assigned array does not match the expected type structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/variadicTuples2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    tt1 = [5];
    tt1 = ['abc', 5];
    tt1 = ['abc', 'def', 5];
    tt1 = ['abc', 'def', 5, 6];  // Error
```

----------------------------------------

TITLE: Configuring Nested Subfolder as ECMAScript Module
DESCRIPTION: This package.json for a nested subfolder (subfolder2/another) explicitly sets the type to 'module', overriding any parent configurations for this specific subdirectory.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node18).errors.txt#2025-04-21_snippet_18

LANGUAGE: JSON
CODE:
```
{
    "type": "module"
}
```

----------------------------------------

TITLE: Defining Nested Package Configuration in package.json
DESCRIPTION: This snippet displays the JSON configuration for a nested package module, specifying name, privacy, and type for module distinction. It facilitates modular separation by clearly defining module boundaries and access points. Critical fields are 'name', 'private' and 'type' specifying the privacy and module status of this inner package.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSourceTs(module=node16).errors.txt#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
    {
        "name": "inner",
        "private": true,
        "type": "module",
        "exports": "./index.ts"
    }
```

----------------------------------------

TITLE: Function with Return Expression - TypeScript
DESCRIPTION: The `f3` function explicitly returns a string value, satisfying the declared string return type.  This is a correct example of returning a value from a function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionsMissingReturnStatementsAndExpressions.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    function f3(): string {
        return "Okay, because this is a return expression.";
    }
```

----------------------------------------

TITLE: Destructuring with Default Number Parameter
DESCRIPTION: Function demonstrating array destructuring with a default number parameter and an untyped parameter
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringWithLiteralInitializers2.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
function f10([x = 0, y]) {}
```

----------------------------------------

TITLE: Package Configuration for Module Exports (JSON)
DESCRIPTION: This package.json file configures module exports for different module formats (CJS, MJS, and default) in an ES module package.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsConditionalPackageExports(module=nodenext).errors.txt#2025-04-21_snippet_5

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module",
    "exports": {
        "./cjs": "./index.cjs",
        "./mjs": "./index.mjs",
        ".": "./index.js"
    }
}
```

----------------------------------------

TITLE: Valid Export Declarations in TypeScript
DESCRIPTION: Valid export declarations for variables with and without type annotations. Demonstrates proper variable exports with class types and primitive types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNonInitializedVariablesAMD.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export var a;
export let b;
export var c: string;
export let d: number;
class A {}
export var e: A;
export let f: A;
```

----------------------------------------

TITLE: Accessing Private Field Outside Class Error in TypeScript
DESCRIPTION: Demonstrates the TypeScript error that occurs when attempting to access a private field (#foo) outside of its defining class. The error message indicates that private fields marked with # can only be accessed within their declaring class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameNotAccessibleOutsideDefiningClass.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
    #foo: number = 3;
}

new A().#foo = 4;               // Error
```

----------------------------------------

TITLE: Chaining .then() with testFunction11P, testFunction11 on a Promise
DESCRIPTION: Chains the `.then()` method on a `Promise<number>` instance with `testFunction11P` and `testFunction11` as the fulfillment, rejection, and notify handlers.  It results in a type error because the provided function's return type `Promise<number>` or `IPromise<string>` are incompatible. The test checks type compatibility of the handler's parameters with expected types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations3.errors.txt#2025-04-21_snippet_25

LANGUAGE: typescript
CODE:
```
var s11c = s11.then(testFunction11P, testFunction11, testFunction11); // error
                        ~~~~~~~~~~~~~~~
```

----------------------------------------

TITLE: TypeScript Dynamic Import with ESM
DESCRIPTION: Shows an asynchronous import statement using ESM module syntax with dynamic module loading
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSpecifierGenerationDirectory(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export const a = (await import("inner/index.js")).x();
```

----------------------------------------

TITLE: JavaScript Dynamic Import Example
DESCRIPTION: JavaScript file demonstrating dynamic import usage that requires Promise support
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerSyntaxRestrictions(module=esnext).errors.txt#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import {} from "./a";
import("./a");
const _ = require("./a");
_.a; // any
```

----------------------------------------

TITLE: Tuple Destructuring with Implicit Types in TypeScript
DESCRIPTION: Demonstrates an error case where tuple destructuring without explicit type annotations leads to compiler errors. The variables 'a' and 'b' are implicitly typed as 'any' when destructuring undefined and null values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/wideningTuples5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var [a, b] = [undefined, null];
```

----------------------------------------

TITLE: Functions Lacking Return Type Annotations with null/undefined Returns in TypeScript
DESCRIPTION: This code snippet demonstrates TypeScript's handling of functions that return null or undefined without explicit return type annotations. These functions trigger TS7010 errors because they implicitly have 'any' return types, which is considered a type safety issue.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implicitAnyFunctionReturnNullOrUndefined.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// this should be an error
function nullWidenFunction() { return null;}
function undefinedWidenFunction() { return undefined; }

class C {
    nullWidenFuncOfC() {
        return null;
    }

    underfinedWidenFuncOfC() {
        return undefined;
    }
}

// this should not be an error
function foo1(): any { return null; }
function bar1(): any { return undefined; }
function fooBar(): number { return 1; }
function fooFoo() { return 5; }

// this should not be an error as the error is raised by expr above
nullWidenFunction();
undefinedWidenFunction();
```

----------------------------------------

TITLE: React Component Definition and Usage with TypeScript Errors
DESCRIPTION: This snippet defines a simple React component named `Tag` using TypeScript. It then demonstrates various ways of using the component, some of which result in TypeScript errors because the component's props are not explicitly defined, leading to issues with intrinsic attributes like 'children' and 'key'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty15.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import React = require('react');

const Tag = (x: {}) => <div></div>;

// OK
const k1 = <Tag />;
const k2 = <Tag></Tag>;

// Not OK (excess children)
const k3 = <Tag children={<div></div>} />;
const k4 = <Tag key="1"><div></div></Tag>;
const k5 = <Tag key="1"><div></div><div></div></Tag>;
```

----------------------------------------

TITLE: Importing and Using Module in TypeScript
DESCRIPTION: This snippet imports all exports from './1' as 'foo' and attempts to access properties of 'ns' through 'foo'. It demonstrates correct module import syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace2(module=esnext).errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
import * as foo from './1'

foo.ns.a;
foo.ns.b;
```

----------------------------------------

TITLE: Promise Type Assignment with Foo and Bar in TypeScript
DESCRIPTION: This snippet attempts to assign variables of type `Promise<Foo>` to `Promise<Bar>` and vice versa. Because `Foo` lacks the `y` property required by `Bar`, assigning `Promise<Foo>` to `Promise<Bar>` results in a TypeScript error. However, assigning `Promise<Bar>` to `Promise<Foo>` is permitted.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisesWithConstraints.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var a: Promise<Foo>;
var b: Promise<Bar>;
a = b; // ok
b = a; // ok
~
```

----------------------------------------

TITLE: Default Class Export in TypeScript
DESCRIPTION: Defines and exports a default class in TypeScript module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importHelpersWithImportOrExportDefaultNoTslib.1(esmoduleinterop=true,module=amd).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export default class { }
```

----------------------------------------

TITLE: Template Literal Type with Intersection of Template Literals in TypeScript
DESCRIPTION: Shows a function parameter typed with a complex template literal type involving the intersection of two other template literal types (`a${string}` and `${string}a`). Demonstrates which string literals satisfy this type (must start with 'a' AND end with 'a'). Includes examples of valid and invalid calls.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypesPatterns.errors.txt#_snippet_24

LANGUAGE: TypeScript
CODE:
```
function foo(str: `${`a${string}` & `${string}a`}Test`) {}
foo("abaTest"); // ok
foo("abcTest"); // error
    ~~~~~~~~~
// !!! error TS2345: Argument of type '"abcTest"' is not assignable to parameter of type '`${`a${string}` & `${string}a`}Test`'.
```

----------------------------------------

TITLE: Package Configuration for TypeScript Configs
DESCRIPTION: Package.json file defining exports mapping for JSON configuration files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsconfigExtendsPackageJsonExportsWildcard.errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "name": "foo",
    "version": "1.0.0",
    "exports": {
        "./*.json": "./configs/*.json"
    }
}
```

----------------------------------------

TITLE: Using Const Assertions with Arrays in TypeScript
DESCRIPTION: This snippet shows how const assertions can be applied to arrays, creating readonly tuple types. It includes examples of empty arrays, literal arrays, and spread operations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constAssertions.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
let a1 = [] as const;
let a2 = [1, 2, 3] as const;
let a3 = [10, 'hello', true] as const;
let a4 = [...[1, 2, 3]] as const;
let a5 = [1, 2, 3];
let a6 = [...a5] as const;
let a7 = [...a6];
let a8 = ['abc', ...a7] as const;
let a9 = [...a8];
```

----------------------------------------

TITLE: package.json Configuration (main)
DESCRIPTION: This `package.json` file configures the main package with a name, `private` property, module type, and exports declaration pointing to `./index.js`. This is the top-level package.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsBlocksSpecifierResolution(module=node16).errors.txt#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
    {
        "name": "package",
        "private": true,
        "type": "module",
        "exports": "./index.js"
    }
```

----------------------------------------

TITLE: Debugging TypeScript Interface Properties
DESCRIPTION: The code snippet demonstrates an error in TypeScript where an object literal uses an undefined property 'colour' instead of 'color'. This highlights TypeScript's ability to enforce type safety by ensuring only known properties are set as per interface 'CSSProps'. No external dependencies are required to reproduce this error. The input is an object literal, and the expected behavior is that TypeScript throws an error indicating the misuse of property names.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nestedFreshLiteral.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface CSSProps  {
  color?: string
}
interface NestedCSSProps {
  nested?: NestedSelector
}
interface NestedSelector  {
  prop: CSSProps;
}

let stylen: NestedCSSProps = {
  nested: { prop: { colour: 'red' } }
                    ~~~~~~
!!! error TS2561: Object literal may only specify known properties, but 'colour' does not exist in type 'CSSProps'. Did you mean to write 'color'?
}
```

----------------------------------------

TITLE: Defining Types with Unknown and Intersection
DESCRIPTION: These snippets define various types using the 'unknown' type in intersections. The 'unknown' type absorbs 'null' and 'undefined' in intersections, resulting in the respective types. When intersected with other concrete types like 'string' or 'string[]', the resulting type becomes the concrete type itself. Intersecting 'unknown' with 'any' results in 'any'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownType1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    // In an intersection everything absorbs unknown
    
    type T00 = unknown & null;  // null
    type T01 = unknown & undefined;  // undefined
    type T02 = unknown & null & undefined;  // never
    type T03 = unknown & string;  // string
    type T04 = unknown & string[];  // string[]
    type T05 = unknown & unknown;  // unknown
    type T06 = unknown & any;  // any
```

----------------------------------------

TITLE: Accessing Static Member Inside Instance Method Error in TypeScript
DESCRIPTION: This snippet demonstrates a TypeScript scope error that occurs when trying to access a static class member without proper qualification inside an instance method. The error indicates that 's' cannot be found in the current scope, and suggests using the fully qualified name 'C.s' instead.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/scopeCheckInsidePublicMethod1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
   static s;
   public a() {
      s = 1; // ERR
   }
}
```

----------------------------------------

TITLE: Server Variable Exports - TypeScript
DESCRIPTION: Defines several exported variables in a server module. Contains basic numeric value assignments to exported variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ImportNamedImportWithExport.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var a = 10;
export var x = a;
export var m = a;
export var a1 = 10;
export var x1 = 10;
export var z1 = 10;
export var z2 = 10;
export var aaaa = 10;
```

----------------------------------------

TITLE: Invalid Logical NOT Operations in TypeScript
DESCRIPTION: This snippet demonstrates three common errors when using the logical NOT operator in TypeScript: 1) confusion with the non-null assertion operator, 2) applying arithmetic to a boolean and number, and 3) using the NOT operator without an operand. The TypeScript compiler catches these errors during compilation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalNotOperatorInvalidOperations.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// Unary operator !
var b: number;

// operand before !
var BOOLEAN1 = b!;  //expect error

// miss parentheses
var BOOLEAN2 = !b + b;

// miss an operand
var BOOLEAN3 =!;
```

----------------------------------------

TITLE: Iterating over Robots and Logging Identifiers - JavaScript
DESCRIPTION: This snippet iterates over robots returned by a function `getRobots()`, extracts the identifier using array destructuring, and logs it. Prerequisites include having the `getRobots` function defined, which returns an iterable array of robot objects or arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_16

LANGUAGE: JavaScript
CODE:
```
for (var _8 = 0, _9 = getRobots(); _8 < _9.length; _8++) {
    var _10 = _9[_8][0], numberB = _10 === void 0 ? -1 : _10;
    console.log(numberB);
}
```

----------------------------------------

TITLE: Handling Function Parameters and Types in TypeScript
DESCRIPTION: This snippet declares several functions with rest parameters and type unions meant to illustrate how function signatures are checked in TypeScript. The declarations include permissible argument structures and invoke these functions with various argument configurations to demonstrate type-related errors. Key dependencies include TypeScript's type inference and type system.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericRestParameters3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare let f1: (x: string, ...args: [string] | [number, boolean]) => void;
declare let f2: (x: string, y: string) => void;
declare let f3: (x: string, y: number, z: boolean) => void;
declare let f4: (...args: [string, string] | [string, number, boolean]) => void;

declare const t1: [string] | [number, boolean];
declare const t2: readonly [string] | [number, boolean];
declare const t3: [string] | readonly [number, boolean];
declare const t4: readonly [string] | readonly [number, boolean];

f1("foo", "abc");
f1("foo", 10, true);
f1("foo", ...t1);
f1("foo", ...t2);
f1("foo", ...t3);
f1("foo", ...t4);
f1("foo", 10);  // Error
```

----------------------------------------

TITLE: Exporting Interfaces as Type Declarations
DESCRIPTION: This defines empty TypeScript interfaces in separate module declaration files. These interfaces are subsequently imported and extended in other parts of the codebase. The setup relies on accurately exporting these interfaces to ensure compatibility with different module systems defined within the overall project structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportAttributesModeDeclarationEmit2(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
export interface ImportInterface {}
```

LANGUAGE: TypeScript
CODE:
```
export interface RequireInterface {}
```

----------------------------------------

TITLE: Generic Function with Multiple Type Parameters and Constraint Relationship
DESCRIPTION: Defines a function with two type parameters where the second extends the first, demonstrating constraint violations when passing incompatible types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeArgumentInferenceWithConstraints.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// Generic call with multiple type parameters and only one used in parameter type annotation
function someGenerics1<T, U extends T>(n: T, m: number) { }
someGenerics1(3, 4); // Valid
someGenerics1<string, number>(3, 4); // Error
someGenerics1<number, {}>(3, 4); // Error
someGenerics1<number, number>(3, 4);
```

----------------------------------------

TITLE: Inner package.json Configuration
DESCRIPTION: This snippet shows the configuration for the inner package's package.json file. It defines the package name, marks it as private, indicates that the project uses ES modules, and configures export paths for the package using the 'exports' field. This configuration is crucial for module resolution in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSpecifierGenerationConditions(module=node16).errors.txt#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
{
    "name": "inner",
    "private": true,
    "type": "module",
    "exports": {
        ".": {
            "default": "./index.js"
        },
        "./other": {
            "default": "./other.js"
        }
    }
}
```

----------------------------------------

TITLE: Incorrect Await Usage in Class Property - TypeScript
DESCRIPTION: Demonstrates an error case where await is incorrectly used in a class property initialization. The await keyword is used outside of an async context, specifically in a class property initializer, which is not allowed by TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitInClassInAsyncFunction.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
async function bar() {
    return 2;
}

async function foo() {
    return new class {
        baz = await bar();
    };
}
```

----------------------------------------

TITLE: Incorrect Use of Yield Expression in Arrow Function (TypeScript)
DESCRIPTION: This code snippet demonstrates a common TypeScript error where the 'yield' keyword is used in an arrow function that is not a generator. The compiler error TS1163 indicates that yield expressions are only valid within generator function bodies.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/YieldExpression15_es6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var v = () => {
     yield foo
  }
```

----------------------------------------

TITLE: Nested Destructuring with Defaults JavaScript
DESCRIPTION: This segment of code retrieves values nested within multiRobotA, specifically the name and skillset details, while applying default values where necessary. It's a complex example of nested destructuring combined with default accessors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
var _c = multiRobotA[0], nameMA = _c === void 0 ? "noName" : _c, _d = multiRobotA[1], _e = _d === void 0 ? ["noSkill", "noSkill"] : _d, _f = _e[0], primarySkillA = _f === void 0 ? "noSkill" : _f, _g = _e[1], secondarySkillA = _g === void 0 ? "noSkill" : _g;
```

----------------------------------------

TITLE: Defining Stack Module and Interface in TypeScript
DESCRIPTION: Declares Stack module functions, constructor overloads, and interface with methods for stack operations and sequence algorithms.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/complexRecursiveCollections.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
export module Stack {
  function isStack(maybeStack: any): maybeStack is Stack<any>;
  function of<T>(...values: Array<T>): Stack<T>;
}
export function Stack(): Stack<any>;
export function Stack<T>(): Stack<T>;
export function Stack<T>(collection: Iterable<T>): Stack<T>;
export interface Stack<T> extends Collection.Indexed<T> {
  // Reading values
  peek(): T | undefined;
  // Persistent changes
  clear(): Stack<T>;
  unshift(...values: Array<T>): Stack<T>;
  unshiftAll(iter: Iterable<T>): Stack<T>;
  shift(): Stack<T>;
  push(...values: Array<T>): Stack<T>;
  pushAll(iter: Iterable<T>): Stack<T>;
  pop(): Stack<T>;
  // Transient changes
  withMutations(mutator: (mutable: this) => any): this;
  asMutable(): this;
  asImmutable(): this;
  // Sequence algorithms
  concat<C>(...valuesOrCollections: Array<Iterable<C> | C>): Stack<T | C>;
  map<M>(mapper: (value: T, key: number, iter: this) => M, context?: any): Stack<M>;
  flatMap<M>(mapper: (value: T, key: number, iter: this) => Iterable<M>, context?: any): Stack<M>;
  filter<F extends T>(predicate: (value: T, index: number, iter: this) => value is F, context?: any): Set<F>;
  filter(predicate: (value: T, index: number, iter: this) => any, context?: any): this;
}
```

----------------------------------------

TITLE: Properly Extending Iterator Class in TypeScript
DESCRIPTION: This snippet shows how to correctly extend the built-in Iterator abstract class. It implements the required next() method with a return type that correctly satisfies the Iterator interface.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/builtinIterator.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class GoodIterator extends Iterator<number> {
  next() {
    return { done: false, value: 0 } as const;
  }
}
```

----------------------------------------

TITLE: Exporting Variable in TypeScript Module
DESCRIPTION: This snippet defines and exports a variable 'x' with an initial value of 1 from the module 'b.ts'. This represents a basic structure for exporting data in a TypeScript module, which can be imported by other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/relativeNamesInClassicResolution.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export let x = 1;
```

----------------------------------------

TITLE: Defining and Exporting a Class in TypeScript
DESCRIPTION: This snippet defines a class 'A' and exports it normally. This is the base for the subsequent export type examples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace4.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export class A {}
```

----------------------------------------

TITLE: Testing Division Operator with null in TypeScript
DESCRIPTION: Test cases showing TypeScript errors when using null with the division (/) operator. The tests demonstrate that null cannot be used on either side of the division operator with various operand types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arithmeticOperatorWithNullValueAndValidOperands.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var rb1 = null / a;
var rb2 = null / b;
var rb3 = null / 1;
var rb4 = null / E.a;
var rb5 = a / null;
var rb6 = b / null;
var rb7 = 0 / null;
var rb8 = E.b / null;
```

----------------------------------------

TITLE: Demonstrating Invalid Assignments in TypeScript
DESCRIPTION: This code snippet showcases various scenarios where TypeScript prevents invalid assignments to different language constructs. It includes attempts to assign to modules, classes, enums, read-only properties, functions, and interfaces, each resulting in a specific error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignments.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module M { }
M = null; // Error

class C { }
C = null; // Error

enum E { A }
E = null; // Error
E.A = null; // OK per spec, Error per implementation (509581)

function fn() { }
fn = null; // Should be error

var v;
v = null; // OK

function fn2(p) {
    p = null; // OK
}

interface I { }
I = null; // Error
```

----------------------------------------

TITLE: Handling Method Overloads in TypeScript Classes
DESCRIPTION: This snippet demonstrates how method overloading is handled in TypeScript classes. It includes examples of incorrectly overloaded methods that cause compilation errors due to duplicate function implementations and a correctly implemented overloaded method that uses optional parameters to resolve ambiguities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadsWithinClasses.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class foo {
    
    static fnOverload( ) {}
           ~~~~~~~~~~

    static fnOverload(foo: string){ } // error
           ~~~~~~~~~~
}

class bar {

    static fnOverload( );

    static fnOverload(foo?: string){ } // no error
}

class X {
   public attr(name:string):string;
   public attr(name:string, value:string):X;
   public attr(first:any, second?:any):any {
   }
}
```

----------------------------------------

TITLE: Secondary Foo Class Definition
DESCRIPTION: Defines another Foo class in a separate module also containing a private field #x.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNamesUnique-2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export class Foo {
    #x;
}
```

----------------------------------------

TITLE: Assigning Default Name for Variable in TypeScript
DESCRIPTION: This snippet assigns a default name to a variable based on the presence of a value from a given object. If the value is undefined, 'noName' is assigned. The context of this code suggests it is part of a larger function handling robots.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_8

LANGUAGE: TypeScript
CODE:
```
_c = _63[_62].name, nameA = _c === void 0 ? "noName" : _c;
```

----------------------------------------

TITLE: Creating Customer Class Using Person Mixin in TypeScript
DESCRIPTION: Defines a Customer class that extends the result of applying PersonMixin to Person, adding additional properties and methods. This shows the complete mixin pattern with property extension.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mixinPrivateAndProtected.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
class Customer extends PersonMixin(Person) {
	accountBalance: number;
    f() {
    }
}
```

----------------------------------------

TITLE: Defining Class with Private Properties in TypeScript
DESCRIPTION: This snippet defines a TypeScript class 'C' with various private properties and methods, including instance and static members. It demonstrates different ways of declaring private members in a class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classWithPrivateProperty.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
    private x;
    private a = '';
    private b: string = '';
    private c() { return '' }
    private d = () => '';
    private static e;
    private static f() { return '' }
    private static g = () => '';
}
```

----------------------------------------

TITLE: Implicit 'any' Type Error in TypeScript
DESCRIPTION: This snippet highlights an implicit 'any' type error. When a function parameter lacks an explicit type annotation and no type can be inferred from context, TypeScript infers it as 'any'.  The `noImplicitAny` compiler option (or similar strictness settings) will flag this as an error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocSatisfiesTag15.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    /** @satisfies {(uuid: string) => void} */
    export function fn7(uuid) {}
                        ~~~
```

----------------------------------------

TITLE: Demonstrating TypeScript Type Guards with Any Type
DESCRIPTION: This code snippet shows various type guard scenarios with a variable of type 'any'. It illustrates how instanceof and typeof checks affect type inference and property access.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardsWithAny.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var x: any = { p: 0 };

if (x instanceof Object) {
    x.p; // No error, type any unaffected by instanceof type guard
}
else {
    x.p; // No error, type any unaffected by instanceof type guard
}

if (typeof x === "string") {
    x.p; // Error, type any narrowed by primitive type check
}
else {
    x.p; // No error, type unaffected in this branch
}

if (typeof x === "number") {
    x.p; // Error, type any narrowed by primitive type check
}
else {
    x.p; // No error, type unaffected in this branch
}

if (typeof x === "boolean") {
    x.p; // Error, type any narrowed by primitive type check
}
else {
    x.p; // No error, type unaffected in this branch
}

if (typeof x === "object") {
    x.p; // No error, type any only affected by primitive type check
}
else {
    x.p; // No error, type unaffected in this branch
}
```

----------------------------------------

TITLE: Analyzing Computed Properties with Narrowed Types in TypeScript
DESCRIPTION: This code snippet demonstrates various scenarios of computed properties in TypeScript, including narrow types, literal types, symbols, and function return values. It shows how TypeScript handles type inference and isolated declarations for these cases.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/computedPropertiesNarrowed.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
const x: 0 | 1 = Math.random()? 0: 1;
declare function assert(n: number): asserts n is 1;
assert(x);
export let o = {
    [x]: 1 // error narrow type !== declared type
}


const y: 0 = 0
export let o2 = {
    [y]: 1 // ok literal computed type 
}

// literals are ok
export let o3 = { [1]: 1 }
export let o31 = { [-1]: 1 }

export let o32 = { [1-1]: 1 } // error number 

let u = Symbol();
export let o4 = {
    [u]: 1 // Should error, nut a unique symbol
}

export let o5  ={
    [Symbol()]: 1 // Should error
}

const uu: unique symbol = Symbol();
export let o6  = {
    [uu]: 1 // Should be ok
}


function foo (): 1 { return 1; }
export let o7 = {
    [foo()]: 1 // Should error
};

let E = { A: 1 } as const
export const o8 = {
    [E.A]: 1 // Fresh 
}

function ns() { return { v: 0 } as const }
export const o9 = {
    [ns().v]: 1
}
```

----------------------------------------

TITLE: Extending Object Literal Error in TypeScript
DESCRIPTION: A demonstration of errors when attempting to extend an object literal. TypeScript throws multiple errors including TS2507 (not a constructor function type) and TS2693 (using type as value).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classExtendsEveryObjectType.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class C2 extends { foo: string; } { } // error
```

----------------------------------------

TITLE: Declaring Generic Constructor Type with Constraint (TypeScript)
DESCRIPTION: Defines a variable 'b15a' with a generic constructor signature. The constructor takes an object with properties 'a' and 'b' of the same generic type 'T', which must extend 'Base'. It returns a number. The assignments test compatibility with another type 'a15'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithConstructSignatures4.errors.txt#_snippet_18

LANGUAGE: TypeScript
CODE:
```
var b15a: new <T extends Base>(x: { a: T; b: T }) => number;
```

LANGUAGE: TypeScript
CODE:
```
a15 = b15a; // ok
```

LANGUAGE: TypeScript
CODE:
```
b15a = a15; // ok
```

----------------------------------------

TITLE: JSX Component with Extra Attributes
DESCRIPTION: Examples showing potentially problematic JSX usage with extra attributes that don't match component definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentOverload4.errors.txt#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
const c6 = <OneThing {...obj2} {...{extra: "extra attr"}} />;
const c7 = <OneThing {...obj2} yy />;
```

----------------------------------------

TITLE: Object Destructuring with Nested Defaults
DESCRIPTION: Demonstrates advanced object destructuring where default values are provided for nested properties ('primary', 'secondary') and also a default object value is provided if the 'skills' property itself is missing or undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_98

LANGUAGE: TypeScript
CODE:
```
skills: {
  primary = "primary",
  secondary = "secondary"
} = { primary: "none", secondary: "none" }
```

----------------------------------------

TITLE: Object Parameter Destructuring with Default Values - TypeScript
DESCRIPTION: Defines a function `c1` that uses destructuring to extract a property `z` from an object parameter, providing a default value if the object itself is not provided or doesn't have the property. This showcases how to set default values for object parameters using destructuring.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration1ES5.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
"function c1({z} = { z: 10 }) { }"
```

----------------------------------------

TITLE: Array Iteration with Default Values and Logging in TypeScript
DESCRIPTION: This snippet employs a for-loop to iterate over an array and conditionally assigns a default value to numberB. The loop iterates once and logs the value, demonstrating initialization with conditional expressions. It uses an array [2, "trimmer", "trimming"], advancing with an index control structured to iterate while i < 1.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_20

LANGUAGE: TypeScript
CODE:
```
for (var _x = [2, "trimmer", "trimming"][0], numberB = _x === void 0 ? -1 : _x, i = 0; i < 1; i++) { }
```

----------------------------------------

TITLE: For-Of Loop with Multiple Destructuring Assignment Variables
DESCRIPTION: JavaScript code demonstrating how TypeScript transforms a for-of loop with multiple destructuring assignments. The original code destructures three values (numberA2, nameA2, skillA2) from each item in the 'robots' array.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_19

LANGUAGE: javascript
CODE:
```
for (var _16 = 0, robots_3 = robots; _16 < robots_3.length; _16++) {
    _k = robots_3[_16], numberA2 = _k[0], nameA2 = _k[1], skillA2 = _k[2];
}
```

----------------------------------------

TITLE: Package Configuration in JSON
DESCRIPTION: Defines the package configuration for a TypeScript project. It specifies the package name, version, module type, and a default value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesResolveJsonModule(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "type": "module",
    "default": "misedirection"
}
```

----------------------------------------

TITLE: Inner Package Configuration for Conditional Exports (JSON)
DESCRIPTION: This package.json file for an inner module configures conditional exports based on module format and environment, including type definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsConditionalPackageExports(module=nodenext).errors.txt#2025-04-21_snippet_6

LANGUAGE: JSON
CODE:
```
{
    "name": "inner",
    "private": true,
    "exports": {
        "./a": {
            "require": "./index.cjs",
            "node": "./index.mjs"
        },
        "./b": {
            "import": "./index.mjs",
            "node": "./index.cjs"
        },
        ".": {
            "import": "./index.mjs",
            "node": "./index.js"
        },
        "./types": {
            "types": {
                "import": "./index.d.mts",
                "require": "./index.d.cts"
            },
            "node": {
                "import": "./index.mjs",
                "require": "./index.cjs"
            }
        }
    }
}
```

----------------------------------------

TITLE: Function Calls with Object Parameters in TypeScript/JavaScript
DESCRIPTION: Shows function calls to foo2 and foo3 with both a robot object variable and literal object parameter containing name and skill properties. The code includes source map information mapping compiled JavaScript back to original TypeScript locations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringParameterObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
foo2(robotA);
foo2({ name: "Edger", skill: "cutting edges" });
foo3(robotA);
foo3({ name: "Edger", skill: "cutting edges" });
```

----------------------------------------

TITLE: Defining React Component with Prop Interface
DESCRIPTION: Creates a prop interface for a React component with explicit child element type constraints
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty7.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Prop {
    a: number,
    b: string,
    children: JSX.Element | JSX.Element[];
}
```

----------------------------------------

TITLE: Exporting Constants in TypeScript
DESCRIPTION: Basic module exporting two numeric constants.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace2(module=es2015).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const a = 1;
export const b = 2;
```

----------------------------------------

TITLE: Export Constants in TypeScript
DESCRIPTION: Exports two constant values a and b from a TypeScript module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace3(module=es2015).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const a = 1;
export const b = 2;
```

----------------------------------------

TITLE: Importing Modules in ESM Format (JavaScript)
DESCRIPTION: This snippet demonstrates importing modules in ESM format, including both CommonJS and ES modules from various packages and inner modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsConditionalPackageExports(module=nodenext).errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
// esm format file
import * as cjs from "package/cjs";
import * as mjs from "package/mjs";
import * as type from "package";
cjs;
mjs;
type;
import * as cjsi from "inner/a";
import * as mjsi from "inner/b";
import * as typei from "inner";
import * as ts from "inner/types";
cjsi.mjsSource;
mjsi.mjsSource;
typei.mjsSource;
ts.mjsSource;
```

----------------------------------------

TITLE: Instantiating Overloaded Constructor with Differing Arity in TypeScript
DESCRIPTION: This snippet instantiates the `fn3` interface with different numbers of arguments, demonstrating how TypeScript chooses the correct overload based on arity and argument types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadResolutionConstructors.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
    var s = new fn3(3);
    var s = new fn3('', 3, '');
    var n = new fn3(5, 5, 5);
    var n: number;
```

----------------------------------------

TITLE: TypeScript Class with Duplicate Member Declarations
DESCRIPTION: Example class demonstrating various types of duplicate member declarations that generate TypeScript errors, including properties, methods, and getter/setter combinations. Shows compiler errors for duplicate identifiers and type mismatches.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/duplicateClassElements.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class a {
    public a;
    public a;
    public b() {
    }
    public b() {
    }
    public x;
    get x() {
        return 10;
    }
    set x(_x: number) {
    }

    get y() {
        return "Hello";
    }
    set y(_y: string) {
    }

    public z() {
    }
    get z() {
        return "Hello";
    }
    set z(_y: string) {
    }

    get x2() {
        return 10;
    }
    set x2(_x: number) {
    }
    public x2;

    get z2() {
        return "Hello";
    }
    set z2(_y: string) {
    }
    public z2() {
    }

}
```

----------------------------------------

TITLE: Defining Read-Only Constant in TypeScript Module
DESCRIPTION: This snippet defines a module 'M' with an exported constant 'x'. The constant is implicitly read-only due to the 'const' keyword.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constDeclarations-access3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
module M {
    export const x = 0;
}
```

----------------------------------------

TITLE: Relative Import Error in TypeScript
DESCRIPTION: This code demonstrates a TypeScript error (TS2835) related to relative import paths in ECMAScript modules. When the `--moduleResolution` flag is set to `node16` or `nodenext`, relative imports must include the file extension. The error occurs because the import statement lacks the `.jsx` extension.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionWithoutExtension3(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    // Extensionless relative path ES import in an ES module
    import { foo } from "./foo"; // should error, suggest adding ".jsx"
                        ~~~~~~~
```

----------------------------------------

TITLE: Defining Generic Array Wrapper Interface in TypeScript
DESCRIPTION: This snippet defines a generic interface MyArrayWrapper<T> with a constructor and a doSomething method that takes a predicate function. It also declares a create function to instantiate the wrapper.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/lambdaParamTypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface MyArrayWrapper<T> {
    constructor(initialItems?: T[]);
    doSomething(predicate: (x: T, y: T) => string): void;
}

declare function create<T>(initialValues?: T[]): MyArrayWrapper<T>;
```

----------------------------------------

TITLE: Codefix: Adding Import for join
DESCRIPTION: Example of a codefix that adds an import for the path module when the join method is referenced.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/autoImportVerbatimCJS1.baseline.md#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
import path = require("path");

path.join
```

----------------------------------------

TITLE: Demonstrating TypeScript Errors in React Component Usage
DESCRIPTION: This snippet shows various usage scenarios of the MainButton component that result in TypeScript errors. The errors are due to incorrect prop usage, such as adding an 'extra' prop that doesn't exist in the defined interfaces.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextuallyTypedStringLiteralsInJsxAttributes02.errors.txt#2025-04-21_snippet_2

LANGUAGE: TSX
CODE:
```
const b0 = <MainButton {...{onClick: (k) => {console.log(k)}}} extra />;
const b2 = <MainButton onClick={(k)=>{console.log(k)}} extra />;
const b3 = <MainButton {...{goTo:"home"}} extra />;
const b4 = <MainButton goTo="home" extra />;
```

----------------------------------------

TITLE: Defining Base and Derived Interfaces in TypeScript
DESCRIPTION: Establishes a hierarchy of interfaces: Base, Derived (extends Base), and Derived2 (extends Derived). Each interface adds a new string property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithNumericIndexer.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Base { foo: string; }
interface Derived extends Base { bar: string; }
interface Derived2 extends Derived { baz: string; }
```

----------------------------------------

TITLE: Robot Array Type Definitions and Initialization
DESCRIPTION: Defines robot types and initializes robot arrays with specific patterns. Includes Robot type as [number, string, string] and MultiSkilledRobot type as [string, [string, string]].
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
var robotA = [1, "mower", "mowing"];
var robotB = [2, "trimmer", "trimming"];
var robots = [robotA, robotB];
```

----------------------------------------

TITLE: Defining Classes and Iterator in TypeScript
DESCRIPTION: This snippet defines three classes: Bar, Foo (which extends Bar), and FooIterator (which implements the Iterator interface). It also includes a function that uses rest parameters of type Bar[].
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/iterableArrayPattern17.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Bar { x }
class Foo extends Bar { y }
class FooIterator {
    next() {
        return {
            value: new Foo,
            done: false
        };
    }

    [Symbol.iterator]() {
        return this;
    }
}

function fun(...[a, b]: Bar[]) { }
fun(new FooIterator);
```

----------------------------------------

TITLE: Implementing Interface I with Correct Generic Type (A)
DESCRIPTION: The class `Y` correctly implements the interface `I` using the same generic type constraint `A` as defined in the interface.  This ensures that the implementation's return type is compatible with the interface's declared return type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericImplements.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// OK
class Y implements I {
    f<T extends A>(): T { return undefined; }
} // { f: () => { a; } }
```

----------------------------------------

TITLE: TypeScript Class with Private Fields and 'in' Operator
DESCRIPTION: Demonstrates TypeScript class with private fields, including one unused field generating a compiler error and another field used in type guard. Shows proper usage of the 'in' operator with private fields for type checking.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameInInExpressionUnused(target=es2022).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Foo {
    #unused: undefined; // expect unused error
    #brand: undefined; // expect no error

    isFoo(v: any): v is Foo {
        // This should count as using/reading '#brand'
        return #brand in v;
    }
}
```

----------------------------------------

TITLE: TypeScript Type Definition for DOM Element/Document Properties and Methods
DESCRIPTION: This snippet defines a TypeScript type or interface structure, enumerating a wide range of standard DOM properties (like aria attributes, element children/siblings, style, contentEditable, dataset, tabIndex) and methods (like animate, getAnimations, append, prepend, querySelector, focus, blur), as well as numerous event handlers (like onclick, onfocus, onkeydown, onload, onpointerdown, ontransitionend, onwheel). It represents the shape of objects commonly encountered when working with HTML elements or the document itself in a web browser environment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRecursiveInference.errors.txt#_snippet_31

LANGUAGE: TypeScript
CODE:
```
n: any; ariaBusy: any; ariaChecked: any; ariaColCount: any; ariaColIndex: any; ariaColIndexText: any; ariaColSpan: any; ariaControlsElements: any; ariaCurrent: any; ariaDescribedByElements: any; ariaDescription: any; ariaDetailsElements: any; ariaDisabled: any; ariaErrorMessageElements: any; ariaExpanded: any; ariaFlowToElements: any; ariaHasPopup: any; ariaHidden: any; ariaInvalid: any; ariaKeyShortcuts: any; ariaLabel: any; ariaLabelledByElements: any; ariaLevel: any; ariaLive: any; ariaModal: any; ariaMultiLine: any; ariaMultiSelectable: any; ariaOrientation: any; ariaOwnsElements: any; ariaPlaceholder: any; ariaPosInSet: any; ariaPressed: any; ariaReadOnly: any; ariaRelevant: any; ariaRequired: any; ariaRoleDescription: any; ariaRowCount: any; ariaRowIndex: any; ariaRowIndexText: any; ariaRowSpan: any; ariaSelected: any; ariaSetSize: any; ariaSort: any; ariaValueMax: any; ariaValueMin: any; ariaValueNow: any; ariaValueText: any; role: any; animate: any; getAnimations: any; after: any; before: any; remove: any; replaceWith: any; readonly nextElementSibling: any; readonly previousElementSibling: any; readonly childElementCount: any; readonly children: any; readonly firstElementChild: any; readonly lastElementChild: any; append: any; prepend: any; querySelector: any; querySelectorAll: any; replaceChildren: any; readonly assignedSlot: any; readonly attributeStyleMap: any; style: any; contentEditable: any; enterKeyHint: any; inputMode: any; readonly isContentEditable: any; onabort: any; onanimationcancel: any; onanimationend: any; onanimationiteration: any; onanimationstart: any; onauxclick: any; onbeforeinput: any; onbeforetoggle: any; onblur: any; oncancel: any; oncanplay: any; oncanplaythrough: any; onchange: any; onclick: any; onclose: any; oncontextlost: any; oncontextmenu: any; oncontextrestored: any; oncopy: any; oncuechange: any; oncut: any; ondblclick: any; ondrag: any; ondragend: any; ondragenter: any; ondragleave: any; ondragover: any; ondragstart: any; ondrop: any; ondurationchange: any; onemptied: any; onended: any; onerror: any; onfocus: any; onformdata: any; ongotpointercapture: any; oninput: any; oninvalid: any; onkeydown: any; onkeypress: any; onkeyup: any; onload: any; onloadeddata: any; onloadedmetadata: any; onloadstart: any; onlostpointercapture: any; onmousedown: any; onmouseenter: any; onmouseleave: any; onmousemove: any; onmouseout: any; onmouseover: any; onmouseup: any; onpaste: any; onpause: any; onplay: any; onplaying: any; onpointercancel: any; onpointerdown: any; onpointerenter: any; onpointerleave: any; onpointermove: any; onpointerout: any; onpointerover: any; onpointerup: any; onprogress: any; onratechange: any; onreset: any; onresize: any; onscroll: any; onscrollend: any; onsecuritypolicyviolation: any; onseeked: any; onseeking: any; onselect: any; onselectionchange: any; onselectstart: any; onslotchange: any; onstalled: any; onsubmit: any; onsuspend: any; ontimeupdate: any; ontoggle: any; ontouchcancel?: any; ontouchend?: any; ontouchmove?: any; ontouchstart?: any; ontransitioncancel: any; ontransitionend: any; ontransitionrun: any; ontransitionstart: any; onvolumechange: any; onwaiting: any; onwebkitanimationend: any; onwebkitanimationiteration: any; onwebkitanimationstart: any; onwebkittransitionend: any; onwheel: any; autofocus: any; readonly dataset: any; nonce?: any; tabIndex: any; blur: any; focus: any; }; } | { readonly ownerDocument: { readonly URL: any; alinkColor: any; readonly all: any; readonly anchors: any; readonly applets: any; bgColor: any; body: any; readonly characterSet: any; readonly charset: any; readonly compatMode: any; readonly contentType: any; cookie: any; readonly currentScript: any; readonly defaultView: any; designMode: any; dir: any; readonly doctype: any; readonly documentElement: any; readonly documentURI: any; domain: any; readonly embeds: any; fgColor: any; readonly forms: any; readonly fragmentDirective: any; readonly fullscreen: any; readonly fullscreenEnabled: any; readonly head: any; readonly hidden: any; readonly images: any; readonly implementation: any; readonly inputEncoding: any; readonly lastModified: any; linkColor: any; readonly links: any; location: any; onfullscreenchange: any; onfullscreenerror: any; onpointerlockchange: any; onpointerlockerror: any; onreadystatechange: any; onvisibilitychange: any; readonly ownerDocument: any; readonly pictureInPictureEnabled: any; readonly plugins: any; readonly readyState: any; readonly referrer: any; readonly rootElement: any; readonly scripts: any; readonly scrollingElement: any; readonly timeline: any; title: any; readonly visibilityState: any; vlinkColor: any; adoptNode: any; captureEvents: any; caretPositionFromPoint: any; caretRangeFromPoint: any; clear: any; close: any; createAttribute: any; createAttributeNS: any; createCDATASection: any; createComment: any; createDocumentFragment: any; createElement: any; createElementNS: any; createEvent: any; createNodeIterator: any; createProces
```

----------------------------------------

TITLE: TypeScript Readonly Properties and Assignment Restrictions
DESCRIPTION: This code defines a Bar interface with a readonly property and demonstrates how TypeScript prevents assignments to readonly properties. It shows the error that occurs when attempting to modify a readonly property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypes6.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
type Bar = {
    a: number;
    readonly b: number;
}

declare let x3: Bar;
x3.a = 1;
x3.b = 1;  // Error
```

----------------------------------------

TITLE: Handling Arbitrary Module Namespace Identifiers with TypeScript Import/Export
DESCRIPTION: This snippet covers the practice of exporting and importing constants and types using arbitrary module namespace identifiers. It includes export and import of aliases and verifies the integrity of imported values by checking expected outputs. Dependencies include the identifiers being properly defined and exported from './arbitraryModuleNamespaceIdentifiers_module'. Key operations involve renaming the imports and exports using various module specifiers. The expected inputs are valid TypeScript identifiers or strings, and the outputs demonstrate correct bindings or type assignment errors if misaligned. Limitations include strict type expectations, causing errors on mismatch.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arbitraryModuleNamespaceIdentifiers_module(module=es2022).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
const someValue = "someValue";
type someType = "someType";

export { someValue as "<X>" };
import { "<X>" as valueX } from "./arbitraryModuleNamespaceIdentifiers_module";
if (valueX !== "someValue") throw "should be someValue";

export { "<X>" as "<Y>" } from "./arbitraryModuleNamespaceIdentifiers_module";
import { "<Y>" as valueY } from "./arbitraryModuleNamespaceIdentifiers_module";
if (valueY !== "someValue") throw "should be someValue";

export * as "<Z>" from "./arbitraryModuleNamespaceIdentifiers_module";
import { "<Z>" as valueZ } from "./arbitraryModuleNamespaceIdentifiers_module";
if (valueZ["<X>"] !== "someValue") throw "should be someValue";
if (valueZ["<Y>"] !== "someValue") throw "should be someValue";
if (valueZ["<Z>"] !== valueZ) throw "should be export namespace";

export { type someType as "<A>" };
import { type "<A>" as typeA } from "./arbitraryModuleNamespaceIdentifiers_module";
const importTest: typeA = "expect error about someType";

export { type "<A>" as "<B>" } from "./arbitraryModuleNamespaceIdentifiers_module";
import { type "<B>" as typeB } from "./arbitraryModuleNamespaceIdentifiers_module";
const reimportTest: typeB = "expect error about someType";

export type * as "<C>" from "./arbitraryModuleNamespaceIdentifiers_module";
import { type "<C>" as typeC } from "./arbitraryModuleNamespaceIdentifiers_module";
export type otherType = "otherType";
const importStarTestA: typeC.otherType = "expect error about otherType";
```

----------------------------------------

TITLE: Implementing Function Overloads with Callback Parameters in TypeScript
DESCRIPTION: This code demonstrates function overloading with callback parameters in TypeScript. The function x3 accepts either a number or string, along with a callback that processes numbers. When callbacks with incompatible parameter types are provided, TypeScript generates appropriate type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/specializedSignatureAsCallbackParameter1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function x3(a: number, cb: (x: number) => number);
function x3(a: string, cb: (x: number) => number);
function x3(a: any, cb: (x: number) => number) {
   cb(a);
}
// both are errors
x3(1, (x: string) => 1); 
x3(1, (x: 'hm') => 1);
```

----------------------------------------

TITLE: Separate Array Initialization with Logical OR
DESCRIPTION: Function showing a two-step approach using logical OR assignment (||=) to initialize an array before pushing a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment4(target=es2020).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function foo3(results: number[] | undefined) {
    results ||= [];
    results.push(100);
}
```

----------------------------------------

TITLE: TypeScript Module Imports in ESM Format (.ts file)
DESCRIPTION: TypeScript code importing modules from different formats (CJS, MJS, JS) in an ESM-formatted file. Several imports show errors for non-existent modules in 'exclude' directories.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExportsExclude(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// esm format file
import * as cjsi from "inner/cjs/exclude/index";
import * as mjsi from "inner/mjs/exclude/index";
import * as typei from "inner/js/exclude/index";
cjsi;
mjsi;
typei;
import * as cjsi2 from "inner/cjs/index";
import * as mjsi2 from "inner/mjs/index";
import * as typei2 from "inner/js/index";
cjsi2;
mjsi2;
typei2;
```

----------------------------------------

TITLE: Demonstrating Callback Signature Mismatch in TypeScript
DESCRIPTION: This code snippet shows a function 'takesCallback' that expects a callback with one parameter, but receives a callback with two parameters, resulting in a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/signatureLengthMismatchCall.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function takesCallback(fn: (a: number) => void) {
  // ...
}

takesCallback((a: number, b: number) => {});
```

----------------------------------------

TITLE: Class B extending A, accessing members
DESCRIPTION: This snippet defines a class 'B' that extends class 'A' and attempts to access 'priv', 'prot', and 'pub' members from within the 'm' method. It demonstrates the expected TypeScript compiler errors when attempting to access private members of the base class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocAccessibilityTags.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class B extends A {
        m() {
            this.priv + this.prot + this.pub
                 ~~~~
!!! error TS2341: Property 'priv' is private and only accessible within class 'A'.
        }
    }
```

----------------------------------------

TITLE: Handling String and Number Type Mismatch in Switch Case - TypeScript
DESCRIPTION: This snippet examines a switch case that involves declared variables with union types. The case checks against a boolean and a string which result in type mismatch errors as per TypeScript's strict typing rules. This demonstrates how comparisons in switch cases can lead to errors when types are not compatible.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/switchCasesExpressionTypeMismatch.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
declare var q: string
    declare var r: number | "hello"
    switch (r) {
        case q: break
        case 42: break
        case true: break // Error
             ~~~~
!!! error TS2678: Type 'true' is not comparable to type 'number | "hello"'.
        case "hello": break
        case "world": break // Error
             ~~~~~~~
!!! error TS2678: Type '"world"' is not comparable to type 'number | "hello"'.
    }
```

----------------------------------------

TITLE: Initialized Export Declarations in TypeScript
DESCRIPTION: Examples of properly initialized exported variables with type annotations and class instances. Shows various patterns of variable declaration with immediate initialization.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNonInitializedVariablesAMD.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
export var a1 = 1;
export let b1 = 1;
export var c1: string = 'a';
export let d1: number = 1;
class D {}
export var e1 = new D;
export let f1 = new D;
export var g1: D = new D;
export let h1: D = new D;
```

----------------------------------------

TITLE: Robot Object Array Initialization in TypeScript
DESCRIPTION: Defines and initializes an array of Robot objects with name and skill properties. Each robot has a name string and an associated skill string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var robots = [{ name: "mower", skill: "mowing" }, { name: "trimmer", skill: "trimming" }];
```

----------------------------------------

TITLE: Defining global scope code in TypeScript
DESCRIPTION: This TypeScript code defines a global scope with a variable 'a1', a class 'c1' with a public property 'p1', an instance of the class 'instance1', and a function 'f1' that returns the instance. It also includes a reference to 'ref/m1.ts' which imports code from that module. This snippet serves as an entry point or main application file that uses code from other modules or files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcerootUrlSubfolderSpecifyOutputFile/node/sourcerootUrlSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    /// <reference path='ref/m1.ts'/>
    var a1 = 10;
    class c1 {
        public p1: number;
    }
    
    var instance1 = new c1();
    function f1() {
        return instance1;
    }
```

----------------------------------------

TITLE: Comparing Intersection Types with Extended Interfaces in TypeScript
DESCRIPTION: Demonstrates type checking behavior when comparing variables of intersection type (I1 & I3) with an extended interface type (I2). Shows how TypeScript prevents comparisons between types that have no overlap, even when the runtime values might be compatible.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/equalityWithIntersectionTypes01.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I1 {
    p1: number
}

interface I2 extends I1 {
    p2: number;
}

interface I3 {
    p3: number;
}

var x = { p1: 10, p2: 20, p3: 30 };
var y: I1 & I3 = x;
var z: I2 = x;

if (y === z || z === y) {
}
else if (y !== z || z !== y) {
}
else if (y == z || z == y) {
}
else if (y != z || z != y) {
}
```

----------------------------------------

TITLE: Basic Exports with Object Syntax in CommonJS
DESCRIPTION: This snippet demonstrates the use of CommonJS style to export an object with a default property, which does not throw errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/modulePreserve4.errors.txt#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
// g.js
exports.default = 0;
```

----------------------------------------

TITLE: Defining Generic Interfaces with Default Type Parameters in TypeScript
DESCRIPTION: This snippet shows the definition of generic interfaces with default type parameters. It includes examples of interfaces with single and multiple type parameters, as well as interfaces with type parameter constraints.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericDefaults.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
interface i00<T = number> { a: T; }
interface i01<T, U = T> { a: [T, U]; }
interface i02<T extends number, U = T> { a: [T, U]; }
interface i03<T extends number, U extends T = T> { a: [T, U]; }
```

----------------------------------------

TITLE: Correct TypeScript Module Imports
DESCRIPTION: Example of correct type imports using 'import type' syntax
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedModulesShadowGlobalTypeNotValue(isolatedmodules=true,verbatimmodulesyntax=true).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import type { Date, Event } from './types';
import { Console } from 'node:console';
function foo(a: Date) {
    const b = new Date(a.year, a.month, a.day);
    return b.getTime();
}
function bar() {
    return new Event('bar') as Event.T;
}
const baz: Console = new Console();
```

----------------------------------------

TITLE: TypeScript Generic Function Type with Type Argument Validation
DESCRIPTION: Illustrates a generic function type signature with incorrect type argument usage.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callGenericFunctionWithIncorrectNumberOfTypeArguments.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var f3: { <T, U>(x: T, y: U): T; }
var r3 = f3<number>(1, '');
var r3b = f3<number, string, number>(1, '');
```

----------------------------------------

TITLE: Optional Chaining with Nested Properties in For-In Loops in TypeScript
DESCRIPTION: A function that iterates over object properties using a for-in loop with optional chaining. The function safely traverses a recursively defined structure, checking for a cyclic reference condition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowOptionalChain.errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
type Test5 = {
  main?: {
    childs: Record<string, Test5>;
  };
};

function f50(obj: Test5) {
   for (const key in obj.main?.childs) {
      if (obj.main.childs[key] === obj) {
        return obj;
      }
   }
   return null;
}
```

----------------------------------------

TITLE: Conditional Type for String Splitting with Template Literals in TypeScript
DESCRIPTION: Types that extract parts of a string separated by a dot. These utility types demonstrate different ways to capture and transform substrings in template literals.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes3.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
type A<T> = T extends `${infer U}.${infer V}` ? U | V : never
type B = A<`test.1024`>;  // "test" | "1024"
type C = A<`test.${number}`>;  // "test" | `${number}`

type D<T> = T extends `${infer U}.${number}` ? U : never
type E = D<`test.1024`>;  // "test"
type F = D<`test.${number}`>;  // "test"

type G<T> = T extends `${infer U}.${infer V}` ? U | V : never
type H = G<`test.hoge`>;  // "test" | "hoge"
type I = G<`test.${string}`>;  // string ("test" | string reduces to string)

type J<T> = T extends `${infer U}.${string}` ? U : never
type K = J<`test.hoge`>;  // "test"
type L = J<`test.${string}`>;  // "test""
```

----------------------------------------

TITLE: CommonJS Format Module Export
DESCRIPTION: Simple CommonJS module exporting a constant value. Shows basic module export syntax in TypeScript with CommonJS format.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node18).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// cjs format file
const x = 1;
export {x};
```

----------------------------------------

TITLE: Importing and Using a Function with Typedefs in JavaScript
DESCRIPTION: This snippet demonstrates the import and usage of a function from another JavaScript file that relies on TypeScript typedefs. The imported function 'f' is called with an object having an 'x' property set to a number, showcasing how JavaScript functions can utilize TypeScript-type annotations for better type safety, despite JavaScript's dynamic nature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocPropertyTagInvalid.errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { f } from \"./a.js\"\nf({ x: 42 })
```

----------------------------------------

TITLE: Generic Type Error: Three<T, U, V>
DESCRIPTION: This code snippet involves the definition of a generic class 'Three<T, U, V>' and various functions that fail due to inadequate type arguments. The errors depict how TypeScript checks for compliance with generic type requirements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/returnTypeTypeArguments.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
class Three<T, U, V>{
    value: T;
    id: U;
    name: V;
}

function A3(): Three { return null; }
                   ~~~~~
!!! error TS2314: Generic type 'Three<T, U, V>' requires 3 type argument(s).

function B2(): Three<string> { return null; }
                   ~~~~~~~~~~~~~
!!! error TS2314: Generic type 'Three<T, U, V>' requires 3 type argument(s).
```

----------------------------------------

TITLE: TypeScript Error: Export Assignment with ECMAScript Modules
DESCRIPTION: This snippet shows the error generated when using `export =` in a TypeScript file targeting ECMAScript modules. The error message suggests using `export default` or another module format instead to be compatible with ECMAScript modules. This pattern is found in `d.ts`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports(isolatedmodules=false).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
"d.ts(1,1): error TS1203: Export assignment cannot be used when targeting ECMAScript modules. Consider using 'export default' or another module format instead."
```

----------------------------------------

TITLE: Exporting Class Definition in TypeScript
DESCRIPTION: Defines and exports a class named 'A' that can be imported by other files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDeclaration_moduleSpecifier.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export class A {}
```

----------------------------------------

TITLE: Array Destructuring and Looping in JavaScript
DESCRIPTION: This snippet demonstrates array destructuring with default values, followed by a for loop. It extracts 'numberB' from 'robotA' array with a default value of -1.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_17

LANGUAGE: JavaScript
CODE:
```
for (var _v = robotA[0], numberB = _v === void 0 ? -1 : _v, i = 0; i < 1; i++) {
}
```

----------------------------------------

TITLE: TypeScript Declaration File Imports
DESCRIPTION: Import statements in a declaration file showing type imports and regular imports
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerImportTsExtensions(allowimportingtsextensions=false,noemit=false).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import {} from "./a.ts";
import {} from "./a.d.ts";
import type {} from "./a.d.ts";
```

----------------------------------------

TITLE: ES2017 Object Methods
DESCRIPTION: Demonstrates Object.values() and Object.entries() methods introduced in ES2017. Requires 'lib' compiler option to be set to 'es2017' or later.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/doYouNeedToChangeYourTargetLibraryES2016Plus.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
const testObjectConstructorValues = Object.values({});
const testObjectConstructorEntries = Object.entries({});
```

----------------------------------------

TITLE: Variable Declaration with 'const' in file1.ts
DESCRIPTION: Declaration of a constant variable 'var1' in file1.ts that conflicts with another declaration in file2.ts. This causes a TypeScript compiler error TS2451 indicating a block-scoped variable redeclaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/letDeclarations-scopes-duplicates4.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const var1 = 0;
```

----------------------------------------

TITLE: Main TypeScript Import Examples
DESCRIPTION: Demonstration of various import statements showing different file extension patterns and import configurations
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerImportTsExtensions(allowimportingtsextensions=true,noemit=false).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import {} from "./a";
import {} from "./a.js";
import {} from "./a.ts";

import {} from "./b";
import {} from "./b.js";
import {} from "./b.ts";
import {} from "./b.d.ts";
import type {} from "./b.d.ts";

import {} from "./c.ts";
import {} from "./c.tsx";

import {} from "./d";
import {} from "./d/index";
import {} from "./d/index.ts";

// These should not resolve, but preventing them has
// relatively little utility compared to the cost of
// the filesystem hits.
import {} from "./e";
import {} from "./e.txt";
```

----------------------------------------

TITLE: Defining Interfaces with Incorrect Property Optionality in TypeScript
DESCRIPTION: This snippet defines interfaces with inheritance, where derived interfaces incorrectly make required properties optional. This leads to TypeScript compilation errors due to incorrect interface extension.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithObjectMembersOptionality2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Base { foo: string; }
interface Derived extends Base { bar: string; }

interface T {
    Foo: Base;
}

interface S extends T {
    Foo?: Derived // error
}

interface T2 {
    1: Base;
}

interface S2 extends T2 {
    1?: Derived; // error
}

interface T3 {
    '1': Base;
}

interface S3 extends T3 {
    '1'?: Derived; // error
}
```

----------------------------------------

TITLE: Implementing Function with Reference Import
DESCRIPTION: TypeScript code importing and using mkdirSync function from an external module, demonstrating correct usage pattern.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/voidAsNonAmbiguousReturnType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
///<reference path='voidAsNonAmbiguousReturnType_0.ts'/>
import fs = require("./voidAsNonAmbiguousReturnType_0");

function main() {
 fs.mkdirSync('test'); // should not error - return types are the same
}
```

----------------------------------------

TITLE: Module D with Circular Import Error
DESCRIPTION: Creates circular dependency by importing moduleC, resulting in TS2303 error
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveExportAssignmentAndFindAliasedType5.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import self = require("recursiveExportAssignmentAndFindAliasedType5_moduleC");
export = self;
```

----------------------------------------

TITLE: Exporting Module in TypeScript
DESCRIPTION: This snippet demonstrates how to re-export a module in TypeScript using the 'export' statement.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/duplicatePackage_withErrors.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export { x } from "x";
```

----------------------------------------

TITLE: Type Assignment with Incompatible Boolean Value in Interface
DESCRIPTION: This snippet replicates a similar error as the previous one, but uses interfaces to define the types.  Assigning `false` to the `overrides` property, which is expected to be of type `OverridesInput`, results in a type incompatibility error because `false` does not conform to the structure defined in `OverridesInput`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nestedExcessPropertyChecking.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
    interface Unrelated { _?: any }
    
    interface VariablesA { overrides?: OverridesInput; }
    interface VariablesB { overrides?: OverridesInput; }
    
    const foo2: Unrelated & { variables: VariablesA & VariablesB } = {
        variables: {
            overrides: false  // Error
            ~~~~~~~~~
        }
    };

```

----------------------------------------

TITLE: TypeScript Return Value Tests
DESCRIPTION: Additional function examples showing various return scenarios including undefined, any casting, and conditional returns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitReturnsExclusions.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function f10(b: boolean) {
    if (b) return;
}

function f11(b: boolean) {
    if (b) return undefined;
}

function f12(b: boolean) {
    if (b) return undefined as any;
}

function f13(b: boolean) {
    if (b) return undefined as unknown;
}

function f14(b: boolean) {
    if (b) return 42;
}

function f15(b: boolean) {
    if (b) return 42;
    if (b) return undefined;
}

function f16(b: boolean) {
    if (b) return 42;
    if (b) return;
}
```

----------------------------------------

TITLE: Interface Type Assignment Error in TypeScript
DESCRIPTION: Shows type errors when attempting to assign interface B to interface A where property 'x' is missing, and trying to use interface B as an index type. Demonstrates TypeScript's type checking for interface compatibility and valid index types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/duplicateErrorAssignability.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface A {
    x: number;
}
interface B {
    y: string;
}

declare let b: B;
declare let a: A;
const x = a = b;
let obj: { 3: string } = { 3: "three" };
obj[x];
```

----------------------------------------

TITLE: Declare Decorated Accessor Property (TypeScript)
DESCRIPTION: Declares an accessor property named `z` within class `C` with the type `number`. Accessor properties combine a getter and setter. This accessor was decorated in the original source file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-sourceMap(target=es2022).sourcemap.txt#_snippet_51

LANGUAGE: TypeScript
CODE:
```
accessor z: number;
```

----------------------------------------

TITLE: Testing Logical AND Operator with Various Types in TypeScript
DESCRIPTION: This TypeScript code demonstrates how the logical AND (&&) operator behaves with different variable types including any, boolean, number, string, void, enum, object, and arrays. The compiler errors highlight cases where void, null, or undefined types cannot be properly evaluated for truthiness.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAndOperatorWithEveryType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// The && operator permits the operands to be of any type and produces a result of the same
// type as the second operand.

enum E { a, b, c }

var a1: any;
var a2: boolean;
var a3: number
var a4: string;
var a5: void;
var a6: E;
var a7: {};
var a8: string[];

var ra1 = a1 && a1;
var ra2 = a2 && a1;
var ra3 = a3 && a1;
var ra4 = a4 && a1;
var ra5 = a5 && a1;
var ra6 = a6 && a1;
var ra7 = a7 && a1;
var ra8 = a8 && a1;
var ra9 = null && a1;
var ra10 = undefined && a1;

var rb1 = a1 && a2;
var rb2 = a2 && a2;
var rb3 = a3 && a2;
var rb4 = a4 && a2;
var rb5 = a5 && a2;
var rb6 = a6 && a2;
var rb7 = a7 && a2;
var rb8 = a8 && a2;
var rb9 = null && a2;
var rb10 = undefined && a2;

var rc1 = a1 && a3;
var rc2 = a2 && a3;
var rc3 = a3 && a3;
var rc4 = a4 && a3;
var rc5 = a5 && a3;
var rc6 = a6 && a3;
var rc7 = a7 && a3;
var rc8 = a8 && a3;
var rc9 = null && a3;
var rc10 = undefined && a3;

var rd1 = a1 && a4;
var rd2 = a2 && a4;
var rd3 = a3 && a4;
var rd4 = a4 && a4;
var rd5 = a5 && a4;
var rd6 = a6 && a4;
var rd7 = a7 && a4;
var rd8 = a8 && a4;
var rd9 = null && a4;
var rd10 = undefined && a4;

var re1 = a1 && a5;
var re2 = a2 && a5;
var re3 = a3 && a5;
var re4 = a4 && a5;
var re5 = a5 && a5;
var re6 = a6 && a5;
var re7 = a7 && a5;
var re8 = a8 && a5;
var re9 = null && a5;
var re10 = undefined && a5;

var rf1 = a1 && a6;
var rf2 = a2 && a6;
var rf3 = a3 && a6;
var rf4 = a4 && a6;
var rf5 = a5 && a6;
var rf6 = a6 && a6;
var rf7 = a7 && a6;
var rf8 = a8 && a6;
var rf9 = null && a6;
var rf10 = undefined && a6;

var rg1 = a1 && a7;
var rg2 = a2 && a7;
var rg3 = a3 && a7;
var rg4 = a4 && a7;
var rg5 = a5 && a7;
var rg6 = a6 && a7;
var rg7 = a7 && a7;
var rg8 = a8 && a7;
var rg9 = null && a7;
var rg10 = undefined && a7;

var rh1 = a1 && a8;
var rh2 = a2 && a8;
var rh3 = a3 && a8;
var rh4 = a4 && a8;
var rh5 = a5 && a8;
var rh6 = a6 && a8;
var rh7 = a7 && a8;
var rh8 = a8 && a8;
var rh9 = null && a8;
var rh10 = undefined && a8;

var ri1 = a1 && null;
var ri2 = a2 && null;
var ri3 = a3 && null;
var ri4 = a4 && null;
var ri5 = a5 && null;
var ri6 = a6 && null;
var ri7 = a7 && null;
var ri8 = a8 && null;
var ri9 = null && null;
var ri10 = undefined && null;

var rj1 = a1 && undefined;
var rj2 = a2 && undefined;
var rj3 = a3 && undefined;
var rj4 = a4 && undefined;
var rj5 = a5 && undefined;
var rj6 = a6 && undefined;
var rj7 = a7 && undefined;
var rj8 = a8 && undefined;
var rj9 = null && undefined;
var rj10 = undefined && undefined;
```

----------------------------------------

TITLE: Module Import Usage (2.ts)
DESCRIPTION: Imports and uses the namespace from the previous module through a qualified import.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace3(module=esnext).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import * as foo from './1'

foo.ns.a;
foo.ns.b;
```

----------------------------------------

TITLE: TypeScript Function with Interface Parameter
DESCRIPTION: Declares a function `foo` that accepts an object of type `I<T, U>` as a parameter and returns an object with properties `t` and `u` of types `T` and `U`, respectively.  This function demonstrates the usage of the defined interface.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/symbolProperty21.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
declare function foo<T, U>(p: I<T, U>): { t: T; u: U };
```

----------------------------------------

TITLE: Basic Type Narrowing with String/Number Union
DESCRIPTION: Demonstrates type narrowing using an aliased conditional that checks for string type using typeof.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowAliasing.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f10(x: string | number) {
    const isString = typeof x === "string";
    if (isString) {
        let t: string = x;
    }
    else {
        let t: number = x;
    }
}
```

----------------------------------------

TITLE: Function Definitions with Optional Properties - TypeScript
DESCRIPTION: This snippet defines multiple functions illustrating common TypeScript errors when optional properties are involved, specifically with undefined assignments. Each function manipulates an object with optional properties and demonstrates the TypeScript errors related to 'undefined' types when 'exactOptionalPropertyTypes' is enabled.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictOptionalProperties1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function f1(obj: { a?: string, b?: string | undefined }) {
        let a = obj.a;  // string | undefined
        let b = obj.b;  // string | undefined
        obj.a = 'hello';
        obj.b = 'hello';
        obj.a = undefined;  // Error
        ~~~~~
!!! error TS2412: Type 'undefined' is not assignable to type 'string' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.
        obj.b = undefined;
    }
    
    function f2(obj: { a?: string, b?: string | undefined }) {
        obj = obj;
        obj.a = obj.a;  // Error
        ~~~~~
!!! error TS2412: Type 'string | undefined' is not assignable to type 'string' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.
!!! error TS2412:   Type 'undefined' is not assignable to type 'string'.
        obj.b = obj.b;
        if ('a' in obj) {
            obj.a;
            obj.a = obj.a;
        }
        else {
            obj.a;
            obj.a = obj.a;  // Error
            ~~~~~
!!! error TS2412: Type 'undefined' is not assignable to type 'string' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.
        }
        if (obj.hasOwnProperty('a')) {
            obj.a;
            obj.a = obj.a;
        }
        else {
            obj.a;
            obj.a = obj.a;  // Error
            ~~~~~
!!! error TS2412: Type 'undefined' is not assignable to type 'string' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.
        }
        if ('b' in obj) {
            obj.b;
            obj.b = obj.b;
        }
        else {
            obj.b;
            obj.b = obj.b;
        }
        if (obj.hasOwnProperty('b')) {
            obj.b;
            obj.b = obj.b;
        }
        else {
            obj.b;
            obj.b = obj.b;
        }
    }
    
    function f3(obj: Partial<{ a: string, b: string | undefined }>) {
        let a = obj.a;  // string | undefined
        let b = obj.b;  // string | undefined
        obj.a = 'hello';
        obj.b = 'hello';
        obj.a = undefined;  // Error
        ~~~~~
!!! error TS2412: Type 'undefined' is not assignable to type 'string' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.
        obj.b = undefined;
    }
```

----------------------------------------

TITLE: Import and Usage of Exported Types
DESCRIPTION: Shows incorrect and correct usage of imported types and classes, demonstrating type-only export restrictions
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace8.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { A, B, C } from "./c";
let _: A = new A();   // Error
let __: B = new B();  // Ok
let ___: C = new C(); // Ok
```

----------------------------------------

TITLE: Asynchronous Handling of EffectResult Type in TypeScript
DESCRIPTION: This snippet defines a type 'EffectResult' that can either be a function returning 'EffectResult' or a Promise of 'EffectResult'. It then implements an async function 'handleEffectResult' which handles the execution of such functions or promises recursively. The code shows the type referencing error that can occur when the promise's fulfillment callback refers back to 'EffectResult'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unresolvableSelfReferencingAwaitedUnion.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// repro #42948

type EffectResult =
  | (() => EffectResult)
  | Promise<EffectResult>;

export async function handleEffectResult(result: EffectResult) {
  if (result instanceof Function) {
    await handleEffectResult(result());
  } else if (result instanceof Promise) {
    await handleEffectResult(await result);
                                 ~~~~~~~~~~~~
!!! error TS1062: Type is referenced directly or indirectly in the fulfillment callback of its own 'then' method.
  }
}
```

----------------------------------------

TITLE: Class Definition and Decoration in TypeScript
DESCRIPTION: This snippet defines classes, including inheritance and use of decorators, without relying on 'tslib' helpers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importHelpersNoHelpers.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
class A { }
class B extends A { }

declare var dec: any;

@dec
class C {
    method(@dec x: number) {
    }
}
```

----------------------------------------

TITLE: React Component Props with Boolean Literal Discrimination
DESCRIPTION: Shows how to define React component props using discriminated unions with boolean literals. Includes examples of correct prop passing and type assertions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/booleanLiteralsContextuallyTypedFromUnion.errors.txt#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
type ComponentProps =
    | {
        optionalBool: true;
        mandatoryFn: () => void;
    }
    | {
        optionalBool: false;
    };

let Funk = (_props: ComponentProps) => <div>Hello</div>;

let Fail1 = () => <Funk mandatoryFn={() => { }} optionalBool={true} />
let Fail2 = () => <Funk mandatoryFn={() => { }} optionalBool={true as true} />
let True = true as true;
let Fail3 = () => <Funk mandatoryFn={() => { }} optionalBool={True} />
let attrs2 = { optionalBool: true as true, mandatoryFn: () => { } }
let Success = () => <Funk {...attrs2} />
```

----------------------------------------

TITLE: Using Logical Assignment Operators with Arrays in TypeScript
DESCRIPTION: This code demonstrates three functions using different logical assignment operators (||=, ??=, &&=) to handle potentially undefined arrays. The first two functions work correctly, while the third function has type errors because the &&= operator doesn't guarantee a non-undefined result, leading to potential runtime errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment6(target=esnext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo1(results: number[] | undefined, results1: number[] | undefined) {
    (results ||= (results1 ||= [])).push(100);
}

function foo2(results: number[] | undefined, results1: number[] | undefined) {
    (results ??= (results1 ??= [])).push(100);
}

function foo3(results: number[] | undefined, results1: number[] | undefined) {
    (results &&= (results1 &&= [])).push(100);
}
```

----------------------------------------

TITLE: Array Destructuring with Default Values in TypeScript
DESCRIPTION: Demonstrates array destructuring with default values in a for loop. It extracts the second element of robotA, assigning it to nameA with a default value of "name".
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
for (let [, nameA = "name"] = robotA, i = 0; i < 1; i++) {
    // Loop body
}
```

----------------------------------------

TITLE: Generic Class Definition in TypeScript Module
DESCRIPTION: The 'tumidifrons' class is defined in the 'trivirgatus' module with two type parameters. It follows the same pattern for method implementations, where each method declares a variable of a specific return type, creates a closure, and returns the variable.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
export class tumidifrons<T0, T1> {
  nivalis() : dogramacii.kaiseri { var x : dogramacii.kaiseri; () => { var y = this; }; return x; }
  vestitus() : lavali.xanthognathus { var x : lavali.xanthognathus; () => { var y = this; }; return x; }
  aequatorius() : rionegrensis.caniventer { var x : rionegrensis.caniventer; () => { var y = this; }; return x; }
  scherman() : oconnelli { var x : oconnelli; () => { var y = this; }; return x; }
  improvisum() : argurus.peninsulae { var x : argurus.peninsulae; () => { var y = this; }; return x; }
  cervinipes() : panglima.abidi<lavali.lepturus, caurinus.psilurus> { var x : panglima.abidi<lavali.lepturus, caurinus.psilurus>; () => { var y = this; }; return x; }
  audax() : dogramacii.robustulus { var x : dogramacii.robustulus; () => { var y = this; }; return x; }
  vallinus() : sagitta.sicarius<lavali.wilsoni, lutreolus.punicus> { var x : sagitta.sicarius<lavali.wilsoni, lutreolus.punicus>; () => { var y = this; }; return x; }
}
```

----------------------------------------

TITLE: ES Module Export Example
DESCRIPTION: Basic ES module exporting a single constant variable. Shows standard ESM module format with modern export syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
// esm format file
const x = 1;
export {x};
```

----------------------------------------

TITLE: Dynamic Importing with TypeScript
DESCRIPTION: This snippet demonstrates a dynamic import in TypeScript that generates an error due to missing file extensions. It serves as a warning for developers to include explicit extensions in import paths, especially under specific module resolution settings.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionWithoutExtension8.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// Extensionless relative path dynamic import in a cjs module
    import("./foo").then(x => x); // should error, ask for extension
```

----------------------------------------

TITLE: Valid Getter/Setter Pair Object Literal Example
DESCRIPTION: Object literal showing valid implementation of getter and setter accessors for property 'x'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/twoAccessorsWithSameName.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
var y = {
    get x() {
        return 1;
    },
    set x(v) { }
}
```

----------------------------------------

TITLE: JavaScript Class C Constructor Implementation
DESCRIPTION: Provides the JavaScript implementation for the C class constructor. It initializes the 'a' and 'b' properties of new C instances.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/targetTypeTest1.errors.txt#_snippet_7

LANGUAGE: JavaScript
CODE:
```
function C(a,b) {
	this.a=a;
	this.b=b;
}
```

----------------------------------------

TITLE: Package.json Configuration for TypeScript Types
DESCRIPTION: A package.json file for the phaser library that specifies the path to its TypeScript definition file using the 'types' field.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeReferenceDirectiveWithFailedFromTypeRoot.errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{ "name": "phaser", "version": "1.2.3", "types": "types/phaser.d.ts" }
```

----------------------------------------

TITLE: Defining Conflicting Interfaces in TypeScript
DESCRIPTION: This snippet defines three interfaces (I1, I2, and I3) where I3 attempts to extend both I1 and I2. However, TypeScript throws an error because the '[Symbol.toStringTag]' property in I1 and I2 has conflicting types. This highlights TypeScript's type safety and the importance of consistent property types in interface inheritance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/symbolProperty35.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface I1 {
    [Symbol.toStringTag](): { x: string }
}
interface I2 {
    [Symbol.toStringTag](): { x: number }
}

interface I3 extends I1, I2 { }
              ~~
```

----------------------------------------

TITLE: Using a Module in TypeScript
DESCRIPTION: The 'index.ts' file imports all exported members of the 'pkg' module and invokes the 'thing' function. The correct TypeScript configuration ensures this import is recognized.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionWithModule(module=commonjs,moduleresolution=nodenext).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import * as p from "pkg";
p.thing();
```

----------------------------------------

TITLE: Interface Method Definition and Usage in TypeScript
DESCRIPTION: Defines an interface 'I' with a method 'foo' returning void, implements the interface with an object, and calls the method. Demonstrates interface method declaration and implementation pattern.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callHierarchyInterfaceMethod.callHierarchy.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I {
    foo(): void;
}

const obj: I = { foo() {} };

obj.foo();
```

----------------------------------------

TITLE: Type Export Example
DESCRIPTION: TypeScript file showing type-only export syntax using 'export type'
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/verbatimModuleSyntaxRestrictionsESM(esmoduleinterop=false).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
interface Typey {}
export type { Typey };
```

----------------------------------------

TITLE: Module Import and Function Call
DESCRIPTION: JavaScript file importing a module and attempting to call its functions without required arguments
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleExportWithExportPropertyAssignment.errors.txt#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
/// <reference path='./requires.d.ts' />
var mod1 = require('./mod1')
mod1()
mod1.f() // error, not enough arguments
```

----------------------------------------

TITLE: Generic Function with Type Safety for Property Assignment in TypeScript
DESCRIPTION: A function that demonstrates TypeScript's type checking when attempting to assign values to generic object properties. The errors show that TypeScript prevents assigning arbitrary types to generic indexed properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccessErrors.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
function test1<T extends Record<string, any>, K extends keyof T>(t: T, k: K) {
    t[k] = 42;  // Error
    t[k] = "hello";  // Error
    t[k] = [10, 20];  // Error
}
```

----------------------------------------

TITLE: Incorrect Default Import in TypeScript
DESCRIPTION: This snippet demonstrates an incorrect attempt to import a default export from a module that doesn't have one, resulting in a TypeScript compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ImportDefaultBindingNoDefaultProperty.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import defaultBinding from "./es6ImportDefaultBindingNoDefaultProperty_0";
```

----------------------------------------

TITLE: Defining Interface and Async Function with Type Errors in TypeScript
DESCRIPTION: This code defines an interface 'Foo' with nested properties and an async function that returns an object that should match the Foo interface. It contains two errors: missing Promise constructor in ES5 and assigning a number value to a property that expects a string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncFunctionReturnExpressionErrorSpans.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Foo {
    bar: {
        baz: {
            inner: {
                thing: string
            }
        }
    }
}

async function asyncFoo(): Promise<Foo> {
    return {
        bar: {
            baz: {
                inner: {
                    thing: 1
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Defining Path Intersection Types with Template Literals in TypeScript
DESCRIPTION: Creates a branded Path type and a JoinedPath template literal type that represents paths joined with a slash. The code demonstrates both invalid and valid usages through the joinedPath function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralIntersection2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type Path = string & { _pathBrand: any };

type JoinedPath = `${Path}/${Path}`;

declare function joinedPath(p: JoinedPath): void;

joinedPath("foo/bar");

declare const somePath: Path;

joinedPath(`${somePath}/${somePath}`);
```

----------------------------------------

TITLE: Interface and Type Definitions with Nested Properties
DESCRIPTION: Defines TypeScript interfaces A, B, C and type D showing nested property structures and intersection types. Demonstrates basic type relationships and property requirements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/excessPropertyChecksWithNestedIntersections.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface A {
    x: string
}

interface B {
    a: A;
}

interface C {
    c: number;
}

type D = B & C;
```

----------------------------------------

TITLE: Demonstrating TypeScript Errors with 'let' and Duplicate Identifiers
DESCRIPTION: This code snippet shows TypeScript compiler errors for using 'let' as a variable name and declaring duplicate identifiers. It illustrates how TypeScript catches potential issues in variable declarations and usage.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/letAsIdentifier.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var let = 10;
var a = 10;
let = 30;
let
a;
```

----------------------------------------

TITLE: Object Destructuring in For-of Loop with JavaScript Mapping
DESCRIPTION: This snippet shows how TypeScript transforms object destructuring in a for-of loop into JavaScript with variable assignments. It includes source map details showing the correlation between original TypeScript code and generated JavaScript code with line-by-line mapping information.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_14

LANGUAGE: javascript
CODE:
```
var _m = _l[_k].skills, primaryA = _m.primary, secondaryA = _m.secondary;
console.log(primaryA);
```

LANGUAGE: javascript
CODE:
```
for (var _o = 0, robots_2 = robots; _o < robots_2.length; _o++) {
    var _p = robots_2[_o], nameA = _p.name, skillA = _p.skill;
    console.log(nameA);
```

----------------------------------------

TITLE: Importing and Invoking a Module Function in TypeScript
DESCRIPTION: This snippet demonstrates how to import the 'thing' function from the 'pkg' module and invoke it in the 'index.ts' file. This is a common pattern in TypeScript to utilize external modules and their functionalities in an application. Ensuring that the module is correctly configured and resolved is crucial for this to work without errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionWithModule(module=commonjs,moduleresolution=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
import * as p from "pkg";
    p.thing();
```

----------------------------------------

TITLE: Implementing Generic Interface with Mismatched Method Types (String/Number vs T)
DESCRIPTION: This snippet shows a TypeScript error (TS2416) when class C<T> implements IFoo<T>. The 'foo' method in C<T> uses concrete types (string for parameter, number for return) which are not assignable to the generic type T expected by the interface's method signature (T for parameter, T for return). This highlights the incompatibility between the specific types used and the generic type parameter.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implementGenericWithMismatchedTypes.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface IFoo<T> {
    foo(x: T): T;
}
class C<T> implements IFoo<T> { // error
    foo(x: string): number {
        return null;
    }
}
```

----------------------------------------

TITLE: Destructuring with Default Values - TypeScript
DESCRIPTION: This snippet shows how to assign multiple variables using nested array destructuring, providing fallback values. It initializes 'nameMC' and the skills 'primarySkillC' and 'secondarySkillC' while ensuring defaults if the values are not provided.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
var _j = ["roomba", ["vacuum", "mopping"]], _k = _j[0], nameMC2 = _k === void 0 ? "noName" : _k, _l = _j[1], _m = _l === void 0 ? ["noSkill", "noSkill"] : _l, _o = _m[0], primarySkillC = _o === void 0 ? "noSkill" : _o, _p = _m[1], secondarySkillC = _p === void 0 ? "noSkill" : _p;
```

----------------------------------------

TITLE: Declare Robot Details JavaScript Loop
DESCRIPTION: This snippet shows a loop declaration initializing a new robot object `_m` with predefined skills and names, and then extracts those into distinct variables. It runs a loop aimed at encapsulating robot details for further processing. No external dependencies noted beyond standard ES6 object handling and declaration features.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_26

LANGUAGE: JavaScript
CODE:
```
for (_m = { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }, nameA = _m.name, _o = _m.skills, primaryA = _o.primary, secondaryA = _o.secondary,

```

----------------------------------------

TITLE: Importing Entity from Module - TypeScript
DESCRIPTION: This snippet demonstrates the import of a default export entity from 'm1.ts'. It shows how to use the exported function. However, this code might fail to execute properly if there are errors in the exported module, such as those described previously due to duplicate declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/multipleDefaultExports02.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import Entity from "./m1"
    
    Entity();
```

----------------------------------------

TITLE: Destructuring Arrays with Nested Patterns in TypeScript
DESCRIPTION: This snippet shows various array destructuring patterns in TypeScript, including nested destructuring and default values. It demonstrates both valid and invalid use cases.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitDestructuringArrayPattern2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var [x10, [y10, [z10]]] = [1, ["hello", [true]]];

var [x11 = 0, y11 = ""] = [1, "hello"];
var [a11, b11, c11] = [];

var [a2, [b2, { x12, y12: c2 }]=["abc", { x12: 10, y12: false }]] = [1, ["hello", { x12: 5, y12: true }]];

var [x13, y13] = [1, "hello"];
var [a3, b3] = [[x13, y13], { x: x13, y: y13 }];
```

----------------------------------------

TITLE: Supporting Module Definition - File 3333
DESCRIPTION: Defines a simple module exporting a bar2 function that is attempted to be imported in the main file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/collisionExportsRequireAndAlias.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export function bar2() {
}
```

----------------------------------------

TITLE: Defining Foo Type with Literal Types
DESCRIPTION: This snippet defines the type `Foo` as a union of three object types, each having a `kind` and an `isA` property. The `kind` property is a string literal ('A', 'B', or 'C'), and `isA` is a boolean literal (true or false), creating a discriminated union.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
    type Foo =
        | { kind: 'A', isA: true }
        | { kind: 'B', isA: false }
        | { kind: 'C', isA: false };

```

----------------------------------------

TITLE: Package.json - CommonJS Module Definition
DESCRIPTION: This JSON snippet defines a package as a CommonJS module by setting the "type" field to "commonjs".  This restricts the use of certain modern JavaScript features, such as top-level await.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsTopLevelAwait(module=node18).errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
    {
        "type": "commonjs"
    }
```

----------------------------------------

TITLE: Configuring Package Type in package.json
DESCRIPTION: Sets the package type to 'module' in package.json, indicating that the project uses ES modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationFileForTsJsImport(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{"type": "module"}
```

----------------------------------------

TITLE: TypeScript Union and Intersection Type Examples
DESCRIPTION: Demonstrates various type assignments using object and string unions/intersections, showing both valid and invalid cases. Includes examples of type intersection constraints and property checking.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nonPrimitiveUnionIntersection.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var a: object & string = ""; // error
var b: object | string = ""; // ok
var c: object & {} = 123; // error
a = b; // error
b = a; // ok

const foo: object & {} = {bar: 'bar'}; // ok
const bar: object & {err: string} = {bar: 'bar'}; // error
```

----------------------------------------

TITLE: Class with typeof this in methods
DESCRIPTION: These snippets show using `typeof this` inside class methods to define a type alias. This is valid and showcases a straightforward application of `typeof this` within a class context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeofThis.errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
    class Tests12 {
        test1() { // OK
            type Test = typeof this;
        }
    
        test2() { // OK
            for (;;) {}
            type Test = typeof this;
        }
    
        test3() { // expected no compile errors
            for (const dummy in []) {}
            type Test = typeof this;
        }
    
        test4() { // expected no compile errors
            for (const dummy of []) {}
            type Test = typeof this;
        }
    }
```

----------------------------------------

TITLE: Implementing Recursive Conditional Type for Flattening Arrays in TypeScript
DESCRIPTION: This code defines 'Flatten<T>' and '_Flatten<T>' types to recursively flatten nested array types. It handles both mutable and readonly arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveConditionalTypes.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
type Flatten<T extends readonly unknown[]> = T extends unknown[] ? _Flatten<T>[] : readonly _Flatten<T>[];
type _Flatten<T> = T extends readonly (infer U)[] ? _Flatten<U> : T;
```

----------------------------------------

TITLE: For Loop With Array Destructuring
DESCRIPTION: Shows a for loop using array destructuring with robotA array and logging the nameA variable.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
for (nameA = robotA[1], i = 0; i < 1; i++) {
    console.log(nameA);
}
```

----------------------------------------

TITLE: ESM Module Exports
DESCRIPTION: ESM format JavaScript file with export statements that don't require tslib helpers
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportHelpersCollisions2(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// esm format file
export * from "fs";
export * as fs from "fs";
```

----------------------------------------

TITLE: Array Destructuring with Tuple Type in TypeScript
DESCRIPTION: This example shows array destructuring with a tuple type. The types of the elements in the tuple must be assignable to the corresponding variables. Also shows how to destructure a function's returned array.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringArrayBindingPatternAndAssignment1ES6.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var [b0, b1, b2] = [2, 3, 4];
var [b3, b4, b5]: [number, number, string] = [1, 2, "string"];

function foo() {
    return [1, 2, 3];
}

var [b6, b7] = foo();
var [...b8] = foo();
```

----------------------------------------

TITLE: Variable tracking in try-catch-finally with return statements
DESCRIPTION: Function demonstrating type narrowing of a nullable number variable through try-catch-finally blocks with return statements and null checks in finally block.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tryCatchFinallyControlFlow.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f1() {
    let a: number | null = null;
    try {
        a = 123;
        return a;
    }
    catch (e) {
        throw e;
    }
    finally {
        if (a != null && a.toFixed(0) == "123") { 
        }
    }
}
```

----------------------------------------

TITLE: Demonstrating Private Class Fields in TypeScript Class Expressions
DESCRIPTION: This code snippet defines an anonymous class with private fields and methods using the # syntax. It shows how private members can be accessed internally but produce errors when accessed from outside the class boundary. The class includes methods for retrieving instances and accessing private data indirectly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameMethodClassExpression.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const C = class {
    #field = this.#method();
    #method() { return 42; }
    static getInstance() { return new C(); }
    getField() { return this.#field };
}

console.log(C.getInstance().getField());
C.getInstance().#method; // Error
C.getInstance().#field; // Error
```

----------------------------------------

TITLE: Dynamic Import Examples
DESCRIPTION: Various dynamic import patterns showing different import configurations and options.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importAttributes1(module=es2015).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const a = import('./0')
const b = import('./0', { with: { type: "json" } })
const c = import('./0', { with: { type: "json", ttype: "typo" } })
const d = import('./0', { with: {} })
const dd = import('./0', {})
declare function foo(): any;
const e = import('./0', foo())
const f = import()
const g = import('./0', {}, {})
const h = import('./0', { with: { type: "json" }},)
```

----------------------------------------

TITLE: Nested Destructuring Assignment in TypeScript
DESCRIPTION: Performs a nested destructuring assignment from the result of the `getMultiRobot()` function, providing default values for the destructured properties. Note: The source text representation appears to have duplicated lines.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_100

LANGUAGE: typescript
CODE:
```
secondary = "secondary"
secondary = "secondary"
} = { primary: "none", secondary: "none" }
} = getMultiRobot(),
```

----------------------------------------

TITLE: Mapped Type Example with Property Extraction in TypeScript
DESCRIPTION: This code defines a type `Example` that extracts the `prop` property from each property of a type `T`.  `T` is constrained to have properties which are objects containing a `prop` property. It is then used with a sample type. The code demonstrates how to use mapped types with index access to extract specific properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_24

LANGUAGE: typescript
CODE:
```
    // Repros from #23592
    
    type Example<T extends { [K in keyof T]: { prop: any } }> = { [K in keyof T]: T[K]["prop"] };
    type Result = Example<{ a: { prop: string }; b: { prop: number } }>;
```

----------------------------------------

TITLE: Package Configuration for Inner Module
DESCRIPTION: This package.json file configures an 'inner' module. It defines custom module resolution rules using the 'exports' field, mapping different module paths to specific file extensions or null (to explicitly disallow imports).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExportsExclude(module=node18).errors.txt#2025-04-21_snippet_4

LANGUAGE: JSON
CODE:
```
{
    "name": "inner",
    "private": true,
    "exports": {
        "./cjs/*": "./*.cjs",
        "./cjs/exclude/*": null,
        "./mjs/*": "./*.mjs",
        "./mjs/exclude/*": null,
        "./js/*": "./*.js",
        "./js/exclude/*": null
    }
}
```

----------------------------------------

TITLE: Destructuring Multi-Robot Skills in TypeScript
DESCRIPTION: This snippet demonstrates how to destructure values from a function that retrieves multi-robot configurations, with default skill assignments in TypeScript. It evaluates the primary and secondary skills for a robot, ensuring defaults are provided when no data is specified.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_11

LANGUAGE: TypeScript
CODE:
```
for (var _k = getMultiRobot(), _l = _k[1], _m = _l === void 0 ? ["none", "none"] : _l, _o = _m[0], primarySkillA = _o === void 0 ? "primary" : _o, _p = _m[1], secondarySkillA = _p === void 0 ? "secondary" : _p, i = 0; i < 1; i++) {}
```

LANGUAGE: TypeScript
CODE:
```
for (let 
[, [
primarySkillA = "primary",
secondarySkillA = "secondary"
] = ["none", "none"]] = 
getMultiRobot
()
) {}
```

----------------------------------------

TITLE: Initializing MultiRobot Array with Nested Objects
DESCRIPTION: Defines and initializes an array of MultiRobot objects with more complex structure including nested skills object containing primary and secondary capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var multiRobots = [{ name: "mower", skills: { primary: "mowing", secondary: "none" } },
    { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }];
```

----------------------------------------

TITLE: Example Usage of extend Function in TypeScript
DESCRIPTION: This code snippet illustrates how the `extend` function is used. It creates a variable `x` by calling `extend` with two objects: one with property 'a' of type string and another with property 'b' of type number. It then accesses the properties `a` and `b` of the resulting object `x`, demonstrating the usage of the intersection type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionTypeInference.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var x = extend({ a: "hello" }, { b: 42 });
    var s = x.a;
    var n = x.b;
```

----------------------------------------

TITLE: Using instanceof for Type Guards in TypeScript
DESCRIPTION: Shows how instanceof can be used in type guards to narrow object types to specific classes, and how unreliable guards that include random conditions fail to narrow types correctly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypePredicates.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
function isDate(x: object) {
  return x instanceof Date;
}
function flakyIsDate(x: object) {
  return x instanceof Date && Math.random() > 0.5;
}

declare let maybeDate: object;
if (isDate(maybeDate)) {
  let t: Date = maybeDate;  // should ok
} else {
  let t: object = maybeDate;  // should ok
}

if (flakyIsDate(maybeDate)) {
  let t: Date = maybeDate;  // should error
} else {
  let t: object = maybeDate;  // should ok
}
```

----------------------------------------

TITLE: Extending Class without 'super' call in constructor - TypeScript
DESCRIPTION: This snippet defines a class 'C' that extends 'A'. The constructor of 'C' is missing the 'super()' call. This omission results in a TS2377 error during compilation, as derived classes must call 'super()' to properly initialize their base class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/staticPropSuper.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    class C extends A {
        public p: number = 10;
    
        constructor() {
        ~~~~~~~~~~~
!!! error TS2377: Constructors for derived classes must contain a 'super' call.
            var x = 1; // should error
        }
    }
```

----------------------------------------

TITLE: Creating Valid Object Literal for ITextWriter2 in TypeScript
DESCRIPTION: Demonstrates creating an object literal that correctly implements the ITextWriter2 interface, with both required methods properly defined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeInfer1.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
var x: ITextWriter2 = {
    Write: function (s:string):void {},
    WriteLine: function(s:string):void {}
}
```

----------------------------------------

TITLE: Type Narrowing with Reassignment in TypeScript
DESCRIPTION: This function shows how reassignment affects type narrowing. Even though 'x' is initially narrowed to string, it's reassigned to a number, changing its type in the if block.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardsInIfStatement.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function foo2(x: number | string) {
    if (typeof x === "string") {
        x = 10;
        return x; // number
    }
    else {
        return x; // number
    }
}
```

----------------------------------------

TITLE: Accessing Nested Class Methods in TypeScript
DESCRIPTION: This snippet shows how to create instances of classes from nested modules and invoke their methods. The classes represent different levels of hierarchy within the modules, demonstrating how to access methods from parent and child classes. Dependencies include proper module structure for TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeResolution.sourcemap.txt#2025-04-21_snippet_34

LANGUAGE: typescript
CODE:
```
// Type only accessible from the root
var c1: TopLevelModule1.SubModule2.SubSubModule2.ClassA; c1.AisIn1_2_2();

// Interface reference
var d1: InterfaceX; d1.XisIn1_1_1();
var d2: SubSubModule1.InterfaceX; d2.XisIn1_1_1();
```

----------------------------------------

TITLE: Validating JSX Elements with TypeScript
DESCRIPTION: This snippet exports the function isElement, which checks if a given object is a JSX.Element based on the presence of a specific property. It enhances the type safety within the application by ensuring only valid JSX elements are used.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxFactoryQualifiedName.sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
"export function isElement(el: any): el is JSX.Element {\n    return el.markAsChildOfRootElement !== undefined;\n}"
```

----------------------------------------

TITLE: Invalid Left-hand Operands in instanceof Expressions
DESCRIPTION: These snippets demonstrate errors where null and undefined are used as left-hand operands in instanceof expressions, which is not allowed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/instanceofOperator.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
null instanceof null;
undefined instanceof undefined;
```

----------------------------------------

TITLE: Async Do-While Loop with Optional String Parameter in TypeScript
DESCRIPTION: This snippet showcases an async arrow function using a do-while loop with an async function call. It demonstrates TypeScript's handling of optional string parameters and type narrowing in async contexts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowIterationErrorsAsync.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
declare function foox(x: string | undefined): Promise<string>

async () => {
  let bar: string | undefined = undefined;
  do {
    const baz = await foox(bar);
    bar = baz
  } while (bar)
}
```

----------------------------------------

TITLE: Defining a TypeScript Class in db.ts
DESCRIPTION: This snippet defines a TypeScript class named 'db' with a public method 'doSomething()'. It's exported for use in other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/decoratorMetadataWithImportDeclarationNameCollision4.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export class db {
    public doSomething() {
    }
}
```

----------------------------------------

TITLE: TypeScript Import Statements with Various Extensions
DESCRIPTION: Demonstrates different import statement patterns in TypeScript, showing valid and invalid ways of importing modules with various file extensions. Includes errors related to .ts/.tsx extensions requiring 'allowImportingTsExtensions' and declaration file import restrictions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerImportTsExtensions(allowimportingtsextensions=false,noemit=true).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import {} from "./a";
import {} from "./a.js";
import {} from "./a.ts";

import {} from "./b";
import {} from "./b.js";
import {} from "./b.ts";
import {} from "./b.d.ts";
import type {} from "./b.d.ts";

import {} from "./c.ts";
import {} from "./c.tsx";

import {} from "./d";
import {} from "./d/index";
import {} from "./d/index.ts";

// These should not resolve, but preventing them has
// relatively little utility compared to the cost of
// the filesystem hits.
import {} from "./e";
import {} from "./e.txt";
```

----------------------------------------

TITLE: TypeScript Source File with Bun API Usage
DESCRIPTION: TypeScript source file attempting to use Bun.file() API without proper type definitions installed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typingsSuggestionBun2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const file = Bun.file("/a.ts");
```

----------------------------------------

TITLE: Importing and Using 'fs' Module in TypeScript
DESCRIPTION: This snippet attempts to import the 'fs' module and use it in a file reading function. It encounters a module resolution error and a type mismatch in the readdir function callback.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/undeclaredModuleError.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import fs = require('fs');
function readdir(path: string, accept: (stat: fs.Stats, name: string) => boolean, callback: (error: Error, results: { name: string; stat: fs.Stats; }[]) => void ) {}

function join(...paths: string[]) {}

function instrumentFile(covFileDir: string, covFileName: string, originalFilePath: string) {
    fs.readFile(originalFilePath, () => {       
        readdir(covFileDir, () => {
        } , (error: Error, files: {}[]) => {
                files.forEach((file) => {
                    var fullPath = join(IDoNotExist);
                } );
            } );
    } );
}
```

----------------------------------------

TITLE: Defining Overloaded Constructor with Constraints in TypeScript
DESCRIPTION: This snippet defines an interface `fn4` with two generic constructor overloads that have type constraints. `T` extends `string` and `U` extends `number` in one overload, and `T` extends `number` and `U` extends `string` in the other. This demonstrates how to define constructors with type constraints.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadResolutionConstructors.errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
    interface fn4 {
        new<T extends string, U extends number>(n: T, m: U);
        new<T extends number, U extends string>(n: T, m: U);
    }
    var fn4: fn4;
```

----------------------------------------

TITLE: Applying Property Decorators in TypeScript
DESCRIPTION: This snippet demonstrates the application of two property decorators, 'PropertyDecorator1' and 'PropertyDecorator2', to a static property 'x1' within the 'Greeter' class. 'PropertyDecorator2' is parameterized with the value 60.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDecorators.sourcemap.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```

>>>        PropertyDecorator1,
>>>        PropertyDecorator2(60)
>>>    ], Greeter, "x1", void 0);
```

----------------------------------------

TITLE: package.json Configuration
DESCRIPTION: This snippet shows the package.json configuration for the 'package' module.  It defines the name, sets private to true, declares the module type as 'module', and specifies the exports for cjs, mjs and default js extensions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesDeclarationEmitWithPackageExports(module=nodenext).errors.txt#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
    {
        "name": "package",
        "private": true,
        "type": "module",
        "exports": {
            "./cjs": "./index.cjs",
            "./mjs": "./index.mjs",
            ".": "./index.js"
        }
    }
```

----------------------------------------

TITLE: Evaluating Mutual Subtypes of Record TypeScript
DESCRIPTION: This code snippet explores how to validate object merging in TypeScript using a function to determine whether an unknown value is a Record type. It demonstrates relationships between built-in object types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowingMutualSubtypes.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
    declare function isObject3(value: unknown): value is Record<string, any>;
    
    function gg3(x: {}) {
        if (isObject3(x)) {
            x;  // Record<string, any>
        }
        else {
            x;  // {}
        }
        x;  // {}
    }
```

----------------------------------------

TITLE: Importing and Using Module with Declaration Conflicts in TypeScript
DESCRIPTION: This code imports a module and attempts to use properties that are defined in different places. The reference to 'foo.x' causes an error because the declaration file takes precedence, while 'foo.y()' works as it's declared in the referenced declaration file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/topLevelModuleDeclarationAndFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/// <reference path="foo_1.ts"/>
import foo = require("vs/foo_0");
var z1 = foo.x + 10;   // Should error, as declaration should win
var z2 = foo.y() + 10; // Should resolve
```

----------------------------------------

TITLE: Creating Class Instances and Method References in TypeScript
DESCRIPTION: This code snippet illustrates the definition of a class with an associated constructor where different instances and methods are referenced via fully qualified class names. It highlights the scope and accessibility of class members and their methods within the TypeScript structure. Dependencies include familiarity with TypeScript's module resolution and class instantiation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeResolution.sourcemap.txt#2025-04-21_snippet_37

LANGUAGE: typescript
CODE:
```
// Should have no effect on S1.SS1.ClassA above because it is not exported
class ClassA {
    constructor() {
        function AA() {
            var a2: SubSubModule1.ClassA; a2.AisIn1_1_1();
            var a3: SubModule1.SubSubModule1.ClassA; a3.AisIn1_1_1();
            var a4: TopLevelModule1.SubModule1.SubSubModule1.ClassA; a4.AisIn1_1_1();
            // Interface reference
            var d2: SubSubModule1.InterfaceX; d2.XisIn1_1_1();
        }
    }
}
```

----------------------------------------

TITLE: Base Class Hierarchy Definition in TypeScript
DESCRIPTION: Defines a basic class hierarchy with Base, Derived, and Derived2 classes, each adding a new string property
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithObjectMembersOptionality2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base { foo: string; }
class Derived extends Base { bar: string; }
class Derived2 extends Derived { baz: string; }
```

----------------------------------------

TITLE: TypeScript For-Await Loop Type Checking Examples
DESCRIPTION: Demonstrates various type checking scenarios with for-await loops including invalid async iterables, type mismatches, and incorrect iterator usage. Shows compiler errors for attempting to use non-async-iterable objects and type mismatches between loop variables and iterated values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/types.forAwait.es2018.2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare const asyncIterable: AsyncIterable<number>;
declare const iterable: Iterable<number>;
async function f() {
    let y: number;
    let z: string;
    for await (const x of {}) {
    }
    for await (y of {}) {
    }
    for await (z of asyncIterable) {
    }
    for await (z of iterable) {
    }
    for (const x of asyncIterable) {
    }
    for (y of asyncIterable) {
    }
}
```

----------------------------------------

TITLE: Generic Interface with Prefix-Based Template Literal Types in TypeScript
DESCRIPTION: An interface definition using generic types and template literals to constrain data formats. It demonstrates creating type-safe prefixed string patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes3.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
type Prefixes = "foo" | "bar";

type AllPrefixData = "foo:baz" | "bar:baz";

type PrefixData<P extends Prefixes> = `${P}:baz`;

interface ITest<P extends Prefixes, E extends AllPrefixData = PrefixData<P>> {
    blah: string;
}
```

----------------------------------------

TITLE: Defining Interface with Public and Optional Generic Members
DESCRIPTION: Creates a generic interface with public and optional type parameters, demonstrating type flexibility in TypeScript
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability40.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };
```

----------------------------------------

TITLE: Importing ECMAScript modules in CommonJS - TypeScript
DESCRIPTION: This code snippet demonstrates multiple import statements that try to import ECMAScript modules from a CommonJS module context, leading to errors due to incompatible module formats. It suggests using dynamic imports for compatibility.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node18).errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
!!! error TS1479: The current file is a CommonJS module whose imports will produce 'require' calls; however, the referenced file is an ECMAScript module and cannot be imported with 'require'. Consider writing a dynamic 'import("./subfolder2/another/index.mjs")' call instead.
    import * as m12 from "./subfolder2/another/index.cjs";
    // The next ones should _mostly_ work - cjs format files have index resolution and extension resolution (except for those which resolve to an esm format file)
    import * as m13 from "./";
                         ~~~~
!!! error TS1479: The current file is a CommonJS module whose imports will produce 'require' calls; however, the referenced file is an ECMAScript module and cannot be imported with 'require'. Consider writing a dynamic 'import("./")' call instead.
    import * as m14 from "./index";
                         ~~~~~~~~~
!!! error TS1479: The current file is a CommonJS module whose imports will produce 'require' calls; however, the referenced file is an ECMAScript module and cannot be imported with 'require'. Consider writing a dynamic 'import("./index")' call instead.
    import * as m15 from "./subfolder";
    import * as m16 from "./subfolder/";
    import * as m17 from "./subfolder/index";
    import * as m18 from "./subfolder2";
    import * as m19 from "./subfolder2/";
    import * as m20 from "./subfolder2/index";
    import * as m21 from "./subfolder2/another";
                         ~~~~~~~~~~~~~~~~~~~~~~
!!! error TS1479: The current file is a CommonJS module whose imports will produce 'require' calls; however, the referenced file is an ECMAScript module and cannot be imported with 'require'. Consider writing a dynamic 'import("./subfolder2/another")' call instead.
    import * as m22 from "./subfolder2/another/";
                         ~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS1479: The current file is a CommonJS module whose imports will produce 'require' calls; however, the referenced file is an ECMAScript module and cannot be imported with 'require'. Consider writing a dynamic 'import("./subfolder2/another/")' call instead.
    import * as m23 from "./subfolder2/another/index";
                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```

LANGUAGE: typescript
CODE:
```
void m1;
    void m2;
    void m3;
    void m4;
    void m5;
    void m6;
    void m7;
    void m8;
    void m9;
    void m10;
    void m11;
    void m12;
    void m13;
    void m14;
    void m15;
    void m16;
    void m17;
    void m18;
    void m19;
    void m20;
    void m21;
    void m22;
    void m23;
    
    // These should _mostly_ work - `import = require` always desugars to require calls, which do have extension and index resolution (but can't load anything that resolves to esm!)
    import m24 = require("./");
                         ~~~~
!!! error TS1471: Module './' cannot be imported using this construct. The specifier only resolves to an ES module, which cannot be imported with 'require'. Use an ECMAScript import instead.
    import m25 = require("./index");
                         ~~~~~~~~~
!!! error TS1471: Module './index' cannot be imported using this construct. The specifier only resolves to an ES module, which cannot be imported with 'require'. Use an ECMAScript import instead.
    import m26 = require("./subfolder");
    import m27 = require("./subfolder/");
    import m28 = require("./subfolder/index");
    import m29 = require("./subfolder2");
    import m30 = require("./subfolder2/");
    import m31 = require("./subfolder2/index");
    import m32 = require("./subfolder2/another");
                         ~~~~~~~~~~~~~~~~~~~~~~
!!! error TS1471: Module './subfolder2/another' cannot be imported using this construct. The specifier only resolves to an ES module, which cannot be imported with 'require'. Use an ECMAScript import instead.
    import m33 = require("./subfolder2/another/");
                         ~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS1471: Module './subfolder2/another/' cannot be imported using this construct. The specifier only resolves to an ES module, which cannot be imported with 'require'. Use an ECMAScript import instead.
    import m34 = require("./subfolder2/another/index");
                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS1471: Module './subfolder2/another/index' cannot be imported using this construct. The specifier only resolves to an ES module, which cannot be imported with 'require'. Use an ECMAScript import instead.
```

LANGUAGE: typescript
CODE:
```
void m24;
    void m25;
    void m26;
    void m27;
    void m28;
    void m29;
    void m30;
    void m31;
    void m32;
    void m33;
    void m34;
    
    // These shouldn't work - dynamic `import()` always uses the esm resolver, which does not have extension resolution
    const _m35 = import("./");
                        ~~~~
!!! error TS2307: Cannot find module './' or its corresponding type declarations.
    const _m36 = import("./index");
                        ~~~~~~~~~
!!! error TS2835: Relative import paths need explicit file extensions in ECMAScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Did you mean './index.mjs'?
    const _m37 = import("./subfolder");
                        ~~~~~~~~~~~~~
!!! error TS2834: Relative import paths need explicit file extensions in ECMAScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Consider adding an extension to the import path.
    const _m38 = import("./subfolder/");
                        ~~~~~~~~~~~~~~
!!! error TS2834: Relative import paths need explicit file extensions in ECMAScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Consider adding an extension to the import path.
    const _m39 = import("./subfolder/index");
                        ~~~~~~~~~~~~~~~~~~~
!!! error TS2835: Relative import paths need explicit file extensions in ECMAScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Did you mean './subfolder/index.mjs'?
    const _m40 = import("./subfolder2");
                        ~~~~~~~~~~~~~~
!!! error TS2834: Relative import paths need explicit file extensions in ECMAScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Consider adding an extension to the import path.
    const _m41 = import("./subfolder2/");
                        ~~~~~~~~~~~~~~~
!!! error TS2834: Relative import paths need explicit file extensions in ECMAScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Consider adding an extension to the import path.
    const _m42 = import("./subfolder2/index");
                        ~~~~~~~~~~~~~~~~~~~~
!!! error TS2835: Relative import paths need explicit file extensions in ECMAScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Did you mean './subfolder2/index.mjs'?
    const _m43 = import("./subfolder2/another");
                        ~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2834: Relative import paths need explicit file extensions in ECMAScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Consider adding an extension to the import path.
    const _m44 = import("./subfolder2/another/");
                        ~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2834: Relative import paths need explicit file extensions in ECMAScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Consider adding an extension to the import path.
    const _m45 = import("./subfolder2/another/index");
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```

----------------------------------------

TITLE: Incorrect Usage of JavaScript Private Fields with TypeScript Type Checking
DESCRIPTION: This code demonstrates several errors in using JavaScript private fields that TypeScript detects: attempting to define private fields outside class bodies, accessing undefined private fields, and accessing private fields on class constructors. Each line generates specific TypeScript errors as shown in the comments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameJsBadAssignment.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
exports.#nope = 1;           // Error (outside class body)
function A() { }
A.prototype.#no = 2;         // Error (outside class body)

class B {}
B.#foo = 3;                  // Error (outside class body)

class C {
    #bar = 6;
    constructor () {
        this.#foo = 3;       // Error (undeclared)
    }
}
```

----------------------------------------

TITLE: Exporting an Enum in TypeScript
DESCRIPTION: A source file (f1.ts) that exports an enum named 'E' with a single member 'X'. This enum is later imported into another file which causes a conflict.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mergeWithImportedType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export enum E {X}
```

----------------------------------------

TITLE: ESM Module Imports in MJS File
DESCRIPTION: An ECMAScript module file (.mjs) importing from various module types. This demonstrates the same import patterns as the .js file but explicitly using the .mjs extension to enforce ESM behavior.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsConditionalPackageExports(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// esm format file
import * as cjs from "package/cjs";
import * as mjs from "package/mjs";
import * as type from "package";
cjs;
mjs;
type;
import * as cjsi from "inner/a";
import * as mjsi from "inner/b";
import * as typei from "inner";
import * as ts from "inner/types";
cjsi.mjsSource;
mjsi.mjsSource;
typei.mjsSource;
ts.mjsSource;
```

----------------------------------------

TITLE: TypeScript Generic Interface and Incompatible Assignment
DESCRIPTION: This code defines a generic interface `I1<T>` with a method `m1` that accepts a callback function. It then declares two variables, `v1` of type `I1<boolean>` and `v2` of type `I1<number>`.  The assignment `v2 = v1` results in a TypeScript error because `I1<boolean>` is not assignable to `I1<number>` as `boolean` is not a `number`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/incompatibleGenericTypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I1<T> {

  m1<U>(callback: (p: T) => U): I1<U>;

}
 
var v1: I1<boolean>;
 
var v2: I1<number> = v1;

```

----------------------------------------

TITLE: Exporting Modules Using ESM - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates the export of modules using ECMAScript Module (ESM) format. It shows how to export the 'default' export and alias 'foo' for default, and alias 'baz' for 'bar'. No errors are noted in this ESM format compared to the CommonJS format.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportHelpersCollisions3(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
// esm format file
export {default} from "fs";
export {default as foo} from "fs";
export {bar as baz} from "fs";
```

----------------------------------------

TITLE: TypeScript Interface Extension and Type Assignment
DESCRIPTION: This snippet demonstrates the extension of interfaces and type assignments between them. It shows how TypeScript enforces property requirements when assigning variables of one interface type to another.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/qualify.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
interface I {
    k;
}

var y:I;
var x:T.I=y;
```

----------------------------------------

TITLE: Type Narrowing with Array Destructuring in TypeScript
DESCRIPTION: The function `f2` demonstrates array destructuring and type narrowing within a conditional block.  The type of `obj[0]` and `obj[1]` is narrowed to `number` and `string` respectively inside the `if` block. The `null` type is filtered out.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringControlFlow.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function f2(obj: [number, string] | null[]) {
    let a0 = obj[0];  // number | null
    let a1 = obj[1];  // string | null
    let [b0, b1] = obj;
    ([a0, a1] = obj);
    if (obj[0] && obj[1]) {
        let c0 = obj[0];  // number
        let c1 = obj[1];  // string
        let [d0, d1] = obj;
        ([c0, c1] = obj);
    }
}
```

----------------------------------------

TITLE: Type Checking with Generic Types in TypeScript
DESCRIPTION: This snippet showcases type checking errors that occur when calling a function on a generic type constrained by a union of object types. The function `callN` takes a generic parameter `p` of type `T extends A | B`. Attempting to call `p.a("s")` results in a type error due to the conflicting function signatures. Additionally, it shows an error when assigning `p.a` to a variable and calling it with an incorrect number of arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionCallOnConstrainedTypeVariable.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    function callN<T extends A | B>(p: T) {
      p.a("s"); // Error
          ~~~
!!! error TS2345: Argument of type '"s"' is not assignable to parameter of type 'never'.
      
      var a: T["a"] = p.a;
      a(""); // Error
        ~~
!!! error TS2345: Argument of type '""' is not assignable to parameter of type 'never'.
      a("", "", "", ""); // Error
            ~~~~~~~~~~
!!! error TS2554: Expected 1 arguments, but got 4.
    }
```

----------------------------------------

TITLE: Nested Destructuring with Optional JSON Configuration
DESCRIPTION: Function demonstrating nested destructuring with optional configuration object containing a JSON property
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration9(strict=true).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function f1({ a: { json = [] } = {} } = {}) { return json }
```

----------------------------------------

TITLE: Interface Type Hierarchy Definition
DESCRIPTION: Defines two interfaces A and B where B extends A, establishing a type hierarchy for testing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/covariantCallbacks.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface A { a: string }
interface B extends A { b: string }
```

----------------------------------------

TITLE: Length Property Check - TypeScript
DESCRIPTION: Function test3 checks for the presence of the 'length' property in the passed object and safely narrows the type of that object based on the result.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=true).errors.txt#2025-04-21_snippet_23

LANGUAGE: typescript
CODE:
```
function test3<T extends any[] | Record<string, any>>(obj: T) {
        if ('length' in obj) {
          obj;  // T
        }
        else {
          obj;  // T
        }
    }
```

----------------------------------------

TITLE: Implementing Intl.DisplayNames for Region Names in TypeScript
DESCRIPTION: This snippet demonstrates the use of Intl.DisplayNames to get localized names for regions. It shows examples in English and Traditional Chinese, highlighting the API's multilingual capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es2020IntlAPIs.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
const regionNamesInEnglish = new Intl.DisplayNames(['en'], { type: 'region' });
const regionNamesInTraditionalChinese = new Intl.DisplayNames(['zh-Hant'], { type: 'region' });

console.log(regionNamesInEnglish.of('US'));
// expected output: "United States"

console.log(regionNamesInTraditionalChinese.of('US'));
// expected output: "美國"
```

----------------------------------------

TITLE: Exporting Constant in TypeScript
DESCRIPTION: This snippet shows a simple export of a constant variable in a TypeScript module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importHelpersNoHelpers.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export const x = 1;
```

----------------------------------------

TITLE: CommonJS Type Declaration File
DESCRIPTION: A declaration file targeted for CommonJS requires that defines 'bar' as a global variable, which is not accessible in ESM modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesTripleSlashReferenceModeOverride2(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
export {};
declare global {
    var bar: number;
}
```

----------------------------------------

TITLE: Importing Modules in CJS Format (JavaScript)
DESCRIPTION: This snippet shows importing modules in CommonJS format, including both CJS and ES modules from various packages and inner modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsConditionalPackageExports(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
// cjs format file
import * as cjs from "package/cjs";
import * as mjs from "package/mjs";
import * as type from "package";
cjs;
mjs;
type;
import * as cjsi from "inner/a";
import * as mjsi from "inner/b";
import * as typei from "inner";
import * as ts from "inner/types";
cjsi.cjsSource;
mjsi.cjsSource;
typei.implicitCjsSource;
ts.cjsSource;
```

----------------------------------------

TITLE: TypeScript Class with Arrow Functions Accessing Parameter Property
DESCRIPTION: This class demonstrates arrow function properties that access a property from a parameter property. The arrow functions can safely access properties of the parameter property object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignParameterPropertyToPropertyDeclarationES2022.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
class H {
    constructor(public p1: C) {}

    public p2 = () => {
        return this.p1.foo;
    }

    public p3 = () => this.p1.foo;
}
```

----------------------------------------

TITLE: Correct Implementation with TypeScript 'satisfies' Operator
DESCRIPTION: This code shows the correct implementation where an object with the required property 'a' properly satisfies the 'Foo' interface. The object includes the number property that the interface requires, so no TypeScript errors are produced.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeSatisfactionWithDefaultExport.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface Foo {
    a: number;
}
export default { a: 1 } satisfies Foo;
```

----------------------------------------

TITLE: Converting Type T to Partial<T> in TypeScript
DESCRIPTION: Defines a function that takes a value of type T and returns it as Partial<T>. This is a valid conversion since any complete object can be treated as a partial object (objects with all properties can be treated as objects with optional properties).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRelationships.errors.txt#2025-04-21_snippet_25

LANGUAGE: typescript
CODE:
```
function f80<T>(t: T): Partial<T> {
    return t;
}
```

----------------------------------------

TITLE: Using Spread Operator in Function Calls - TypeScript
DESCRIPTION: This snippet defines a function with multiple parameters and demonstrates using the spread operator to pass arrays as function arguments in TypeScript. It showcases various forms of spread operations and the TypeScript errors related to incorrect argument counts. The main focus is on experimenting with argument spreads and understanding TypeScript's type-checking behavior.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arraySpreadInCall.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function f1(a: number, b: number, c: number, d: number, e: number, f: number): void;
f1(1, 2, 3, 4, ...[5, 6]);
f1(...[1], 2, 3, 4, 5, 6);
f1(1, 2, ...[3, 4], 5, 6);
f1(1, 2, ...[3], 4, ...[5, 6]);
f1(...[1, 2], ...[3, 4], ...[5, 6]);
f1(...(([1, 2])), ...(((([3, 4])))), ...([5, 6]));
```

----------------------------------------

TITLE: Module Definition with Export and Import Aliases in TypeScript
DESCRIPTION: Demonstrates TypeScript module pattern with Point and Line geometry types, showing how export and import aliases affect visibility. The code includes three modules (A, B, and Geometry) with various export/import combinations and shows both valid and invalid usage patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ModuleWithExportedAndNonExportedImportAlias.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module A {
    export interface Point {
        x: number;
        y: number;
    }

    interface Point3d extends Point {
        z: number;
    }
}

module B {
    export class Line {
        constructor(public start: A.Point, public end: A.Point) { }
    }
}

module Geometry {
    export import Points = A;
    import Lines = B;

    export var Origin: Points.Point = { x: 0, y: 0 };

    // this is valid since B.Line _is_ visible outside Geometry
    export var Unit: Lines.Line = new Lines.Line(Origin, { x: 1, y: 0 });
}

// expected to work since all are exported
var p: { x: number; y: number };
var p: Geometry.Points.Point;
var p = Geometry.Origin;

var line: { start: { x: number; y: number }; end: { x: number; y: number; } };
var line = Geometry.Unit;

// not expected to work since non are exported
var line = Geometry.Lines.Line;
```

----------------------------------------

TITLE: Defining Classes with Override Modifiers in TypeScript
DESCRIPTION: This snippet illustrates the definition of class 'B' and its subclass 'D' utilizing the 'override' modifier for methods. It demonstrates the correct and incorrect uses of 'override' and the resulting error messages indicating the violations of TypeScript rules regarding inheritance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/override1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class B {
    foo (v: string) {}
    fooo (v: string) {}
}

class D extends B {
    override foo (v: string) {}

    fooo (v: string) {}
    ~~~~
!!! error TS4114: This member must have an 'override' modifier because it overrides a member in the base class 'B'.

    override bar(v: string) {}
             ~~~
!!! error TS4113: This member cannot have an 'override' modifier because it is not declared in the base class 'B'.
}
```

----------------------------------------

TITLE: Variable Declarations with Type Assertions
DESCRIPTION: Shows various patterns of variable declarations with type assertions and function assignments
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
var c3t1: (s: string) => string = (function(s) { return s });
var c3t2 = <IFoo>({
    n: 1
})
```

----------------------------------------

TITLE: Demonstrating TypeScript Error with Private Fields
DESCRIPTION: This code snippet illustrates a TypeScript error that occurs when attempting to assign an object of a type without a private field to a type that requires it. The error highlights the importance of structural typing and private field handling in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNamesUnique-4.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class A1 { }
interface A2 extends A1 { }
declare const a: A2;

class C { #something: number }
const c: C = a;
```

----------------------------------------

TITLE: Defining a Class with Private Properties in TypeScript
DESCRIPTION: This snippet defines a class 'C' with a private instance property '#prop' and a private static property '#propStatic'. It includes a method that attempts to spread these properties into other objects, demonstrating TypeScript's error reporting when accessing private properties incorrectly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameAndObjectRestSpread.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
    #prop = 1;
    static #propStatic = 1;

    method(other: C) {
        const obj = { ...other };
        obj.#prop;
            ~~~~~
!!! error TS2339: Property '#prop' does not exist on type '{}'.
        const { ...rest } = other;
        rest.#prop;
             ~~~~~
!!! error TS2339: Property '#prop' does not exist on type '{}'.

        const statics = { ... C};
        statics.#propStatic
                ~~~~~~~~~~~
!!! error TS2339: Property '#propStatic' does not exist on type '{ prototype: C; }'.
        const { ...sRest } = C;
        sRest.#propStatic;
              ~~~~~~~~~~~
!!! error TS2339: Property '#propStatic' does not exist on type '{ prototype: C; }'.
    }
}
```

----------------------------------------

TITLE: Merge TypeScript Function then Module with Class
DESCRIPTION: Demonstrates declaring a function before a namespace (module) containing an exported class. This is a valid scenario for declaration merging.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/augmentedTypesModules.errors.txt#_snippet_12

LANGUAGE: TypeScript
CODE:
```
function m2g() { };
module m2g { export class C { foo() { } } }
```

----------------------------------------

TITLE: Deeply Nested Optional Properties Handling - TypeScript
DESCRIPTION: This code snippet demonstrates how to handle deeply nested optional properties in TypeScript with proper checks to prevent accessing potentially undefined properties. It uses type definitions to illustrate how to narrow down nested properties safely, which helps illustrate TypeScript's ability to manage complex object structures while minimizing the risk of runtime errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowingOfQualifiedNames.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface DeepOptional {
    a?: {
        b?: {
            c?: string
        }
    }
}

function init2(foo: DeepOptional) {
    if (foo.a) {
        type A = typeof foo.a;
        type B = typeof foo.a.b;
        type C = typeof foo.a.b.c;
                        ~~~~~~~
!!! error TS2532: Object is possibly 'undefined'.

        for(const _ of [1]) {
            type A = typeof foo.a;
            type B = typeof foo.a.b;
            type C = typeof foo.a.b.c;
                            ~~~~~~~
!!! error TS2532: Object is possibly 'undefined'.

            if (foo.a.b) {
                type A = typeof foo.a;
                type B = typeof foo.a.b;
                type C = typeof foo.a.b.c;

                for(const _ of [1]) {
                    type A = typeof foo.a;
                    type B = typeof foo.a.b;
                    type C = typeof foo.a.b.c;

                    if (foo.a.b.c) {
                        type A = typeof foo.a;
                        type B = typeof foo.a.b;
                        type C = typeof foo.a.b.c;

                        for(const _ of [1]) {
                            type A = typeof foo.a;
                            type B = typeof foo.a.b;
                            type C = typeof foo.a.b.c;
                        }
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Handling Circular Reference in Functions - TypeScript
DESCRIPTION: This snippet demonstrates how circular references in function return types can lead to inference failures in TypeScript. The code illustrates the error messages encountered due to missing type annotations and indirect self-references. It serves to highlight the importance of defining explicit type annotations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/circularReferenceInReturnType.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// inference fails for res1 and res2, but ideally should not
declare function fn1<T>(cb: () => T): string;
const res1 = fn1(() => res1);
      ~~~~
!!! error TS7022: 'res1' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
                 ~~~~~~~~~~
!!! error TS7024: Function implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.

declare function fn2<T>(): (cb: () => any) => (a: T) => void;
const res2 = fn2()(() => res2);

declare function fn3<T>(): <T2>(cb: (arg: T2) => any) => (a: T) => void;
const res3 = fn3()(() => res3);

// https://github.com/microsoft/TypeScript/issues/58616

function foo(arg: Parameters<typeof bar>[0]) {
    return arg;
}

function bar(arg: string) {
    return foo(arg);
}
```

----------------------------------------

TITLE: Interface Extension with Call Signatures in TypeScript
DESCRIPTION: Demonstrates interface extension with specialized call signatures. Shows cases where extending interfaces with different return types is allowed (when base returns void) and cases where it generates errors (when base returns non-void types).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithCallSignaturesWithSpecializedSignatures.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// same as subtypingWithCallSignatures but with additional specialized signatures that should not affect the results

module CallSignature {
    interface Base { // T
        // M's
        (x: 'a'): void;
        (x: string, y: number): void;
    }

    // S's
    interface I extends Base {
        // N's
        (x: 'a'): number; // ok because base returns void
        (x: string, y: number): number; // ok because base returns void
        <T>(x: T): string; // ok because base returns void
    }

    interface Base2 { // T
        // M's
        (x: 'a'): number;
        (x: string): number;
    }

    // S's
    interface I2 extends Base2 {
        // N's
        (x: 'a'): string;
        (x: string): string; // error because base returns non-void;
    }

    // S's
    interface I3 extends Base2 {
        // N's
        <T>(x: T): string; // ok, adds a new call signature
    }
}
```

----------------------------------------

TITLE: tsconfig.json Configuration with Invalid Paths
DESCRIPTION: This snippet shows a tsconfig.json configuration that causes the TS5063 error. The 'paths' compiler option has '*' mapped to a string instead of an array, which is incorrect.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/pathsValidation1.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "baseUrl": ".",
        "paths": {
            "*": "*"
        }
    }
}
```

----------------------------------------

TITLE: Type Compatibility with Readonly<U> where U extends T in TypeScript
DESCRIPTION: Demonstrates incompatibility between T[keyof T] and U[keyof T] when assigning to Readonly<U>. Shows multiple errors: type assignment issues and the readonly restriction.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRelationships.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
function f22<T, U extends T>(x: T, y: Readonly<U>, k: keyof T) {
    x[k] = y[k];
    y[k] = x[k];  // Error
}
```

----------------------------------------

TITLE: Importing Modules in CJS Format (TypeScript)
DESCRIPTION: Shows module imports in a CommonJS-formatted TypeScript file. This snippet highlights the error that occurs when trying to import an ECMAScript module in a CommonJS context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExportsTrailers(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
// cjs format file
import * as cjsi from "inner/cjs/index.cjs";
import * as mjsi from "inner/mjs/index.mjs";
import * as typei from "inner/js/index.js";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: Demonstrating TypeScript Errors in Non-Overloaded Component Usage
DESCRIPTION: This snippet shows usage of non-overloaded components NoOverload and NoOverload1, resulting in TypeScript errors due to incorrect prop usage. It highlights the difference in error reporting between overloaded and non-overloaded components.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextuallyTypedStringLiteralsInJsxAttributes02.errors.txt#2025-04-21_snippet_3

LANGUAGE: TSX
CODE:
```
export function NoOverload(buttonProps: ButtonProps): JSX.Element { return undefined }
const c1 = <NoOverload  {...{onClick: (k) => {console.log(k)}}} extra />;

export function NoOverload1(linkProps: LinkProps): JSX.Element { return undefined }
const d1 = <NoOverload1 {...{goTo:"home"}} extra  />;
```

----------------------------------------

TITLE: Defining TypeScript Type Template with Default Value
DESCRIPTION: This snippet demonstrates the correct usage of a TypeScript type template with a default value, allowing for either string or number types. It also shows the validation on using default types in arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocTemplateTagDefault.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/**
     * @template {string | number} [T=string] - ok: defaults are permitted
     * @typedef {[T]} A
     */
    
    /** @type {A} */ // ok, default for `T` in `A` is `string`
    const aDefault1 = [""];
    /** @type {A} */ // error: `number` is not assignable to string`
    const aDefault2 = [0];
                       ~
!!! error TS2322: Type 'number' is not assignable to type 'string'.
    /** @type {A<string>} */ // ok, `T` is provided for `A`
    const aString = [""];
    /** @type {A<number>} */ // ok, `T` is provided for `A`
    const aNumber = [0];
```

----------------------------------------

TITLE: Valid Generic Type Parameter Usage in TypeScript
DESCRIPTION: This snippet demonstrates a correct usage of the generic class 'B' with a specified type ('number'). The 'foo' method is called with a value of the correct type, resulting in no TypeScript errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericWithOpenTypeParameters1.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
    var f4 = (x: B<number>) => { return x.foo(1); } // no error
```

----------------------------------------

TITLE: Type Narrowing with Nullish Coalescing and Assignment in TypeScript
DESCRIPTION: This snippet demonstrates type narrowing and control flow analysis with the nullish coalescing operator in an assignment context. It shows how TypeScript infers types based on the nullish coalescing operation and conditional assignment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowNullishCoalesce.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
// assignment flow
declare const o: { x: number } | undefined;
let x: { x: number } | boolean;
if (x = o ?? true) {
    x;
}
```

----------------------------------------

TITLE: Importing Named and Default Exports with Alias in TypeScript
DESCRIPTION: This snippet shows importing a named export 'Bar' and the default export with alias 'resolve' from the 'path' module, using resolve, and re-exporting Bar. It includes an error indicating that 'tslib' module is required but not found.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esModuleInteropTslibHelpers.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import {Bar, default as resolve} from "path";
resolve("", "../");
export { Bar }
```

----------------------------------------

TITLE: Reporting JSX Errors in React for TypeScript
DESCRIPTION: This snippet captures various TypeScript errors that occur during the compilation of a JSX file in a React application, including missing component definitions such as 'View', 'ListView', and 'RefreshControl', as well as invalid JSX attributes that require non-empty expressions. The errors serve to alert the developer about undeclared components and improper usage of JSX syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxAttributeWithoutExpressionReact.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
jsxAttributeWithoutExpressionReact.tsx(2,2): error TS2304: Cannot find name 'View'.
jsxAttributeWithoutExpressionReact.tsx(3,6): error TS2304: Cannot find name 'ListView'.
jsxAttributeWithoutExpressionReact.tsx(4,10): error TS2304: Cannot find name 'RefreshControl'.
jsxAttributeWithoutExpressionReact.tsx(4,35): error TS17000: JSX attributes must only be assigned a non-empty 'expression'.
jsxAttributeWithoutExpressionReact.tsx(5,44): error TS17000: JSX attributes must only be assigned a non-empty 'expression'.
jsxAttributeWithoutExpressionReact.tsx(6,7): error TS2304: Cannot find name 'ListView'.
jsxAttributeWithoutExpressionReact.tsx(7,3): error TS2304: Cannot find name 'View'.

==== jsxAttributeWithoutExpressionReact.tsx (7 errors) ====
    declare var React: any;
    <View>
     ~~~~
!!! error TS2304: Cannot find name 'View'.
        <ListView refreshControl={
         ~~~~~~~~
!!! error TS2304: Cannot find name 'ListView'.
            <RefreshControl onRefresh={} refreshing={} />
             ~~~~~~~~~~~~~~
!!! error TS2304: Cannot find name 'RefreshControl'.
                                      ~~
!!! error TS17000: JSX attributes must only be assigned a non-empty 'expression'.
        } dataSource={this.state.ds} renderRow={}> 
                                               ~~
!!! error TS17000: JSX attributes must only be assigned a non-empty 'expression'.
        </ListView>
          ~~~~~~~~
!!! error TS2304: Cannot find name 'ListView'.
    </View>
      ~~~~
!!! error TS2304: Cannot find name 'View'.
```

----------------------------------------

TITLE: Type Merging in TypeScript
DESCRIPTION: This snippet defines two merge functions, `Merge1` and `Merge2`, which demonstrate how TypeScript can merge types while dealing with intersections and ensure that the resulting types maintain their integrity, showcasing the results through example usages.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionReductionStrict.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
type Merge1<T, U> = { [P in keyof (T & U)]: P extends keyof T ? T[P] : U[P & keyof U] }
type Merge2<T, U> = { [P in keyof T | keyof U]: P extends keyof T ? T[P] : U[P & keyof U] }

type M1 = { a: 1, b: 2 } & { a: 2, c: 3 };  // never
type M2 = Merge1<{ a: 1, b: 2 }, { a: 2, c: 3 }> ;  // {}
type M3 = Merge2<{ a: 1, b: 2 }, { a: 2, c: 3 }> ;  // { a: 1, b: 2, c: 3 }
```

----------------------------------------

TITLE: Using Decorators on Class Members in TypeScript
DESCRIPTION: This snippet demonstrates the use of decorators on various class members, including static and instance methods, properties, accessors, and constructor parameters. It shows both valid and invalid decorator usage patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/useBeforeDeclaration_classDecorators.2(experimentaldecorators=false).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
// ok
class C4 {
    @dec(() => C4) static method() {}
    @dec(() => C4) static get w() { return this.y; }
    @dec(() => C4) static set x(v: any) {}
    @dec(() => C4) static y: any;
    @dec(() => C4) static accessor z: any;

    @dec(() => C4) method() {}
    @dec(() => C4) get w() { return this.y; }
    @dec(() => C4) set x(v: any) {}
    @dec(() => C4) y: any;
    @dec(() => C4) accessor z: any;

    constructor(@dec(() => C4) a: any) {}
    static method2(@dec(() => C4) a: any) {}
    method2(@dec(() => C4) a: any) {}
}
```

----------------------------------------

TITLE: TypeScript Function with Incomplete Return Paths
DESCRIPTION: This TypeScript snippet defines a function 'main1' with a declared number return type. It uses a try...catch...finally block. The 'try' block returns a number, but the 'catch' block only logs a message and does not return a value. This structure violates the 'noImplicitReturns' compiler option, leading to a TS7030 error because the path through the 'catch' block does not return a number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitReturnsWithProtectedBlocks2.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare function log(s: string): void;
declare function get(): number;

function main1() : number {
    try {
        return get();
    }
    catch(e) {
        log("in catch");
    }
    finally {
        log("in finally");
    }
}
```

----------------------------------------

TITLE: Exporting Class and Instance in TypeScript
DESCRIPTION: This snippet exports a class 'm2_c1' along with its instance and a function that returns the instance. It showcases the use of export in TypeScript to enable class and instance reuse across different modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcemapMixedSubfolderSpecifyOutputFile/node/sourcemapMixedSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export var m2_a1 = 10;
export class m2_c1 {
    public m2_c1_p1: number;
}

export var m2_instance1 = new m2_c1();
export function m2_f1() {
    return m2_instance1;
}
```

----------------------------------------

TITLE: Defining User Class and Method Calls with Super in Derived Classes - TypeScript
DESCRIPTION: Defines a base class 'User' and demonstrates method overriding in derived classes 'RegisteredUser', 'RegisteredUser2', 'RegisteredUser3', and 'RegisteredUser4'. It shows appropriate usage of 'super' keyword in different contexts including constructors and lambdas.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/superInLambdas.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class User {
    name: string = "Bob";
    sayHello(): void {
        //console.log("Hello, " + this.name);
    }
}

class RegisteredUser extends User {
    name: string = "Frank";
    constructor() {
        super();

        // super call in a constructor
        super.sayHello();

        // super call in a lambda in a constructor 
        var x = () => super.sayHello();
    }
    sayHello(): void {
        // super call in a method
        super.sayHello();

        // super call in a lambda in a method
       var x = () => super.sayHello();
    }
}
class RegisteredUser2 extends User {
    name: string = "Joe";
    constructor() {
        super();

        // super call in a nested lambda in a constructor 
        var x = () => () => () => super.sayHello();
    }
    sayHello(): void {
        // super call in a nested lambda in a method
        var x = () => () => () => super.sayHello();
    }
}

class RegisteredUser3 extends User {
    name: string = "Sam";
    constructor() {
        super();

        // super property in a nested lambda in a constructor 
        var superName = () => () => () => super.name;
                                                    ~~~~
!!! error TS2340: Only public and protected methods of the base class are accessible via the 'super' keyword.
    }
    sayHello(): void {
        // super property in a nested lambda in a method
        var superName = () => () => () => super.name;
                                                    ~~~~
!!! error TS2340: Only public and protected methods of the base class are accessible via the 'super' keyword.
    }
}

class RegisteredUser4 extends User {
    name: string = "Mark";
    constructor() {
        super();

        // super in a nested lambda in a constructor 
        var x = () => () => super;
                                     ~
!!! error TS1034: 'super' must be followed by an argument list or member access.
    }
    sayHello(): void {
        // super in a nested lambda in a method
        var x = () => () => super;
                                     ~
!!! error TS1034: 'super' must be followed by an argument list or member access.
    }
}
```

----------------------------------------

TITLE: Valid Recursive Type Patterns in TypeScript
DESCRIPTION: Demonstrates valid recursive type patterns using object literals, functions, constructors, and indexers that don't trigger circular reference errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveTypesWithTypeof.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var g: { x: typeof g; };
var g: typeof g.x;
var h: () => typeof h;
var h = h();
var i: (x: typeof i) => typeof x;
var i = i(i);
var j: <T extends typeof j>(x: T) => T;
var j = j(j);

// Constructor signatures
var h2: new () => typeof h2;
var h2 = new h2();
var i2: new (x: typeof i2) => typeof x;
var i2 = new i2(i2);
var j2: new <T extends typeof j2>(x: T) => T;
var j2 = new j2(j2);

// Indexers
var k: { [n: number]: typeof k;[s: string]: typeof k };
var k = k[0];
var k = k[''];
```

----------------------------------------

TITLE: Handling Import Assignment Errors in TypeScript
DESCRIPTION: This snippet demonstrates TypeScript errors that occur when attempting to assign values to variables imported from another module. It highlights errors like assigning to imports and read-only properties. The code requires 'a.ts' as a dependency and produces TypeScript errors when modifying imported bindings.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importsImplicitlyReadonly.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { x, y } from "./a";
import * as a1 from "./a";
import a2 = require("./a");
const a3 = a1;

x = 1;     // Error
~
!!! error TS2632: Cannot assign to 'x' because it is an import.
y = 1;     // Error
~
!!! error TS2632: Cannot assign to 'y' because it is an import.
a1.x = 1;  // Error
   ~
!!! error TS2540: Cannot assign to 'x' because it is a read-only property.
a1.y = 1;  // Error
   ~
!!! error TS2540: Cannot assign to 'y' because it is a read-only property.
a2.x = 1;
a2.y = 1;
a3.x = 1;
a3.y = 1;
```

----------------------------------------

TITLE: TypeScript Angular2 Class with Decorator
DESCRIPTION: Main TypeScript file attempting to import from Angular2/core and defining a decorated class with ElementRef dependency injection. Shows common Angular2 class pattern with decorator.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/emitDecoratorMetadataSystemJS/amd/emitDecoratorMetadataSystemJS.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import * as ng from "angular2/core";

declare function foo(...args: any[]);

@foo
export class MyClass1 {
    constructor(private _elementRef: ng.ElementRef){}
}
```

----------------------------------------

TITLE: Interface Definition in TypeScript
DESCRIPTION: Defines an interface `Foo` with properties of different types, including required, optional, nullable, and union types. This interface is used later to demonstrate the behavior of the `delete` operator with various property types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/deleteExpressionMustBeOptional_exactOptionalPropertyTypes(exactoptionalpropertytypes=false).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Foo {
    a: number
    b: number | undefined
    c: number | null
    d?: number
    e: number | undefined | null
    f?: number | undefined | null
    g: unknown
    h: any
    i: never
}
```

----------------------------------------

TITLE: Accessing textContent on DOM Elements in TypeScript
DESCRIPTION: This code snippet demonstrates attempts to access the 'textContent' property on various DOM element types, resulting in TypeScript errors due to missing 'dom' library inclusion. It also includes custom interfaces to show similar property access errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/missingDomElements.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Element {}
interface EventTarget {}
interface HTMLElement {}
interface HTMLInputElement {}

({} as any as Element).textContent;
({} as any as HTMLElement).textContent;
({} as any as HTMLInputElement).textContent;
({} as any as EventTarget & HTMLInputElement).textContent

interface HTMLElementFake {}
interface Node {
    actuallyNotTheSame: number;    
};

({} as any as HTMLElementFake).textContent;
({} as any as Node).textContent;
```

----------------------------------------

TITLE: Generic Function with Partial and NonNullable Types in TypeScript
DESCRIPTION: This function demonstrates the use of complex type manipulations, including Partial and NonNullable types applied to generic type parameters. It showcases TypeScript's ability to infer and check complex type relationships.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/conditionalTypes1.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
function f3<T>(x: Partial<T>[keyof T], y: NonNullable<Partial<T>[keyof T]>) {
    x = y;
    y = x;  // Error
}
```

----------------------------------------

TITLE: Incorrect Global Scope Augmentation in TypeScript
DESCRIPTION: This TypeScript snippet showcases an improper attempt to augment the global scope inside a namespace, which is not allowed. The `declare global` block is incorrectly placed within a `namespace`, causing a TypeScript error: "Augmentations for the global scope can only be directly nested in external modules or ambient module declarations." The snippet attempts to extend the `Array` interface with a property `x`, but such global augmentations must be declared outside of namespaces.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleAugmentationGlobal8.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
namespace A {
    declare global {
            interface Array<T> { x }
    }
}
export {}
```

----------------------------------------

TITLE: Importing and Using Exported Function
DESCRIPTION: This snippet demonstrates the correct usage of the previously exported 'abc' function. It imports the function from the 'bug24934' module and calls it with arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/conflictingCommonJSES2015Exports.errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { abc } from './bug24934';
abc(1, 2, 3);
```

----------------------------------------

TITLE: Generator Function with Typed Yield Expression
DESCRIPTION: Snippet 'g3' shows a correct usage of 'yield' where the value is explicitly typed as 'string', eliminating implicit any issues due to contextual typing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatorImplicitAny.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function* g3() {
        const value: string = yield; // ok, contextually typed by `value`.
    }
```

----------------------------------------

TITLE: Invalid Private Field Usage in JavaScript Prototype and Class
DESCRIPTION: Example showing incorrect usage of private fields (#) in prototype objects and classes, resulting in TypeScript compilation errors. Private identifiers are only allowed within class bodies and require ECMAScript 2015 or higher target.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameJsBadDeclaration.errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
function A() { }
A.prototype = {
  #x: 1,         // Error
  #m() {},       // Error
  get #p() { return "" } // Error
}
class B { }
B.prototype = {
  #y: 2,         // Error
  #m() {},       // Error
  get #p() { return "" } // Error
}
class C {
  constructor() {
    this.#z = 3;
  }
}
```

----------------------------------------

TITLE: Demonstrating TypeScript Assignment Compatibility Error
DESCRIPTION: This code defines two modules with different interface and object structures, then attempts an incompatible assignment. The error occurs because the 'one' property types (number vs string[]) are not compatible.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability20.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
module __test1__ {
    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
    export var __val__obj4 = obj4;
}
module __test2__ {
    export var obj = {one: ["1"]};
    export var __val__obj = obj;
}
__test2__.__val__obj = __test1__.__val__obj4
```

----------------------------------------

TITLE: Demonstrating Class Methods and Properties with Circular References in TypeScript
DESCRIPTION: This code snippet shows a class with interface interactions and another class with a getter method that returns itself, causing a circular reference. TypeScript generates an error for the getter method due to the implicit 'any' return type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implicitAnyFromCircularInference.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
interface A {
    s: string;
}

function foo(x: A): string { return "abc"; }

class C {
    s = foo(this);
}

class D {
    // Error expected
    get x() {
        return this.x;
    }
}
```

----------------------------------------

TITLE: Implementing Array Destructuring with Default Values
DESCRIPTION: Shows destructuring of arrays with default value assignments and nested destructuring patterns. Demonstrates handling of undefined values and multiple variable assignments from array elements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues3.sourcemap.txt#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
[numberB = -1, nameB = "helloNoName", skillB = "noSkill"] = [2, "trimmer", "trimming"];

_3 = multiRobotB[0], nameMB = _3 === void 0 ? "helloNoName" : _3, _4 = multiRobotB[1], _5 = _4 === void 0 ? [] : _4, _6 = _5[0], primarySkillB = _6 === void 0 ? "noSkill" : _6, _7 = _5[1], secondarySkillB = _7 === void 0 ? "noSkill" : _7;
```

----------------------------------------

TITLE: Declaring and Using Tuples in TypeScript
DESCRIPTION: This snippet demonstrates the declaration of tuples, including variadic tuples, and shows how different functions can be invoked with these tuples as arguments. It illustrates how rest parameters can be applied within function callbacks. Dependencies include TypeScript, and the functions require compatible tuple types as parameters to avoid type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/restTuplesFromContextualTypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare const t1: [number, boolean, string];

(function (a, b, c){})(...t1);
(function (...x){})(...t1);
(function (a, ...x){})(...t1);
(function (a, b, ...x){})(...t1);
(function (a, b, c, ...x){})(...t1);

declare function f1(cb: (...args: typeof t1) => void): void;

f1((a, b, c) => {})
f1((...x) => {})
f1((a, ...x) => {})
f1((a, b, ...x) => {})
f1((a, b, c, ...x) => {})

declare const t2: [number, boolean, ...string[]];

(function (a, b, c){})(...t2);
(function (...x){})(...t2);
(function (a, ...x){})(...t2);
(function (a, b, ...x){})(...t2);
(function (a, b, c, ...x){})(...t2);
```

----------------------------------------

TITLE: TypeScript Generic Arrow Function with Type Arguments
DESCRIPTION: Shows a generic arrow function with two type parameters and examples of invalid type argument counts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callGenericFunctionWithIncorrectNumberOfTypeArguments.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var f2 = <T, U>(x: T, y: U): T => { return null; }
var r2 = f2<number>(1, '');
var r2b = f2<number, string, number>(1, '');
```

----------------------------------------

TITLE: TypeScript Optional Chaining with Multiple Conditions
DESCRIPTION: Shows TypeScript's behavior with optional chaining in a function with multiple conditions. It demonstrates type checking when accessing potentially undefined properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowOptionalChain3.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
function test4(options?: { a?: boolean; b?: boolean }) {
  if (options?.a === false || options.b) {
    options;
  }
}
```

----------------------------------------

TITLE: Invalid Module Import/Export with ES Modules Target
DESCRIPTION: Shows error cases when using require-style imports and exports while targeting ECMAScript modules. Includes both an invalid import assignment using require() and an invalid export assignment of a namespace.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6modulekindWithES5Target10.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import i = require("mod"); // Error;


namespace N {
}
export = N; // Error
```

----------------------------------------

TITLE: Defining ChainedObject Interface in TypeScript
DESCRIPTION: This snippet defines the ChainedObject interface, which represents a chained operation on an object in Underscore.js. It includes method signatures for various object manipulation and inspection operations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#2025-04-21_snippet_6

LANGUAGE: TypeScript
CODE:
```
export interface ChainedObject<T> {
    keys(): ChainedArray<string>;
    values(): ChainedArray<any>;
    pairs(): ChainedArray<any[]>;
    invert(): ChainedObject<any>;
    functions(): ChainedArray<string>;
    methods(): ChainedArray<string>;
    extend(...sources: any[]): ChainedObject<T>;
    pick(...keys: string[]): ChainedObject<T>;
    omit(...keys: string[]): ChainedObject<T>;
    defaults(...defaults: any[]): ChainedObject<T>;
    clone(): ChainedObject<T>;
    tap(interceptor: (object: T) => void): ChainedObject<T>;
    has(key: string): ChainedObject<boolean>;
    isEqual(other: T): ChainedObject<boolean>;
    isEmpty(): ChainedObject<boolean>;
    isElement(): ChainedObject<boolean>;
    isArray(): ChainedObject<boolean>;
    isObject(): ChainedObject<boolean>;
    isArguments(): ChainedObject<boolean>;
    isFunction(): ChainedObject<boolean>;
    isString(): ChainedObject<boolean>;
    isNumber(): ChainedObject<boolean>;
    isFinite(): ChainedObject<boolean>;
    isBoolean(): ChainedObject<boolean>;
    isDate(): ChainedObject<boolean>;
    isRegExp(): ChainedObject<boolean>;
    isNaN(): ChainedObject<boolean>;
    isNull(): ChainedObject<boolean>;
    isUndefined(): ChainedObject<boolean>;
    value(): T;
}
```

----------------------------------------

TITLE: Subfolder Package Configuration for CommonJS (JSON)
DESCRIPTION: This package.json snippet configures a subfolder to use CommonJS modules by setting the 'type' field to 'commonjs', overriding the root configuration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsGeneratedNameCollisions(module=node18).errors.txt#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "type": "commonjs"
}
```

----------------------------------------

TITLE: Setting Subfolder Package Type CommonJS in JSON
DESCRIPTION: Specifies that a subfolder within the project will utilize the commonjs module format. This configuration is also managed using JSON.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportHelpersCollisions2(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "type": "commonjs"
}
```

----------------------------------------

TITLE: TypeScript Type Resolution Directory Mapping
DESCRIPTION: A comprehensive table mapping @types directories to their corresponding node_modules locations for type definition resolution. The table covers various root directories including user folders, workspaces, and different depth levels of nested folders.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/canWatch/getDirectoryToWatchFailedLookupLocationFromTypeRootNonRecursiveUncDos.baseline.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| Directory                                                                                               | getDirectoryToWatchFailedLookupLocationFromTypeRoot                                                     |
| ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |
| //vda1cs4850/c$/folderAtRoot/node_modules/@types                                                        | //vda1cs4850/c$/folderAtRoot/node_modules                                                               |
| //vda1cs4850/c$/folderAtRoot/folder1/node_modules/@types                                                | //vda1cs4850/c$/folderAtRoot/folder1/node_modules                                                       |
```

----------------------------------------

TITLE: Importing with Unused Declarations - TypeScript
DESCRIPTION: This snippet highlights errors in a TypeScript file where imports are declared but not used, resulting in compilation warnings. It illustrates the importance of maintaining clean code by avoiding unused imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedImports_entireImportDeclaration.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import d1, { a as a1, b as b1 } from "./a";
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS6192: All imports in import declaration are unused.
```

LANGUAGE: typescript
CODE:
```
import d2, * as ns from "./a";
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS6192: All imports in import declaration are unused.
```

LANGUAGE: typescript
CODE:
```
import d3, { a as a2, b as b2 } from "./a";
                      ~~
!!! error TS6133: 'a2' is declared but its value is never read.
                               ~~
!!! error TS6133: 'b2' is declared but its value is never read.
```

LANGUAGE: typescript
CODE:
```
import d4, * as ns2 from "./a";
                    ~~~
!!! error TS6133: 'ns2' is declared but its value is never read.
```

LANGUAGE: typescript
CODE:
```
import d5, * as ns3 from "./a";
           ~~
!!! error TS6133: 'd5' is declared but its value is never read.
```

----------------------------------------

TITLE: Defining Base Class with Protected Members - TypeScript
DESCRIPTION: This snippet defines a base class named 'Base' in TypeScript, which contains protected properties and methods. The 'x' property and 'fn' method are inherited by derived classes, enabling subclassed implementations to access them while preventing outside access.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassWithPrivateInstanceShadowingProtectedInstance.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base {
    protected x: string;
    protected fn(): string {
        return '';
    }
    
    protected get a() { return 1; }
    protected set a(v) { }
}
```

----------------------------------------

TITLE: Exporting Constants in TypeScript
DESCRIPTION: This snippet defines and exports two constants 'a' and 'b' in a TypeScript file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importAttributes2(module=es2015).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export const a = 1;
export const b = 2;
```

----------------------------------------

TITLE: Declaring Generic Functions with Default Type Parameters in TypeScript
DESCRIPTION: This snippet demonstrates the declaration of generic functions with default type parameters, including cases where type parameters reference each other. It shows various function calls with different levels of type inference and explicit type arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericDefaults.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
declare function f17<T = U, U = T | B>(a?: T, b?: U): [T, U];
declare function f18<T, U = V, V = U | C>(a?: T, b?: U, c?: V): [T, U, V];
declare function f19<T = U, U = T & B>(a?: T, b?: U): [T, U];
declare function f20<T, U = V, V = U & C>(a?: T, b?: U, c?: V): [T, U, V];
```

----------------------------------------

TITLE: Demonstrating Function Overload Error in TypeScript
DESCRIPTION: This code defines a function 'f' with two overloads and an implementation. It then attempts to call the function with a callback that doesn't match either overload signature, resulting in a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/signatureLengthMismatchInOverload.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f(callback: (arg: string, arg2: string) => void): void;
function f(callback: (arg: number) => void): void;
function f(callback: unknown) { }

f((arg: number, arg2: number) => {});
```

----------------------------------------

TITLE: Importing from Modules with TypeScript
DESCRIPTION: A TypeScript module that imports default exports from both an explicit '.js' file and a directory using implicit module resolution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/extensionLoadingPriority(moduleresolution=bundler).errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import a from "./a.js";
import dir from "./dir";
```

----------------------------------------

TITLE: Definite Assignment Assertion on Local Variables
DESCRIPTION: Illustrates the use of the definite assignment assertion (`!`) on local variables declared with `let` and `var` to suppress the definite assignment check.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/definiteAssignmentAssertions.errors.txt#_snippet_5

LANGUAGE: TypeScript
CODE:
```
// Suppress definite assignment check for variable

function f1() {
    let x!: number;
    let y = x;
    var a!: number;
    var b = a;
}
```

----------------------------------------

TITLE: Importing JSON Module in TypeScript
DESCRIPTION: TypeScript import statement for a JSON module that requires additional compiler configuration to resolve
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/requireOfJsonFileWithoutResolveJsonModuleAndPathMapping.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import foobar from "foo/bar/foobar.json";
```

----------------------------------------

TITLE: Type Assignment Error with String Indexer
DESCRIPTION: This snippet attempts to assign an object literal containing properties with incorrect types to a variable `b` that has a string indexer. This leads to TypeScript error TS2322, which indicates that types such as `number` and `() => void` are not assignable to the `string` type as enforced by the indexer. This showcases the constraint that the indexer enforces on assignment as well as declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/stringIndexerConstrainsPropertyDeclarations.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// error
var b: { [x: string]: string; } = {
    a: '',
    b: 1, 
    b: 1,
    c: () => { }, 
    c: () => { },
    "d": '', 
    "e": 1, 
    "e": 1,
    1.0: '',
    2.0: 1, 
    2.0: 1,
    "3.0": '', 
    "4.0": 1, 
    "4.0": 1,
    f: <MyString>null, 
    f: <MyString>null,

    get X() { 
        return '';
    },
    set X(v) { }, 
    foo() { 

```

----------------------------------------

TITLE: TypeScript Relative Import Error in ECMAScript Module
DESCRIPTION: This code snippet demonstrates a TypeScript error (TS2835) that occurs when importing a module using a relative path without a file extension in an ECMAScript module (`.mts`).  The error suggests adding the appropriate file extension (e.g., `.jsx`) to the import statement to resolve the issue when using `node16` or `nodenext`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionWithoutExtension3(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
==== /src/bar.mts (1 errors) ====
    // Extensionless relative path ES import in an ES module
    import { foo } from "./foo"; // should error, suggest adding ".jsx"
                        ~~~~~~~
!!! error TS2835: Relative import paths need explicit file extensions in ECMAScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Did you mean './foo.jsx'?
    
```

----------------------------------------

TITLE: Define Base and Derived Classes in TypeScript
DESCRIPTION: This code defines a base class `Base` and two derived classes `Derived1` and `Derived2`, each with different properties. These classes are used to demonstrate type narrowing within a switch statement.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowByClauseExpressionInSwitchTrue7.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    class Base {
        basey: string = "";
    }
    
    class Derived1 extends Base {
        d: string = "";
    }
    
    class Derived2 extends Base {
        d: string = "";
        other: string = "";
    }
```

----------------------------------------

TITLE: Valid Class and Namespace Merging in Same File
DESCRIPTION: This example demonstrates the correct way to merge a class and namespace with the same name by defining both in the same file, allowing access to both instance members and static properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ClassAndModuleWithSameNameAndCommonRoot.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
class A {
    id: string;
}

module A {
    export var Instance = new A();
}

// ensure merging works as expected
var a = A.Instance;
var a = new A();
var a: { id: string };
```

----------------------------------------

TITLE: Error on accessing super properties before super call in TypeScript
DESCRIPTION: This snippet defines another derived class, C2, which also incorrectly attempts to access a parent class property using 'super' in its constructor before calling 'super()'. This yields the same TypeScript error TS17011. The correct implementation should ensure 'super()' is called before any property accesses.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/superPropertyInConstructorBeforeSuperCall.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
class C2 extends B {
    constructor() {
        super(super.x());
              ~~~~~
!!! error TS17011: 'super' must be called before accessing a property of 'super' in the constructor of a derived class.
    }
}
```

----------------------------------------

TITLE: Importing and Using Modules in TypeScript
DESCRIPTION: This TypeScript code snippet imports a module ('mod.cjs') using various import syntaxes (default, named, namespace) and then attempts to use the imported modules. The code demonstrates incorrect usage patterns leading to 'TS2349' errors, where imported modules are treated as namespaces rather than callable functions due to conflicting module types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleNodeDefaultImports(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    import a from "./mod.cjs";
    import { default as b } from "./mod.cjs";
    import c, { default as d } from "./mod.cjs";
    import * as self from "./b.mjs";
    export { default } from "./mod.cjs";
    export { default as def } from "./mod.cjs";
    
    a === b;
    b === c;
    c === d;
    d === self.default;
    self.default === self.def;
    
    // should all fail
    a();
    b();
    c();
    d();
    self.default();
    self.def();
    
    // should all work
    a.default();
    b.default();
    c.default();
    d.default();
    self.default.default();
    self.def.default();
```

----------------------------------------

TITLE: Class Implementation Error in TypeScript Module
DESCRIPTION: Code snippet showing a TypeScript error where class C attempts to implement an undefined interface I within module M. This results in a TS2304 compile error indicating the interface cannot be found.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bind1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module M {
    export class C implements I {} // this should be an unresolved symbol I error
}
```

----------------------------------------

TITLE: Demonstrating Multiple Inheritance Limitations in TypeScript
DESCRIPTION: This TypeScript snippet shows how attempting to use multiple inheritance results in errors. Classes B1 and B2 both define a member 'x', and class C attempts to extend both, causing a TS1174 error. Similarly, class E attempts to extend D1 and D2, resulting in another TS1174 error. Key limitations include only being able to extend a single class in TypeScript. No specific dependencies are required, but TypeScript's constraints on inheritance must be considered.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/multipleInheritance.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
    class B1 {
        public x;
    }
    
    class B2 {
        public x;
    }
    
    class C extends B1, B2 { // duplicate member
                        ~~
!!! error TS1174: Classes can only extend a single class.
    }
    
    class D1 extends B1 {
    }
    
    class D2 extends B2 {
    }
    
    class E extends D1, D2 { // nope, duplicate member
                        ~~
!!! error TS1174: Classes can only extend a single class.
    }
```

----------------------------------------

TITLE: Evolving vs Non-evolving Array Behavior in TypeScript
DESCRIPTION: This snippet illustrates the difference between evolving and non-evolving array types in TypeScript. It shows how the type of an array can change based on push operations and how this affects assignments to other variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowArrayErrors.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function f7() {
    let x = [];       // x has evolving array value
    x.push(5);
    let y = x;        // y has non-evolving array value
    x.push("hello");  // Ok
    y.push("hello");  // Error
}
```

----------------------------------------

TITLE: Legal Recursive Type Alias Definition in TypeScript
DESCRIPTION: This snippet demonstrates legal recursive type alias definitions in TypeScript. These are allowed because the recursion is broken by a function type or object type definition, avoiding infinite recursion during type checking.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/directDependenceBetweenTypeAliases.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
"type T9 = () => T9
    type T10 = { x: T10 } | { new(v: T10): string }
    type T11 = T12[]
    type T12 = [T13, string]
    type T13 = typeof zz
    var zz: { x: T11 }"
```

----------------------------------------

TITLE: Exporting Interface in TypeScript
DESCRIPTION: This snippet shows a TypeScript file successfully exporting an interface named 'A'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importSpecifiers_js.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface A {}
```

----------------------------------------

TITLE: Implicit Any Error in Class Properties and Accessors in TypeScript
DESCRIPTION: TypeScript code showing various scenarios where the compiler generates implicit 'any' type errors. The examples include a class with an untyped property and get/set accessors, a class with only a setter lacking parameter type, and a getter without a return type annotation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implicitAnyGetAndSetAccessorWithAnyReturnType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// these should be errors
class GetAndSet {
    getAndSet = null;             // error at "getAndSet"
    public get haveGetAndSet() {  // this should not be an error
        return this.getAndSet;
    }
    
    // this shouldn't be an error
    public set haveGetAndSet(value) {  // error at "value"
        this.getAndSet = value;
    }
}

class SetterOnly {
    public set haveOnlySet(newXValue) {  // error at "haveOnlySet, newXValue"
    }
}

class GetterOnly {
    public get haveOnlyGet() {  // error at "haveOnlyGet"
        return null;
    }
}
```

----------------------------------------

TITLE: Defining Functions and Methods with Object Destructuring in TypeScript
DESCRIPTION: This set of code snippets highlights how to define functions and methods in TypeScript using object destructuring with type annotations. These snippets demonstrate the assignment of default values to parameters and the explicit typing of return values using 'typeof'. While the 'string' keyword is used extensively as a type or return type, it is meant to signify type placeholders rather than JavaScript strings.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/renamingDestructuredPropertyInFunctionType.errors.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
const f2 = function({ a: string }: O) { };
```

LANGUAGE: TypeScript
CODE:
```
const f3 = ({ a: string, b, c }: O) => { };
```

LANGUAGE: TypeScript
CODE:
```
const f4 = function({ a: string }: O): typeof string { return string; };
```

LANGUAGE: TypeScript
CODE:
```
const f5 = ({ a: string, b, c }: O): typeof string => '';
```

LANGUAGE: TypeScript
CODE:
```
const obj1 = {
  method({ a: string }: O) { }
};
```

LANGUAGE: TypeScript
CODE:
```
const obj2 = {
  method({ a: string }: O): typeof string { return string; }
};
```

LANGUAGE: TypeScript
CODE:
```
function f6({ a: string = "" }: O) { }
```

LANGUAGE: TypeScript
CODE:
```
const f7 = ({ a: string = "", b, c }: O) => { };
```

LANGUAGE: TypeScript
CODE:
```
const f8 = ({ "a": string }: O) => { };
```

LANGUAGE: TypeScript
CODE:
```
function f9 ({ 2: string }) { };
```

LANGUAGE: TypeScript
CODE:
```
function f10 ({ ["a"]: string }: O) { };
```

LANGUAGE: TypeScript
CODE:
```
const f11 =  ({ [2]: string }) => { };
```

LANGUAGE: TypeScript
CODE:
```
// In below case `string` should be kept because it is used
function f12({ a: string = "" }: O): typeof string { return "a"; }
```

----------------------------------------

TITLE: Error Cases for Method Calls with 'this' Context in TypeScript
DESCRIPTION: Demonstrates type errors when calling methods extracted from an object without preserving the required 'this' context. The contextual 'this' type is lost and becomes 'void' by default.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisTypeInFunctionsNegative.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
let implExplicitStructural = impl.explicitStructural;
implExplicitStructural(); // error, no 'a' in 'void'
~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2684: The 'this' context of type 'void' is not assignable to method's 'this' of type '{ a: number; }'.
let implExplicitInterface = impl.explicitInterface;
implExplicitInterface(); // error, no 'a' in 'void' 
~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2684: The 'this' context of type 'void' is not assignable to method's 'this' of type 'I'.
```

----------------------------------------

TITLE: Exporting Variables in TypeScript
DESCRIPTION: This snippet demonstrates exporting variables in TypeScript. It exports four variables: 'a', 'x', 'z', and 'z1', all initialized with the value of 'a'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ImportNamedImportMergeErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export var a = 10;
export var x = a;
export var z = a;
export var z1 = a;
```

----------------------------------------

TITLE: Defining and Executing a Function in TypeScript
DESCRIPTION: This snippet defines a function 'f' that contains variable declarations, loops, conditional statements, and error handling using try-catch blocks. It performs arithmetic operations and modifies object properties based on certain conditions. The snippet demonstrates TypeScript's handling of both control structures and error management.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationStatements.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f() {
    var y;
    var x = 0;
    for (var i = 0; i < 10; i++) {
        x += i;
        x *= 0;
    }
    if (x > 17) {
        x /= 9;
    } else {
        x += 10;
        x++;
    }
    var a = [
        1,
        2,
        3
    ];
    var obj = {
        z: 1,
        q: "hello"
    };
    for (var j in a) {
        obj.z = a[j];
        var v = 10;
    }
    try {
        obj.q = "ohhh";
    } catch (e) {
        if (obj.z < 10) {
            obj.z = 12;
        } else {
            obj.q = "hmm";
        }
    }
    try {
        throw new Error();
    } catch (e1) {
        var b = e1;
    } finally {
        y = 70;
    }
    with (obj) {
        ~~~~~~~~~~
!!! error TS2410: The 'with' statement is not supported. All symbols in a 'with' block will have type 'any'.
        i = 2;
        z = 10;
    }
    switch (obj.z) {
        case 0: {
            x++;
            break;
        }
        case 1: {
            x--;
            break;
        }
        default: {
            x *= 2;
            x = 50;
            break;
        }
    }
    while (x < 10) {
        x++;
    }
    do {
        x--;
    } while (x > 4)
    x = y;
    var z = (x == 1) ? x + 1 : x - 1;
    (x == 1) ? x + 1 : x - 1;
    x === 1;
    x = z = 40;
    eval("y");
    return;
}
```

----------------------------------------

TITLE: Import Error with CommonJS Module in TypeScript
DESCRIPTION: Shows how a CommonJS module in TypeScript tries to import an ECMAScript module, resulting in an error due to incompatible import methods. Suggests using a dynamic import instead.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesCJSResolvingToESM3_modulePackageJson.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import {} from "./module.mjs";
```

----------------------------------------

TITLE: Package Configuration: package.json for @types/foo
DESCRIPTION: Defines the package metadata and exports for the `@types/foo` type declaration package. It specifies different entry points for import and require contexts using the "exports" field.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolutionModeTripleSlash2.errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
    {
      "name": "@types/foo",
      "version": "1.0.0",
      "exports": {
        ".": {
          "import": "./index.d.mts",
          "require": "./index.d.cts"
        }
      }
    }
```

----------------------------------------

TITLE: Unreachable Code Detection in Switch Statements (TypeScript)
DESCRIPTION: This function uses a switch statement with a union type parameter. It demonstrates potential unreachable code and fallthrough cases, which TypeScript identifies as errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reachabilityChecks4.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
declare function noop(): void;
declare function fail(): never;

function f1(x: 0 | 1 | 2) {
    switch (x) {
        case 0:
            fail();
        case 1:
            noop();
        case 2:
            return;
    }
}
```

----------------------------------------

TITLE: Using await with undefined in non-async function
DESCRIPTION: This function attempts to use await with undefined in a non-async function, which triggers a TypeScript error. The compiler suggests marking the function as async to resolve the issue.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitLiteralValues.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
function awaitUndefined() {
    await undefined;
}
```

----------------------------------------

TITLE: Object Property Presence Check - TypeScript
DESCRIPTION: Function foo checks if a property 'prop' exists within a non-null object parameter value, demonstrating practical type checking in TypeScript's type system.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=true).errors.txt#2025-04-21_snippet_17

LANGUAGE: typescript
CODE:
```
function foo<A>(value: A) {
    if (typeof value === "object" && value !== null && "prop" in value) {
        value;  // A & object & Record<"prop", unknown>
    }
}
```

----------------------------------------

TITLE: Error Handling in Derived Class Constructors
DESCRIPTION: Illustrates different error scenarios involving method calls and conditional super() invocation in derived class constructors, highlighting TypeScript's type safety mechanisms.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkSuperCallBeforeThisAccess.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export class Foo {
    constructor(value: number) {}
}

export class BarCorrectlyFails extends Foo {
    constructor(something: boolean) {
        if (!something) {
            const value = this.bar();  // Error
            super(value);
        }
        else {
            super(1337);
        }
    }
    bar(): number { return 4; }
}
```

----------------------------------------

TITLE: Defining ADT Union Type in TypeScript
DESCRIPTION: This snippet defines an Algebraic Data Type (ADT) using a union of object types with a 'tag' discriminant. It demonstrates how TypeScript handles excess properties and missing required properties in union types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/excessPropertyCheckWithUnions.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
type ADT = {
    tag: "A",
    a1: string
} | {
    tag: "D",
    d20: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20
} | {
    tag: "T",
}
let wrong: ADT = { tag: "T", a1: "extra" }
wrong = { tag: "A", d20: 12 }
wrong = { tag: "D" }
```

----------------------------------------

TITLE: Defining Overloads with Constant Arguments in TypeScript
DESCRIPTION: This snippet demonstrates a TypeScript function defined with overloads using constant string types. It exhibits inheritance through a base class and derived classes with different methods. The code attempts to use a string not defined in overload signatures, resulting in a TypeScript error due to incompatible signatures. The prerequisites are understanding of inheritance in TypeScript and overloads.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadOnConstantsInvalidOverload1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Base { foo() { } }
    class Derived1 extends Base { bar() { } }
    class Derived2 extends Base { baz() { } }
    class Derived3 extends Base { biz() { } }
    
    function foo(name: "SPAN"): Derived1;
             ~~~
    
    function foo(name: "DIV"): Derived2 {
        return null;
    }
    
    foo("HI");
        ~~~~
```

----------------------------------------

TITLE: Optional Parameter Functions with Array Types in TypeScript
DESCRIPTION: Defines functions with optional array parameters and boolean flags, demonstrating complex parameter configurations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/optionalParamArgsTest.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
function fnOpt1(id: number, children: number[] = [], expectedPath: number[] = [], isRoot?: boolean): void {}
function fnOpt2(id: number, children?: number[], expectedPath?: number[], isRoot?: boolean): void {}
```

----------------------------------------

TITLE: Tuple Indexing Error: Index Out of Bounds
DESCRIPTION: This snippet demonstrates accessing an element at an index beyond the length of the tuple. TypeScript correctly identifies this as an error, indicating that the tuple does not have an element at the specified index.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indexerWithTuple.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    var strNumTuple: [string, number] = ["foo", 10];
    var ele12 = strNumTuple[2]; // string | number
                            ~
!!! error TS2493: Tuple type '[string, number]' of length '2' has no element at index '2'.
```

----------------------------------------

TITLE: Invalid Comparison Operations in TypeScript
DESCRIPTION: Demonstrates type checking errors when comparing objects of different classes with incompatible property types or access modifiers. Includes examples of all comparison operators (<, >, <=, >=, ==, !=, ===, !==) showing type safety enforcement.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/comparisonOperatorWithNoRelationshipObjectsOnProperty.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A1 {
    public a: number;
}

class B1 {
    public a: string;
}

class A2 {
    private a: string;
}

class B2 {
    private a: string;
}

var a1: A1;
var b1: B1;
var a2: A2;
var b2: B2;

// operator <
var r1a1 = a1 < b1;
var r1a2 = a2 < b2;

var r1b1 = b1 < a1;
var r1b2 = b2 < a2;

// operator >
var r2a1 = a1 > b1;
var r2a2 = a2 > b2;

var r2b1 = b1 > a1;
var r2b2 = b2 > a2;

// operator <=
var r3a1 = a1 <= b1;
var r3a2 = a2 <= b2;

var r3b1 = b1 <= a1;
var r3b2 = b2 <= a2;

// operator >=
var r4a1 = a1 >= b1;
var r4a2 = a2 >= b2;

var r4b1 = b1 >= a1;
var r4b2 = b2 >= a2;

// operator ==
var r5a1 = a1 == b1;
var r5a2 = a2 == b2;

var r5b1 = b1 == a1;
var r5b2 = b2 == a2;

// operator !=
var r6a1 = a1 != b1;
var r6a2 = a2 != b2;

var r6b1 = b1 != a1;
var r6b2 = b2 != a2;

// operator ===
var r7a1 = a1 === b1;
var r7a2 = a2 === b2;

var r7b1 = b1 === a1;
var r7b2 = b2 === a2;

// operator !==
var r8a1 = a1 !== b1;
var r8a2 = a2 !== b2;

var r8b1 = b1 !== a1;
```

----------------------------------------

TITLE: Handling Partial and Nearly Partial Fields in Object Spread Operations in TypeScript
DESCRIPTION: This function demonstrates the difference in behavior between spreading Partial<Fields> and a custom NearlyPartialFields type. It shows how TypeScript handles undefined in optional properties differently from explicitly defined undefined union types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectSpreadStrictNull.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
interface Fields {
    foo: number;
    bar: string;
}
interface NearlyPartialFields {
    foo: number | undefined;
    bar: string | undefined;
}
function g(fields: Fields, partialFields: Partial<Fields>, nearlyPartialFields: NearlyPartialFields) {
    // ok, undefined is stripped from optional properties when spread
    fields = { ...fields, ...partialFields };
    // error: not optional, undefined remains
    fields = { ...fields, ...nearlyPartialFields };
}
```

----------------------------------------

TITLE: Defining JSX Module and Element Interfaces in TypeScript
DESCRIPTION: This snippet declares the JSX module with interfaces for Element, IntrinsicElements, and ElementAttributesProperty. It provides type definitions for React JSX syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution14.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare module JSX {
	interface Element { }
	interface IntrinsicElements {
        div: any;
	}
    interface ElementAttributesProperty { prop: any }
}
```

----------------------------------------

TITLE: Using this Parameter in Function Type Aliases F1, F2 and Union Variable f1 in TypeScript
DESCRIPTION: Defines function type aliases F1 and F2 requiring specific 'this' contexts (A and B respectively). A variable 'f1' is declared as a union of F1 and F2. Calling 'f1()' without a specified 'this' context results in a type error because 'void' is not assignable to the required 'this' types (A & B).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionTypeCallSignatures6.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
type F1 = (this: A) => void;
type F2 = (this: B) => void;
declare var f1: F1 | F2;
f1(); // error
```

----------------------------------------

TITLE: Importing and Using Type-Only Exports
DESCRIPTION: Demonstrates errors when trying to use classes A and B as values (with 'new') after they were exported as type-only, while C works as expected because it was also exported as a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace7.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { A, B, C } from "./b";
let _: A = new A();  // Error
let __: B = new B(); // Error
let ___: C = new C(); // Ok
```

----------------------------------------

TITLE: Logging Primary Robot Skill in TypeScript
DESCRIPTION: A code snippet that logs the primary skill of a robot object to the console. The function appears to take a parameter with a Robot type that includes skills with primary and secondary properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringParameterNestedObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
console.log(skills.primary);
```

----------------------------------------

TITLE: Invalid Parameter Property in Setter Method - TypeScript
DESCRIPTION: Example showing incorrect usage of parameter property modifier 'public' in a class setter method. Parameter properties are only allowed in constructor parameters, not in other methods or accessors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/MemberAccessorDeclaration15.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
   set Foo(public a: number) { }
}
```

----------------------------------------

TITLE: TypeScript Property Spread and Interface Implementation
DESCRIPTION: Example demonstrating TypeScript's handling of object destructuring, property renaming, and spread operations. Shows type checking with multiple interfaces and optional properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/excessPropertyCheckWithSpread.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function f({ a: number }): void
interface I {
    readonly n: number;
}
declare let i: I;
f({ a: 1, ...i });

interface R {
    opt?: number
}
interface L {
    opt: string
}
declare let l: L;
declare let r: R;
f({ a: 1, ...l, ...r });
```

----------------------------------------

TITLE: Destructuring Assignment in For Loop - TypeScript
DESCRIPTION: Performs a destructuring assignment within a for loop, extracting 'name' and nested 'skills' properties from an object (presumably 'multiRobot') and assigning them to variables 'nameA', 'primaryA', and 'secondaryA'. Default values are provided for all extracted properties and the nested 'skills' object itself.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_64

LANGUAGE: TypeScript
CODE:
```
for ({
    name: nameA = "noName",
        skills: {
            primary: primaryA = "primary",
            secondary: secondaryA = "secondary"
        } = { primary: "none", secondary: "none" }
    } =
          multiRobot
```

----------------------------------------

TITLE: Initializing Arrays with ||= and ??= Operators in TypeScript
DESCRIPTION: Functions demonstrating four different patterns for initializing a possibly undefined array parameter before pushing a value to it. The first two use compound assignment with OR (||=) and nullish coalescing (??=) operators, while the last two separate the initialization and push operations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment4(target=es2015).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo1(results: number[] | undefined) {
    (results ||= []).push(100);
}

function foo2(results: number[] | undefined) {
    (results ??= []).push(100);
}

function foo3(results: number[] | undefined) {
    results ||= [];
    results.push(100);
}

function foo4(results: number[] | undefined) {
    results ??= [];
    results.push(100);
}
```

----------------------------------------

TITLE: Keyof and Indexed Access with Functions
DESCRIPTION: Defines functions such as getProperty and setProperty that utilize the keyof and indexed access types to dynamically access properties of objects in a type-safe manner. Demonstrates these concepts through functions like f10, f20, and others that showcase the flexibility and limitations of this pattern.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function getProperty<T, K extends keyof T>(obj: T, key: K) {
    return obj[key];
}

function setProperty<T, K extends keyof T>(obj: T, key: K, value: T[K]) {
    obj[key] = value;
}
```

----------------------------------------

TITLE: Demonstrating String Literal Type Constraints in TypeScript Generic Functions
DESCRIPTION: This code demonstrates TypeScript's type checking with string literal types in generic functions. It shows various error cases when trying to use values of type 'string' where specific string literals like '"Hello"' are required, and when trying to use one string literal where another is expected.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeArgumentsWithStringLiteralTypes01.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function randBool(): boolean;
declare function takeReturnString(str: string): string;
declare function takeReturnHello(str: "Hello"): "Hello";
declare function takeReturnHelloWorld(str: "Hello" | "World"): "Hello" | "World";

function fun1<T>(x: T, y: T) {
    return randBool() ? x : y;
}

function fun2<T, U>(x: T, y: U) {
    return randBool() ? x : y;
}

function fun3<T>(...args: T[]): T {
    return args[+randBool()];
}

namespace n1 {
    // The following should all come back as strings.
    // They should be assignable to/from something of a type 'string'.
    // They should not be assignable to either "Hello" or "World".
    export let a = fun1("Hello", "World");
    export let b = fun1("Hello", "Hello");
    export let c = fun2("Hello", "World");
    export let d = fun2("Hello", "Hello");
    export let e = fun3("Hello", "Hello", "World", "Foo");

    // Should be valid
    a = takeReturnString(a);
    b = takeReturnString(b);
    c = takeReturnString(c);
    d = takeReturnString(d);
    e = takeReturnString(e);
    
    // Passing these as arguments should cause an error.
    a = takeReturnHello(a);
    b = takeReturnHello(b);
    c = takeReturnHello(c);
    d = takeReturnHello(d);
    e = takeReturnHello(e);

    // Passing these as arguments should cause an error.
    a = takeReturnHelloWorld(a);
    b = takeReturnHelloWorld(b);
    c = takeReturnHelloWorld(c);
    d = takeReturnHelloWorld(d);
    e = takeReturnHelloWorld(e);
}

namespace n2 {
    // The following (regardless of errors) should come back typed
    // as "Hello" (or "Hello" | "Hello").
    export let a = fun1<"Hello">("Hello", "Hello");
    export let b = fun1<"Hello">("Hello", "World");
    export let c = fun2<"Hello", "Hello">("Hello", "Hello");
    export let d = fun2<"Hello", "Hello">("Hello", "World");
    export let e = fun3<"Hello">("Hello", "World");

    // Assignment from the returned value should cause an error.
    a = takeReturnString(a);
    b = takeReturnString(b);
    c = takeReturnString(c);
    d = takeReturnString(d);
}
```

----------------------------------------

TITLE: Simple Hash Table Implementation
DESCRIPTION: Implements a simple hash table with `lookup` and `add` functions.  Uses two arrays, `keys` and `values`, to store key-value pairs at corresponding indices. `lookup` searches for a key and returns the associated data, while `add` adds a new key-value pair if the key doesn't already exist.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserRealSource4.errors.txt#2025-04-21_snippet_7

LANGUAGE: TypeScript
CODE:
```
        // Simple Hash table with list of keys and values matching each other at the given index
        export class SimpleHashTable {
            private keys = [];
            private values = [];
    
            public lookup(key, findValue?: boolean) {
                var searchArray = this.keys;
                if (findValue) {
                    searchArray = this.values;
                }
    
                for (var i = 0; i < searchArray.length; i++) {
                    if (searchArray[i] == key) {
                        return {
                            key: this.keys[i],
                            data: this.values[i],
                        };
                    }
                }
                return null;
            }
    
            public add(key, data): boolean {
                var lookupData = this.lookup(key);
                if (lookupData) {
                    return false;
                }
    
                this.keys[this.keys.length] = key;
                this.values[this.values.length] = data;
    
                return true;
            }
        }
    
    }
```

----------------------------------------

TITLE: Importing and Using Timestamp Function with Destructuring
DESCRIPTION: Implementation file demonstrating destructured import of the now function, also resulting in a serialization error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitMappedTypeTemplateTypeofSymbol.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { now } from "./a";

export const timestamp = now();
```

----------------------------------------

TITLE: Private Readonly Property Base Class
DESCRIPTION: Class D implements a private readonly property 'x' as a constructor parameter property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/readonlyConstructorAssignment.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
class D {
    constructor(private readonly x: number) {
        this.x = 0;
    }
}
```

----------------------------------------

TITLE: Demonstrating TypeScript Inheritance Type Errors
DESCRIPTION: This code illustrates type compatibility issues in TypeScript inheritance. It shows how derived classes with incompatible property and method return types trigger TypeScript errors. The example demonstrates both class extension and interface implementation scenarios.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/baseClassImprovedMismatchErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Base {
    n: Base | string;
    fn() {
        return 10;
    }
}
class Derived extends Base {
    n: Derived | string;
    fn() {
        return 10 as number | string;
    }
}
class DerivedInterface implements Base {
    n: DerivedInterface | string;
    fn() {
        return 10 as number | string;
    }
}
```

----------------------------------------

TITLE: Demonstrating Implicit Any Type Errors in TypeScript
DESCRIPTION: This code snippet shows various cases where TypeScript reports errors for implicit 'any' types, including variable declarations, object literals, function parameters, and function expressions. It also includes examples of code that doesn't trigger errors when 'any' type is explicitly provided.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implicitAnyFunctionInvocationWithAnyArguements.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// this should be errors
var arg0 = null;  // error at "arg0"
var anyArray = [null, undefined];  // error at array literal
var objL: { v; w; }             // error at "y,z"
var funcL: (y2) => number;
function temp1(arg1) { }  // error at "temp1"
function testFunctionExprC(subReplace: (s: string, ...arg: any[]) => string) { }
function testFunctionExprC2(eq: (v1: any, v2: any) => number) { };
function testObjLiteral(objLit: { v: any; w: any }) { }; 
function testFuncLiteral(funcLit: (y2) => number) { };

// this should not be an error
testFunctionExprC2((v1, v2) => 1);
testObjLiteral(objL);
testFuncLiteral(funcL);

var k = temp1(null);
var result = temp1(arg0);
var result1 = temp1(anyArray);

function noError(variable: any, array?: any) { }
noError(null, []);
noError(undefined, <any>[]);
noError(null, [null, undefined]);
noError(undefined, anyArray);

class C {
    constructor(emtpyArray: any, variable: any) {
    }
}

var newC = new C([], undefined);
var newC1 = new C([], arg0);
var newC2 = new C(<any>[], null)
```

----------------------------------------

TITLE: Schema Type Definitions and Property Checks in TypeScript
DESCRIPTION: Defines recursive schema types for validating object structures with boolean properties. Demonstrates type errors when trying to add invalid properties to schema objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/excessPropertyCheckIntersectionWithRecursiveType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type Request = { l1: { l2: boolean } };
type Example<T> = { ex?: T | null };

type Schema1<T> = (T extends boolean ? { type: 'boolean'; } : { props: { [P in keyof T]: Schema1<T[P]> }; }) & Example<T>;

export const schemaObj1: Schema1<Request> = {
  props: {
    l1: {
      props: {
        l2: { type: 'boolean' },
        invalid: false,
      },
    },
  },
}
```

----------------------------------------

TITLE: Override Modifier Error in JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates the TS8009 error. The 'override' modifier is used in a JavaScript file which is invalid, as the modifier is specific to TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/override_js3.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
class B {
        foo (v) {}
        fooo (v) {}
    }
    
    class D extends B {
        override foo (v) {}
        
        /** @override */
        fooo (v) {}
    }
```

----------------------------------------

TITLE: Assignment Demonstrating Type Compatibility Error - TypeScript
DESCRIPTION: This snippet shows an assignment attempt where an object of an interface with optional properties is assigned to a variable of a class with required properties, leading to a TypeScript error due to type incompatibility. The error highlights the difference in expected properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability39.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
__test2__.__val__x2 = __test1__.__val__obj4

```

----------------------------------------

TITLE: Importing Modules in ESM Format (index.js)
DESCRIPTION: This snippet demonstrates importing modules in ESM format. It includes imports from 'package' and 'inner' namespaces with different module types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackageExports(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
// esm format file
import * as cjs from "package/cjs";
import * as mjs from "package/mjs";
import * as type from "package";
cjs;
mjs;
type;
import * as cjsi from "inner/cjs";
import * as mjsi from "inner/mjs";
import * as typei from "inner";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: Errors with Props on Components without Defined Props in TypeScript
DESCRIPTION: This snippet shows TypeScript errors when trying to use props on a component that doesn't define any props (EmptyPropSFC). It illustrates that props like 'prop1' and 'ref' are not allowed on components without explicit prop definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponents1.errors.txt#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
// Error
let i = <EmptyPropSFC prop1 />
let i1 = <EmptyPropSFC ref={x => x.greeting.substr(10)} />

let o = {
    prop1: true;
}

// OK as access properties are allow when spread
let i2 = <EmptyPropSFC {...o} />
```

----------------------------------------

TITLE: Demonstrating 'let' Variable Capture in For-of Loop
DESCRIPTION: This function demonstrates the use of 'let' in a for-of loop, capturing the loop variable in closures and comparing it. It showcases variable scoping and closure behavior in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop5_ES6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function foo0(x) {
    for (let x of []) {
        var v = x;
        (function() { return x + v });
        (() => x + v);
        if (x == 1) {
            return;
        }
    }

    use(v);
}
```

----------------------------------------

TITLE: Demonstrating Illegal Super Calls in TypeScript Class Constructors
DESCRIPTION: This code shows various error cases for super() calls in derived classes. It demonstrates that constructors for derived classes must contain a direct super() call, and that super() cannot be called from nested functions, arrow functions, or object methods within constructors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/illegalSuperCallsInConstructor.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base {
    x: string;
}
 
class Derived extends Base {
    constructor() {
        var r2 = () => super();
        var r3 = () => { super(); }
        var r4 = function () { super(); }
        var r5 = {
            get foo() {
                super();
                return 1;
            },
            set foo(v: number) {
                super();
            }
        }
    }
}
```

----------------------------------------

TITLE: Defining and Assigning Enum Types in TypeScript
DESCRIPTION: This snippet defines two enum types (E and Computed) and tests various assignment scenarios. It demonstrates TypeScript's type checking for enum assignments, including assigning numeric values to enum types and specific enum members.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enumAssignmentCompat5.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
enum E {
    A, B, C
}
enum Computed {
    A = 1 << 1,
    B = 1 << 2,
    C = 1 << 3,
}
let n: number;
let e: E = n; // ok because it's too inconvenient otherwise
e = 0; // ok, in range
e = 4; // ok, out of range, but allowed computed enums don't have all members
let a: E.A = 0; // ok, A === 0
a = 2; // error, 2 !== 0
a = n; // ok

let c: Computed = n; // ok
c = n; // ok
c = 4; // ok
let ca: Computed.A = 1; // error, Computed.A isn't a literal type because Computed has no enum literals
```

----------------------------------------

TITLE: Declaring a Function in TypeScript Module
DESCRIPTION: This code snippet declares a function named 'fun' within a TypeScript module ('mod.cts') and exports it as the default export. This allows the function to be imported and used in other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleNodeDefaultImports(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    declare function fun(): void;
    export default fun;
```

----------------------------------------

TITLE: Inferring Common Property Type
DESCRIPTION: Defines a type `X2<T>` that infers a common type `U` from properties `a` and `b` of type `T`. If `T` has both properties `a` and `b` with the same type `U`, then `X2<T>` resolves to `U`; otherwise, it resolves to `never`. It shows how to use it with `{}`, `{ a: string }`, `{ a: string, b: string }`, `{ a: number, b: string }`, and `{ a: number, b: string, c: boolean }`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypes1.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
    type X2<T> = T extends { a: infer U, b: infer U } ? U : never;
    
    type T40 = X2<{}>;  // never
    type T41 = X2<{ a: string }>;  // never
    type T42 = X2<{ a: string, b: string }>;  // string
    type T43 = X2<{ a: number, b: string }>;  // string | number
    type T44 = X2<{ a: number, b: string, c: boolean }>;  // string | number
```

----------------------------------------

TITLE: Base Package Configuration for ES Module
DESCRIPTION: This JSON snippet defines a package.json file with the package name 'package', set to private and as a module type in node.js. It is crucial to specify the module type to ensure Node.js processes files with the correct module system.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportHelpersCollisions3(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Package Configuration (package.json)
DESCRIPTION: Configures the main package as an ES module with the "type": "module" field. Sets the package as private.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExports(module=nodenext).errors.txt#2025-04-21_snippet_5

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: TypeScript Functions with Referenced Aliases
DESCRIPTION: Shows functions where destructured aliases are properly used in the function body or signature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitBindingPatternsUnused.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
function referencedInCode({ name: alias }: Named) {
    return alias;
}

function referencedInSignarture({ name: alias }: Named): typeof alias {
    return alias;
}

function referencedInSignartureKeyword({ function: alias }: { function: string }): typeof alias {
    return null!;
}

function referencedInInferredType({ name: alias }: Named) {
    type Named2 = { name: typeof alias }
    return null! as Named2
}

function referencedInNestedFunction({ name: alias }: Named) {
    return function(p: typeof alias) {

    }
}

function referencedNestedAlias({ p: { name: alias } }: { p: Named }): typeof alias {
	return alias;
}

function referencedArrayAlias([a, b, { name: alias }]: Named[]): typeof alias {
	return alias;
}
```

----------------------------------------

TITLE: TypeScript Error: Cannot find name
DESCRIPTION: This snippet shows a TypeScript error (TS2304) that occurs when the compiler cannot find a type name referenced within a JSDoc typedef.  The error indicates that 'CantResolveThis' is not a recognized type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocResolveNameFailureInTypedef.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
"/a.js(7,14): error TS2304: Cannot find name 'CantResolveThis'."
```

----------------------------------------

TITLE: Negative 'in' Check with Multiple Classes
DESCRIPTION: Demonstrates the negative use case of the 'in' operator with multiple classes (A, B, C, and D). When 'a' is present in 'x', the code attempts to access 'x.b', which results in a TypeScript error because the type is narrowed to A | C | D which do not have property 'b'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=false).errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
"class C { a: string; }\nclass D { a: string; }\n\nfunction negativeMultipleClassesTest(x: A | B | C | D) {\n    if ("a" in x) {\n        x.b = \"1\";\n    } else {\n        x.a = \"1\";\n    }\n}"
```

----------------------------------------

TITLE: Defining Interface and Class Implementation in TypeScript
DESCRIPTION: This snippet defines an interface 'i1' with a property 'name'. It demonstrates how class 'C1' correctly implements this interface, while classes 'C2', 'C5', and 'C6' incorrectly implement it due to private access modifiers on 'name', which causes compilation errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceImplementation8.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface i1 {
    name: string;
}

class C1 implements i1 {
    public name:string;
}

class C2 implements i1 {
      ~~
!!! error TS2420: Class 'C2' incorrectly implements interface 'i1'.
!!! error TS2420:   Property 'name' is private in type 'C2' but not in type 'i1'.
    private name:string;
}

class C3 {
    private name:any;
}

class C4 extends C1 implements i1{ }
class C5 extends C2 implements i1{ }
      ~~
!!! error TS2420: Class 'C5' incorrectly implements interface 'i1'.
!!! error TS2420:   Property 'name' is private in type 'C2' but not in type 'i1'.
class C6 extends C3 implements i1{ }
      ~~
!!! error TS2420: Class 'C6' incorrectly implements interface 'i1'.
!!! error TS2420:   Property 'name' is private in type 'C3' but not in type 'i1';
```

----------------------------------------

TITLE: TypeScript Interface Function Assignment Error
DESCRIPTION: Demonstrates a type error when attempting to assign a string value to a property that is typed as a function taking a number parameter and returning a boolean. The error occurs because the types are incompatible.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignToFn.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module M {
    interface I {
	f(n:number):boolean;
    }

    var x:I={ f:function(n) { return true; } };

    x.f="hello";
}
```

----------------------------------------

TITLE: Excess Property Checks with Multiple Discriminable Properties
DESCRIPTION: This snippet shows how TypeScript handles excess property checks when there are multiple discriminable properties. It demonstrates that all discriminable properties must match for the check to pass.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/excessPropertyCheckWithUnions.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
type Button = { tag: 'button'; type?: 'submit'; };
type Anchor = { tag: 'a'; type?: string; href: string };

type Union = Button | Anchor;
const obj: Union = {
    tag: 'button',
    type: 'submit',

    // should have error here
    href: 'foo',
};
```

----------------------------------------

TITLE: Defining TypeScript Classes and Modules with Generic Methods
DESCRIPTION: This code snippet defines multiple TypeScript modules and classes with methods that return complex generic types. Each method follows a similar pattern of declaring a variable, defining an arrow function, and returning the variable.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_43

LANGUAGE: TypeScript
CODE:
```
module daubentonii {
    export class arboreus<T0, T1> {
        capreolus(): rendalli.crenulata<samarensis.pelurus<Lanthanum.jugularis, ruatanica.americanus>, lavali.wilsoni> { var x: rendalli.crenulata<samarensis.pelurus<Lanthanum.jugularis, ruatanica.americanus>, lavali.wilsoni>; () => { var y = this; }; return x; }
        moreni(): panglima.abidi<julianae.galapagoensis, dogramacii.koepckeae> { var x: panglima.abidi<julianae.galapagoensis, dogramacii.koepckeae>; () => { var y = this; }; return x; }
        hypoleucos(): nigra.gracilis<trivirgatus.falconeri, argurus.germaini> { var x: nigra.gracilis<trivirgatus.falconeri, argurus.germaini>; () => { var y = this; }; return x; }
        paedulcus(): minutus.portoricensis { var x: minutus.portoricensis; () => { var y = this; }; return x; }
        pucheranii(): samarensis.fuscus<julianae.durangae, caurinus.megaphyllus> { var x: samarensis.fuscus<julianae.durangae, caurinus.megaphyllus>; () => { var y = this; }; return x; }
        stella(): julianae.oralis<lutreolus.foina, quasiater.carolinensis> { var x: julianae.oralis<lutreolus.foina, quasiater.carolinensis>; () => { var y = this; }; return x; }
        brasiliensis(): imperfecta.subspinosus { var x: imperfecta.subspinosus; () => { var y = this; }; return x; }
        brevicaudata(): trivirgatus.oconnelli { var x: trivirgatus.oconnelli; () => { var y = this; }; return x; }
        vitticollis(): dogramacii.koepckeae { var x: dogramacii.koepckeae; () => { var y = this; }; return x; }
        huangensis(): caurinus.psilurus { var x: caurinus.psilurus; () => { var y = this; }; return x; }
        cameroni(): petrophilus.rosalia<dammermani.siberu<imperfecta.lasiurus<lutreolus.foina, dammermani.melanops>, imperfecta.ciliolabrum<Lanthanum.megalonyx, petrophilus.minutilla>>, caurinus.psilurus> { var x: petrophilus.rosalia<dammermani.siberu<imperfecta.lasiurus<lutreolus.foina, dammermani.melanops>, imperfecta.ciliolabrum<Lanthanum.megalonyx, petrophilus.minutilla>>, caurinus.psilurus>; () => { var y = this; }; return x; }
        tianshanica(): howi.marcanoi { var x: howi.marcanoi; () => { var y = this; }; return x; }
    }
}

module patas {
    export class uralensis {
        cartilagonodus(): Lanthanum.nitidus<rionegrensis.caniventer, Lanthanum.jugularis> { var x: Lanthanum.nitidus<rionegrensis.caniventer, Lanthanum.jugularis>; () => { var y = this; }; return x; }
        pyrrhinus(): lavali.beisa { var x: lavali.beisa; () => { var y = this; }; return x; }
        insulans(): Lanthanum.jugularis { var x: Lanthanum.jugularis; () => { var y = this; }; return x; }
        nigricauda(): caurinus.johorensis<Lanthanum.nitidus<petrophilus.minutilla, julianae.sumatrana>, Lanthanum.jugularis> { var x: caurinus.johorensis<Lanthanum.nitidus<petrophilus.minutilla, julianae.sumatrana>, Lanthanum.jugularis>; () => { var y = this; }; return x; }
        muricauda(): panglima.fundatus<lutreolus.foina, dammermani.siberu<lutreolus.punicus, julianae.acariensis>> { var x: panglima.fundatus<lutreolus.foina, dammermani.siberu<lutreolus.punicus, julianae.acariensis>>; () => { var y = this; }; return x; }
        albicaudus(): sagitta.stolzmanni { var x: sagitta.stolzmanni; () => { var y = this; }; return x; }
        fallax(): ruatanica.hector<lutreolus.punicus, gabriellae.amicus> { var x: ruatanica.hector<lutreolus.punicus, gabriellae.amicus>; () => { var y = this; }; return x; }
        attenuata(): macrorhinos.marmosurus<ruatanica.americanus, argurus.netscheri<quasiater.carolinensis, dogramacii.kaiseri>> { var x: macrorhinos.marmosurus<ruatanica.americanus, argurus.netscheri<quasiater.carolinensis, dogramacii.kaiseri>>; () => { var y = this; }; return x; }
        megalura(): howi.marcanoi { var x: howi.marcanoi; () => { var y = this; }; return x; }
        neblina(): samarensis.pelurus<macrorhinos.daphaenodon, rionegrensis.caniventer> { var x: samarensis.pelurus<macrorhinos.daphaenodon, rionegrensis.caniventer>; () => { var y = this; }; return x; }
        citellus(): daubentonii.arboreus<quasiater.carolinensis, rionegrensis.caniventer> { var x: daubentonii.arboreus<quasiater.carolinensis, rionegrensis.caniventer>; () => { var y = this; }; return x; }
        tanezumi(): imperfecta.lasiurus<dogramacii.robustulus, caurinus.psilurus> { var x: imperfecta.lasiurus<dogramacii.robustulus, caurinus.psilurus>; () => { var y = this; }; return x; }
        albiventer(): rendalli.crenulata<rendalli.zuluensis, dogramacii.robustulus> { var x: rendalli.crenulata<rendalli.zuluensis, dogramacii.robustulus>; () => { var y = this; }; return x; }
    }
}

module provocax {
    export class melanoleuca extends lavali.wilsoni {
        Neodymium(): macrorhinos.marmosurus<petrophilus.sodyi<trivirgatus.falconeri, quasiater.bobrinskoi>, lutreolus.foina> { var x: macrorhinos.marmosurus<petrophilus.sodyi<trivirgatus.falconeri, quasiater.bobrinskoi>, lutreolus.foina>; () => { var y = this; }; return x; }
        baeri(): imperfecta.lasiurus<lavali.lepturus, ruatanica.americanus> { var x: imperfecta.lasiurus<lavali.lepturus, ruatanica.americanus>; () => { var y = this; }; return x; }
    }
}

module sagitta {
    export class sicarius<T0, T1> {
        Chlorine(): samarensis.cahirinus<nigra.gracilis<argurus.luctuosa, imperfecta.subspinosus>, dogramacii.robustulus> { var x: samarensis.cahirinus<nigra.gracilis<argurus.luctuosa, imperfecta.subspinosus>, dogramacii.robustulus>; () => { var y = this; }; return x; }
        simulator(): macrorhinos.marmosurus<Lanthanum.nitidus<dammermani.melanops, lavali.lepturus>, macrorhinos.marmosurus<rendalli.moojeni<panglima.amphibius<trivirgatus.falconeri, caurinus.psilurus>, gabriellae.echinatus>, sagitta.stolzmanni>> { var x: macrorhinos.marmosurus<Lanthanum.nitidus<dammermani.melanops, lavali.lepturus>, macrorhinos.marmosurus<rendalli.moojeni<panglima.amphibius<trivirgatus.falconeri, caurinus.psilurus>, gabriellae.echinatus>, sagitta.stolzmanni>>; () => { var y = this; }; return x; }
    }
}

module howi {
    export class marcanoi extends Lanthanum.megalonyx {
        formosae(): Lanthanum.megalonyx { var x: Lanthanum.megalonyx; () => { var y = this; }; return x; }
        dudui(): lutreolus.punicus { var x: lutreolus.punicus; () => { var y = this; }; return x; }
        leander(): daubentonii.nesiotes<Lanthanum.megalonyx, minutus.portoricensis> { var x: daubentonii.nesiotes<Lanthanum.megalonyx, minutus.portoricensis>; () => { var y = this; }; return x; }
        martinsi(): dogramacii.aurata { var x: dogramacii.aurata; () => { var y = this; }; return x; }
        beatrix(): imperfecta.ciliolabrum<provocax.melanoleuca, panglima.amphibius<minutus.inez<rendalli.moojeni<panglima.amphibius<trivirgatus.falconeri, caurinus.psilurus>, gabriellae.echinatus>, dogramacii.aurata>, imperfecta.ciliolabrum<quasiater.carolinensis, lavali.beisa>>> { var x: imperfecta.ciliolabrum<provocax.melanoleuca, panglima.amphibius<minutus.inez<rendalli.moojeni<panglima.amphibius<trivirgatus.falconeri, caurinus.psilurus>, gabriellae.echinatus>, dogramacii.aurata>, imperfecta.ciliolabrum<quasiater.carolinensis, lavali.beisa>>>; () => { var y = this; }; return x; }
        griseoventer(): argurus.oreas { var x: argurus.oreas; () => { var y = this; }; return x; }
        zerda(): quasiater.wattsi<julianae.oralis<julianae.steerii, lavali.lepturus>, howi.coludo<julianae.steerii, julianae.gerbillus<lavali.thaeleri, quasiater.carolinensis>>> { var x: quasiater.wattsi<julianae.oralis<julianae.steerii, lavali.lepturus>, howi.coludo<julianae.steerii, julianae.gerbillus<lavali.thaeleri, quasiater.carolinensis>>>; () => { var y = this; }; return x; }
        yucatanicus(): julianae.nudicaudus { var x: julianae.nudicaudus; () => { var y = this; }; return x; }
        nigrita(): argurus.peninsulae { var x: argurus.peninsulae; () => { var y = this; }; return x; }
        jouvenetae(): argurus.dauricus<argurus.germaini, julianae.durangae> { var x: argurus.dauricus<argurus.germaini, julianae.durangae>; () => { var y = this; }; return x; }
        indefessus(): sagitta.walkeri { var x: sagitta.walkeri; () => { var y = this; }; return x; }
        vuquangensis(): macrorhinos.daphaenodon { var x: macrorhinos.daphaenodon; () => { var y = this; }; return x; }
        Zirconium(): lavali.thaeleri { var x: lavali.thaeleri; () => { var y = this; }; return x; }
    }
}
```

----------------------------------------

TITLE: TypeScript Override Modifier Error Example
DESCRIPTION: Shows a class EB with an error due to missing override modifier on foo() method
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/override3.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class EB extends D {
    foo(): void {}
    override bar(): void {}
}
```

----------------------------------------

TITLE: Inner Module Package Export Configuration Using JSON
DESCRIPTION: This JSON snippet demonstrates the exports configuration for inner modules, emphasizing Node.js package management techniques in nested projects. Settings specify how module paths are resolved through package.json declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackageExports(module=nodenext).errors.txt#2025-04-21_snippet_5

LANGUAGE: JSON
CODE:
```
    {
        "name": "inner",
        "private": true,
        "exports": {
            "./cjs": "./index.cjs",
            "./mjs": "./index.mjs",
            ".": "./index.js"
        }
    }
```

----------------------------------------

TITLE: Corrected Imports in user.ts
DESCRIPTION: This snippet shows the corrected import statements in user.ts, resolving the previously shown errors. It imports the modules using their base names (without the '.ts', '.tsx', or '.d.ts' extensions), which is the standard approach in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionNoTsCJS.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
    // Making sure the suggested fixes are valid:
    import x2 from "./x";
    import y2 from "./y";
    import z2 from "./z";
    
```

----------------------------------------

TITLE: Basic Arrow Function Syntax in TypeScript
DESCRIPTION: Examples of simple arrow function declarations with various parameter types, including parameterless functions, single parameters, and optional parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/fatarrowfunctionsOptionalArgs.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// no params
() => 1;

// one param, no type
(arg) => 2;

// one param, no type
arg => 2;

// one param, no type with default value
(arg = 1) => 3;

// one param, no type, optional
(arg?) => 4;

// typed param
(arg: number) => 5;

// typed param with default value
(arg: number = 0) => 6;

// optional param
(arg?: number) => 7;

// var arg param
(...arg: number[]) => 8;
```

----------------------------------------

TITLE: Defining Class and Variables with Implicit Any Parameters in TypeScript
DESCRIPTION: This snippet defines a class C and several variables with function types. The function types have parameters without explicit type annotations, causing TypeScript compilation errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyNamelessParameter.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C { }
declare var a: { m(...string): void }
declare var b: (string, C) => void;
declare var c: { (C, number): void };
declare var d: { m(boolean, C, object, undefined): void }
// note: null and void do not parse correctly without a preceding parameter name
```

----------------------------------------

TITLE: Incomplete Interface Implementation in TypeScript
DESCRIPTION: Demonstrates a TypeScript error case where class C4 fails to implement interface I1 correctly by missing the required 'iAny' property. The code shows the interface definition and an incomplete class implementation that generates a compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceImplementation3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I1 {
    iObj:{ };
    iNum:number;
    iAny:any;
    iFn():void;
}

class C4 implements I1 {
    public iObj:{ };
    public iNum:number;
    public iFn() { }
}
```

----------------------------------------

TITLE: Root Package.json Configuration (ESM)
DESCRIPTION: This package.json file configures the project to use ECMAScript modules by setting `type` to `module`. This setting affects how TypeScript interprets `export` statements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportAssignments(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Type Definitions in TypeScript
DESCRIPTION: Defines function and interface types with different parameter types (void, undefined, unknown, any)
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callWithMissingVoidUndefinedUnknownAnyInJs(strict=false).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function f1(p: void): void;
declare function f2(p: undefined): void;
declare function f3(p: unknown): void;
declare function f4(p: any): void;

interface I<T> { m(p: T): void; }
declare const o1: I<void>;
declare const o2: I<undefined>;
declare const o3: I<unknown>;
declare const o4: I<any>;
```

----------------------------------------

TITLE: Exporting Constants in TypeScript
DESCRIPTION: Each snippet exports a constant using TypeScript or JavaScript with various module formats such as '.ts', '.mts', '.cts', and '.mjs'. This standard export method enables constants to be accessible in other modules. No specific dependencies are required, and the export syntax is consistent across the types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/impliedNodeFormatEmit1(module=umd).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const _ = 0;
```

----------------------------------------

TITLE: Uninitialized Properties Error Handling in TypeScript
DESCRIPTION: This snippet includes examples of classes, Foo1 and Foo2, which generate errors due to uninitialized properties. The comment `// Error` highlights lines causing `TS2564` where property `x` lacks an initializer. Constructors are provided to illustrate partial instantiation conditions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowingOfDottedNames.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// Repro from #28100

class Foo1
{
    x: number;  // Error
    ~
!!! error TS2564: Property 'x' has no initializer and is not definitely assigned in the constructor.
    constructor() {
        if (this instanceof Boolean) {
        }
    }
}

class Foo2
{
    x: number;  // Error
    ~
!!! error TS2564: Property 'x' has no initializer and is not definitely assigned in the constructor.
    constructor() {
    }
}
```

----------------------------------------

TITLE: JavaScript Source Map Generation
DESCRIPTION: This snippet presents the source map URL for the generated JavaScript file. Source maps are used by browsers and debuggers to map the compiled JavaScript code back to the original TypeScript source code, aiding in debugging.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithMapFileAsJsWithInlineSourceMap.sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
>>>//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFBQTtJQUNBLENBQUM7SUFBRCxRQUFDO0FBQUQsQ0FBQyxBQURELElBQ0MifQ==
```

----------------------------------------

TITLE: Valid Interface Extension with Same Number of Required Parameters
DESCRIPTION: Example of correctly extending the Base interface with compatible function signatures that maintain the same number of required parameters. The I1 interface implements the 'a' method with no parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithCallSignaturesWithRestParameters.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface I1 extends Base {
    a: () => number; // ok, same number of required params
}
```

----------------------------------------

TITLE: Complex Intersection Type Example
DESCRIPTION: Defines and uses a complex intersection type MyType with nested object properties, demonstrating excess property checking on nested objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/excessPropertyChecksWithNestedIntersections.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export type MyType = { id: number; } & { name: string; } & { photo: { id: number; } & { url: string; } }

export let obj: MyType;

export const photo: typeof obj.photo = {
    id: 1,
    url: '',
    xyz: 1 // error
};

export const myInstance: MyType = {
    id: 1,
    name: '',
    photo: {
        id: 1,
        url: '',
        xyz: 2 // error
    }
};
```

----------------------------------------

TITLE: Type mismatch in arrow function assignment - TypeScript
DESCRIPTION: This code snippet demonstrates a type error in TypeScript that arises when assigning an arrow function with a `void` return type to a parameter expecting a `number` return type. The TypeScript compiler flags this as an error (TS2345) because `void` is not assignable to `number`. The example uses a function `f` that expects a function with a `number` return type, but an arrow function returning `void` is provided as an argument, causing the error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arrowFunctionErrorSpan.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    function f(a: () => number) { }
    
    // oneliner
    f(() => { });

```

----------------------------------------

TITLE: Package Configuration for Module Imports
DESCRIPTION: This JSON snippet shows the package.json configuration for the module imports. It sets the package type to 'module' and defines import paths for '#cjs', '#mjs', and '#type'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackageImports(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module",
    "exports": "./index.js",
    "imports": {
        "#cjs": "./index.cjs",
        "#mjs": "./index.mjs",
        "#type": "./index.js"
    }
}
```

----------------------------------------

TITLE: Applying Text Edits in TypeScript
DESCRIPTION: This function applies an array of text edits to a string and returns the resulting string. It normalizes the edits before applying them. The function iterates through the edits in reverse order, applying each edit by constructing a new string with the prefix, replacement text, and suffix.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserharness.errors.txt#2025-04-21_snippet_45

LANGUAGE: typescript
CODE:
```
            /** Apply an array of text edits to a string, and return the resulting string. */
            public applyEdits(content: string, edits: Services.TextEdit[]): string {
                                                      ~~~~~~~~
!!! error TS2503: Cannot find namespace 'Services'.
                var result = content;
                edits = this.normalizeEdits(edits);
    
                for (var i = edits.length - 1; i >= 0; i--) {
                    var edit = edits[i];
                    var prefix = result.substring(0, edit.minChar);
                    var middle = edit.text;
                    var suffix = result.substring(edit.limChar);
                    result = prefix + middle + suffix;
                }
                return result;
            }
```

----------------------------------------

TITLE: Module 2 Exported Variables and Functions
DESCRIPTION: Demonstrates TypeScript module with exported variables, classes, and functions, enabling module-level sharing of entities
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlsourcerootUrlMixedSubfolderSpecifyOutputFileAndOutputDirectory/node/maprootUrlsourcerootUrlMixedSubfolderSpecifyOutputFileAndOutputDirectory.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export var m2_a1 = 10;
export class m2_c1 {
    public m2_c1_p1: number;
}

export var m2_instance1 = new m2_c1();
export function m2_f1() {
    return m2_instance1;
}
```

----------------------------------------

TITLE: TypeScript Error: Multiple Children Provided to Single Child Prop
DESCRIPTION: This snippet shows the TypeScript error that occurs when attempting to pass multiple children to a React component that expects only a single JSX element as the `children` prop. The error message `TS2746` indicates that the type of children provided does not match the declared type in the component's interface. This demonstrates TypeScript's strict type checking for React component props.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty14.errors.txt#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
// Error
    let k5 = <SingleChildComp a={10} b="hi"><></><Button /><AnotherButton /></SingleChildComp>;
              ~~~~~~~~~~~~~~~
!!! error TS2746: This JSX tag's 'children' prop expects a single child of type 'Element', but multiple children were provided.
```

----------------------------------------

TITLE: Using Custom JSX Element with Spread Attributes in TypeScript
DESCRIPTION: This snippet shows two examples of using the custom 'test1' JSX element with spread attributes. The first example is correct, while the second example triggers a TypeScript error by attempting to access a non-existent 'len' property on a string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution4.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
// OK
<test1 {... {x: (n) => 0} } />;

// Error, no member 'len' on 'string'
<test1 {... {x: (n) => n.len} } />;
```

----------------------------------------

TITLE: Union Handling with Intersection Types in TypeScript
DESCRIPTION: The function `f` utilizes intersections of discriminated union types `abc`, demonstrating how to operate with `abc` along with an intersection type. Such a technique helps in refining types and accessing subtype-specific properties efficiently.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/discriminatedUnionTypes2.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
type a = {
    type: 'a',
    data: string
}
type b = {
    type: 'b',
    name: string
}
type c = {
    type: 'c',
    other: string
}

type abc = a | b | c;

function f(problem: abc & (b | c)) {
    if (problem.type === 'b') {
        problem.name;
    }
    else {
        problem.other;
    }
}
```

----------------------------------------

TITLE: ECMAScript Import Path Resolution Errors
DESCRIPTION: Demonstrates import errors when using relative paths without explicit file extensions under node16 or nodenext module resolution
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node16).errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
import * as m18 from "./subfolder2";
```

----------------------------------------

TITLE: Interface Inheritance and Type Checking
DESCRIPTION: Shows interface inheritance relationships and type checking with Animal, Dog, and Cat interfaces along with Comparer interfaces demonstrating variance behavior.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictFunctionTypesErrors.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
interface Animal { animal: void }
interface Dog extends Animal { dog: void }
interface Cat extends Animal { cat: void }

interface Comparer1<T> {
    compare(a: T, b: T): number;
}

interface Comparer2<T> {
    compare: (a: T, b: T) => number;
}
```

----------------------------------------

TITLE: Handling let Variables in Loops - TypeScript
DESCRIPTION: This code illustrates the scoping behavior of let variables within different types of loops in TypeScript, such as for-of, for-in, and while loops. It includes pattern variables and functions accessing these variables within the loops to demonstrate potential issues, such as unintentional type comparisons.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop7_ES6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    l0:
    for (let x of []) {
        (function() { return x});
        (() => x);
        if (x == 1) {
            break;
        }
        if (x == 1) {
            break l0;
        }
        if (x == 2) {
            continue;
        }
        if (x == 2) {
            continue l0;
        }
    }
```

LANGUAGE: typescript
CODE:
```
    l00:
    for (let x in []) {
        (function() { return x});
        (() => x);
        if (x == "1") {
            break;
        }
        if (x == "1") {
            break l00;
        }
        if (x == "2") {
            continue;
        }
        if (x == "2") {
            continue l00;
        }
    }
```

LANGUAGE: typescript
CODE:
```
    l1:
    for (let x = 0; x < 1; ++x) {
        (function() { return x});
        (() => x);
        if (x == 1) {
            break;
        }
        if (x == 1) {
            break l1;
        }
        if (x == 2) {
            continue;
        }
        if (x == 2) {
            continue l1;
        }
    }
```

----------------------------------------

TITLE: ES2016 Array Includes Method Usage
DESCRIPTION: Demonstrates the usage of Array.includes() method introduced in ES2016. Requires 'lib' compiler option to be set to 'es2016' or later.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/doYouNeedToChangeYourTargetLibraryES2016Plus.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const testIncludes = ["hello"].includes("world");
```

----------------------------------------

TITLE: Defining Covariant, Contravariant, and Invariant Interfaces in TypeScript
DESCRIPTION: This snippet defines three interfaces: Covariant, Contravariant, and Invariant, each with a conditional type for the 'foo' property. These interfaces demonstrate different type relationships based on their generic parameter T.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/conditionalTypes2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Covariant<T> {
    foo: T extends string ? T : number;
}

interface Contravariant<T> {
    foo: T extends string ? keyof T : number;
}

interface Invariant<T> {
    foo: T extends string ? keyof T : T;
}
```

----------------------------------------

TITLE: Module Import and Export Error in TypeScript
DESCRIPTION: This code demonstrates a TypeScript module access error. When module 'b' is imported inside module 'c' but not re-exported, it cannot be accessed through 'c.b' from outside the module. The error 'Property 'b' does not exist on type 'typeof c'' occurs when trying to access c.b.c().
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/internalAliasInitializedModuleInsideLocalModuleWithoutExportAccessError.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export module a {
    export module b {
        export class c {
        }
    }
}

export module c {
    import b = a.b;
    export var x: b.c = new b.c();
}

export var d = new c.b.c();
```

----------------------------------------

TITLE: Invoking Non-Existent Method with Type Arguments in TypeScript
DESCRIPTION: This code snippet defines a class 'Foo' with a constructor that attempts to call a non-existent method 'foo' with a type argument. This results in a TypeScript compilation error TS2339, indicating that the property 'foo' does not exist on the type 'Foo'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/invokingNonGenericMethodWithTypeArguments1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Foo {
    constructor() {
        this.foo<string>();
    }
}
```

----------------------------------------

TITLE: Interface, Function Declaration, and Generic Function with Index Access in TypeScript
DESCRIPTION: This code defines an interface `I` with a property `foo` of type `string`. It also declares a function `take` that accepts a generic type `T`. The function `fn` takes an object `o` conforming to `I` and a key `k` of `o`. It calls `take` with `o[k]` which is narrowed down to a union of possible types ({} | null | undefined) and `any`. This snippet demonstrates how generics and index access work together in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_28

LANGUAGE: typescript
CODE:
```
    // Repro from #21368
    
    interface I {
        foo: string;
    }
    
    declare function take<T>(p: T): void;
    
    function fn<T extends I, K extends keyof T>(o: T, k: K) {
        take<{} | null | undefined>(o[k]);
        take<any>(o[k]);
    }
```

----------------------------------------

TITLE: Transforming for...of Loop with Inline Array in TypeScript
DESCRIPTION: This snippet illustrates how a for...of loop with an inline array of objects is transformed. It shows the conversion to a traditional for loop and how the inline array is handled in the compiled output.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_24

LANGUAGE: typescript
CODE:
```
for (var _32 = 0, _33 = [{ name: "mower", skill: "mowing" }, { name: "trimmer", skill: "trimming" }]; _32 < _33.length; _32++) {
```

----------------------------------------

TITLE: TypeScript Logical Assignment with Optional Chaining
DESCRIPTION: Demonstrates three functions using different logical assignment operators (||=, ??=, &&=) with optional chaining and nullish coalescing. The code shows error handling for possibly undefined values when working with arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment8(target=es2015).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare const bar: { value?: number[] } | undefined

function foo1(results: number[] | undefined) {
    (results ||= bar?.value ?? []).push(100);
}

function foo2(results: number[] | undefined) {
    (results ??= bar?.value ?? []).push(100);
}

function foo3(results: number[] | undefined) {
    (results &&= bar?.value ?? []).push(100);
}
```

----------------------------------------

TITLE: TypeScript Ambient Declaration File with Implicit Any Type Errors
DESCRIPTION: This TypeScript declaration file demonstrates various cases where implicit 'any' types are flagged as errors in ambient contexts. The file shows that public members require explicit type annotations, while private members do not trigger these errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implicitAnyInAmbientDeclaration2.d.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function foo(x);  // this should be an error
declare var bar;  // this should be be an erro
declare class C {
    public publicMember;  // this should be an error
    private privateMember;  // this should not be an error

    public publicFunction(x);  // this should be an error
    private privateFunction(privateParam);  // this should not be an error
    private constructor(privateParam);  // this should not be an error
}

declare class D {
    public constructor(publicConsParam, int: number);  // this should be an error
}
```

----------------------------------------

TITLE: Array Destructuring with Static Values
DESCRIPTION: Destructures a static array [2, "trimmer", "trimming"] with default values, assigning to variables numberB, nameB, and skillB.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues3.sourcemap.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
_z = [2, "trimmer", "trimming"], _0 = _z[0], numberB = _0 === void 0 ? -1 : _0, _1 = _z[1], nameB = _1 === void 0 ? "helloNoName" : _1, _2 = _z[2], skillB = _2 === void 0 ? "noSkill" : _2;
```

----------------------------------------

TITLE: Converting Snake Case to Pascal/Camel Case with Template Literals in TypeScript
DESCRIPTION: Implements utility types to convert snake_case strings to PascalCase and camelCase using recursive conditional types with template literals. Demonstrates string manipulation with inference.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes1.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
type SnakeToCamelCase<S extends string> =
    S extends `${infer T}_${infer U}` ? `${Lowercase<T>}${SnakeToPascalCase<U>}` :
    S extends `${infer T}` ? `${Lowercase<T>}` :
    SnakeToPascalCase<S>;

type SnakeToPascalCase<S extends string> =
    string extends S ? string :
    S extends `${infer T}_${infer U}` ? `${Capitalize<Lowercase<T>>}${SnakeToPascalCase<U>}` :
    S extends `${infer T}` ? `${Capitalize<Lowercase<T>>}` :
    never;

type RR0 = SnakeToPascalCase<'hello_world_foo'>;  // 'HelloWorldFoo'
type RR1 = SnakeToPascalCase<'FOO_BAR_BAZ'>;  // 'FooBarBaz'
type RR2 = SnakeToCamelCase<'hello_world_foo'>;  // 'helloWorldFoo'
type RR3 = SnakeToCamelCase<'FOO_BAR_BAZ'>;  // 'fooBarBaz'
```

----------------------------------------

TITLE: Type Export with Arbitrary Namespace Identifier
DESCRIPTION: Illustrates exporting and importing types with arbitrary namespace identifiers with type-checking behavior
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arbitraryModuleNamespaceIdentifiers_module(module=commonjs).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
type someType = "someType";
export { type someType as "<A>" };
import { type "<A>" as typeA } from "./arbitraryModuleNamespaceIdentifiers_module";
const importTest: typeA = "expect error about someType";
```

----------------------------------------

TITLE: Exporting Constant in TypeScript
DESCRIPTION: Demonstrates the correct way to export a constant in a TypeScript file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/impliedNodeFormatEmit4(module=esnext).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export const _ = 0;
```

----------------------------------------

TITLE: Defining a Typed Function in TypeScript
DESCRIPTION: Defines a function 'c12t8' that takes a number and a string as parameters. It returns a number. The function uses TypeScript arrow function syntax for better clarity.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#2025-04-21_snippet_44

LANGUAGE: typescript
CODE:
```
var c12t8 = function (n) { return n; };
```

----------------------------------------

TITLE: Defining Overloaded Functions in TypeScript
DESCRIPTION: Defines the overloaded function 'foo' with different signatures depending on the type of the 'a' property of the objects in the input array. The function returns different types based on the input array's type. The aim is to demonstrate overload resolution, including scenarios where the function calls work and where they do not due to type mismatches.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadResolutionTest1.errors.txt#2025-04-21_snippet_0

LANGUAGE: Typescript
CODE:
```
function foo(bar:{a:number;}[]):string;
function foo(bar:{a:boolean;}[]):number;
function foo(bar:{a:any;}[]):any{ return bar };

var x1 = foo([{a:true}]); // works
var x11 = foo([{a:0}]); // works
var x111 = foo([{a:"s"}]); // error - does not match any signature
var x1111 = foo([{a:null}]); // works - ambiguous call is resolved to be the first in the overload set so this returns a string
```

----------------------------------------

TITLE: Package JSON Module Configuration
DESCRIPTION: Defines import and export mappings for TypeScript module resolution, specifying how modules can be imported and transformed during emission
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/packageJsonImportsErrors(module=nodenext).errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "pkg",
  "type": "module",
  "imports": {
    "#foo.ts": "./foo.ts",
    "#internal/*": "./internal/*"
  },
  "exports": {
    "./*.ts": {
      "source": "./*.ts",
      "default": "./*.js"
    }
  }
}
```

----------------------------------------

TITLE: Importing a JSX Component
DESCRIPTION: This snippet demonstrates the import of the 'Foo' component in another file 'bar.jsx'. The errors TS6142 and TS17004 indicate that the compiler cannot locate the module correctly and that JSX cannot be used without enabling the '--jsx' flag. To resolve these issues, ensure that the import path is correct and that JSX support is enabled in the TypeScript configuration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxNotSetError.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import Foo from '/foo';
                    ~~~~~~
!!! error TS6142: Module '/foo' was resolved to '/foo.jsx', but '--jsx' is not set.
const a = <Foo />
              ~~~~~~~
!!! error TS17004: Cannot use JSX unless the '--jsx' flag is provided.
```

----------------------------------------

TITLE: Initialize Loop with Destructuring and Defaults (JS/TS)
DESCRIPTION: This snippet shows the initializer and condition/increment parts of a for loop. It uses object destructuring with default values ('noName' for name, 'skill' for skill) from the result of the getRobot() function call, combined with initializing a loop counter 'i'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_85

LANGUAGE: javascript
CODE:
```
{ name = "noName", skill = "skill" } = getRobot(), i = 0; i < 1; i++ ) {
```

----------------------------------------

TITLE: Declaring and Initializing String Literal Types in TypeScript
DESCRIPTION: This snippet demonstrates declaring variables with string literal types in TypeScript, which allows specifying exact string values for variables. The snippet also illustrates a TypeScript error that arises when a 'const' declaration is not initialized. The error is solved by initializing variables at the time of declaration, as shown for variables 'e', 'f', 'g', and 'h'. Inputs are string literals, and outputs are the assigned string values. Each 'const' declaration must be initialized immediately to prevent errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/stringLiteralTypesInVariableDeclarations01.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
let a: "";
var b: "foo";
let c: "bar";
const d: "baz";
      ~
!!! error TS1155: 'const' declarations must be initialized.

    a = "";
    b = "foo";
    c = "bar";

    let e: "" = "";
    var f: "foo" = "foo";
    let g: "bar" = "bar";
    const h: "baz" = "baz";

    e = "";
    f = "foo";
    g = "bar";
```

----------------------------------------

TITLE: Block-scoped Variable Redeclaration in JavaScript
DESCRIPTION: Example of attempting to redeclare a block-scoped variable 'C' which causes a TypeScript error. The error occurs because 'let' declarations create block-scoped variables that cannot be redeclared within the same scope.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationBindErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
let C = "sss";
let C = 0;  // Error: Cannot redeclare block-scoped variable 'C'.
```

----------------------------------------

TITLE: Object Type Literal Constructor in TypeScript
DESCRIPTION: Demonstrates the use of instanceof with a constructor defined using an object type literal. Shows type narrowing behavior.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardsWithInstanceOfByConstructorSignature.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
interface D {
    foo: string;
}
declare var D: { new (): D; };

var obj7: D | string;
if (obj7 instanceof D) { // narrowed to D.
    obj7.foo;
    obj7.bar;
}
```

----------------------------------------

TITLE: Defining Generic Classes with Inheritance in TypeScript
DESCRIPTION: This snippet defines three classes: a generic base class, a generic abc class extending base, and an xyz class extending abc. It demonstrates errors in generic type arguments and constructable expressions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveBaseConstructorCreation3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare class base<T> {
}
declare class abc<T> extends base<T> {
    foo: xyz;
}
declare class xyz extends abc {
}

var bar = new xyz(); // Error: Invalid 'new' expression.
var r: xyz = bar.foo;
```

----------------------------------------

TITLE: Defining 'package.json' Type Versions for Node.js Modules
DESCRIPTION: This JSON snippet for the 'just-types-versions' package showcases configuring type versions specifically within 'package.json'. The focus here is on specifying custom typing paths per module, important for TypeScript projects managing types across different versions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsBlocksTypesVersions(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
  "name": "just-types-versions",
  "version": "1.0.0",
  "typesVersions": {
    "*": {
      "foo": ["./types/foo.d.ts"]
    }
  }
}
```

----------------------------------------

TITLE: Importing and Using Type-Only Imports
DESCRIPTION: Demonstrates incorrect usage of type-only imports when trying to use enum values, resulting in TS1361 errors. Shows correct usage of the imported types for type annotations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enums.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import type { SyntaxKind, SymbolFlags } from './a';

SyntaxKind.ImportClause;
SymbolFlags.Type;
let kind: SyntaxKind.ImportClause;
let flags: SymbolFlags;

type TypeFlag = SymbolFlags.Type;
export type { TypeFlag };
```

----------------------------------------

TITLE: TypeScript Interface Definition
DESCRIPTION: Defines a TypeScript interface named Foo with a numeric property 'a'
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importTag13.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export interface Foo {
    a: number;
}
```

----------------------------------------

TITLE: Defining Foo Class Declaration in TypeScript
DESCRIPTION: Declares a Foo class with a doThing method that accepts an object with a number property and returns another object. Includes a static make() factory method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationMapsMultifile.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export declare class Foo {
    doThing(x: {
        a: number;
    }): {
        b: number;
    };
    static make(): Foo;
}
```

----------------------------------------

TITLE: Export Constants Definition (0.ts)
DESCRIPTION: Defines and exports two constant values that will be used by other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace1(module=commonjs).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const a = 1;
export const b = 2;
```

----------------------------------------

TITLE: Valid Type Import with Value Export
DESCRIPTION: Demonstrates correct usage of type-only import alongside a value export.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/verbatimModuleSyntaxNoElisionCJS.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import type I = require("./e");
const I = {};
export = I;
```

----------------------------------------

TITLE: Implementing Default Function in TypeScript
DESCRIPTION: A default export function that calls the 'baz' function. This function is called by 'foo' from another file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callHierarchyExportDefaultFunction.callHierarchy.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export default function () {
    baz();
}
```

----------------------------------------

TITLE: Using Logical Assignment Operators with Arrays in TypeScript
DESCRIPTION: This snippet demonstrates four different patterns for safely adding elements to potentially undefined arrays using logical OR (||=) and nullish coalescing (??=) assignment operators in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment4(target=es2021).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo1(results: number[] | undefined) {
    (results ||= []).push(100);
}

function foo2(results: number[] | undefined) {
    (results ??= []).push(100);
}

function foo3(results: number[] | undefined) {
    results ||= [];
    results.push(100);
}

function foo4(results: number[] | undefined) {
    results ??= [];
    results.push(100);
}
```

----------------------------------------

TITLE: Variable Declarations with Type Assertions - TypeScript
DESCRIPTION: This snippet highlights the declaration of variables 'b' and 'c', potentially involved in type assertions and conversions associated with generic classes 'B' and 'A'. It illustrates how improper assertions can lead to type conversion issues when interacting with generic parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericTypeAssertions6.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
var b: B<Date, Date>;
    var c: A<Date, Date> = <A<Date, Date>>b;
```

----------------------------------------

TITLE: TypeScript Configuration for Angular2 Project
DESCRIPTION: TSConfig file configuring TypeScript compiler options for an Angular2 project. Includes settings for ES5 targeting, SystemJS modules, and decorator support.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/emitDecoratorMetadataSystemJSISolatedModules/node/emitDecoratorMetadataSystemJSISolatedModules.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "compileOnSave": true,
  "compilerOptions": {
    "target": "es5",
    "module": "system",
    "moduleResolution": "node",
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "isolatedModules": true
  },
  "files": [
    "main.ts"
  ]
}
```

----------------------------------------

TITLE: ESM Module Imports in JavaScript
DESCRIPTION: ES module format file demonstrating imports from different module types (CJS, MJS, and JS)
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExportsTrailers(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// esm format file
import * as cjsi from "inner/cjs/index.cjs";
import * as mjsi from "inner/mjs/index.mjs";
import * as typei from "inner/js/index.js";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: Function Expressions with Optional Parameters in TypeScript
DESCRIPTION: Demonstrates function expressions assigned to variables with different parameter configurations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/optionalParamArgsTest.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
var L1 = function() {return 0;}
var L2 = function (L2A1:number) { return L2A1; }
var L3 = function (L3A1=0,L3A2=L3A1) {return L3A1 + L3A2; }
var L4 = function (L4A1:number,L4A2?:number) { return L4A1 + L4A2; }
```

----------------------------------------

TITLE: Handling Discriminated Unions with Object Destructuring in TypeScript
DESCRIPTION: This snippet demonstrates type narrowing using discriminated unions and object destructuring. It shows how TypeScript infers the correct type based on the 'kind' property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowAliasing.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function f31(obj: { kind: 'foo', foo: string } | { kind: 'bar', bar: number }) {
    const { kind } = obj;
    if (kind === 'foo') {
        obj.foo;
    }
    else {
        obj.bar;
    }
}
```

----------------------------------------

TITLE: Demonstrating 'this' Type in Function Declarations and Expressions in TypeScript
DESCRIPTION: This snippet shows how 'this' is typed in function declarations, function expressions, and arrow functions. It demonstrates that 'this' is of type 'any' in regular functions and 'typeof globalThis' in arrow functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeOfThisGeneral.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
//type of 'this' in a function declaration param list is Any
function fn(s = this) {
    var s: any;
    s.spaaaaaaace = 4;

    //type of 'this' in a function declaration body is Any
    var t: any;
    var t = this;
    this.spaaaaace = 4;
}

//type of 'this' in a function expression param list list is Any
var q1 = function (s = this) {
    var s: any;
    s.spaaaaaaace = 4;

    //type of 'this' in a function expression body is Any
    var t: any;
    var t = this;
    this.spaaaaace = 4;
}

//type of 'this' in a fat arrow expression param list is typeof globalThis
var q2 = (s = this) => {
    var s: typeof globalThis;
    s.spaaaaaaace = 4;

    //type of 'this' in a fat arrow expression body is typeof globalThis
    var t: typeof globalThis;
    var t = this;
    this.spaaaaace = 4;
}

//type of 'this' in global module is GlobalThis
var t: typeof globalThis;
var t = this;
this.spaaaaace = 4;
```

----------------------------------------

TITLE: Defining Complex Type Utilities for Object Properties in TypeScript
DESCRIPTION: Implements a set of utility types for working with object properties, including readonly, optional, and required properties. These utilities demonstrate advanced type manipulation techniques in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/deeplyNestedMappedTypes.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
export type Evaluate<T> = T extends infer O ? { [K in keyof O]: O[K] } : never

export declare const Readonly: unique symbol;
export declare const Optional: unique symbol;
export declare const Hint: unique symbol;
export declare const Kind: unique symbol;

export interface TKind {
    [Kind]: string
}
export interface TSchema extends TKind {
    [Readonly]?: string
    [Optional]?: string
    [Hint]?: string
    params: unknown[]
    static: unknown
}

export type TReadonlyOptional<T extends TSchema> = TOptional<T> & TReadonly<T>
export type TReadonly<T extends TSchema> = T & { [Readonly]: 'Readonly' }
export type TOptional<T extends TSchema> = T & { [Optional]: 'Optional' }

export interface TString extends TSchema {
    [Kind]: 'String';
    static: string;
    type: 'string';
}

export type ReadonlyOptionalPropertyKeys<T extends TProperties> = { [K in keyof T]: T[K] extends TReadonly<TSchema> ? (T[K] extends TOptional<T[K]> ? K : never) : never }[keyof T]
export type ReadonlyPropertyKeys<T extends TProperties> = { [K in keyof T]: T[K] extends TReadonly<TSchema> ? (T[K] extends TOptional<T[K]> ? never : K) : never }[keyof T]
export type OptionalPropertyKeys<T extends TProperties> = { [K in keyof T]: T[K] extends TOptional<TSchema> ? (T[K] extends TReadonly<T[K]> ? never : K) : never }[keyof T]
export type RequiredPropertyKeys<T extends TProperties> = keyof Omit<T, ReadonlyOptionalPropertyKeys<T> | ReadonlyPropertyKeys<T> | OptionalPropertyKeys<T>>
export type PropertiesReducer<T extends TProperties, R extends Record<keyof any, unknown>> = Evaluate<(
    Readonly<Partial<Pick<R, ReadonlyOptionalPropertyKeys<T>>>> &
    Readonly<Pick<R, ReadonlyPropertyKeys<T>>> &
    Partial<Pick<R, OptionalPropertyKeys<T>>> &
    Required<Pick<R, RequiredPropertyKeys<T>>>
)>
export type PropertiesReduce<T extends TProperties, P extends unknown[]> = PropertiesReducer<T, {
    [K in keyof T]: Static<T[K], P>
}>
export type TPropertyKey = string | number
export type TProperties = Record<TPropertyKey, TSchema>
export interface TObject<T extends TProperties = TProperties> extends TSchema {
    [Kind]: 'Object'
    static: PropertiesReduce<T, this['params']>
    type: 'object'
    properties: T
}

export type Static<T extends TSchema, P extends unknown[] = []> = (T & { params: P; })['static']

declare namespace Type {
    function Object<T extends TProperties>(object: T): TObject<T>
    function String(): TString
}
```

----------------------------------------

TITLE: Defining Intersection Types with Optional Boolean Properties in TypeScript
DESCRIPTION: Defines three types with optional boolean properties and creates intersection types to demonstrate type checking behavior under exactOptionalPropertyTypes mode. When exactOptionalPropertyTypes is enabled, undefined cannot be assigned to optional properties unless explicitly included in the type definition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionsAndOptionalProperties2(exactoptionalpropertytypes=true).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// https://github.com/microsoft/TypeScript/issues/58174

type A_Primitive = {
  disabled?: boolean;
};

type B_Primitive = {
  disabled?: boolean | undefined;
};

type C_Primitive = {
  disabled?: boolean;
};

declare const ab_primitive: A_Primitive & B_Primitive;
declare const ac_primitive: A_Primitive & C_Primitive;

const ab_disabled_read = ab_primitive.disabled;
const ac_disabled_read = ac_primitive.disabled;

ab_primitive.disabled = undefined;
ac_primitive.disabled = undefined;
```

----------------------------------------

TITLE: Multiple Default Export Error Example in TypeScript
DESCRIPTION: Shows an invalid TypeScript code example where both a constant and a class are attempted to be exported as default, resulting in compiler errors. TypeScript only allows one default export per module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDefaultClassAndValue.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const foo = 1
export default foo
export default class Foo {}
```

----------------------------------------

TITLE: Applying Decorators to TypeScript Class and Members
DESCRIPTION: This code snippet demonstrates the application of decorators to a TypeScript class and its various members. It includes decorators on the class itself, instance methods, accessors, properties, and static members.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-sourceMap(target=esnext).sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
@dec
@dec
class C {
    @dec
    @dec
    method() { }

    @dec
    @dec
    get x() { return 1; }

    @dec
    @dec
    set x(value: number) { }

    @dec
    @dec
    y = 1;

    @dec
    @dec
    accessor z = 1;

    @dec
    @dec
    static #method() { }

    @dec
    @dec
    static get #x() { return 1; }

    @dec
    @dec
    static set #x(value) { }
```

----------------------------------------

TITLE: Using await in arrow function (TypeScript)
DESCRIPTION: Example of TypeScript error when using 'for await' loop and 'await' expression in an arrow function. Demonstrates TS1103 and TS1308 errors in arrow function context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitInNonAsyncFunction.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const arrowFunc = (p: Promise<number>) => {
  for await (const _ of []);
  return await p;
};
```

----------------------------------------

TITLE: Demonstrating TypeScript Function Call Error
DESCRIPTION: This code snippet declares a function 'foo' with two overloads and attempts to call it with incorrect number of arguments, resulting in a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionCall18.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Repro from #26835
declare function foo<T>(a: T, b: T);
declare function foo(a: {});
foo<string>("hello");
```

----------------------------------------

TITLE: Package Configuration
DESCRIPTION: Package.json configuration specifying module type and export mappings for different module formats.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExportsTrailers(module=node18).errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

LANGUAGE: json
CODE:
```
{
    "name": "inner",
    "private": true,
    "exports": {
        "./cjs/*.cjs": "./*.cjs",
        "./mjs/*.mjs": "./*.mjs",
        "./js/*.js": "./*.js"
    }
}
```

----------------------------------------

TITLE: Abstract Class Property Access Examples in TypeScript
DESCRIPTION: Demonstrates error cases when accessing abstract properties in constructors and valid usage patterns. Shows different scenarios including direct access, destructuring, and property assignments within abstract and concrete classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/abstractPropertyInConstructor.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
abstract class AbstractClass {
    constructor(str: string, other: AbstractClass) {
        this.method(parseInt(str));
        let val = this.prop.toLowerCase();

        if (!str) {
            this.prop = "Hello World";
        }
        this.cb(str);

        // OK, reference is inside function
        const innerFunction = () => {
            return this.prop;
        }

        // OK, references are to another instance
        other.cb(other.prop);
    }

    abstract prop: string;
    abstract cb: (s: string) => void;

    abstract method(num: number): void;

    other = this.prop;
    fn = () => this.prop;

    method2() {
        this.prop = this.prop + "!";
    }
}

abstract class DerivedAbstractClass extends AbstractClass {
    cb = (s: string) => {};

    constructor(str: string, other: AbstractClass, yetAnother: DerivedAbstractClass) {
        super(str, other);
        // there is no implementation of 'prop' in any base class
        this.cb(this.prop.toLowerCase());

        this.method(1);

        // OK, references are to another instance
        other.cb(other.prop);
        yetAnother.cb(yetAnother.prop);
    }
}

class Implementation extends DerivedAbstractClass {
    prop = "";
    cb = (s: string) => {};

    constructor(str: string, other: AbstractClass, yetAnother: DerivedAbstractClass) {
        super(str, other, yetAnother);
        this.cb(this.prop);
    }

    method(n: number) {
        this.cb(this.prop + n);
    }
}

class User {
    constructor(a: AbstractClass) {
        a.prop;
        a.cb("hi");
        a.method(12);
        a.method2();
    }
}

abstract class C1 {
    abstract x: string;
    abstract y: string;

    constructor() {
        let self = this;                // ok
        let { x, y: y1 } = this;        // error
        ({ x, y: y1, "y": y1 } = this); // error
    }
}

class C2 {
    x: string;
    y: string;

    constructor() {
        let self = this;                // ok
        let { x, y: y1 } = this;        // ok
        ({ x, y: y1, "y": y1 } = this); // ok
    }
}
```

----------------------------------------

TITLE: TypeScript Class with Private Fields and keyof Type Checking
DESCRIPTION: Demonstrates how TypeScript handles private fields (#) and keyof operator type checking. Shows that private fields are not included in keyof type and attempts to access them result in type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNamesAndkeyof.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
    #fooField = 3;
    #fooMethod() { };
    get #fooProp() { return 1; };
    set #fooProp(value: number) { };
    bar = 3;
    baz = 3;
}

// `keyof A` should not include '#foo*'
let k: keyof A = "bar"; // OK
k = "baz"; // OK

k = "#fooField"; // Error
k = "#fooMethod"; // Error
k = "#fooProp"; // Error

k = "fooField"; // Error
k = "fooMethod"; // Error
k = "fooProp"; // Error
```

----------------------------------------

TITLE: Decorating Instance Accessor in TypeScript
DESCRIPTION: This snippet shows the TypeScript source for an instance accessor `z` decorated with two `@dec` decorators. The emitted JavaScript creates a variable `_z_decorators` holding an array of these decorators, which is used internally by the compiler's decorator emission helper functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-sourceMap(target=es2022).sourcemap.txt#_snippet_14

LANGUAGE: TypeScript
CODE:
```
@\ndec\n                                    @\ndec\n    accessor z = 1;
```

LANGUAGE: JavaScript
CODE:
```
_z_decorators = [dec, dec];
```

----------------------------------------

TITLE: Nullish Coalescing Chained Expressions
DESCRIPTION: Examines chained nullish coalescing operations with multiple nullish and non-nullish values, testing type inference and reachability
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/predicateSemantics.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
const p07 = null ?? null ?? null;
const p08 = null ?? opt ?? null;
const p10 = opt ?? null ?? 1;
```

----------------------------------------

TITLE: package.json for i-have-a-dir-and-main
DESCRIPTION: This package.json file defines the module 'i-have-a-dir-and-main'.  It specifies the module's name, version, type, and the main entry point, which is 'dist/index.js'.  This file is crucial for TypeScript to correctly resolve modules within this package.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesNoDirectoryModule.errors.txt#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "name": "i-have-a-dir-and-main",
  "version": "1.0.0",
  "type": "module",
  "main": "dist/index.js"
}
```

----------------------------------------

TITLE: Map Usage with Type Handling - TypeScript
DESCRIPTION: This function 'f12' demonstrates the use of a Map to handle key-value pairs and properly add values to arrays while managing potential nulls in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowingPastLastAssignment.errors.txt#2025-04-21_snippet_14

LANGUAGE: TypeScript
CODE:
```
function f12() {
    const fooMap: Map<string,Array<number>> = new Map()
    const values = [1, 2, 3, 4, 5];
    let foo = fooMap.get("a");
    if (foo == null) {
        foo = [];
    }
    values.forEach(v => foo.push(v));
}
```

----------------------------------------

TITLE: Validating Null Assignments in TypeScript
DESCRIPTION: Demonstrates different cases of null assignments in TypeScript, showing both valid and invalid scenarios. Includes examples with primitive types, enums, classes, interfaces, modules, and functions, along with their respective type-checking errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/validNullAssignments.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var a: number = null;
var b: boolean = null;
var c: string = null;
var d: void = null;

var e: typeof undefined = null;
e = null; // ok

enum E { A }
E.A = null; // error

class C { foo: string }
var f: C;
f = null; // ok
C = null; // error

interface I { foo: string }
var g: I;
g = null; // ok
I = null; // error

module M { export var x = 1; }
M = null; // error

var h: { f(): void } = null;

function i<T>(a: T) {
    a = null;
}
i = null; // error
```

----------------------------------------

TITLE: Creating More Generic Methods in TypeScript Class
DESCRIPTION: This snippet continues defining methods in TypeScript classes with complex generic return types. Each method demonstrates advanced generics, highlighting the versatility of TypeScript's typings.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_31

LANGUAGE: TypeScript
CODE:
```
macrocercus(): panamensis.setulosus<dogramacii.koepckeae, julianae.sumatrana> { var x: panamensis.setulosus<dogramacii.koepckeae, julianae.sumatrana>; () => { var y = this; }; return x; }
```

LANGUAGE: TypeScript
CODE:
```
nimbae(): lutreolus.punicus { var x: lutreolus.punicus; () => { var y = this; }; return x; }
```

LANGUAGE: TypeScript
CODE:
```
suricatta(): daubentonii.nigricans<dammermani.melanops, imperfecta.subspinosus> { var x: daubentonii.nigricans<dammermani.melanops, imperfecta.subspinosus>; () => { var y = this; }; return x; }
```

LANGUAGE: TypeScript
CODE:
```
jagorii(): julianae.galapagoensis { var x: julianae.galapagoensis; () => { var y = this; }; return x; }
```

LANGUAGE: TypeScript
CODE:
```
beecrofti(): sagitta.stolzmanni { var x: sagitta.stolzmanni; () => { var y = this; }; return x; }
```

----------------------------------------

TITLE: Defining a Function Type with JSDoc in TypeScript
DESCRIPTION: This snippet demonstrates how to define a function type using the @typedef tag in a JSDoc comment. The type, named 'Type1', represents a function that takes a string as input and returns a boolean.  The subsequent function 'callIt' uses this defined type as a parameter type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typedefTagWrapping.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    /** 
     * @typedef {function(string): boolean}
     * Type1
     */
    
    /**
     * Tries to use a type whose name is on a different
     * line than the typedef tag.
     * @param {Type1} func The function to call.
     * @param {string} arg The argument to call it with.
     * @returns {boolean} The return.
     */
    function callIt(func, arg) {
      return func(arg);
    }
    
```

----------------------------------------

TITLE: Importing Types with Module Resolution in TypeScript
DESCRIPTION: This snippet demonstrates importing types from the 'foo' module and utilizes different resolution modes in its syntax. It outlines the potential errors that can occur if the specified module cannot be found.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolutionModeTypeOnlyImport1(moduleresolution=classic).errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
    import type { x as Default } from "foo";
                                      ~~~~~
!!! error TS2792: Cannot find module 'foo'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
    import type { x as Import } from "foo" assert { "resolution-mode": "import" };
                                     ~~~~~
!!! error TS2792: Cannot find module 'foo'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
    import type { x as Require } from "foo" assert { "resolution-mode": "require" };
                                      ~~~~~
!!! error TS2792: Cannot find module 'foo'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
```

----------------------------------------

TITLE: Testing Let Declarations in Switch Statements
DESCRIPTION: Shows let declarations within switch statement cases.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/letDeclarations-validContexts.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
switch (0) {
    case 0:
        let l13 = 0;
        break;
    default:
        let l14 = 0;
        break;
}
```

----------------------------------------

TITLE: Defining Applicable Interface and Assignment Checks in TypeScript
DESCRIPTION: This snippet defines an 'Applicable' interface which requires an 'apply' method, and includes various assignment checks to test type compatibility. It illustrates intentional failures with incorrect types and successful assignments with a function that conforms to the interface.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability_checking-apply-member-off-of-function-interface.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// 3.8.4 Assignment Compatibility 

interface Applicable {
    apply(blah: any); // also works for 'apply'
}

var x: Applicable;

// Should fail
x = '';
~
!!! error TS2322: Type 'string' is not assignable to type 'Applicable'.
x = [''];
~
!!! error TS2741: Property 'apply' is missing in type 'string[]' but required in type 'Applicable'.
!!! related TS2728 assignmentCompatability_checking-apply-member-off-of-function-interface.ts:4:5: 'apply' is declared here.
x = 4;
~
!!! error TS2322: Type 'number' is not assignable to type 'Applicable'.
x = {};
~
!!! error TS2741: Property 'apply' is missing in type '{}' but required in type 'Applicable'.
!!! related TS2728 assignmentCompatability_checking-apply-member-off-of-function-interface.ts:4:5: 'apply' is declared here.

// Should work
function f() { };
x = f;

function fn(c: Applicable) { }

// Should Fail
fn('');
   ~~
!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'Applicable'.
fn(['']);
   ~~~~
!!! error TS2345: Argument of type 'string[]' is not assignable to parameter of type 'Applicable'.
!!! error TS2345:   Property 'apply' is missing in type 'string[]' but required in type 'Applicable'.
!!! related TS2728 assignmentCompatability_checking-apply-member-off-of-function-interface.ts:4:5: 'apply' is declared here.
fn(4);
   ~
!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'Applicable'.
fn({});
   ~~
!!! error TS2345: Argument of type '{}' is not assignable to parameter of type 'Applicable'.
!!! error TS2345:   Property 'apply' is missing in type '{}' but required in type 'Applicable'.
!!! related TS2728 assignmentCompatability_checking-apply-member-off-of-function-interface.ts:4:5: 'apply' is declared here.

// Should work
fn(a => { });
```

----------------------------------------

TITLE: Generic Value Processing with Type Guards
DESCRIPTION: Generic functions demonstrating type narrowing with undefined checks and specific value comparisons.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownControlFlow.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
function doSomething1<T extends unknown>(value: T): T {
    if (value === undefined) {
        return value;
    }
    if (value === 42) {
        throw Error('Meaning of life value');
    }
    return value;
}

function doSomething2(value: unknown): void {
    if (value === undefined) {
        return;
    }
    if (value === 42) {
        value;
    }
}
```

----------------------------------------

TITLE: Custom Conditional Type Extraction in TypeScript
DESCRIPTION: This snippet defines custom types and a conditional type extractor 'Extract2'. It demonstrates how to create more complex conditional types for extracting specific type intersections.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/conditionalTypes2.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
type Foo = { foo: string };
type Bar = { bar: string };

declare function fooBar(x: { foo: string, bar: string }): void;
declare function fooBat(x: { foo: string, bat: string }): void;

type Extract2<T, U, V> = T extends U ? T extends V ? T : never : never;
```

----------------------------------------

TITLE: ESM Module Exports
DESCRIPTION: ES Module format file demonstrating default and named exports from 'fs' module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportHelpersCollisions3(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
export {default} from "fs";
export {default as foo} from "fs";
export {bar as baz} from "fs";
```

----------------------------------------

TITLE: Generic Interface Multiple Base Types
DESCRIPTION: Explores generic interface inheritance with type constraints and compatibility challenges
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceWithMultipleBaseTypes.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
module Generic {
    interface Base1<T> {
        x: {
            a: T;
        }
    }

    interface Base2<T> {
        x: {
            b: T;
        }
    }

    interface Derived<T> extends Base1<string>, Base2<number> {
        x: {
            a: string; b: number;
        }
    }
}
```

----------------------------------------

TITLE: Destructuring Object Properties with Default Values in TypeScript
DESCRIPTION: This code demonstrates complex object destructuring in a for-of loop, including nested property access with default values. It extracts 'name' and 'skills' properties, with defaults of 'noName' for name and 'noSkill' for primary and secondary skills.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_53

LANGUAGE: typescript
CODE:
```
for (var { name = "noName", skills: { primary = "primary", secondary = "secondary" } = { primary: "noSkill", secondary: "noSkill" } } of getMultiRobots()) {
    console.log(nameA);
}
```

----------------------------------------

TITLE: Defining Generic Comparable Interface in TypeScript
DESCRIPTION: Defines a generic interface 'Comparable' that requires implementing classes to provide a method 'comparer' for comparing instances of the same type. This generic constraint ensures type safety when performing comparisons among similar types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericConstraint2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Comparable<T> {
        comparer(other: T): number;
    }
```

----------------------------------------

TITLE: Function Using Destructuring for Robot Skills in TypeScript
DESCRIPTION: The function 'foo3' retrieves robot skills using object destructuring with default values. It accepts a parameter '_a' which optionally contains skill information; if absent, defaults to 'robotA'. The destructuring extracts and assigns primary and secondary skills, using the default 'SomeSkill' if not specified. This maintains flexibility in providing versatile robot skill configurations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringParameterNestedObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
function foo3(_a) {
    var _b = _a === void 0 ? robotA : _a, _c = _b.skills, skills = _c === void 0 ? { primary: "SomeSkill", secondary: "someSkill" } : _c;
}
```

----------------------------------------

TITLE: Destructuring Objects in JavaScript
DESCRIPTION: This code snippet demonstrates object destructuring in JavaScript, setting default values for properties if they are undefined. It extracts 'name' and 'skill' properties from objects, using 'noName' and 'noSkill' as fallbacks.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_18

LANGUAGE: JavaScript
CODE:
```
var _11 = _10[_9], _12 = _11.name, nameA = _12 === void 0 ? "noName" : _12, _13 = _11.skill, skillA = _13 === void 0 ? "noSkill" : _13;
```

----------------------------------------

TITLE: Defining Abstract Class with Implicit 'any' Type in TypeScript
DESCRIPTION: An abstract class 'Parent' is defined with a setter for 'message' property lacking type annotations. This triggers TypeScript errors for implicit 'any' types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyMissingGetAccessor.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
abstract class Parent
{
    public abstract set message(str);
}
```

----------------------------------------

TITLE: Destructuring Robot Attributes in TypeScript
DESCRIPTION: This snippet showcases how to destructure nested object properties in TypeScript, allowing default values when properties are not defined. The 'robotB' variable holds an object that contains 'name' and 'skills', and the relevant variables are initialized with default values if not specified. This is crucial for avoiding undefined errors when accessing object properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementNestedObjectBindingPatternWithDefaultValues.sourcemap.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
var {
    name: nameB = "noNameSpecified",
    skills: {
        primary: primaryB = "noSkill",
        secondary: secondaryB = "noSkill"
    } = { primary: "noSkill", secondary: "noSkill" }
} = 
    robotB
```

----------------------------------------

TITLE: Implementing Nullish Coalescing Assignment in TypeScript
DESCRIPTION: Function foo2 uses the ??= operator to assign a value to 'results' if it's null or undefined, then to 'results1' if that's null or undefined, defaulting to an empty array. It then pushes 100 to the resulting array.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment7(target=es2020).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function foo2(results: number[] | undefined, results1: number[] | undefined) {
    (results ??= results1 ??= []).push(100);
}
```

----------------------------------------

TITLE: String Type Declarations and typeof Operations in TypeScript
DESCRIPTION: Comprehensive example showing various uses of typeof operator with string types including variables, literals, expressions, and type queries. Demonstrates string type declarations, class and module usage, and multiple typeof operator chaining.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeofOperatorWithStringType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// typeof  operator on string type
var STRING: string;
var STRING1: string[] = ["", "abc"];

function foo(): string { return "abc"; }

class A {
    public a: string;
    static foo() { return ""; }
}
module M {
    export var n: string;
}

var objA = new A();

// string type var
var ResultIsString1 = typeof STRING;
var ResultIsString2 = typeof STRING1;

// string type literal
var ResultIsString3 = typeof "";
var ResultIsString4 = typeof { x: "", y: "" };
var ResultIsString5 = typeof { x: "", y: (s: string) => { return s; } };

// string type expressions
var ResultIsString6 = typeof objA.a;
var ResultIsString7 = typeof M.n;
var ResultIsString8 = typeof STRING1[0];
var ResultIsString9 = typeof foo();
var ResultIsString10 = typeof A.foo();
var ResultIsString11 = typeof (STRING + STRING);
var ResultIsString12 = typeof STRING.charAt(0);

// multiple typeof  operators
var ResultIsString13 = typeof typeof STRING;
var ResultIsString14 = typeof typeof typeof (STRING + STRING);

// miss assignment operators
typeof "";
typeof STRING;
typeof STRING1;
typeof foo();
typeof objA.a, M.n;

// use typeof in type query
var z: string;
var x: string[];
var r: () => string;
z: typeof STRING;
x: typeof STRING1;
r: typeof foo;
var y = { a: "", b: "" };
z: typeof y.a;
z: typeof objA.a;
z: typeof A.foo;
z: typeof M.n;
```

----------------------------------------

TITLE: Defining a React Component with TypeScript Props
DESCRIPTION: This snippet defines a React component named 'Poisoned' which requires specific prop types as defined by the 'PoisonedProp' interface. The component's implementation ensures that it receives the correct type of props when rendered. Missing or incorrect types will cause TypeScript errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadAttributesResolution2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import React = require('react');

interface PoisonedProp {
    x: string;
    y: "2";
}

class Poisoned extends React.Component<PoisonedProp, {}> {
    render() {
        return <div>Hello</div>;
    }
}
```

----------------------------------------

TITLE: Incorrect Usage of React Component Props
DESCRIPTION: This snippet demonstrates incorrect usage of the 'Opt' component, resulting in TypeScript errors. It shows attempts to pass invalid types to the 'x' prop, which is defined as type '2'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadAttributesResolution10.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
// Error
let y = <Opt {...obj} x={3}/>;
let y1 = <Opt {...obj1} x="Hi"/>;
let y2 = <Opt {...obj1} x={3}/>;
let y3 = <Opt x />;
```

----------------------------------------

TITLE: Re-exporting Types in TypeScript
DESCRIPTION: This snippet focuses on re-exporting types A, B, and C from './mod.js'. It allows these types to be accessed from the current module without directly importing them first. No additional dependencies beyond TypeScript and the existence of 'mod.js' are required.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports_importsNotUsedAsValues.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
export { type A, type B, type C } from "./mod.js";
```

----------------------------------------

TITLE: Optional String Return in TypeScript
DESCRIPTION: This function 'f1' illustrates a TypeScript feature where the return type is an optional string. It aims to show how to define a function that might return a string or undefined. No specific parameters are required.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocReturnTag1.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
/**
 * @returns {string=} This comment is not currently exposed
 */
function f1() {
    return "hello world";
}
```

----------------------------------------

TITLE: Defining Base Interface with Various Call Signatures in TypeScript
DESCRIPTION: This code defines a base interface with different method signatures featuring required and optional parameters. This interface serves as the foundation for the subtyping examples that follow.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithCallSignaturesWithOptionalParameters.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Base { 
    a: () => number;
    a2: (x?: number) => number;
    a3: (x: number) => number;
    a4: (x: number, y?: number) => number;
    a5: (x?: number, y?: number) => number;
}
```

----------------------------------------

TITLE: Declaring Object Types with Property Signatures in TypeScript
DESCRIPTION: This snippet demonstrates various cases of object type literals with property signatures, including error cases with duplicate properties, implicitly typed properties, and function signature overloads. It shows how TypeScript handles type checking for these scenarios.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertySignatures.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// Should be error - duplicate identifiers
var foo1: { a:string; a: string; };

// Should be OK
var foo2: { a; };
foo2.a = 2;
foo2.a = "0";

// Should be error
var foo3: { (): string; (): string; };

// Should be OK
var foo4: { (): void; };
var test = foo();

// Should be OK
var foo5: {()};
var test = foo5();
test.bar = 2;
```

----------------------------------------

TITLE: Implementing Map Utility Functions in TypeScript
DESCRIPTION: Defines utility functions for working with Map objects, including getProperty to safely access map values and hasProperty to check for property existence.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unspecializedConstraints.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
var hasOwnProperty = Object.prototype.hasOwnProperty;

function getProperty<T>(map: Map<T>, key: string): T {
    if (!hasOwnProperty.call(map, key)) return undefined;
    return map[key];
}

function hasProperty<T>(map: Map<T>, key: string): boolean {
    return hasOwnProperty.call(map, key);
}
```

----------------------------------------

TITLE: JavaScript ESM Module Exports
DESCRIPTION: ESM format JavaScript file with module exports from fs module using star export syntax
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportHelpersCollisions2(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// esm format file
export * from "fs";
export * as fs from "fs";
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options for Angular2 Project
DESCRIPTION: This JSON snippet defines the TypeScript compiler options for an Angular2 project. It sets the target to ES5, uses the system module, enables decorator metadata, and specifies the main TypeScript file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/emitDecoratorMetadataSystemJSISolatedModules/amd/emitDecoratorMetadataSystemJSISolatedModules.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "compileOnSave": true,
  "compilerOptions": {
    "target": "es5",
    "module": "system",
    "moduleResolution": "node",
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "isolatedModules": true
  },
  "files": [
    "main.ts"
  ]
}
```

----------------------------------------

TITLE: Type Assignment Error in TypeScript Interfaces
DESCRIPTION: Demonstrates a type error when attempting to assign an interface with optional string property 'two' to an object that requires property 'two' to be a number array. The error occurs due to incompatible types between string and number[].
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability19.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module __test1__ {
    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
    export var __val__obj4 = obj4;
}
module __test2__ {
    export var obj = {two: [1]};
    export var __val__obj = obj;
}
__test2__.__val__obj = __test1__.__val__obj4
```

----------------------------------------

TITLE: Importing Interface in TypeScript
DESCRIPTION: This snippet shows an import statement for 'ImportInterface' that results in an error indicating that the module does not export the specified member. This code is a demonstration of how TypeScript enforces strict checks on module exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportModeDeclarationEmitErrors1(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// not type-only
import { ImportInterface } from "pkg" assert { "resolution-mode": "import" };
             ~~~~~~~~~~~~~~~
!!! error TS2305: Module '"pkg"' has no exported member 'ImportInterface'.
                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2836: Import assertions are not allowed on statements that compile to CommonJS 'require' calls.
```

----------------------------------------

TITLE: Preact VNode Interface Definition
DESCRIPTION: This snippet defines the Preact library and the VNode interface, which is essential for compatibility with FullCalendar when using Preact instead of React. This definition ensures that the Preact types can be utilized without conflicts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkerInitializationCrash.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// /node_modules/preact/index.d.ts
export as namespace preact;
export interface VNode<P = {}> {}
```

----------------------------------------

TITLE: Root Package.json Configuration
DESCRIPTION: Package configuration file setting the project to use ES modules by default with the type:module setting.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesSynchronousCallErrors(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Defining PropsTypes for React Component in TypeScript
DESCRIPTION: This snippet defines an interface `PropsType` that specifies the expected types of the props for a React component class `Foo`. It ensures children props can be an array of strings and numbers or an array of booleans. An error is triggered when the provided props do not match the defined types, showcasing TypeScript's type-checking capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxChildrenArrayWrongType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/// <reference path="/.lib/react18/react18.d.ts" />
/// <reference path="/.lib/react18/global.d.ts" />

// target is ES5, so no `Iterable` type is present.

interface PropsType {
    children: [string, number] | boolean[];
}
declare class Foo extends React.Component<PropsType, {}> {}
const b = (
    <Foo>
     ~~~
!!! error TS2769: No overload matches this call.
!!! error TS2769:   Overload 2 of 2, '(props: PropsType, context: any): Foo', gave the following error.
!!! error TS2769:     Type 'unknown' is not assignable to type 'string | boolean'.
!!! error TS2769:   Overload 2 of 2, '(props: PropsType, context: any): Foo', gave the following error.
!!! error TS2769:     Type 'string' is not assignable to type 'number | boolean'.
            {<div/> as unknown}
            {"aa"}
        </Foo>
);
```

----------------------------------------

TITLE: Logical OR Operator in TypeScript Variable Initialization
DESCRIPTION: These examples demonstrate the logical OR operator in variable initialization, showing how variables can be self-referential in expressions. The OR operator evaluates the left side and only processes the right side if the left is falsy.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/witness.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
var or1 = or1 || '';
var or1: any;
var or2 = '' || or2;
var or2: any;
var or3 = or3 || or3;
var or3: any;
```

----------------------------------------

TITLE: Exporting Default Value in TypeScript
DESCRIPTION: This snippet demonstrates exporting a default value in TypeScript. It declares a variable 'a' and exports it as the default export.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ImportDefaultBindingFollowedWithNamedImport1InEs5.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var a = 10;
export default a;
```

----------------------------------------

TITLE: Nested Excess Property Error in TypeScript Intersection Type
DESCRIPTION: Shows an error when an object literal has an excess property 'y' in a nested structure where the type doesn't declare it. The intersection type expects 'a' to have only an 'x' property of type string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionPropertyCheck.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
let obj: { a: { x: string } } & { c: number } = { a: { x: 'hello', y: 2 }, c: 5 };
```

----------------------------------------

TITLE: TypeScript Class Definition in b.ts
DESCRIPTION: Defines an empty exported class 'B' with no specific methods or properties
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveUnusedImports.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export class B {}
```

----------------------------------------

TITLE: Creating Class with Private Constructor Parameter
DESCRIPTION: Defines a generic class with a private constructor parameter, illustrating TypeScript's access modifier restrictions
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability40.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export class classWithPrivate<T> { constructor(private one: T) {} }
```

----------------------------------------

TITLE: Importing and Re-exporting Type in TypeScript
DESCRIPTION: Imports 'a' as a type from './b' and re-exports it in c.ts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace2.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
import type { a } from './b';
export { a };
```

----------------------------------------

TITLE: Complex Switch Statement with Nested Cases (TypeScript)
DESCRIPTION: This function demonstrates a more complex switch statement structure using custom types for behavior and direction. It handles different transitions based on the input object's properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reachabilityChecks4.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
type Behavior = 'SLIDE' | 'SLIDE_OUT'
type Direction = 'LEFT' | 'RIGHT' | 'TOP' | 'BOTTOM'

interface Transition {
  behavior: Behavior
  direction: Direction
}

function f2(transition: Transition): any {
    switch (transition.behavior) {
        case 'SLIDE':
            switch (transition.direction) {
                case 'LEFT':
                    return []
                case 'RIGHT':
                    return []
                case 'TOP':
                    return []
                case 'BOTTOM':
                    return []
            }
        case 'SLIDE_OUT':
            switch (transition.direction) {
                case 'LEFT':
                    return []
                case 'RIGHT':
                    return []
                case 'TOP':
                    return []
                case 'BOTTOM':
                    return []
            }
    }
}
```

----------------------------------------

TITLE: Importing and Exporting Modules with TypeScript ESM
DESCRIPTION: The code snippet demonstrates importing and exporting modules using TypeScript with ECMAScript module format. It uses export statements to handle imports and exports from different modules. No additional dependencies are required, and modules are imported as needed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesDeclarationEmitWithPackageExports(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
    // esm format file
    import * as cjs from "package/cjs";
    import * as mjs from "package/mjs";
    import * as type from "package";
    export const a = cjs;
    export const b = mjs;
    export const c = type;
    import * as cjsi from "inner/cjs";
    import * as mjsi from "inner/mjs";
    import * as typei from "inner";
    export const d = cjsi;
    export const e = mjsi;
    export const f = typei;
```

----------------------------------------

TITLE: Exporting Variable x from t1.ts
DESCRIPTION: This snippet exports a variable 'x' with the value 'x' from the module t1.ts. It is a simple declaration that should compile without errors. The output will hold the value of 'x' for use in other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unclosedExportClause01.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var x = "x";
```

----------------------------------------

TITLE: Basic Type Narrowing with If Statement in TypeScript
DESCRIPTION: This function demonstrates basic type narrowing using a type guard in an if statement. It narrows the type of 'x' to either string or number based on the condition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardsInIfStatement.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function foo(x: number | string) {
    if (typeof x === "string") {
        return x.length; // string
    }
    else {
        return x++; // number
    }
}
```

----------------------------------------

TITLE: Handling TypeScript Error for Assigning String to Number
DESCRIPTION: This snippet demonstrates the TypeScript error TS2322, which occurs when a string is incorrectly assigned to a property of type number, indicating type mismatch. This highlights TypeScript's type safety features.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesMaxDepthIncreased/node/nodeModulesMaxDepthIncreased.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
maxDepthIncreased/root.ts(7,1): error TS2322: Type 'string' is not assignable to type 'number'.
```

----------------------------------------

TITLE: Defining KeysExtendedBy Mapped Type in TypeScript
DESCRIPTION: Creates a mapped type that selects keys from an object type where the value extends a specified type. It demonstrates using a conditional type within the 'as' clause for key selection.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeAsClauses.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
type KeysExtendedBy<T, U> = keyof { [K in keyof T as U extends T[K] ? K : never] : T[K] };
```

----------------------------------------

TITLE: React Prop Validation Types
DESCRIPTION: Type definitions for React prop validation system including validator interfaces and weak validation mapping types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reactReduxLikeDeferredInferenceAllowsAssignment.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
declare const nominalTypeHack: unique symbol;
interface Validator<T> {
  (
    props: object,
    propName: string,
    componentName: string,
    location: string,
    propFullName: string
  ): Error | null;
  [nominalTypeHack]?: T;
}
type WeakValidationMap<T> = {
  [K in keyof T]?: null extends T[K]
    ? Validator<T[K] | null | undefined>
    : undefined extends T[K]
    ? Validator<T[K] | null | undefined>
    : Validator<T[K]>
};
```

----------------------------------------

TITLE: Defining Interface and Implementing Class in TypeScript
DESCRIPTION: This snippet defines an interface 'I1' with four properties and a class 'C3' that attempts to implement it. The class is missing the 'iFn' method, causing a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceImplementation2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I1 {
    iObj:{ };
    iNum:number;
    iAny:any;
    iFn():void;
}

class C3 implements I1 {
    public iObj:{ };
    public iNum:number;
    public iAny:any;
}
```

----------------------------------------

TITLE: Exporting Combined Type Definitions in TypeScript
DESCRIPTION: This snippet exports various type definitions, including those declared for types imported from different modules. It also illustrates the handling of relative imports and their respective resolution modes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolutionModeTypeOnlyImport1(moduleresolution=classic).errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
    export {
      _Default,
      _Import,
      _Require,
      _ImportRelative,
      _RequireRelative
    }
```

----------------------------------------

TITLE: Importing fs module and type definitions in JavaScript
DESCRIPTION: This snippet demonstrates importing the `writeFile` function and `WriteFileOptions` type from the 'fs' module in a JavaScript file. TypeScript throws an error because directly importing types from declaration files is not allowed in JavaScript. The snippet highlights the TS18042 error and suggests using JSDoc type annotations instead.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importingExportingTypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { writeFile, WriteFileOptions, WriteFileOptions as OtherName } from "fs";
```

----------------------------------------

TITLE: Implementing Parameter Class with Flags Enum in TypeScript
DESCRIPTION: Defines the Parameter class with name, type, and flags, along with an equality checking method. Includes a ParameterFlags enum for defining parameter characteristics.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unspecializedConstraints.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
class Parameter extends Symbol {
    constructor(public name: string, public type: Type, public flags: ParameterFlags) {
        super();
    }
    equals(other: Parameter) {
        return this.name === other.name &&
            this.flags === other.flags &&
            this.type.equals(other.type);
    }
}

enum ParameterFlags {
    Optional = 1,
    Rest = 2
}
```

----------------------------------------

TITLE: Valid Interface Extension with Required Parameter
DESCRIPTION: Example of correctly extending the Base interface by implementing the 'a' method with a required parameter that matches the type expected in the rest parameter. This maintains type compatibility.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithCallSignaturesWithRestParameters.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
interface I3 extends Base {
    a: (x: number) => number; // ok, all present params match
}
```

----------------------------------------

TITLE: Function with Full Array Destructuring
DESCRIPTION: Implements a function that destructures all three elements of a Robot array parameter into separate variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringParametertArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
function foo3(_a) {
    var numberA2 = _a[0], nameA2 = _a[1], skillA2 = _a[2];
    console.log(nameA2);
}
```

----------------------------------------

TITLE: Importing Modules in TypeScript
DESCRIPTION: This snippet shows a correct TypeScript module import statement, using the ES6 syntax for importing all exports from module 'a' into a namespace called 'a'. Necessary setup includes ensuring that 'a.ts' or another appropriate module is available for importing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/systemExportAssignment2.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import * as a from \"a\";
```

----------------------------------------

TITLE: Defining Vnode Interface in TypeScript
DESCRIPTION: Defines the `Vnode` interface with generic types for attributes and state. The state is constrained to extend `Lifecycle`. The interface includes a `tag` property of type `Component`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subclassThisTypeAssignable01.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    interface Vnode<Attrs, State extends Lifecycle<Attrs, State> = Lifecycle<Attrs, State>> {
                                                                                    ~~~~~
    	tag: Component<Attrs, State>;
    }
```

----------------------------------------

TITLE: Package Configuration (package.json)
DESCRIPTION: This JSON snippet defines the package configuration, including the package name, type, and export mappings for different module formats.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackageExports(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module",
    "exports": {
        "./cjs": "./index.cjs",
        "./mjs": "./index.mjs",
        ".": "./index.js"
    }
}
```

----------------------------------------

TITLE: package.json Configuration (inner)
DESCRIPTION: This `package.json` file configures the 'inner' module, specifying its name, privacy, and export mappings. The `exports` field maps './cjs' to 'index.cjs', './mjs' to 'index.mjs', and '.' to 'index.js', defining the module's entry points for different module systems. This setup is very similar to the 'package' configuration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackageExports(module=nodenext).errors.txt#2025-04-21_snippet_7

LANGUAGE: json
CODE:
```
    {
        "name": "inner",
        "private": true,
        "exports": {
            "./cjs": "./index.cjs",
            "./mjs": "./index.mjs",
            ".": "./index.js"
        }
    }
```

----------------------------------------

TITLE: Simple Destructuring Function Declaration
DESCRIPTION: Demonstrates function declarations with destructured parameters using tuple and object destructuring
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration1ES5iterable.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function a1([a, b, [[c]]]: [number, number, string[][]]) { }
```

----------------------------------------

TITLE: Robot Array Iteration with Destructuring
DESCRIPTION: For loop that iterates through a robots array using destructuring assignment with a default value of 'noName' for the nameA variable.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
for (var _i = 0, robots_1 = robots; _i < robots_1.length; _i++) {
    var _a = robots_1[_i], _b = _a[1], nameA = _b === void 0 ? "noName" : _b;
    console.log(nameA);
}
```

----------------------------------------

TITLE: Nullish Coalescing Basic Test Case
DESCRIPTION: Demonstrates basic nullish coalescing scenarios with undefined and optional variables, testing different conditional expression combinations
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/predicateSemantics.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const test1 = (opt ? undefined : 32) ?? "possibly reached";
```

----------------------------------------

TITLE: TypeScript Module: c.ts - Import All as Namespace
DESCRIPTION: This TypeScript module `c.ts` imports all exports from module `a.ts` into a namespace called `a`. This is an alternative way to import modules using a namespace alias.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports(isolatedmodules=false).errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
"    import * as a from \"./a\";\n    "
```

----------------------------------------

TITLE: Defining Awaited Types in TypeScript
DESCRIPTION: This snippet demonstrates various use cases of the Awaited type utility, including simple types, promises, unions, and edge cases. It shows how Awaited resolves different types of promises and non-promise values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitedTypeStrictNull.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type T1 = Awaited<number>;
type T2 = Awaited<Promise<number>>;
type T3 = Awaited<number | Promise<number>>;
type T4 = Awaited<number | Promise<string>>;
type T5 = Awaited<{ then: number }>;
type T6 = Awaited<{ then(): void }>; // never (non-promise "thenable")
type T7 = Awaited<{ then(x: number): void }>; // never (non-promise "thenable")
type T8 = Awaited<{ then(x: () => void): void }>; // unknown
type T9 = Awaited<any>;
type T10 = Awaited<never>;
type T11 = Awaited<unknown>;
type T12 = Awaited<Promise<Promise<number>>>;
type T13 = _Expect<Awaited<Promise<Promise<number>> | string | null>, /*expected*/ string | number | null>; // otherwise just prints T13 in types tests, which isn't very helpful
type T14 = _Expect<Awaited<Promise<Promise<number>> | string | undefined>, /*expected*/ string | number | undefined>; // otherwise just prints T14 in types tests, which isn't very helpful
type T15 = _Expect<Awaited<Promise<Promise<number>> | string | null | undefined>, /*expected*/ string | number | null | undefined>; // otherwise just prints T15 in types tests, which isn't very helpful

type TUndefined = Awaited<undefined>;
type TNull = Awaited<null>;
type TNullOrUndefined = Awaited<null | undefined>;
```

----------------------------------------

TITLE: Handling Property Initialization with Super Calls in TypeScript
DESCRIPTION: This snippet provides information on the required order of 'super' calls in TypeScript constructors, particularly when dealing with class inheritance and properties. It highlights key errors related to improperly placed 'super' calls and initialized properties within derived classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassSuperProperties.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
!!! error TS2376: A 'super' call must be the first statement in the constructor to refer to 'super' or 'this' when a derived class contains initialized properties, parameter properties, or private identifiers.
            super.receivesAnything();
            ~~~~~
!!! error TS17011: 'super' must be called before accessing a property of 'super' in the constructor of a derived class.
            super(this);
                  ~~~~
!!! error TS17009: 'super' must be called before accessing 'this' in the constructor of a derived class.
```

LANGUAGE: typescript
CODE:
```
class Derived4 extends Base {
        prop = true;
        constructor() {
        ~~~~~~~~~~~
!!! error TS2376: A 'super' call must be the first statement in the constructor to refer to 'super' or 'this' when a derived class contains initialized properties, parameter properties, or private identifiers.
            super.receivesAnything(this);
            ~~~~~
!!! error TS17011: 'super' must be called before accessing a property of 'super' in the constructor of a derived class.
                                   ~~~~
!!! error TS17009: 'super' must be called before accessing 'this' in the constructor of a derived class.
            super(this);
                  ~~~~
```

LANGUAGE: typescript
CODE:
```
class Derived5 extends Base {
        prop = true;
        constructor() {
            super();
            super.receivesAnything();
        }
    }
```

LANGUAGE: typescript
CODE:
```
class DerivedWithArrowFunction extends Base {
        prop = true;
        constructor() {
            (() => this)();
            super();
        }
    }
```

LANGUAGE: typescript
CODE:
```
class DerivedWithClassDeclarationExtendingMember extends Base {
        memberClass = class { };
        constructor() {
        ~~~~~~~~~~~
!!! error TS2376: A 'super' call must be the first statement in the constructor to refer to 'super' or 'this' when a derived class contains initialized properties, parameter properties, or private identifiers.
            class InnerClass extends this.memberClass {
                                     ~~~~
!!! error TS17009: 'super' must be called before accessing 'this' in the constructor of a derived class.
                private method() {
                    return this;
                }
                private property = 7;
                constructor() {
                    super();
                    this.property;
                    this.method();
                }
            }
            super();
        }
    }
```

LANGUAGE: typescript
CODE:
```
class DerivedWithClassExpressionExtendingMember extends Base {
        memberClass = class { };
        constructor() {
        ~~~~~~~~~~~
!!! error TS2376: A 'super' call must be the first statement in the constructor to refer to 'super' or 'this' when a derived class contains initialized properties, parameter properties, or private identifiers.
            console.log(class extends this.memberClass { });
                                      ~~~~
!!! error TS17009: 'super' must be called before accessing 'this' in the constructor of a derived class.
            super();
        }
    }
```

----------------------------------------

TITLE: Loop with Destructuring Assignment from Function Return in TypeScript
DESCRIPTION: This snippet demonstrates a for loop that destructures the first element from the result of calling 'getRobot()' and assigns it to 'numberB'. It then logs the value of 'numberB' to the console.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_13

LANGUAGE: TypeScript
CODE:
```
for (numberB = getRobot()[0], i = 0; i < 1; i++) {
    console.log(numberB);
}
```

----------------------------------------

TITLE: Defining Mapped Types in TypeScript
DESCRIPTION: This snippet defines various mapped types using different combinations of readonly, optional, and non-null assertion modifiers. It demonstrates how to create flexible type transformations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypes6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
type T00<T> = { [P in keyof T]: T[P] };
type T01<T> = { [P in keyof T]?: T[P] };
type T02<T> = { [P in keyof T]+?: T[P] };
type T03<T> = { [P in keyof T]-?: T[P] };

type T04<T> = { readonly [P in keyof T]: T[P] };
type T05<T> = { readonly [P in keyof T]?: T[P] };
type T06<T> = { readonly [P in keyof T]+?: T[P] };
type T07<T> = { readonly [P in keyof T]-?: T[P] };

type T08<T> = { +readonly [P in keyof T]: T[P] };
type T09<T> = { +readonly [P in keyof T]?: T[P] };
type T10<T> = { +readonly [P in keyof T]+?: T[P] };
type T11<T> = { +readonly [P in keyof T]-?: T[P] };

type T12<T> = { -readonly [P in keyof T]: T[P] };
type T13<T> = { -readonly [P in keyof T]?: T[P] };
type T14<T> = { -readonly [P in keyof T]+?: T[P] };
type T15<T> = { -readonly [P in keyof T]-?: T[P] };
```

----------------------------------------

TITLE: Calling Overloaded Method with Incorrect Callback Type in TypeScript
DESCRIPTION: Demonstrates calling the overloaded method `x1` with different callback function types. Passing a callback that expects `'bye'` or `number` as the parameter to a function expecting `'hi'` results in type errors, highlighting the importance of type compatibility in TypeScript function calls. The example also demonstrates calling the function with a generic callback, showcasing where the compiler infers types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadOnConstNoAnyImplementation2.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var c: C;
c.x1(1, (x: 'hi') => { return 1; } );
c.x1(1, (x: 'bye') => { return 1; } );
c.x1(1, (x) => { return 1; } );

c.x1(1, (x: number) => { return 1; } );
```

----------------------------------------

TITLE: Destructuring MultiRobot Skills from Function in For Loop (TypeScript)
DESCRIPTION: This snippet demonstrates a for loop that calls a getMultiRobot() function and destructures its skills property to extract 'primary' and 'secondary' skills. The loop is set up but the body is not shown in the provided code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_17

LANGUAGE: TypeScript
CODE:
```
for (_e = getMultiRobot().skills, primary = _e.primary, secondary = _e.secondary, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Defining Classes A, B, and C in TypeScript
DESCRIPTION: This snippet defines three classes: A with a 'propA' property, B with a 'propB' property, and C extending A with an additional 'propC' property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardFunctionErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
    propA: number;
}

class B {
    propB: number;
}

class C extends A {
    propC: number;
}
```

----------------------------------------

TITLE: Instantiating and Using Derived Classes in TypeScript
DESCRIPTION: This snippet demonstrates the instantiation of derived classes 'Sub1' and 'SubSub1' and calls their overridden 'foo()' methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/super.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
var s = new Sub1();
var ss = new SubSub1();
s.foo() + ss.foo();
```

----------------------------------------

TITLE: Rendering JSX Tags without React in TypeScript
DESCRIPTION: This snippet demonstrates an attempt to render JSX tags in a TypeScript file, which fails due to the lack of an imported 'React' module. It demonstrates the importance of React in JSX rendering. The snippet highlights a class 'A' with a 'view' method returning JSX tags. 'c.a!.b' is used as a dynamic content value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxFactoryNotIdentifierOrQualifiedName.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { Element } from './Element';

let c: {
	a?: {
		b: string
	}
};

class A {
	view() {
		return [
			<meta content="helloworld"></meta>,
				 ~~~~
			<meta content={c.a!.b}></meta>
				 ~~~~
		];
	}
}
```

----------------------------------------

TITLE: Module Definitions in ESM Format (TypeScript)
DESCRIPTION: This TypeScript definition file defines module exports in ES module format, including circular import definitions that cause a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsConditionalPackageExports(module=nodenext).errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
// esm format file
import * as cjs from "inner/a";
import * as mjs from "inner/b";
import * as type from "inner";
import * as ts from "inner/types";
export { cjs };
export { mjs };
export { type };
export { ts };
export const mjsSource = true;
```

----------------------------------------

TITLE: Rest Parameters Type Error Examples in TypeScript
DESCRIPTION: Demonstrates two scenarios where TypeScript catches type errors when passing arrays instead of scalar values to function parameters. The code includes function declarations with union types and rest parameters, showing type checking for combined signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/signatureCombiningRestParameters5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare const test1:
  | ((...args: [a: string | number, b: number | boolean]) => void)
  | ((...args: [c: number | boolean, d: string | boolean]) => void);

test1(42, true);
test1(42, [true]); // error

declare function test2<
  A extends readonly unknown[],
  B extends readonly unknown[],
>(
  c: (...args: A) => void,
  d: (...args: B) => void,
  e: (arg: typeof c | typeof d) => void,
): void;

test2(
  (a: number | boolean, b: string | number) => {},
  (c: string | boolean, d: number | boolean) => {},
  (cb) => {
    cb(true, 42);
    cb(true, [42]); // error
  },
);
```

----------------------------------------

TITLE: Implementing Custom Iterator with Implicit 'any' Types in TypeScript
DESCRIPTION: This code snippet defines a custom string iterator class with a 'next' method and Symbol.iterator implementation. It demonstrates TypeScript errors related to implicit 'any' types in method return values and for-of loop variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/for-of35.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class MyStringIterator {
    next() {
        return {
            done: true,
            value: v
        }
    }

    [Symbol.iterator]() {
        return this;
    }
}

for (var v of new MyStringIterator) { }
```

----------------------------------------

TITLE: Generic Functions with Returned Generic Functions in TypeScript
DESCRIPTION: Showcases a generic function that returns another generic function, underlining TypeScript's ability to handle multi-layered generic contexts and reference resolution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeArgumentInference.errors.txt#2025-04-21_snippet_7

LANGUAGE: TypeScript
CODE:
```
    // Generic call with argument of generic function type
    function someGenerics8<T>(n: T): T { return n; }
    var x = someGenerics8(someGenerics7);
    x<string, string, string>(null, null, null);
```

----------------------------------------

TITLE: CommonJS Module with Import Errors
DESCRIPTION: CommonJS module attempting to import ES modules, resulting in TS1479 error due to incompatible module systems.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExportsTrailers(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// cjs format file
import * as cjsi from "inner/cjs/index.cjs";
import * as mjsi from "inner/mjs/index.mjs";
import * as typei from "inner/js/index.js";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: CommonJS to ESM Import Errors in index.cjs
DESCRIPTION: TypeScript errors showing invalid CommonJS require() calls attempting to import ECMAScript modules. The errors suggest using dynamic import() syntax instead.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
require('./index.js')      // TS1479: Use import("./index.js") instead
require('./index.mjs')     // TS1479: Use import("./index.mjs") instead
require('./subfolder/index.mjs')  // TS1479: Use import("./subfolder/index.mjs") instead
```

----------------------------------------

TITLE: TypeScript Module Declaration with Errors
DESCRIPTION: This snippet defines a TypeScript module 'replace-in-file' with a function `replaceInFile` and a nested namespace also named `replaceInFile`.  It declares the asynchronous function `replaceInFile` and its synchronous counterpart `sync`. The TypeScript compiler flags errors (TS2395) indicating that all declarations within the merged declaration 'replaceInFile' must have the same export status (either all exported or all local).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/namespaceNotMergedWithFunctionDefaultExport.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare module 'replace-in-file' {
  export function replaceInFile(config: unknown): Promise<unknown[]>;
  export default replaceInFile;

  namespace replaceInFile {
    export function sync(config: unknown): unknown[];
  }
}
```

----------------------------------------

TITLE: TypeScript Class Inheritance and Self-Reference Type Checking
DESCRIPTION: Demonstrates TypeScript type checking behavior with class self-references, inheritance, and instance assignments. Shows various error cases when dealing with 'this' type and subclass relationships.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeRelationships.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    self = this;
    c = new C();
    foo() {
        return this;
    }
    f1() {
        this.c = this.self;
        this.self = this.c;  // Error
    }
    f2() {
        var a: C[];
        var a = [this, this.c];  // C[] since this is subtype of C
        var b: this[];
        var b = [this, this.self, null, undefined];
    }
    f3(b: boolean) {
        return b ? this.c : this.self;  // Should be C
    }
}

class D extends C {
    self1 = this;
    self2 = this.self;
    self3 = this.foo();
    d = new D();
    bar() {
        this.self = this.self1;
        this.self = this.self2;
        this.self = this.self3;
        this.self1 = this.self;
        this.self2 = this.self;
        this.self3 = this.self;
        this.d = this.self;
        this.d = this.c;  // Error
        this.self = this.d;  // Error
        this.c = this.d;
    }
}
```

----------------------------------------

TITLE: Subclass with Override and Default Value JavaScript
DESCRIPTION: This code snippet defines class 'D' as a subclass of 'C', using the 'super' call to initialize properties from the superclass. The constructor of 'D' accepts an optional parameter 'a', defaulting to 100, and assigns it via the superclass. The method 'dProp' returns 'this', referencing the instance itself.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassConstructorWithExplicitReturns01.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
var D = /** @class */ (function (_super) {
    __extends(D, _super);
    function D(a) {
        if (a === void 0) { a = 100; }
        var _this = _super.call(this, a) || this;
        _this.dProp = function () { return _this; };
    

    return D;
}(C));
```

----------------------------------------

TITLE: Defining Custom Record2 Type Alias in TypeScript
DESCRIPTION: Defines a custom Record2 type alias that mirrors the functionality of the built-in Record type, using mapped types to create an object type with keys of type K and values of type T.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/consistentAliasVsNonAliasRecordBehavior.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type Record2<K extends keyof any, T> = {
    [P in K]: T;
};
```

----------------------------------------

TITLE: Implementing a Tagged Template Function in TypeScript
DESCRIPTION: Definition of a function 'bar' that serves as a tagged template handler, accepting template strings array and rest arguments. The function calls another function 'baz' internally.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callHierarchyTaggedTemplate.callHierarchy.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function bar(array: TemplateStringsArray, ...args: any[]) {
    baz();
}
```

----------------------------------------

TITLE: Defining Classes with Different Constructor Accessibilities in TypeScript
DESCRIPTION: This snippet defines three base classes (BaseA, BaseB, BaseC) with public, protected, and private constructors respectively. It demonstrates how these accessibility modifiers affect class instantiation and inheritance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classConstructorAccessibility2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class BaseA {
    public constructor(public x: number) { }
    createInstance() { new BaseA(1); }
}

class BaseB {
    protected constructor(public x: number) { }
    createInstance() { new BaseB(2); }
}

class BaseC {
    private constructor(public x: number) { }
    createInstance() { new BaseC(3); }
    static staticInstance() { new BaseC(4); }
}
```

----------------------------------------

TITLE: Interface and Class Type Mismatch Example in TypeScript
DESCRIPTION: Demonstrates type checking errors when extending a base class with incompatible property types. Shows interface inheritance issues with index signatures and missing required properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/duplicateErrorClassExpression.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface ComplicatedTypeBase {
    [s: string]: ABase;
}
interface ComplicatedTypeDerived {
    [s: string]: ADerived;
}
interface ABase {
    a: string;
}
interface ADerived {
    b: string;
}
class Base {
    foo!: ComplicatedTypeBase;
}
const x = class Derived extends Base {
    foo!: ComplicatedTypeDerived;
}
let obj: { 3: string } = { 3: "three" };
obj[x];
```

----------------------------------------

TITLE: Type Narrowing with Date Instance in TypeScript
DESCRIPTION: This snippet demonstrates using 'instanceof' to check for 'Date' type, and notes a common error encountered when accessing a non-existent property 'getHuors' instead of the correct 'getHours'. It highlights the necessity of verifying property names when narrowing types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowFromAnyWithInstanceof.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
if (x instanceof Date) {
        x.getDate();
        x.getHuors();
          ~~~~~~~~
!!! error TS2551: Property 'getHuors' does not exist on type 'Date'. Did you mean 'getHours'?
!!! related TS2728 lib.es5.d.ts:--:--: 'getHours' is declared here.
    }
```

----------------------------------------

TITLE: Type Narrowing Limitations with Reassignment in TypeScript
DESCRIPTION: This class shows the limitations of type narrowing when reassignment occurs. It demonstrates that some narrowings may be invalidated due to later assignments, causing type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowAliasing.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
class C11 {
    constructor(readonly x: string | number) {
        const thisX_isString = typeof this.x === 'string';
        const xIsString = typeof x === 'string';
        if (thisX_isString && xIsString) {
            // Some narrowings may be invalidated due to later assignments.
            let s: string;
            s = this.x;
            s = x;
            ~
!!! error TS2322: Type 'string | number' is not assignable to type 'string'.
!!! error TS2322:   Type 'number' is not assignable to type 'string'.
        }
        else {
            this.x = 10;
            x = 10;
        }
    }
}
```

----------------------------------------

TITLE: Implementing FooIterator Class in TypeScript
DESCRIPTION: This class implements the iterator protocol, always returning a new Foo instance and never completing. It also implements the iterable protocol by returning itself.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/iterableArrayPattern16.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
class FooIterator {
    next() {
        return {
            value: new Foo,
            done: false
        };
    }

    [Symbol.iterator]() {
        return this;
    }
}
```

----------------------------------------

TITLE: Defining and Using Obj1 with JSX in TypeScript
DESCRIPTION: This snippet defines an interface Obj1type and a variable Obj1, then uses it in a JSX expression. It demonstrates a valid usage of JSX attributes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxElementResolution12.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
interface Obj1type {
	new(n: string): any;
}
var Obj1: Obj1type;
<Obj1 x={10} />; // OK
```

----------------------------------------

TITLE: Demonstrating Duplicate Identifier Errors in TypeScript Modules
DESCRIPTION: This code demonstrates a TypeScript error where a module 'A.M' tries to import 'Z.I' and 'Z.M' using the same identifier 'M', which already exists as the module name itself. This causes a duplicate identifier error during compilation, because the import statement creates a new symbol called 'M', that clashes with the module 'M'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleSharesNameWithImportDeclarationInsideIt5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module Z {
    export module M {
        export function bar() {
            return "";
        }
    }
    export interface I { }
}
module A.M {
    import M = Z.I;
           ~ // Error TS2300: Duplicate identifier 'M'.
    import M = Z.M;
           ~ // Error TS2300: Duplicate identifier 'M'.

    export function bar() {
    }
    M.bar(); // Should call Z.M.bar
}
```

----------------------------------------

TITLE: TypeScript Error TS1470: import.meta in CommonJS
DESCRIPTION: This snippet demonstrates the TypeScript error TS1470, which occurs when attempting to use `import.meta` within a file that is configured to be compiled into CommonJS output. The error message indicates that `import.meta` is not supported in CommonJS environments. This usually happens when a file is part of a project configured to use CommonJS, or if its parent `package.json` file specifies `"type": "commonjs"`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportMeta(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// cjs format file
const x = import.meta.url;
          ~~~~~~~~~~~
!!! error TS1470: The 'import.meta' meta-property is not allowed in files which will build into CommonJS output.
export {x};
```

----------------------------------------

TITLE: Demonstrating TypeScript Error in Class Inheritance
DESCRIPTION: This code snippet shows a base class A with generic types and a derived class C. The error occurs in C's constructor when calling super, where an attempt is made to call a Number type as if it were a function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/superCallParameterContextualTyping2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class A<T1, T2> {
    constructor(private map: (value: T1) => T2) {

    }
}

class C extends A<number, string> {
    // Ensure 'value' is not of type 'any' by invoking it with type arguments.
    constructor() { super(value => String(value<string>())); }
}
```

----------------------------------------

TITLE: Handling Errors with Destructuring in TypeScript
DESCRIPTION: Demonstrates the use of destructuring in catch clauses with TypeScript. The try-catch blocks showcase potential errors when accessing properties of unknown types due to strict type checking. Explicitly handling error types can mitigate these issues. Each example highlights the errors when using destructuring with variables of type 'unknown'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructureCatchClause(strict=true,useunknownincatchvariables=false).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// These are okay with useUnknownInCatchVariables=false, but not okay with useUnknownInCatchVariables=true.
    try {} catch ({ x }) { x }
    try {} catch ([ x ]) { x }
    
    try {} catch ({ a: { x } }) { x }
    try {} catch ({ a: [ x ] }) { x }
    
    try {} catch ([{ x }]) { x }
    try {} catch ([[ x ]]) { x }
    
    try {} catch ({ a: { b: { c: { x }} }}) { x }
    
    
    try {} catch ({ x }: any) { x }
    try {} catch ([ x ]: any) { x }
    
    try {} catch ({ a: { x } }: any) { x }
    try {} catch ({ a: [ x ] }: any) { x }
    
    try {} catch ([{ x }]: any) { x }
    try {} catch ([[ x ]]: any) { x }
    
    try {} catch ({ a: { b: { c: { x }} }}: any) { x }
    
    
    try {} catch ({ x }: unknown) { x }
                    ~
!!! error TS2339: Property 'x' does not exist on type 'unknown'.
    try {} catch ([ x ]: unknown) { x }
                  ~~~~~
!!! error TS2461: Type 'unknown' is not an array type.
    
    try {} catch ({ a: { x } }: unknown) { x }
                    ~
!!! error TS2339: Property 'a' does not exist on type 'unknown'.
    try {} catch ({ a: [ x ] }: unknown) { x }
                    ~
!!! error TS2339: Property 'a' does not exist on type 'unknown'.
    
    try {} catch ([{ x }]: unknown) { x }
                  ~~~~~~~
!!! error TS2461: Type 'unknown' is not an array type.
    try {} catch ([[ x ]]: unknown) { x }
                  ~~~~~~~
!!! error TS2461: Type 'unknown' is not an array type.
    
    try {} catch ({ a: { b: { c: { x }} }}: unknown) { x }
                    ~
!!! error TS2339: Property 'a' does not exist on type 'unknown'.
```

----------------------------------------

TITLE: JavaScript Module Import with Dynamic Import Error
DESCRIPTION: JavaScript file demonstrating different import patterns including a dynamic import that causes an error in ES5 due to missing Promise support. It also shows using require for importing with access to module properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerSyntaxRestrictions(module=preserve).errors.txt#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import {} from "./a";
import("./a");
const _ = require("./a");
_.a; // any
```

----------------------------------------

TITLE: Export Assignment Error in TypeScript Module
DESCRIPTION: Demonstrates an error when using CommonJS-style 'export =' syntax while targeting ECMAScript modules. The code needs to use 'export default' instead.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAssignmentWithoutAllowSyntheticDefaultImportsError.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export = bar;
function bar() {}
```

----------------------------------------

TITLE: Testing Function Compatibility with Leading Parameter and Rest Parameters
DESCRIPTION: Tests compatibility of various function signatures with a target type that has a required parameter followed by rest parameters. Shows compatibility rules for (x: number, ...z: number[]) => number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithCallSignaturesWithRestParameters.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var a2: (x: number, ...z: number[]) => number;
    a2 = () => 1; // ok, fewer required params
    a2 = (...args: number[]) => 1; // ok, fewer required params
    a2 = (x?: number) => 1; // ok, fewer required params
    a2 = (x: number) => 1; // ok, same number of required params
    a2 = (x: number, ...args: number[]) => 1; // ok, same number of required params
    a2 = (x: number, ...args: string[]) => 1; // should be type mismatch error
    a2 = (x: number, y: number) => 1; // ok, rest param corresponds to infinite number of params
    a2 = (x: number, y?: number) => 1; // ok, same number of required params
```

----------------------------------------

TITLE: Handling Method Overriding Errors in TypeScript
DESCRIPTION: This TypeScript snippet illustrates errors arising from conflicting method definitions when extending classes. Class Good defines properties f and g, while class Baad attempts to redefine them, leading to TS2425 and TS2416 errors due to type mismatches and method signature conflicts. The snippet highlights the importance of ensuring type compatibility and correct method signatures when extending classes in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/multipleInheritance.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
    class N {
        public y:number;
    }
    
    class ND extends N { // any is assignable to number
        public y;
    }
    
    class Good {
        public f:() => number = function() { return 0; }
        public g() { return 0; }
    }
    
    class Baad extends Good {
        public f(): number { return 0; }
               ~
!!! error TS2425: Class 'Good' defines instance member property 'f', but extended class 'Baad' defines it as instance member function.
        public g(n:number) { return 0; }
               ~
!!! error TS2416: Property 'g' in type 'Baad' is not assignable to the same property in base type 'Good'.
!!! error TS2416:   Type '(n: number) => number' is not assignable to type '() => number'.
!!! error TS2416:     Target signature provides too few arguments. Expected 1 or more, but got 0.
    }
```

----------------------------------------

TITLE: Const Assertions in Function Returns and Type Definitions in TypeScript
DESCRIPTION: This snippet demonstrates the use of const assertions in function return values and how they interact with type definitions. It includes examples of template literal types and conditional type narrowing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constAssertions.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
function ff4(verify: boolean, contentMatches: boolean) {
    const action : Action = verify ? `verify` : `write`;
    const contentMatch: ContentMatch = contentMatches ? `match` : `nonMatch`;
    const outcome: Outcome = `${action}_${contentMatch}` as const;
    return outcome;
}

function ff5(verify: boolean, contentMatches: boolean) {
    const action = verify ? `verify` : `write`;
    const contentMatch = contentMatches ? `match` : `nonMatch`;
    const outcome = `${action}_${contentMatch}` as const;
    return outcome;
}
```

----------------------------------------

TITLE: Demonstrating Number vs number Type Error in TypeScript
DESCRIPTION: This code snippet illustrates a common TypeScript type error when mixing Number object types with number primitive types. The error occurs when assigning a variable of type Number to a variable of type number, as TypeScript strictly enforces the distinction between primitive types and their corresponding wrapper objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignFromNumberInterface.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var x = 1;
var a: Number;
x = a;
a = x;
```

----------------------------------------

TITLE: Defining a Generic Class with Static Method in TypeScript
DESCRIPTION: This code defines a generic class `MemberName` with three type parameters `A`, `B`, and `C`. It includes a static method `create` that returns an instance of `MemberName`. The error TS2314 indicates that the generic type `MemberName` within the `create` method's return type requires three type arguments but they are not provided.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericRecursiveImplicitConstructorErrors3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module TypeScript {
    export class MemberName <A,B,C>{
        static create<A,B,C>(arg1: any, arg2?: any, arg3?: any): MemberName {
                                                                 ~~~~~~~~~~
!!! error TS2314: Generic type 'MemberName<A, B, C>' requires 3 type argument(s).
        }
    }
}
```

----------------------------------------

TITLE: Defining Function with Object or Undefined - TypeScript
DESCRIPTION: This function takes an argument that can either be an object or of type T extending undefined, successfully spreading it without error, illustrating flexibility in type definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/spreadObjectOrFalsy.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function f4<T extends undefined>(a: object | T) {
        return { ...a };
    }
```

----------------------------------------

TITLE: Demonstrating TypeScript Class-Interface Error Cases in TypeScript
DESCRIPTION: This code shows three incorrect cases where classes try to extend interfaces using 'extends' instead of 'implements'. It demonstrates the error for a simple interface, a generic interface, and an interface in a nested namespace structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classExtendsInterfaceInModule.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module M {
  export interface I1 {}
  export interface I2<T> {}
}
class C1 extends M.I1 {}
class C2<T> extends M.I2<T> {}

module Mod {
	export namespace Nested {
		export interface I {}
	}
}

class D extends Mod.Nested.I {}
```

----------------------------------------

TITLE: Arithmetic Operations with Bigint and Number
DESCRIPTION: Shows various arithmetic operations between bigint and number types, highlighting type incompatibilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/numberVsBigIntOperations.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
bigInt = 1n + 2n; num = 1 + 2; 1 + 2n; 1n + 2;
bigInt = 1n - 2n; num = 1 - 2; 1 - 2n; 1n - 2;
bigInt = 1n * 2n; num = 1 * 2; 1 * 2n; 1n * 2;
bigInt = 1n / 2n; num = 1 / 2; 1 / 2n; 1n / 2;
bigInt = 1n % 2n; num = 1 % 2; 1 % 2n; 1n % 2;
bigInt = 1n ** 2n; num = 1 ** 2; 1 ** 2n; 1n ** 2;
```

----------------------------------------

TITLE: Invalid Component Usage with Extra Properties
DESCRIPTION: Examples of TypeScript errors when using the React component with invalid props. This includes passing extra properties, missing required properties, and type incompatibilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentOverload4.errors.txt#2025-04-21_snippet_2

LANGUAGE: TSX
CODE:
```
// Error
const c0 = <OneThing extraProp />;  // extra property;
const c1 = <OneThing yy={10}/>;  // missing property;
const c2 = <OneThing {...obj} yy1 />; // type incompatible;
const c3 = <OneThing {...obj} {...{extra: "extra attr"}} />;  //  This is OK because all attribute are spread
const c4 = <OneThing {...obj} y1={10000} />;  // extra property;
```

----------------------------------------

TITLE: Handling Boolean Conditions and Scope - TypeScript
DESCRIPTION: The function 'f5a' demonstrates the effect of boolean conditions on scope and type narrowing, showcasing retention of type information across different scenarios in closures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowingPastLastAssignment.errors.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
function f5a(cond: boolean) {
    if (cond) {
        let x: number | undefined;
        x = 1;
        action(() => { x /* number */ });
    }
    else {
        let x: number | undefined;
        x = 2;
        action(() => { x /* number */ });
    }
}
```

----------------------------------------

TITLE: Call Function with Map Argument - TypeScript
DESCRIPTION: Calls the `takeFirstTwoEntries` function, passing a `Map<string, number>` instance as the argument. This call results in a TS2345 error because the `Map` type is not compatible with the expected `[string, number][]` type for the pattern matching.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/iterableArrayPattern26.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
takeFirstTwoEntries(new Map([["", 0], ["hello", 1]]));
```

----------------------------------------

TITLE: Importing Default Exports in TypeScript
DESCRIPTION: This TypeScript file imports default exports from other files in the project. It shows how to import from both .js files and directories using ES6 import syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/extensionLoadingPriority(moduleresolution=node16).errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
import a from "./a.js";
import dir from "./dir";
```

----------------------------------------

TITLE: Generic Function with Reversed Parameter Order and Number Constraint
DESCRIPTION: Similar to the previous example but with reversed generic parameter order, showing errors when string is used where number is expected.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeArgumentInferenceWithConstraints.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
// 2 parameter generic call with argument 2 of type parameter type and argument 1 of function type whose parameter is of type parameter type
function someGenerics5<U extends number, T>(n: T, f: (x: U) => void) { }
someGenerics5(4, () => null); // Valid
someGenerics5<number, string>('', () => 3);
someGenerics5<number, string>('', (x: string) => ''); // Error
someGenerics5<string, number>(null, null); // Error
```

----------------------------------------

TITLE: Defining Class and Interface with String Indexer in TypeScript
DESCRIPTION: This TypeScript code defines a class and an interface that use a string index signature, which generates errors as string properties cannot be assigned to a number index type. The file showcases how TypeScript manages index types and static methods, and includes an illustration with errors exposed through type checking. Key elements include the class 'C' with a static method and interface 'I' demonstrating indexer and method signatures. There are no external dependencies, and expected behavior is to highlight type mismatch issues through compiler errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/stringIndexerAndConstructor.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    [s: string]: number;
    constructor() { }
    static v() { }
}

interface I {
    [s: string]: number;
    (): boolean;
    new (): boolean;
    "": string;
    ||<...>|
```

----------------------------------------

TITLE: Dynamic Import Resolution Errors
DESCRIPTION: Examples of dynamic import() statements that generate errors due to ESM resolution rules requiring explicit file extensions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node16).errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
const _m35 = import("./");
const _m36 = import("./index");
const _m37 = import("./subfolder");
const _m38 = import("./subfolder/");
const _m39 = import("./subfolder/index");
const _m40 = import("./subfolder2");
const _m41 = import("./subfolder2/");
const _m42 = import("./subfolder2/index");
```

----------------------------------------

TITLE: TypeScript Relative Import Error in ES Module
DESCRIPTION: This code demonstrates TypeScript's error reporting when a relative import path lacks an explicit file extension in an ECMAScript module. The error TS2835 suggests adding the '.mjs' extension. The error TS2834 requires the user to add the extension manually.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionWithoutExtension1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
"    // Extensionless relative path ES import in an ES module
    import { foo } from \"./foo\"; // should error, suggest adding \".mjs\"
                        ~~~~~~~
!!! error TS2835: Relative import paths need explicit file extensions in ECMAScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Did you mean './foo.mjs'?
    import { baz } from \"./baz\"; // should error, ask for extension, no extension suggestion
                        ~~~~~~~
!!! error TS2834: Relative import paths need explicit file extensions in ECMAScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Consider adding an extension to the import path.
    "
```

----------------------------------------

TITLE: Defining Recursive Type ValueOrArray in TypeScript
DESCRIPTION: This snippet defines a recursive type `ValueOrArray<T>` which can be either a value of type `T` or an array containing values of type `T` or other `ValueOrArray<T>` instances. This allows for arbitrarily nested arrays of the specified type. Two constants, `a0` and `a1`, are then declared using this type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveTypeReferences1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type ValueOrArray<T> = T | Array<ValueOrArray<T>>;

const a0: ValueOrArray<number> = 1;
const a1: ValueOrArray<number> = [1, [2, 3], [4, [5, [6, 7]]]];
```

----------------------------------------

TITLE: Exporting Constants in TypeScript
DESCRIPTION: This snippet defines and exports two constant values in a TypeScript module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importAssertion1(module=esnext).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export const a = 1;
export const b = 2;
```

----------------------------------------

TITLE: Exporting A as Value in TypeScript
DESCRIPTION: This snippet defines a constant 'A' as an empty object and exports it. It serves as an example of exporting a value in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeOnlyMerge2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const A = {};
export { A };
```

----------------------------------------

TITLE: Incorrect Type Conversion in TypeScript
DESCRIPTION: This snippet shows an attempt to convert a function returning a string to a type expecting a function returning a number. The TypeScript compiler throws an error due to type incompatibility.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping39.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var foo = <{ (): number; }> function() { return "err"; };
```

----------------------------------------

TITLE: Importing and Creating Additional Module Exports
DESCRIPTION: Demonstrates importing from another module and creating local exports including a class, variables, and a function
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootAbsolutePathModuleSimpleSpecifyOutputFile/node/mapRootAbsolutePathModuleSimpleSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import m1 = require("m1");
export var a1 = 10;
export class c1 {
    public p1: number;
}

export var instance1 = new c1();
export function f1() {
    return instance1;
}

export var a2 = m1.m1_c1;
```

----------------------------------------

TITLE: Function with Implicit [any] Return Type in TypeScript
DESCRIPTION: This snippet demonstrates a function that lacks a return type annotation and implicitly gets an [any] return type. It attempts to initialize a string tuple with undefined, causing TypeScript error TS7010.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/wideningTuples7.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var foo = function bar() {
    let intermediate: [string];
    return intermediate = [undefined];
};
```

----------------------------------------

TITLE: Invalid Parameter Properties with Type in Interface Method Signature - TypeScript
DESCRIPTION: This snippet shows an interface method signature attempting to use a typed `public` modifier on a parameter. Parameter properties are only allowed in class constructors, resulting in TypeScript error TS2369.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callSignaturesWithAccessibilityModifiersOnParameters.errors.txt#_snippet_16

LANGUAGE: typescript
CODE:
```
foo(public x: number, y: string);
```

----------------------------------------

TITLE: Defining Classes and Typeguards in TypeScript
DESCRIPTION: This snippet defines several classes and functions demonstrating the use of the 'in' keyword for typeguards in TypeScript. It aims to check property existence in union types but contains potential errors when properties are accessed incorrectly. The code requires TypeScript to enforce type constraints and handle 'in' operator logic. Inputs include instances of defined classes, and outputs are based on the evaluation of typeguards. Limitations include handling properties not present on all union members.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=true).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class A { a: string; }
class B { b: string; }

function negativeClassesTest(x: A | B) {
    if ("a" in x) {
        x.b = "1";
    } else {
        x.a = "1";
    }
}

function positiveClassesTest(x: A | B) {
    if ("a" in x) {
        x.b = "1";
    } else {
        x.a = "1";
    }
}

class AWithOptionalProp { a?: string; }
class BWithOptionalProp { b?: string; }

function positiveTestClassesWithOptionalProperties(x: AWithOptionalProp | BWithOptionalProp) {
    if ("a" in x) {
        x.a = "1";
    } else {
        x.b = "1";
    }
}

class AWithMethod {
    a(): string { return ""; }
}

class BWithMethod {
    b(): string { return ""; }
}

function negativeTestClassesWithMembers(x: AWithMethod | BWithMethod) {
    if ("a" in x) {
        x.a();
        x.b();
    } else {
    }
}

function negativeTestClassesWithMemberMissingInBothClasses(x: AWithMethod | BWithMethod) {
    if ("c" in x) {
        x.a();
        x.b();
    } else {
        x.a();
        x.b();
    }
}

class C { a: string; }
class D { a: string; }

function negativeMultipleClassesTest(x: A | B | C | D) {
    if ("a" in x) {
        x.b = "1";
    } else {
        x.a = "1";
    }
}

class ClassWithUnionProp { prop: A | B }

function negativePropTest(x: ClassWithUnionProp) {
    if ("a" in x.prop) {
        let y: string = x.prop.b;
    } else {
        let z: string = x.prop.a;
    }
}

class NegativeClassTest {
    protected prop: A | B;
    inThis() {
        if ("a" in this.prop) {
            let z: number = this.prop.b;
        } else {
            let y: string = this.prop.a;
        }
    }
}

class UnreachableCodeDetection {
    a: string;
    inThis() {
        if ("a" in this) {
        } else {
            let y = this.a;
        }
    }
}

function positiveIntersectionTest(x: { a: string } & { b: string }) {
    if ("a" in x) {
        let s: string = x.a;
    } else {
        let n: never = x;
    }
}

// Repro from #38608
declare const error: Error;
if ('extra' in error) {
    error // Still Error
} else {
    error // Error
}

function narrowsToNever(x: { l: number } | { r: number }) {
    let v: number;
    if ("l" in x) {
        v = x.l;
    }
    else if ("r" in x) {
        v = x.r;
    }
    else {
        v = x
    }
    return v;
}

type AOrB = { aProp: number } | { bProp: number };
declare function isAOrB(x: unknown): x is AOrB;

declare var x: unknown;
if (isAOrB(x)) {
    if ("aProp" in x) {
        x.aProp;
    }
    else if ("bProp" in x) {
        x.bProp;
    }
    // x is never because of the type predicate from unknown
    else if ("cProp" in x) {
        const _never: never = x;
    }
}

function negativeIntersectionTest() {
    if ("ontouchstart" in window) {
        window.ontouchstart
    } else {
        window.ontouchstart
    }
}

```

----------------------------------------

TITLE: Generic Class with Forward Reference Error in TypeScript
DESCRIPTION: The 'mixtus' class attempts to extend 'argurus.pygmaea' which causes a TypeScript error because 'pygmaea' is used before its declaration. The class includes a complex type definition with nested generics.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
export class mixtus<T0, T1> extends argurus.pygmaea<argurus.oreas, panglima.fundatus<quasiater.carolinensis, macrorhinos.daphaenodon>> {
                                              ~~~~~~~
!!! error TS2449: Class 'pygmaea' used before its declaration.
```

----------------------------------------

TITLE: Usage of React Component with Specified Generic, PropTypes, and DefaultProps
DESCRIPTION: This snippet shows usages of the 'BothWithSpecifiedGeneric' React component, demonstrating correct prop passing and an intentional error to showcase TypeScript's type checking for components with a combination of specified generic type, PropTypes, and default props.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxLibraryManagedAttributes.errors.txt#2025-04-21_snippet_7

LANGUAGE: TSX
CODE:
```
const n = <BothWithSpecifiedGeneric foo="fine" bar="yes" baz={12} />;
const o = <BothWithSpecifiedGeneric foo="no" />; // Error, missing required prop bar
```

----------------------------------------

TITLE: DOM Element Assignment Error
DESCRIPTION: TSX file demonstrating type error when attempting to assign a DOM JSX element to a variable containing a Predom JSX element
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inlineJsxFactoryLocalTypeGlobalFallback.errors.txt#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
/** @jsx dom */
import { dom } from "./renderer"
import prerendered from "./component";
let elem = prerendered;
elem = <h></h>; // Expect assignability error here
```

----------------------------------------

TITLE: TypeScript Definition File (index.d.mts)
DESCRIPTION: This TypeScript declaration file (`.d.mts`) demonstrates module imports and exports. It imports modules 'inner/cjs', 'inner/mjs', and 'inner', and then exports them.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackageExports(module=nodenext).errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
    // esm format file
    import * as cjs from "inner/cjs";
    import * as mjs from "inner/mjs";
    import * as type from "inner";
    export { cjs };
    export { mjs };
    export { type };
```

----------------------------------------

TITLE: Demonstrating Variable Scope in TypeScript Catch Blocks
DESCRIPTION: This snippet demonstrates that variables declared in catch blocks (ex1) are limited in scope to their respective catch blocks. Attempting to access catch variables outside their block results in a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/scopingInCatchBlocks.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
try { } catch(ex1) { 
	throw ex1;
}

try { } catch(ex1) { } // should not error

try { } catch(ex1) { } // should not error

var x = ex1; // should error
```

----------------------------------------

TITLE: TypeScript Class Inheritance with Property Access
DESCRIPTION: This class demonstrates how property access works in class inheritance. The derived class D can access properties from the base class C without initialization errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignParameterPropertyToPropertyDeclarationES2022.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class D extends C {
    quill = this.foo // ok
}
```

----------------------------------------

TITLE: Package Configuration for ES Modules
DESCRIPTION: This JSON snippet configures the package to use ES modules by default through the 'type' field set to 'module'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExports(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Assignability Checks Between Recursive Tuple Types in TypeScript
DESCRIPTION: This snippet demonstrates type mismatch and assignability issues between two recursive type definitions, `T1` and `T2`, that only differ in the type of the first element of the tuple. It uses a function `qq` to highlight these issues with TypeScript's type checking, revealing where type checks fail due to the hardcoded literal value in `T2`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferFromNestedSameShapeTuple.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
type T1<T> = [number, T1<{ x: T }>];
type T2<T> = [42, T2<{ x: T }>];

function qq<U>(x: T1<U>, y: T2<U>) {
    x = y;
    y = x;  // Error
}
```

----------------------------------------

TITLE: TypeScript Class Import and Extension
DESCRIPTION: Example of importing class A from a relative path and extending it to create class B.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/outModuleConcatCommonjs.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import {A} from "./ref/a";
export class B extends A { }
```

----------------------------------------

TITLE: TypeScript Error Case with Optional Chaining in Conditional Statements
DESCRIPTION: Demonstrates a TypeScript error case where optional chaining doesn't protect against all undefined access. Although the code uses optional chaining for the condition check, TypeScript detects a possible undefined access in the function body.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowOptionalChain.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
interface SomeObject {
    someProperty: unknown;
}

let lastSomeProperty: unknown | undefined;

function someFunction(someOptionalObject: SomeObject | undefined): void {
    if (someOptionalObject?.someProperty !== lastSomeProperty) {
        console.log(someOptionalObject);
        console.log(someOptionalObject.someProperty);  // Error
                    ~~~~~~~~~~~~~~~~~~
!!! error TS18048: 'someOptionalObject' is possibly 'undefined'.
        lastSomeProperty = someOptionalObject?.someProperty;
    }
}

const someObject: SomeObject = {
    someProperty: 42
};

someFunction(someObject);
someFunction(undefined);
```

----------------------------------------

TITLE: Function with Destructured Parameter and Default Values in TypeScript
DESCRIPTION: Defines a function foo1 with a destructured parameter that includes nested object binding patterns and default values for Robot properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringParameterNestedObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function foo1({
    skills: {
        primary: primaryA = "primary",
        secondary: secondaryA = "secondary"
    } = { primary: "SomeSkill", secondary: "someSkill" }
}: Robot = robotA) {
    // Function body
}
```

----------------------------------------

TITLE: Valid string inputs for number template literal type (TypeScript)
DESCRIPTION: Shows examples of string literals that are correctly assigned to a parameter typed as `${number}`. This includes integers, binary, hexadecimal, octal, scientific notation, and floating-point numbers, demonstrating the range of valid string representations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypesPatterns.errors.txt#_snippet_7

LANGUAGE: TypeScript
CODE:
```
numbers("1");
numbers("-1");
numbers("0");
numbers("0b1");
numbers("0x1");
numbers("0o1");
numbers("1e21");
numbers("1E21");
numbers("1e-21");
numbers("1E-21");
numbers("1.1");
numbers("-1.1");
numbers("-1.1e-10");
numbers("-1.1E-10");
numbers("1.1e-10");
```

----------------------------------------

TITLE: Robot Data Structure Iteration
DESCRIPTION: For loop iterating over an array of robot objects with name and skills properties, defining primary and secondary capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
for (var _17 = 0, _18 = [{ name: "mower", skills: { primary: "mowing", secondary: "none" } },
    { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }]; _17 < _18.length; _17++) {
```

----------------------------------------

TITLE: Define TypeScript Generic Interface with Constraint
DESCRIPTION: Defines a generic interface `G<T, U>` in TypeScript where `U` is constrained to be a subtype of `B`. This ensures that any type used as `U` must have at least the properties defined in interface `B`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generics2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface G<T, U extends B> {
    x: T;
    y: U;
}
```

----------------------------------------

TITLE: Type Error in String Length Calculation with Union Types
DESCRIPTION: Example of type errors when trying to calculate string length with a union type (string | number | boolean) in a while loop. Shows how TypeScript prevents passing a potentially incompatible type to a string-only function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowIterationErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f1() {
    let x: string | number | boolean;
    x = "";
    while (cond) {
        x = len(x);
        x;
    }
    x;
}
```

----------------------------------------

TITLE: Defining Function with Tuple Parameter in TypeScript
DESCRIPTION: Defines a function that takes a tuple of two numbers as a parameter. This function calculates the distance from the origin using the Pythagorean theorem.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/readonlyTupleAndArrayElaboration.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function distanceFromOrigin([x, y]: [number, number]) {
    return Math.sqrt(x ** 2 + y ** 2);
}
```

----------------------------------------

TITLE: Implementing Comparable Interface with Class A in TypeScript
DESCRIPTION: This code defines a generic class `A<T>` that implements the `Comparable<T>` interface.  The `compareTo` method is implemented to always return 1, indicating a simple comparison logic.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericAssignmentCompatWithInterfaces1.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
class A<T> implements Comparable<T> { compareTo(other: T) { return 1; } }
```

----------------------------------------

TITLE: TypeScript Array Destructuring - Robot Type Implementation
DESCRIPTION: Defines a Robot type and implements array destructuring patterns in multiple function signatures. Includes variable initialization and console logging of destructured values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringParametertArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
var robotA = ["trimmer", ["trimming", "edging"]];

function foo1(_a) {
    var skillA = _a[1];
    console.log(skillA);
}

function foo2(_a) {
    var nameMB = _a[0];
    console.log(nameMB);
}

function foo3(_a) {
    var nameMA = _a[0], _b = _a[1], primarySkillA = _b[0], secondarySkillA = _b[1];
    console.log(nameMA);
}

function foo4(_a) {
    var multiRobotAInfo = _a.slice(0);
}
```

----------------------------------------

TITLE: Defining Async FooMethod Type with Union of Tuples
DESCRIPTION: This snippet defines a type `FooAsyncMethod` similar to `FooMethod`, but the `method` returns a `Promise<any>`. This allows for asynchronous operations within the method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_27

LANGUAGE: typescript
CODE:
```
    type FooAsyncMethod = {
      method(...args:
        [type: "str", cb: (e: string) => void] |
        [type: "num", cb: (e: number) => void]
      ): Promise<any>;
    }
    
    let fooAsyncM: FooAsyncMethod = {
      async method(type, cb) {
        if (type == 'num') {
          cb(123)
        } else {
          cb("abc")
        }
      }
    };

```

----------------------------------------

TITLE: TypeScript Decorator and Object Spread Example
DESCRIPTION: Demonstrates the usage of decorators with a class declaration and object spread syntax in TypeScript. Includes declaration of decorator-related variables and basic object manipulation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emitHelpersWithLocalCollisions(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare var dec: any, __decorate: any;
@dec export class A {
}

const o = { a: 1 };
const y = { ...o };
```

----------------------------------------

TITLE: Defining and Using Overloaded React Components in TypeScript
DESCRIPTION: This code demonstrates a React component with multiple function overloads and showcases TypeScript errors that occur when the provided props don't match any of the available overload signatures. The errors include property type mismatches and missing required properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentsWithTypeArguments4.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import React = require('react')

declare function OverloadComponent<U>(): JSX.Element;
declare function OverloadComponent<U>(attr: {b: U, a: string, "ignore-prop": boolean}): JSX.Element;
declare function OverloadComponent<T, U>(attr: {b: U, a: T}): JSX.Element;

// Error
function Baz<T extends {b: number}, U extends {a: boolean, b:string}>(arg1: T, arg2: U) {
    let a0 = <OverloadComponent a={arg1.b}/>
    let a2 = <OverloadComponent {...arg1} ignore-prop />  // missing a
}
```

----------------------------------------

TITLE: TypeScript Import Statements for React and Redux
DESCRIPTION: This snippet shows import statements in a TypeScript file that uses React and Redux libraries. It includes necessary imports for integrating these libraries, thereby allowing the developer to utilize their functionalities in TypeScript code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAtTypesPriority.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
==== /packages/a/index.ts (0 errors) ====\n    import React from "react";\n    import { createStore } from "redux";
```

----------------------------------------

TITLE: Defining Seq.Set Module and Interface in TypeScript
DESCRIPTION: Definition for Seq.Set with a static 'of' method, function overloads, and an interface extending Seq and Collection.Set. Provides methods for data transformation including toJS, toJSON, mapping, and filtering operations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/complexRecursiveCollections.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
export module Set {
  function of<T>(...values: Array<T>): Seq.Set<T>;
}
export function Set(): Seq.Set<any>;
export function Set<T>(): Seq.Set<T>;
export function Set<T>(collection: Iterable<T>): Seq.Set<T>;
export interface Set<T> extends Seq<never, T>, Collection.Set<T> {
  toJS(): Array<any>;
  toJSON(): Array<T>;
  toSeq(): this;
  concat<C>(...valuesOrCollections: Array<Iterable<C> | C>): Seq.Set<T | C>;
  map<M>(mapper: (value: T, key: never, iter: this) => M, context?: any): Seq.Set<M>;
  flatMap<M>(mapper: (value: T, key: never, iter: this) => Iterable<M>, context?: any): Seq.Set<M>;
  filter<F extends T>(predicate: (value: T, key: never, iter: this) => value is F, context?: any): Seq.Set<F>;
  filter(predicate: (value: T, key: never, iter: this) => any, context?: any): this;
}
```

----------------------------------------

TITLE: JavaScript Import Syntax with TypeScript Errors in CommonJS Format
DESCRIPTION: A CommonJS format file attempting to use import syntax that requires tslib helpers. The code shows errors because the '__importDefault' and '__importStar' helpers are missing from tslib.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportHelpersCollisions1(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
// cjs format file
import {default as _fs} from "fs";
_fs.readFile;
import * as fs from "fs";
fs.readFile;
```

----------------------------------------

TITLE: Demonstrating TypeScript Import Errors in ECMAScript Modules
DESCRIPTION: This snippet shows multiple import statements that result in TypeScript errors due to incorrect usage of dynamic imports, missing file extensions, and incompatible module resolution strategies.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node18).errors.txt#2025-04-21_snippet_14

LANGUAGE: TypeScript
CODE:
```
const _m35 = import("./");
const _m36 = import("./index");
const _m37 = import("./subfolder");
const _m38 = import("./subfolder/");
const _m39 = import("./subfolder/index");
const _m40 = import("./subfolder2");
const _m41 = import("./subfolder2/");
const _m42 = import("./subfolder2/index");
const _m43 = import("./subfolder2/another");
const _m44 = import("./subfolder2/another/");
const _m45 = import("./subfolder2/another/index");

// esm format file
const x = 1;
export {x};
```

----------------------------------------

TITLE: ESM Format Module Implementation
DESCRIPTION: ES module implementation with mixed import styles causing TypeScript errors. Shows attempts to use both ES modules and CommonJS require patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsSynchronousCallErrors(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// esm format file
import {h as _h} from "./index.js";
import mod = require("./index.js");
import {f} from "./subfolder/index.js";
import mod2 = require("./subfolder/index.js");
export async function h() {
    const mod3 = await import ("./index.js");
    const mod4 = await import ("./subfolder/index.js");
    f();
}
```

----------------------------------------

TITLE: Defining ITextWriter2 Interface in TypeScript
DESCRIPTION: Declares an interface ITextWriter2 with two methods: Write and WriteLine, both taking a string parameter and returning void.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeInfer1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface ITextWriter2 {
    Write(s:string):void;
    WriteLine(s:string):void;
}
```

----------------------------------------

TITLE: Type Narrowing with Discriminated Unions and Payload in TypeScript
DESCRIPTION: These functions show how TypeScript handles type narrowing for discriminated unions with a payload. It demonstrates that narrowing works correctly when accessing the object directly, but not when destructuring the payload.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowAliasing.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
type Data = { kind: 'str', payload: string } | { kind: 'num', payload: number };

function gg2(obj: Data) {
    if (obj.kind === 'str') {
        let t: string = obj.payload;
    }
    else {
        let t: number = obj.payload;
    }
}

function foo({ kind, payload }: Data) {
    if (kind === 'str') {
        let t: string = payload;
    }
    else {
        let t: number = payload;
    }
}
```

----------------------------------------

TITLE: Defining and Extending Classes with Override Check in TypeScript
DESCRIPTION: This TypeScript code illustrates classes and their extensions demonstrating the requirement of the 'override' modifier. The constructor in class D and DD require this modifier as they redefine the 'a' property from classes B and BB, respectively. Similarly, class DDD requires the 'override' for its member 'a'. The prerequisite is TypeScript configured to enforce or check 'override' keywords. It showcases error scenarios when overrides are not correctly specified.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/override8.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class B {
    a: string
}

class D extends B {
    constructor(public a: string, public b: string) {
                ~~~~~~~~~~~~~~~~
!!! error TS4115: This parameter property must have an 'override' modifier because it overrides a member in base class 'B'.
        super();
    }
}

class BB {
    constructor(public a: string) {

    }
}

class DD extends BB {
    constructor(public a: string) {
                ~~~~~~~~~~~~~~~~
!!! error TS4115: This parameter property must have an 'override' modifier because it overrides a member in base class 'BB'.
        super(a)
    }
}

class DDD extends BB {
    public a: string;
           ~
!!! error TS4114: This member must have an 'override' modifier because it overrides a member in the base class 'BB'.

    constructor(a: string) {
        super(a)
this.a = a
    }
}

```

----------------------------------------

TITLE: Interface Definitions
DESCRIPTION: Defines several interfaces with different properties.  These interfaces are used later in the example to demonstrate type constraints and incompatibilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadresolutionWithConstraintCheckingDeferred.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
"interface A { x }\ninterface B { x; y }\ninterface C { z }\ninterface D { q }"
```

----------------------------------------

TITLE: CommonJS Module Import Errors
DESCRIPTION: Demonstrates errors when attempting to import ES modules from CommonJS modules using static imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node18).errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import * as m1 from "./index.js";
import * as m2 from "./index.mjs";
import * as m3 from "./index.cjs";
import * as m4 from "./subfolder/index.js";
import * as m5 from "./subfolder/index.mjs";
import * as m6 from "./subfolder/index.cjs";
```

----------------------------------------

TITLE: Import and Export Error: No default export
DESCRIPTION: This code snippet imports `two` from "./2.cjs" (which has a named export) and `three` from "./3.cjs" (which has no default export and likely an error on `exports`). The error `TS1192` indicates that module "/3" has no default export. This error occurs because the code is trying to import it as a default export.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesCJSEmit1(module=nodenext).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```

    import two from "./2.cjs";   // ok
    import three from "./3.cjs"; // error
    two.foo;
    three.foo;
    
```

----------------------------------------

TITLE: Implementing Complex Type Methods in TypeScript Classes
DESCRIPTION: This snippet shows multiple method implementations within a TypeScript class. Each method returns a complex nested type, often involving generic parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_57

LANGUAGE: TypeScript
CODE:
```
antinorii(): petrophilus.sodyi<quasiater.carolinensis, argurus.germaini> { var x: petrophilus.sodyi<quasiater.carolinensis, argurus.germaini>; () => { var y = this; }; return x; }
voi(): caurinus.johorensis<dammermani.melanops, macrorhinos.konganensis> { var x: caurinus.johorensis<dammermani.melanops, macrorhinos.konganensis>; () => { var y = this; }; return x; }
mussoi(): quasiater.carolinensis { var x: quasiater.carolinensis; () => { var y = this; }; return x; }
truncatus(): trivirgatus.lotor<sagitta.stolzmanni, lutreolus.foina> { var x: trivirgatus.lotor<sagitta.stolzmanni, lutreolus.foina>; () => { var y = this; }; return x; }
achates(): provocax.melanoleuca { var x: provocax.melanoleuca; () => { var y = this; }; return x; }
praedatrix(): howi.angulatus<dogramacii.kaiseri, julianae.steerii> { var x: howi.angulatus<dogramacii.kaiseri, julianae.steerii>; () => { var y = this; }; return x; }
mzabi(): quasiater.wattsi<trivirgatus.lotor<julianae.steerii, samarensis.pallidus>, minutus.inez<trivirgatus.oconnelli, Lanthanum.jugularis>> { var x: quasiater.wattsi<trivirgatus.lotor<julianae.steerii, samarensis.pallidus>, minutus.inez<trivirgatus.oconnelli, Lanthanum.jugularis>>; () => { var y = this; }; return x; }
xanthinus(): nigra.gracilis<panamensis.linulus<dogramacii.kaiseri, minutus.portoricensis>, howi.marcanoi> { var x: nigra.gracilis<panamensis.linulus<dogramacii.kaiseri, minutus.portoricensis>, howi.marcanoi>; () => { var y = this; }; return x; }
tapoatafa(): caurinus.megaphyllus { var x: caurinus.megaphyllus; () => { var y = this; }; return x; }
castroviejoi(): Lanthanum.jugularis { var x: Lanthanum.jugularis; () => { var y = this; }; return x; }
```

----------------------------------------

TITLE: Type-Only Imports with Resolution Modes
DESCRIPTION: Demonstrates importing type interfaces using different resolution modes (require and import) with type-only imports
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportAttributesModeDeclarationEmit2(module=nodenext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { RequireInterface } from "pkg" with { "resolution-mode": "require" };
import type { ImportInterface } from "pkg" with { "resolution-mode": "import" };

export interface LocalInterface extends RequireInterface, ImportInterface {}
```

----------------------------------------

TITLE: Type Parameter Extending Unknown
DESCRIPTION: This function shows that even with a type parameter 'T extends unknown', 'T' is not automatically assignable to 'object'. An explicit 'extends {}' constraint is needed if you want to ensure 'T' is assignable to 'object'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownType1.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
    // Type parameter 'T extends unknown' not related to object
    
    function f23<T extends unknown>(x: T) {
        let y: object = x;  // Error
    }
```

----------------------------------------

TITLE: TypeScript Import Statements
DESCRIPTION: Comprehensive set of import statements demonstrating various file extension combinations for TypeScript, TSX, and declaration files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowImportingTsExtensions(moduleresolution=classic).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import {} from "./ts.js";
import {} from "./ts.ts";
import type {} from "./ts.d.ts";

import {} from "./tsx.js";
import {} from "./tsx.jsx";
import {} from "./tsx.ts";
import {} from "./tsx.tsx";
import type {} from "./tsx.d.ts";

import {} from "./dts.js";
import {} from "./dts.ts";
import type {} from "./dts.d.ts";
```

----------------------------------------

TITLE: Circular Import Definition in Node Module
DESCRIPTION: Type declaration file showing a circular import definition error when importing from the 'inner' package.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExportsExclude(module=nodenext).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// cjs format file
import * as cjs from "inner/cjs/index";
import * as mjs from "inner/mjs/index";
import * as type from "inner/js/index";
export { cjs };
export { mjs };
export { type };
```

----------------------------------------

TITLE: Export Type Error Examples (TypeScript)
DESCRIPTION: Shows various export syntax errors when using the 'type' modifier with named exports. Demonstrates invalid combinations of 'export type' declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportSpecifiers.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const type = 0;
const as = 0;
const something = 0;
export { type };
export { type as };
export { type something };
export { type type as foo };
export { type as as bar };
export type { type something as whatever }; // Error
```

----------------------------------------

TITLE: Merge Type Utility Implementation with Intersection Types
DESCRIPTION: Implements custom type merge utilities that handle property conflicts differently from the built-in intersection type. Demonstrates how intersections that result in 'never' can be transformed to useful merged types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionReduction.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
type Merge1<T, U> = { [P in keyof (T & U)]: P extends keyof T ? T[P] : U[P & keyof U] }
type Merge2<T, U> = { [P in keyof T | keyof U]: P extends keyof T ? T[P] : U[P & keyof U] }

type M1 = { a: 1, b: 2 } & { a: 2, c: 3 };  // never
type M2 = Merge1<{ a: 1, b: 2 }, { a: 2, c: 3 }>;  // {}
type M3 = Merge2<{ a: 1, b: 2 }, { a: 2, c: 3 }>;  // { a: 1, b: 2, c: 3 }
```

----------------------------------------

TITLE: Defining and Testing Index Signatures with TypeScript
DESCRIPTION: This snippet declares a class 'IPropertySet' with a simple index signature, then attempts to declare an interface 'indexErrors' with erroneous index signatures that illustrate several common mistakes: using question marks, rest parameters, or multiple parameters in index signatures. TypeScript restricts such usages, as shown by the compilation errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indexSignatureTypeCheck2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
    class IPropertySet {
        [index: string]: any
    }
    
    var ps: IPropertySet = null;
    var index: any = "hello";
    ps[index] = 12;
    
    interface indexErrors {
        [p2?: string];
           ~
!!! error TS1019: An index signature parameter cannot have a question mark.
        [...p3: any[]];
         ~~~
!!! error TS1017: An index signature cannot have a rest parameter.
        [p4: string, p5?: string];
         ~~
!!! error TS1096: An index signature must have exactly one parameter.
        [p6: string, ...p7: any[]];
         ~~
!!! error TS1096: An index signature must have exactly one parameter.
    }
```

----------------------------------------

TITLE: Incomplete Extended Class
DESCRIPTION: Creates a class that fails to implement the required method from the base type constraint
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericTypeConstraints.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class FooExtended { }
```

----------------------------------------

TITLE: Defining Numeric and String Enums in TypeScript
DESCRIPTION: This snippet defines multiple enum types with different underlying value types: numeric enums in the 'numerics' namespace, string enums in the 'strings' namespace, and ambient enums in the 'ambients' namespace.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enumAssignmentCompat6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
namespace numerics {
    export enum DiagnosticCategory {
        Warning,
        Error,
        Suggestion,
        Message,
    }

    export enum DiagnosticCategory2 {
        Warning,
        Error,
        Suggestion,
        Message,
    }
}

namespace strings {
    export enum DiagnosticCategory {
        Warning = "Warning",
        Error = "Error",
        Suggestion = "Suggestion",
        Message = "Message",
    }
}

declare namespace ambients {
    export enum DiagnosticCategory {
        Warning,
        Error,
        Suggestion,
        Message,
    }
}
```

----------------------------------------

TITLE: Generic Class with Type Parameters in TypeScript
DESCRIPTION: The 'moojeni' class is a generic class with two type parameters (T0, T1). It implements methods that return various complex types, following the same pattern of initializing a variable, creating a closure, and returning the variable.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
export class moojeni<T0, T1> {
  floweri() : lavali.otion { var x : lavali.otion; () => { var y = this; }; return x; }
  montosa() : imperfecta.ciliolabrum<Lanthanum.megalonyx, petrophilus.minutilla> { var x : imperfecta.ciliolabrum<Lanthanum.megalonyx, petrophilus.minutilla>; () => { var y = this; }; return x; }
  miletus() : julianae.sumatrana { var x : julianae.sumatrana; () => { var y = this; }; return x; }
  heaneyi() : zuluensis { var x : zuluensis; () => { var y = this; }; return x; }
  marchei() : panglima.amphibius<patas.uralensis, gabriellae.klossii<julianae.nudicaudus, dogramacii.aurata>> { var x : panglima.amphibius<patas.uralensis, gabriellae.klossii<julianae.nudicaudus, dogramacii.aurata>>; () => { var y = this; }; return x; }
  budini() : julianae.durangae { var x : julianae.durangae; () => { var y = this; }; return x; }
  maggietaylorae() : trivirgatus.mixtus<panglima.amphibius<gabriellae.klossii<Lanthanum.jugularis, Lanthanum.jugularis>, imperfecta.subspinosus>, sagitta.stolzmanni> { var x : trivirgatus.mixtus<panglima.amphibius<gabriellae.klossii<Lanthanum.jugularis, Lanthanum.jugularis>, imperfecta.subspinosus>, sagitta.stolzmanni>; () => { var y = this; }; return x; }
  poliocephalus() : julianae.gerbillus<julianae.durangae, dammermani.melanops> { var x : julianae.gerbillus<julianae.durangae, dammermani.melanops>; () => { var y = this; }; return x; }
  zibethicus() : minutus.inez<sagitta.stolzmanni, dammermani.melanops> { var x : minutus.inez<sagitta.stolzmanni, dammermani.melanops>; () => { var y = this; }; return x; }
  biacensis() : howi.coludo<quasiater.bobrinskoi, provocax.melanoleuca> { var x : howi.coludo<quasiater.bobrinskoi, provocax.melanoleuca>; () => { var y = this; }; return x; }
}
```

----------------------------------------

TITLE: Looping with Conditional Continue in TypeScript
DESCRIPTION: This code snippet shows a 'for' loop with a conditional 'continue' statement. The loop increments 'j' inside the loop body and uses 'continue' to skip the rest of the loop body when 'j' is equal to 1. The purpose is to demonstrate how 'continue' can alter the flow of execution within a 'for' loop. It iterates, increments j, and then skips when j is 1, but otherwise completes the full iteration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationFor.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    for (var j = 0; j < 10; ) {
        j++;
        if (j == 1) {
            continue;
        }
    }
    for (j = 0; j < 10;)
    {
        j++;
    }
```

----------------------------------------

TITLE: Using Property Signature for Type Assertions in TypeScript
DESCRIPTION: This snippet defines an interface with a property signature for an assertion function that guarantees a value's type. It shows how to use this interface in a function parameter and as a this parameter context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assertionTypePredicates1.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
interface TestPropertySignature {
  assert: (value: unknown) => asserts value;
}
function testPropertySignature(
  x: TestPropertySignature,
  y: unknown,
) {
  x.assert(y); // ok
  x;
}
function testFunctionThisParameter1(
  this: TestPropertySignature,
  x: unknown,
) {
  this.assert(x); // ok
  x;
}
```

----------------------------------------

TITLE: Defining Types with Unknown and Union
DESCRIPTION: These snippets define various types using the 'unknown' type in unions. In unions, 'unknown' absorbs all other types, making the resulting type always 'unknown'. This includes unions with 'null', 'undefined', 'string', 'string[]', and even 'any'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownType1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    // In a union an unknown absorbs everything
    
    type T10 = unknown | null;  // unknown
    type T11 = unknown | undefined;  // unknown
    type T12 = unknown | null | undefined;  // unknown
    type T13 = unknown | string;  // unknown
    type T14 = unknown | string[];  // unknown
    type T15 = unknown | unknown;  // unknown
    type T16 = unknown | any;  // any
```

----------------------------------------

TITLE: TypeScript Function Declarations with Spread Arguments
DESCRIPTION: Demonstrates function declarations with different parameter types and spread operator usage patterns. Includes cases for optional parameters, union types, rest parameters, and various argument type combinations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callWithSpread2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function all(a?: number, b?: number): void;
declare function weird(a?: number | string, b?: number | string): void;
declare function prefix(s: string, a?: number, b?: number): void;
declare function rest(s: string, a?: number, b?: number,  ...rest: number[]): void;
declare function normal(s: string): void;
declare function thunk(): string;
declare function prefix2(s: string, n: number, a?: number, b?: number): void;

declare var ns: number[];
declare var mixed: (number | string)[];
declare var tuple: [number, string];

// good
all(...ns)
weird(...ns)
weird(...mixed)
weird(...tuple)
prefix("a", ...ns)
rest("d", ...ns)

// extra arguments
normal("g", ...ns)
thunk(...ns)

// bad
all(...mixed)
all(...tuple)
prefix("b", ...mixed)
prefix("c", ...tuple)
rest("e", ...mixed)
rest("f", ...tuple)
prefix(...ns)
prefix(...mixed)
prefix(...tuple)
prefix2("g", ...ns);
```

----------------------------------------

TITLE: Yielding from IterableIterator in g004
DESCRIPTION: This snippet initializes a generator function `g004` which yields from `iterableIterator`. Because `iterableIterator` is declared as IterableIterator<number>, the generator type is inferred as Generator<number, void, undefined>.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatorReturnTypeInferenceNonStrict.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
"function* g004() { // Generator<number, void, undefined>
    yield* iterableIterator;
}"
```

----------------------------------------

TITLE: Compatible Function Call Variations
DESCRIPTION: Demonstrates function calls that are type-compatible, including single argument, specific type, and zero-argument function callbacks.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCallWithFunctionTypedArguments5.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
var r4 = foo(arg); // {}
var r5 = foo({ cb: <T>(x: T) => '' }); // {}
var r6 = foo({ cb: (x: string) => '' }); // string
var r7 = foo({ cb: () => '' }); // string
```

----------------------------------------

TITLE: Using Default Parameters in Function Overload Signatures (TypeScript)
DESCRIPTION: This code demonstrates an error that occurs when trying to provide a default parameter value in a function overload signature. TypeScript throws error TS2371 because parameter initializers are only allowed in function implementations, not in overload declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/defaultValueInFunctionOverload1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo(x: string = '');
function foo(x = '') { }
```

----------------------------------------

TITLE: TypeScript Strict Mode Error: Invalid 'eval' use
DESCRIPTION: This code snippet demonstrates a TypeScript strict mode error (TS1100) caused by using 'eval' as a parameter name in a setter function within an object literal. Strict mode in JavaScript prohibits the use of 'eval' as a variable or parameter name to prevent potential security issues and maintain code predictability. The TypeScript compiler correctly flags this as an error when strict mode is enabled.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserStrictMode12.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
"\"use strict\";\nvar v = { set foo(eval) { } }\n                      ~~~~\n!!! error TS1100: Invalid use of 'eval' in strict mode."
```

----------------------------------------

TITLE: Handling Increment/Decrement on Invalid Types in TypeScript
DESCRIPTION: This snippet demonstrates TypeScript errors that arise from using increment and decrement operators on invalid operands such as null, undefined, or non-variable expressions. The errors indicate issues with operand types that must be either a variable or a proper property access.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/decrementOperatorWithAnyOtherTypeInvalidOperations.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
!!! error TS2357: The operand of an increment or decrement operator must be a variable or a property access.
                           ~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS18050: The value 'null' cannot be used here.
    var ResultIsNumber15 = {}--; 
                           ~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2356: An arithmetic operand must be of type 'any', 'number', 'bigint' or an enum type.
    var ResultIsNumber16 = undefined--; 
                           ~~~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2539: Cannot assign to 'undefined' because it is not a variable.
```

LANGUAGE: TypeScript
CODE:
```
// any type expressions
    var ResultIsNumber17 = --foo();
                             ~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2357: The operand of an increment or decrement operator must be a variable or a property access.
    var ResultIsNumber18 = --A.foo();
                             ~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2357: The operand of an increment or decrement operator must be a variable or a property access.
    var ResultIsNumber19 = --(null + undefined);
                             ~~~~~~~~~~~~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2357: The operand of an increment or decrement operator must be a variable or a property access.
                              ~~~~~~~~~~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2365: Operator '+' cannot be applied to types 'null' and 'undefined'.
    var ResultIsNumber20 = --(null + null);
                             ~~~~~~~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2357: The operand of an increment or decrement operator must be a variable or a property access.
                              ~~~~~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2365: Operator '+' cannot be applied to types 'null' and 'null'.
    var ResultIsNumber21 = --(undefined + undefined);
                             ~~~~~~~~~~~~~~~~~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2357: The operand of an increment or decrement operator must be a variable or a property access.
                              ~~~~~~~~~~~~~~~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2365: Operator '+' cannot be applied to types 'undefined' and 'undefined'.
    var ResultIsNumber22 = --obj1.x;
                             ~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2356: An arithmetic operand must be of type 'any', 'number', 'bigint' or an enum type.
    var ResultIsNumber23 = --obj1.y;
                             ~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2356: An arithmetic operand must be of type 'any', 'number', 'bigint' or an enum type.
    var ResultIsNumber24 = foo()--; 
                           ~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2357: The operand of an increment or decrement operator must be a variable or a property access.
    var ResultIsNumber25 = A.foo()--; 
                           ~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2357: The operand of an increment or decrement operator must be a variable or a property access.
    var ResultIsNumber26 = (null + undefined)--;
                           ~~~~~~~~~~~~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2357: The operand of an increment or decrement operator must be a variable or a property access.
                            ~~~~~~~~~~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2365: Operator '+' cannot be applied to types 'null' and 'undefined'.
    var ResultIsNumber27 = (null + null)--;
                           ~~~~~~~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2357: The operand of an increment or decrement operator must be a variable or a property access.
                            ~~~~~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2365: Operator '+' cannot be applied to types 'null' and 'null'.
    var ResultIsNumber28 = (undefined + undefined)--;
                           ~~~~~~~~~~~~~~~~~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2357: The operand of an increment or decrement operator must be a variable or a property access.
                            ~~~~~~~~~~~~~~~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2365: Operator '+' cannot be applied to types 'undefined' and 'undefined'.
    var ResultIsNumber29 = obj1.x--;
                           ~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2356: An arithmetic operand must be of type 'any', 'number', 'bigint' or an enum type.
    var ResultIsNumber30 = obj1.y--;
                           ~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
// miss assignment operators
    --ANY2;
      ~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2356: An arithmetic operand must be of type 'any', 'number', 'bigint' or an enum type.
    ANY2--;
    ~~~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS2356: An arithmetic operand must be of type 'any', 'number', 'bigint' or an enum type.
    --ANY1--;
          ~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS1005: ';' expected.
            ~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS1109: Expression expected.
    --ANY1++;
          ~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS1005: ';' expected.
            ~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS1109: Expression expected.
    ++ANY1--;
          ~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS1005: ';' expected.
            ~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS1109: Expression expected.
    --ANY2[0]--;
             ~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS1005: ';' expected.
               ~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS1109: Expression expected.
    --ANY2[0]++;
             ~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS1005: ';' expected.
               ~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS1109: Expression expected.
    ++ANY2[0]--;
             ~~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS1005: ';' expected.
               ~
```

LANGUAGE: TypeScript
CODE:
```
!!! error TS1109: Expression expected.
```

----------------------------------------

TITLE: Analyzing Unused Variables in Object Destructuring (TypeScript)
DESCRIPTION: This snippet showcases object destructuring assignments with various patterns, demonstrating unused variables and the resulting TypeScript compiler errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedVariablesWithUnderscoreInBindingElement.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function t4() {
    const { a1: _a1, b1 } = { a1: 1, b1: 1 };
    console.log(b1);

    const { a2, b2: _b2 } = { a2: 1, b2: 1 };
    console.log(a2);

    const { a3: _a3, b3: _b3 } = { a3: 1, b3: 1 };
}

function t5() {
    const { a1: _a1, b1 } = { a1: 1, b1: 1 };
    const { a2, b2: _b2 } = { a2: 1, b2: 1 };
    const { a3, b3 } = { a3: 1, b3: 1 };
}

function t6() {
    const {
        a1: _a1,
        b1: {
            b11: {
                b111: _b111,
                b112
            }
        },
        c1,
        d1: _d1
    } = { a1: 1, b1: { b11: { b111: 1, b112: 1 } }, c1: 1, d1: 1 };
    console.log(b112, c1);

    const {
        a2: _a2,
        b2: {
            b21: {
                b211: _b211, b212: _b212
            }
        },
        c2: _c2,
        d2: _d2
    } = { a2: 1, b2: { b21: { b211: 1, b212: 1 } }, c2: 1, d2: 1 };

    const {
        a3,
        b3: {
            b31: {
                b311, b312
            }
        },
        c3,
        d3
    } = { a3: 1, b3: { b31: { b311: 1, b312: 1 } }, c3: 1, d3: 1 };
}
```

----------------------------------------

TITLE: Invalid Import Assertion Value Type (Array) - TypeScript
DESCRIPTION: This snippet attempts to use an array instead of an object for the import assertion value. Import assertions require an object with specific keys like 'resolution-mode', leading to various parsing and type errors (TS1340, TS1005, TS2538).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportTypeModeDeclarationEmitErrors1(module=nodenext).errors.txt#_snippet_8

LANGUAGE: TypeScript
CODE:
```
export type LocalInterface =
    & import("pkg", [ {"resolution-mode": "require"} ]).RequireInterface
```

----------------------------------------

TITLE: Arrow Function Variable Assignments
DESCRIPTION: Arrow function assignments with various type annotations for Base arrays and function parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
var x333 = (n: () => Base[]) => n; x333(() => [d1, d2]);
var x334 = (n: () => Base[]) => n; x334(function() { return [d1, d2] });
var x335 = (n: () => Base[]) => n; x335(function named() { return [d1, d2] });
```

----------------------------------------

TITLE: Working with Inherited Classes and Type Refinement in TypeScript
DESCRIPTION: The final snippet involves classes A2 and B2 that extend a base class, Base. It demonstrates changing properties in subclasses based on type narrowing and assignment, showcasing information association to subtypes using type refinement constructs.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowingOfDottedNames.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// Repro from  #29513

class AInfo {
    a_count: number = 1;
}

class BInfo {
    b_count: number = 1;
}

class Base {
    id: number = 0;
}

class A2 extends Base {
    info!: AInfo;
}

class B2 extends Base {
    info!: BInfo;
}

let target: Base = null as any;

while (target) {
    if (target instanceof A2) {
        target.info.a_count = 3;
    }
    else if (target instanceof B2) {
        const j: BInfo = target.info;
    }
}
```

----------------------------------------

TITLE: Invalid TypeScript Path Configuration
DESCRIPTION: TypeScript configuration file with an empty path mapping for 'foo', which triggers a compilation error TS5066
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/pathsValidation3.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "baseUrl": ".",
        "paths": {
            "foo": []
        }
    }
}
```

----------------------------------------

TITLE: Implementing Function Interfaces in TypeScript
DESCRIPTION: This snippet defines two simple function interfaces (Adder and Adder2) and implements functions that adhere to these interfaces. The first function, 'add', demonstrates type casting to a specified interface, whereas 'add2' implements the interface directly. These serve as examples of TypeScript's ability to enforce function signatures using interfaces.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/targetTypeCastTest.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
interface Adder {
    (x: number, y: number): number;   
}

var add = <Adder>function(x,y) {    return x+ y;   }

interface Adder2 {
    (x: number, y: number): number;   
}

var add2: Adder2 = function(x,y) {
    return 0;
}
```

----------------------------------------

TITLE: TypeScript Type Assignments with Intersection Types
DESCRIPTION: This snippet contains several declarations demonstrating how TypeScript handles type assignments between different intersection types, including examples with enums and functions showcasing the inferred types and potential assignment errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionReductionStrict.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const x1 = { a: 'foo', b: 42 };
const x2 = { a: 'foo', b: true };

declare let k: 'a' | 'b';

x1[k] = 'bar' as any;  // Error
~~~~~
!!! error TS2322: Type 'any' is not assignable to type 'never'.
x2[k] = 'bar' as any;  // Error
~~~~~
!!! error TS2322: Type 'any' is not assignable to type 'never'.

const enum Tag1 {}
const enum Tag2 {}

declare let s1: string & Tag1;
declare let s2: string & Tag2;

declare let t1: string & Tag1 | undefined;
declare let t2: string & Tag2 | undefined;

s1 = s2;
s2 = s1;
t1 = t2;
t2 = t1;

const f1 = (t: "a" | ("b" & "c")): "a" => t;

type Container<Type extends string> = {
    type: Type;
}

const f2 = (t: Container<"a"> | (Container<"b"> & Container<"c">)): Container<"a"> => t;
const f3 = (t: Container<"a"> | (Container<"b"> & { dataB: boolean } & Container<"a">)): Container<"a"> => t;
const f4 = (t: number | (Container<"b"> & { dataB: boolean } & Container<"a">)): number => t;
```

----------------------------------------

TITLE: Defining Base and Derived Classes with TypeScript
DESCRIPTION: Establishes a class hierarchy with Base, Derived, and Derived2 classes, introducing type constraints and inheritance
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCallWithObjectTypeArgsAndConstraints3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base {
    x: string;
}
class Derived extends Base {
    y: string;
}
class Derived2 extends Base {
    z: string;
}
```

----------------------------------------

TITLE: Importing Types and Handling Errors in TypeScript
DESCRIPTION: This snippet showcases a TypeScript error when trying to assign an instance of a class imported from a different path, resulting in a type mismatch due to separate declarations of a private property. The snippet imports two classes 'C' from different modules and attempts to assign them, which leads to a compile-time error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionWithSymlinks_preserveSymlinks.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// We shouldn't resolve symlinks for references either. See the trace.
/// <reference types="linked" />

import { C as C1 } from "linked";
import { C as C2 } from "linked2";

let x = new C1();
// Should fail. We no longer resolve any symlinks.
x = new C2();
~
!!! error TS2322: Type 'import("/app/node_modules/linked2/index").C' is not assignable to type 'import("/app/node_modules/linked/index").C'.
!!! error TS2322:   Types have separate declarations of a private property 'x'.
```

LANGUAGE: typescript
CODE:
```
export { real } from "real";
export class C { private x; }
```

LANGUAGE: typescript
CODE:
```
export const real: string;
```

----------------------------------------

TITLE: Invalid uses of 'this' type in nested contexts within a class
DESCRIPTION: Examples of invalid 'this' type usage in object literals and functions nested within class methods. Despite being inside a class, these inner contexts cannot use 'this' type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisTypeErrors.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
class C3 {
    x1 = {
        g(x: this): this {
            return undefined;
        }
    }
    f() {
        function g(x: this): this {
            return undefined;
        }
        let x2 = {
            h(x: this): this {
                return undefined;
            }
        }
    }
}
```

----------------------------------------

TITLE: Assigning Incompatible Class to Union Type in TypeScript
DESCRIPTION: This snippet shows an error where a class that doesn't fulfill the ConstructableA interface requirements is assigned to a union type. The error occurs because the class is missing the required 'somePropA' property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/errorsWithInvokablesInUnions01.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
export let ctor: IDirectiveLinkFn<number> | ConstructableA | IDirectivePrePost<number> = class {
    someUnaccountedProp: any;
}
```

----------------------------------------

TITLE: TypeScript Module Imports
DESCRIPTION: Multiple import statements demonstrating different file extension combinations for TypeScript modules, including .js, .ts, .tsx, .jsx, and .d.ts files
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowImportingTsExtensions(moduleresolution=bundler).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import {} from "./ts.js";
import {} from "./ts.ts";
import type {} from "./ts.d.ts";

import {} from "./tsx.js";
import {} from "./tsx.jsx";
import {} from "./tsx.ts";
import {} from "./tsx.tsx";
import type {} from "./tsx.d.ts";

import {} from "./dts.js";
import {} from "./dts.ts";
import type {} from "./dts.d.ts";
```

----------------------------------------

TITLE: Defining and Using a Class in TypeScript Module - m1
DESCRIPTION: This snippet defines a variable and a class with a public property in a TypeScript module. It then creates an instance of the class and defines a function to return this instance. No external dependencies are needed beyond TypeScript support.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootAbsolutePathMultifolderSpecifyOutputFile/node/sourceRootAbsolutePathMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
    var m1_a1 = 10;
    class m1_c1 {
        public m1_c1_p1: number;
    }
    
    var m1_instance1 = new m1_c1();
    function m1_f1() {
        return m1_instance1;
    }
```

----------------------------------------

TITLE: 'for await' Loop in Async Function with Declaration
DESCRIPTION: This snippet demonstrates the correct usage of 'for await...of' loop within an async function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parser.forAwait.es2018.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
 "async function f7() {\n    let y: any;\n    for await (const x of y) {\n    }\n}\n"
```

----------------------------------------

TITLE: Using ReturnType to Define Object Types in TypeScript
DESCRIPTION: This snippet uses `ReturnType` to define object types based on the return type of a function. It illustrates how to create a type that represents the shape of the object returned by a function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/instantiationExpressions.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
type Box<T> = ReturnType<typeof makeBox<T>>;  // { value: T }
    type StringBox = Box<string>;  // { value: string }
```

----------------------------------------

TITLE: Demonstrating Property Access in Type Intersections in TypeScript
DESCRIPTION: This snippet shows how TypeScript handles property access when intersecting types with different access modifiers. It demonstrates that private properties make intersections inaccessible, protected properties remain protected, and public properties allow access.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mixinAccessModifiers.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function f1(x: Private & Private2) {
	x.p;  // Error, private constituent makes property inaccessible
}

function f2(x: Private & Protected) {
	x.p;  // Error, private constituent makes property inaccessible
}

function f3(x: Private & Public) {
	x.p;  // Error, private constituent makes property inaccessible
}

function f4(x: Protected & Protected2) {
	x.p;  // Error, protected when all constituents are protected
}

function f5(x: Protected & Public) {
	x.p;  // Ok, public if any constituent is public
}

function f6(x: Public & Public2) {
	x.p;  // Ok, public if any constituent is public
}
```

----------------------------------------

TITLE: Non-Generic Derived Class with Specialized Base in TypeScript
DESCRIPTION: This snippet shows a non-generic derived class 'D3' extending a specialized version of the generic base class 'Base2'. It demonstrates that constructor inheritance applies in this scenario as well.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classWithBaseClassButNoConstructor.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
class D3 extends Base2<string, number> {
    foo: string;
}

var r4 = D3;
var d5 = new D(); // error
var d6 = new D(1); // ok
```

----------------------------------------

TITLE: Importing Non-Existent Export in TypeScript
DESCRIPTION: This snippet shows how to import specific exports from a module. It illustrates an attempt to import a non-existent 'default' export from './b', which results in a TypeScript error TS2305. The valid import is 'b', which is successfully imported from './b'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reexportMissingDefault1.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export { b } from "./b";
export { default } from "./b";
```

----------------------------------------

TITLE: Require Module Imports and Common Errors in TypeScript
DESCRIPTION: Shows require statements in TypeScript, which offer file and extension resolution but fail when resolving to ES modules. These must instead be imported using ECMAScript import syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node18).errors.txt#2025-04-21_snippet_13

LANGUAGE: TypeScript
CODE:
```
import m24 = require("./");
import m25 = require("./index");
import m26 = require("./subfolder");
import m27 = require("./subfolder/");
import m28 = require("./subfolder/index");
import m29 = require("./subfolder2");
import m30 = require("./subfolder2/");
import m31 = require("./subfolder2/index");
import m32 = require("./subfolder2/another");
import m33 = require("./subfolder2/another/");
import m34 = require("./subfolder2/another/index");
```

----------------------------------------

TITLE: Defining and Using Generic Interface in TypeScript
DESCRIPTION: This snippet defines a module named 'Underscore' with an 'Iterator' interface and a 'Static' interface containing methods 'all' and 'identity'. The script demonstrates using '_.all()' with arrays of mixed types, leading to a TypeScript error showcasing the challenge of inferring generic type arguments when the interface expectations do not align with the provided function type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericTypeArgumentInference1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
module Underscore {
    export interface Iterator<T, U> {
        (value: T, index: any, list: any): U;
    }
    export interface Static {
        all<T>(list: T[], iterator?: Iterator<T, boolean>, context?: any): T;
        identity<T>(value: T): T;
    }
}
declare var _: Underscore.Static;

var r = _.all([true, 1, null, 'yes'], _.identity);
                                      ~~~~~~~~~~
!!! error TS2345: Argument of type '<T>(value: T) => T' is not assignable to parameter of type 'Iterator<string | number | boolean, boolean>'.
!!! error TS2345:   Type 'string | number | boolean' is not assignable to type 'boolean'.
!!! error TS2345:     Type 'string' is not assignable to type 'boolean'.
var r2 = _.all([true], _.identity);
var r3 = _.all([], _.identity);
var r4 = _.all([<any>true], _.identity);
```

----------------------------------------

TITLE: Importing from missing module in TypeScript (app.ts)
DESCRIPTION: Code snippet from app.ts showing an import statement that attempts to import the 'x' export from a module named 'foo' which cannot be found by the TypeScript compiler.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/cachedModuleResolution7.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import {x} from "foo";
```

----------------------------------------

TITLE: Extending Wagon with Conestoga class in TypeScript with static method issues
DESCRIPTION: Implements a Conestoga class that extends Wagon with static method implementation errors and constructor argument type mismatches. Shows TypeScript's static side inheritance checking.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classCanExtendConstructorFunction.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
// ok
class Conestoga extends Wagon {
    constructor(public drunkOO: true) {
        // error: wrong type
        super('nope');
    }
    // should error since others is not optional
    static circle(others: (typeof Wagon)[]) {
        return others.length
    }
}
var c = new Conestoga(true);
c.drunkOO
c.numberOxen
```

----------------------------------------

TITLE: Class with Used Private Static Property
DESCRIPTION: Shows a class with a private static property that is referenced in a public static method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedPrivateStaticMembers.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class Test2 {
    private static p1 = 0
    public static test() {
        Test2.p1;
    }
}
```

----------------------------------------

TITLE: Destructuring with Default Values in JavaScript
DESCRIPTION: Demonstrates destructuring assignment with a default value in JavaScript. If 'robotA.name' is undefined, 'nameA' is initialized to '<NoName>'. This snippet assumes prior existence of an object 'robotA'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementDefaultValues.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
var _a = robotA.name, nameA = _a === void 0 ? "<NoName>" : _a;
```

----------------------------------------

TITLE: Declaring Variables with Function Types and Implicit Any Parameters in TypeScript
DESCRIPTION: This snippet demonstrates declaring variables with function types in TypeScript, showing cases where implicit 'any' type errors occur for parameters. It includes examples with single parameters, multiple parameters, and rest parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyParametersInAmbientFunctions.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
// No implicit-'any' errors.
declare var d_f9: () => string;

// Implicit-'any' error for x.
declare var d_f10: (x) => string;

// Implicit-'any' errors for x, y, and z.
declare var d_f11: (x, y, z) => string;

// Implicit-'any' errors for x and z.
declare var d_f12: (x, y: any, z) => string;

// Implicit-'any[]' error for r.
declare var d_f13: (...r) => string;

// Implicit-'any'/'any[]' errors for x, r.
declare var d_f14: (x, ...r) => string;
```

----------------------------------------

TITLE: Asserting Node Tag Name in TypeScript
DESCRIPTION: This function `assertNodeTagName` asserts that a given node is an element and that its tag name matches the provided tag name `T`. It utilizes type parameters to ensure type safety when comparing tag names.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionsOfLargeUnions2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    export function assertNodeTagName<
        T extends keyof ElementTagNameMap,
        U extends ElementTagNameMap[T]>(node: Node | null, tagName: T): node is U {
        if (assertIsElement(node)) {
            const nodeTagName = node.tagName.toLowerCase();
             return nodeTagName === tagName;
        }
        return false;
    }
```

----------------------------------------

TITLE: Implementing TestCase and TestRunner Classes in TypeScript
DESCRIPTION: Defines TestCase and TestRunner classes for creating and running test cases. The TestRunner class includes methods for adding tests, comparing arrays, and executing the test suite.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/duplicateLocalVariable1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export class TestCase {
    constructor (public name: string, public test: ()=>boolean, public errorMessageRegEx?: string) {
    }
}
export class TestRunner { 
    private tests: TestCase[] = [];

    static arrayCompare(arg1: any[], arg2: any[]): boolean {
        return (arg1.every(function (val, index) { return val === arg2[index] }));
    }

    public addTest(test: TestCase) {
        this.tests.push(test);
    }
    public run() {
        var success = true;
        for (var test in this.tests) {
            var exception = false;
            var testcase = <TestCase>this.tests[test]
            var testResult: boolean = false;
            try {
                testResult = testcase.test();
            }
            catch (e) {
                exception = true;
                testResult = false;
                if (typeof testcase.errorMessageRegEx === "string") {
                    if (testcase.errorMessageRegEx === "") { // Any error is fine
                        testResult = true;
                    } else if (e.message) {
                        var regex = new RegExp(testcase.errorMessageRegEx);
                        testResult = regex.test(e.message);
                    }
                } 
                if (testResult === false) {
                    //console.log(e.message);
                }
            }
            if ((testcase.errorMessageRegEx !== undefined) && !exception) {
                success = false;
            } else if (!testResult) {
                success = false;
            }
        }
        if (success) {
        } else {
        }
    }
}
```

----------------------------------------

TITLE: Defining a Basic Derived Class in TypeScript
DESCRIPTION: This code defines a simple derived class `DerivedBasic` that extends `Object`. It initializes a property `prop` and calls `super()` in its constructor. This is a valid example of how to define a derived class and call the super constructor.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassSuperStatementPosition.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class DerivedBasic extends Object {
        prop = 1;
        constructor() {
            super();
        }
    }
```

----------------------------------------

TITLE: Importing and Using Modules in TypeScript
DESCRIPTION: This snippet shows the main TypeScript file where modules are imported and used. It demonstrates a compatibility issue between different versions of the same library.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/duplicatePackage.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { a } from "a";
import { b } from "b";
import { c } from "c";
a(b); // Works
a(c); // Error, these are from different versions of the library.
```

----------------------------------------

TITLE: Exporting Both Types and Values from a Module in TypeScript
DESCRIPTION: This snippet demonstrates exporting both types and values from a module, allowing for proper usage of the exported entities as both types and values in importing modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace5.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
export type * from "./a";
export * from "./a";
```

----------------------------------------

TITLE: Object Literal with Unknown Properties
DESCRIPTION: This code attempts to assign an object literal with properties 'e' and 'f' to a variable `o1` that is typed as an object with specific properties 'a' and 'b'. This results in a type error because the object literal contains unknown properties that are not allowed by the type definition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/incompatibleTypes.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
var o1: { a: { a: string; }; b: string; } = { e: 0, f: 0 };
```

----------------------------------------

TITLE: Importing Interface Foo from Module a
DESCRIPTION: This snippet illustrates an import statement that attempts to bring in the 'Foo' interface from module './a'. The error indicates that while 'Foo' is locally declared, it is not exported for use in other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importNonExportedMember2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { Foo } from './a';
             ~~~
```

----------------------------------------

TITLE: Defining and Using a React Native FlatList Component
DESCRIPTION: This snippet defines a ReactNativeFlatList component and demonstrates a TypeScript error when trying to use it as a JSX element due to incorrect typing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxElementType.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
interface ReactNativeFlatListProps<Item> {}
function ReactNativeFlatList(
  props: {},
  ref: React.ForwardedRef<typeof ReactNativeFlatList>
) {
  return null;
}
<ReactNativeFlatList />;
```

----------------------------------------

TITLE: Robot Data Functions and Iteration
DESCRIPTION: Defines functions to get robot data and implements iteration patterns for processing robot objects. Includes variable declarations for robot properties and console logging functionality.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function getRobots() {
    return robots;
}

function getMultiRobots() {
    return multiRobots;
}

var nameA, primaryA, secondaryA, i, skillA;
var name, primary, secondary, skill;

for (var _i = 0, robots_1 = robots; _i < robots_1.length; _i++) {
    nameA = robots_1[_i].name;
    console.log(nameA);
}

for (var _0 = 0, _1 = getRobots(); _0 < _1.length; _0++) {
    // Iteration implementation
}
```

----------------------------------------

TITLE: Using Enums in TypeScript
DESCRIPTION: This code snippet delineates basic use of enum imports in TypeScript. The enum is imported and its members are used in variable declarations, illustrating the structure of enum references.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importsNotUsedAsValues_error.errors.txt#2025-04-21_snippet_6

LANGUAGE: TypeScript
CODE:
```
import { C } from './a';
let c: C;
let d: C.Two;
console.log(c, d);
```

----------------------------------------

TITLE: Demonstrating TypeScript Function Apply Error Examples
DESCRIPTION: Shows errors when using Function.prototype.apply with incorrect parameters, including undefined this context and incorrect argument arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictBindCallApply1.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
let a14 = c.foo.apply(undefined, [10, "hello"]);  // Error
```

----------------------------------------

TITLE: Defining Complex Object Types and Encountering Type Errors in TypeScript
DESCRIPTION: This code snippet defines an interface 'I' and a class 'C', then attempts to assign number values to variables with complex object types, resulting in multiple type errors. It demonstrates TypeScript's strict type checking for object literals, function types, and nested structures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeName1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface I {
    k;
}
class C {
    public eek:string;
    static zeek:number;
}

var x1:{ f(s:string):number;f(n:number):string; }=3;
var x2:{ f(s:string):number; } =3;
var x3:{ (s:string):number;(n:number):string; }=3;
var x4:{ x;y;z:number;f(n:number):string;f(s:string):number; }=3;
var x5:{ (s:string):number;(n:number):string;x;y;z:number;f(n:number):string;f(s:string):number; }=3;
var x6:{ z:number;f:{(n:number):string;(s:string):number;}; }=3;
var x7:(s:string)=>boolean=3;
var x8:{ z:I;[s:string]:{ x; y; };[n:number]:{x; y;};():boolean; }=3;
var x9:I=3;
var x10:I[][][][]=3;
var x11:{z:I;x:boolean;}[][]=3;
var x12:{z:I;x:boolean;y:(s:string)=>boolean;w:{ z:I;[s:string]:{ x; y; };[n:number]:{x; y;};():boolean; };}[][]=3;
var x13:{ new(): number; new(n:number):number; x: string; w: {y: number;}; (): {}; } = 3;
var x14:{ f(x:number):boolean; p; q; ():string; }=3;
var x15:number=C;
```

----------------------------------------

TITLE: Testing void and non-void call signature compatibility in TypeScript
DESCRIPTION: A comprehensive test file that demonstrates TypeScript's assignment compatibility rules between interfaces, object literals, and functions with different return types and parameter types. The file shows which assignments are valid and which produce type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithCallSignatures2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// void returning call signatures can be assigned a non-void returning call signature that otherwise matches

interface T {
    f(x: number): void;
}
var t: T;
var a: { f(x: number): void };

t = a;
a = t;

interface S {
    f(x: number): string;
}
var s: S;
var a2: { f(x: number): string };
t = s;
t = a2;
a = s;
a = a2;

t = { f: () => 1 };
t = { f: <T>(x:T) => 1 };
t = { f: function f() { return 1 } };
t = { f(x: number) { return ''; } }
a = { f: () => 1 }
a = { f: <T>(x: T) => 1 };
a = { f: function (x: number) { return ''; } }

// errors
t = () => 1;
t = function (x: number) { return ''; }
a = () => 1;
a = function (x: number) { return ''; }

interface S2 {
    f(x: string): void;
}
var s2: S2;
var a3: { f(x: string): void };
// these are errors
t = s2;
t = a3;
t = (x: string) => 1;
t = function (x: string) { return ''; }
a = s2;
a = a3;
a = (x: string) => 1;
a = function (x: string) { return ''; }
```

----------------------------------------

TITLE: Accessing Non-existent Properties on 'this' in Arrow Functions in TypeScript
DESCRIPTION: This code shows three arrow function examples, with one causing a TypeScript error. The error occurs because the arrow function tries to access 'this.name', but 'this' refers to 'globalThis' which doesn't have a 'name' property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emitArrowFunctionThisCapturing.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var f1 = () => {
    this.age = 10
};

var f2 = (x: string) => {
    this.name = x
         ~~~~
!!! error TS2339: Property 'name' does not exist on type 'typeof globalThis'.
}

function foo(func: () => boolean) { }
foo(() => {
    this.age = 100;
    return true;
});
```

----------------------------------------

TITLE: TypeScript Builder Class Method Chain Error Example
DESCRIPTION: Example showing two common TypeScript errors: calling a method without required arguments and attempting to call a string property as a method. The code demonstrates type checking for method chains and parameter validation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/methodChainError.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Builder {
    notMethod: string
    method(param: string): Builder {
        return this;
    }
}

new Builder()
    .method("a")
    .method()
    .method("a");

    
new Builder()
    .method("a")
    .notMethod()
    .method("a");
```

----------------------------------------

TITLE: Iterating Array with Simple Destructuring
DESCRIPTION: This snippet iterates over a robots array, destructuring each element to extract numberB, which represents the first element of each sub-array. It then logs the value of numberB to the console.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
>>>for (var _u = 0, robots_2 = robots; _u < robots_2.length; _u++) {
1->
2 >^^^^^
3 >     ^^^^^^^^^^
4 >               ^^
5 >                 ^^^^^^^^^^^^^^^^^
6 >                                  ^^
7 >                                    ^^^^^^^^^^^^^^^^^^^^
8 >                                                        ^^
9 >                                                          ^^^^
10>                                                              ^^
11>                                                                ^
1->
  >
  >
2 >for (let [numberB] of 
3 >     robots
4 >               
5 >                 robots
6 >                                  
7 >                                    robots
8 >                                                        
9 >                                                          robots
10>                                                              ) 
11>                                                                {
1->Emitted(37, 1) Source(40, 1) + SourceIndex(0)
2 >Emitted(37, 6) Source(40, 23) + SourceIndex(0)
3 >Emitted(37, 16) Source(40, 29) + SourceIndex(0)
4 >Emitted(37, 18) Source(40, 23) + SourceIndex(0)
5 >Emitted(37, 35) Source(40, 29) + SourceIndex(0)
6 >Emitted(37, 37) Source(40, 23) + SourceIndex(0)
7 >Emitted(37, 57) Source(40, 29) + SourceIndex(0)
8 >Emitted(37, 59) Source(40, 23) + SourceIndex(0)
9 >Emitted(37, 63) Source(40, 29) + SourceIndex(0)
10>Emitted(37, 65) Source(40, 31) + SourceIndex(0)
11>Emitted(37, 66) Source(40, 32) + SourceIndex(0)
---
```

LANGUAGE: typescript
CODE:
```
>>>    var numberB = robots_2[_u][0];
1 >^^^^
2 >    ^^^^
3 >        ^^^^^^^
4 >               ^^^^^^^^^^^^^^^^^^
1 >
2 >    
3 >        numberB
4 >               
1 >Emitted(38, 5) Source(40, 11) + SourceIndex(0)
2 >Emitted(38, 9) Source(40, 11) + SourceIndex(0)
3 >Emitted(38, 16) Source(40, 18) + SourceIndex(0)
4 >Emitted(38, 34) Source(40, 18) + SourceIndex(0)
---
```

LANGUAGE: typescript
CODE:
```
>>>    console.log(numberB);
1 >^^^^
2 >    ^^^^^^^
3 >           ^
4 >            ^^^
5 >               ^
6 >                ^^^^^^^
7 >                       ^
8 >                        ^
1 >] of robots) {
  >    
2 >    console
3 >           .
4 >            log
5 >               (
6 >                numberB
7 >                       )
8 >                        ;
1 >Emitted(39, 5) Source(41, 5) + SourceIndex(0)
2 >Emitted(39, 12) Source(41, 12) + SourceIndex(0)
3 >Emitted(39, 13) Source(41, 13) + SourceIndex(0)
4 >Emitted(39, 16) Source(41, 16) + SourceIndex(0)
5 >Emitted(39, 17) Source(41, 17) + SourceIndex(0)
6 >Emitted(39, 24) Source(41, 24) + SourceIndex(0)
7 >Emitted(39, 25) Source(41, 25) + SourceIndex(0)
8 >Emitted(39, 26) Source(41, 26) + SourceIndex(0)
---
```

LANGUAGE: typescript
CODE:
```
>>>}
1 >
2 >^
3 > ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >
2 >}
1 >Emitted(40, 1) Source(42, 1) + SourceIndex(0)
2 >Emitted(40, 2) Source(42, 2) + SourceIndex(0)
---
```

----------------------------------------

TITLE: Import Named Exports
DESCRIPTION: This snippet illustrates an import statement using `import {a, b as c} from 'file2';`. The TypeScript compiler produces a TS2792 error signifying that the module 'file2' is not found, indicating potential module resolution or pathing problems.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/systemModule9.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    import {a, b as c} from 'file2';
                            ~~~~~~~
```

----------------------------------------

TITLE: Generic Interface Inheritance with String Indexers in TypeScript
DESCRIPTION: Explores generic interface inheritance with constrained type parameters. It shows various attempts at extending a generic interface with different type arguments, demonstrating TypeScript's strict checking of generic type relationships.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithStringIndexer2.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
module Generics {
    interface A<T extends Derived> {
        [x: string]: T;
    }

    interface B extends A<Base> {
        [x: string]: Derived; // error
    }

    interface B2 extends A<Derived> {
        [x: string]: Derived2; // ok
    }

    interface B3<T extends Derived> extends A<T> {
        [x: string]: Base; // error
    }

    interface B4<T extends Derived> extends A<T> {
        [x: string]: Derived; // error
    }

    interface B5<T extends Derived2> extends A<T> {
        [x: string]: Derived2; // error
    }
}
```

----------------------------------------

TITLE: Function Overload with Object Literal and Unknown Properties
DESCRIPTION: This snippet defines a function `of1` with overloads that accept different object types. It then attempts to call `of1` with an object literal that has properties not defined in either of the overload types, resulting in a type error because the object literal contains unknown properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/incompatibleTypes.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
function of1(n: { a: { a: string; }; b: string; }): number;
    function of1(s: { c: { b: string; }; d: string; }): string;
    function of1(a: any) { return null; }
    
    of1({ e: 0, f: 0 });
```

----------------------------------------

TITLE: Importing and Using Custom Type in TypeScript
DESCRIPTION: This snippet demonstrates importing a custom type from another file and using it with object spread syntax and type assertion. It shows how to work with custom types across multiple files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitComputedPropertyNameEnum2.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { type Type } from "./type";

export const foo = { ...({} as Type) };
```

----------------------------------------

TITLE: Analyzing Undefined Identifier and Method Issues in TypeScript
DESCRIPTION: This TypeScript snippet illustrates common TypeScript compile-time errors: referencing an undefined variable and calling an inexistent method on a number array. It demonstrates error TS2304 (cannot find name) for 'deltaOffset' and 'anotherNonExistingMethod', and error TS2339 (property does not exist) for 'NonexistantMethod'. Ensure all identifiers are defined and methods are available for the specified object types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/undefinedSymbolReferencedInArrayLiteral1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var tokens = [{ startIndex: deltaOffset }];
var functions = [function() {
    [1, 2, 3].NonexistantMethod();
    anotherNonExistingMethod();
}];
```

----------------------------------------

TITLE: Destructuring Object Binding with Errors in TypeScript
DESCRIPTION: This code snippet shows an example of object destructuring in TypeScript, where default values are assigned to variables. It attempts to use a variable 'f' before it has been declared, leading to errors TS2448 and TS2728. The snippet provides a practical case for understanding variable scope and scoping rules in TypeScript related to block-scoped variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringObjectBindingPatternAndAssignment4.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const {
        a = 1,
        b = 2,
        c = b, // ok
        d = a, // ok
        e = f, // error
            ~
!!! error TS2448: Block-scoped variable 'f' used before its declaration.
!!! related TS2728 destructuringObjectBindingPatternAndAssignment4.ts:7:5: 'f' is declared here.
        f = f  // error
            ~
!!! error TS2448: Block-scoped variable 'f' used before its declaration.
!!! related TS2728 destructuringObjectBindingPatternAndAssignment4.ts:7:5: 'f' is declared here.
    } = { } as any;
```

----------------------------------------

TITLE: Handling Method Dispatch with Typed Descriptors
DESCRIPTION: This snippet demonstrates type-safe method dispatch using descriptor types. The dispatchMethod function uses indexed access types to ensure type safety between method name, arguments, and return value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
interface R {
    p: number;
}

function f<K extends keyof R>(p: K) {
    let a: any;
    a[p].add;  // any
}

type MethodDescriptor = {
	name: string;
	args: any[];
	returnValue: any;
}

declare function dispatchMethod<M extends MethodDescriptor>(name: M['name'], args: M['args']): M['returnValue'];

type SomeMethodDescriptor = {
	name: "someMethod";
	args: [string, number];
	returnValue: string[];
}

let result = dispatchMethod<SomeMethodDescriptor>("someMethod", ["hello", 35]);
```

----------------------------------------

TITLE: Defining Symbol.iterator Method in TypeScript Class (ES5 Target)
DESCRIPTION: This snippet demonstrates an attempt to use Symbol.iterator in a TypeScript class, which results in compilation errors when targeting ES5. The errors suggest changing the 'lib' compiler option to es2015 or later to resolve the issue.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ES5SymbolProperty6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
    [Symbol.iterator]() { }
}

(new C)[Symbol.iterator]
```

----------------------------------------

TITLE: Valid Equality Comparisons with null in TypeScript
DESCRIPTION: Shows valid usage of equality operators (==, !=, ===, !==) with null values, which are allowed in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/comparisonOperatorWithOneOperandIsNull.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
// operator ==
var r5a1 = null == a;
var r5a2 = null == b;
var r5a3 = null == c;
var r5a4 = null == d;
var r5a5 = null == e;
var r5a6 = null == f;
var r5a7 = null == g;

var r5b1 = a == null;
var r5b2 = b == null;
var r5b3 = c == null;
var r5b4 = d == null;
var r5b5 = e == null;
var r5b6 = f == null;
var r5b7 = g == null;

// operator !=
var r6a1 = null != a;
var r6a2 = null != b;
var r6a3 = null != c;
var r6a4 = null != d;
var r6a5 = null != e;
var r6a6 = null != f;
var r6a7 = null != g;

var r6b1 = a != null;
var r6b2 = b != null;
var r6b3 = c != null;
var r6b4 = d != null;
var r6b5 = e != null;
var r6b6 = f != null;
var r6b7 = g != null;

// operator ===
var r7a1 = null === a;
var r7a2 = null === b;
var r7a3 = null === c;
var r7a4 = null === d;
var r7a5 = null === e;
var r7a6 = null === f;
var r7a7 = null === g;

var r7b1 = a === null;
var r7b2 = b === null;
var r7b3 = c === null;
var r7b4 = d === null;
var r7b5 = e === null;
var r7b6 = f === null;
var r7b7 = g === null;

// operator !==
var r8a1 = null !== a;
var r8a2 = null !== b;
var r8a3 = null !== c;
var r8a4 = null !== d;
var r8a5 = null !== e;
var r8a6 = null !== f;
var r8a7 = null !== g;

var r8b1 = a !== null;
var r8b2 = b !== null;
var r8b3 = c !== null;
var r8b4 = d !== null;
var r8b5 = e !== null;
var r8b6 = f !== null;
var r8b7 = g !== null;
```

----------------------------------------

TITLE: Extending Classes and Handling Type Dependencies in TypeScript
DESCRIPTION: This snippet showcases a class that extends another while defining methods which utilize types from the base class. It emphasizes handling type dependencies effectively using TypeScript's structural typing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_40

LANGUAGE: TypeScript
CODE:
```
module chrysaeolus { export class sarasinorum<T0, T1> extends caurinus.psilurus { belzebul(): samarensis.pallidus { var x: samarensis.pallidus; () => { var y = this; }; return x; } hinpoon(): nigra.caucasica<julianae.sumatrana, trivirgatus.oconnelli> { var x: nigra.caucasica<julianae.sumatrana, trivirgatus.oconnelli>; () => { var y = this; }; return x; } kandti(): quasiater.wattsi<Lanthanum.jugularis, julianae.sumatrana> { var x: quasiater.wattsi<Lanthanum.jugularis, julianae.sumatrana>; () => { var y = this; }; return x; } cynosuros(): dammermani.melanops { var x: dammermani.melanops; () => { var y = this; }; return x; } Germanium(): lavali.beisa { var x: lavali.beisa; () => { var y = this; }; return x; } Ununoctium(): nigra.gracilis<lavali.xanthognathus, provocax.melanoleuca> { var x: nigra.gracilis<lavali.xanthognathus, provocax.melanoleuca>; () => { var y = this; }; return x; } princeps(): minutus.portoricensis { var x: minutus.portoricensis; () => { var y = this; }; return x; } } }
```

----------------------------------------

TITLE: Implementing BadSquare Class in TypeScript
DESCRIPTION: The BadSquare class attempts to implement Drawable and Sizable interfaces but fails to provide a required draw method, leading to a TypeScript error (TS2420).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocImplements_interface_multiple.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
/**
 * @implements Drawable
 * @implements {Sizable}
 **/
class BadSquare {
    ~~~~~~~~~
!!! error TS2420: Class 'BadSquare' incorrectly implements interface 'Drawable'.
!!! error TS2420:   Property 'draw' is missing in type 'BadSquare' but required in type 'Drawable'.
!!! related TS2728 /defs.d.ts:2:5: 'draw' is declared here.
    size() {
        return 0;
    }
};
```

----------------------------------------

TITLE: Iterating over multiRobots Array with Destructuring in JavaScript
DESCRIPTION: This snippet shows a loop that iterates over the 'multiRobots' array, destructuring the first element of each item into 'nameB' and logging it to the console.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_16

LANGUAGE: JavaScript
CODE:
```
for (var _z = 0, multiRobots_2 = multiRobots; _z < multiRobots_2.length; _z++) {
    var nameB = multiRobots_2[_z][0];
    console.log(nameB);
}
```

----------------------------------------

TITLE: Await and Async Modifiers in Classes - TypeScript
DESCRIPTION: This snippet elucidates the invalid application of 'async' modifiers in various contexts, detail errors (TS1040, TS1042) regarding misapplications in constructors and classes that violate TypeScript standards.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/plainJSGrammarErrors.errors.txt#2025-04-21_snippet_24

LANGUAGE: typescript
CODE:
```
plainJSGrammarErrors.js(233,30): error TS1040: 'await' expressions are only allowed within async functions.
```

LANGUAGE: typescript
CODE:
```
plainJSGrammarErrors.js(235,30): error TS1042: 'async' modifier cannot be used here.
```

----------------------------------------

TITLE: Defining Individual DOM Node Methods - TypeScript
DESCRIPTION: This snippet lists several individual methods of a DOM Node, such as `appendChild`, `cloneNode`, and `contains`, with their types annotated as `unknown`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRecursiveInference.errors.txt#_snippet_17

LANGUAGE: TypeScript
CODE:
```
appendChild: unknown; cloneNode: unknown; compareDocumentPosition: unknown; contains: unknown; getRootNode: unknown; hasChildNodes: unknown; insertBefore: unknown; isDefaultNamespace: unknown; isEqualNode: unknown; isSameNode: unknown; lookupNamespaceURI: unknown; lookupPrefix: unknown; normalize: unknown; removeChild: unknown; replaceChild: unknown;
```

----------------------------------------

TITLE: Defining Class and Instance in TypeScript - ref/m1.ts
DESCRIPTION: This snippet defines a variable and a class within the file 'm1.ts'. It initializes a variable 'm1_a1' and creates a class 'm1_c1' with a property. An instance of the class is created, and a function returns that instance. The snippet showcases the class definition and object creation in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlsourcerootUrlMultifolderSpecifyOutputFile/node/maprootUrlsourcerootUrlMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Error Example with TypeScript 'satisfies' Operator
DESCRIPTION: This code demonstrates a TypeScript error that occurs when an empty object doesn't satisfy the requirements of interface 'Foo'. The error shows that property 'a' is missing from the empty object but is required by the interface definition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeSatisfactionWithDefaultExport.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Foo {
    a: number;
}
export default {} satisfies Foo;
```

----------------------------------------

TITLE: Defining Exported Enum in TypeScript
DESCRIPTION: This snippet defines an exported enum named 'Enum' with two values: A and B. It demonstrates the basic syntax for creating an enum in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importedEnumMemberMergedWithExportedAliasIsError.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export enum Enum {
    A,
    B
}
```

----------------------------------------

TITLE: Exporting from Inner Module - TypeScript
DESCRIPTION: This snippet defines an interface 'Thing' and a constant 'x' that is expected to return a 'Thing' object. It is representative of the type declarations found within the 'inner/other' module, which is designed for import into other modules but is currently experiencing a resolution error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSpecifierGenerationPattern(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
// esm format file
export interface Thing {}
export const x: () => Thing;
```

----------------------------------------

TITLE: Generic Object Property Function Assignment
DESCRIPTION: Tests assignment compatibility for functions with generic object parameters containing multiple properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithCallSignatures4.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
var b15: <T>(x: { a: T; b: T }) => T; 
a15 = b15;
b15 = a15;
```

----------------------------------------

TITLE: Defining Generic Classes with Private Members in TypeScript
DESCRIPTION: This snippet defines interfaces T1 and T2, and classes C1, C2, C3, and C4 to demonstrate type compatibility with generics and private members. It shows cases where type conversions succeed and fail.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectTypesIdentityWithPrivates3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface T1 { }
interface T2 { z }

class C1<T> {
    private x;
}

class C2 extends C1<T1> {
    y;
}

var c1: C1<T2>;
<C2>c1; // Should succeed (private x originates in the same declaration)


class C3<T> {
    private x: T; // This T is the difference between C3 and C1
}

class C4 extends C3<T1> {
    y;
}

var c3: C3<T2>;
<C4>c3; // Should fail (private x originates in the same declaration, but different types)
```

----------------------------------------

TITLE: Class-Based Polymorphism and Inheritance in TypeScript
DESCRIPTION: This snippet defines two base classes and two derived classes in TypeScript, demonstrating polymorphic behavior and the constraints of 'this' types. It showcases how method assignments can lead to type errors when the method signatures expect differing properties according to their base classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisTypeInFunctionsNegative.errors.txt#2025-04-21_snippet_14

LANGUAGE: TypeScript
CODE:
```
/// class-based polymorphic assignability (with inheritance!) ///

class Base1 {
    x: number
    public polymorphic(this: this): number { return this.x; }
    explicit(this: Base1): number { return this.x; }
    static explicitStatic(this: typeof Base1): number { return this.x; }
                                                                        ~
!!! error TS2339: Property 'x' does not exist on type 'typeof Base1'.
}
class Derived1 extends Base1 {
    y: number
}
class Base2 {
    y: number
    polymorphic(this: this): number { return this.y; }
    explicit(this: Base1): number { return this.x; }
}
class Derived2 extends Base2 {
    x: number
}


let b1 = new Base1();
let d1 = new Derived1();
let b2 = new Base2();
let d2 = new Derived2();

b1.polymorphic = b2.polymorphic // error, 'this.y' not in Base1: { x }
~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '(this: Base2) => number' is not assignable to type '(this: Base1) => number'.
!!! error TS2322:   The 'this' types of each signature are incompatible.
!!! error TS2322:     Property 'y' is missing in type 'Base1' but required in type 'Base2'.
!!! related TS2728 thisTypeInFunctionsNegative.ts:131:5: 'y' is declared here.
b1.explicit = b2.polymorphic // error, 'y' not in Base1: { x }
~~~~~~~~~~~
!!! error TS2322: Type '(this: Base2) => number' is not assignable to type '(this: Base1) => number'.
!!! error TS2322:   The 'this' types of each signature are incompatible.
!!! error TS2322:     Property 'y' is missing in type 'Base1' but required in type 'Base2'.
!!! related TS2728 thisTypeInFunctionsNegative.ts:131:5: 'y' is declared here.

d1.explicit = b2.polymorphic // error, 'y' not in Base1: { x }
~~~~~~~~~~~
!!! error TS2322: Type '(this: Base2) => number' is not assignable to type '(this: Base1) => number'.
!!! error TS2322:   The 'this' types of each signature are incompatible.
!!! error TS2322:     Property 'y' is missing in type 'Base1' but required in type 'Base2'.
!!! related TS2728 thisTypeInFunctionsNegative.ts:131:5: 'y' is declared here.
```

----------------------------------------

TITLE: Defining and exporting a type alias 'A' in TypeScript
DESCRIPTION: This snippet defines a class `A` with a string property `a`, and exports `A` as a type alias. This means `A` can be used as a type annotation, but not as a value.  It demonstrates the basic structure of the module where the error originates.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/namespaceMemberAccess.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    class A { a!: string }
    export type { A };
```

----------------------------------------

TITLE: Using React Component with Type Checking
DESCRIPTION: This snippet demonstrates the usage of MyComponent with different prop types. It shows an error case where a string is assigned to a boolean prop, and two correct usages: one with a boolean prop and another with a data attribute.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution10.errors.txt#2025-04-21_snippet_2

LANGUAGE: TSX
CODE:
```
// Should be an error
<MyComponent bar='world' />;

// Should be OK
<MyComponent bar={true} />;

// Should be ok
<MyComponent data-bar='hello' />;
```

----------------------------------------

TITLE: Using the Comp Component with Missing Prop
DESCRIPTION: This snippet attempts to use the 'Comp' component without providing the required 'children' prop. TypeScript throws an error indicating that 'children' is missing, highlighting the importance of specifying all required props in JSX.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty5.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// Error: no children specified
let k = <Comp a={10} b="hi" />;
             ~~~~
!!! error TS2741: Property 'children' is missing in type '{ a: number; b: string; }' but required in type 'Prop'.
!!! related TS2728 file.tsx:6:5: 'children' is declared here.
```

----------------------------------------

TITLE: Package JSON Export Configuration
DESCRIPTION: Configures module exports with different entry points for CommonJS and ESM modules
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesConditionalPackageExports(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module",
    "exports": {
        "./cjs": "./index.cjs",
        "./mjs": "./index.mjs",
        ".": "./index.js"
    }
}
```

----------------------------------------

TITLE: Defining a Generic Type with Constraints in TypeScript
DESCRIPTION: This snippet defines a generic type `Everything` with several type parameters and constraints.  The type parameters `T`, `U`, `V`, `W`, and `X` are used to define the structure of the `Everything` type. Type `T` is constrained to have `a` of type number and `b` of type string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typedefMultipleTypeParameters.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    /**
     * @template {{ a: number, b: string }} T,U A Comment
     * @template {{ c: boolean }} V uh ... are comments even supported??
     * @template W
     * @template X That last one had no comment
     * @typedef {{ t: T, u: U, v: V, w: W, x: X }} Everything
     */
```

----------------------------------------

TITLE: Utility Function and Type for Removing 'this' Context in TypeScript
DESCRIPTION: This snippet defines a utility type RemoveThis and a function getExtensionField for retrieving extension fields without 'this' context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/signatureCombiningRestParameters4.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
type RemoveThis<T> = T extends (...args: any) => any
  ? (...args: Parameters<T>) => ReturnType<T>
  : T;

declare function getExtensionField<T = any>(
  extension: AnyExtension,
  field: string,
): RemoveThis<T>;
```

----------------------------------------

TITLE: TypeScript Interface Extension with Type Conflict
DESCRIPTION: This TypeScript code defines several interfaces: `Base`, `Base2`, `Derived`, `Derived2`, and `Derived3`. The `Derived2` interface attempts to extend both `Base` and `Base2`, which leads to a type conflict because the 'a' property within the nested 'x' property is defined as optional `string` in `Base` but as `number` in `Derived2`. This incompatibility results in a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceWithMultipleBaseTypes2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Base {
    x: {
        a?: string; b: string;
    }
}

interface Base2 {
    x: {
        b: string; c?: number;
    }
}

interface Derived extends Base, Base2 {
    x: { b: string }
}

interface Derived2 extends Base, Base2 { // error
    x: { a: number; b: string }
}

interface Derived3 extends Base, Base2 {
    x: { a: string; b: string }
}
```

----------------------------------------

TITLE: Importing and Using Type Aliases in TypeScript
DESCRIPTION: This snippet demonstrates importing 'type' and 'as' from a module, and then attempting to use them. It shows an error when using 'as' in an emitting position after it was imported using 'import type'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importSpecifiers1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { type } from "./mod.js";
import { type as } from "./mod.js";
type;
as; // Error (used in emitting position)
```

----------------------------------------

TITLE: TypeScript Base Config with Correct Option
DESCRIPTION: Base TSConfig file showing the correct usage of 'verbatimModuleSyntax' option that should replace the deprecated options
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/verbatimModuleSyntaxCompat4.errors.txt#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "verbatimModuleSyntax": true
    }
}
```

----------------------------------------

TITLE: Reserved Word Usage in Strict Mode JavaScript
DESCRIPTION: Using 'let' as a variable name in strict mode, which is disallowed because it's a reserved word.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationBindStrictModeErrors.errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
var let = 10; // error
```

----------------------------------------

TITLE: Importing and Using mdast-util-to-string Module
DESCRIPTION: Demonstrates attempts to import and use the mdast-util-to-string module, including incorrect default import and correct named import. Shows usage of dynamic import as well.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esmNoSynthesizedDefault(module=preserve).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import mdast, { toString } from 'mdast-util-to-string';
mdast;
mdast.toString();

const mdast2 = await import('mdast-util-to-string');
mdast2.toString();
mdast2.default;
```

----------------------------------------

TITLE: Type Mismatch in Function Assignment with Comma Operator
DESCRIPTION: Demonstrates TypeScript type checking errors when attempting to assign a function returning number to a variable typed as returning string, along with parameter type mismatch inside the function body.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextuallyTypeCommaOperator02.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
let x: (a: string) => string;

x = (100, a => {
    const b: number = a;
    return b;
});
```

----------------------------------------

TITLE: Recursive Type Definition with Inference
DESCRIPTION: This snippet demonstrates a recursive type definition using a generic type `A1` that takes two type parameters, where the second type parameter is constrained to be `A1` with any types. It also shows how to infer the types from `A1` using `B1`. This highlights the use of recursion in type definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypes1.errors.txt#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
    // Repros from #21631
    
    type A1<T, U extends A1<any, any>> = [T, U];
    type B1<S> = S extends A1<infer T, infer U> ? [T, U] : never;
```

----------------------------------------

TITLE: Function Parameter Type Checking in TypeScript
DESCRIPTION: This snippet defines an object 'A' with a specific structure and a function 'fill' that expects a parameter of a certain type derived from 'A'. When invoking 'fill' with a number, a type error occurs as the argument does not match the required type structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeOfOnTypeArg.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var A = { '': 3 };\n\nfunction fill<B extends typeof A>(f: B) {\n\n}\n\nfill(32);\n\n//!!! error TS2345: Argument of type 'number' is not assignable to parameter of type '{ '': number; }'.
```

----------------------------------------

TITLE: Handling Undefined Values in TypeScript Functions
DESCRIPTION: This example shows a TypeScript function that handles potentially undefined values. It demonstrates type narrowing and throwing an error when an undefined value is encountered.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictOptionalProperties1.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
type Undefinable<T> = T | undefined;

function expectNotUndefined<T>(value: Undefinable<T>): T {
    if (value === undefined) {
        throw new TypeError('value is undefined');
    }
    return value;
}

interface Bar {
    bar?: number;
}

function aa(input: Bar): void {
    const notUndefinedVal = expectNotUndefined(input.bar);
    bb(notUndefinedVal);
}

declare function bb(input: number): void;
```

----------------------------------------

TITLE: Defining Function Overloads in TypeScript
DESCRIPTION: This snippet showcases an error related to incompatible overload signatures in TypeScript. It attempts to define a function `foo` with two different return types. The first signature specifies the return type as an object with a number property, while the implementation returns an object with a string property, resulting in a TypeScript error. It highlights the importance of ensuring that overload signatures match the corresponding implementation signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionOverloads17.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo(): { a: number; };
function foo(): { a: string; } { return { a: "" }; }
```

----------------------------------------

TITLE: TypeScript Private Static Property Access Error
DESCRIPTION: This snippet demonstrates a TypeScript error (TS2341) that occurs when trying to access a private static property (`x`) of a class (`C`) from outside the class.  The `private` modifier restricts access to only within the class `C`. This highlights TypeScript's access control mechanism.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertyAccessibility2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    class C {
      private static x = 1;
    }
    var c = C.x;

```

----------------------------------------

TITLE: Defining a Local Interface Extending Imported Types in TypeScript
DESCRIPTION: This code snippet defines a local interface in TypeScript that extends two imported interfaces. While this part of the code showcases the correct interface declaration, it relies on the successful import of potentially problematic interfaces from the module, which may invoke errors if previous imports fail.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportModeDeclarationEmitErrors1(module=nodenext).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
export interface LocalInterface extends RequireInterface, ImportInterface {}
```

----------------------------------------

TITLE: Object String Indexer Implementation in TypeScript
DESCRIPTION: Demonstrates correct implementation of string indexers in various TypeScript contexts including interfaces, classes, and object literals. Shows how to properly type string-indexed properties to avoid the errors shown in lib.es5.d.ts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectTypeWithStringIndexerHidingObjectIndexer.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Object {
    [x: string]: Object;
}
var o = {};
var r = o[''];

class C {
    foo: string;
    [x: string]: string;
}
var c: C;
var r2: string = c[''];

interface I {
    bar: string;
    [x: string]: string;
}
var i: I;
var r3: string = i[''];

var o2: {
    baz: string;
    [x: string]: string;
}
var r4: string = o2[''];
```

----------------------------------------

TITLE: Reducer Function with Tuple Arguments
DESCRIPTION: This snippet defines a type `ReducerArgs` which is a union of two tuple types representing arguments for a reducer function: `['add', { a: number, b: number }]` and `['concat', { firstArr: any[], secondArr: any[] }]`. The reducer function then uses a switch statement on the first element of the tuple to determine which operation to perform.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_25

LANGUAGE: typescript
CODE:
```
    type ReducerArgs = ["add", { a: number, b: number }] | ["concat", { firstArr: any[], secondArr: any[] }];
    
    const reducer: (...args: ReducerArgs) => void = (op, args) => {
        switch (op) {
            case "add":
                console.log(args.a + args.b);
                break;
            case "concat":
                console.log(args.firstArr.concat(args.secondArr));
                break;
        }
    }
    
    reducer("add", { a: 1, b: 3 });
    reducer("concat", { firstArr: [1, 2], secondArr: [3, 4] });

```

----------------------------------------

TITLE: Class with Dynamic Imports and Async Function in TypeScript
DESCRIPTION: This snippet defines a class 'C' that uses dynamic imports and an async function. It's causing multiple TypeScript errors due to the absence of Promise constructor declarations in an ES5 environment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importCallExpressionNoModuleKindSpecified.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
declare var console: any;
class C {
    private myModule = import("./0");
    method() {
        const loadAsync = import("./0");
        this.myModule.then(Zero => {
            console.log(Zero.foo());
        }, async err => {
            console.log(err);
            let one = await import("./1");
            console.log(one.backup());
        });
    }
}
```

----------------------------------------

TITLE: Initializing Another Array with Type Annotation in TypeScript
DESCRIPTION: This snippet initializes an array `robotB` with a type annotation `Robot` specifying the expected structure of the array. It demonstrates the declaration and assignment of values to an array with a predefined type structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
var robotB: Robot = [
    2,
    "trimmer",
    "trimming"
];
```

----------------------------------------

TITLE: Declaring Number and String Variables (JS/TS)
DESCRIPTION: Declares a number variable `numberB` and a string variable `nameB`, showing both the emitted JavaScript and the original TypeScript with type annotations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.sourcemap.txt#_snippet_7

LANGUAGE: JavaScript
CODE:
```
var numberB, nameB;
```

LANGUAGE: TypeScript
CODE:
```
let numberB: number, nameB: string;
```

----------------------------------------

TITLE: Accessing Protected Properties in TypeScript Class Hierarchy
DESCRIPTION: This code snippet demonstrates the rules for accessing protected properties in TypeScript classes. It shows that protected properties can be accessed within their declaring class and subclasses, but not from outside instances. The snippet includes error messages for invalid access attempts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/protectedClassPropertyAccessibleWithinSubclass2.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
d3.x;           // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
d4.x;           // OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class

var b: Base;
var d1: Derived1;
var d2: Derived2;
var d3: Derived3;
var d4: Derived4;

b.x;                    // Error, neither within their declaring class nor classes derived from their declaring class
d1.x;                   // Error, neither within their declaring class nor classes derived from their declaring class
d2.x;                   // Error, neither within their declaring class nor classes derived from their declaring class
d3.x;                   // Error, neither within their declaring class nor classes derived from their declaring class
d4.x;                   // Error, neither within their declaring class nor classes derived from their declaring class
```

----------------------------------------

TITLE: Defining Module m1.ts Exports
DESCRIPTION: Creates a module with exported variable, class, instance, and function demonstrating TypeScript module export capabilities
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootAbsolutePathModuleSimpleSpecifyOutputFile/node/mapRootAbsolutePathModuleSimpleSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Importing and Using path.resolve Method
DESCRIPTION: Example of importing the Node.js path module and accessing its resolve method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/autoImportVerbatimCJS1.baseline.md#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import path = require("path");

path.resolve
```

----------------------------------------

TITLE: Declaring a function in JavaScript
DESCRIPTION: Demonstrates how to declare a simple function in JavaScript. The function 'foo' takes no parameters and performs no operations. There are no dependencies or outputs associated with this function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithOutFileNameSameAsInputJsFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
function foo() {
}
```

----------------------------------------

TITLE: Exporting Default Object in TypeScript
DESCRIPTION: This snippet exports a default object with a single property 'a' of type number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importWithTrailingSlash.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default { a: 0 };
```

----------------------------------------

TITLE: Generic Function with Template Literal Parameter Type in TypeScript
DESCRIPTION: A function declaration using a template literal type constraint for its parameter. It accepts only strings wrapped in asterisks and returns the extracted content.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes3.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
declare function foo1<V extends string>(arg: `*${V}*`): V;
```

----------------------------------------

TITLE: Defining and Exporting Classes in TypeScript
DESCRIPTION: This snippet defines two classes, `A` and `B`, and exports them from the `/a.ts` file. It also exports a type alias for class A.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/namespaceImportTypeQuery.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    class A {}
    export type { A };
    export class B {};
    
```

----------------------------------------

TITLE: Defining Function foo with Parameter Handling in TypeScript
DESCRIPTION: The function foo mimics greet2, allowing for parameter assignment, optional parameters, and collection of additional rest parameters. It demonstrates how to handle additional arguments and increment a global greeting counter.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationFunctions.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function foo(greeting, n = 10, x?: string, ...restParams: string[]) {
    return;
}
```

----------------------------------------

TITLE: Generic Property Checking in TypeScript
DESCRIPTION: Function f3 is a generic function that checks for the property 'a' in a variable of type T, enforcing type constraints with conditional checks to ensure safe access.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=true).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function f3<T>(x: T) {
    if ("a" in x) {
               ~
!!! error TS2322: Type 'T' is not assignable to type 'object'.
!!! related TS2208 inKeywordTypeguard.ts:182:13: This type parameter might need an `extends object` constraint.
        x.a;
    }
    if (x && "a" in x) {
                    ~
!!! error TS2638: Type 'NonNullable<T>' may represent a primitive value, which is not permitted as the right operand of the 'in' operator.
        x.a;
    }
    if (x && typeof x === "object" && "a" in x) {
        x.a;
    }
    if (x && typeof x === "object" && "a" in x && "b" in x && "c" in x) {
        x.a;
        x.b;
        x.c;
    }
}
```

----------------------------------------

TITLE: Class Inheritance with Type-Safe Props Access
DESCRIPTION: This example demonstrates class inheritance with generic type parameters and the 'this["props"]' indexed access type to ensure type safety when accessing props in derived classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
class A<T> {
	props: T & { foo: string };
}

class B extends A<{ x: number}> {
	f(p: this["props"]) {
		p.x;
	}
}
```

----------------------------------------

TITLE: Defining Type A with Optional Property
DESCRIPTION: This snippet defines a TypeScript object type 'A' that has an optional property 'value' of type number. The code shows a type error when attempting to assign an object with an undefined value to this property, as it violates the type constraints under 'exactOptionalPropertyTypes'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictOptionalProperties3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/**
     * @typedef {object} A
     * @property {number} [value]
     */
    
    /** @type {A} */
    const a = { value: undefined }; // error
          ~
```

----------------------------------------

TITLE: Invalid Use of Template String with instanceof Operator in TypeScript
DESCRIPTION: This code demonstrates an invalid operation where a template string is used as the left-hand operand of an instanceof expression. TypeScript reports error TS2358 because the left-hand side of an instanceof expression must be of type 'any', an object type, or a type parameter - not a primitive string type like template strings.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateStringInInstanceOf.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var x = `abc${ 0 }def` instanceof String;
```

----------------------------------------

TITLE: Defining Base and Derived Classes in TypeScript
DESCRIPTION: This code snippet defines a base class `SomeBase` with a private member `n` and a public string property `s`. It then defines three derived classes, `SomeDerived1`, `SomeDerived2`, and `SomeDerived3`, all extending `SomeBase` and each having a private member `m`. This illustrates basic class inheritance in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadResolutionConstructors.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    class SomeBase {
        private n;
    
        public s: string;
    }
    class SomeDerived1 extends SomeBase {
        private m;
    }
    class SomeDerived2 extends SomeBase {
        private m;
    }
    class SomeDerived3 extends SomeBase {
        private m;
    }
```

----------------------------------------

TITLE: Valid Interface Extension with No Parameters for a2 Method
DESCRIPTION: Example of correctly extending the Base interface by implementing the 'a2' method with no parameters. This is valid because it has fewer required parameters than the base interface.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithCallSignaturesWithRestParameters.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
interface I4 extends Base {
    a2: () => number; // ok, fewer required params
}
```

----------------------------------------

TITLE: Array Destructuring with Default Values in TypeScript
DESCRIPTION: Demonstrates destructuring an array of objects with nested properties and providing default values for name, primary, and secondary skills
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_55

LANGUAGE: typescript
CODE:
```
for ({
    name = "noName",
    skills: {
        primary = "primary",
        secondary = "secondary"
    } = { primary: "noSkill", secondary: "noSkill" }
} of [
    { name: "mower", skills: { primary: "mowing", secondary: "none" } },
    { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }
])
```

----------------------------------------

TITLE: Handling CommonJS Module Imports in TypeScript
DESCRIPTION: This snippet demonstrates importing modules using CommonJS syntax in TypeScript. The code illustrates the import errors encountered when a CommonJS module attempts to import an ECMAScript module using 'require'. It suggests using dynamic 'import()' calls to address compatibility issues. The snippet emphasizes proper module import management in TypeScript environments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node16).errors.txt#2025-04-21_snippet_8

LANGUAGE: TypeScript
CODE:
```
import * as m12 from "./subfolder2/another/index.cjs";
// The next ones should _mostly_ work - cjs format files have index resolution and extension resolution (except for those which resolve to an esm format file)
import * as m13 from "./";
                     ~~~~
import * as m14 from "./index";
                     ~~~~~~~~~
import * as m15 from "./subfolder";
import * as m16 from "./subfolder/";
import * as m17 from "./subfolder/index";
import * as m18 from "./subfolder2";
import * as m19 from "./subfolder2/";
import * as m20 from "./subfolder2/index";
import * as m21 from "./subfolder2/another";
                     ~~~~~~~~~~~~~~~~~~~~~~
import * as m22 from "./subfolder2/another/";
                     ~~~~~~~~~~~~~~~~~~~~~~~
import * as m23 from "./subfolder2/another/index";
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void m1;
void m2;
void m3;
void m4;
void m5;
void m6;
void m7;
void m8;
void m9;
void m10;
void m11;
void m12;
void m13;
void m14;
void m15;
void m16;
void m17;
void m18;
void m19;
void m20;
void m21;
void m22;
void m23;
// These should _mostly_ work - `import = require` always desugars to require calls, which do have extension and index resolution (but can't load anything that resolves to esm!)
import m24 = require("./");
                     ~~~~
import m25 = require("./index");
                     ~~~~~~~~~
import m26 = require("./subfolder");
import m27 = require("./subfolder/");
import m28 = require("./subfolder/index");
import m29 = require("./subfolder2");
import m30 = require("./subfolder2/");
import m31 = require("./subfolder2/index");
import m32 = require("./subfolder2/another");
                     ~~~~~~~~~~~~~~~~~~~~~~
import m33 = require("./subfolder2/another/");
                     ~~~~~~~~~~~~~~~~~~~~~~~
import m34 = require("./subfolder2/another/index");
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void m24;
void m25;
void m26;
void m27;
void m28;
void m29;
void m30;
void m31;
void m32;
void m33;
void m34;

```

----------------------------------------

TITLE: Machine Configuration and Actor Distribution
DESCRIPTION: Demonstrates complex type manipulations using interfaces and conditional types for configuring machine behaviors and actors, ensuring that only pertinent properties are accepted.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reverseMappedTypeIntersectionConstraint.errors.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
type IsLiteralString<T extends string> = string extends T ? false : true;

type DeepWritable<T> = T extends Function ? T : { -readonly [K in keyof T]: DeepWritable<T[K]> }

interface ProvidedActor {
  src: string;
  logic: () => Promise<unknown>;
}

type DistributeActors<TActor> = TActor extends { src: infer TSrc }
  ? {
      src: TSrc;
    }
  : never;

interface MachineConfig<TActor extends ProvidedActor> {
  types?: {
    actors?: TActor;
  };
  invoke: IsLiteralString<TActor["src"]> extends true
    ? DistributeActors<TActor>
    : {
        src: string;
      };
}

type NoExtra<T> = {
  [K in keyof T]: K extends keyof MachineConfig<any> ? T[K] : never
}

declare function createXMachine<
  const TConfig extends MachineConfig<TActor>,
  TActor extends ProvidedActor = TConfig extends { types: { actors: ProvidedActor} } ? TConfig["types"]["actors"] : ProvidedActor,
>(config: {[K in keyof MachineConfig<any> & keyof TConfig]: TConfig[K] }): TConfig;

```

----------------------------------------

TITLE: Using Instanceof to Narrow Types in TypeScript
DESCRIPTION: This snippet shows type narrowing using 'instanceof' for the 'Function' and 'Object' types. It demonstrates that when 'x' is narrowed to 'Function' and 'Object', it's possible to call functions and methods, though 'any' is not narrowed effectively when targeting these types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowFromAnyWithInstanceof.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare var x: any;
    
    if (x instanceof Function) { // 'any' is not narrowed when target type is 'Function'
        x();
        x(1, 2, 3);
        x("hello!");
        x.prop;
    }
    
    if (x instanceof Object) { // 'any' is not narrowed when target type is 'Object'
        x.method();
        x();
    }
```

----------------------------------------

TITLE: Destructuring Function with Empty Array Default
DESCRIPTION: Function using array destructuring with an empty array as default initializer, triggering type inference warnings
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringWithLiteralInitializers2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function f01([x, y] = []) {}
```

----------------------------------------

TITLE: Defining Promise Interfaces in TypeScript
DESCRIPTION: Defines two promise interfaces: Promise<T> with catch method and multiple then overloads, and IPromise<T> with a simpler interface lacking the catch method. This difference causes type compatibility issues.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations3.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface Promise<T> {
    then<U>(success?: (value: T) => Promise<U>, error?: (error: any) => Promise<U>, progress?: (progress: any) => void): Promise<U>;
    then<U>(success?: (value: T) => Promise<U>, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>;
    then<U>(success?: (value: T) => U, error?: (error: any) => Promise<U>, progress?: (progress: any) => void): Promise<U>;
    then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>;
    done<U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
}

interface IPromise<T> {
    then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
    done? <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
}
```

----------------------------------------

TITLE: Using ||= with Possibly Undefined Function in TypeScript
DESCRIPTION: Demonstrates the use of the logical OR assignment operator (`||=`) with a possibly undefined function type. The compiler reports an error (TS18048) when invoking the function after the assignment, as `||=` does not guarantee the variable is non-falsy (including undefined) if the right side is assigned.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment5(target=es2020).errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
function foo2 (f?: (a: number) => void) {
    f ||= (a => a)
    f(42)
}
```

----------------------------------------

TITLE: Accessing Private Class Fields in Static Blocks in TypeScript
DESCRIPTION: This code demonstrates errors that occur when trying to access private class fields across different classes and using variables before declaration in static blocks. It shows three specific TypeScript errors: using a variable before declaration (TS2448) and accessing private class properties from outside their classes (TS18013).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classStaticBlock16.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
let getX: (c: C) => number;
class C {
  #x = 1
  constructor(x: number) {
    this.#x = x;
  }

  static {
    // getX has privileged access to #x
    getX = (obj: C) => obj.#x;
    getY = (obj: D) => obj.#y;
  }
}

let getY: (c: D) => number;
class D {
  #y = 1

  static {
    // getY has privileged access to y
    getX = (obj: C) => obj.#x;
    getY = (obj: D) => obj.#y;
  }
}
```

----------------------------------------

TITLE: Interface to Function Assignment Type Error in TypeScript
DESCRIPTION: Demonstrates a type error when attempting to assign an interface type interfaceWithPublicAndOptional<number,string> to a generic function type <Tstring>(a: Tstring) => Tstring. The error occurs because the interface structure doesn't match the required function signature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability33.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module __test1__ {
    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
    export var __val__obj4 = obj4;
}
module __test2__ {
    export var obj: { <Tstring>(a: Tstring): Tstring; };
    export var __val__obj = obj;
}
__test2__.__val__obj = __test1__.__val__obj4
```

----------------------------------------

TITLE: ESM Import in JavaScript Module
DESCRIPTION: ES Module format file demonstrating correct import syntax
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeAllowJsPackageSelfName(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// esm format file
import * as self from "package";
self;
```

----------------------------------------

TITLE: Defining Union Type Component with Props Checking - TypeScript
DESCRIPTION: This snippet creates a second stateless functional component 'TestComponent2' which accepts a union of 'TestProps' and an alternative type. Similar to the previous example, using 'INVALID_PROP_NAME' leads to a type error stemming from TypeScript's excess property checks.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/deepExcessPropertyCheckingWhenTargetIsIntersection.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const TestComponent2: StatelessComponent<TestProps | {props2: {x: number}}> = (props) => {
  return null;
}
    
TestComponent2({icon: { props: { INVALID_PROP_NAME: 'share', ariaLabel: 'test label' } }});
                                     ~~~~~~~~~~~~~~~~~
!!! error TS2353: Object literal may only specify known properties, and 'INVALID_PROP_NAME' does not exist in type 'ITestProps'.
!!! related TS6500 deepExcessPropertyCheckingWhenTargetIsIntersection.ts:14:3: The expected type comes from property 'props' which is declared here on type 'NestedProp<ITestProps>'
```

----------------------------------------

TITLE: Generator Yielding a Number and Returning String
DESCRIPTION: This defines a generator function that yields the number 1 and then returns a string. The inferred type is Generator<number, string, unknown>.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatorReturnTypeInference.errors.txt#2025-04-21_snippet_19

LANGUAGE: typescript
CODE:
```
function* g304() { // Generator<number, string, unknown>
        yield 1;
        return "a";
    }
```

----------------------------------------

TITLE: Nested Array Destructuring Catch Clause
DESCRIPTION: This snippet demonstrates nested array destructuring in a catch clause where the caught error's type is implicitly 'unknown'. Attempting to use nested array destructuring on an 'unknown' type results in a TypeScript error because the compiler cannot guarantee that the caught value is actually an array, much less a nested one.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructureCatchClause(strict=true,useunknownincatchvariables=true).errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
"try {} catch ([[ x ]]) { x }"
```

----------------------------------------

TITLE: Class Definition in TypeScript
DESCRIPTION: Defines a basic class A that is exported for use in other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDefault.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export class A {}
```

----------------------------------------

TITLE: Package Configuration for Module Types
DESCRIPTION: JSON configuration files defining module type settings for different project folders, determining whether the project uses ESM or CommonJS module systems.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesForbidenSyntax(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

LANGUAGE: json
CODE:
```
{
    "type": "commonjs"
}
```

LANGUAGE: json
CODE:
```
{}
```

LANGUAGE: json
CODE:
```
{
    "type": "module"
}
```

----------------------------------------

TITLE: Type Narrowing with Intersections of Discriminated Unions
DESCRIPTION: Shows how TypeScript can narrow discriminated union types when combined with intersection types. Demonstrates this in both direct assignments and generic functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionReduction.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
// Repro from #38549

interface A2 {
    kind: "A";
    a: number;
}

interface B2 {
    kind: "B";
    b: number;
}

declare const shouldBeB: (A2 | B2) & B2;
const b: B2 = shouldBeB; // works

function inGeneric<T extends A2 | B2>(alsoShouldBeB: T & B2) {
    const b: B2 = alsoShouldBeB;
}
```

----------------------------------------

TITLE: Decorating Static Private Field (Second Example) in TypeScript
DESCRIPTION: This snippet shows another example of a static private field `#z` decorated with two `@dec` decorators. The emitted JavaScript creates a variable `_static_private_z_decorators` holding an array of these decorators.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-sourceMap(target=es2022).sourcemap.txt#_snippet_19

LANGUAGE: TypeScript
CODE:
```
@\ndec\n                                                 @\ndec\n    static #z = 1;
```

LANGUAGE: JavaScript
CODE:
```
_static_private_z_decorators = [dec, dec];
```

----------------------------------------

TITLE: Defining and Using a Template String Interface in TypeScript
DESCRIPTION: This TypeScript snippet defines an interface I designed to handle tagged template strings with boolean type parameters and uses variable f of type I to invoke the template tag incorrectly with numbers. The purpose is to illustrate type mismatch errors when using non-boolean types, resulting in compilation errors. Key parameters include stringParts as an array and rest as a list of boolean values. The expected input is template strings with included expressions, and the output, when incorrect types are used, results in error messages.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/taggedTemplateStringsWithIncompatibleTypedTagsES6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface I {
    (stringParts: TemplateStringsArray, ...rest: boolean[]): I;
    g: I;
    h: I;
    member: I;
    thisIsNotATag(x: string): void
    [x: number]: I;
}

var f: I;

f `abc`

f `abc${1}def${2}ghi`;
        ~
!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'boolean'.

f `abc`.member

f `abc${1}def${2}ghi`.member;
        ~
!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'boolean'.

f `abc`["member"];

f `abc${1}def${2}ghi`["member"];
        ~
!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'boolean'.

f `abc`[0].member `abc${1}def${2}ghi`;
                        ~
!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'boolean'.

f `abc${1}def${2}ghi`["member"].member `abc${1}def${2}ghi`;
        ~
!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'boolean'.
                                         ~
!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'boolean'.

f `abc${ true }def${ true }ghi`["member"].member `abc${ 1 }def${ 2 }ghi`;
                                                        ~
!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'boolean'.

f.thisIsNotATag(`abc`);

f.thisIsNotATag(`abc${1}def${2}ghi`);
```

----------------------------------------

TITLE: Interface Inheritance with Type Constraints in TypeScript
DESCRIPTION: Examples of interface inheritance showing type compatibility issues between base and derived interfaces. E1<T> demonstrates a type error because T isn't guaranteed to be compatible with the base interface's property type, while E2 and E3 show valid implementations with mapped types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypesAndObjects.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface Base {
    foo: { [key: string]: any };
    bar: any;
    baz: any;
}

interface E1<T> extends Base {
    foo: T;
}

interface Something { name: string, value: string };
interface E2 extends Base {
    foo: Partial<Something>;  // or other mapped type
}

interface E3<T> extends Base {
    foo: Partial<T>; // or other mapped type
}
```

----------------------------------------

TITLE: TypeScript For-Of Loop Type Error
DESCRIPTION: Shows an invalid type assignment where a number array is being iterated with a string variable. The TypeScript compiler catches the type mismatch between number and string types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/for-of10.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var v: string;
for (v of [0]) { }
```

----------------------------------------

TITLE: Class Definitions and Base Types in TypeScript
DESCRIPTION: Defines base classes and their inheritance hierarchy for testing constructor signature compatibility.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithConstructSignatures3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base { foo: string; }
class Derived extends Base { bar: string; }
class Derived2 extends Derived { baz: string; }
class OtherDerived extends Base { bing: string; }
```

----------------------------------------

TITLE: Valid Interface Extensions for a3 Method with Various Parameter Configurations
DESCRIPTION: Multiple examples of correctly extending the Base interface by implementing the 'a3' method with various parameter configurations. All examples maintain type compatibility with the base interface.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithCallSignaturesWithRestParameters.errors.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
interface I7 extends Base {
    a3: () => number; // ok, fewer required params
}

interface I8 extends Base {
    a3: (x?: number) => number; // ok, fewer required params
}

interface I9 extends Base {
    a3: (x: number) => number; // ok, same number of required params
}

interface I10 extends Base {
    a3: (x: number, y: string) => number;  // ok, all present params match
}
```

----------------------------------------

TITLE: Function Overload Declaration and Invalid Call
DESCRIPTION: Example showing TypeScript function overloading with two signatures that accept different object parameter shapes, and an invalid function call that provides properties not defined in either overload signature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/excessPropertiesInOverloads.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function fn(a: { x: string }): void;
declare function fn(a: { y: string }): void;
fn({ z: 3, a: 3 });
```

----------------------------------------

TITLE: Valid Module/Declare Function Merge - TypeScript
DESCRIPTION: This snippet shows a valid merge between a module and a 'declare function'. The module is declared first, which is acceptable when merging with a 'declare' signature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/augmentedTypesModules2.errors.txt#_snippet_5

LANGUAGE: TypeScript
CODE:
```
module m2d { }
declare function m2d(): void;
```

----------------------------------------

TITLE: Target Has Optional Property Interface Definitions
DESCRIPTION: Defines interfaces and variables for testing assignment compatibility when the target type has optional properties
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithObjectMembersOptionality2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface C {
    opt?: Base
}
var c: C;

var a: { opt?: Base; }
var b: typeof a = { opt: new Base() }

interface D {
    other: Base;
}
interface E {
    other: Derived;
}
interface F {
    other?: Derived;
}
var d: D;
var e: E;
var f: F;
```

----------------------------------------

TITLE: Destructuring Assignment in For Loop
DESCRIPTION: A for loop that demonstrates object destructuring with default values and console logging. The code includes destructuring of robot properties with fallback values and source mapping details.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
for (var _r = robot.name, nameA = _r === void 0 ? "noName" : _r, _s = robot.skill, skillA = _s === void 0 ? "skill" : _s, i = 0; i < 1; i++) {
    console.log(primaryA);
}
```

----------------------------------------

TITLE: Class Definitions with Private Properties in TypeScript
DESCRIPTION: This snippet defines two classes, C and D, each with a private property 'x'. It demonstrates type incompatibility between classes with identically named private properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeMatch1.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
class C { private x; }
class D { private x; }

var x6=new C();
var x7=new D();

x6 = x7;
x6=C;
C==D;
C==C;
```

----------------------------------------

TITLE: Extending Base Class with Constraints in Type Parameters
DESCRIPTION: This snippet defines several derived classes (D1 to D28) that extend the base class 'C3'. Each derived class specifies its own constraints on type parameters, demonstrating how TypeScript enforces type safety and subtype relationships.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypesOfTypeParameterWithConstraints.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class D1<T extends U, U> extends C3<T> {
    [x: string]: T;
    foo: T; // ok
}
```

LANGUAGE: typescript
CODE:
```
class D2<T extends U, U> extends C3<U> {
    [x: string]: U;
    foo: T; // ok
}
```

LANGUAGE: typescript
CODE:
```
class D3<T extends U, U> extends C3<T> {
    [x: string]: T;
    foo: U; // error
    ~~~
!!! error TS2411: Property 'foo' of type 'U' is not assignable to 'string' index type 'T'.
    ~~~
!!! error TS2416: Property 'foo' in type 'D3<T, U>' is not assignable to the same property in base type 'C3<T>'.
!!! error TS2416:   Type 'U' is not assignable to type 'T'.
!!! error TS2416:     'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.
}
```

LANGUAGE: typescript
CODE:
```
class D4<T extends U, U> extends C3<U> {
    [x: string]: U;
    foo: U; // ok
}
```

LANGUAGE: typescript
CODE:
```
class D5<T extends U, U extends V, V> extends C3<T> {
    [x: string]: T;
    foo: T; // ok
}
```

LANGUAGE: typescript
CODE:
```
class D6<T extends U, U extends V, V> extends C3<U> {
    [x: string]: U;
    foo: T;
}
```

LANGUAGE: typescript
CODE:
```
class D7<T extends U, U extends V, V> extends C3<V> {
    [x: string]: V;
    foo: T; // ok
}
```

LANGUAGE: typescript
CODE:
```
class D8<T extends U, U extends V, V> extends C3<T> {
    [x: string]: T;
    foo: U; // error
    ~~~
!!! error TS2411: Property 'foo' of type 'U' is not assignable to 'string' index type 'T'.
    ~~~
!!! error TS2416: Property 'foo' in type 'D8<T, U, V>' is not assignable to the same property in base type 'C3<T>'.
!!! error TS2416:   Type 'U' is not assignable to type 'T'.
!!! error TS2416:     'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.
}
```

LANGUAGE: typescript
CODE:
```
class D9<T extends U, U extends V, V> extends C3<U> {
    [x: string]: U;
    foo: U; // ok
}
```

LANGUAGE: typescript
CODE:
```
class D10<T extends U, U extends V, V> extends C3<V> {
    [x: string]: V;
    foo: U; // ok
}
```

LANGUAGE: typescript
CODE:
```
class D11<T extends U, U extends V, V> extends C3<T> {
    [x: string]: T;
    foo: V; // error
    ~~~
!!! error TS2411: Property 'foo' of type 'V' is not assignable to 'string' index type 'T'.
    ~~~
!!! error TS2416: Property 'foo' in type 'D11<T, U, V>' is not assignable to the same property in base type 'C3<T>'.
!!! error TS2416:   Type 'V' is not assignable to type 'T'.
!!! error TS2416:     'T' could be instantiated with an arbitrary type which could be unrelated to 'V'.
}
```

LANGUAGE: typescript
CODE:
```
class D12<T extends U, U extends V, V> extends C3<U> {
    [x: string]: U;
    foo: V; // error
    ~~~
!!! error TS2411: Property 'foo' of type 'V' is not assignable to 'string' index type 'U'.
    ~~~
!!! error TS2416: Property 'foo' in type 'D12<T, U, V>' is not assignable to the same property in base type 'C3<U>'.
!!! error TS2416:   Type 'V' is not assignable to type 'U'.
!!! error TS2416:     'U' could be instantiated with an arbitrary type which could be unrelated to 'V'.
}
```

LANGUAGE: typescript
CODE:
```
class D13<T extends U, U extends V, V> extends C3<V> {
    [x: string]: V;
    foo: V; // ok
}
```

LANGUAGE: typescript
CODE:
```
class D14<T extends U, U extends V, V extends Date> extends C3<Date> {
    [x: string]: Date;
    foo: T; // ok
}
```

LANGUAGE: typescript
CODE:
```
class D15<T extends U, U extends V, V extends Date> extends C3<T> {
    [x: string]: T;
    foo: T; // ok
}
```

LANGUAGE: typescript
CODE:
```
class D16<T extends U, U extends V, V extends Date> extends C3<U> {
    [x: string]: U;
    foo: T;
}
```

LANGUAGE: typescript
CODE:
```
class D17<T extends U, U extends V, V extends Date> extends C3<V> {
    [x: string]: V;
    foo: T;
}
```

LANGUAGE: typescript
CODE:
```
class D18<T extends U, U extends V, V extends Date> extends C3<Date> {
    [x: string]: Date;
    foo: T; // ok
}
```

LANGUAGE: typescript
CODE:
```
class D19<T extends U, U extends V, V extends Date> extends C3<T> {
    [x: string]: T;
    foo: U; // error
    ~~~
!!! error TS2411: Property 'foo' of type 'U' is not assignable to 'string' index type 'T'.
    ~~~
!!! error TS2416: Property 'foo' in type 'D19<T, U, V>' is not assignable to the same property in base type 'C3<T>'.
!!! error TS2416:   Type 'U' is not assignable to type 'T'.
!!! error TS2416:     'U' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'Date'.
}
```

----------------------------------------

TITLE: Destructuring and Iterating in TypeScript
DESCRIPTION: This snippet demonstrates object destructuring from a function call result and a for loop implementation. It uses nested destructuring to extract 'primary' and 'secondary' skills from a robot object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
for ({ skills: { primary, secondary } } = getMultiRobot(), i = 0; i < 1; i++) {
    console.log(primaryA);
}
```

LANGUAGE: typescript
CODE:
```
for (_f = { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }.skills, primary = _f.primary, secondary = _f.secondary,
```

----------------------------------------

TITLE: Object Type Guard Functionality TypeScript
DESCRIPTION: This function uses type guards to determine if a variable is a Record type, illustrating how TypeScript handles narrowings for Record<string, unknown> type with function-based type guards.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowingMutualSubtypes.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
    declare function isObject2(value: unknown): value is {};
    
    function gg2(x: Record<string, unknown>) {
        if (isObject2(x)) {
            x;  // Record<string, unknown>
        }
        else {
            x;  // never
        }
        x;  // Record<string, unknown>
    }
```

----------------------------------------

TITLE: Inner Module Declaration File
DESCRIPTION: This TypeScript declaration file for the 'inner' module exports 'x' from './other.js'. This file helps define the structure of the 'inner' module and is part of the module resolution process. It's located at `node_modules/inner/index.d.ts`
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSpecifierGenerationPattern(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// esm format file
export { x } from "./other.js";
```

----------------------------------------

TITLE: Defining Generic Interface and Functions in TypeScript with JSX
DESCRIPTION: This snippet defines a generic interface 'F' for a function component, a function 'g', and an exported function 'wu' that uses JSX. It demonstrates advanced TypeScript features but results in an error due to React not being in scope for the JSX tag.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/quickIntersectionCheckCorrectlyCachesErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface F<P> {
    (props: P & { children?: boolean }): void;
    propTypes: { [K in keyof P]: null extends P ? K : K };
}
declare function g(C: F<unknown>): string;
export function wu<CP extends { o: object }>(CC: F<CP>) {
    class WU {
        m() {
            g(CC)
            return <CC {...(null as unknown as CP)} />;
        }
    }
}
```

----------------------------------------

TITLE: Object Spread with Union Type and Type Incompatibility Error
DESCRIPTION: This function demonstrates an error when spreading an optional object into another object with incompatible property types. TypeScript flags that the numeric literal 123 is not assignable to the string type expected for property 'y'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/spreadUnion3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f(x: { y: string } | undefined): { y: string } {
    return { y: 123, ...x } // y: string | number
}
```

----------------------------------------

TITLE: Importing ESM in Module TypeScript (.mts file)
DESCRIPTION: TypeScript code in an .mts file (explicitly ESM format) importing from a package defined as ES Module. This imports correctly without errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodePackageSelfName(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// esm format file
import * as self from "package";
self;
```

----------------------------------------

TITLE: Error Handling for Object Assignments in TypeScript
DESCRIPTION: This code segment presents TypeScript errors related to object assignments to primitive types. It emphasizes the mismatch of object types with number and string primitives, demonstrating the limitations of assigning structured types to primitive values in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentIndexedToPrimitives.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
const no1: number = { 0: 1 };
          ~~~
!!! error TS2322: Type '{ 0: number; }' is not assignable to type 'number'.
    const so1: string = { 0: 1 };
          ~~~
!!! error TS2322: Type '{ 0: number; }' is not assignable to type 'string'.
    const so2: string = { "0": 1 };
          ~~~
!!! error TS2322: Type '{ "0": number; }' is not assignable to type 'string'.
    const so3: string = { 0: "1" };
          ~~~
!!! error TS2322: Type '{ 0: string; }' is not assignable to type 'string'.
```

----------------------------------------

TITLE: Defining a Function with String Parameter - TypeScript
DESCRIPTION: This code snippet defines a function `f` that expects a string as input but mistakenly assigns a number to the parameter. This results in a TypeScript error indicating that a number cannot be assigned to a string type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocTypeTagParameterType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/** @type {function(string): void} */
const f = (value) => {
    value = 1 // should error
    ~~~~~
!!! error TS2322: Type 'number' is not assignable to type 'string'.
};
```

----------------------------------------

TITLE: Defining React Component Props Interface with Index Signature in TypeScript
DESCRIPTION: Defines a Props interface that requires a 'foo' string property and uses an index signature to specify that any property starting with 'data-' must be of type string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ignoredJsxAttributes.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Props {
    foo: string;
    [dataProp: string]: string;
}
```

----------------------------------------

TITLE: Using Arrow Functions with Generics and Accessing Non-Existent Properties
DESCRIPTION: This snippet defines an object `b` with a method `foo` that accepts a generic type parameter constrained to `Date`. Inside the method, it tries to access the property 'notHere', leading to TypeScript compilation errors, reinforcing the importance of valid property access in generics.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertyAccessOnTypeParameterWithConstraints4.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
var b = {
        foo: <T extends Date>(x: T): T => {
            var a = x['notHere'](); // should be string
            return a + x.notHere();
                         ~~~~~~~
!!! error TS2339: Property 'notHere' does not exist on type 'T'.
        },
        bar: b.foo().notHere()
    }
    
    var r4 = b.foo(new Date());
```

----------------------------------------

TITLE: Defining TypeScript Function with Optional Parameter
DESCRIPTION: Defines a function signature named 'DefaultValue' with an optional parameter 'value' of type string, which has a default value of "Hello". Note that the surrounding context in the source file contains compiler errors related to this snippet.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constructorWithIncompleteTypeAnnotation.errors.txt#_snippet_15

LANGUAGE: TypeScript
CODE:
```
public DefaultValue(value?: string = "Hello") { }
```

----------------------------------------

TITLE: Awaiting a Value in Async Generator
DESCRIPTION: Demonstrates using the 'await' statement correctly within an async generator function, yielding a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parser.asyncGenerators.classMethods.es2018.errors.txt#2025-04-21_snippet_16

LANGUAGE: TypeScript
CODE:
```
    class C17 {
        async * f() {
            await 1;
        }
    }
```

----------------------------------------

TITLE: Using Inline Import Assertions in TypeScript Type Context
DESCRIPTION: These examples demonstrate using inline object literals directly within the type-level `import()` syntax to specify import assertions, including different resolution modes. This shows how assertion values can be provided directly in the type position.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportTypeModeDeclarationEmitErrors1(module=nodenext).errors.txt#_snippet_10

LANGUAGE: TypeScript
CODE:
```
export const a = (null as any as import("pkg", [ {"resolution-mode": "require"} ]).RequireInterface);
export const b = (null as any as import("pkg", [ {"resolution-mode": "import"} ]).ImportInterface);
```

----------------------------------------

TITLE: Validating Private Field Access Using 'in' Operator in TypeScript
DESCRIPTION: A comprehensive demonstration of how TypeScript handles private class fields with the 'in' operator. The code shows various valid and invalid usages, including type narrowing, error cases, and how TypeScript's control flow analysis works with private fields.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameInInExpression(target=esnext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Foo {
    #field = 1;
    static #staticField = 2;
    #method() {}
    static #staticMethod() {}

    goodRhs(v: any) {
        const a = #field in v;

        const b = #field in v.p1.p2;

        const c = #field in (v as {});

        const d = #field in (v as Foo);

        const e = #field in (v as never);

        for (let f in #field in v as any) { /**/ } // unlikely but valid
    }
    badRhs(v: any) {
        const a = #field in (v as unknown); // Bad - RHS of in must be object type or any

        const b = #fiel in v; // Bad - typo in privateID

        const c = (#field) in v; // Bad - privateID is not an expression on its own

        for (#field in v) { /**/ } // Bad - 'in' not allowed

        for (let d in #field in v) { /**/ } // Bad - rhs of in should be a object/any
    }
    whitespace(v: any) {
        const a = v && /*0*/#field/*1*/
            /*2*/in/*3*/
                /*4*/v/*5*/
    }
    flow(u: unknown, n: never, fb: Foo | Bar, fs: FooSub, b: Bar, fsb: FooSub | Bar, fsfb: Foo | FooSub | Bar) {

        if (typeof u === 'object') {
            if (#field in n) {
                n; // good n is never
            }

            if (#field in u) {
                u; // good u is Foo
            } else {
                u; // good u is object | null
            }

            if (u !== null) {
                if (#field in u) {
                    u; // good u is Foo
                } else {
                    u; // good u is object
                }

                if (#method in u) {
                    u; // good u is Foo
                }

                if (#staticField in u) {
                    u; // good u is typeof Foo
                }

                if (#staticMethod in u) {
                    u; // good u is typeof Foo
                }
            }
        }

        if (#field in fb) {
            fb; // good fb is Foo
        } else {
            fb; // good fb is Bar
        }

        if (#field in fs) {
            fs; // good fs is FooSub
        } else {
            fs; // good fs is never
        }

        if (#field in b) {
            b; // good b is 'Bar & Foo'
        } else {
            b; // good b is Bar
        }

        if (#field in fsb) {
            fsb; // good fsb is FooSub
        } else {
            fsb; // good fsb is Bar
        }

        if (#field in fsfb) {
            fsfb; // good fsfb is 'Foo | FooSub'
        } else {
            fsfb; // good fsfb is Bar
        }

        class Nested {
            m(v: any) {
                if (#field in v) {
                    v; // good v is Foo
                }
            }
        }
    }
}

class FooSub extends Foo { subTypeOfFoo = true }
class Bar { notFoo = true }

function badSyntax(v: Foo) {
    return #field in v; // Bad - outside of class
}
```

----------------------------------------

TITLE: Valid Generic Function with Multiple Type Parameters
DESCRIPTION: This code shows how to declare a generic function with multiple type parameters in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxGenericArrowFunctionParsing.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
var x3 = <T, T1>() => {};
x3();
```

----------------------------------------

TITLE: TypeScript For Loop Initialization with Array Destructuring
DESCRIPTION: Initializes a for loop using array destructuring on the result of the `getRobot()` function. It assigns the first element to `numberA3` with a default value of -1 and collects the remaining elements into the `robotAInfo` array using the rest parameter syntax. It also initializes a loop counter `i` to 0.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.sourcemap.txt#_snippet_88

LANGUAGE: typescript
CODE:
```
for (
     [numberA3 = -1, ...robotAInfo] =
           getRobot
                   ()

                       numberA3 = -1

                                         numberA3
                                                  =
                                                                      -
                                                                       1

                                                                             , ...
                                                                               robotAInfo


                                                                                             ] = getRobot(),
                                                                                               i
                                                                                                 =
                                                                                                   0
                                                                                                    ; 
                                                                                                      i
                                                                                                        <
                                                                                                          1
                                                                                                           ; 
                                                                                                             i
                                                                                                               ++
                                                                                                                 ) 
                                                                                                                   {
```

----------------------------------------

TITLE: Function Type Variable Declarations
DESCRIPTION: Variable declarations with function types that handle Base arrays, including arrow functions and Generic types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
var x319: (s: Base[]) => any = true ? n => { var n: Base[]; return null; } : undefined;
var x320: Genric<Base> = true ? { func: n => { return [d1, d2]; } } : undefined;
```

----------------------------------------

TITLE: Error Handling for JavaScript Files in TypeScript Compilation
DESCRIPTION: This snippet shows the error messages generated when TypeScript encounters JavaScript files. It emphasizes the necessity of enabling the 'allowJs' option for proper compilation of JavaScript files within a TypeScript project. The errors signify that the JavaScript files are being treated as part of the TypeScript project.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAtTypesPriority.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
error TS6504: File '/packages/a/node_modules/react/index.js' is a JavaScript file. Did you mean to enable the 'allowJs' option?\n  The file is in the program because:\n    Root file specified for compilation\nerror TS6504: File '/packages/a/node_modules/redux/index.js' is a JavaScript file. Did you mean to enable the 'allowJs' option?\n  The file is in the program because:\n    Root file specified for compilation\n\n!!! error TS6504: File '/packages/a/node_modules/react/index.js' is a JavaScript file. Did you mean to enable the 'allowJs' option?\n!!! error TS6504:   The file is in the program because:\n!!! error TS6504:     Root file specified for compilation\n!!! error TS6504: File '/packages/a/node_modules/redux/index.js' is a JavaScript file. Did you mean to enable the 'allowJs' option?\n!!! error TS6504:   The file is in the program because:\n!!! error TS6504:     Root file specified for compilation
```

----------------------------------------

TITLE: Type Narrowing with Boolean Checks for Intersection Types in TypeScript
DESCRIPTION: Function f1 demonstrates how TypeScript narrows a union of intersection types when checking if a value is truthy. The parameter x can be either T & string or T & undefined, and the type is correctly narrowed to T & string in the truthy branch.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionNarrowing.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f1<T>(x: T & string | T & undefined) {
    if (x) {
        x;  // Should narrow to T & string
    }
}
```

----------------------------------------

TITLE: Defining TypeScript Class with Generic Types and Inheritance
DESCRIPTION: This snippet shows a TypeScript class declaration with generic types that extends another class. It demonstrates the use of generics and inheritance in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_45

LANGUAGE: TypeScript
CODE:
```
module gabriellae {
    export class klossii<T0, T1> extends imperfecta.lasiurus<dogramacii.robustulus, caurinus.psilurus> {
    }
}
```

----------------------------------------

TITLE: Assertion Function with Return Type in TypeScript
DESCRIPTION: This snippet showcases an assertion function which also specifies a return type of 'asserts check', indicating it will only complete if 'check' is true. This helps in guaranteeing the correctness of conditions checked in subsequent code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assertionsAndNonReturningFunctions.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
/**
 * @param {boolean} check
 * @returns {asserts check}
*/
function assert2(check) {
    if (!check) throw new Error();
}
```

----------------------------------------

TITLE: Batch Methods Returning Specific Types in TypeScript Class
DESCRIPTION: This snippet shows several methods returning specific types, demonstrating TypeScript's ability to define multiple methods within a class. Each method maintains a specific return type, enhancing overall type safety.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_33

LANGUAGE: TypeScript
CODE:
```
colocolo(): quasiater.bobrinskoi { var x: quasiater.bobrinskoi; () => { var y = this; }; return x; }
```

LANGUAGE: TypeScript
CODE:
```
wolfi(): petrophilus.rosalia<Lanthanum.megalonyx, panglima.abidi<dogramacii.kaiseri, lavali.wilsoni>> { var x: petrophilus.rosalia<Lanthanum.megalonyx, panglima.abidi<dogramacii.kaiseri, lavali.wilsoni>>; () => { var y = this; }; return x; }
```

----------------------------------------

TITLE: Root Package.json Configuration
DESCRIPTION: This JSON snippet shows the package.json configuration for the root of the project, setting the type to 'module' which enables ES module behavior by default.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesTopLevelAwait(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Array Destructuring with Nested Arrays and Undefined
DESCRIPTION: This snippet demonstrates errors that arise when destructuring nested arrays from an empty array and from `undefined`. TypeScript identifies that `undefined` is not an array type and that an empty tuple has no element at the specified indices.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringArrayBindingPatternAndAssignment2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    var [[a0], [[a1]]] = []         // Error
         ~~~~
!!! error TS2461: Type 'undefined' is not an array type.
         ~~~~
!!! error TS2493: Tuple type '[]' of length '0' has no element at index '0'.
               ~~~~~~
!!! error TS2461: Type 'undefined' is not an array type.
               ~~~~~~
!!! error TS2493: Tuple type '[]' of length '0' has no element at index '1'.
    var [[a2], [[a3]]] = undefined  // Error
        ~~~~~~~~~~~~~~
```

----------------------------------------

TITLE: Implementing Object with Type Satisfaction and Record Extension
DESCRIPTION: Demonstrates an object implementation with type satisfaction patterns, where a method parameter 's' is causing an implicit 'any' type error. The object extends Record<string, unknown> and implements specific method signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeSatisfaction_contextualTyping2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
let obj: { f(s: string): void } & Record<string, unknown> = {
    f(s) { }, // "incorrect" implicit any on 's'
    g(s) { }
} satisfies { g(s: string): void } & Record<string, unknown>;

// This needs to not crash (outer node is not expression)
({ f(x) { } }) satisfies { f(s: string): void };
```

----------------------------------------

TITLE: Incorrect Type Assignment Examples
DESCRIPTION: Demonstrates type assignment errors when using incompatible string literals with defined type constraints
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/didYouMeanStringLiteral.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const t1: T1 = "strong";
const t2: T2 = "strong";
const t3: T3 = "strong";
```

----------------------------------------

TITLE: Creating Validated Slice Reducers in TypeScript
DESCRIPTION: This complex snippet defines types and a function for creating validated slice reducers. It uses conditional types to enforce a specific structure for reducer functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTypeFunctionObjectPropertyIntersection.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
type SliceCaseReducers<State> = Record<string, (state: State) => State | void>;

type ValidateSliceCaseReducers<S, ACR extends SliceCaseReducers<S>> = ACR & {
  [T in keyof ACR]: ACR[T] extends {
    reducer(s: S, action?: infer A): any;
  }
    ? {
        prepare(...a: never[]): Omit<A, "type">;
      }
    : {};
};

declare function createSlice<
  State,
  CaseReducers extends SliceCaseReducers<State>
>(options: {
  initialState: State | (() => State);
  reducers: ValidateSliceCaseReducers<State, CaseReducers>;
}): void;

export const clientSlice = createSlice({
  initialState: {
    username: "",
    isLoggedIn: false,
    userId: "",
    avatar: "",
  },
  reducers: {
    onClientUserChanged(state) {},
  },
});
```

----------------------------------------

TITLE: Importing Modules with Resolution Mode in TypeScript
DESCRIPTION: This code imports modules using 'assert' with the 'resolution-mode' option.  It imports both 'RequireInterface' and 'ImportInterface' from the 'pkg' module. It demonstrates both type imports and value imports and shows scenarios where resolution mode is incorrectly applied to non-type-only imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportModeDeclarationEmit2(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import type { RequireInterface } from "pkg" assert { "resolution-mode": "require" };
import type { ImportInterface } from "pkg" assert { "resolution-mode": "import" };

export interface LocalInterface extends RequireInterface, ImportInterface {}

import {type RequireInterface as Req} from "pkg" assert { "resolution-mode": "require" };
import {type ImportInterface as Imp} from "pkg" assert { "resolution-mode": "import" };
export interface Loc extends Req, Imp {}

export type { RequireInterface } from "pkg" assert { "resolution-mode": "require" };
export type { ImportInterface } from "pkg" assert { "resolution-mode": "import" };
```

----------------------------------------

TITLE: Defining Interface with String Index and Union Property (Error)
DESCRIPTION: This snippet defines an interface 'I3' with a string index signature allowing any property with a string key to have type 'string'. It also defines two specific properties 'foo' and 'foo2' using union types. The assignment of 'string | number' to 'foo' and 'e | number' to 'foo2' results in TS2411 errors because 'number' and 'e' are not subtypes of 'string'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionSubtypeIfEveryConstituentTypeIsSubtype.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
interface I3 {
        [x: string]: string;
        foo: string | number; // error numer is not subtype of string
        foo2: e | number; // error e and number both not subtype of string
    }
```

----------------------------------------

TITLE: Importing Greeter Module with Copyright Header
DESCRIPTION: TypeScript code showing a module import with a copyright header that fails due to module resolution configuration. The code attempts to create a Greeter instance and attach it to a DOM element.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/copyrightWithNewLine1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/*****************************
* (c) Copyright - Important
****************************/

import model = require("./greeter")
var el = document.getElementById('content');
var greeter = new model.Greeter(el);
/** things */
greeter.start();
```

----------------------------------------

TITLE: TypeScript Module Import with DOM Manipulation
DESCRIPTION: Demonstrates importing a Greeter module and using it with DOM manipulation. Shows a common module resolution error when trying to import './greeter' without proper TypeScript configuration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/copyrightWithoutNewLine1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/*****************************
* (c) Copyright - Important
****************************/
import model = require("./greeter")
var el = document.getElementById('content');
var greeter = new model.Greeter(el);
/** things */
greeter.start();
```

----------------------------------------

TITLE: Assigning Arrays to Readonly Tuples in TypeScript
DESCRIPTION: Illustrates assignments from arrays to readonly tuples, showcasing type compatibility issues and constraints related to array length and mutability.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/readonlyTupleAndArrayElaboration.errors.txt#2025-04-21_snippet_7

LANGUAGE: TypeScript
CODE:
```
const at1: readonly number[] = [1];
const at2: readonly [1] = at1;

const at3: readonly number[] = [1];
const at4: [1] = at3;

const at5: number[] = [1];
const at6: readonly [1] = at5;

const at7: number[] = [1];
const at8: [1] = at7;
```

----------------------------------------

TITLE: Type Mismatch When Spreading Object in TypeScript
DESCRIPTION: Reproduction of issue #36637 showing a type error when spreading an object and assigning a boolean to a property that expects a string array. The 'hi' property must be a string array but receives a boolean.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionPropertyCheck.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
interface Test {
  readonly hi?: string[]
}

function test<T extends object>(value: T): Test {
  return { ...value, hi: true }
}
```

----------------------------------------

TITLE: Chaining .then() with testFunction, sIPromise, nIPromise on an IPromise
DESCRIPTION: Chains the `.then()` method on an `IPromise<number>` instance with `testFunction` for fulfillment and `sIPromise` for rejection handler. This snippet results in a type error because `sIPromise` returns an `IPromise<string>`, which is not assignable to `IPromise<number>`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations3.errors.txt#2025-04-21_snippet_20

LANGUAGE: typescript
CODE:
```
var r10d = r10.then(testFunction, sIPromise, nIPromise); // error
                                      ~~~~~~~~~
```

----------------------------------------

TITLE: Function Assignment Compatibility Checking in TypeScript
DESCRIPTION: Demonstrates assigning functions to a variable with a specific function signature. TypeScript shows errors when the assigned function's parameter or return types are incompatible with the target type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithOverloads.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var g: (s1: string) => number;

g = f1; // OK 

g = f2; // Error

g = f3; // Error

g = f4; // Error
```

----------------------------------------

TITLE: TypeScript Functions with Implicit Any Types Causing Errors
DESCRIPTION: This code snippet demonstrates several cases where TypeScript reports errors due to implicit 'any' types in function parameters and return types. It includes examples with arrow functions and function expressions, showing both parameter type and return type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implicitAnyDeclareFunctionExprWithoutFormalType.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// these should be errors for implicit any parameter
var lambda = (l1) => { };       // Error at "l1"
var lambd2 = (ll1, ll2: string) => { }  // Error at "ll1"
var lamda3 = function myLambda3(myParam) { }
var lamda4 = () => { return null };

// these should be error for implicit any return type
var lambda5 = function temp() { return null; }
var lambda6 = () => { return null; }
var lambda7 = function temp() { return undefined; }
var lambda8 = () => { return undefined; }

// this shouldn't be an error
var lambda9 = () => { return 5; }
var lambda10 = function temp1() { return 5; }
```

----------------------------------------

TITLE: Importing and Handling Errors in TypeScript
DESCRIPTION: Illustrates a scenario where importing elements from modules './foo' and './foo2' results in errors due to missing exported members. It demonstrates the importance of matching import statements with actual exports in TypeScript modules, highlighting 'Bar', 'toString', 'a', 'b', 'd', and renamed 'toString' as 'foo2String' that are supposed to be imported but don't exist in the declared exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/namedImportNonExistentName.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    import { Bar, toString, foo } from './foo';
             ~~~
    foo();
    import { a, b, c, d, toString as foo2String } from './foo2';
```

----------------------------------------

TITLE: Invalid Readonly Property Assignment in Derived Class
DESCRIPTION: Class B extends A and attempts to reassign the readonly property 'x', which results in a compilation error as readonly properties cannot be modified after initialization.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/readonlyConstructorAssignment.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class B extends A {
    constructor(x: number) {
        super(x);
        // Fails, x is readonly
        this.x = 1;
    }
}
```

----------------------------------------

TITLE: Exporting Default Class in TypeScript
DESCRIPTION: TypeScript file 'a.ts' defining and exporting a default anonymous class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importHelpersWithImportOrExportDefaultNoTslib.3(esmoduleinterop=true,module=amd).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export default class { }
```

----------------------------------------

TITLE: Comparing Constrained Type Parameter with Literals in TypeScript
DESCRIPTION: Demonstrates type checking behavior when comparing a type parameter T (constrained to 'a' | 'b') with string literals. Shows both valid and invalid comparisons that trigger type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/compareTypeParameterConstrainedByLiteralToLiteral.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo<T extends "a" | "b">(t: T) {
    t === "a";  // Should be allowed
    t === "x";  // Should be error
}
```

----------------------------------------

TITLE: Type Assignment Error in Destructuring Number Array
DESCRIPTION: This snippet demonstrates the error that occurs when attempting to assign a string value to a parameter that is expected to be a number within a destructuring context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration4.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
function a6([a, b, c, ...x]: number[]) { }
    a6([1, 2, "string"]);                   // Error, parameter type is number[]
```

----------------------------------------

TITLE: Exporting Constants in TypeScript
DESCRIPTION: This snippet defines and exports two constants in a TypeScript file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace1(module=amd).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export const a = 1;
export const b = 2;
```

----------------------------------------

TITLE: Declaring and Accessing an Index Signature with Template Patterns
DESCRIPTION: This snippet demonstrates the declaration of an index signature that uses a template literal pattern, where the keys follow the pattern `${string}xxx${string}` and `${string}yyy${string}`. It attempts to access various properties to show valid and invalid cases.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indexSignatures1.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
declare let combo2: { [x: `${string}xxx${string}` & `${string}yyy${string}`]: string };

const x7 = combo2['axxxbyyyc'];
const x8 = combo2['ayyyxxxbc'];
const x9 = combo2['axxxbbbyc'];  // Error
               ~~~~~~~~~~~~~~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type '"axxxbbbyc"' can't be used to index type '{ [x: `${string}xxx${string}` & `${string}yyy${string}`]: string; }'.
!!! error TS7053:   Property 'axxxbbbyc' does not exist on type '{ [x: `${string}xxx${string}` & `${string}yyy${string}`]: string; }'.
```

----------------------------------------

TITLE: TypeScript DOM Library Definition
DESCRIPTION: Type definition file defining the ABC interface with a string property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/libTypeScriptOverrideSimpleConfig.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
interface ABC { abc: string }
```

----------------------------------------

TITLE: Defining JSX Elements with TypeScript and Preact
DESCRIPTION: This snippet demonstrates how to define JSX elements in TypeScript, utilizing props and handling types for the JSX elements. The snippet will produce an error if the required module path for 'preact/jsx-dev-runtime' is not found, which indicates that the appropriate types are missing. It defines two JSX elements, 'a' and 'b', utilizing an object 'props' containing the property 'answer'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxJsxsCjsTransformKeyPropCustomImport(jsx=react-jsxdev).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
"/// <reference path=\"/.lib/react16.d.ts\" />\nconst props = { answer: 42 };\nconst a = <div key=\"foo\" {...props}>text</div>;\nconst b = <div {...props} key=\"bar\">text</div>;\nexport {};"
```

----------------------------------------

TITLE: Skill Assignment with Default Values in TypeScript
DESCRIPTION: This snippet demonstrates how skills are assigned to the `primarySkillA` and `secondarySkillA` properties of a Robot object using default values if no skills are provided. It shows the TypeScript code along with its corresponding emitted JavaScript code. The snippet is part of testing skill assignment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringParametertArrayBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
  >                                                                            primarySkillA = "primary",
  >                                                                            secondarySkillA = "secondary"
  >                                                                        ] = 
12>                                                                                             [
13>                                                                                              "noSkill"
14>                                                                                                       , 
15>                                                                                                         "noSkill"
16>                                                                                                                  ]
17>                                                                                                                   
18>                                                                                                                        
19>                                                                                                                          primarySkillA = "primary"
20>                                                                                                                                    
21>                                                                                                                                      primarySkillA
22>                                                                                                                                                    = 
23>                                                                                                                                                                      "primary"
24>                                                                                                                                                                               
25>                                                                                                                                                                                    ,
  >                                                                                                                                                                                        
26>                                                                                                                                                                                      secondarySkillA = "secondary"
27>                                                                                                                                                                                                
28>                                                                                                                                                                                                  secondarySkillA
29>                                                                                                                                                                                                                  = 
30>                                                                                                                                                                                                                                    "secondary"
31>                                                                                                                                                                                                                                               
```

----------------------------------------

TITLE: Demonstrating Type Inference Error in TypeScript Generic Function
DESCRIPTION: This code snippet defines a generic function 'g' and attempts to call it with conflicting argument types, resulting in a compilation error. The error occurs because the second argument '3' is not assignable to the inferred type of the first argument, which is a string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeInferenceConflictingCandidates.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare function g<T>(a: T, b: T, c: (t: T) => T): T;

g("", 3, a => a);
```

----------------------------------------

TITLE: Package Exports Configuration for Mixed Module Formats
DESCRIPTION: This JSON snippet defines package exports for different module formats (CJS, MJS, JS) using file extensions to distinguish between them.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExports(module=node16).errors.txt#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
    "name": "inner",
    "private": true,
    "exports": {
        "./cjs/*": "./*.cjs",
        "./mjs/*": "./*.mjs",
        "./js/*": "./*.js"
    }
}
```

----------------------------------------

TITLE: Defining Base and Derived Interfaces in TypeScript
DESCRIPTION: This snippet defines a base interface 'Base' and two derived interfaces 'Derived' and 'Derived2'. It demonstrates interface inheritance in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithStringIndexer4.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Base { foo: string; }
interface Derived extends Base { bar: string; }
interface Derived2 extends Derived { baz: string; }
```

----------------------------------------

TITLE: Handling Incomplete Data Structure Inference in TypeScript
DESCRIPTION: This snippet reproduces an error scenario where TypeScript inference fails due to missing required properties in an object passed as a parameter. The 'prop' property is required by the 'ListProps' interface, but is missing in the object passed to the 'Component' function. TypeScript throws an error as a result. This requires an understanding of interface constraints in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferenceFromIncompleteSource.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface ListProps<T, K extends keyof T> {
  items: T[];
  itemKey: K;
  prop: number;
}

declare const Component: <T, K extends keyof T>(x: ListProps<T, K>) => void;

Component({items: [{name:' string'}], itemKey: 'name' });
```

----------------------------------------

TITLE: Definite Assignment Assertion with Union Types and Control Flow Analysis
DESCRIPTION: Demonstrates using the definite assignment assertion (`!`) on a local variable with a union type and how control flow analysis correctly narrows the type after checks.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/definiteAssignmentAssertions.errors.txt#_snippet_6

LANGUAGE: TypeScript
CODE:
```
function f2() {
    let x!: string | number;
    if (typeof x === "string") {
        let s: string = x;
    }
    else {
        let n: number = x;
    }
}
```

----------------------------------------

TITLE: Defining Action2 Type with Optional Payload
DESCRIPTION: This snippet defines `Action2` which is similar to the `Action` type but includes `undefined` as a possible type for the `payload`. This introduces the need to check if `payload` exists before using it, preventing potential errors if it is `undefined`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
    type Action2 =
        | { kind: 'A', payload: number | undefined }
        | { kind: 'B', payload: string | undefined };

```

----------------------------------------

TITLE: TypeScript Numeric Property Type Mismatch
DESCRIPTION: Demonstrates a type error that occurs when trying to assign a number value (3) to a property '0' that is explicitly typed as string in interface A. The TypeScript compiler catches this type mismatch during compilation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectLiteralWithNumericPropertyName.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface A {
    0: string;
}
var x: A = {
    0: 3
};
```

----------------------------------------

TITLE: Implementing a Greeter Class with Decorators
DESCRIPTION: This snippet demonstrates the implementation of a Greeter class using TypeScript decorators. It includes class, property, and parameter decorators applied to various members of the class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDecorators.sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
var Greeter = /** @class */ (function () {
    function Greeter(greeting) {
        var b = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            b[_i - 1] = arguments[_i];
        }
        this.greeting = greeting;
    }
    Greeter.prototype.greet = function () {
        return "<h1>" + this.greeting + "</h1>";
    };
    Greeter.prototype.fn = function (x) {
        return this.greeting;
    };
    Object.defineProperty(Greeter.prototype, "greetings", {
        get: function () {
            return this.greeting;
        }
    });
    return Greeter;
}());
```

----------------------------------------

TITLE: React Component with Preserved JSX Comments
DESCRIPTION: Example of a React component demonstrating different comment styles within JSX expressions, including inline comments and block comments. Shows error TS2792 due to missing react/jsx-dev-runtime module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/commentsOnJSXExpressionsArePreserved(jsx=react-jsxdev,module=system,moduledetection=legacy).errors.txt#2025-04-21_snippet_0

LANGUAGE: TSX
CODE:
```
namespace JSX {}
class Component {
    render() {
        return <div>
            {/* missing */}
            {null/* preserved */}
            {
                // ??? 1
            }
            { // ??? 2
            }
            {// ??? 3
            }
            {
                // ??? 4
            /* ??? 5 */}
        </div>;
    }
}
```

----------------------------------------

TITLE: Tuple Union Types and Usage
DESCRIPTION: This snippet showcases the use of tuple unions and their handling within function definitions. It features custom types 'ArgsUnion' and 'TupleUnionFunc' to illustrate function implementations that work with multiple possible tuple types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/restTuplesFromContextualTypes.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
// Repro from #29833

type ArgsUnion = [number, string] | [number, Error];
type TupleUnionFunc = (...params: ArgsUnion) => number;

const funcUnionTupleNoRest: TupleUnionFunc = (num, strOrErr) => {
  return num;
};

const funcUnionTupleRest: TupleUnionFunc = (...params) => {
  const [num, strOrErr] = params;
  return num;
};
```

----------------------------------------

TITLE: Incorrect Delete Operator Usage in TypeScript
DESCRIPTION: This code demonstrates typical errors when using the delete operator incorrectly in TypeScript. The delete operator must be used on object property references, not on variables directly. Additionally, delete returns a boolean value, not a number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/deleteOperator1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var a;
var x: boolean = delete a;
var y: any = delete a;
var z: number = delete a;
```

----------------------------------------

TITLE: Defining ObjectIterator and DictionaryIterator Types in TypeScript
DESCRIPTION: These types define function signatures for iterating over objects and dictionaries. They are used as callback types in functions like mapValues.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emptyObjectNotSubtypeOfIndexSignatureContainingObject2.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
type ObjectIterator<TObject, TResult> = (
  value: TObject[keyof TObject],
  key: string,
  collection: TObject
) => TResult;

type DictionaryIterator<T, TResult> = ObjectIterator<Dictionary<T>, TResult>;
```

----------------------------------------

TITLE: Property Check in String-typed Object - TypeScript
DESCRIPTION: Function f12 verifies property 'a' in an object, signaling potential run-time type checks that may depend on the structure of the input.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=true).errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
function f12(x: { a: string }) {
    if ("a" in x) {
        x;
    }
    else {
        x;
    }
}
```

----------------------------------------

TITLE: Function Overload Missing Implementation - TypeScript
DESCRIPTION: This code snippet demonstrates a TypeScript function overload declaration without an immediately following implementation. This causes a TS2391 error, indicating that the function implementation is missing or not placed immediately after the declaration. The error highlights the requirement for an implementation to be provided after declaring a function's overload signature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionOverloads3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    function foo():string;
             ~~~
```

----------------------------------------

TITLE: Defining and Using Function with Intersection Type (TypeScript)
DESCRIPTION: This snippet defines a function 'test1' with an argument typed as an intersection of object types. It then demonstrates how to call this function with an object literal that matches the expected type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTypeBasedOnIntersectionWithAnyInTheMix4.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare function test1(
  arg: { a: (arg: number) => void } & { [k: string]: (arg: any) => void },
): unknown;

test1({
  a: (arg) => {},
  b: (arg) => {},
});
```

----------------------------------------

TITLE: Incorrect decorator usage with 'Input' in TypeScript
DESCRIPTION: This snippet demonstrates an error (TS1329) where the 'Input' decorator is used without parentheses, but it requires arguments. The compiler suggests calling the decorator function first by adding parentheses.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/potentiallyUncalledDecorators.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    // Angular-style Input/Output API:
    declare function Input(bindingPropertyName?: string): any;
    class FooComponent {
        @Input foo: string;
        ~~~~~~~
!!! error TS1329: 'Input' accepts too few arguments to be used as a decorator here. Did you mean to call it first and write '@Input()'?
    }

```

----------------------------------------

TITLE: Type Definitions with Circular Import
DESCRIPTION: TypeScript declaration file with circular reference and ESM import errors
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExportsTrailers(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// cjs format file
import * as cjs from "inner/cjs/index.cjs";
import * as mjs from "inner/mjs/index.mjs";
import * as type from "inner/js/index.js";
export { cjs };
export { mjs };
export { type };
```

----------------------------------------

TITLE: JavaScript Class with TypeScript 'this' Context Errors and Fixes
DESCRIPTION: A JavaScript Test class that demonstrates TypeScript errors related to 'this' context in callback functions. The class shows both problematic implementations that generate errors and the fixed versions using JSDoc '@this' annotations. The file also shows error messages generated by TypeScript when 'this' implicitly has type 'any' in callback functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisInFunctionCallJs.errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
class Test {
    constructor() {
        /** @type {number[]} */
        this.data = [1, 2, 3];
    }

    finderRaw() {
        this.data.find(function (d) {
            return d === this.data.length
                         ~~~~
!!! error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
!!! related TS2738 /a.js:8:24: An outer value of 'this' is shadowed by this container.
        })
    }

    forEacherRaw() {
        this.data.forEach(function (d) {
            console.log(d === this.data.length)
                              ~~~~
!!! error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
!!! related TS2738 /a.js:14:27: An outer value of 'this' is shadowed by this container.
        })
    }

    forEacher() {
        this.data.forEach(
        /** @this {Test} */
        function (d) {
            console.log(d === this.data.length)
        }, this)
    }

    finder() {
        this.data.find(
        /** @this {Test} */
        function (d) {
            return d === this.data.length
        }, this)
    }
}
```

----------------------------------------

TITLE: Possible Null Object Access Error in TypeScript
DESCRIPTION: This snippet shows a potential runtime error detected by TypeScript due to the possibility of accessing a property on a null object. The code attempts to call the `push` method on the `twices` array without ensuring that `this.twices` is not null. Since `this.twices` is initialized to `null` at one point, TypeScript throws error TS2531, warning that the object might be null.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeFromJSConstructor.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
        this.twices.push(1) // error: Object is possibly null
        ~~~~~~~~~~~
!!! error TS2531: Object is possibly 'null'.

```

----------------------------------------

TITLE: Configuration Preparation with Contextual Signature
DESCRIPTION: Configuration preparation function using a contextual type signature with arrow function syntax, handling optional additionalFiles
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration9(strict=true).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export const prepareConfigWithContextualSignature = ({
    additionalFiles: {
        json = []
    } = {}
} = {})=>  {
    json // string[]
}
```

----------------------------------------

TITLE: Invalid JSX Attribute Names in TypeScript
DESCRIPTION: Demonstrates TypeScript interface definitions for JSX elements and examples of invalid attribute naming patterns that generate compiler errors. Shows how TypeScript catches syntax errors with numeric literals and invalid identifiers in JSX attributes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeInvalidNames.errors.txt#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
declare module JSX {
    interface Element { }
    interface IntrinsicElements {
        test1: { "data-foo"?: string };
        test2: { "data-foo"?: string };
    }
}

// Invalid names
<test1 32data={32} />;
<test2 -data={32} />;
```

----------------------------------------

TITLE: CommonJS Module with Invalid ESM Import
DESCRIPTION: CJS format file showing an error when trying to import an ES module using require syntax
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExportsTrailers(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// cjs format file
import * as cjsi from "inner/cjs/index.cjs";
import * as mjsi from "inner/mjs/index.mjs";
import * as typei from "inner/js/index.js";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: Defining Shape Union Types in TypeScript
DESCRIPTION: This code snippet defines TypeScript types for three geometric shapes: Square, Rectangle, and Circle, and a union type 'Shape' that can be one of these shapes. It attempts to instantiate a Shape with an error due to an unknown property 'x' for a Square type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/discriminatedUnionErrorMessage.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
type Square = { kind: "sq", size: number }
type Rectangle = { kind: "rt", x: number, y: number }
type Circle = { kind: "cr", radius: number }
type Shape =
    | Square
    | Rectangle
    | Circle;
let shape: Shape = {
    kind: "sq",
    x: 12,
    ~
!!! error TS2353: Object literal may only specify known properties, and 'x' does not exist in type 'Square'.
    y: 13,
}
```

----------------------------------------

TITLE: Class Method Overload Signatures in TypeScript
DESCRIPTION: Declaration of a class with method overload signatures that may trigger compatibility errors. The method has a specialized signature with string literal 'a' and a more general implementation signature that accepts 'number'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/specializedSignatureIsNotSubtypeOfNonSpecializedSignature.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class C {
    foo(x: 'a');
    foo(x: number);
    foo(x: any) { }
}
```

----------------------------------------

TITLE: Demonstrating Top-Level 'await' Usage in TypeScript
DESCRIPTION: This snippet shows various uses of top-level 'await' expressions, which are causing compiler errors due to incorrect module and target settings. It also includes examples of valid 'await' usage in class methods and object literals.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/topLevelAwait.1(module=system,target=es2015).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export const x = 1;
await x;

// reparse element access as await
await [x];
await [x, x];

// reparse call as await
declare function f(): number;
await (x);
await (f(), x);
await <number>(x);
await <number>(f(), x);

// reparse tagged template as await
await ``;
await <string> ``;

// member names should be ok
class C1 {
    await() {}
}
class C2 {
    get await() { return 1; }
    set await(value) { }
}
class C3 {
    await = 1;
}
({
    await() {}
});
({
    get await() { return 1 },
    set await(value) { }
});
({
    await: 1
});

// property access name should be ok
C1.prototype.await;

// await in decorators
declare const dec: any;
@(await dec)
class C {
}

// await allowed in aliased import
import { await as _await } from "./other";

// newlines
// await in throw
throw await
    1;

// await in var
let y = await
    1;

// await in expression statement;
await
    1;
```

----------------------------------------

TITLE: Defining Classes and Instances in TypeScript
DESCRIPTION: This snippet defines a class `m1_c1` with a property and creates an instance, returning it from a function. It illustrates basic class construction and instance management in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootAbsolutePathMultifolderSpecifyOutputFile/node/mapRootAbsolutePathMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Working with Generators and Array Iterators in TypeScript
DESCRIPTION: This snippet shows using generator functions and array iterators with map operations. It demonstrates how generator functions can yield values and how array iterators can be transformed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/builtinIterator.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function* gen() {
  yield 0;
}

const mappedGen = gen().map(x => x === 0 ? "zero" : "other");

const mappedValues = [0, 1, 2].values().map(x => x === 0 ? "zero" : "other");
```

----------------------------------------

TITLE: Importing and Using Exported Types and Values in TypeScript
DESCRIPTION: This snippet shows the usage of imported entities, demonstrating errors when trying to use type-only exports as values. It highlights the difference between type exports and value exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace5.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { A, B as C, X } from "./b";
let _: A = new A();   // Error
let __: C = new C();  // Error
let ___: X = new X(); // Ok
```

----------------------------------------

TITLE: Object Destructuring Assignment with Default Values (TypeScript)
DESCRIPTION: Examples of object destructuring assignment with default values, demonstrating both shorthand and longhand property syntax. Includes examples of type errors when assigning number values to string types and nested destructuring patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/shorthandPropertyAssignmentsInDestructuring_ES6.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
(function() {
	let y;
	({ y = 5 } = { y: 1 })
});

(function() {
	let y;
	({ y:y = 5 } = { y: 1 })
});

(function() {
	let y0: number;
	({ y0 = 5 } = { y0: 1 })
});

(function() {
	let y0: number;
	({ y0:y0 = 5 } = { y0: 1 })
});

(function() {
	let y1: string;
	({ y1 = 5 } = {})
});

(function() {
	let y1: string;
	({ y1:y1 = 5 } = {})
});

(function() {
	let y2: string, y3: { x: string };
	({ y2 = 5, y3 = { x: 1 } } = {})
});

(function() {
	let y2: string, y3: { x: string };
	({ y2:y2 = 5, y3:y3 = { x: 1 } } = {})
});

(function() {
	let y4: number, y5: { x: number };
	({ y4 = 5, y5 = { x: 1 } } = {})
});

(function() {
	let y4: number, y5: { x: number };
	({ y4:y4 = 5, y5:y5 = { x: 1 } } = {})
});


(function() {
	let z;
	({ z = { x: 5 } } = { z: { x: 1 } });
});


(function() {
	let z;
	({ z:z = { x: 5 } } = { z: { x: 1 } });
});
```

----------------------------------------

TITLE: Defining Generic Classes with Exclusive Methods in TypeScript
DESCRIPTION: This snippet defines two generic classes, NumClass and StrClass, each with a type-specific exclusive method. It also includes a type guard function to distinguish between these classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/quickinfoTypeAtReturnPositionsInaccurate.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class NumClass<T extends number> {
    private value!: T;
    public get(): T {
        return this.value;
    }
    public numExclusive() { }
}

class StrClass<T extends string> {
    private value!: T;
    public get(): T {
        return this.value;
    }
    public strExclusive() { }
}

const isNumClass = <Item extends NumClass<number> | StrClass<string>> (
        item: Item
    ): item is Extract<Item, NumClass<any>> => {
        return (item instanceof NumClass);
    }
```

----------------------------------------

TITLE: Incorrectly Calling Generic Constructor Function (Interface)
DESCRIPTION: This snippet shows the error when a constructor function is defined using an interface and subsequently called without using the 'new' keyword. TypeScript expects 'new' to be used when instantiating the class. The error 'Value of type 'I1<T>' is not callable. Did you mean to include 'new'?' suggests that the code is attempting to invoke the function directly instead of using it as a constructor.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericConstructorFunction1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    interface I1<T> { new (arg: T): Date };
    function f2<T>(args: T) {
        var v1: { [index: string]: I1<T> };
        var v2 = v1['test'];
        var y = v2(args); 
                ~~~~~~~~
!!! error TS2348: Value of type 'I1<T>' is not callable. Did you mean to include 'new'?
        return new v2(args); // used to give error
    }
```

----------------------------------------

TITLE: Importing Modules in TypeScript MTS (ESM) Format
DESCRIPTION: This code snippet demonstrates module imports in a TypeScript .mts file (explicit ESM format), showing the same pattern of importing from excluded and valid module paths.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExportsExclude(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// esm format file
import * as cjsi from "inner/cjs/exclude/index";
import * as mjsi from "inner/mjs/exclude/index";
import * as typei from "inner/js/exclude/index";
cjsi;
mjsi;
typei;
import * as cjsi2 from "inner/cjs/index";
import * as mjsi2 from "inner/mjs/index";
import * as typei2 from "inner/js/index";
cjsi2;
mjsi2;
typei2;
```

----------------------------------------

TITLE: Defining Class A and Incorrect Implementation of Class B
DESCRIPTION: This snippet demonstrates the declaration of a class 'A' with a constructor initializing a property 'x', and an incorrect implementation attempt in class 'B' that fails to implement 'A' properly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocImplements_properties.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
class A { constructor() { this.x = 0; } }
/** @implements A*/
class B {}
```

----------------------------------------

TITLE: Function with First Element Destructuring
DESCRIPTION: Implements a function that destructures the first element of a Robot array parameter into numberB variable.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringParametertArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
function foo2(_a) {
    var numberB = _a[0];
    console.log(numberB);
}
```

----------------------------------------

TITLE: Promise Chain Type Checking - Mixed Promise Types
DESCRIPTION: Examples of promise chains mixing IPromise and Promise interfaces, showing type compatibility errors between different promise implementations and their callbacks.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations2.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
var r9: IPromise<number>;
var r9a = r9.then(testFunction9, testFunction9, testFunction9);
var r9b = r9.then(sIPromise, sIPromise, sIPromise);
var r9c = r9.then(nIPromise, nIPromise, nIPromise);
var r9d = r9.then(testFunction, sIPromise, nIPromise);
var r9e = r9.then(testFunction, nIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise);
```

----------------------------------------

TITLE: Underscore.js Function Utilities in TypeScript
DESCRIPTION: This snippet demonstrates Underscore.js function utilities in TypeScript, including function binding, memoization, debouncing, and throttling. It shows how to modify function behavior and optimize performance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
var func = function (greeting) { return greeting + ': ' + this.name };
var func2 = _.bind(func, { name: 'moe' }, 'hi');
func2();

var buttonView = {
    label: 'underscore',
    onClick: function () { alert('clicked: ' + this.label); },
    onHover: function () { alert('hovering: ' + this.label); }
};
_.bindAll(buttonView);

var fibonacci = _.memoize(function (n) {
    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
});

var updatePosition = () => alert('updating position...');
var throttled = _.throttle(updatePosition, 100);

var calculateLayout = () => alert('calculating layout...');
var lazyLayout = _.debounce(calculateLayout, 300);

var createApplication = () => alert('creating application...');
var initialize = _.once(createApplication);
```

----------------------------------------

TITLE: TypeScript Object Destructuring with Default Values
DESCRIPTION: Complex variable assignment that extracts properties from an object, providing default values when properties are undefined. Handles nested object destructuring with fallback values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementNestedObjectBindingPatternWithDefaultValues.sourcemap.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
var _k = { name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } }, _l = _k.name, nameC = _l === void 0 ? "noNameSpecified" : _l, _m = _k.skills, _o = _m === void 0 ? { primary: "noSkill", secondary: "noSkill" } : _m, _p = _o.primary, primaryB = _p === void 0 ? "noSkill" : _p, _q = _o.secondary, secondaryB = _q === void 0 ? "noSkill" : _q;
```

----------------------------------------

TITLE: Demonstrating TypeScript Errors in JSX Usage
DESCRIPTION: This snippet shows incorrect usage of the custom JSX elements, resulting in TypeScript errors due to type mismatches and missing required properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution6.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
// Error
<test1 s />;
<test1 n='true' />;
<test2 />;
```

----------------------------------------

TITLE: Variable Assignment with Default Values in TypeScript
DESCRIPTION: This snippet handles variable assignment by destructuring _34 array elements. It extracts values and assigns them default values if not present. This is useful for initializing variables with safe values to avoid issues during processing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_27

LANGUAGE: typescript
CODE:
```
    var _35 = _34[_33], _36 = _35[0], numberA2 = _36 === void 0 ? -1 : _36, _37 = _35[1], nameA2 = _37 === void 0 ? "noName" : _37, _38 = _35[2], skillA2 = _38 === void 0 ? "skill" : _38;
```

----------------------------------------

TITLE: Demonstrating Type Parameter Assignment Errors in TypeScript Generic Functions
DESCRIPTION: This code demonstrates errors when assigning between functions that return different generic type parameters. TypeScript prevents assigning between functions returning T and U because the types could be unrelated without explicit type constraints.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeParameterArgumentEquivalence4.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo<T,U>() {
    var x: (item) => U;
    var y: (item) => T;
    x = y;  // Should be an error
    y = x;  // Shound be an error
}
```

----------------------------------------

TITLE: Defining WizardStepProps Interface in TypeScript
DESCRIPTION: This snippet defines the WizardStepProps interface, which includes an optional 'wizard' property of type Wizard. This interface is used in the Wizard class's 'steps' getter method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/trivialSubtypeReductionNoStructuralCheck.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export interface WizardStepProps {
  wizard?: Wizard;
}
```

----------------------------------------

TITLE: Module Definition with Class and Function Exports
DESCRIPTION: Defines a module with exported class, function, and variable declarations showing typical TypeScript module patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privacyImportParseErrors.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export module m2_M1_public {
    export class c1 {
    }
    export function f1() {
        return new c1;
    }
    export var v1 = c1;
    export var v2: c1;
}
```

----------------------------------------

TITLE: Demonstrating Errors in Type Assignments in TypeScript Functions
DESCRIPTION: This comprehensive snippet demonstrates multiple scenarios where assignments between types 'T' and 'U' lead to compile-time errors. It explores combinations involving various data types, null, and undefined, showcasing the richness of TypeScript's type system and the potential pitfalls.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypesOfTypeParameter.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// errors throughout
function f2<T, U>(x: T, y: U) {
    var r0 = true ? x : null;
    var r0 = true ? null : x;

    var u: typeof undefined;
    var r0b = true ? u : x;
    var r0b = true ? x : u;

    var r1 = true ? 1 : x; 
    var r1 = true ? x : 1;

    var r2 = true ? '' : x;
    var r2 = true ? x : '';

    var r3 = true ? true : x;
    var r3 = true ? x : true;

    var r4 = true ? new Date() : x;
    var r4 = true ? x : new Date();

    var r5 = true ? /1/ : x;
    var r5 = true ? x : /1/;

    var r6 = true ? { foo: 1 } : x;
    var r6 = true ? x : { foo: 1 };

    var r7 = true ? () => { } : x;
    var r7 = true ? x : () => { };

    var r8 = true ? <T>(x: T) => { return x } : x;
    var r8b = true ? x : <T>(x: T) => { return x }; // type parameters not identical across declarations

    var i1: I1;
    var r9 = true ? i1 : x;
    var r9 = true ? x : i1;

    var c1: C1;
    var r10 = true ? c1 : x;
    var r10 = true ? x : c1;

    var c2: C2<number>;
    var r12 = true ? c2 : x;
    var r12 = true ? x : c2;

    var r13 = true ? E : x;
    var r13 = true ? x : E;

    var r14 = true ? E.A : x;
    var r14 = true ? x : E.A;

    var af: typeof f;
    var r15 = true ? af : x;
    var r15 = true ? x : af;

    var ac: typeof c;
    var r16 = true ? ac : x;
    var r16 = true ? x : ac;

    function f17<T>(a: T) {
        var r17 = true ? x : a;
        var r17 = true ? a : x;
    }

    function f18<T, U extends T>(a: U) {
        var r18 = true ? x : a;
        var r18 = true ? a : x;
    }

    var r19 = true ? new Object() : x; // BCT is Object
    var r19 = true ? x : new Object(); // BCT is Object

    var r20 = true ? {} : x; // ok
    var r20 = true ? x : {}; // ok
}
```

----------------------------------------

TITLE: Destructuring and Default Values in TypeScript
DESCRIPTION: This snippet showcases the use of destructuring to extract properties from an object with default values for variables. It initializes a trimmer object and extracts its name and skills.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_28

LANGUAGE: typescript
CODE:
```
>>>for (var _10 = { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }, _11 = _10.name, nameA = _11 === void 0 ? "noName" : _11, _12 = _10.skills, _13 = _12 === void 0 ? { primary: "none", secondary: "none" } : _12, _14 = _13.primary, primaryA = _14 === void 0 ? "primary" : _14, _15 = _13.secondary, secondaryA = _15 === void 0 ? "secondary" : _15, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Object Literal Type Checking with Optional Properties
DESCRIPTION: Shows type checking behavior with optional properties and union types, including error cases for incompatible assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectLiteralNormalization.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
let a2 = [{ a: 1, b: 2 }, { a: "abc" }, {}][0];
a2.a;  // string | number | undefined
a2.b;  // number | undefined
a2 = { a: 10, b: 20 };
a2 = { a: "def" };
a2 = {};
a2 = { a: "def", b: 20 };  // Error
a2 = { a: 1 };  // Error
```

----------------------------------------

TITLE: ESM Static Imports Without Extensions (Error Cases)
DESCRIPTION: This snippet demonstrates static ESM imports without explicit file extensions, resulting in TypeScript errors. It highlights the errors that occur when relative import paths lack file extensions under `node16` or `nodenext` module resolution. It covers imports from the current directory, subdirectories, and nested subdirectories, intentionally omitting extensions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=nodenext).errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import * as m13 from "./";
    import * as m14 from "./index";
    import * as m15 from "./subfolder";
    import * as m16 from "./subfolder/";
    import * as m17 from "./subfolder/index";
    import * as m18 from "./subfolder2";
    import * as m19 from "./subfolder2/";
    import * as m20 from "./subfolder2/index";
    import * as m21 from "./subfolder2/another";
    import * as m22 from "./subfolder2/another/";
    import * as m23 from "./subfolder2/another/index";
```

----------------------------------------

TITLE: 'in' Operator with Object Type
DESCRIPTION: Demonstrates safe usage of the 'in' operator with an 'object' type. The code checks for the existence of properties 'a', 'b', and 'c' before accessing them, but the initial check for 'a' alone is still valid because 'x' is already known to be an object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=false).errors.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
"function f2(x: object) {\n    if ("a" in x) {\n        x.a;\n    }\n    if ("a" in x && "b" in x && "c" in x) {\n        x.a;\n        x.b;\n        x.c;\n    }\n}"
```

----------------------------------------

TITLE: Incorrect Function Declaration with Arrow Syntax in TypeScript
DESCRIPTION: This code snippet demonstrates an incorrect use of arrow function syntax with a regular function declaration, causing a TypeScript parsing error. The correct syntax should use either a function body with curly braces or a proper arrow function declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserErrantEqualsGreaterThanAfterFunction1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function f() => 4;
```

----------------------------------------

TITLE: Demonstrating Comparison Operator Errors in TypeScript
DESCRIPTION: Shows various comparison operations between variables of types A1 and B1, all of which result in TypeScript errors due to incompatible types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/comparisonOperatorWithNoRelationshipObjectsOnOptionalProperty.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
// operator <
var ra1 = a < b;
var ra2 = b < a;

// operator >
var rb1 = a > b;
var rb2 = b > a;

// operator <=
var rc1 = a <= b;
var rc2 = b <= a;

// operator >=
var rd1 = a >= b;
var rd2 = b >= a;

// operator ==
var re1 = a == b;
var re2 = b == a;

// operator !=
var rf1 = a != b;
var rf2 = b != a;

// operator ===
var rg1 = a === b;
var rg2 = b === a;

// operator !==
var rh1 = a !== b;
var rh2 = b !== a;
```

----------------------------------------

TITLE: Entry Module with Module Imports and Exports
DESCRIPTION: Imports m3 module and exports an object with numeric and string properties, including the imported person object
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesMaxDepthIncreased/amd/nodeModulesMaxDepthIncreased.errors.txt#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
var m3 = require("m3");

module.exports = {
	"a": 42,
	"b": "hello, world",
	"person": m3.person
};
```

----------------------------------------

TITLE: Defining Abstract Base Class and Derived Classes in TypeScript
DESCRIPTION: This snippet defines an abstract base class 'BaseClass' with an abstract property 'bar'. It then creates two derived classes: 'Broken' and 'IncorrectlyExtends'. The 'Broken' class is later extended through interface merging.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mergedInheritedMembersSatisfyAbstractBase.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
abstract class BaseClass {
  abstract bar: number;
}

class Broken extends BaseClass {}

// declaration merging should satisfy abstract bar
interface IGetters {
  bar: number;
}
interface Broken extends IGetters {}

new Broken().bar

class IncorrectlyExtends extends BaseClass {}
interface IncorrectGetters {
  bar: string;
}
interface IncorrectlyExtends extends IncorrectGetters {}
```

----------------------------------------

TITLE: Creating HTML Elements Using Overloaded createElement
DESCRIPTION: This snippet demonstrates the usage of the previously defined 'createElement' method. It shows the correct instantiation of HTML elements using valid type assignments as well as scenarios that cause type mismatch errors. This part exemplifies TypeScript's type-checking capabilities to enforce type correctness.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadingOnConstants1.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var d2: Document2;

// these are ok
var htmlElement: Base = d2.createElement("yo")
var htmlCanvasElement: Derived1 = d2.createElement("canvas");
var htmlDivElement: Derived2 = d2.createElement("div");
var htmlSpanElement: Derived3 = d2.createElement("span");

// these are errors
var htmlElement2: Derived1 = d2.createElement("yo")
    ~~~~~~~~~~~~
!!! error TS2741: Property 'bar' is missing in type 'Base' but required in type 'Derived1'.
!!! related TS2728 overloadingOnConstants1.ts:2:31: 'bar' is declared here.
var htmlCanvasElement2: Derived3 = d2.createElement("canvas");
    ~~~~~~~~~~~~~~~~~~
!!! error TS2741: Property 'biz' is missing in type 'Derived1' but required in type 'Derived3'.
!!! related TS2728 overloadingOnConstants1.ts:4:31: 'biz' is declared here.
var htmlDivElement2: Derived1 = d2.createElement("div");
    ~~~~~~~~~~~~~~~
!!! error TS2741: Property 'bar' is missing in type 'Derived2' but required in type 'Derived1'.
!!! related TS2728 overloadingOnConstants1.ts:2:31: 'bar' is declared here.
var htmlSpanElement2: Derived1 = d2.createElement("span");
    ~~~~~~~~~~~~~~~~
!!! error TS2741: Property 'bar' is missing in type 'Derived3' but required in type 'Derived1'.
!!! related TS2728 overloadingOnConstants1.ts:2:31: 'bar' is declared here.
```

----------------------------------------

TITLE: TextBox Class Without SelectableControl Interface - TypeScript
DESCRIPTION: Defines the 'TextBox' class which fails to implement 'SelectableControl' correctly, as it needs to implement 'select()'. This snippet illustrates the necessity for subclasses to comply with their interfaces.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inheritance1.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class TextBox extends Control {
    select() { }
}
```

----------------------------------------

TITLE: Importing and Using Namespace in TypeScript
DESCRIPTION: Imports a module as a namespace and attempts to access its exported members through the namespace.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace1(module=system).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import * as foo from './1'

foo.ns.a;
foo.ns.b;
```

----------------------------------------

TITLE: Implementing Logical OR Assignment with Arrays in TypeScript
DESCRIPTION: This function demonstrates the use of the ||= operator to initialize an array if it's undefined before pushing a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment4(target=esnext).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function foo1(results: number[] | undefined) {
    (results ||= []).push(100);
}
```

----------------------------------------

TITLE: Dynamic Imports Argument Constraints - TypeScript
DESCRIPTION: This snippet details a message (TS1450) regarding dynamic imports, stating they can only accept a module specifier and an optional set of attributes as arguments, clarifying the expected structure for dynamic import usage.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/plainJSGrammarErrors.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
plainJSGrammarErrors.js(203,30): message TS1450: Dynamic imports can only accept a module specifier and an optional set of attributes as arguments
```

----------------------------------------

TITLE: Discriminated Union with Template Literal Types in TypeScript
DESCRIPTION: A Redux-style action type definition using template literals for type discrimination. Shows pattern matching on template literal action types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes3.errors.txt#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
type Action =
    | { type: `${string}_REQUEST` }
    | { type: `${string}_SUCCESS`, response: string };

function reducer(action: Action) {
    if (action.type === 'FOO_SUCCESS') {
        action.type;
        action.response;
    }
}
```

----------------------------------------

TITLE: Exporting Constant in JavaScript
DESCRIPTION: Shows how to export a constant in a JavaScript file using ECMAScript module syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/impliedNodeFormatEmit4(module=esnext).errors.txt#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
export const _ = 0;
```

----------------------------------------

TITLE: Array Parameter Destructuring with Default Values within Nested Array - TypeScript
DESCRIPTION: Defines a function `c6` that uses destructuring to extract elements from a nested array parameter, providing a default value for a deeply nested element. This demonstrates how to set default values within nested array destructuring.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration1ES5.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
"function c6([a, b, [[c=1]]]) { }"
```

----------------------------------------

TITLE: Inner Package Export Configuration
DESCRIPTION: Package.json configuration for the inner module, defining module export paths for different formats
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExportsTrailers(module=nodenext).errors.txt#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
    "name": "inner",
    "private": true,
    "exports": {
        "./cjs/*.cjs": "./*.cjs",
        "./mjs/*.mjs": "./*.mjs",
        "./js/*.js": "./*.js"
    }
}
```

----------------------------------------

TITLE: Importing Non-Module File in TypeScript
DESCRIPTION: This snippet shows an attempt to import a file that is not defined as a module, resulting in a TypeScript compilation error. The import statement fails because foo_0.ts is not an external module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importNonExternalModule.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import foo = require("./foo_0");
// Import should fail.  foo_0 not an external module
if(foo.answer === 42){

}
```

----------------------------------------

TITLE: Invalid Arguments Reference in ES5 Arrow Function
DESCRIPTION: Demonstrates a TypeScript compilation error when attempting to reference the 'arguments' object within a nested arrow function in ES5. The code shows why this pattern is invalid and needs to be refactored to use a standard function expression.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emitArrowFunctionWhenUsingArguments11.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f(arguments) {
    var _arguments = 10;
    var a = () => () => arguments;
}
```

----------------------------------------

TITLE: Indexed Access with String Parameter in TypeScript
DESCRIPTION: Function foo accepts any string as an index to access properties of an object literal. It returns a union type of number, string, or boolean depending on which property is accessed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indexedAccessWithFreshObjectLiteral.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo (id: string) {
  return {
      a: 1,
      b: "",
      c: true
  }[id]
}
```

----------------------------------------

TITLE: Assigning Incompatible Function to Union Type in TypeScript
DESCRIPTION: This snippet demonstrates an error where a function with an incompatible parameter type is assigned to a union type. The error occurs because the function parameter type (string) doesn't match the expected type (number) in IDirectiveLinkFn<number>.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/errorsWithInvokablesInUnions01.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export let blah: IDirectiveLinkFn<number> | ConstructableA | IDirectivePrePost<number> = (x: string) => {}
```

----------------------------------------

TITLE: Exporting Variables, Class, and Function in m2.ts
DESCRIPTION: TypeScript file with exported variables, class, instance, and function for module interoperability
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootAbsolutePathMixedSubfolderSpecifyOutputFile/node/sourceRootAbsolutePathMixedSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export var m2_a1 = 10;
export class m2_c1 {
    public m2_c1_p1: number;
}

export var m2_instance1 = new m2_c1();
export function m2_f1() {
    return m2_instance1;
}
```

----------------------------------------

TITLE: Defining a TypeScript Class with Private Fields and Type Predicate
DESCRIPTION: This snippet defines a class 'Foo' with two private fields and a type predicate method 'isFoo'. The '#unused' field triggers an unused error, while '#brand' is indirectly used in the type predicate. The 'isFoo' method demonstrates the use of the 'in' operator with a private field for type checking.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameInInExpressionUnused(target=esnext).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Foo {
    #unused: undefined; // expect unused error
    #brand: undefined; // expect no error

    isFoo(v: any): v is Foo {
        // This should count as using/reading '#brand'
        return #brand in v;
    }
}
```

----------------------------------------

TITLE: Iterating over Fixed Robots Array in JavaScript
DESCRIPTION: This snippet iterates over a fixed array [robotA, robotB], destructuring it into a number and robot info, and logs the number part. The relevant dependencies include predefined robotA and robotB objects or arrays. Expected output is the console log of the first item in each entry.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_24

LANGUAGE: javascript
CODE:
```
for (var _28 = 0, _29 = [robotA, robotB]; _28 < _29.length; _28++) {
    var _30 = _29[_28], numberA3 = _30[0], robotAInfo = _30.slice(1);
    console.log(numberA3);
}
```

----------------------------------------

TITLE: Export Assignment in ECMAScript Module (index.ts)
DESCRIPTION: This code snippet demonstrates an invalid export assignment within an ECMAScript module. The `index.ts` file attempts to use `export = a` to export the object `a`, but because the root `package.json` specifies `type: module`, this results in a TS1203 error. The compiler suggests using `export default` instead.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportAssignments(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// esm format file
const a = {};
export = a;
```

----------------------------------------

TITLE: TypeScript String Indexer Interface Definition
DESCRIPTION: Defines an interface Foo2 with string indexer constraints showing the same pattern of valid and invalid property declarations as the class version.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/stringIndexerConstrainsPropertyDeclarations2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface Foo2 {
    [x: string]: A;
    a: A; // ok
    b: B; // ok
    c: number; // error
    d: string; // error
}
```

----------------------------------------

TITLE: TypeScript Error TS1016 Example
DESCRIPTION: This JavaScript code shows the TypeScript error TS1016. The error occurs because the parameter `bwarg` is a required parameter that appears after the optional parameter `args` in the function `f`'s declaration. TypeScript requires all optional parameters to be placed after all required parameters in a function declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocParseBackquotedParamName.errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
    /**
     * @param {string=} `args`
     * @param `bwarg` {?number?}
     */
    function f(args, bwarg) {
                     ~~~~~
!!! error TS1016: A required parameter cannot follow an optional parameter.
    }
    
```

----------------------------------------

TITLE: Symbol-based Plugin System Implementation in TypeScript
DESCRIPTION: Demonstrates using symbols as keys in a plugin system with typed interface. The code creates a plugin registry with both string and symbol keys, then defines and calls methods through symbol indexing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indexSignatures1.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
const system = Symbol('system');
const SomeSytePlugin = Symbol('SomeSytePlugin');

interface Plugs {
    [key: symbol]: (...args: any) => unknown;
}

const plugins = {
    "user": {} as Plugs,
    [system]: {} as Plugs
};

plugins[system][SomeSytePlugin] = () => console.log('awsome');
plugins[system][SomeSytePlugin]();

var theAnswer: symbol = Symbol('secret');
var obj = {} as Record<symbol, number>;
obj[theAnswer] = 42;
```

----------------------------------------

TITLE: Type Narrowing with object Types in TypeScript
DESCRIPTION: Shows how TypeScript handles type narrowing with object types across different type guards including typeof checks and equality checks. Demonstrates that some narrowing operations don't fully eliminate null/undefined from union types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nonPrimitiveStrictNull.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
if (typeof b !== 'object') {
    b.toString(); // error, never
}

if (typeof b === 'object') {
    a = b; // error, b is not narrowed
}

if (typeof d === 'object') {
    b = d; // ok
    d.toString(); // error, object | null
} else {
    d.toString(); // error, undefined
}

if (d == null) {
    d.toString(); // error, undefined | null
} else {
    d.toString(); // object
}

if (d === null) {
    d.toString(); // error, null
} else {
    d.toString(); // error, object | undefined
}

if (typeof d === 'undefined') {
    d.toString(); // error, undefined
} else {
    d.toString(); // error, object | null
}
```

----------------------------------------

TITLE: TypeScript Class Constructor Access Modifiers
DESCRIPTION: Demonstrates three classes with different access modifiers (public, private, protected) on constructor parameters. Shows compilation errors when accessing private and protected members outside their allowed scope.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classConstructorParametersAccessibility2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C1 {
    constructor(public x?: number) { }
}
var c1: C1;
c1.x // OK


class C2 {
    constructor(private p?: number) { }
}
var c2: C2;
c2.p // private, error


class C3 {
    constructor(protected p?: number) { }
}
var c3: C3;
c3.p // protected, error
class Derived extends C3 {
    constructor(p: number) {
        super(p);
        this.p; // OK
    }
}
```

----------------------------------------

TITLE: Declaring Type Variables with Optional and Null Properties
DESCRIPTION: Demonstrates type assignment errors when attempting to assign objects with incompatible property types, specifically null vs optional properties
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionsAndOptionalProperties.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare let x: { a?: number, b: string };
declare let y: { a: null, b: string };
declare let z: { a: null } & { b: string };

x = y;  // Error
x = z;  // Error
```

----------------------------------------

TITLE: Demonstrating Invalid Await Usage in Parameter Initializer in TypeScript
DESCRIPTION: This code snippet shows an async function with an invalid parameter default value that uses 'await' without an expression to await. This produces two TypeScript compiler errors: TS2524 (await expressions cannot be used in parameter initializers) and TS1109 (expression expected).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncFunctionDeclaration6_es6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
async function foo(a = await): Promise<void> {
    }
```

----------------------------------------

TITLE: Assignment from Unknown
DESCRIPTION: This function demonstrates the restrictions on assigning an 'unknown' type to other types. 'unknown' can only be assigned to 'any' and 'unknown' itself.  Assignments to other types like 'object', 'string', 'string[]', and '{}' result in errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownType1.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
    // unknown assignable only to itself and any
    
    function f22(x: unknown) {
        let v1: any = x;
        let v2: unknown = x;
        let v3: object = x;  // Error
        let v4: string = x;  // Error
        let v5: string[] = x;  // Error
        let v6: {} = x;  // Error
        let v7: {} | null | undefined = x;  // Error
    }
```

----------------------------------------

TITLE: Implementing Interface I3 with Class C2
DESCRIPTION: Defines a class C2 that implements the I3 interface. This class is used later to demonstrate type compatibility issues when assigning to a variable typed as I4.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceImplementation1.errors.txt#_snippet_3

LANGUAGE: typescript
CODE:
```
class C2 implements I3 {
    public x = 1;
}
```

----------------------------------------

TITLE: Block Scoped Function Declaration in Strict Mode in TypeScript
DESCRIPTION: This code demonstrates how function declarations are block-scoped in strict mode in ES6. The function 'foo' is declared inside an if block and can be called within that block, but attempting to call it outside the block results in a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/blockScopedFunctionDeclarationStrictES6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
"use strict";
if (true) {
    function foo() { } // Allowed to declare block scope function
    foo(); // This call should be ok
}
foo(); // Cannot find name since foo is block scoped
```

----------------------------------------

TITLE: Handling TypeScript Errors in JavaScript with Type Annotations
DESCRIPTION: This snippet demonstrates a TypeScript error arising from incorrect type assignment. Assigning a boolean value to a variable expected to be a number triggers error TS2322 in TypeScript, showcasing the necessity for proper type alignment. Furthermore, the code encounters error TS2304 due to an unresolved type reference in a typedef, highlighting potential pitfalls in type definitions when template types are incomplete. A placeholder object 'options' is declared, anticipating a more defined structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocTemplateConstructorFunction2.errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
/** @type {number} */\nlet answer = z.add(3, { nested: 4 })\n\n// lookup in typedef should not crash the compiler, even when the type is unknown\n/**\n * @typedef {Object} A\n * @property {T} value\n              ~\n!!! error TS2304: Cannot find name 'T'.\n */\n/** @type {A} */\nconst options = { value: null };
```

----------------------------------------

TITLE: Variable Declarations and Assignments with Generic Functions
DESCRIPTION: This snippet shows variable declarations and assignments using the previously defined generic functions. It demonstrates both correct type inference and error cases where type incompatibilities occur.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualSignatureInstantiation.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
var a: number;
var a = bar(1, 1, g);      // Should be number
var a = baz(1, 1, g);      // Should be number

var b: number | string;
var b = foo(g);            // Error, number and string are disjoint types
var b = bar(1, "one", g);  // Error, number and string are disjoint types
var b = bar("one", 1, g);  // Error, number and string are disjoint types
var b = baz(b, b, g);      // Should be number | string

var d: number[] | string[];
var d = foo(h);            // Should be number[] | string[]
var d = bar(1, "one", h);  // Should be number[] | string[]
var d = bar("one", 1, h);  // Should be number[] | string[]
var d = baz(d, d, g);      // Should be number[] | string[]
```

----------------------------------------

TITLE: Invalid 'for...of' Statement in TypeScript
DESCRIPTION: This code snippet shows an invalid 'for...of' statement in TypeScript. It attempts to declare multiple variables in the loop and uses an undefined variable 'X'. Both of these cause compilation errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserES5ForOfStatement3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
for (var a, b of X) {
}
```

----------------------------------------

TITLE: TypeScript Import Statements (MTS)
DESCRIPTION: This snippet shows a series of TypeScript import statements in a '.mts' file.  It demonstrates how modules are imported from different paths and how TypeScript attempts to resolve these modules.  The errors highlight issues where the module cannot be found or a declaration file is missing and there are problems resolving due to 'exports' in package.json.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsBlocksTypesVersions(module=nodenext).errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import {} from "exports-and-types-versions/foo";
import {} from "exports-and-types-versions/nope";
import {} from "exports-and-types-versions/yep";
import {} from "exports-and-types-versions/versioned-yep";
import {} from "exports-and-types-versions/versioned-nah";
import {} from "just-types-versions/foo";
```

----------------------------------------

TITLE: Package Configuration for Conditional Exports (JSON)
DESCRIPTION: This JSON snippet demonstrates a more complex package.json configuration with conditional exports based on module format and environment, including type definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsConditionalPackageExports(module=node18).errors.txt#2025-04-21_snippet_5

LANGUAGE: JSON
CODE:
```
{
    "name": "inner",
    "private": true,
    "exports": {
        "./a": {
            "require": "./index.cjs",
            "node": "./index.mjs"
        },
        "./b": {
            "import": "./index.mjs",
            "node": "./index.cjs"
        },
        ".": {
            "import": "./index.mjs",
            "node": "./index.js"
        },
        "./types": {
            "types": {
                "import": "./index.d.mts",
                "require": "./index.d.cts"
            },
            "node": {
                "import": "./index.mjs",
                "require": "./index.cjs"
            }
        }
    }
}
```

----------------------------------------

TITLE: Type Narrowing with Custom Type Guards in TypeScript
DESCRIPTION: This function uses custom type guard functions to narrow the type of a union type (C1 | C2 | C3) and access the 'item' property. It demonstrates a potential issue where TypeScript infers the type as 'never' in the last condition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/instanceofWithStructurallyIdenticalTypes.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
function foo2(x: C1 | C2 | C3): string {
    if (isC1(x)) {
        return x.item;
    }
    else if (isC2(x)) {
        return x.item[0];
    }
    else if (isC3(x)) {
        return x.item;
    }
    return "error";
}
```

----------------------------------------

TITLE: Testing const variable capture in for-of loops in TypeScript
DESCRIPTION: Demonstrates how const variables are captured in for-of loops. The function creates closures that reference the loop variable x and checks equality conditions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop5.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
function foo0_c(x) {
    for (const x of []) {
        var v = x;
        (function() { return x + v });
        (() => x + v);
        if (x == 1) {
            return;
        }
    }

    use(v);
}
```

----------------------------------------

TITLE: Contextual Type Undefined Function
DESCRIPTION: Arrow function with contextual type 'undefined' allowing implicit undefined return
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionsMissingReturnStatementsAndExpressionsStrictNullChecks.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const f20: () => undefined = () => {
    // Ok, contextual type for implicit return is undefined
}
```

----------------------------------------

TITLE: Declaring a Variable and Using JSX Fragments in TypeScript
DESCRIPTION: This snippet demonstrates the declaration of a variable and the use of JSX fragments which raise errors due to missing compiler options. The purpose is to illustrate how missing configurations can result in compilation failures when using JSX fragments in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxFactoryButNoJsxFragmentFactory.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare var h: any;

<></>;

<><span>1</span><><span>2.1</span><span>2.2</span></></>;
```

----------------------------------------

TITLE: Demonstrating TypeScript Template Literal Types Compatibility Issues
DESCRIPTION: This code demonstrates type compatibility issues between regular string literal types and template literal types in TypeScript. It shows how TypeScript handles type mapping with template literals and the errors that can occur when attempting to assign between similar but not identical type structures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// https://github.com/microsoft/TypeScript/issues/55364
interface TypeMap {
  a: "A";
  b: "B";
}
declare const f: <T0 extends "a" | "b">(x: `${T0}`) => TypeMap[T0];
type F1 = <T1 extends "a" | "b">(x: `${T1}`) => TypeMap[T1];
const f1: F1 = f; 
type F2 = <T2 extends 'a' | 'b'>(x: `${T2}`) => TypeMap[`${T2}`]
const f2: F2 = f

function f3<T3 extends "a" | "b">(x: T3) {
    const test1: `${T3}` = x    
    const test2: T3 = "" as `${T3}`;    
}
```

----------------------------------------

TITLE: Creating Robot Objects with Type Annotations in TypeScript
DESCRIPTION: This snippet defines a variable 'robotA' of type 'Robot'. It demonstrates how to create an object that conforms to the Robot interface, containing properties 'name' and 'skill'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatement.sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var robotA = { name: "mower", skill: "mowing" };
```

----------------------------------------

TITLE: Defining Channel Type Interfaces in TypeScript
DESCRIPTION: Defines two interfaces TextChannel and EmailChannel with specific properties for each channel type. Includes common properties like id and type, plus channel-specific properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/complicatedIndexedAccessKeyofReliesOnKeyofNeverUpperBound.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface TextChannel {
    id: string;
    type: 'text';
    phoneNumber: string;
}

interface EmailChannel {
    id: string;
    type: 'email';
    addres: string;
}
```

----------------------------------------

TITLE: Unclosed JSX element
DESCRIPTION: This snippet demonstrates a simple JSX error where a JSX element is opened but not closed. JSX requires all elements to be properly closed, either with a closing tag or as a self-closing tag.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxInvalidEsprimaTestSuite.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
"<a>;"
```

----------------------------------------

TITLE: Initializing and Exporting tRPC Components in TypeScript
DESCRIPTION: This snippet initializes tRPC and exports middleware, router, and publicProcedure. It contains TypeScript errors due to missing type annotations on the exported variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitIsolatedDeclarationErrorNotEmittedForNonEmittedFile.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { initTRPC } from "@trpc/server";

const trpc = initTRPC.create();

export const middleware = trpc.middleware;
export const router = trpc.router;
export const publicProcedure = trpc.procedure;
```

----------------------------------------

TITLE: Assignment to { [x: string]: unknown }
DESCRIPTION: This function illustrates what can be assigned to a type with an index signature '{ [x: string]: unknown }'. Fresh object literals and objects with properties are assignable.  Primitive types and arrays are not assignable unless they are explicitly cast.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownType1.errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
    // Anything fresh but primitive assignable to { [x: string]: unknown }
    
    function f24(x: { [x: string]: unknown }) {
        x = {};
        x = { a: 5 };
        x = [1, 2, 3]; // Error
        x = 123;  // Error
    }
```

----------------------------------------

TITLE: Attempting to Export Non-Local Variables in TypeScript
DESCRIPTION: This snippet demonstrates attempts to export variables that are not locally declared, resulting in TypeScript compiler errors. It shows various export syntaxes including renaming exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reExportGlobalDeclaration1.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export {x, x as y};
export {x1, x1 as y1};

export {a, a as a1};
export {b, b as b1};


export {x as z};
export {x1 as z1};
export {a as a2};
export {b as b2};
```

----------------------------------------

TITLE: TypeScript Interface Definition (import.d.ts)
DESCRIPTION: This TypeScript code defines an interface named 'ImportInterface' and exports it. This interface is intended to be used for modules resolved using the 'import' resolution mode.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportModeDeclarationEmit2(module=nodenext).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export interface ImportInterface {}
```

----------------------------------------

TITLE: Defining Function with Spread Operator and Type Constraints - TypeScript
DESCRIPTION: This function attempts to spread an object of type T that may be undefined. TypeScript raises an error when T isn't constrained to object types. This is a demonstration of type safety in TypeScript functions using generics.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/spreadObjectOrFalsy.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f1<T>(a: T & undefined) {
        return { ...a };  // Error
                 ~~~~
    }
```

----------------------------------------

TITLE: Recursive String Transformations with Template Literals in TypeScript
DESCRIPTION: Implements common string utility types for trimming whitespace and splitting strings using recursive conditional types with template literals. Shows how to handle edge cases and string manipulation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes1.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
type Trim<S extends string> =
    S extends ` ${infer T}` ? Trim<T> :
    S extends `${infer T} ` ? Trim<T> :
    S;

type TR1 = Trim<'xx   '>;  // 'xx'
type TR2 = Trim<'   xx'>;  // 'xx'
type TR3 = Trim<'   xx   '>;  // 'xx'

type Split<S extends string, D extends string> =
    string extends S ? string[] :
    S extends '' ? [] :
    S extends `${infer T}${D}${infer U}` ? [T, ...Split<U, D>] :
    [S];

type T40 = Split<'foo', '.'>;  // ['foo']
type T41 = Split<'foo.bar.baz', '.'>;  // ['foo', 'bar', 'baz']
type T42 = Split<'foo.bar', ''>;  // ['f', 'o', 'o', '.', 'b', 'a', 'r']
type T43 = Split<any, '.'>;  // string[]
```

----------------------------------------

TITLE: Defining AB Type as Union of A and B
DESCRIPTION: This snippet defines a type `AB<T>` as a union of the generic interfaces `A<T>` and `B<T>`. This represents a discriminated union where the `variant` property determines the structure of the object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
    type AB<T> = A<T> | B<T>;

```

----------------------------------------

TITLE: Using await in function expression (TypeScript)
DESCRIPTION: Example of TypeScript error when using 'for await' loop and 'await' expression in a function expression. Shows how TS1103 and TS1308 errors apply to function expressions as well.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitInNonAsyncFunction.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
const functionExpression = function(p: Promise<number>) {
  for await (const _ of []);
  await p;
}
```

----------------------------------------

TITLE: Exporting Default Class in TypeScript
DESCRIPTION: This snippet defines a default class in TypeScript with no methods or properties. It serves as a simple demonstration of exporting a class for use in other modules. No specific dependencies are required, but it serves as a basic building block for further functionality.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importHelpersWithImportOrExportDefaultNoTslib.3(esmoduleinterop=true,module=commonjs).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export default class { }
```

----------------------------------------

TITLE: Invalid Null Comparisons in TypeScript
DESCRIPTION: Demonstrates various invalid comparison operations with null values in TypeScript, showing compiler errors TS18050. The code includes comparisons with different data types including boolean, number, string, void, enum, object, and array.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/comparisonOperatorWithOneOperandIsNull.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
enum E { a, b, c }

function foo<T>(t: T) {
    var foo_r1 = t < null;
    var foo_r2 = t > null;
    var foo_r3 = t <= null;
    var foo_r4 = t >= null;
    var foo_r5 = t == null;
    var foo_r6 = t != null;
    var foo_r7 = t === null;
    var foo_r8 = t !== null;

    var foo_r1 = null < t;
    var foo_r2 = null > t;
    var foo_r3 = null <= t;
    var foo_r4 = null >= t;
    var foo_r5 = null == t;
    var foo_r6 = null != t;
    var foo_r7 = null === t;
    var foo_r8 = null !== t;
}

var a: boolean;
var b: number;
var c: string;
var d: void;
var e: E;
var f: {};
var g: string[];

// operator <
var r1a1 = null < a;
var r1a2 = null < b;
var r1a3 = null < c;
var r1a4 = null < d;
var r1a5 = null < e;
var r1a6 = null < f;
var r1a7 = null < g;

var r1b1 = a < null;
var r1b2 = b < null;
var r1b3 = c < null;
var r1b4 = d < null;
var r1b5 = e < null;
var r1b6 = f < null;
var r1b7 = g < null;

// operator >
var r2a1 = null > a;
var r2a2 = null > b;
var r2a3 = null > c;
```

----------------------------------------

TITLE: Importing Modules in CommonJS Module (index.cjs)
DESCRIPTION: Illustrates an error when importing an ECMAScript module in a CommonJS file. The import of 'inner/mjs/index' is flagged as an error, suggesting to use dynamic import instead.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExports(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
// cjs format file
import * as cjsi from "inner/cjs/index";
import * as mjsi from "inner/mjs/index";
import * as typei from "inner/js/index";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: Optional Chaining with Equality Checks in TypeScript
DESCRIPTION: This snippet demonstrates the use of optional chaining (?.) with equality checks (== and ===) for accessing properties and methods of potentially null or undefined objects. It shows how TypeScript handles type narrowing in these scenarios.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowOptionalChain.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function f11(o: Thing | null, value: number) {
    if (o?.foo === value) {
        o.foo;
    }
    if (o?.["foo"] === value) {
        o["foo"];
    }
    if (o?.bar() === value) {
        o.bar;
    }
    if (o?.foo == value) {
        o.foo;
    }
    if (o?.["foo"] == value) {
        o["foo"];
    }
    if (o?.bar() == value) {
        o.bar;
    }
}
```

----------------------------------------

TITLE: Unused Type Parameter in Class Method - TypeScript
DESCRIPTION: Shows a class definition with a method containing an unused type parameter X, which triggers the TypeScript compiler error TS6133. The error indicates that the generic type parameter is declared but never used within the method scope.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedTypeParameterInMethod4.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
    public f1<X>() {

    }
}
```

----------------------------------------

TITLE: TypeScript Module Import Error Cases
DESCRIPTION: Shows different ways of importing from a non-existent module, including named imports, namespace imports, and re-exports. Demonstrates how TypeScript handles missing module declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedModulesImportExportElision.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import {c} from "module"
import {c2} from "module"
import * as ns from "module"

class C extends c2.C {
}

let x = new c();
let y = ns.value;

export {c1} from "module";
export var z = x;
```

----------------------------------------

TITLE: Class B Definition with Inheritance
DESCRIPTION: Definition of class B that extends class A, implemented using AMD module format with TypeScript inheritance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/outModuleConcatAmd.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
define("b", ["require", "exports", "ref/a"], function (require, exports, a_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.B = void 0;
    var B = /** @class */ (function (_super) {
        __extends(B, _super);
        function B() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return B;
    }(a_1.A));
    exports.B = B;
});
```

----------------------------------------

TITLE: TypeScript Module M1 Definition
DESCRIPTION: Basic TypeScript module with class definition, variable declaration, and function returning class instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootRelativePathMixedSubfolderSpecifyOutputFile/node/mapRootRelativePathMixedSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Type Guarding Runtime Values Using Discriminated Unions
DESCRIPTION: Shows the use of type guards with discriminated unions to refine 'RuntimeValue' types for functions `foo1` and `foo2`. Key functionality includes checking the `type` property to execute condition-specific logic, relevant in scenarios where runtime validation of types is critical.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/discriminatedUnionTypes2.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
type RuntimeValue =
    | { type: 'number', value: number }
    | { type: 'string', value: string }
    | { type: 'boolean', value: boolean };

function foo1(x: RuntimeValue & { type: 'number' }) {
    if (x.type === 'number') {
        x.value;  // number
    }
    else {
        x.value;  // number
    }
}

function foo2(x: RuntimeValue & ({ type: 'number' } | { type: 'string' })) {
    if (x.type === 'number') {
        x.value;  // number
    }
    else {
        x.value;  // string
    }
}
```

----------------------------------------

TITLE: Multiple Property Destructuring from Object
DESCRIPTION: Complex destructuring example extracting multiple properties from an object with type-safe variable assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatement1.sourcemap.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
var b, nameB = robotB.name, skillB = robotB.skill;
```

----------------------------------------

TITLE: Package.json Module Type
DESCRIPTION: This JSON snippet specifies the 'type' field as 'module'. This indicates that the package should be treated as an ES module.  This setting influences how modules are resolved and imported.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportModeDeclarationEmit2(module=node18).errors.txt#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Invalid Type Usage Error
DESCRIPTION: Demonstrates an error when trying to use a type import as a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDefault.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import types from './b';
new types.A(); // Error
```

----------------------------------------

TITLE: Defining Robot Interface and Variable A in TypeScript
DESCRIPTION: This code defines a Robot interface with name and skills properties, and initializes a robotA variable. The skills property can have primary and secondary skills which are defined with default values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementNestedObjectBindingPatternWithDefaultValues.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare var console: {
  log(msg: string): void;
}
interface Robot {
  name: string;
  skills: {
      primary?: string;
      secondary?: string;
  };
}

var 
    robotA
          : Robot = 
             { 
               name
                   : 
                     "mower"
                            , 
                              skills
                                    : 
                                      { 
                                        primary
                                               : 
                                                 "mowing"
                                                         , 
                                                           secondary
                                                                    : 
                                                                      "none"
                                                                             }
                                                                               }
                                                                                ;
```

----------------------------------------

TITLE: TypeScript Class with Service Injection Error
DESCRIPTION: Shows a BuildWorkspaceService class implementation with a type error where an undefined class 'X' is referenced. Contains methods for injecting request and build services with generic type parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/crashIntypeCheckObjectCreationExpression.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export class BuildWorkspaceService {
    public injectRequestService<P0, P1, P2>(service: P0) {
        this.injectBuildService<number>(new X(service));
    }
    public injectBuildService<P0>(service: P0) {
    }
}
```

----------------------------------------

TITLE: TypeScript Module Export Definition (m1.ts)
DESCRIPTION: Defines a TypeScript module with exported variables, class and function. Includes a class m1_c1 with a number property, instance creation, and a function that returns the instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootAbsolutePathModuleSubfolderSpecifyOutputFile/node/mapRootAbsolutePathModuleSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: TypeScript Destructuring Declaration Errors
DESCRIPTION: Demonstrates various error cases in TypeScript destructuring declarations including missing initializers and implicit any types. Shows both array and object destructuring patterns with type annotations and default values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyDestructuringVarDeclaration.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var [a], {b}, c, d; // error

var [a1 = undefined], {b1 = null}, c1 = undefined, d1 = null; // error

var [a2]: [any], {b2}: { b2: any }, c2: any, d2: any;

var {b3}: { b3 }, c3: { b3 }; // error in type instead

var [a4] = [undefined], {b4} = { b4: null }, c4 = undefined, d4 = null; // error

var [a5 = undefined] = []; // error
```

----------------------------------------

TITLE: Component Definition and Error Handling in Preact
DESCRIPTION: This snippet defines a functional component 'Comp' that renders a <div>. However, it encounters TypeScript errors regarding JSX types, indicating that the JSX intrinsics have not been properly defined, which is essential for TypeScript to infer component types correctly. The snippet highlights the importance of properly defining intrinsic elements in TypeScript to avoid compilation errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxNamespaceGlobalReexportMissingAliasTarget.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export const Comp = () => <div></div>;
                              ~~~~~
!!! error TS7026: JSX element implicitly has type 'any' because no interface 'JSX.IntrinsicElements' exists.
```

----------------------------------------

TITLE: Defining Base and Derived Classes with Constructors
DESCRIPTION: This snippet defines a base class with a constructor that accepts a variable number of string arguments and a derived class that inherits from it. It demonstrates both the correct use of the constructor and the type validation that raises errors when non-string arguments are used.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inheritedConstructorWithRestParams.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base {
    constructor(...a: string[]) { }
}

class Derived extends Base { }

// Ok
new Derived("", "");
new Derived("");
new Derived();

// Errors
new Derived("", 3);
                    ~
!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
new Derived(3);
                ~
!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
```

----------------------------------------

TITLE: Implementing Component Classes with Generic Data and Computed Properties
DESCRIPTION: These Component classes demonstrate how to use generic type parameters with intersection types to model data and computed properties. The examples show different approaches to accessing properties through keyof constraints.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
interface Options1<Data, Computed> {
    data?: Data
    computed?: Computed;
}

declare class Component1<Data, Computed> {
    constructor(options: Options1<Data, Computed>);
    get<K extends keyof (Data & Computed)>(key: K): (Data & Computed)[K];
}

let c1 = new Component1({
    data: {
        hello: ""
    }
});

c1.get("hello");

interface Options2<Data, Computed> {
    data?: Data
    computed?: Computed;
}

declare class Component2<Data, Computed> {
    constructor(options: Options2<Data, Computed>);
    get<K extends keyof Data | keyof Computed>(key: K): (Data & Computed)[K];
}
```

----------------------------------------

TITLE: ESM Format Export Using TypeScript
DESCRIPTION: This snippet shows proper exporting of modules using ES format, a common approach in modern JavaScript development where the module exports `cjs`, `mjs`, and `type`. The focus is on efficient export declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackageExports(module=nodenext).errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
    // esm format file
    import * as cjs from "inner/cjs";
    import * as mjs from "inner/mjs";
    import * as type from "inner";
    export { cjs };
    export { mjs };
    export { type };
```

----------------------------------------

TITLE: TypeScript Readonly Tuple Parameter Type Error
DESCRIPTION: Demonstrates a type error when trying to pass a function with mutable parameters to a handler expecting readonly tuple types. Shows both the problematic case and a working solution using rest parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTupleTypeParameterReadonly.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function each<T extends ReadonlyArray<any>>(cases: ReadonlyArray<T>): (fn: (...args: T) => any) => void;

const cases = [
    [1, '1'],
    [2, '2'],
] as const;

const eacher = each(cases);

eacher((a, b) => {
    a;
    b;
});

// TODO: https://github.com/microsoft/TypeScript/issues/53255
eacher((...args) => {
    const [a, b] = args;
    a;
    b;
});
```

----------------------------------------

TITLE: Importing and Using Exported JavaScript Modules
DESCRIPTION: This snippet shows how to import a module in JavaScript that was exported from another file. It imports the default export from the file ‘a.js’ and simply accesses it. While no TypeScript checks are necessary here, the imported object does not meet the required type definition initially set, which is a key constraint of this snippet.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocTypeTagOnExportAssignment3.errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
import a from "./a";
a;
```

----------------------------------------

TITLE: Declaring Multiple Variables with Types - TS/JS
DESCRIPTION: This snippet shows how a TypeScript declaration of multiple variables with specific types (number, array of union types, array of union types including tuples) is compiled into a simple JavaScript `var` statement declaring the variables without type information.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.sourcemap.txt#_snippet_9

LANGUAGE: JavaScript
CODE:
```
var numberA3, robotAInfo, multiRobotAInfo;
```

LANGUAGE: TypeScript
CODE:
```
let numberA3: number,
    robotAInfo: (number | string)[],
    multiRobotAInfo: (string | [string, string])[];
```

----------------------------------------

TITLE: Exporting Class B in TypeScript
DESCRIPTION: This snippet defines a class 'B' with a number property 'n' and exports it. It is used in other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleAugmentationImportsAndExports3.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    export class B {
        n: number;
    }
    
```

----------------------------------------

TITLE: Using Array Destructuring for Robot Attributes
DESCRIPTION: This snippet demonstrates array destructuring from a predefined array of robot attributes. It extracts 'numberB' with a default of -1, while 'robotAInfo' holds the rest of the information. The input array is expected to always contain at least one element.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues3.sourcemap.txt#2025-04-21_snippet_20

LANGUAGE: typescript
CODE:
```
_23 = [2, "trimmer", "trimming"], _24 = _23[0], numberB = _24 === void 0 ? -1 : _24, robotAInfo = _23.slice(1);
```

----------------------------------------

TITLE: Defining Object and Field Types in TypeScript
DESCRIPTION: This snippet defines the core types `ObjectType` and `Field` used to represent objects and their fields, along with a function `object` for creating objects with configured fields.  The `ObjectType` includes a `__source` property for type inference, while `Field` includes `__key` and `__source`. The `object` function accepts a configuration with a name and either a `fields` object or a function that returns a `fields` object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/circularReferenceInReturnType2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    type ObjectType<Source> = {
      kind: "object";
      __source: (source: Source) => void;
    };
    
    type Field<Source, Key extends string> = {
      __key: (key: Key) => void;
      __source: (source: Source) => void;
    };
    
    declare const object: <Source>() => <
      Fields extends {
        [Key in keyof Fields]: Field<Source, Key & string>;
      }
    >(config: {
      name: string;
      fields: Fields | (() => Fields);
    }) => ObjectType<Source>;
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options for Angular Project
DESCRIPTION: This tsconfig.json file sets up TypeScript compiler options for an Angular project. It specifies ES5 as the target, uses CommonJS modules, and enables decorator metadata and experimental decorators.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/emitDecoratorMetadataCommonJSISolatedModules/amd/emitDecoratorMetadataCommonJSISolatedModules.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "compileOnSave": true,
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "isolatedModules": true
  },
  "files": [
    "main.ts"
  ]
}
```

----------------------------------------

TITLE: Basic TypeScript Exports
DESCRIPTION: Simple TypeScript module exporting two constants.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importAttributes1(module=es2015).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const a = 1;
export const b = 2;
```

----------------------------------------

TITLE: Testing const Declaration Scoping in TypeScript
DESCRIPTION: This code demonstrates const variable declarations across numerous scoping contexts in TypeScript, including global scope, control flow statements, functions, modules, classes and object literals. The file shows how const variables maintain block scope and can shadow variables with the same name in outer scopes. It also highlights an error with the 'with' statement which is not supported in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constDeclarations-scopes.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// global
const c = "string";

var n: number;

// Control flow statements with blocks
if (true) { 
    const c = 0;
    n = c;
}
else { 
    const c = 0;
    n = c;
}

while (true) { 
    const c = 0;
    n = c;
}

do { 
   const c = 0;
    n = c;
} while (true);

var obj;
with (obj) {
    const c = 0;
    n = c;
}

for (var i = 0; i < 10; i++) {
    const c = 0;
    n = c;
}

for (var i2 in {}) {
    const c = 0;
    n = c;
}

if (true) {
    label: const c = 0;
    n = c;
}

while (false) {
    label2: label3: label4: const c = 0;
    n = c;
}

// Try/catch/finally
try {
    const c = 0;
    n = c;
}
catch (e) {
    const c = 0;
    n = c;
}
finally {
    const c = 0;
    n = c;
}

// Switch
switch (0) {
    case 0:
        const c = 0;
        n = c;
        break;
}

// blocks
{
    const c = 0;
    n = c;
    {
        const c = false;
        var b: boolean = c;
    }
}

// functions

function F() {
    const c = 0;
    n = c;
}

var F2 = () => {
    const c = 0;
    n = c;
};

var F3 = function () {
    const c = 0;
    n = c;
};

// modules
module m {
    const c = 0;
    n = c;

    {
       const c = false;
       var b2: boolean = c;
    }
}

// methods
class C {
    constructor() {
        const c = 0;
        n = c;
    }

    method() {
        const c = 0;
        n = c;
    }

    get v() {
        const c = 0;
        n = c;
        return n;
    }

    set v(value) {
        const c = 0;
        n = c;
    }
}

// object literals
var o = {
    f() {
        const c = 0;
        n = c;
    },
    f2: () => {
        const c = 0;
        n = c;
    }
}
```

----------------------------------------

TITLE: Dynamic Import Error Examples (2.ts)
DESCRIPTION: Demonstrates various cases of dynamic imports with invalid specifiers that cause TypeScript compilation errors when using undefined or null values
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importCallExpression6ES2020.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
declare function bar(): boolean;
const specify = bar() ? "./0" : undefined;
let myModule = import(specify);
let myModule1 = import(undefined);
let myModule2 = import(bar() ? "./1" : null);
let myModule3 = import(null);
```

----------------------------------------

TITLE: Switch Statement in TypeScript
DESCRIPTION: Demonstrates a switch statement based on the 'z' property of an 'obj' object. Each case performs different operations on variable 'x'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationStatements.sourcemap.txt#2025-04-21_snippet_32

LANGUAGE: typescript
CODE:
```
switch (obj.z) {
    case 0: {
        x++;
        break;
    }
    case 1: {
        x--;
        break;
    }
    default: {
        x *= 2;
        x = 50;
        break;
    }
}
```

----------------------------------------

TITLE: Assigning String to Number with JSDoc - JavaScript
DESCRIPTION: Shows a type error in JavaScript where a string literal "hello" is assigned to a variable `n` explicitly typed as `number` via a JSDoc comment. TypeScript flags this as a type mismatch.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocTypeTag2.errors.txt#_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type {number} */
var n = "hello";
```

----------------------------------------

TITLE: ES Module with import.meta
DESCRIPTION: This code snippet showcases the valid use of `import.meta.url` within an ES module. The file is assumed to be treated as an ES module based on the project's configuration, allowing the use of `import.meta` to access module metadata, such as the module's URL. This file will not result in TS1470.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportMeta(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// esm format file
const x = import.meta.url;
export {x};
```

----------------------------------------

TITLE: Tuple Manipulation Errors - TypeScript
DESCRIPTION: This snippet contains function definitions manipulating tuples and demonstrating the TypeScript errors encountered when trying to assign values that do not conform to defined tuple types. The errors provide insight into mismatches between the number of elements in the source and target tuples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictOptionalProperties1.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function f4(t: [string?]) {
        let x = t[0];  // string | undefined
        t[0] = 'hello';
        t[0] = undefined;  // Error
        ~~~~
!!! error TS2322: Type 'undefined' is not assignable to type 'string'.
    }
    
    function f4a(t1: [number, string?], t2: [number, string?, string?]) {
        t1 = t2;  // Wasn't an error, but should be
        ~~
!!! error TS2322: Type '[number, string?, string?]' is not assignable to type '[number, string?]'.
!!! error TS2322:   Target allows only 2 element(s) but source may have more.
    }
    
    function f5(t: [number, string?, boolean?]) {
        t = [42];
        t = [42, 'abc'];
        t = [42, 'abc', true];
        t = [42, ,];
        t = [42, , ,];
        t = [42, , , ,];  // Error
        ~
!!! error TS2322: Type '[number, never?, never?, never?]' is not assignable to type '[number, string?, boolean?]'.
!!! error TS2322:   Target allows only 3 element(s) but source may have more.
        t = [, , true];  // Error
        ~
!!! error TS2322: Type '[never?, never?, true?]' is not assignable to type '[number, string?, boolean?]'.
!!! error TS2322:   Source provides no match for required element at position 0 in target.
        t = [42, undefined, true];  // Error
        ~
!!! error TS2322: Type '[number, undefined, true]' is not assignable to type '[number, string?, boolean?]'.
!!! error TS2322:   Type at position 1 in source is not compatible with type at position 1 in target.
!!! error TS2322:     Type 'undefined' is not assignable to type 'string'.
    }

```

----------------------------------------

TITLE: Handling Undefined Division in TypeScript
DESCRIPTION: This snippet illustrates errors when dividing null and undefined values in TypeScript. Attempting these operations results in type errors as null and undefined are invalid operands.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arithmeticOperatorWithOnlyNullValueOrUndefinedValue.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// operator /
    var rb1 = null / null;
              ~~~~
!!! error TS18050: The value 'null' cannot be used here.
                     ~~~~
!!! error TS18050: The value 'null' cannot be used here.
    var rb2 = null / undefined;
              ~~~~
                     ~~~~~~~~~
!!! error TS18050: The value 'undefined' cannot be used here.
    var rb3 = undefined / null;
              ~~~~~~~~~
                          ~~~~
!!! error TS18050: The value 'undefined' cannot be used here.
    var rb4 = undefined / undefined;
              ~~~~~~~~~
                          ~~~~~~~~~
```

----------------------------------------

TITLE: Invalid Arithmetic Operations in TypeScript
DESCRIPTION: Examples of TypeScript code that generates TS2356 errors when attempting to use increment operators (++ or --) on non-numeric types. TypeScript requires arithmetic operands to be of type 'any', 'number', 'bigint', or an enum type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/incrementOperatorWithUnsupportedStringType.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var ResultIsNumber21 = A.foo()++;
var ResultIsNumber22 = (STRING + STRING)++;

// miss assignment operators
++"";
++STRING;
++STRING1;
++STRING1[0];
++foo();
++objA.a;
++M.n;
++objA.a, M.n;

""++;
STRING++;
STRING1++;
STRING1[0]++;
foo()++;
objA.a++;
M.n++;
objA.a++, M.n++;
```

----------------------------------------

TITLE: Defining ARIA Property Types in TypeScript
DESCRIPTION: This snippet defines the types for several ARIA attributes, such as `ariaRoleDescription`, `ariaRowCount`, etc. Each attribute is typed as an object containing a comprehensive list of methods and properties typically found on JavaScript strings, with all types explicitly set to `any`. This suggests a flexible or less strictly typed approach for these specific ARIA attributes within this definition file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRecursiveInference.errors.txt#_snippet_45

LANGUAGE: typescript
CODE:
```
; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol."iterator"]: any; };
ariaRoleDescription: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol."iterator"]: any; };
ariaRowCount: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol."iterator"]: any; };
ariaRowIndex: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol."iterator"]: any; };
ariaRowIndexText: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol."iterator"]: any; };
ariaRowSpan: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol."iterator"]: any; };
ariaSelected: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol."iterator"]: any; };
ariaSetSize: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol."iterator"]: any; };
```

----------------------------------------

TITLE: Generic Type Constraint Examples
DESCRIPTION: Examples of type checking with generic types, intersections, and unions involving object literals.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectLiteralExcessProperties.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function test<T extends IFoo>() {
    const obj1: T = { name: "test" };
    const obj2: T & { prop: boolean } = { name: "test", prop: true };
    const obj3: T | { prop: boolean } = { name: "test", prop: true };
    const obj4: T & { prop: boolean } | { name: string } = { name: "test", prop: true };
    const obj5: object | { x: string } = { z: 'abc' }
    const obj6: object & { x: string } = { z: 'abc' }
}
```

----------------------------------------

TITLE: Valid Interface Extensions for a2 Method with Various Parameter Configurations
DESCRIPTION: Multiple examples of correctly extending the Base interface by implementing the 'a2' method with various parameter configurations. All examples maintain type compatibility with the base interface.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithCallSignaturesWithRestParameters.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
interface I6 extends Base {
    a2: (x: number) => number; // ok, same number of required params
}

interface I6B extends Base {
    a2: (x: number, ...args: number[]) => number; // ok, same number of required params
}

interface I6D extends Base {
    a2: (x: number, y: number) => number; // ok, all present params match
}

interface I6E extends Base {
    a2: (x: number, y?: number) => number; // ok, same number of required params
}
```

----------------------------------------

TITLE: Checking Properties in Unknown Type - TypeScript
DESCRIPTION: Function f1 checks for properties in an unknown type variable x using the 'in' operator. It demonstrates type narrowing based on type guards and handles various constraints while accessing properties safely.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=true).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function f1(x: unknown) {
    if ("a" in x) {
               ~
!!! error TS18046: 'x' is of type 'unknown'.
        x.a;
    }
    if (x && "a" in x) {
                    ~
!!! error TS2638: Type '{}' may represent a primitive value, which is not permitted as the right operand of the 'in' operator.
        x.a;
    }
    if (x && typeof x === "object" && "a" in x) {
        x.a;
    }
    if (x && typeof x === "object" && "a" in x && "b" in x && "c" in x) {
        x.a;
        x.b;
        x.c;
    }
}
```

----------------------------------------

TITLE: Array Destructuring Loop with Console Output
DESCRIPTION: Complex TypeScript for loop using array destructuring with default values, followed by console.log statement. Includes variable assignment and nested array patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
for (let [, nameA = "name"] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
    console.log(nameA);
}
```

----------------------------------------

TITLE: Implementing Module-Level Class Definitions in TypeScript
DESCRIPTION: A collection of module-scoped class definitions with generic type parameters and method implementations that return complex generic types
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_26

LANGUAGE: typescript
CODE:
```
module quasiater {
    export class carolinensis {
        concinna(): rendalli.zuluensis { var x: rendalli.zuluensis; () => { var y = this; }; return x; }
        // Additional method signatures omitted for brevity
    }
}
```

----------------------------------------

TITLE: TypeScript Classes with Unused and Used Aliases
DESCRIPTION: Demonstrates classes with constructors, setters, and methods using destructured aliases, both referenced and unreferenced.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitBindingPatternsUnused.errors.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
class NotReferencedClass {
	constructor({ name: alias }: Named) {
	}
	set x({ name: alias }: Named) {
        console.log(alias);
    }
	m({ name: alias }: Named) {
        console.log(alias);
    }
}

class ReferencedInCodeClas {
	constructor({ name: alias }: Named) {
		console.log(alias);
	}
	set x({ name: alias }: Named) {
        console.log(alias);
    }
	m({ name: alias }: Named) {
        console.log(alias);
    }
}

class ReferencedInSignartureClass {
	constructor({ name: alias }: Named, p: typeof alias) {
		console.log(alias);
	}
	set x({ name: alias }: Named & { o: typeof alias }) {
        
    }
	mReturnType({ name: alias }: Named): typeof alias {
        return null!
    }
	mRerturnTypeNested({ name: alias }: Named): NonNullable<typeof alias> {
        return null!
    }
    mParameter({ name: alias }: Named, p: typeof alias) {
        return null!
    }
}
```

----------------------------------------

TITLE: Handling Type Narrowing with Instanceof in TypeScript
DESCRIPTION: The snippet demonstrates narrowing generic types using the 'instanceof' operator. Two generic classes, A and B, are defined, with A expecting a property that B lacks. The 'test' function accepts an argument of type A<T> | B<T> and uses 'instanceof' to determine if the object is of type B or A, then attempts to pass it to functions expecting specific types, leading to type errors. This highlights the necessity of ensuring type compatibility when narrowing generics.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowingGenericTypeFromInstanceof01.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class A<T> {
    constructor(private a: string) { }
}

class B<T> {
}

function acceptA<T>(a: A<T>) { }
function acceptB<T>(b: B<T>) { }

function test<T>(x: A<T> | B<T>) {
    if (x instanceof B) {
        acceptA(x);
                ~
!!! error TS2345: Argument of type 'B<T>' is not assignable to parameter of type 'A<unknown>'.
!!! error TS2345:   Property 'a' is missing in type 'B<T>' but required in type 'A<unknown>'.
!!! related TS2728 narrowingGenericTypeFromInstanceof01.ts:2:17: 'a' is declared here.
    }

    if (x instanceof A) {
        acceptA(x);
    }

    if (x instanceof B) {
        acceptB(x);
    }

    if (x instanceof B) {
        acceptB(x);
    }
}
```

----------------------------------------

TITLE: ES Module Type Declaration
DESCRIPTION: Type declaration file for an ES module that declares a string constant and exports it as a default export.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerRelative1(module=esnext).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
declare const _: string;
export default _;
```

----------------------------------------

TITLE: Type Re-export Error
DESCRIPTION: Demonstrates error when attempting to re-export an imported type without type-only syntax
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedModulesExportDeclarationType.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { T } from "./type";
export default T; // Error
```

----------------------------------------

TITLE: Package Configuration for Module Resolution
DESCRIPTION: This JSON snippet defines the package configuration for 'pkg', specifying different entry points for import and require statements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesTripleSlashReferenceModeOverride3(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "exports": {
        "import": "./import.js",
        "require": "./require.js"
    }
}
```

----------------------------------------

TITLE: Nested Object Destructuring in Array Iteration
DESCRIPTION: This snippet shows a for...of loop that iterates over an array 'multiRobots'. It uses nested object destructuring to extract 'primary' and 'secondary' properties from a 'skills' object within each array element.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
for (var _14 = 0, multiRobots_2 = multiRobots; _14 < multiRobots_2.length; _14++) {
    _d = multiRobots_2[_14].skills, primary = _d.primary, secondary = _d.secondary;
    console.log(primaryA);
}
```

----------------------------------------

TITLE: Implementing Nullish Coalescing Assignment with Arrays in TypeScript
DESCRIPTION: This function shows the use of the ??= operator to initialize an array if it's undefined before pushing a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment4(target=esnext).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function foo2(results: number[] | undefined) {
    (results ??= []).push(100);
}
```

----------------------------------------

TITLE: Using Component Class for Generic Property Management
DESCRIPTION: Defines a generic component class that encapsulates property management for dynamically typed props, using getProperty and setProperty methods with keyof to safely access component properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
class Component<PropType> {
    props: PropType;
    getProperty<K extends keyof PropType>(key: K) {
        return this.props[key];
    }
    setProperty<K extends keyof PropType>(key: K, value: PropType[K]) {
        this.props[key] = value;
    }
}
```

----------------------------------------

TITLE: Handling Type Narrowing in Closures - TypeScript
DESCRIPTION: This snippet illustrates how variable types are narrowed in closures. The function 'f1' demonstrates that after assigning a value, the type can be inferred correctly in the closure based on the latest assignment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowingPastLastAssignment.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function f1(x: string | number) {
    x = "abc";
    action(() => { x /* string | number */ });
    x = 42;
    action(() => { x /* number */ });
}
```

----------------------------------------

TITLE: Valid Interface Extension with Optional Parameter
DESCRIPTION: Example of correctly extending the Base interface by implementing the 'a' method with an optional parameter. This maintains compatibility with the base interface's rest parameter signature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithCallSignaturesWithRestParameters.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
interface I2 extends Base {
    a: (x?: number) => number; // ok, same number of required params
}
```

----------------------------------------

TITLE: Defining Union Type and Variable in TypeScript
DESCRIPTION: This snippet defines a union type 'Data' and declares a variable 'obj' of that type. It demonstrates TypeScript's type system and variable declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitInferredTypeAlias3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
{
    type Data = string | boolean;
    let obj: Data = true;
}
export { }
```

----------------------------------------

TITLE: Defining Promise.Thenable Interface in TypeScript
DESCRIPTION: Declares a Thenable interface within the Promise module. This interface defines the then method with various overloads to handle different combinations of onFulfilled and onRejected callback types, enabling Promise-like chaining behavior.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bluebirdStaticThis.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export declare module Promise {
	export interface Thenable<R> {
		then<U>(onFulfilled: (value: R) => Thenable<U>, onRejected: (error: any) => Thenable<U>): Thenable<U>;
		then<U>(onFulfilled: (value: R) => Thenable<U>, onRejected?: (error: any) => U): Thenable<U>;
		then<U>(onFulfilled: (value: R) => U, onRejected: (error: any) => Thenable<U>): Thenable<U>;
		then<U>(onFulfilled?: (value: R) => U, onRejected?: (error: any) => U): Thenable<U>;
	}

}
```

----------------------------------------

TITLE: Testing Generic Constructor Assignment with Multiple Parameters in TypeScript
DESCRIPTION: Tests assignment compatibility for generic constructors with multiple parameters of the same generic type (`x: T, y: T`). The snippet shows compatibility when the base types and constraints for the parameters align.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithConstructSignatures4.errors.txt#_snippet_15

LANGUAGE: TypeScript
CODE:
```
var b11: new <T extends Derived>(x: T, y: T) => T; 
a11 = b11; // ok
b11 = a11; // ok
```

----------------------------------------

TITLE: Generic Type Usage Without Type Arguments
DESCRIPTION: Shows multiple incorrect uses of generic types without specifying required type parameters, causing TypeScript compilation errors
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericsWithoutTypeParameters1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var c1: C;
var i1: I;
var c2: C<I>;
var i2: I<C>;

function foo(x: C, y: I) { }
function foo2(x: C<I>, y: I<C>) { }

var x: { a: C } = { a: new C<number>() };
var x2: { a: I } = { a: { bar() { return 1 } } };
```

----------------------------------------

TITLE: ESM Module Imports (index.mjs)
DESCRIPTION: This JavaScript snippet demonstrates importing modules using ESM syntax in an `.mjs` file. It imports modules from 'package/cjs', 'package/mjs', 'package', 'inner/cjs', 'inner/mjs', and 'inner'. This example showcases the usage of `import * as` to import modules and is similar to the index.js example but specifically targets ESM.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackageExports(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
    // esm format file
    import * as cjs from "package/cjs";
    import * as mjs from "package/mjs";
    import * as type from "package";
    cjs;
    mjs;
    type;
    import * as cjsi from "inner/cjs";
    import * as mjsi from "inner/mjs";
    import * as typei from "inner";
    cjsi;
    mjsi;
    typei;
```

----------------------------------------

TITLE: Creating Props Object with Type Error
DESCRIPTION: Creates a Props object that incorrectly assigns a number to a 'data-yadda' property which should be a string according to the index signature, causing a type error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ignoredJsxAttributes.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
let props: Props = {
    foo: "",
    "data-yadda": 42,  // Error
};
```

----------------------------------------

TITLE: Defining Generic Guards with Type Predicates in TypeScript
DESCRIPTION: This snippet defines generic interfaces for guards with lead and follow functionality. It demonstrates incorrect usage of type predicates and attempts to access non-existent properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardOfFormThisMember.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
interface GenericLeadGuard<T> extends GenericGuard<T> {
	lead(): void;
}

interface GenericFollowerGuard<T> extends GenericGuard<T> {
	follow(): void;
}

interface GenericGuard<T> {
	target: T;
	isLeader: this is (GenericLeadGuard<T>);
	isFollower: this is GenericFollowerGuard<T>;
}

let guard: GenericGuard<File>;
if (guard.isLeader) {
	guard.lead();
}
else if (guard.isFollower) {
	guard.follow();
}
```

----------------------------------------

TITLE: Generic Function with String or Undefined Type Constraint in TypeScript
DESCRIPTION: This function demonstrates type inference and constraints with a more specific type union (string | undefined). It shows how TypeScript handles assignments between nullable and non-nullable types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/conditionalTypes1.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
function f2<T extends string | undefined>(x: T, y: NonNullable<T>) {
    x = y;
    y = x;  // Error
    let s1: string = x;  // Error
    let s2: string = y;
}
```

----------------------------------------

TITLE: Importing ECMAScript Module in CommonJS Module - JavaScript
DESCRIPTION: This snippet presents a similar situation as the TypeScript example, where it highlights the failure to import an ECMAScript module from a CommonJS context due to the restriction on using 'require'. It recommends using a dynamic import instead. The input is the module path, and successful execution would result in the module being available in the scope.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesCJSResolvingToESM4_noPackageJson.errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import {} from "./module.mjs";
                   ~~~~~~~~~~~~~~
```

----------------------------------------

TITLE: Testing TypeScript Assignment Compatibility with Object Members
DESCRIPTION: Demonstrates various scenarios of assignment compatibility between classes, interfaces and object literals with Base and Derived2 types. Shows type checking behavior for property 'foo' and validation of required property 'baz'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithObjectMembers4.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class S { foo: Base; }
class T { foo: Derived2; }
var s: S;
var t: T;

interface S2 { foo: Base; }
interface T2 { foo: Derived2; }
var s2: S2;
var t2: T2;

var a: { foo: Base; }
var b: { foo: Derived2; }

var a2 = { foo: new Base() };
var b2 = { foo: new Derived2() };

s = t; // ok
t = s; // error
~
!!! error TS2322: Type 'S' is not assignable to type 'T'.
!!! error TS2322:   Types of property 'foo' are incompatible.
!!! error TS2322:     Property 'baz' is missing in type 'Base' but required in type 'Derived2'.
!!! related TS2728 assignmentCompatWithObjectMembers4.ts:51:35: 'baz' is declared here.
s = s2; // ok
s = a2; // ok

s2 = t2; // ok
t2 = s2; // error
~~
!!! error TS2322: Type 'S2' is not assignable to type 'T2'.
!!! error TS2322:   Types of property 'foo' are incompatible.
!!! error TS2322:     Property 'baz' is missing in type 'Base' but required in type 'Derived2'.
!!! related TS2728 assignmentCompatWithObjectMembers4.ts:51:35: 'baz' is declared here.
s2 = t; // ok
s2 = b; // ok
s2 = a2; // ok

a = b; // ok
b = a; // error
~
!!! error TS2322: Type '{ foo: Base; }' is not assignable to type '{ foo: Derived2; }'.
!!! error TS2322:   Types of property 'foo' are incompatible.
!!! error TS2322:     Property 'baz' is missing in type 'Base' but required in type 'Derived2'.
!!! related TS2728 assignmentCompatWithObjectMembers4.ts:51:35: 'baz' is declared here.
a = s; // ok
a = s2; // ok
a = a2; // ok

a2 = b2; // ok
b2 = a2; // error
~~
!!! error TS2322: Type '{ foo: Base; }' is not assignable to type '{ foo: Derived2; }'.
!!! error TS2322:   Types of property 'foo' are incompatible.
!!! error TS2322:     Property 'baz' is missing in type 'Base' but required in type 'Derived2'.
!!! related TS2728 assignmentCompatWithObjectMembers4.ts:51:35: 'baz' is declared here.
a2 = b; // ok
a2 = t2; // ok
a2 = t; // ok
```

----------------------------------------

TITLE: Demonstrating TypeScript Error: Incorrect Super Call in Derived Class Constructor
DESCRIPTION: This code snippet illustrates a common error in TypeScript where 'super' is called with 'this' as an argument in the constructor of a derived class. This is not allowed because 'this' is not initialized until after the base constructor has been called.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/superCallBeforeThisAccessing6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Base {
    constructor(c) { }
}
class D extends Base {
    private _t;
    constructor() {
        super(this); 
    }
}
```

----------------------------------------

TITLE: TypeScript For-In Loop with Null Checks
DESCRIPTION: Function demonstrating TypeScript's handling of null/undefined checks in for..in loops. Shows how TypeScript treats object access differently inside vs outside the loop context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/forInStrictNullChecksNoError.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f(x: { [key: string]: number; } | null | undefined) {
    for (const key in x) {  // 1
        console.log(x[key]);  // 2
    }
    x["no"]; // should still error
}
```

----------------------------------------

TITLE: Object Literal Union Normalization Test
DESCRIPTION: Demonstrates how TypeScript normalizes object literals in unions upon widening, showing property access and type compatibility checks.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectLiteralNormalization.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
let a1 = [{ a: 0 }, { a: 1, b: "x" }, { a: 2, b: "y", c: true }][0];
a1.a;  // number
a1.b;  // string | undefined
a1.c;  // boolean | undefined
a1 = { a: 1 };
a1 = { a: 0, b: 0 };  // Error
a1 = { b: "y" };  // Error
a1 = { c: true };  // Error
```

----------------------------------------

TITLE: Greeter Object Instantiation and Usage
DESCRIPTION: This snippet demonstrates creating a `Greeter` object and calling its `greet` method. It shows the basic steps of creating an instance of a class and interacting with its methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
 "var greeter = new Greeter(\"Hello, world!\");\nvar str = greeter.greet();"
```

----------------------------------------

TITLE: Destructuring Assignment in For Loop with TypeScript
DESCRIPTION: Demonstrates destructuring assignment within a for loop. It extracts the 'name' property from the robot object and assigns it to 'nameA'. The loop runs once, showcasing object destructuring in a loop context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
for (var nameA = robot.name, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: TypeScript Interface Definition
DESCRIPTION: This snippet defines a simple TypeScript interface named `ImportInterface`. This interface serves as an example for demonstrating import and export scenarios, and the associated errors when it is not properly exported or when import attributes are incorrectly used.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportAttributesModeDeclarationEmit1(module=nodenext).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export interface ImportInterface {}
```

----------------------------------------

TITLE: Function Parameter Validation in TypeScript
DESCRIPTION: Demonstrates TypeScript's type checking and parameter validation for a function with required string parameter and rest number parameters. Shows various error cases including missing required argument and type mismatch.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionCall13.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo(a:string, ...b:number[]){}
foo('foo', 1); 
foo('foo'); 
foo();
foo(1, 'bar');
foo('foo', 1, 3);
```

----------------------------------------

TITLE: Creating Generic Arrays with Rest Parameters in TypeScript
DESCRIPTION: Defines a function `makeArrayG` that uses generic types to return an array of the provided items with a rest parameter. Key functionality includes type safety issues illustrated through various use cases where type mismatches occur.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericRestArgs.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function makeArrayG<T>(...items: T[]): T[] { return items; }
var a1Ga = makeArrayG(1, ""); // no error
var a1Gb = makeArrayG<any>(1, ""); 
var a1Gc = makeArrayG<Object>(1, ""); 
var a1Gd = makeArrayG<number>(1, ""); // error
```

----------------------------------------

TITLE: Handling ECMAScript Module Imports in TypeScript
DESCRIPTION: This snippet demonstrates importing modules using ECMAScript syntax in TypeScript. The imports highlight common errors due to missing file extensions in ECMAScript imports when using specific module resolution settings like 'node16' or 'nodenext'. The code serves as a guide for correctly specifying file paths and extensions in ECMAScript module imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node16).errors.txt#2025-04-21_snippet_11

LANGUAGE: TypeScript
CODE:
```
import * as m1 from "./index.js";
import * as m2 from "./index.mjs";
import * as m3 from "./index.cjs";
import * as m4 from "./subfolder/index.js";
import * as m5 from "./subfolder/index.mjs";
import * as m6 from "./subfolder/index.cjs";
import * as m7 from "./subfolder2/index.js";
import * as m8 from "./subfolder2/index.mjs";
import * as m9 from "./subfolder2/index.cjs";
import * as m10 from "./subfolder2/another/index.js";
import * as m11 from "./subfolder2/another/index.mjs";
import * as m12 from "./subfolder2/another/index.cjs";
// The next ones shouldn't all work - esm format files have no index resolution or extension resolution
import * as m13 from "./";
                     ~~~~
import * as m14 from "./index";
                     ~~~~~~~~~
import * as m15 from "./subfolder";
                     ~~~~~~~~~~~~~
import * as m16 from "./subfolder/";
                     ~~~~~~~~~~~~~~
import * as m17 from "./subfolder/index";
                     ~~~~~~~~~~~~~~~~~~~

```

----------------------------------------

TITLE: Type Definition for Base and Extended Types with Array
DESCRIPTION: This snippet demonstrates type definitions for base and extended types, specifically when dealing with arrays. `BaseItem` is extended to `ExtendedItem` with additional properties, and similarly, `BaseValue` is extended to `ExtendedValue` with arrays of `ExtendedItem` instead of `BaseItem`. The `TEST_VALUE` constant showcases the usage of these types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nestedExcessPropertyChecking.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
    type BaseItem = {
        id: number;
    }
    type ExtendedItem = BaseItem & {
        description: string | null
    };
      
    type BaseValue = {
        // there are other fields
        items: BaseItem[];
    }
    type ExtendedValue = BaseValue & {
        // there are other fields
        items: ExtendedItem[];
    }
    
    const TEST_VALUE: ExtendedValue = {
        items: [
            {id: 1, description: null},
            {id: 2, description: 'wigglytubble'},
        ]
    };

```

----------------------------------------

TITLE: JavaScript Module Export: Mixed Types
DESCRIPTION: This JavaScript code exports different types of values through the `module.exports` object.  Specifically, some properties are assigned values of type `string`, while others are assigned numerical values. Subsequent assignment to `module.exports.bothAfter` overrides initial numeric assignment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleExportWithExportPropertyAssignment3.errors.txt#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
    /// <reference path='./requires.d.ts' />
    module.exports.bothBefore = 'string'
    module.exports = {
        justExport: 1,
        bothBefore: 2,
        bothAfter: 3,
    }
    module.exports.bothAfter = 'string'
    module.exports.justProperty = 'string'
```

----------------------------------------

TITLE: Valid Ambient Declaration in Derived Class
DESCRIPTION: Demonstrates the correct usage of 'declare' in a derived class, overriding a property from the base class 'C'. Because it's declared, no initializer is required.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedUninitializedPropertyDeclaration.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
class DD extends C {
 declare p: 'bye'; // ok
 }
```

----------------------------------------

TITLE: Defining Class with Syntax Errors in TypeScript
DESCRIPTION: This code snippet defines a class 'Foo' with three methods, but contains multiple syntax and declaration errors. It demonstrates how TypeScript identifies and reports various types of errors in class definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserErrorRecoveryIfStatement5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Foo {
  f1() {
    if (a.b) {
  }
  f2() {
  }
  f3() {
  }
}
```

----------------------------------------

TITLE: Array Type Mismatch in TypeScript
DESCRIPTION: Shows an error case where an array of objects with {id: number} type is being assigned an invalid element. The second array element (1) is a number, which doesn't match the required object structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping21.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var foo:{id:number;}[] = [{id:1}]; foo = [{id:1}, 1];
```

----------------------------------------

TITLE: Configuring Package.json with Export Maps for TypeScript
DESCRIPTION: Package configuration that defines an ES module package with export maps specifying paths for JavaScript modules and TypeScript declaration files. This is part of the configuration causing the root ambiguity error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeNextPackageSelfNameWithOutDirDeclDirNestedDirs.errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "name": "@this/package",
  "type": "module",
  "exports": {
    ".": {
      "default": "./dist/index.js",
      "types": "./types/index.d.ts"
    }
  }
}
```

----------------------------------------

TITLE: Properly Initialized Variable Exports in TypeScript
DESCRIPTION: Examples of properly initialized variable exports in TypeScript. Variables are exported with initializers and optional type annotations, demonstrating class instantiation and different variable declaration patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNonInitializedVariablesSystem.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
// Shouldn't be filtered
export var a1 = 1;
export let b1 = 1;
export var c1: string = 'a';
export let d1: number = 1;
class D {}
export var e1 = new D;
export let f1 = new D;
export var g1: D = new D;
export let h1: D = new D;
```

----------------------------------------

TITLE: Handling TS8010 Error in TypeScript
DESCRIPTION: This snippet explains error TS8010, which indicates that type annotations are only valid in TypeScript files. It signals a possible misuse of TypeScript syntax in a JavaScript context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationTypeSyntaxOfVar.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
a.js(1,8): error TS8010: Type annotations can only be used in TypeScript files.
```

----------------------------------------

TITLE: Generic Function with Mapped Type Handlers
DESCRIPTION: Defines a function f1 that takes an object and handlers for each property, using mapped types to ensure type safety for handlers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualPropertyOfGenericFilteringMappedType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function f1<T extends object>(
  data: T,
  handlers: { [P in keyof T as P]: (value: T[P], prop: P) => void },
): void;

f1(
  {
    foo: 0,
    bar: "",
  },
  {
    foo: (value, key) => {},
    bar: (value, key) => {},
  },
);
```

----------------------------------------

TITLE: CJS Module Import Implementation
DESCRIPTION: Implementation of CommonJS format file with imports from different module types (CJS, MJS, JS)
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExportsTrailers(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// cjs format file
import * as cjsi from "inner/cjs/index.cjs";
import * as mjsi from "inner/mjs/index.mjs";
import * as typei from "inner/js/index.js";
cjsi;
mjsi;
typei;
```

----------------------------------------

TITLE: Basic Class Decorator
DESCRIPTION: Valid example of decorator usage with exported class
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-exportModifier.2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
@dec export class C1 { }
```

----------------------------------------

TITLE: Correctly Extending Base Interface with Matching Parameter Types in TypeScript
DESCRIPTION: This snippet shows interface I13 correctly extending Base by implementing the a4 method with all present parameters matching the base interface.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithCallSignaturesWithRestParameters.errors.txt#2025-04-21_snippet_19

LANGUAGE: typescript
CODE:
```
interface I13 extends Base {
    a4: (x: number) => number; // ok, all present params match
}
```

----------------------------------------

TITLE: Type Compatibility Testing with Intersection Types
DESCRIPTION: Function testing type compatibility using intersection types for combined string and number index signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectTypeWithStringAndNumberIndexSignatureToAny.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function f2(sToAny: StringTo<any>, nToAny: NumberTo<any>, bothToAny: StringTo<any> & NumberTo<any>, someObj: Obj) {
    sToAny = nToAny;
    sToAny = bothToAny;
    sToAny = someObj;

    nToAny = sToAny;
    nToAny = bothToAny;
    nToAny = someObj;

    bothToAny = sToAny;
    bothToAny = nToAny;
    bothToAny = someObj;

    someObj = sToAny;
    someObj = nToAny;
    someObj = bothToAny;
}
```

----------------------------------------

TITLE: Preparing Version Number
DESCRIPTION: Converts a version string possibly containing letters and separators into a numerical version. Supports splitting by various delimiters and joining into a single float number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/fixSignatureCaching.errors.txt#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
impl.prepareVersionNo = function (version) {
    var numbers;
    numbers = version.split(/[a-z._ \/\-]/i);
    if (numbers.length === 1) {
        version = numbers[0];
    }
    if (numbers.length > 1) {
        version = numbers[0] + '.';
        numbers.shift();
        version += numbers.join('');
    }
    return Number(version);
};
```

----------------------------------------

TITLE: Error Handling for Missing Node Module Definitions
DESCRIPTION: This snippet handles TypeScript compilation errors related to the missing 'module' definition. It suggests installing the Node type definitions to resolve the errors. This snippet does not have direct code but indicates a common issue faced by TypeScript developers when working with Node.js.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleExports1.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
!!! error TS2580: Cannot find name 'module'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node`.
```

----------------------------------------

TITLE: Class and Function Name Collision in TypeScript
DESCRIPTION: Example showing invalid merging of a class and function with the same name 'foo'. TypeScript requires the class to be ambient (with 'declare' modifier) to allow merging with a function implementation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classOverloadForFunction.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class foo { };
function foo() {}
```

----------------------------------------

TITLE: Demonstrating Type Assignment Compatibility Error in TypeScript
DESCRIPTION: This code shows a type error occurring when attempting to assign an object of type interfaceWithPublicAndOptional<number, string> to a type requiring { one: string }. The error occurs because the 'one' property types are incompatible - number cannot be assigned to string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability12.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module __test1__ {
    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
    export var __val__obj4 = obj4;
}
module __test2__ {
    export var obj = {one: "1"};
    export var __val__obj = obj;
}
__test2__.__val__obj = __test1__.__val__obj4
```

----------------------------------------

TITLE: Referencing Modules and Defining Instances in TypeScript
DESCRIPTION: References two modules and defines a class c1 with a function returning an instance of the class. Requires referenced module paths for compilation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcerootUrlMultifolderSpecifyOutputFile/node/sourcerootUrlMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
/// <reference path='ref/m1.ts'/>
/// <reference path='../outputdir_multifolder_ref/m2.ts'/>
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: Using findLastIndex on Typed Arrays in TypeScript
DESCRIPTION: This code snippet shows attempts to use the 'findLastIndex' method on various typed arrays. The TypeScript compiler throws errors because the method is not recognized for these array types. To resolve this, the 'lib' compiler option needs to be updated to 'es2023' or later.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/findLast(target=es2022).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
new Int8Array().findLastIndex((item) => item === 0);
new Uint8Array().findLastIndex((item) => item === 0);
new Uint8ClampedArray().findLastIndex((item) => item === 0);
new Int16Array().findLastIndex((item) => item === 0);
new Uint16Array().findLastIndex((item) => item === 0);
new Int32Array().findLastIndex((item) => item === 0);
new Uint32Array().findLastIndex((item) => item === 0);
new Float32Array().findLastIndex((item) => item === 0);
new Float64Array().findLastIndex((item) => item === 0);
new BigInt64Array().findLastIndex((item) => item === BigInt(0));
new BigUint64Array().findLastIndex((item) => item === BigInt(0));
```

----------------------------------------

TITLE: Demonstrating Type Error in for-of Loop with Object Destructuring in TypeScript
DESCRIPTION: This code snippet shows a type error where a boolean value from an array element is not assignable to a variable declared as a number. The error occurs during destructuring in a for-of loop when the property 'y' from the array objects (boolean) doesn't match the expected type (number).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/for-of48.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var x: string, y: number;
var array = [{ x: "", y: true }]
enum E { x }
for ({x, y = E.x} of array) {
    x;
    y;
}
```

----------------------------------------

TITLE: Defining Robot Types and Instances in TypeScript
DESCRIPTION: This snippet defines Robot and MultiSkilledRobot types, creates instances of these types, and demonstrates array creation and a function to return robots.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
type Robot = [number, string, string];
type MultiSkilledRobot = [string, [string, string]];

let robotA: Robot = [1, "mower", "mowing"];
let robotB: Robot = [2, "trimmer", "trimming"];
let robots = [robotA, robotB];

function getRobots() {
    return robots;
}
```

----------------------------------------

TITLE: Property Check on Object Intersection - TypeScript
DESCRIPTION: Function f7 checks properties in two objects, x and y, confirming the existence of property 'a' before assessing the objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=true).errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
function f7(x: { a: string, b: number }, y: { a: string } & { b: number }) {
    if ("a" in x) {
        x;
    }
    else {
        x;  // never
    }
    if ("a" in y) {
        y;
    }
    else {
        y;  // never
    }
}
```

----------------------------------------

TITLE: Resolving ESM and CJS Module Import Compatibility
DESCRIPTION: Demonstrates TypeScript module import errors when mixing CommonJS and ECMAScript module import styles, requiring dynamic imports or module format alignment
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesDeclarationEmitWithPackageExports(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import * as cjs from "package/cjs";
import * as mjs from "package/mjs";
import * as type from "package";
```

----------------------------------------

TITLE: Mapping @types Directories to Node Modules in TypeScript
DESCRIPTION: This markdown table demonstrates how TypeScript maps @types directories to their corresponding node_modules directories for various folder structures. It shows the relationship between the location of @types and its parent node_modules directory.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/canWatch/getDirectoryToWatchFailedLookupLocationFromTypeRootUnc.baseline.md#2025-04-21_snippet_4

LANGUAGE: markdown
CODE:
```
| Directory                                                                                            | getDirectoryToWatchFailedLookupLocationFromTypeRoot                                                  |
| ---------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------- |
| //vda1cs4850/folderAtRoot/folder1/folder2/node_modules/@types                                        | //vda1cs4850/folderAtRoot/folder1/folder2/node_modules                                               |
| //vda1cs4850/folderAtRoot/folder1/folder2/folder3/node_modules/@types                                | //vda1cs4850/folderAtRoot/folder1/folder2/folder3/node_modules                                       |
| //vda1cs4850/folderAtRoot/folder1/folder2/folder3/folder4/node_modules/@types                        | //vda1cs4850/folderAtRoot/folder1/folder2/folder3/folder4/node_modules                               |
| //vda1cs4850/folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules/@types                | //vda1cs4850/folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules                       |
| //vda1cs4850/users/username/folderAtRoot/node_modules/@types                                         | //vda1cs4850/users/username/folderAtRoot/node_modules                                                |
| //vda1cs4850/users/username/folderAtRoot/folder1/node_modules/@types                                 | //vda1cs4850/users/username/folderAtRoot/folder1/node_modules                                        |
| //vda1cs4850/users/username/folderAtRoot/folder1/folder2/node_modules/@types                         | //vda1cs4850/users/username/folderAtRoot/folder1/folder2/node_modules                                |
| //vda1cs4850/users/username/folderAtRoot/folder1/folder2/folder3/node_modules/@types                 | //vda1cs4850/users/username/folderAtRoot/folder1/folder2/folder3/node_modules                        |
| //vda1cs4850/users/username/folderAtRoot/folder1/folder2/folder3/folder4/node_modules/@types         | //vda1cs4850/users/username/folderAtRoot/folder1/folder2/folder3/folder4/node_modules                |
| //vda1cs4850/users/username/folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules/@types | //vda1cs4850/users/username/folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules        |
| //vda1cs4850/user/username/folderAtRoot/node_modules/@types                                          | //vda1cs4850/user/username/folderAtRoot/node_modules                                                 |
| //vda1cs4850/user/username/folderAtRoot/folder1/node_modules/@types                                  | //vda1cs4850/user/username/folderAtRoot/folder1/node_modules                                         |
| //vda1cs4850/user/username/folderAtRoot/folder1/folder2/node_modules/@types                          | //vda1cs4850/user/username/folderAtRoot/folder1/folder2/node_modules                                 |
| //vda1cs4850/user/username/folderAtRoot/folder1/folder2/folder3/node_modules/@types                  | //vda1cs4850/user/username/folderAtRoot/folder1/folder2/folder3/node_modules                         |
| //vda1cs4850/user/username/folderAtRoot/folder1/folder2/folder3/folder4/node_modules/@types          | //vda1cs4850/user/username/folderAtRoot/folder1/folder2/folder3/folder4/node_modules                 |
| //vda1cs4850/user/username/folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules/@types  | //vda1cs4850/user/username/folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules         |
| //vda1cs4850/usr/username/folderAtRoot/node_modules/@types                                           | //vda1cs4850/usr/username/folderAtRoot/node_modules                                                  |
| //vda1cs4850/usr/username/folderAtRoot/folder1/node_modules/@types                                   | //vda1cs4850/usr/username/folderAtRoot/folder1/node_modules                                          |
| //vda1cs4850/usr/username/folderAtRoot/folder1/folder2/node_modules/@types                           | //vda1cs4850/usr/username/folderAtRoot/folder1/folder2/node_modules                                  |
| //vda1cs4850/usr/username/folderAtRoot/folder1/folder2/folder3/node_modules/@types                   | //vda1cs4850/usr/username/folderAtRoot/folder1/folder2/folder3/node_modules                          |
| //vda1cs4850/usr/username/folderAtRoot/folder1/folder2/folder3/folder4/node_modules/@types           | //vda1cs4850/usr/username/folderAtRoot/folder1/folder2/folder3/folder4/node_modules                  |
| //vda1cs4850/usr/username/folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules/@types   | //vda1cs4850/usr/username/folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules          |
| //vda1cs4850/home/username/folderAtRoot/node_modules/@types                                          | //vda1cs4850/home/username/folderAtRoot/node_modules                                                 |
| //vda1cs4850/home/username/folderAtRoot/folder1/node_modules/@types                                  | //vda1cs4850/home/username/folderAtRoot/folder1/node_modules                                         |
| //vda1cs4850/home/username/folderAtRoot/folder1/folder2/node_modules/@types                          | //vda1cs4850/home/username/folderAtRoot/folder1/folder2/node_modules                                 |
| //vda1cs4850/home/username/folderAtRoot/folder1/folder2/folder3/node_modules/@types                  | //vda1cs4850/home/username/folderAtRoot/folder1/folder2/folder3/node_modules                         |
| //vda1cs4850/home/username/folderAtRoot/folder1/folder2/folder3/folder4/node_modules/@types          | //vda1cs4850/home/username/folderAtRoot/folder1/folder2/folder3/folder4/node_modules                 |
| //vda1cs4850/home/username/folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules/@types  | //vda1cs4850/home/username/folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules         |
| //vda1cs4850/workspaces/folderAtRoot/node_modules/@types                                             | //vda1cs4850/workspaces/folderAtRoot/node_modules                                                    |
| //vda1cs4850/workspaces/folderAtRoot/folder1/node_modules/@types                                     | //vda1cs4850/workspaces/folderAtRoot/folder1/node_modules                                            |
| //vda1cs4850/workspaces/folderAtRoot/folder1/folder2/node_modules/@types                             | //vda1cs4850/workspaces/folderAtRoot/folder1/folder2/node_modules                                    |
| //vda1cs4850/workspaces/folderAtRoot/folder1/folder2/folder3/node_modules/@types                     | //vda1cs4850/workspaces/folderAtRoot/folder1/folder2/folder3/node_modules                            |
| //vda1cs4850/workspaces/folderAtRoot/folder1/folder2/folder3/folder4/node_modules/@types             | //vda1cs4850/workspaces/folderAtRoot/folder1/folder2/folder3/folder4/node_modules                    |
| //vda1cs4850/workspaces/folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules/@types     | //vda1cs4850/workspaces/folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules            |
```

----------------------------------------

TITLE: Package Configuration for TypeScript Modules
DESCRIPTION: This snippet provides the configuration for a JavaScript package in TypeScript. It includes essential fields like package name, privacy settings, module type, and exports pointing to the index file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSourceTs(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module",
    "exports": "./index.ts"
}
```

----------------------------------------

TITLE: Type Error in For-Of Loop with Mixed Types
DESCRIPTION: A code example showing a type error where a string variable is used to iterate over an array containing both numbers and strings. TypeScript compiler catches the type mismatch since numbers cannot be assigned to a string variable.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/for-of11.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var v: string;
for (v of [0, ""]) { }
```

----------------------------------------

TITLE: Demonstrating TypeScript Control Flow Analysis with Closures
DESCRIPTION: This code shows multiple functions that demonstrate how TypeScript analyzes the flow of possibly undefined values when used in callback functions. It illustrates when TypeScript correctly tracks narrowed types within closures and when it fails to maintain type safety guarantees.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implicitConstParameters.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function doSomething(cb: () => void) {
    cb();
}

function fn(x: number | string) {
  if (typeof x === 'number') {
      doSomething(() => x.toFixed());
  }
}

function f1(x: string | undefined) {
    if (!x) {
        return;
    }
    doSomething(() => x.length);
}

function f2(x: string | undefined) {
    if (x) {
        doSomething(() => {
            doSomething(() => x.length);
        });
    }
}

function f3(x: string | undefined) {
    inner();
    function inner() {
        if (x) {
            doSomething(() => x.length);
        }
    }
}

function f4(x: string | undefined) {
    x = "abc";
    if (x) {
        doSomething(() => x.length);
    }
}

function f5(x: string | undefined) {
    if (x) {
        doSomething(() => x.length);
                      //~
//! error TS18048: 'x' is possibly 'undefined'.
    }
    x = "abc";  // causes x to be considered non-const
}


function f6(x: string | undefined) {
    const y = x || "";
    if (x) {
        doSomething(() => y.length);
    }
}
```

----------------------------------------

TITLE: Defining Readonly Property in TypeScript Class Constructor
DESCRIPTION: This snippet demonstrates defining a readonly property in a class constructor and the error that occurs when trying to reassign it. It shows that readonly properties cannot be modified after initialization.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/readonlyInConstructorParameters.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
    constructor(readonly x: number) {}
}
new C(1).x = 2;
```

----------------------------------------

TITLE: Importing ECMAScript Modules in TypeScript (.ts)
DESCRIPTION: This TypeScript snippet attempts to import an ECMAScript module into a TypeScript file configured as a CommonJS module. An error occurs due to the module mismatch, suggesting a dynamic import or a configuration change.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesCJSResolvingToESM2_cjsPackageJson.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import {} from "./module.mjs";
```

----------------------------------------

TITLE: Unicode-Aware Regular Expression Patterns in TypeScript
DESCRIPTION: Shows regular expression patterns with the Unicode flag enabled, demonstrating proper Unicode property syntax requirements and escape sequence validation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/regularExpressionAnnexB.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// Compare to
/\q\u\i\c\k\_\f\o\x\-\j\u\m\p\s/u,
/[\q\u\i\c\k\_\f\o\x\-\j\u\m\p\s]/u,
/\P[\P\w-_]/u,
```

----------------------------------------

TITLE: Property Existence Check with Unknown Type - TypeScript
DESCRIPTION: Function f10 verifies the existence of property 'a' in an object of unknown structure, showcasing type handling with conditional accesses.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=true).errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
function f10(x: { a: unknown }) {
    if ("a" in x) {
        x;
    }
    else {
        x;
    }
}
```

----------------------------------------

TITLE: Using Interface and Class Instances in TypeScript
DESCRIPTION: Demonstrates usage of interface and class instances, including method calls and assignment from class instances to interface variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserAstSpans1.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var i1_i: i1;
i1_i.i1_f1();
i1_i.i1_nc_f1();
i1_i.f1();
i1_i.nc_f1();
i1_i.i1_l1();
i1_i.i1_nc_l1();
i1_i.l1();
i1_i.nc_l1();
var c1_i = new c1();
c1_i.i1_f1();
c1_i.i1_nc_f1();
c1_i.f1();
c1_i.nc_f1();
c1_i.i1_l1();
c1_i.i1_nc_l1();
c1_i.l1();
c1_i.nc_l1();
// assign to interface
i1_i = c1_i;
i1_i.i1_f1();
i1_i.i1_nc_f1();
i1_i.f1();
i1_i.nc_f1();
i1_i.i1_l1();
i1_i.i1_nc_l1();
i1_i.l1();
i1_i.nc_l1();
```

----------------------------------------

TITLE: Demonstrating Missing Override Modifiers in TypeScript
DESCRIPTION: This snippet showcases the TypeScript compiler error TS4114, which occurs when a method in a derived class overrides a method from a base class (or intersected interfaces) without using the `override` keyword. The code defines interfaces and classes to illustrate this scenario. The `Bar` class extends a composite type `Foo` and attempts to override methods defined in interfaces `I1` and `I2`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/override20.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    const Foo: C1 & C2 =
        class {
            m1() { }
            m2() { }
        }
    
    interface I1 {
        m1(): void;
    }
    
    interface I2 {
        m1(): void;
        m2(): void;
    }
    
    interface C1 {
        new(...args: any[]): I1;
    }
    
    interface C2 {
        new(...args: any[]): I2;
    }
    
    export class Bar extends Foo {
        m1() {
        
            super.m1();
        }
        m2() {
        
            super.m2();
        }
    }
```

----------------------------------------

TITLE: Nested Excess Property Checks with Discriminated Unions
DESCRIPTION: This snippet demonstrates how TypeScript performs nested excess property checks with discriminated unions. It shows that excess properties are caught even in nested objects within a discriminated union.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/excessPropertyCheckWithUnions.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
type AN = { a: string } | { c: string }
type BN = { b: string }
type AB = { kind: "A", n: AN } | { kind: "B", n: BN }
const abab: AB = {
    kind: "A",
    n: {
        a: "a",
        b: "b", // excess -- kind: "A"
    }
}
const abac: AB = {
    kind: "A",
    n: {
        a: "a",
        c: "c", // ok -- kind: "A", an: { a: string } | { c: string }
    }
}
```

----------------------------------------

TITLE: Handling Missing Type Declarations in TypeScript
DESCRIPTION: This snippet addresses errors related to missing type declarations for the module 'exports-and-types-versions/foo'. It suggests enabling the 'allowJs' option and creating a declaration file for the module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsBlocksTypesVersions(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
error TS6504: File '/node_modules/exports-and-types-versions/dist/foo.js' is a JavaScript file. Did you mean to enable the 'allowJs' option?
  The file is in the program because:
    Root file specified for compilation
/main.cts(1,16): error TS7016: Could not find a declaration file for module 'exports-and-types-versions/foo'. '/node_modules/exports-and-types-versions/dist/foo.js' implicitly has an 'any' type.
  If the 'exports-and-types-versions' package actually exposes this module, try adding a new declaration (.d.ts) file containing `declare module 'exports-and-types-versions/foo';`
/main.cts(2,16): error TS2307: Cannot find module 'exports-and-types-versions/nope' or its corresponding type declarations.
/main.cts(5,16): error TS2307: Cannot find module 'exports-and-types-versions/versioned-nah' or its corresponding type declarations.
/main.mts(1,16): error TS7016: Could not find a declaration file for module 'exports-and-types-versions/foo'. '/node_modules/exports-and-types-versions/dist/foo.js' implicitly has an 'any' type.
  There are types at '/node_modules/exports-and-types-versions/types/foo.d.ts', but this result could not be resolved when respecting package.json "exports". The 'exports-and-types-versions' library may need to update its package.json or typings.
/main.mts(2,16): error TS2307: Cannot find module 'exports-and-types-versions/nope' or its corresponding type declarations.
/main.mts(5,16): error TS2307: Cannot find module 'exports-and-types-versions/versioned-nah' or its corresponding type declarations.
```

----------------------------------------

TITLE: Custom Type Guard Functions in TypeScript
DESCRIPTION: These functions are custom type guards that use instanceof to check the type of an object and narrow its type in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/instanceofWithStructurallyIdenticalTypes.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
function isC1(c: C1 | C2 | C3): c is C1 { return c instanceof C1 }
function isC2(c: C1 | C2 | C3): c is C2 { return c instanceof C2 }
function isC3(c: C1 | C2 | C3): c is C3 { return c instanceof C3 }
```

----------------------------------------

TITLE: Package Configuration for ESM (JSON)
DESCRIPTION: This package.json snippet configures the project to use ES modules by setting the 'type' field to 'module'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsExportAssignment(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Incorrect JSX Attribute Usage
DESCRIPTION: This snippet demonstrates incorrect usage of JSX attributes, using 'class' instead of 'className' and 'for' instead of 'htmlFor'. These errors are caught by TypeScript's type checking system.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/spellingSuggestionJSXAttribute.errors.txt#2025-04-21_snippet_1

LANGUAGE: JSX
CODE:
```
<a class="" />;
<a for="" />; // should have no fix
<label for="" />;
<label for="" class="" />;
<MyComp class="" />;
<MyComp2 class="" />;
<MyComp for="" />;
<MyComp2 for="" />;
```

----------------------------------------

TITLE: Using Array Destructuring Assignment (TypeScript)
DESCRIPTION: Shows how to use array destructuring to assign multiple values from an array literal or a function call result to variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.sourcemap.txt#_snippet_73

LANGUAGE: TypeScript
CODE:
```
[var1, var2] = ["none", "none"]
```

LANGUAGE: TypeScript
CODE:
```
[varA, varB] = getMultiRobot()
```

----------------------------------------

TITLE: JSX Compilation Error with Missing Module in TypeScript
DESCRIPTION: This snippet shows a TypeScript compilation error (TS2875) encountered when using JSX syntax. The error occurs because the TypeScript compiler cannot find the required module path 'preact/jsx-dev-runtime'. This often happens when the necessary type definitions for the JSX runtime (e.g., for React or Preact) are not installed or properly configured in the project.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxJsxsCjsTransformCustomImport(jsx=react-jsxdev).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/// <reference path="/.lib/react16.d.ts" />
const a = <>
      <p></p>
      text
      <div className="foo"></div>
    </>
    
export {};
```

----------------------------------------

TITLE: Handling JSON Data in TypeScript
DESCRIPTION: This TypeScript snippet shows how to import and use JSON data. It imports data from a JSON file and performs a basic comparison of values. Dependencies include a JSON file structured with key-value pairs. The snippet checks if 'a' is true and compares values. It expects the JSON file to have correctly formatted strings, using double quotes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/requireOfJsonFileWithErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import b1 = require('./b.json');
let x = b1.a;
import b2 = require('./b.json');
if (x) {
    let b = b2.b;
    x = (b1.b === b);
}
```

----------------------------------------

TITLE: Optional Property Check - TypeScript
DESCRIPTION: Function f13 checks for the presence of an optional property 'a' in an object, showcasing the handling of potentially undefined or missing properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=true).errors.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
function f13(x: { a?: string }) {
    if ("a" in x) {
        x;
    }
    else {
        x;
    }
}
```

----------------------------------------

TITLE: CommonJS Import Resolution Error Examples
DESCRIPTION: Shows scenarios where CommonJS imports fail due to module type constraints and resolution limitations in TypeScript
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node18).errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
import m24 = require("./");
```

LANGUAGE: typescript
CODE:
```
import m25 = require("./index");
```

----------------------------------------

TITLE: Demonstrating Template Literal Type Constraints in TypeScript
DESCRIPTION: This code illustrates how TypeScript handles assignability of generic functions with template literal types. It shows that a function with a narrower constraint (1|2|3) cannot be assigned to a type requiring a wider constraint (1|2|3|4), while assignment to same or narrower constraints succeeds.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes7.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// https://github.com/microsoft/TypeScript/issues/57807

interface NMap {
  1: 'A'
  2: 'B'
  3: 'C'
  4: 'D'
}

declare const g: <T extends 1 | 2 | 3>(x: `${T}`) => NMap[T]

type G1 = <T extends 1 | 2 | 3>(x: `${T}`) => NMap[T]
const g1: G1 = g; // ok

type G2 = <T extends 1 | 2 | 3 | 4>(x: `${T}`) => NMap[T]
const g2: G2 = g; // error

type G3 = <T extends 1 | 2>(x: `${T}`) => NMap[T]
const g3: G3 = g; // ok
```

----------------------------------------

TITLE: TypeScript Static Class with Context Boundaries
DESCRIPTION: Illustrates different scenarios where 'this' context loses access to static properties, causing compile-time type errors in static class methods and expressions
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeOfThisInStaticMembers8(target=es6).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    static f = 1;
    static arrowFunctionBoundary = () => this.f + 1;
    static functionExprBoundary = function () { return this.f + 2 };
    static classExprBoundary = class { a = this.f + 3 };
    static functionAndClassDeclBoundary = (() => {
        function foo () {
            return this.f + 4
        }
        class CC {
            a = this.f + 5
            method () {
                return this.f + 6
            }
        }
    })();
}
```

----------------------------------------

TITLE: Package JSON Structure in TypeScript
DESCRIPTION: This snippet displays the structure of the 'package.json' file for the 'pkg' module, defining exports for different module types. It's essential for configuring module resolution for various environments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportModeDeclarationEmit1(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
    {
        "name": "pkg",
        "version": "0.0.1",
        "exports": {
            "import": "./import.js",
            "require": "./require.js"
        }
    }
```

----------------------------------------

TITLE: Defining and Accessing Module Properties in TypeScript
DESCRIPTION: This code snippet demonstrates the declaration of variables within a TypeScript module and highlights errors related to variable visibility and scope. The snippet includes errors for accessing properties that are not publicly available. Key parameters involve module properties defined as 'y' and 'z', where 'y' is private and 'z' is public.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleProperty2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module M {
    function f() {
        var x;
    }
    var y;
    export var z;
    var test1=x;
                  ~
!!! error TS2304: Cannot find name 'x'.
    var test2=y; // y visible because same module
}

module N {
    var test3=M.y; // nope y private property of M
                    ~
!!! error TS2339: Property 'y' does not exist on type 'typeof M'.
    var test4=M.z; // ok public property of M
}
```

----------------------------------------

TITLE: Declaring Constant in z.d.ts
DESCRIPTION: This snippet declares a constant 'x' of type number in a TypeScript declaration file (z.d.ts) and exports it as the default export. Declaration files describe the shape of existing JavaScript code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionNoTsCJS.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    declare const x: number;
    export default x;
    
```

----------------------------------------

TITLE: Importing Module in TypeScript with Compiler Error
DESCRIPTION: This code snippet demonstrates an attempt to import a module in TypeScript, resulting in a compiler error. The error suggests setting the 'moduleResolution' option to 'nodenext' or adding aliases to the 'paths' option.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/shorthand-property-es6-amd.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import {foo} from './foo';
const baz = 42;
const bar = { foo, baz };
```

----------------------------------------

TITLE: Implementing EPromise Class with Either Type in TypeScript
DESCRIPTION: Implementation of a custom Promise-like class (EPromise) that works with Either types to handle success and failure cases. The class enforces type safety through the 'this' parameter in the then method, requiring the error type to be 'never' for proper Promise chaining.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/await_incorrectThisType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type Either<E, A> = Left<E> | Right<A>;
type Left<E> = { tag: 'Left', e: E };
type Right<A> = { tag: 'Right', a: A };

const mkLeft = <E>(e: E): Either<E, never> => ({ tag: 'Left', e });
const mkRight = <A>(a: A): Either<never, A> => ({ tag: 'Right', a });

class EPromise<E, A> implements PromiseLike<A> {
    static succeed<A>(a: A): EPromise<never, A> {
        return new EPromise(Promise.resolve(mkRight(a)));
    }

    static fail<E>(e: E): EPromise<E, never> {
        return new EPromise(Promise.resolve(mkLeft(e)));
    }

    constructor(readonly p: PromiseLike<Either<E, A>>) { }

    then<B = A, B1 = never>(
        this: EPromise<never, A>,
        onfulfilled?: ((value: A) => B | PromiseLike<B>) | null | undefined,
        onrejected?: ((reason: any) => B1 | PromiseLike<B1>) | null | undefined
    ): PromiseLike<B | B1> {
        return this.p.then(
            either => onfulfilled?.((either as Right<A>).a) ?? (either as Right<A>).a as unknown as B,
            onrejected
        )
    }
}
```

----------------------------------------

TITLE: Testing ES2024 Atomics.waitAsync Feature
DESCRIPTION: Code that tests the ES2024 Atomics.waitAsync functionality with both Int32Array and BigInt64Array. The code demonstrates error cases when the compiler is not configured for ES2024 library support.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es2024SharedMemory.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const sab = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * 1024);
const int32 = new Int32Array(sab);
const sab64 = new SharedArrayBuffer(BigInt64Array.BYTES_PER_ELEMENT * 1024);
const int64 = new BigInt64Array(sab64);
const waitValue = Atomics.wait(int32, 0, 0);
const { async, value } = Atomics.waitAsync(int32, 0, 0);
const { async: async64, value: value64 } = Atomics.waitAsync(int64, 0, BigInt(0));

const main = async () => {
    if (async) {
        await value;
    }
    if (async64) {
        await value64;
    }
}
main();
```

----------------------------------------

TITLE: Invalid Regular Expression Escape Sequences in TypeScript
DESCRIPTION: Demonstrates invalid escape sequences and Unicode property patterns in regular expressions, showing common syntax errors that TypeScript catches during compilation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/regularExpressionAnnexB.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const regexes: RegExp[] = [
  /\q\u\i\c\k\_\f\o\x\-\j\u\m\p\s/,
  /[\q\u\i\c\k\_\f\o\x\-\j\u\m\p\s]/,
  /\P[\P\w-_]/,
];
```

----------------------------------------

TITLE: Example Functions Using Rest Tuples
DESCRIPTION: This snippet shows several function declarations and invocations that leverage rest tuples, alongside highlighting parameter type mismatches that occur due to rest parameter usage. It assumes that the user is familiar with TypeScript type declarations and function signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/restTuplesFromContextualTypes.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
declare function f2(cb: (...args: typeof t2) => void): void;

f2((a, b, c) => {})
f2((...x) => {})
f2((a, ...x) => {})
f2((a, b, ...x) => {})
f2((a, b, c, ...x) => {})

declare const t3: [boolean, ...string[]];

(function (a, b, c){})(1, ...t3);
(function (...x){})(1, ...t3);
(function (a, ...x){})(1, ...t3);
(function (a, b, ...x){})(1, ...t3);
(function (a, b, c, ...x){})(1, ...t3);
```

----------------------------------------

TITLE: Mismatched JSX closing tag
DESCRIPTION: This snippet demonstrates an error where the closing tag does not match the opening tag.  JSX requires that all opening tags have a corresponding and matching closing tag.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxInvalidEsprimaTestSuite.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
"<a></b>;"
```

----------------------------------------

TITLE: Defining Interface with String Index and Union Property
DESCRIPTION: This snippet defines an interface 'I' with a string index signature allowing any property with a string key to have type 'any'. It also defines two specific properties 'foo' and 'foo2' using union types. This interface is designed to demonstrate valid assignments as both union types are subtypes of 'any'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionSubtypeIfEveryConstituentTypeIsSubtype.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface I {
        [x: string]: any;
        foo: string | number; // ok
        foo2: e | number; // ok
    }
```

----------------------------------------

TITLE: Array Initialization with Logical OR Assignment
DESCRIPTION: Function demonstrating the use of logical OR assignment (||=) to initialize an array before pushing a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment4(target=es2020).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo1(results: number[] | undefined) {
    (results ||= []).push(100);
}
```

----------------------------------------

TITLE: Unknown to String Type Guard
DESCRIPTION: Type guard function that narrows unknown type to string using typeof operator.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypePredicates.errors.txt#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
function isStringFromUnknown(x: unknown) {
  return typeof x === "string";
}
```

----------------------------------------

TITLE: Complex Nested Generic Type Signatures
DESCRIPTION: TypeScript class methods with multiple nested generic type parameters, demonstrating advanced type composition and inheritance
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_24

LANGUAGE: typescript
CODE:
```
export class dauricus<T0, T1> {
  chinensis() : Lanthanum.jugularis { var x : Lanthanum.jugularis; () => { var y = this; }; return x; }
  duodecimcostatus() : lavali.xanthognathus { var x : lavali.xanthognathus; () => { var y = this; }; return x; }
}
```

----------------------------------------

TITLE: Declare Valid TypeScript Object Literal Type
DESCRIPTION: Declares a variable `v1` with an object literal type that explicitly defines the structure of its properties `x` and `y`. This demonstrates how to define object types inline in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generics2.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var v1: {
    x: { a: string; }
    y: { a: string; b: string; c: string };
}; // Ok
```

----------------------------------------

TITLE: Defining Classes and Type Aliases in TypeScript
DESCRIPTION: This snippet defines multiple classes such as Shape and TaggedShape, as well as type aliases like Dictionary and NumericallyIndexed to demonstrate the use of types and interfaces in TypeScript. It sets up the basic definitions needed for further operations using keyof and indexed access.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Shape {
    name: string;
    width: number;
    height: number;
    visible: boolean;
}

class TaggedShape extends Shape {
    tag: string;
}

class Item {
    name: string;
    price: number;
}

class Options {
    visible: "yes" | "no";
}

type Dictionary<T> = { [x: string]: T };
type NumericallyIndexed<T> = { [x: number]: T };
```

----------------------------------------

TITLE: Valid Class Extension with Base Constructor
DESCRIPTION: Shows proper implementation of class extension using a factory function that returns a constructor type with multiple overloads.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classExtendingClassLikeType.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface BaseConstructor {
    new (x: string, y: string): Base<string, string>;
    new <T>(x: T): Base<T, T>;
    new <T>(x: T, y: T): Base<T, T>;
    new <T, U>(x: T, y: U): Base<T, U>;
}

declare function getBase(): BaseConstructor;

class D1 extends getBase() {
    constructor() {
        super("abc", "def");
        this.x = "x";
        this.y = "y";
    }
}
```

----------------------------------------

TITLE: Defining Action Type with Union Types in TypeScript
DESCRIPTION: This snippet defines a type `Action` as a union of two object types, each representing a different action with a `kind` and a `payload`.  The `kind` property is a string literal, and the `payload` is either a number or a string depending on the `kind`. This type is used in subsequent function examples to demonstrate type narrowing through conditional checks on the `kind` property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    type Action =
        | { kind: 'A', payload: number }
        | { kind: 'B', payload: string };

```

----------------------------------------

TITLE: Function Type Mismatch in TypeScript Array
DESCRIPTION: This code snippet shows a TypeScript error where a function returning a string is passed in an array where all functions should return numbers. The error occurs because the second function in the array returns 'foo' (a string) instead of a number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping33.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function foo(param: {():number; (i:number):number; }[]) { }; foo([function(){return 1;}, function(){return "foo"}]);
```

----------------------------------------

TITLE: Defining Module Interface in file2.ts
DESCRIPTION: Declaration of 'someMod' module interface with number return type methods that conflict with declarations in file1.ts
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/duplicateIdentifierRelatedSpans6.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
/// <reference path="./file1" />

declare module "someMod" {
    export interface TopLevel {
        duplicate1(): number;
        duplicate2(): number;
        duplicate3(): number;
    }
}
export {};
```

----------------------------------------

TITLE: Robot Data Access Functions
DESCRIPTION: Defines two functions getRobots() and getMultiRobots() that return collections of robot objects. Includes function declarations and return statements for accessing robot data.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function getRobots() {
    return robots;
}

function getMultiRobots() {
    return multiRobots;
}
```

----------------------------------------

TITLE: Class with Initialized Property Before Constructor
DESCRIPTION: Demonstrates a derived class with an initialized property before the constructor, showing different initialization scenarios
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassParameterProperties.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
class Derived4 extends Base {
    a = 1;
    constructor(y: string) {
        var b = 2;
        super();
    }
}
```

----------------------------------------

TITLE: Pick Type Constraint Errors
DESCRIPTION: Shows error cases when using Pick utility type with invalid property keys.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeErrors.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
type T10 = Pick<Shape, "name">;
type T11 = Pick<Shape, "foo">;  // Error
type T12 = Pick<Shape, "name" | "foo">;  // Error
type T13 = Pick<Shape, keyof Named>;
type T14 = Pick<Shape, keyof Point>;  // Error
type T15 = Pick<Shape, never>;
type T16 = Pick<Shape, undefined>;  // Error
```

----------------------------------------

TITLE: Exporting Constants in TypeScript
DESCRIPTION: This snippet defines and exports three constants: 'as', 'type', and 'something'. These exports are used in subsequent import statements to demonstrate various TypeScript compiler errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importSpecifiers1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const as = 0;
export const type = 0;
export const something = 0;
```

----------------------------------------

TITLE: Initialize For Loop with Variable Assignment and Defaults (TypeScript)
DESCRIPTION: Initializes a for loop, assigning variables `nameA` and `skillA` based on properties of a `robot` object. It uses ternary operators to provide default string values ('noName', 'skill') if the source property is `void 0`. The loop is set to iterate once.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_51

LANGUAGE: TypeScript
CODE:
```
for (_6 = robot.name, nameA = _6 === void 0 ? "noName" : _6, _7 = robot.skill, skillA = _7 === void 0 ? "skill" : _7, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Destructuring Unused Parameters in TypeScript Functions
DESCRIPTION: This example shows a function with destructured parameters that are all unused. TypeScript raises an error for this case, indicating that all destructured elements are unused.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedParametersWithUnderscore.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function f2({_a, __b}) {
}
```

----------------------------------------

TITLE: Accessor Override Error in TypeScript Classes
DESCRIPTION: Demonstrates a TypeScript error case where class C2 incorrectly tries to override the accessor property 'a' from parent class C1 with a regular instance property. Class C3 shows the correct way to override an accessor by using getter method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/autoAccessor6(target=esnext,usedefineforclassfields=true).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C1 {
    accessor a: any;
}

class C2 extends C1 {
    a = 1;
}

class C3 extends C1 {
    get a() { return super.a; }
}
```

----------------------------------------

TITLE: package.json Configuration (package)
DESCRIPTION: This `package.json` file configures the 'package' module, specifying its name, privacy, module type, and export mappings. The `exports` field maps './cjs' to 'index.cjs', './mjs' to 'index.mjs', and '.' to 'index.js', defining the module's entry points for different module systems.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackageExports(module=nodenext).errors.txt#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
    {
        "name": "package",
        "private": true,
        "type": "module",
        "exports": {
            "./cjs": "./index.cjs",
            "./mjs": "./index.mjs",
            ".": "./index.js"
        }
    }
```

----------------------------------------

TITLE: Exporting a Class in TypeScript
DESCRIPTION: Defines a class A and exports it from module a.ts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export class A {}
```

----------------------------------------

TITLE: Interface Implementation with Parameter Mismatch in TypeScript
DESCRIPTION: This code snippet demonstrates a TypeScript error (TS2416) where a class `C1` implements an interface `I1`, but the `method` implementation in `C1` has different parameter requirements (two parameters, one optional) than the `method` signature in `I1` (no parameters). This causes a type incompatibility because the class's method can't fulfill the interface's contract, as the interface expects a method that can be called without arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/requiredInitializedParameter2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I1 {
    method();
}

class C1 implements I1 {
    method(a = 0, b) { }
    ~~~~~~
!!! error TS2416: Property 'method' in type 'C1' is not assignable to the same property in base type 'I1'.
!!! error TS2416:   Type '(a: number, b: any) => void' is not assignable to type '() => any'.
!!! error TS2416:     Target signature provides too few arguments. Expected 2 or more, but got 0.
}
```

----------------------------------------

TITLE: Excess Property Checks with Overlapping Optional Properties in TypeScript
DESCRIPTION: This snippet defines interfaces with overlapping optional properties and demonstrates how TypeScript handles excess property checks in different union type configurations. It shows cases where properties are rejected due to type reduction.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/excessPropertyCheckWithMultipleDiscriminants.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
interface Common {
    type: "A" | "B" | "C" | "D";
    n: number;
}
interface A {
    type: "A";
    a?: number;
}
interface B {
    type: "B";
    b?: number;
}

type CommonWithOverlappingOptionals = Common | (Common & A) | (Common & B);

// Should reject { b } because reduced to Common | (Common & A)
const c1: CommonWithOverlappingOptionals = {
    type: "A",
    n: 1,
    a: 1,
    b: 1  // excess property
}

type CommonWithDisjointOverlappingOptionals = Common | A | B;

// Should still reject { b } because reduced to Common | A, even though these are now disjoint
const c2: CommonWithDisjointOverlappingOptionals = {
    type: "A",
    n: 1,
    a: 1,
    b: 1  // excess property
}
```

----------------------------------------

TITLE: Root Package.json Configuration
DESCRIPTION: Package configuration specifying the project name, privacy setting, and module type as ESM (via "type": "module").
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExportsTrailers(module=nodenext).errors.txt#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Exporting a Constant in TypeScript
DESCRIPTION: This code snippet exports a constant named 'b' with a null value from a module. This demonstrates the basic syntax for exporting definitions in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reexportMissingDefault1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export const b = null;
```

----------------------------------------

TITLE: Type Aliases for Generic Function Instantiations
DESCRIPTION: This snippet creates type aliases for different instantiations of the generic function 'fx', showcasing both valid and invalid type argument combinations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/instantiationExpressions.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
type T10 = typeof fx<>;  // Error
type T11 = typeof fx<string>;  // { (x: string): string; (x: string, n: number): string; }
type T12 = typeof fx<string, number>;  // (t: [string, number]) => [string, number]
type T13 = typeof fx<string, number, boolean>;  // Error
```

----------------------------------------

TITLE: Defining Generic Class in TypeScript
DESCRIPTION: This snippet defines a generic class C with a type parameter T. No errors are reported for this code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedTypeParameters8.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C<T> { }
```

----------------------------------------

TITLE: Destructuring and Iteration with Objects in TypeScript
DESCRIPTION: This code uses object destructuring to extract 'primary' and 'secondary' skills into 'primaryA' and 'secondaryA' and iterates once using a for loop. There is a dependency on JavaScript object syntax. The object '_c' contains nested properties under 'skills', and the loop runs with index 'i' iterating until less than 1. Inputs include the 'name' and 'skills' properties, with the expected output as a structured iteration over these properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_9

LANGUAGE: TypeScript
CODE:
```
for (var _c = { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }.skills, primaryA = _c.primary, secondaryA = _c.secondary, i = 0; i < 1; i++) {}
```

----------------------------------------

TITLE: Interface and Function Overload Implementation with Implicit Any Types
DESCRIPTION: Demonstrates common TypeScript errors when type annotations are missing. Shows interface property without type annotation and function overloads missing return type and parameter type annotations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyWithOverloads.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface A {
    foo;
}
interface B { }

function callb(lam: (l: A) => void);
function callb(lam: (n: B) => void);
function callb(a) { }
callb((a) => { a.foo; }); // error, chose first overload
```

----------------------------------------

TITLE: Testing multiple const variable capture in do-while loops in TypeScript
DESCRIPTION: Demonstrates how multiple const variables are captured in do-while loops. The function declares two const variables (x and y) inside the loop body and creates closures that reference both.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop5.errors.txt#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
function foo7_c(x) {
    do {
        const x = 1, y = 1;
        var v = x;
        (function() { return x + y + v });
        (() => x + y + v);
        if (x == 1) {
            return;
        }
    } while (1 === 1)
    
    use(v);
}
```

----------------------------------------

TITLE: Defining an Object as Default Export
DESCRIPTION: This snippet defines an object with a property 'uhoh' as another default export. This leads to a compilation error because only one default export is allowed per module in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/multipleExportDefault1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export default {
    uhoh: "another default",
};
```

----------------------------------------

TITLE: Package Configuration for Inner Module (JSON)
DESCRIPTION: Defines the configuration for the 'inner' package, including its export mappings. It specifies how different module formats (CJS, MJS, JS) should be resolved when imported.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExports(module=nodenext).errors.txt#2025-04-21_snippet_4

LANGUAGE: JSON
CODE:
```
{
    "name": "inner",
    "private": true,
    "exports": {
        "./cjs/*": "./*.cjs",
        "./mjs/*": "./*.mjs",
        "./js/*": "./*.js"
    }
}
```

----------------------------------------

TITLE: Complex Destructuring Assignment in TypeScript
DESCRIPTION: This code snippet demonstrates a complex destructuring assignment pattern in TypeScript. It includes nested destructuring, default values, and array destructuring with rest parameters. The assignment extracts values from an array 'robotB' and assigns them to various variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues3.sourcemap.txt#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
[nameMB = "helloNoName", [primarySkillB = "noSkill", secondarySkillB = "noSkill"] = []] = ["trimmer", ["trimming", "edging"]];

[numberB = -1, ...robotAInfo] = robotB;
```

----------------------------------------

TITLE: Function with Rest Parameters
DESCRIPTION: Demonstrates a function using rest parameters, allowing a variable number of arguments to be passed
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/requiredInitializedParameter1.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function f4(a, b = 0, ...c) { }
```

----------------------------------------

TITLE: Defining Base and Derived Interfaces in TypeScript
DESCRIPTION: Defines a base interface and a derived interface that extends it with an additional method that returns the base type. This pattern demonstrates the inheritance relationship and type conversion issues.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/fixingTypeParametersRepeatedly2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Base {
    baseProp;
}
interface Derived extends Base {
    toBase(): Base;
}
```

----------------------------------------

TITLE: Negative Type Guard with typeof in TypeScript
DESCRIPTION: This snippet shows the behavior of negative type guards using '!=='. It demonstrates how TypeScript narrows types in both the true and false branches of the condition when comparing against "Object".
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardOfFormTypeOfOther.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
if (typeof strOrC !== "Object") {
    var r2: string = strOrC; // string
}
else {
    c = strOrC; // C
}
if (typeof numOrC !== "Object") {
    var r3: number = numOrC; // number
}
else {
    c = numOrC; // C
}
if (typeof boolOrC !== "Object") {
    var r4: boolean = boolOrC; // boolean
}
else {
    c = boolOrC; // C
}

if (typeof strOrNumOrBool !== "Object") {
    let q1: string | number | boolean = strOrNumOrBool; // string | number | boolean
}
else {
    let q2: {} = strOrNumOrBool; // {}
}
```

----------------------------------------

TITLE: Type Guard with Union of Multiple Types in TypeScript
DESCRIPTION: This snippet demonstrates a type guard applied to a union of string, number, and boolean types. It shows how TypeScript handles type narrowing in this case when comparing to "Object".
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardOfFormTypeOfOther.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
if (typeof strOrNumOrBool === "Object") {
    let q1: {} = strOrNumOrBool; // {}
}
else {
    let q2: string | number | boolean = strOrNumOrBool; // string | number | boolean
}
```

----------------------------------------

TITLE: TypeScript Module: b.ts - Import Default and Named Imports
DESCRIPTION: This TypeScript module `b.ts` imports the default export, named exports `b`, `c`, and `D` from module `a.ts`. This demonstrates the standard import syntax for both default and named exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports(isolatedmodules=false).errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
"    import a, { b, c, D } from \"./a\";\n    "
```

----------------------------------------

TITLE: TypeScript Module Option Error Message
DESCRIPTION: Error message displayed when an invalid module system is specified in TypeScript compiler options. Lists all valid module values including 'none', 'commonjs', 'amd', 'system', 'umd', various ES versions, and Node.js-specific options.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/transpile/Report an error when compiler-options module-kind is out-of-range.oldTranspile.errors.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
error TS6046: Argument for '--module' option must be: 'none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 'es2020', 'es2022', 'esnext', 'node16', 'node18', 'nodenext', 'preserve'.
```

----------------------------------------

TITLE: Importing TypeScript Modules with Scoped and Mangled Names
DESCRIPTION: Demonstrates TypeScript import statements for modules with scoped and mangled package names, resulting in type declaration resolution errors
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionAsTypeReferenceDirectiveScoped.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { typesCache } from "@scoped/typescache";
import { mangledTypes } from "@mangled/typescache";
import { nodeModulesCache } from "@scoped/nodemodulescache";
import { mangledNodeModules } from "@mangled/nodemodulescache";
import { atTypesCache } from "@scoped/attypescache";
import { mangledAtTypesCache } from "@mangled/attypescache";
```

----------------------------------------

TITLE: Defining Class with Parameter Properties in TypeScript
DESCRIPTION: This snippet shows a TypeScript class definition that attempts to declare parameter properties using destructuring assignment. It encounters errors related to improper use of parameter properties and accessibility of class properties. Key parameters include the constructor parameters 'k', '[a, b, c]', and methods 'getA()', 'getB()', 'getC()'. Expected outputs involve retrieving values for these properties, but errors occur due to declaration mistakes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterProperties3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C1<T, U, V> {
        constructor(private k: T, private [a, b, c]: [T,U,V]) {
                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS1187: A parameter property may not be declared using a binding pattern.
            if ((b === undefined && c === undefined) || (this.b === undefined && this.c === undefined)) {
                                                              ~
!!! error TS2339: Property 'b' does not exist on type 'C1<T, U, V>'.
                                                                                      ~
!!! error TS2339: Property 'c' does not exist on type 'C1<T, U, V>'.
                this.a = a || k;
                     ~
!!! error TS2339: Property 'a' does not exist on type 'C1<T, U, V>'.
            }
        }

        public getA() {
            return this.a
                        ~
!!! error TS2339: Property 'a' does not exist on type 'C1<T, U, V>'.
        }
    
        public getB() {
            return this.b
                        ~
!!! error TS2339: Property 'b' does not exist on type 'C1<T, U, V>'.
        }
    
        public getC() {
            return this.c;
                        ~
!!! error TS2339: Property 'c' does not exist on type 'C1<T, U, V>'.
        }
    }
    
    var x = new C1(undefined, [0, true, ""]);
    var [x_a, x_b, x_c] = [x.getA(), x.getB(), x.getC()];
    
    var y = new C1(10, [0, true, true]);
    var [y_a, y_b, y_c] = [y.getA(), y.getB(), y.getC()];
    
    var z = new C1(10, [undefined, "", ""]);
    var [z_a, z_b, z_c] = [z.getA(), z.getB(), z.getC()];
    
    var w = new C1(10, [undefined, undefined, undefined]);
    var [z_a, z_b, z_c] = [z.getA(), z.getB(), z.getC()];
```

----------------------------------------

TITLE: Class and Member Decorators Implementation in TypeScript
DESCRIPTION: Demonstrates the usage of decorators on class declaration, instance methods, static methods, properties, and setters. Shows both regular class declaration and class expression with decorators.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-emitDecoratorMetadata(target=esnext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare let dec: any;

@dec
class C {
    constructor(x: number) {}

    @dec
    method(x: number) {}

    @dec
    set x(x: number) {}

    @dec
    y: number;

    @dec
    static method(x: number) {}

    @dec
    static set x(x: number) {}

    @dec
    static y: number;
}

(@dec class C {
    constructor(x: number) {}

    @dec
    method(x: number) {}

    @dec
    set x(x: number) {}

    @dec
    y: number;

    @dec
    static method(x: number) {}

    @dec
    static set x(x: number) {}

    @dec
    static y: number;
});
```

----------------------------------------

TITLE: Defining Static Properties with 'this' in Decorated Class - TypeScript
DESCRIPTION: This snippet defines two decorated classes, C and D, with static properties that attempt to use 'this' in their initializers. This results in compilation errors due to TypeScript's restrictions on referencing 'this' in static context. The snippet shows the declaration of errors in lines where 'this' is improperly used, demonstrating the limitation in TypeScript when dealing with decorated classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeOfThisInStaticMembers11(target=es2022).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare const foo: any;

@foo
class C {
    static a = 1;
    static b = this.a + 1;
               ~~~~
!!! error TS2816: Cannot use 'this' in a static property initializer of a decorated class.
}

@foo
class D extends C {
    static c = 2;
    static d = this.c + 1;
               ~~~~
!!! error TS2816: Cannot use 'this' in a static property initializer of a decorated class.
    static e = super.a + this.c + 1;
                       ~~~~
!!! error TS2816: Cannot use 'this' in a static property initializer of a decorated class.
    static f = () => this.c + 1;
                   ~~~~
!!! error TS2816: Cannot use 'this' in a static property initializer of a decorated class.
    static ff = function () { this.c + 1 }
    static foo () {
        return this.c + 1;
    }
    static get fa () {
        return this.c + 1;
    }
    static set fa (v: number) {
        this.c = v + 1;
    }
}

class CC {
    static a = 1;
    static b = this.a + 1;
}

class DD extends CC {
    static c = 2;
    static d = this.c + 1;
    static e = super.a + this.c + 1;
    static f = () => this.c + 1;
    static ff = function () { this.c + 1 }
    static foo () {
        return this.c + 1;
    }
    static get fa () {
        return this.c + 1;
    }
    static set fa (v: number) {
        this.c = v + 1;
    }
}
```

----------------------------------------

TITLE: Invalid Assignments in TypeScript Function and Global Scope
DESCRIPTION: This snippet demonstrates invalid assignments and arithmetic operations in a function context and global scope using 'this'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/compoundAssignmentLHSIsValue.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function foo() {
    this *= value;
    this += value;
}

this *= value;
this += value;
```

----------------------------------------

TITLE: Defining StringKeyOf Utility Type in TypeScript
DESCRIPTION: Utility type that extracts string keys from an object type using Extract and keyof operators.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitMappedPrivateTypeTypeParameter.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export type StringKeyOf<TObj> = Extract<string, keyof TObj>;
```

----------------------------------------

TITLE: Defining Object with Computed Property Names in TypeScript
DESCRIPTION: This snippet defines an object 'v' with two computed property names: a method 'hello' and a getter 'goodbye'. The method contains a debugger statement, while the getter returns 0.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/computedPropertyNamesSourceMap2_ES6.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var v = {
    ["hello"]() {
        debugger;
    },
    get ["goodbye"]() {
        return 0;
    }
};
```

----------------------------------------

TITLE: Defining Literal Type Constraints in TypeScript
DESCRIPTION: Creates type aliases with specific string literal constraints, showing type intersection and narrowing
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/didYouMeanStringLiteral.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type T1 = "string" | "number" | "boolean";
type T2 = T1 & ("number" | "boolean"); // "number" | "boolean"
type T3 = T1 & ("string" | "boolean"); // "string" | "boolean"
```

----------------------------------------

TITLE: Initialize For Loop with Destructuring and Defaults in TypeScript
DESCRIPTION: Initializes a for loop by calling `getMultiRobot()`, destructuring the returned array into multiple temporary variables (`_12` to `_17`), and assigning values to `nameMA`, `primarySkillA`, and `secondarySkillA` with default fallbacks if the destructured elements are undefined. The loop is set to run only once (i = 0; i < 1; i++).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.sourcemap.txt#_snippet_70

LANGUAGE: TypeScript
CODE:
```
for (_12 = getMultiRobot(), _13 = _12[0], nameMA = _13 === void 0 ? "noName" : _13, _14 = _12[1], _15 = _14 === void 0 ? ["none", "none"] : _14, _16 = _15[0], primarySkillA = _16 === void 0 ? "primary" : _16, _17 = _15[1], secondarySkillA = _17 === void 0 ? "secondary" : _17, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Importing External Module and Module Augmentation in TypeScript
DESCRIPTION: This snippet demonstrates attempts to import an external module and augment a non-existent module, resulting in TypeScript compilation errors. It highlights issues with module resolution and declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importDeclRefereingExternalModuleWithNoResolve.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import b = require("externalModule");
declare module "m1" {
    import im2 = require("externalModule");
}
```

----------------------------------------

TITLE: String Concatenation and Unary Operations
DESCRIPTION: Demonstrates string concatenation with numbers and bigints, and valid unary operations for both types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/numberVsBigIntOperations.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
let str: string;
str = "abc" + 123; str = "abc" + 123n; str = 123 + "abc"; str = 123n + "abc";

// Unary operations
bigInt = bigInt++; bigInt = ++bigInt; num = num++; num = ++num;
bigInt = bigInt--; bigInt = --bigInt; num = num--; num = --num;
bigInt = -bigInt; num = -num;
bigInt = ~bigInt; num = ~num;
```

----------------------------------------

TITLE: Illustrating Access Modifiers in TypeScript Classes
DESCRIPTION: This snippet provides examples of TypeScript classes with various access modifiers: public, private, and protected. It highlights syntactical issues when modifiers are incorrectly defined or misused, impacting member accessibility. The expected outcome is to understand the correct usage of these modifiers in TypeScript class declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asiPublicPrivateProtected.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
public
~~~~~~
!!! error TS2304: Cannot find name 'public'.
class NonPublicClass {
    public s() {
    }
}

class NonPublicClass2 {
    public
    private nonPublicFunction() {
    }
}
private
~~~~~~~
!!! error TS2304: Cannot find name 'private'.
class NonPrivateClass {
    private s() {
    }
}

class NonPrivateClass2 {
    private
    public nonPrivateFunction() {
    }
}
protected
~~~~~~~~~
!!! error TS2304: Cannot find name 'protected'.
class NonProtectedClass {
  protected s() {
  }
}

class NonProtectedClass2 {
    protected
    public nonProtectedFunction() {
    }
}

class ClassWithThreeMembers {
    public
    private
    protected
}
```

----------------------------------------

TITLE: Identifying Destructuring Assignment Errors in TypeScript
DESCRIPTION: This TypeScript snippet exhibits a set of errors related to destructuring assignment usage. It highlights issues where parts of the syntax are misused, including unnecessary comma operators and incorrect placement of assignment operators. The snippet demonstrates the correct and incorrect ways of assigning values from a function returning an object. The focus is on the proper structuring to prevent common errors like unused comma operators and misplaced '=' signs.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructionAssignmentError.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare function fn(): { a: 1, b: 2 }
let a: number;
let b: number;

({ a, b } = fn());
{ a, b } = fn();
  ~
!!! error TS2695: Left side of comma operator is unused and has no side effects.
         ~
!!! error TS2809: Declaration or statement expected. This '=' follows a block of statements, so if you intended to write a destructuring assignment, you might need to wrap the whole assignment in parentheses.

({ a, b } =
fn());

{ a, b }
  ~
!!! error TS2695: Left side of comma operator is unused and has no side effects.
= fn();
~
!!! error TS2809: Declaration or statement expected. This '=' follows a block of statements, so if you intended to write a destructuring assignment, you might need to wrap the whole assignment in parentheses.
```

----------------------------------------

TITLE: Extending Generic Class with Incorrect Type Arguments in TypeScript
DESCRIPTION: This code snippet defines a generic class 'A' with two type parameters and a class 'B' that incorrectly extends 'A' with only one type argument. This results in a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/superCallFromClassThatDerivesFromGenericTypeButWithIncorrectNumberOfTypeArguments1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class A<T1, T2> {
    constructor(private map: (value: T1) => T2) {

    }
}

class B extends A<number> {
    constructor() { super(value => String(value)); }
}
```

----------------------------------------

TITLE: Using Top-Level Await in ESM Module (Valid Example)
DESCRIPTION: A TypeScript file in ESM format that successfully uses await at the top level, both directly and in a for-await loop. This works because the file is treated as an ES module based on the package.json configuration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesTopLevelAwait(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// esm format file
const x = await 1;
export {x};
for await (const y of []) {}
```

----------------------------------------

TITLE: Multiple Default Exports TypeScript Error Example
DESCRIPTION: Demonstrates three ways of incorrectly declaring multiple default exports in a TypeScript module: direct function export, re-exporting default, and aliased default export. Shows resulting compilation errors including TS2323, TS2528, and TS2307.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDefaultDuplicateCrash.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// #38214

export default function () { }
export { default } from './hi'
export { aa as default } from './hi'
```

----------------------------------------

TITLE: Exporting Default Object in TypeScript
DESCRIPTION: This snippet demonstrates an invalid TypeScript export where multiple objects are attempted to be exported as default, resulting in compilation errors. The first default export has an object with a property 'lol' set to 1, and the second default export has a property 'lol' set to 2. Only one default export is permitted per module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/multipleExportDefault6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default {
    lol: 1
}

```

LANGUAGE: TypeScript
CODE:
```
export default {
    lol: 2
}

```

----------------------------------------

TITLE: Destructuring Skills from multiRobot Object in TypeScript
DESCRIPTION: This snippet uses destructuring assignment to extract 'primary' and 'secondary' skills from a 'multiRobot' object. Default values are provided in case the properties are undefined. The variables 'primaryA' and 'secondaryA' receive either the extracted values or fall back to 'primary' and 'secondary', respectively.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
for (let {\n    skills: {\n        primary: primaryA = "primary",\n        secondary: secondaryA = "secondary"\n    } = { primary: "none", secondary: "none" }\n} = multiRobot) {\n    // Implementation details here\n}
```

----------------------------------------

TITLE: Constructor parameter initializer
DESCRIPTION: This code demonstrates a class `Foo` constructor where parameter `y` is initialized with `x`. This snippet is related to parameter initialization, but there is no error being raised here.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parameterInitializersForwardReferencing1.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
    class Foo {
        constructor(public x = 12, public y = x) {}
    }
```

----------------------------------------

TITLE: Valid Async Function Declaration (void)
DESCRIPTION: This snippet defines an async function `fn1` with no explicit return type. TypeScript infers the return type as `Promise<void>`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncFunctionDeclaration15_es6.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
async function fn1() { }
```

----------------------------------------

TITLE: Importing Default Bindings with Errors in TypeScript
DESCRIPTION: This snippet demonstrates various error scenarios when importing default bindings. It includes a valid import, an interface with the same name as the import (which is allowed), and three erroneous import declarations that conflict with local declarations or create duplicate identifiers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ImportDefaultBindingMergeErrors.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import defaultBinding from "./es6ImportDefaultBindingMergeErrors_0";
interface defaultBinding { // This is ok
}
var x = defaultBinding;
import defaultBinding2 from "./es6ImportDefaultBindingMergeErrors_0"; // Should be error
var defaultBinding2 = "hello world"; 
import defaultBinding3 from "./es6ImportDefaultBindingMergeErrors_0"; // Should be error
import defaultBinding3 from "./es6ImportDefaultBindingMergeErrors_0"; // SHould be error
```

----------------------------------------

TITLE: Defining Classes and Interfaces with Inheritance in TypeScript
DESCRIPTION: Defines a base class C, an interface I extending C, and a class D extending C and implementing I. Shows various assignment scenarios and resulting type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceExtendsClassWithPrivate1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
    public foo(x: any) { return x; }
    private x = 1;
}

interface I extends C {
    other(x: any): any;
}

class D extends C implements I {
    public foo(x: any) { return x; }
    other(x: any) { return x; }
    bar() { }
} 

var c: C;
var i: I;
var d: D;

c = i;
i = c; // error

i = d;
d = i; // error

c = d;
d = c; // error
```

----------------------------------------

TITLE: Function Call Type Errors with 'satisfies' Operator in TypeScript
DESCRIPTION: Demonstrates type errors when passing values using 'satisfies' operator to a function expecting a specific object shape. Shows errors for missing properties and incompatible property types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeSatisfaction_errorLocations1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const obj1 = { a: 1 };

const fn1 = (s: { a: true }) => {};
fn1({} satisfies unknown);
fn1({ a: 1 } satisfies unknown);
fn1(obj1 satisfies unknown);
```

----------------------------------------

TITLE: Defining Class cor Extending panglima
DESCRIPTION: The class cor extends panglima and utilizes generic parameters to define methods that yield specific return types. This showcases how generics can be applied in TypeScript to align with strict type definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_56

LANGUAGE: typescript
CODE:
```
export class cor<T0, T1> extends panglima.fundatus<panamensis.linulus<trivirgatus.lotor<argurus.luctuosa, lavali.wilsoni>, lavali.beisa>, dammermani.melanops> {
 // Methods would be defined here...
}

```

----------------------------------------

TITLE: Discriminated Union Type Handling
DESCRIPTION: Type definitions and function demonstrating handling of discriminated unions with type narrowing and exhaustiveness checking.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownControlFlow.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
type Left = 'left';
type Right = 'right' & { right: 'right' };
type Either = Left | Right;

function assertNever(v: never): never {
    throw new Error('never');
}

function fx20(value: Either) {
    if (value === 'left') {
        const foo: 'left' = value;
    }
    else if (value === 'right') {
        const bar: 'right' = value;
    }
    else {
        assertNever(value);
    }
}
```

----------------------------------------

TITLE: Defining Overloaded Constructors in TypeScript
DESCRIPTION: This snippet defines a TypeScript class 'Foo' with overloaded constructors to handle different parameter types. It demonstrates how TypeScript enforces parameter types and displays potential compilation errors when constructor signatures do not match their implementation. The snippet aims to help developers understand constructor overloading and how to manage errors effectively.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadTag2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export class Foo {
    #a = true ? 1 : "1"
    #b

    /**
     * Should not have an implicit any error, because constructor's return type is always implicit
     * @constructor
     * @overload
     * @param {string} a
     * @param {number} b
     */
    /**
     * @constructor
     * @overload
                ~~~~~~~~
!!! error TS2394: This overload signature is not compatible with its implementation signature.
!!! related TS2750 overloadTag2.js:25:5: The implementation signature is declared here.
     * @param {number} a
     */
    /**
     * @constructor
     * @overload
     * @param {string} a
     *//**
     * @constructor
     * @param {number | string} a
     */
    constructor(a, b) {
                       ~
!!! error TS7006: Parameter 'b' implicitly has an 'any' type.
            this.#a = a
            this.#b = b
        }
    }
    var a = new Foo()
            ~~~~~~~~~
!!! error TS2554: Expected 1-2 arguments, but got 0.
!!! related TS6210 overloadTag2.js:15:8: An argument for 'a' was not provided.
    var b = new Foo('str')
    var c = new Foo(2)
    var d = new Foo('str', 2)
```

----------------------------------------

TITLE: Declaring a Constant in TypeScript
DESCRIPTION: This code snippet shows the declaration of a constant variable 'x' with a value of 0. In TypeScript, variables declared with 'const' cannot be reassigned after initialization.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constDeclarations-access.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const x = 0
```

----------------------------------------

TITLE: Using Async Methods in Objects in TypeScript
DESCRIPTION: This snippet shows how to define asynchronous methods within an object using the 'async' keyword. Each method has a return type of either void or a custom Promise type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncAwaitIsolatedModules_es6.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
let o = {
	async m1() { },
	async m2(): Promise<void> { },
	async m3(): MyPromise<void> { }
};
```

----------------------------------------

TITLE: Configuring TypeScript Module Resolution
DESCRIPTION: Defines TypeScript compiler options with settings for JavaScript allowance, disabling declaration files, using node-style module resolution, and specifying maximum depth for node module JS files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesImportHigher/node/nodeModulesImportHigher.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "allowJs": true,
    "declaration": false,
    "moduleResolution": "node",
    "maxNodeModuleJsDepth": 2
  }
}
```

----------------------------------------

TITLE: Defining Lodash Pick Function Type in TypeScript
DESCRIPTION: This snippet defines the type for Lodash's 'pick' function within the LoDashStatic interface. It specifies the function signature for picking properties from an object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/conflictingDeclarationsImportFromNamespace2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import _ = require("./index");
declare module "./index" {
    interface LoDashStatic {
      pick: <T extends object, U extends keyof T>(
        object: T,
        ...props: Array<U>
      ) => Pick<T, U>;
    }
}
```

----------------------------------------

TITLE: Puppeteer Type Definitions
DESCRIPTION: This snippet defines the type interfaces and functions for the Puppeteer library in TypeScript. It exports a namespace for Puppeteer, which includes the Keyboard interface and the connect function. This is essential for providing type information when using Puppeteer in a TypeScript environment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocReferenceGlobalTypeInCommonJs.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export as namespace Puppeteer;
export interface Keyboard {
    key: string
}
export function connect(name: string): void;
```

----------------------------------------

TITLE: TypeScript Object Method Missing Return Type
DESCRIPTION: Shows an object literal with a method 'bar' that returns undefined but lacks an explicit return type annotation. TypeScript compiler flags this as an error (TS7010) since implicit 'any' return types are typically discouraged for type safety.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeCheckObjectLiteralMethodBody.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var foo = { bar() { return undefined } };
```

----------------------------------------

TITLE: Arrow Function with Mixed Typed and Untyped Parameters
DESCRIPTION: A private class method using an arrow function where only the middle parameter 'y' has an explicit 'any' type. The parameters 'x' and 'z' trigger implicit 'any' type errors due to missing type annotations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyParametersInClass.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
private priv_f12 = (x, y: any, z) => "";
```

----------------------------------------

TITLE: Declaring Interfaces in TypeScript Declaration File
DESCRIPTION: This snippet defines two interfaces, I1 and I2, in a TypeScript declaration file. Each interface has a single property 'x' of type number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reExportGlobalDeclaration2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare interface I1 {
    x: number
}

declare interface I2 {
    x: number
}
```

----------------------------------------

TITLE: Demonstrating TypeScript Nested Object Assignability Errors with Class Instances
DESCRIPTION: This code snippet demonstrates TypeScript's ability to detect type incompatibilities in deeply nested structures containing class constructors. It shows an error when assigning an object with Ctor2 (having a numeric property) to a variable expecting Ctor1 (with a string property).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/deeplyNestedAssignabilityErrorsCombined.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class Ctor1 {
    g = "ok"
}

class Ctor2 {
    g = 12;
}

let x2 = { a: { b: { c: { d: { e: { f: Ctor1 } } } } } };
let y2 = { a: { b: { c: { d: { e: { f: Ctor2 } } } } } };
x2 = y2;
```

----------------------------------------

TITLE: Type Parameter Assignability with Reversed Constraints in TypeScript
DESCRIPTION: Shows the reverse case where T extends U. Assigning T to U is valid, but assigning U to T generates an error since U might not satisfy all requirements of T.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeParameterAssignability2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function foo2<T extends U, U>(t: T, u: U) {
    t = u; // error
    u = t; // ok
}
```

----------------------------------------

TITLE: Invalid Import Statement Placement in JavaScript/TypeScript
DESCRIPTION: Shows an incorrect implementation where an import statement is placed inside a function body, which violates TypeScript's module import rules. Import statements must be placed at the top level of a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importDeclarationInModuleDeclaration2.errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
function container() {
    import "fs";
}
```

----------------------------------------

TITLE: JSX Unexpected Token Error (TS1382)
DESCRIPTION: This code snippet demonstrates a TypeScript error (TS1382) caused by an unexpected greater-than sign inside a JSX div element. The error suggests that the user might have meant `{'>'}` or `&gt;` to properly escape the greater-than sign.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxParsingError3.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    let x2 = <div>></div>;
                  ~
!!! error TS1382: Unexpected token. Did you mean `{'>'}` or `&gt;`?
    
```

----------------------------------------

TITLE: Type Assignment Error in TypeScript Interface
DESCRIPTION: Shows an error case where interfaceWithPublicAndOptional<number,string> cannot be assigned to an object requiring a boolean property. The error occurs because the 'one' property types are incompatible (number vs boolean).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability28.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module __test1__ {
    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
    export var __val__obj4 = obj4;
}
module __test2__ {
    export var aa:{one:boolean;};
    export var __val__aa = aa;
}
__test2__.__val__aa = __test1__.__val__obj4
```

----------------------------------------

TITLE: Function Returning Typed String in TypeScript
DESCRIPTION: Exports a function returning a string cast to a specific type using JSDoc comment syntax. Highlights the importance of proper type conversion and suggests converting the expression to 'unknown' first if intentional. This addresses potential overlap issues and improves type safety.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocImportTypeNodeNamespace.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export default function () {
  return /** @type {import('./GeometryType.js').default} */ ('Point');
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
}
```

----------------------------------------

TITLE: Array Destructuring with Default Values in TypeScript
DESCRIPTION: A for loop implementation that demonstrates array destructuring with default values in TypeScript. It extracts the first array element as numberA3 (with default -1), collects remaining elements into robotAInfo, and sets up loop control variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_42

LANGUAGE: javascript
CODE:
```
for (var _32 = [2, "trimmer", "trimming"], _33 = _32[0], numberA3 = _33 === void 0 ? -1 : _33, robotAInfo = _32.slice(1), i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Demonstrating TypeScript Error: Accessing 'this' Before 'super' Call in Constructor
DESCRIPTION: This code snippet illustrates a TypeScript error that occurs when 'this' is accessed before calling 'super()' in the constructor of a derived class. It shows how the error is triggered in direct access but not in a closure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/superCallBeforeThisAccessing3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Base {
    constructor(c) { }
}
class D extends Base {
    private _t;
    constructor() {
        let x = () => { this._t };
        x();  // no error; we only check super is called before this when the container is a constructor
        this._t;  // error
        super(undefined);
    }
}
```

----------------------------------------

TITLE: Static Array Destructuring Loop
DESCRIPTION: For loop using destructuring from a static array with default value handling
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
for (var _d = [2, "trimmer", "trimming"], _e = _d[1], nameA = _e === void 0 ? "name" : _e, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Importing and Using TypeScript Modules
DESCRIPTION: This snippet imports the previously defined modules and creates a new class instance. It also exports some variables from the imported classes. The snippet illustrates how to use imported entities in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcemapModuleMultifolderSpecifyOutputFile/node/sourcemapModuleMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
import m1 = require("ref/m1");
import m2 = require("../outputdir_module_multifolder_ref/m2");
export var a1 = 10;
export class c1 {
    public p1: number;
}

export var instance1 = new c1();
export function f1() {
    return instance1;
}

export var a2 = m1.m1_c1;
export var a3 = m2.m2_c1;
```

----------------------------------------

TITLE: Declaring Generic Interface in TypeScript
DESCRIPTION: This snippet defines an interface 'I' with a generic type parameter 'T'. It includes a property 'v' of type 'A<T>', generic methods, an optional method, and generic constructor signatures. Note that type 'A' is not defined, causing a compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserGenericsInInterfaceDeclaration1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface I<T> {
   v: A<T>;
   f1<T>(): T;
   f2?<T>(): T;
   <T>(): void;
   new <T>(): void;
}
```

----------------------------------------

TITLE: Demonstrating Valid Usage of Read-Only Property in TypeScript
DESCRIPTION: This section shows valid ways to use the read-only property 'x'. These operations do not attempt to modify the value of 'x' and are therefore allowed by TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constDeclarations-access3.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
// OK
var a = M.x + 1;

function f(v: number) { }
f(M.x);

if (M.x) { }

M.x;
(M.x);

-M.x;
+M.x;

M.x.toString();
```

----------------------------------------

TITLE: Function Return Name Extraction with Default
DESCRIPTION: Extracts first element from function return with default name when undefined
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues3.sourcemap.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
_q = getMultiRobotB()[0], nameMB = _q === void 0 ? "helloNoName" : _q;
```

----------------------------------------

TITLE: ES2017 String Padding Methods
DESCRIPTION: Shows the usage of String.padStart() and String.padEnd() methods introduced in ES2017. Requires 'lib' compiler option to be set to 'es2017' or later.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/doYouNeedToChangeYourTargetLibraryES2016Plus.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const testStringPadStart = "".padStart(2);
const testStringPadEnd = "".padEnd(2);
```

----------------------------------------

TITLE: Object Literal Type Mismatch in TypeScript
DESCRIPTION: This snippet demonstrates a type mismatch error when returning an object literal that doesn't match the specified return type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/errorElaboration.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function test(): {[A in "foo"]: A} {
  return {foo: "bar"};
}
```

----------------------------------------

TITLE: Using Object Spread in TypeScript Functions
DESCRIPTION: This snippet demonstrates several functions in TypeScript using the object spread operator to create new objects while omitting specific properties. The examples also reveal TypeScript compiler errors when certain variables are declared but not used. The 'console' object is assumed to be declared globally as it is used within the functions. Each function demonstrates declaration of an unused variable within object destructuring, leading to compiler warnings. The omitted properties are logged using 'console.log' unless intentionally commented out.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedLocalsAndObjectSpread.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare var console: { log(a: any): void };

function one() {
    const foo = { a: 1, b: 2 };
    // 'a' is declared but never used
    const {a, ...bar} = foo;
    console.log(bar);
}

function two() {
    const foo = { a: 1, b: 2 };
    // '_' is declared but never used
    const {a: _, ...bar} = foo;
    console.log(bar);
}

function three() {
    const foo = { a: 1, b: 2 };
    // 'a' is declared but never used
    const {a, ...bar} = foo; // bar should be unused
                 ~~~
!!! error TS6133: 'bar' is declared but its value is never read.
    //console.log(bar);
}

function four() {
    const foo = { a: 1, b: 2 };
    // '_' is declared but never used
    const {a: _, ...bar} = foo; // bar should be unused
                    ~~~
!!! error TS6133: 'bar' is declared but its value is never read.
    //console.log(bar);
}
```

----------------------------------------

TITLE: Type Mismatch in Constructor Arguments (Error TS2322)
DESCRIPTION: The code attempts to create an instance of `C1` with a string value passed where a boolean is expected in the array argument.  TypeScript raises error TS2322 because the type 'string' is not assignable to type 'boolean', enforcing strict type checking.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterProperties2.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class C1 {
    constructor(private k: number, private [a, b, c]: [number, string, boolean]) {

        if ((b === undefined && c === undefined) || (this.b === undefined && this.c === undefined)) {
                this.a = a || k;
            }
        }
    
        public getA() {
            return this.a
        }
    
        public getB() {
            return this.b
        }
    
        public getC() {
            return this.c;
        }
    }
    
    var x = new C1(undefined, [0, undefined, ""]);
    var [x_a, x_b, x_c] = [x.getA(), x.getB(), x.getC()];
    
    var y = new C1(10, [0, "", true]);
    var [y_a, y_b, y_c] = [y.getA(), y.getB(), y.getC()];
    
    var z = new C1(10, [undefined, "", null]);
    var [z_a, z_b, z_c] = [z.getA(), z.getB(), z.getC()];
```

----------------------------------------

TITLE: Object Spread with Optional Parameter and Type Safety Error
DESCRIPTION: This function shows an error when trying to access a property from an object that was created by spreading an optional parameter. TypeScript detects that 'b.a' could be undefined since 't' might be undefined or null.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/spreadUnion3.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function g(t?: { a: number } | null): void {
    let b = { ...t };
    let c: number = b.a;  // might not have 'a'
}
```

----------------------------------------

TITLE: Variable Declaration Error in TypeScript .d.ts
DESCRIPTION: This code snippet demonstrates two TypeScript errors that occur when declaring a variable directly in a .d.ts file: TS1046 (missing 'declare' or 'export' modifier) and TS1039 (initializer not allowed). Declaration files are intended to describe the shape of existing JavaScript code and do not contain implementation details.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserVariableStatement1.d.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
    var v = 1;
    ~~~
```

----------------------------------------

TITLE: Logging numberB in TypeScript with destructuring assignment
DESCRIPTION: This snippet illustrates the use of destructuring assignment to get numberB from an array and logs its value. It shows a concise way to access array elements and output their values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
for (let [numberB] = robotA, i = 0; i < 1; i++) {
    console.log(numberB);
}
```

----------------------------------------

TITLE: Defining Promise and IPromise interfaces in TypeScript
DESCRIPTION: Defines two promise interfaces with different method signatures. Promise<T> has a simpler 'then' method while IPromise<T> has multiple overloads to handle different callback return types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Promise<T> {
    then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>;
    done<U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
}

interface IPromise<T> {
    then<U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
    then<U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
    then<U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
    then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
    done? <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
}
```

----------------------------------------

TITLE: Invalid Decorator Placement on Class Method
DESCRIPTION: Shows an error case where a decorator is placed after the 'public' keyword in a class method declaration. The decorator must be placed before any access modifiers and the method name according to TypeScript syntax rules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/decoratorOnClassMethod3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function dec<T>(target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;

class C {
    public @dec method() {}
}
```

----------------------------------------

TITLE: TypeScript Private Fields and Methods Example
DESCRIPTION: Demonstrates TypeScript class implementations with private fields, methods, and accessors. Shows error detection for unused private members across different usage patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameUnused.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export class A {
    #used = "used";
    #unused = "unused";
    constructor () {
        console.log(this.#used);
    }
}

export class A2 {
    #used() {  };
    #unused() { };
    constructor () {
        console.log(this.#used());
    }
}

export class A3 {
    get #used() { return 0 };
    set #used(value: number) {  };
    
    get #unused() { return 0 };
    set #unused(value: number) {  };
    constructor () {
        console.log(this.#used);
    }
}
```

----------------------------------------

TITLE: Defining Base Generic Type Constraint Class
DESCRIPTION: Defines a base Foo class with a method that establishes a type constraint for generic classes
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericTypeConstraints.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Foo {
    fooMethod() {}
}
```

----------------------------------------

TITLE: TypeScript Interface and Constant Definition in inner/other.d.ts
DESCRIPTION: This snippet defines the `Thing` interface and the `x` constant with a function type. It's part of the module's type declaration file, which helps TypeScript understand the module's structure and types, crucial for type checking.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsBlocksSpecifierResolution(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
    // esm format file
    export interface Thing {}
    export const x: () => Thing;
```

----------------------------------------

TITLE: Error Handling in Function Declaration - TypeScript
DESCRIPTION: This snippet describes an error generated by TypeScript when the renaming of 'y1' as 'string' is unused. Additionally, it showcases how to declare various overloaded functions for the 'TestingOneThing' component, which accepts props with different types and constraints. It exemplifies the importance of proper type annotations to avoid compilation errors in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentOverload1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
declare function TestingOneThing({y1: string}): JSX.Element;
                                          ~~~~~~
!!! error TS2842: 'string' is an unused renaming of 'y1'. Did you intend to use it as a type annotation?
!!! related TS2843 file.tsx:17:46: We can only write a type for 'y1' by adding a type for the entire parameter here.
declare function TestingOneThing(j: {"extra-data": string, yy?: string}): JSX.Element;
declare function TestingOneThing(n: {yy: number, direction?: number}): JSX.Element;
declare function TestingOneThing(n: {yy: string, name: string}): JSX.Element;

// OK
const d1 = <TestingOneThing y1 extra-data />;
const d2 = <TestingOneThing extra-data="hello" />;
const d3 = <TestingOneThing extra-data="hello" yy="hihi" />;
const d4 = <TestingOneThing extra-data="hello" yy={9} direction={10} />;
const d5 = <TestingOneThing extra-data="hello" yy="hello" name="Bob" />;
```

----------------------------------------

TITLE: Destructuring Robot Properties in TypeScript
DESCRIPTION: This snippet assigns the name property of 'robotA' to a variable 'nameA' using destructuring. It demonstrates how to extract object properties into separate variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatement.sourcemap.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
var nameA = robotA.name;
```

----------------------------------------

TITLE: Defining Enum with String Values in TypeScript
DESCRIPTION: This code snippet demonstrates the declaration of an enum 'Foo' with various string-based member values. It showcases different ways of assigning string values to enum members, including template literals, constant references, and computed values. The snippet also highlights TypeScript errors related to type compatibility and syntax requirements when 'isolatedModules' is enabled.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/computedEnumMemberSyntacticallyString2(isolatedmodules=true).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { BAR } from './bar';
const LOCAL = 'LOCAL';

enum Foo {
  A = `${BAR}`,

  B = LOCAL,
  C = B,
  D = C + 'BAR',

  E1 = (`${BAR}`) as string, // We could recognize these,
  E2 = `${BAR}`!,             // but Babel doesn't

  F = BAR,
  G = 2 + BAR,

  H = A,
  I = H + BAR,
  J = H
}
```

----------------------------------------

TITLE: Referencing and Utilizing Class C in TypeScript Class B
DESCRIPTION: Demonstrates how to reference another TypeScript file using the reference path directive and defines a class B, which has a property of type C. This snippet illustrates cross-file class dependency and usage, requiring that the referenced file be correctly included in the TypeScript compilation context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/rootDirectoryWithoutOutDir/node/rootDirectoryWithoutOutDir.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
/// <reference path='FolderC/fileC.ts'/>
class B {
    public c: C;
}
```

----------------------------------------

TITLE: Implementing Functions with Readonly Rest Parameters in TypeScript
DESCRIPTION: This snippet defines four functions (f0, f1, f2, f4) that demonstrate different uses and error cases of readonly rest parameters in TypeScript. It showcases spread operator usage, function calls with various argument patterns, and attempts to modify readonly arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/readonlyRestParameters.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function f0(a: string, b: string) {
    f0(a, b);
    f1(a, b);
    f2(a, b);
}

function f1(...args: readonly string[]) {
    f0(...args);  // Error
    f1('abc', 'def');
    f1('abc', ...args);
    f1(...args);
}

function f2(...args: readonly [string, string]) {
    f0(...args);
    f1('abc', 'def');
    f1('abc', ...args);
    f1(...args);
    f2('abc', 'def');
    f2('abc', ...args);  // Error
    f2(...args);
}

function f4(...args: readonly string[]) {
    args[0] = 'abc';  // Error
}
```

----------------------------------------

TITLE: Invalid Abstract Class Implementation in TypeScript
DESCRIPTION: Demonstrates compilation errors that occur when concrete classes B and C attempt to extend abstract class A without implementing its required abstract methods. The example shows how TypeScript enforces abstract method implementation requirements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classAbstractInheritance2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
abstract class A {
    abstract m1(): number;
    abstract m2(): number;
    abstract m3(): number;
    abstract m4(): number;
    abstract m5(): number;
    abstract m6(): number;
}

class B extends A { }
const C = class extends A {}
```

----------------------------------------

TITLE: Handling Index Signature Errors in TypeScript
DESCRIPTION: This code snippet demonstrates a TypeScript error where an index signature is defined using an invalid parameter type. The error highlights that the allowed types for index signature parameters in TypeScript are 'string', 'number', 'symbol', or a template literal type. No special dependencies are necessary other than the TypeScript environment. Inputs in this context refer to the TypeScript code itself, and the output would be the compiled code where these lines throw errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserIndexSignature8.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var foo: { [index: any]; }; // expect an error here
```

LANGUAGE: TypeScript
CODE:
```
var foo2: { [index: RegExp]; }; // expect an error here
```

----------------------------------------

TITLE: Nested Object Destructuring with Defaults in JavaScript
DESCRIPTION: Here, the code destructures properties from objects nested within the 'multiRobots' array, setting default values for 'name', 'primary', and 'secondary' properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_21

LANGUAGE: JavaScript
CODE:
```
var _15 = multiRobots_2[_14], _16 = _15.name, nameA = _16 === void 0 ? "noName" : _16, _17 = _15.skills, _18 = _17 === void 0 ? { primary: "noSkill", secondary: "noSkill" } : _17, _19 = _18.primary, primaryA = _19 === void 0 ? "primary" : _19, _20 = _18.secondary, secondaryA = _20 === void 0 ? "secondary" : _20;
```

----------------------------------------

TITLE: TypeScript Function and Array Type Annotations
DESCRIPTION: This snippet demonstrates various ways of annotating function types and array types in TypeScript. It includes arrow functions, named functions, and different array type notations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
var x225: () => Base[]; x225 = () => [d1, d2];
var x226: () => Base[]; x226 = function() { return [d1, d2] };
var x227: () => Base[]; x227 = function named() { return [d1, d2] };
var x228: { (): Base[]; }; x228 = () => [d1, d2];
var x229: { (): Base[]; }; x229 = function() { return [d1, d2] };
var x230: { (): Base[]; }; x230 = function named() { return [d1, d2] };
var x231: Base[]; x231 = [d1, d2];
var x232: Array<Base>; x232 = [d1, d2];
var x233: { [n: number]: Base; }; x233 = [d1, d2];
var x234: {n: Base[]; } ; x234 = { n: [d1, d2] };
```

----------------------------------------

TITLE: Defining TypeScript Interfaces with Various Signature Types
DESCRIPTION: This code snippet defines multiple TypeScript interfaces with different types of signatures including property, call, construct, and index signatures. It also includes a class definition and demonstrates interface extension.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intTypeCheck.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface i1 {
    //Property Signatures
    p;
    p1?;
    p2?: string;
    p3();
    p4? ();
    p5? (): void;
    p6(pa1): void;
    p7? (pa1, pa2): void;
}
interface i2 {
    //Call Signatures
    ();
    (): number;
    (p);
    (p1: string);
    (p2?: string);
    (...p3: any[]);
    (p4: string, p5?: string);
    (p6: string, ...p7: any[]);
}
interface i3 {
    //Construct Signatures
    new ();
    new (): number;
    new (p: string);
    new (p2?: string);
    new (...p3: any[]);
    new (p4: string, p5?: string);
    new (p6: string, ...p7: any[]);
}
interface i4 {
    // Used to be indexer, now it is a computed property
    [p];
    //Index Signatures
    [p1: string];
    [p2: string, p3: number];
}
interface i5 extends i1 { }
interface i6 extends i2 { }
interface i7 extends i3 { }
interface i8 extends i4 { }
interface i9 { }

class Base { foo() { } }

interface i11 {
    //Call Signatures
    ();
    (): number;
    (p);
    (p1: string);
    (p2?: string);
    (...p3: any[]);
    (p4: string, p5?: string);
    (p6: string, ...p7: any[]);
    //(p8?: string, ...p9: any[]);
    //(p10:string, p8?: string, ...p9: any[]);

    //Construct Signatures
    new ();
    new (): number;
    new (p: string);
    new (p2?: string);
    new (...p3: any[]);
    new (p4: string, p5?: string);
    new (p6: string, ...p7: any[]);
    
    // Used to be indexer, now it is a computed property
    [p];
    //Index Signatures
    [p1: string];
    [p2: string, p3: number];

    //Property Signatures
    p;
    p1?;
    p2?: string;
    p3();
    p4? ();
    p5? (): void;
    p6(pa1): void;
    p7(pa1, pa2): void;
    p7? (pa1, pa2): void;
}

var anyVar: any;
```

----------------------------------------

TITLE: Demonstrating Iterator Result Assignment Compatibility in TypeScript
DESCRIPTION: This snippet shows how a type S with a boolean 'done' property is assignable to a discriminated union type T based on the value of 'done'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithDiscriminatedUnion.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
namespace Example1 {
    type S = { done: boolean, value: number };
    type T =
        | { done: true, value: number }     // T0
        | { done: false, value: number };   // T1

    declare let s: S;
    declare let t: T;

    // S is assignable to T0 when S["done"] is true
    // S is assignable to T1 when S["done"] is false
    t = s;
}
```

----------------------------------------

TITLE: Defining Class A and Exporting as Default Type in TypeScript
DESCRIPTION: Defines a class 'A' with a required string property 'a', then exports it as the default type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/chained2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class A { a!: string }
export type { A as default };
```

----------------------------------------

TITLE: Reconstructing Object with this-typed Methods in TypeScript
DESCRIPTION: Creates an object with methods extracted from a class instance. Shows how to define a type with explicit this parameter annotations and construct an object using methods with compatible this types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisTypeInFunctionsNegative.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
let reconstructed: { 
    n: number,
    explicitThis(this: C, m: number): number, // note: this: this is not allowed in an object literal type.
    explicitC(this: C, m: number): number,
    explicitProperty: (this: {n : number}, m: number) => number,
    explicitVoid(this: void, m: number): number,
} = { 
    n: 12,
    explicitThis: c.explicitThis,
    explicitC: c.explicitC,
    explicitProperty: c.explicitProperty,
    explicitVoid: c.explicitVoid
};;
```

----------------------------------------

TITLE: Handling Duplicate Identifier Errors in TypeScript for FullCalendar with React
DESCRIPTION: This code snippet includes TypeScript definitions from the FullCalendar library that illustrate the conflict with the 'VNode' identifier due to imports from React. It demonstrates the use of namespaces and duplicated type declarations, which lead to compilation errors. The 'VNode' type is defined in both the react and preact libraries, causing ambiguity.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkerInitializationCrash.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// /node_modules/@fullcalendar/react/index.d.ts
import * as react from 'react';
declare global {
  namespace FullCalendarVDom {
    export import VNode = react.ReactNode;
                  ~~~~~
!!! error TS2300: Duplicate identifier 'VNode'.
!!! related TS6203 /node_modules/@fullcalendar/core/index.d.ts:4:10: 'VNode' was also declared here.
  }
}

export default class FullCalendar {
}
```

LANGUAGE: typescript
CODE:
```
// /node_modules/@fullcalendar/core/index.d.ts
import * as preact from 'preact';
declare global {
  namespace FullCalendarVDom {
    type VNode = preact.VNode<any>;
         ~~~~~
!!! error TS2300: Duplicate identifier 'VNode'.
!!! related TS6203 /node_modules/@fullcalendar/react/index.d.ts:4:19: 'VNode' was also declared here.
  }
}

export type EventInput = any;
```

----------------------------------------

TITLE: Defining the getRobotB Function
DESCRIPTION: This snippet defines a function named 'getRobotB' that is responsible for retrieving a robot instance. It ensures modular code and reusability by wrapping the retrieval logic in a function. This setup is essential for maintaining clean architecture.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues3.sourcemap.txt#2025-04-21_snippet_23

LANGUAGE: typescript
CODE:
```
function getRobotB() {
```

----------------------------------------

TITLE: Deeply Nested Object Destructuring
DESCRIPTION: This snippet shows deeply nested object destructuring in a catch clause with the catch variable having the implicit type 'unknown'. The TypeScript compiler flags this as an error, because it is unable to guarantee the existence of the nested object structure on the 'unknown' type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructureCatchClause(strict=true,useunknownincatchvariables=true).errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
"try {} catch ({ a: { b: { c: { x }} }}) { x }"
```

----------------------------------------

TITLE: Use TypeScript Generic Interface with Nested Generics
DESCRIPTION: Declares a variable `v4` using the generic interface `G` with nested generic types. `G<A, B>` is used as the type argument for `T`, and `C` is used as the type argument for `U`. This usage is considered valid.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generics2.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
var v4: G<G<A, B>, C>;         // Ok
```

----------------------------------------

TITLE: Demonstrating Protected Property Access Rules in TypeScript Class Hierarchies
DESCRIPTION: This code shows how protected properties are accessible within their declaring class and subclasses. It demonstrates TypeScript's enforcement of access rules where protected properties can only be accessed within their declaring class or through an instance of the same class or its subclasses.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/protectedClassPropertyAccessibleWithinNestedSubclass1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base {
    protected x: string;
    method() {
        class A {
            methoda() {
                var b: Base;
                var d1: Derived1;
                var d2: Derived2;
                var d3: Derived3;
                var d4: Derived4;

                b.x;            // OK, accessed within their declaring class
                d1.x;           // OK, accessed within their declaring class
                d2.x;           // OK, accessed within their declaring class
                d3.x;           // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
                d4.x;           // OK, accessed within their declaring class
            }
        }
    }
}

class Derived1 extends Base {
    method1() {
        class B {
            method1b() {
                var b: Base;
                var d1: Derived1;
                var d2: Derived2;
                var d3: Derived3;
                var d4: Derived4;

                b.x;            // Error, isn't accessed through an instance of the enclosing class
                d1.x;           // OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class
                d2.x;           // Error, isn't accessed through an instance of the enclosing class
                d3.x;           // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
                d4.x;           // Error, isn't accessed through an instance of the enclosing class
            }
        }
    }
}

class Derived2 extends Base {
    method2() {
        class C {
            method2c() {
                var b: Base;
                var d1: Derived1;
                var d2: Derived2;
                var d3: Derived3;
                var d4: Derived4;

                b.x;            // Error, isn't accessed through an instance of the enclosing class
                d1.x;           // Error, isn't accessed through an instance of the enclosing class
                d2.x;           // OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class
                d3.x;           // Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
                d4.x;           // OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class or one of its subclasses
            }
        }
    }
}

class Derived3 extends Derived1 {
    protected x: string;
    method3() {
        class D {
            method3d() {
                var b: Base;
                var d1: Derived1;
                var d2: Derived2;
                var d3: Derived3;
                var d4: Derived4;

                b.x;            // Error, isn't accessed through an instance of the enclosing class
                d1.x;           // Error, isn't accessed through an instance of the enclosing class
                d2.x;           // Error, isn't accessed through an instance of the enclosing class
                d3.x;           // OK, accessed within their declaring class
                d4.x;           // Error, isn't accessed through an instance of the enclosing class
            }
        }
    }
}

class Derived4 extends Derived2 {
    method4() {
        class E {
            method4e() {
                var b: Base;
                var d1: Derived1;
```

----------------------------------------

TITLE: Destructuring Object with Implicit Any
DESCRIPTION: This snippet demonstrates a common error scenario where destructuring an object without explicit type annotations can lead to implicit `any` types. Since `value1` doesn't have a type annotation, TypeScript infers it as `any`, which can lead to type-related issues later on.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_32

LANGUAGE: typescript
CODE:
```
    function foo({
        value1,
        ~~~~~~ 
!!! error TS7022: 'value1' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
        ~~~~~~ 
!!! error TS7031: Binding element 'value1' implicitly has an 'any' type.
        test1 = value1.test1,
        test2 = value1.test2,
        test3 = value1.test3,
        test4 = value1.test4,
        test5 = value1.test5,
        test6 = value1.test6,
        test7 = value1.test7,
        test8 = value1.test8,
        test9 = value1.test9
    }) {}

```

----------------------------------------

TITLE: Destructuring Object Literal Patterns with TypeScript Errors
DESCRIPTION: This code snippet demonstrates various cases of object destructuring in TypeScript, some of which result in compiler errors due to mismatched property names between the destructured object and the object literal.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitDestructuringObjectLiteralPattern1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var { } = { x: 5, y: "hello" };
var { x4 } = { x4: 5, y4: "hello" };
var { y5 } = { x5: 5, y5: "hello" };
var { x6, y6 } = { x6: 5, y6: "hello" };
var { x7: a1 } = { x7: 5, y7: "hello" };
var { y8: b1 } = { x8: 5, y8: "hello" };
var { x9: a2, y9: b2 } = { x9: 5, y9: "hello" };
```

----------------------------------------

TITLE: Importing and Using Types in TypeScript
DESCRIPTION: This snippet shows how to import types in TypeScript and demonstrates the correct and incorrect usage of imported types. It highlights the error that occurs when trying to use a type import as a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importEqualsDeclaration.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type A = require('./a'); // Ok
import type = require('./b');   // Ok

A.prototype; // Error
~
const a: A = { a: 'a' }; // Ok
void type; // Ok
export declare const AConstructor: typeof A; // Ok
```

----------------------------------------

TITLE: Demonstrating Type Guard Errors in TypeScript Classes
DESCRIPTION: This code illustrates TypeScript's type checking capabilities when using type guards within class definitions. It shows how the compiler handles union types and type narrowing in different scopes, resulting in assignment errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardInClass.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
let x: string | number;

if (typeof x === "string") {
    let n = class {
        constructor() {
            let y: string = x;
        }
    }
}
else {
    let m = class {
        constructor() {
            let y: number = x;
        }
    }
}
```

----------------------------------------

TITLE: Type Narrowing with 'in' on Nullable Objects
DESCRIPTION: The isHTMLTable function demonstrates using the 'in' operator with a nullable generic type. It first checks if the object is truthy before checking for property existence.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=false).errors.txt#2025-04-21_snippet_24

LANGUAGE: typescript
CODE:
```
function isHTMLTable<T extends object | null>(table: T): boolean {
    return !!table && 'html' in table;
}
```

----------------------------------------

TITLE: Exporting Default Value in JavaScript Module
DESCRIPTION: A JavaScript module that exports a string literal as its default export. This file is referenced in the import statements of other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/extensionLoadingPriority(moduleresolution=bundler).errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
export default "a.js";
```

----------------------------------------

TITLE: Duplicate Identifier Error Example in JavaScript/TypeScript
DESCRIPTION: This code snippet demonstrates a common TypeScript error where the same identifier 'a' is declared twice in the same scope - once as a variable and once as a class. TypeScript prevents this to avoid ambiguity and maintain type safety.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationBindDuplicateIdentifier.errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
var a = 10;
class a {
}
```

----------------------------------------

TITLE: TypeScript Definition for Param Governance
DESCRIPTION: This TypeScript definition file declares a function `handleParamGovernance` that takes a `zcf` object as input and returns an object containing a public mixin with a function to retrieve governed parameters. It uses the `ParamStateRecord` type from `./types.js`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reuseTypeAnnotationImportTypeInGlobalThisTypeArgument.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
"    export function handleParamGovernance(zcf: any): {\n      publicMixin: {\n        getGovernedParams: () => globalThis.ERef<import("./types.js").ParamStateRecord>;\n      };\n    };\n    "
```

----------------------------------------

TITLE: Type-safe Path Access in TypeScript
DESCRIPTION: Implements type-safe object property access using path strings. Includes recursive type definitions for nested object traversal and demonstrates usage with const objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes1.errors.txt#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
type PathKeys<T> =
    unknown extends T ? never :
    T extends readonly any[] ? Extract<keyof T, `${number}`> | SubKeys<T, Extract<keyof T, `${number}`>> :
    T extends object ? Extract<keyof T, string> | SubKeys<T, Extract<keyof T, string>> :
    never;

type SubKeys<T, K extends string> = K extends keyof T ? `${K}.${PathKeys<T[K]>}` : never;

declare function getProp2<T, P extends PathKeys<T>>(obj: T, path: P): PropType<T, P>;

const obj2 = {
    name: 'John',
    age: 42,
    cars: [
        { make: 'Ford', age: 10 },
        { make: 'Trabant', age: 35 }
    ]
} as const;

let make = getProp2(obj2, 'cars.1.make');  // 'Trabant'
```

----------------------------------------

TITLE: Importing and Using TypeScript Modules m1 and m2
DESCRIPTION: This snippet demonstrates how to import and use members from the 'm1' and 'm2' modules. It imports 'm1' using `require` and 'm2' with a relative path. It also defines its own exports (`a1`, `c1`, `instance1`, `f1`) and then exports references to the classes imported from 'm1' and 'm2' as `a2` and `a3` respectively.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootRelativePathModuleMultifolderSpecifyOutputFile/node/sourceRootRelativePathModuleMultifolderSpecifyOutputFile.errors.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import m1 = require("ref/m1");
import m2 = require("../outputdir_module_multifolder_ref/m2");
export var a1 = 10;
export class c1 {
    public p1: number;
}

export var instance1 = new c1();
export function f1() {
    return instance1;
}

export var a2 = m1.m1_c1;
export var a3 = m2.m2_c1;
```

----------------------------------------

TITLE: Function Declarations with Type Parameter Defaults (TypeScript)
DESCRIPTION: Demonstrates the declaration of several functions utilizing type parameters, some with defaults. This includes examples both correct and faulty, where defaults improperly reference other parameters. Each function exhibits how type inference and explicit type provision can alter behaviors and outcomes, especially when type defaults reference self or subsequent parameters, leading to errors like TS2744.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericDefaults.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// function without type parameters
declare function f00(a?: A): A;
// no inference
f00();
f00(a);

// function with a type parameter without a default
declare function f01<T>(a?: T): T;
// inference
f01();
f01(a);
// no inference, fully supplied
f01<A>();
f01<A>(a);

// function with a type paramter with a default
declare function f02<T = A>(a?: T): T;
// inference
f02();
f02(a);
f02(b);
// no inference, fully supplied
f02<A>();
f02<A>(a);
f02<B>();
f02<B>(b);

// function with a type parameter with a default that refers to itself
declare function f03<T = T>(a?: T): T;                             ~ !!! error TS2744: Type parameter defaults can only reference previously declared type parameters.
// inference
f03();
f03(a);
f03(b);
// no inference, fully supplied
f03<A>();
f03<A>(a);
f03<B>();
f03<B>(b);

// function with a type paramter without a default and a type parameter with a default
declare function f04<T, U = B>(a?: T, b?: U): [T, U];
// inference
f04();
f04(a);
f04(a, b);
f04(a, c);
// no inference, partially supplied
f04<A>();
f04<A>(a);
f04<A>(a, b);
// no inference, fully supplied
f04<A, B>();
f04<A, B>(a);
f04<A, B>(a, b);
f04<A, C>();
f04<A, C>(a);
f04<A, C>(a, c);

// function with a type parameter without a default and a type parameter with a default that refers to an earlier type parameter
declare function f05<T, U = T>(a?: T, b?: U): [T, U];
// inference
f05();
f05(a);
f05(a, a);
f05(a, b);
// no inference, partially supplied
f05<A>();
f05<A>(a);
f05<A>(a, a);
// no inference, fully supplied
f05<A, B>();
f05<A, B>(a);
f05<A, B>(a, b);

// function with a type parameter with a default that refers to an earlier type parameter with a default
declare function f06<T = A, U = T>(a?: T, b?: U): [T, U];
// inference
f06();
f06(a);
f06(a, a);
f06(a, b);
f06(b, a);
f06(b, b);
// no inference, partially supplied
f06<A>();
f06<A>(a);
f06<A>(a, a);
f06<B>();
f06<B>(b);
f06<B>(b, b);
// no inference, fully supplied
f06<A, B>();
f06<A, B>(a);
f06<A, B>(a, b);
f06<B, C>();
f06<B, C>(b);
f06<B, C>(b, c);

// function with a type parameter without a default and a type parameter with a default that refers to an earlier type parameter with a default
declare function f07<T, U = B, V = U>(a?: T, b?: U, c?: V): [T, U, V];
// inference
f07();
f07(a, b);
f07(a, c);
f07(a, b, b);
f07(a, b, c);
f07(a, c, b);
f07(a, c, c);
// no inference, partially supplied
f07<A>();
f07<A>(a);
f07<A>(a, b);
f07<A>(a, b, b);
f07<A, B>();
f07<A, B>(a);
f07<A, B>(a, b);
f07<A, B>(a, b, b);
f07<A, C>();
f07<A, C>(a);
f07<A, C>(a, c);
f07<A, C>(a, c, c);
// no inference, fully supplied
f07<A, B, C>();
f07<A, B, C>(a);
f07<A, B, C>(a, b);
f07<A, B, C>(a, b, c);
f07<A, C, A>();
f07<A, C, A>(a);
f07<A, C, D>(a, c);
f07<A, C, D>(a, c, d);

// function with a type parameter with a default that refers to an earlier type parameter with a constraint
declare function f08<T extends A, U = T>(a?: T, b?: U): [T, U];
// inference
f08();
f08(a);
f08(a, a);
f08(a, b);
// no inference, partially supplied
f08<A>();
f08<A>(a);
f08<A>(a, a);
// no inference, fully supplied
f08<A, B>();
f08<A, B>(a);
f08<A, B>(a, b);

// function with a type parameter with a constraint and a default that refers to an earlier type parameter
declare function f09<T, U extends T = T>(a?: T, b?: U): [T, U];
// inference
f09();
f09(a);
f09(a, a);
f09(a, ab);
// no inference, partially supplied
f09<A>();
f09<A>(a);
f09<A>(a, a);
f09<A>(a, ab);
// no inference, fully supplied
f09<A, AB>();
f09<A, AB>(a);
f09<A, AB>(a, ab);

// function with a type parameter with a constraint and a default that refers to an earlier type parameter with a constraint
declare function f10<T extends A, U extends T = T>(a?: T, b?: U): [T, U];
// inference
f10();
f10(a);
f10(a, a);
f10(a, ab);
// no inference, partially supplied
f10<A>();
f10<A>(a);
f10<A>(a, a);
f10<A>(a, ab);
// no inference, fully supplied
f10<A, A>();
f10<A, A>(a);
f10<A, A>(a, a);
f10<A, A>(a, ab);
f10<A, AB>();
f10<A, AB>(a);
f10<A, AB>(a, ab);

// function with a type parameter with a default that refers to an earier type parameter in a union
declare function f11<T, U = T | B>(a?: T, b?: U): [T, U];
// inference
f11();
f11(a);
f11(a, a);
f11(a, b);
f11(a, c);
// no inference, partially supplied
f11<A>();
f11<A>(a);
f11<A>(a, a);
f11<A>(a, b);
// no inference, fully supplied
f11<A, C>();
f11<A, C>(a);
f11<A, C>(a, c);

// function with a type parameter with a default that refers to an earlier type parameter in an intersection
declare function f12<T, U = T & B>(a?: T, b?: U): [T, U];
// inference
f12();
f12(a);
f12(a, a);
f12(a, b);
f12(a, c);
// no inference, partially supplied
f12<A>();
f12<A>(a);
f12<A>(a, ab);
// no inference, fully supplied
f12<A, C>();
f12<A, C>(a);
f12<A, C>(a, c);

// function with a type parameter with a default that refers to a later type parameter with a default
declare function f13<T = U, U = B>(a?: T, b?: U): [T, U];                             ~ !!! error TS2744: Type parameter defaults can only reference previously declared type parameters.
// inference
f13();
f13(a);
f13(a, b);
f13(a, c);
// no inference, partially supplied
f13<A>();
f13<A>(a);
f13<A>(a, b);
// no inference, fully supplied
f13<A, C>();
f13<A, C>(a);
f13<A, C>(a, c);
f13<A, C>(a, c);

// function with a type parameter without a default and a type parameter with a default that refers to a later type parameter with a default
declare function f14<T, U = V, V = C>(a?: T, b?: U, c?: V): [T, U, V];                                ~ !!! error TS2744: Type parameter defaults can only reference previously declared type parameters.
// inference
f14();
f14(a);
f14(a, b);
f14(a, b, c);
f14(a, b, d);
// no inference, partially supplied
f14<A>();
f14<A>(a);
f14<A>(a, b);
f14<A>(a, b, c);
f14<A, B>();
f14<A, B>(a);
f14<A, B>(a, b);
f14<A, B>(a, b, c);
// no inference fully supplied
f14<A, B, D>();
f14<A, B, D>(a);
f14<A, B, D>(a, b);
f14<A, B, D>(a, b, d);

// function with two type parameters with defaults that mutually refer to each other
declare function f15<T = U, U = T>(a?: T, b?: U): [T, U];                             ~ !!! error TS2744: Type parameter defaults can only reference previously declared type parameters.
// inference
f15();
f15(a);
f15(a, b);
// no inference, partially supplied
f15<A>();
f15<A>(a);
f15<A>(a, a);
// no inference, fully supplied
f15<A, B>();
f15<A, B>(a);
f15<A, B>(a, b);

// function with a type parameter without a default and two type parameters with defaults that mutually refer to each other
declare function f16<T, U = V, V = U>(a?: T, b?: U, c?: V): [T, U, V];                                ~ !!! error TS2744: Type parameter defaults can only reference previously declared type parameters.
// no inference
f16();
f16(a);
f16(a, b);
f16(a, b, b);
```

----------------------------------------

TITLE: Creating Generic Classes and Constructors in TypeScript
DESCRIPTION: This snippet demonstrates the creation of generic classes and constructors with default type parameters. It includes examples of base classes, derived classes, and constructor signatures with generic types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericDefaults.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
interface Base01<T> { a: T; }
interface Base01Constructor { new <T = number>(a?: T): Base01<T>; }
declare const Base01: Base01Constructor;
declare class Derived01<T> extends Base01<T> { }
declare class Derived02<T = string> extends Base01<T> { }
```

----------------------------------------

TITLE: Destructuring Typed Object in TypeScript
DESCRIPTION: This snippet shows destructuring a typed object (MultiRobot) with specific property assignments. It extracts 'name' and 'skills' properties, where 'skills' is further destructured into 'primary' and 'secondary' skills.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_31

LANGUAGE: TypeScript
CODE:
```
} = <MultiRobot>{ name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }
```

----------------------------------------

TITLE: Extracting Robot Data from Function Call in JavaScript
DESCRIPTION: This snippet iterates over data returned from a `getRobots` function, destructuring the returned values to assign the first element to `numberA3` and the rest to `robotAInfo`. The `numberA3` is then logged to the console. The function `getRobots` is a prerequisite for running this snippet.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_26

LANGUAGE: JavaScript
CODE:
```
for ([numberA3, ...robotAInfo] of getRobots()) {
    console.log(numberA3);
}
```

----------------------------------------

TITLE: TypeScript Module Implementation
DESCRIPTION: Implements User type imports, exports, and a function that returns a User object. Demonstrates type re-exports and concrete implementations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowImportingTypesDtsExtension(allowimportingtsextensions=false,moduleresolution=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import type { User } from "./types.d.ts";
export type { User } from "./types.d.ts";

export const user: User = { name: "John" };

export function getUser(): import("./types.d.ts").User {
    return user;
}
```

----------------------------------------

TITLE: JSX Error Example
DESCRIPTION: This snippet demonstrates a JSX syntax error in a TypeScript file. The error TS1382 indicates an unexpected token and suggests using `{'>'}` or `&gt;` as a possible solution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxEsprimaFbTestSuite.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
"<LeftRight left=<a /> right=<b>monkeys /> gorillas</b> />;
```

----------------------------------------

TITLE: Defining Exported TypeScript Module with Various Declarations
DESCRIPTION: This snippet defines an exported TypeScript module with variable, function, class, interface, and nested module declarations. It includes both regular and export declarations, as well as ambient declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/giant.errors.txt#2025-04-21_snippet_7

LANGUAGE: TypeScript
CODE:
```
export module eM {
    var V;
    function F() { };
    class C { };
    interface I { };
    module M { };
    export var eV;
    export function eF() { };
    export class eC { };
    export interface eI { };
    export module eM { };
    export declare var eaV;
    export declare function eaF() { };
    export declare class eaC { };
    export declare module eaM { };
}
```

----------------------------------------

TITLE: Defining a Module and Class in TypeScript
DESCRIPTION: This snippet defines a JSX module interface and exports a class named AppComponent that includes a render function. The module declaration allows any string to be used as intrinsic elements in JSX.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxFactoryQualifiedNameResolutionError.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
"declare module JSX {\n    interface IntrinsicElements {\n        [s: string]: any;\n    }\n}\n\nexport class AppComponent {\n    render(createElement) {\n        return MyElement.createElement(\"div\", null);\n    }\n}\n"
```

----------------------------------------

TITLE: Implementing mapValues Function in TypeScript
DESCRIPTION: This function signature represents a simplified version of Lodash's mapValues function. It takes a dictionary-like object and a callback function to transform values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emptyObjectNotSubtypeOfIndexSignatureContainingObject2.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
function mapValues<T, TResult>(
  obj: Dictionary<T> | NumericDictionary<T> | null | undefined,
  callback: DictionaryIterator<T, TResult>
): Dictionary<TResult> {
  return null as any;
}
```

----------------------------------------

TITLE: Declaring Function foo with Number Parameter
DESCRIPTION: TypeScript declaration for function 'foo' that accepts an optional number parameter and returns void
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callHierarchyFunctionAmbiguity.4.callHierarchy.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function foo(x?: number): void;
```

----------------------------------------

TITLE: Destructuring Assignment in TypeScript
DESCRIPTION: This snippet demonstrates destructuring assignment patterns in TypeScript. It includes array assignment with default values, tuples, and the use of rest elements. Key parameters include the variables being destructured and their respective default values or initializations. This code presumes TypeScript is properly set up in the developer's environment. The output is a set of variables initialized from arrays or functions returning arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringArrayBindingPatternAndAssignment1ES5iterable.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var [a0, a1]: any = undefined;
var [a2 = false, a3 = 1]: any = undefined;
var [b0, b1, b2] = [2, 3, 4];
var [b3, b4, b5]: [number, number, string] = [1, 2, "string"];

function foo() {
    return [1, 2, 3];
}

var [b6, b7] = foo();
var [...b8] = foo();
var temp = [1,2,3]
var [c0, c1] = [...temp];
var [c2] = [];
var [[[c3]], [[[[c4]]]]] = [[[]], [[[[]]]]]
var [[c5], c6]: [[string|number], boolean] = [[1], true];
var [, c7] = [1, 2, 3];
var [,,, c8] = [1, 2, 3, 4];
var [,,, c9] = [1, 2, 3, 4];
var [,,,...c10] = [1, 2, 3, 4, "hello"];
var [c11, c12, ...c13] = [1, 2, "string"];
var [c14, c15, c16] = [1, 2, "string"];
```

----------------------------------------

TITLE: Generic Function with Type Constraints in TypeScript
DESCRIPTION: This snippet defines a generic function 'make' that utilizes type constraints. It shows how to structure a function to operate on generic types while ensuring type safety during function calls.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intraExpressionInferences.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// Repro #38623

function make<M>(o: { mutations: M,  action: (m: M) => void }) { }

make({
   mutations: {
       foo() { }
   },
   action: (a) => { a.foo() }
});
```

----------------------------------------

TITLE: Exporting a Class and Instance in TypeScript
DESCRIPTION: This snippet exports a variable 'm2_a1', a class 'm2_c1' with a public property, and creates an instance of the class. It also exports a function 'm2_f1' that returns the created instance. Dependencies include TypeScript to manage exports and class definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcerootUrlMixedSubfolderSpecifyOutputFile/node/sourcerootUrlMixedSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    export var m2_a1 = 10;
    export class m2_c1 {
        public m2_c1_p1: number;
    }
    
    export var m2_instance1 = new m2_c1();
    export function m2_f1() {
        return m2_instance1;
    }
```

----------------------------------------

TITLE: Chaining .then() with sPromise on a Promise
DESCRIPTION: Chains the `.then()` method on a `Promise<number>` instance with `sPromise` as fulfillment, rejection and notify handlers. This should be type-compatible.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations3.errors.txt#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
var s9d = s9.then(sPromise, sPromise, sPromise); // ok
```

----------------------------------------

TITLE: Testing Function Compatibility with All Optional and Rest Parameters
DESCRIPTION: Tests compatibility with a function signature where all parameters are optional or rest parameters. Demonstrates assignability rules for (x?: number, y?: string, ...z: number[]) => number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithCallSignaturesWithRestParameters.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
var a4: (x?: number, y?: string, ...z: number[]) => number;
    a4 = () => 1; // ok, fewer required params
    a4 = (x?: number, y?: number) => 1; // error, type mismatch
    a4 = (x: number) => 1; // ok, all present params match
    a4 = (x: number, y?: number) => 1;  // error, second param has type mismatch
    a4 = (x?: number, y?: string) => 1;  // ok, same number of required params with matching types
    a4 = (x: number, ...args: string[]) => 1;  // error, rest params have type mismatch
```

----------------------------------------

TITLE: Importing Module in TypeScript
DESCRIPTION: TypeScript file importing a test function from a library using a relative path.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerDirectoryModule(module=nodenext,moduleresolution=bundler).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { test } from '../lib';
```

----------------------------------------

TITLE: Async Function Declaration with Invalid Return Type (PromiseLike<void>)
DESCRIPTION: This snippet defines an async function `fn5` with a declared return type of `PromiseLike<void>`. TypeScript throws an error because async functions must return a `Promise`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncFunctionDeclaration15_es6.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
async function fn5(): PromiseLike<void> { }
```

----------------------------------------

TITLE: Assertion Functions in TypeScript Unit Testing
DESCRIPTION: This module contains various assertion functions used for unit testing. These functions validate conditions, throw errors when necessary, and track bugs related to test scenarios.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserharness.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
export module Assert {
    export var bugIds: string[] = [];
    export var throwAssertError = (error: Error) => {
        throw error;
    };

    export function bug(id: string) {
        if (bugIds.indexOf(id) < 0) {
            bugIds.push(id);
        }
    }

    export function is(result: boolean, msg?: string) {
        if (!result) {
            throwAssertError(new Error(msg || "Expected true, got false."));
        }
    }

    // Other assertion functions follow...
}
```

----------------------------------------

TITLE: Defining Class and Instances in TypeScript
DESCRIPTION: This snippet defines a class 'm1_c1' with a public property and creates an instance of it. The purpose is to demonstrate class structure and instance creation in TypeScript. No specific dependencies; it solely relies on TypeScript language features. No inputs; outputs an instance of 'm1_c1'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootRelativePathSubfolderSpecifyOutputFile/node/sourceRootRelativePathSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
    var m1_a1 = 10;
    class m1_c1 {
        public m1_c1_p1: number;
    }
    
    var m1_instance1 = new m1_c1();
    function m1_f1() {
        return m1_instance1;
    }
```

----------------------------------------

TITLE: Array and Object Type Definitions - TypeScript
DESCRIPTION: This segment details various ways to define arrays and objects of the Base type in TypeScript, using both conventional and generics-based approaches, while demonstrating type assignments for class members.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var x7: Base[] = [d1, d2];
var x8: Array<Base> = [d1, d2];
var x9: { [n: number]: Base; } = [d1, d2];
var x10: {n: Base[]; }  = { n: [d1, d2] };
```

----------------------------------------

TITLE: Creating a Mixin with Context in TypeScript
DESCRIPTION: This code snippet defines a function that creates a mixin based on provided Context and Base class types. It uses generics to define the constraints on the types to be mixed and ensures that the resulting mixin includes a context property. Required dependencies include TypeScript's type system for generics and class definitions. The expected input is a class type for the context and a base class type, and the output is a class type that extends the base with added properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/override19.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type Foo = abstract new(...args: any) => any;
declare function CreateMixin<C extends Foo, T extends Foo>(Context: C, Base: T): T & {
   new (...args: any[]): { context: InstanceType<C> }
};
class Context {}
```

----------------------------------------

TITLE: Importing and Using Modules in TypeScript
DESCRIPTION: This TypeScript code imports 'Calculator', 'test' and 'test2' from './file1' using aliases. It instantiates 'Calculator' as 'calc', calls 'handleChar', and calls 'test' as 't1'. However, it doesn't use 'test2' as 't2', resulting in a TS6133 error: 't2' is declared but its value is never read.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedImports8.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    import {Calculator as calc, test as t1, test2 as t2} from "./file1"
                                                     ~~
!!! error TS6133: 't2' is declared but its value is never read.
    
    var x = new calc();
    x.handleChar();
    t1();
```

----------------------------------------

TITLE: TypeScript Interface Definition in inner/other.d.ts
DESCRIPTION: This snippet defines the 'Thing' interface and exports the 'x' constant as a function returning a 'Thing'. This provides type information for the 'inner/other' module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsBlocksSpecifierResolution(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    // esm format file
    export interface Thing {}
    export const x: () => Thing;
```

----------------------------------------

TITLE: Configuring Module Type in package.json
DESCRIPTION: Sets the module type to 'module' in the package.json file for the mdast-util-to-string package.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esmNoSynthesizedDefault(module=preserve).errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{ "type": "module" }
```

----------------------------------------

TITLE: Incorrectly Using a Type-Only Export as a Value in TypeScript
DESCRIPTION: Demonstrates an error that occurs when trying to use a type-only export as a value. The error TS1362 is triggered because A was exported with 'export type' but is being used in a 'new' expression.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDeclaration(isolatedmodules=true).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { A } from './a';
declare const a: A;
new A();
```

----------------------------------------

TITLE: Importing Type and Creating Aliases in TypeScript
DESCRIPTION: Demonstrates importing a type and attempting to create aliases, resulting in TypeScript errors. The errors occur when trying to reference declarations imported using 'import type'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importEquals3.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import type * as a from './a';
import A = a.A; // Error
import aa = a;  // Error

const x = 0;
export { a, A, x };
```

----------------------------------------

TITLE: Package Configuration for ESM in JSON
DESCRIPTION: This package.json snippet configures the project to use ECMAScript modules (ESM) by setting the 'type' field to 'module'. It also sets the package as private.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsGeneratedNameCollisions(module=nodenext).errors.txt#2025-04-21_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Destructuring Excess Properties - Basic Examples
DESCRIPTION: Demonstrates TypeScript errors when destructuring objects with excess properties that aren't included in the destructuring pattern.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/missingAndExcessProperties.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function f3() {
    var { } = { x: 0, y: 0 };
    var { x } = { x: 0, y: 0 };
    var { y } = { x: 0, y: 0 };
    var { x, y } = { x: 0, y: 0 };
}
```

----------------------------------------

TITLE: Generic Component Declaration with Typed Props Interface
DESCRIPTION: This declaration defines a component that accepts props conforming to the InferParamProp interface. It uses the same generic type parameter to maintain type consistency across the component's properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentsWithTypeArguments2.errors.txt#2025-04-21_snippet_7

LANGUAGE: TypeScript
CODE:
```
declare function InferParamComponent<T>(attr: InferParamProp<T>): JSX.Element;
```

----------------------------------------

TITLE: Defining Variables, Class, and Function in TypeScript (ref/m1.ts)
DESCRIPTION: This snippet defines a variable `m1_a1`, a class `m1_c1` with a public property, an instance of the class `m1_instance1`, and a function `m1_f1` that returns the class instance. It serves as a basic module structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcemapSubfolderSpecifyOutputFile/node/sourcemapSubfolderSpecifyOutputFile.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Type Guarding and Extraction with Conditional Types in TypeScript
DESCRIPTION: This snippet defines utility functions for type guarding and extraction using conditional types. It includes an 'isFunction' type guard and a 'getFunction' extractor, along with usage examples demonstrating type narrowing and inference.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/conditionalTypes2.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
function isFunction<T>(value: T): value is Extract<T, Function> {
    return typeof value === "function";
}

function getFunction<T>(item: T) {
    if (isFunction(item)) {
        return item;
    }
    throw new Error();
}

function f10<T>(x: T) {
    if (isFunction(x)) {
        const f: Function = x;
        const t: T = x;
    }
}

function f11(x: string | (() => string) | undefined) {
    if (isFunction(x)) {
        x();
    }
}

function f12(x: string | (() => string) | undefined) {
    const f = getFunction(x);  // () => string
    f();
}
```

----------------------------------------

TITLE: Declaring Base and Derived Class Interfaces
DESCRIPTION: Defines base class B with method declarations and derived class D extending B with method override specifications
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/override3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare class B {
    foo(): void
    bar(): void
}

declare class D extends B {
    foo (): void;
    override bar (): void;
}
```

----------------------------------------

TITLE: Valid Generic Function Declaration in TypeScript
DESCRIPTION: This snippet demonstrates a correct way to declare a generic function with a constraint on the type parameter.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxGenericArrowFunctionParsing.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
var x2 = <T extends {}>() => {};
x2();
```

----------------------------------------

TITLE: Function Overload with Type Mismatch in TypeScript
DESCRIPTION: This code demonstrates a TypeScript function with overloads and an error arising from a type mismatch during a function call. The function `foo` is defined with two overloads, one for an array of objects with number property 'a', returning a string, and another for an array of objects with boolean property 'a', returning a number. When calling `foo` with an array of objects where the property 'a' is a string, TypeScript raises a TS2769 error indicating no matching overload due to the type mismatch.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionOverloads40.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    function foo(bar:{a:number;}[]):string;
    function foo(bar:{a:boolean;}[]):number;
    function foo(bar:{a:any;}[]):any{ return bar }
    var x = foo([{a:'bar'}]);
                  ~
```

----------------------------------------

TITLE: Exporting Modules ESM TypeScript
DESCRIPTION: Demonstrates the use of ECMAScript module syntax to export modules in TypeScript without encountering errors, as it does not require the same tslib helpers as commonjs.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportHelpersCollisions2(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
// esm format file
export * from "fs";
export * as fs from "fs";
```

----------------------------------------

TITLE: TypeScript Number to String Type Error Examples
DESCRIPTION: Demonstrates two common TypeScript type errors: returning a number where a string is expected, and passing a number argument to a function expecting a string parameter. Shows both invalid and valid type coercion approaches.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/numberToString.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f1(n:number):string {
    return n; // error return type mismatch
}

function f2(s:string):void {
}

f1(3);
f2(3); // error no coercion to string
f2(3+""); // ok + operator promotes
```

----------------------------------------

TITLE: Generic Interface Recursion Error: Derived<T> Interface
DESCRIPTION: This snippet defines a generic interface `Derived<T>` that extends `Base<T>`, which (through other interfaces) extends `Derived<T>` again, creating a recursive reference. TypeScript flags this as an error (TS2310). The interface defines a member `y` of type `string`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceThatIndirectlyInheritsFromItself.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
        interface Derived<T> extends Base<T> {
                  ~~~~~~~
!!! error TS2310: Type 'Derived<T>' recursively references itself as a base type.
            y: string;
        }
    
```

----------------------------------------

TITLE: Incorrect Usage of Type-Only Export in TypeScript
DESCRIPTION: This snippet demonstrates an error that occurs when trying to use a type-only export as a value. TypeScript compiler throws an error indicating that 'A' cannot be used as a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace4.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { A } from './b';
A;
```

----------------------------------------

TITLE: Importing Modules in TypeScript
DESCRIPTION: Demonstrates two ways of importing modules in TypeScript: using ES6 import syntax and CommonJS require syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/impliedNodeFormatEmit4(module=commonjs).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import {} from "./a";
import a = require("./a");
```

----------------------------------------

TITLE: Exporting Calculator Class and Functions in TypeScript
DESCRIPTION: This snippet defines and exports a class named 'Calculator' with a method 'handleChar', and two functions 'test' and 'test2'. These exports allow the elements to be accessible in other modules. There are no additional prerequisites or dependencies required besides TypeScript itself.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedImports6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export class Calculator {
    handleChar() {}
}

export function test() {

}

export default function test2() {

}
```

----------------------------------------

TITLE: Defining a Class and Functions in TypeScript
DESCRIPTION: This TypeScript code defines a class named 'Calculator' with a method 'handleChar' and two functions, 'test' and 'test2'. These are exported to be used by other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedImports8.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    export class Calculator {
        handleChar() {}
    }
    
    export function test() {
    
    }
    
    export function test2() {
    
    }
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options for Angular2 Project
DESCRIPTION: This JSON configuration sets up TypeScript compiler options for an Angular2 project. It specifies ES5 as the target, uses CommonJS modules, enables decorator metadata, and sets other relevant options.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/emitDecoratorMetadataCommonJSISolatedModulesNoResolve/node/emitDecoratorMetadataCommonJSISolatedModulesNoResolve.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "compileOnSave": true,
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "isolatedModules": true,
    "noResolve": true
  },
  "files": [
    "main.ts"
  ]
}
```

----------------------------------------

TITLE: Inner Package Configuration (package.json)
DESCRIPTION: Configures the 'inner' package with custom export mappings for different module types (CJS, MJS, JS). Sets the package as private.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExports(module=nodenext).errors.txt#2025-04-21_snippet_6

LANGUAGE: JSON
CODE:
```
{
    "name": "inner",
    "private": true,
    "exports": {
        "./cjs/*": "./*.cjs",
        "./mjs/*": "./*.mjs",
        "./js/*": "./*.js"
    }
}
```

----------------------------------------

TITLE: Managing Block-Scoped Variables in TypeScript
DESCRIPTION: This TypeScript snippet shows an error when using a block-scoped variable 'a' before its declaration. The given code results in a TS2448 error, highlighting the need to declare block-scoped variables prior to usage. The variable 'b' is initialized to avoid similar issues.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationLetDeclarationOrder2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
let b = 30;
a = 10;
```

----------------------------------------

TITLE: Configuring Package with TypeScript Definitions
DESCRIPTION: This package.json snippet configures a package named 'pkg' with TypeScript type definitions. It specifies the main types file and an export that points to a different JavaScript file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tripleSlashTypesReferenceWithMissingExports(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
    "name": "pkg",
    "types": "index.d.ts",
    "exports": "some-other-thing.js"
}
```

----------------------------------------

TITLE: Interface Declaration with Indexer and Property Type Errors
DESCRIPTION: This code defines an interface `a0` with various members including indexers and properties. The properties `p2`, `p4`, `p5`, `f3`, and `f4` are declared with types that are not assignable to the indexer type `() => string`, resulting in TypeScript errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfacedeclWithIndexerErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface a0 {
        (): string;
        (a, b, c?: string): number;
        
        new (): string;
        new (s: string);
    
        [n: number]: ()=>string;
        [s: string]: ()=>string;
    
        p1;
        p2: string;
        p3?;
        p4?: number;
        p5: (s: number) =>string;
    
        f1();
        f2? ();
        f3(a: string): number;
        f4? (s: number): string;
    }
```

----------------------------------------

TITLE: Arrow Functions and Callbacks - TypeScript
DESCRIPTION: This code illustrates multiple variations of arrow functions and regular functions that return arrays of Base class instances. It shows different syntaxes for defining functions that match TypeScript's type system.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var x1: () => Base[] = () => [d1, d2];
var x2: () => Base[] = function() { return [d1, d2] };
var x3: () => Base[] = function named() { return [d1, d2] };
var x4: { (): Base[]; } = () => [d1, d2];
```

----------------------------------------

TITLE: Using Destructuring with Spread in Generic Function - TypeScript
DESCRIPTION: This function demonstrates using a generically typed object A with a nested property z of type T. The spread operator is successfully used on this nested object, showcasing advanced TypeScript usage.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/spreadObjectOrFalsy.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
function g1<T extends {}, A extends { z: (T | undefined) & T }>(a: A) {
        const { z } = a;
        return {
            ...z
        };
    }
```

----------------------------------------

TITLE: Examples of Truthy and Falsy Expressions in Control Flow
DESCRIPTION: This snippet contains various examples showcasing expressions that are evaluated in if, while, and do-while statements, specifically identifying which expressions result in always truthy or falsy evaluations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ifDoWhileStatements.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// literals
if (true) { }
while (true) { }
do { }while(true)

if (null) { }
    ~~~~
!!! error TS2873: This kind of expression is always falsy.
while (null) { }
       ~~~~
!!! error TS2873: This kind of expression is always falsy.
do { }while(null)
            ~~~~
!!! error TS2873: This kind of expression is always falsy.

if (undefined) { }
    ~~~~~~~~~
!!! error TS2873: This kind of expression is always falsy.
while (undefined) { }
       ~~~~~~~~~
!!! error TS2873: This kind of expression is always falsy.
do { }while(undefined)
            ~~~~~~~~~
!!! error TS2873: This kind of expression is always falsy.
```

LANGUAGE: typescript
CODE:
```
if (0.0) { }
while (0.0) { }
do { }while(0.0)

if ('a string') { }
    ~~~~~~~~~~
!!! error TS2872: This kind of expression is always truthy.
while ('a string') { }
       ~~~~~~~~~~
!!! error TS2872: This kind of expression is always truthy.
do { }while('a string')
            ~~~~~~~~~~
!!! error TS2872: This kind of expression is always truthy.
```

LANGUAGE: typescript
CODE:
```
if ('') { }
    ~~
!!! error TS2873: This kind of expression is always falsy.
while ('') { }
       ~~
!!! error TS2873: This kind of expression is always falsy.
do { }while('')
            ~~
!!! error TS2873: This kind of expression is always falsy.
```

----------------------------------------

TITLE: Async Function with Promise.all and MaybePromise in TypeScript
DESCRIPTION: This snippet shows an async function using Promise.all with MaybePromise values, demonstrating how TypeScript handles multiple awaited values of different types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitedTypeStrictNull.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
async function main() {
    let aaa: number;
    let bbb: string;
    [
        aaa,
        bbb,
    ] = await Promise.all([
        MaybePromise(1),
        MaybePromise('2'),
        MaybePromise(true),
    ])
}
```

----------------------------------------

TITLE: Subtyping with Named Properties in TypeScript
DESCRIPTION: This example demonstrates subtyping behavior with named properties. It shows how TypeScript handles property inheritance and type checking between base class A and derived class B, highlighting an error when attempting to assign an incompatible type to an inherited property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithObjectMembers.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
class A {
    foo: Base;
    bar: Base;
}

class B extends A {
    foo: Derived; // ok
    bar: string; // error
}
```

----------------------------------------

TITLE: Exporting an Object in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to export an object using CommonJS syntax, where 'person' is an object containing personal details. This structure allows for modular code organization.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesMaxDepthIncreased/node/nodeModulesMaxDepthIncreased.errors.txt#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
exports.person = {
    "name": "John Doe",
    "age": 42
};
```

----------------------------------------

TITLE: Function Returning Incorrect Type - Number Instead of String
DESCRIPTION: A function annotated to return a string but actually returns a number, causing a type error
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocBracelessTypeTag1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/** @type () => string */
function fn1() {
  return 42;
  ~~~~~~
!!! error TS2322: Type 'number' is not assignable to type 'string'.
}
```

----------------------------------------

TITLE: Correct Usage of 'this' with Constructor Parameter
DESCRIPTION: This snippet presents a correct example of initializing instance member variables using 'this.x', demonstrating the proper way to access constructor parameters. Both instance member variables 'a' and 'b' are correctly initialized, complying with TypeScript's scoping rules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/initializerReferencingConstructorParameters.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
class E {
    a = this.x; // ok
    b: typeof this.x; // ok
    constructor(public x) { }
}
```

----------------------------------------

TITLE: Contextual Typing and Function Arguments
DESCRIPTION: This snippet illustrates how TypeScript infers types for the last argument in function calls. It shows using the call function with a flexible parameter list.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/variadicTuples1.errors.txt#2025-04-21_snippet_12

LANGUAGE: TypeScript
CODE:
```
declare function call<T extends unknown[], R>(...args: [...T, (...args: T) => R]): [T, R];

call('hello', 32, (a, b) => 42);
call(...sa, (...x) => 42);
```

----------------------------------------

TITLE: Interface Extension with Private Member Error (No Generics)
DESCRIPTION: This snippet defines a class `Base` with a private method `x`. The interface `Foo` attempts to extend `Base` and declares a public method `x` with type `any`. This causes a TypeScript error because the privacy of `x` differs between the base class and the interface, where `x` is private in `Base` but not in `Foo`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceWithPropertyThatIsPrivateInBaseType2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    class Base {
        private x() {}
    }
    
    interface Foo extends Base { // error
              ~~~
!!! error TS2430: Interface 'Foo' incorrectly extends interface 'Base'.
!!! error TS2430:   Property 'x' is private in type 'Base' but not in type 'Foo'.
        x(): any;
    }
```

----------------------------------------

TITLE: Implementing ES2023 Array Methods in TypeScript
DESCRIPTION: Demonstrates the usage of new ES2023 array methods with TypeScript type checking. Shows various array operations including finding last elements, sorting, splicing, and element replacement. Includes a type error demonstration with undefined parameter.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/doYouNeedToChangeYourTargetLibraryES2023(target=esnext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export let array = [0, 2, 3, 4];

function somePredicate(x: any): boolean {
    return x === 4;
}

export let lastIndex1 = array.findLastIndex(v => v === 4);
export let lastIndex2 = array.findLastIndex(somePredicate);

export let last1 = array.findLast(somePredicate);
export let last2 = array.findLast(somePredicate);

export let sorted = array.toSorted();

export let spliced1 = array.toSpliced(2);
export let spliced2 = array.toSpliced(2, 1);
export let spliced3 = array.toSpliced(2, 1, 4, 5, 6, 7);
export let spliced4 = array.toSpliced(2, undefined);
export let spliced5 = array.toSpliced(2, undefined, 4, 5, 6, 7);

export let startsWithOne = array.with(0, 1);
export let inTheEnd = array.with(-1, 1);
```

----------------------------------------

TITLE: Type Definitions and Mapped Types in TypeScript
DESCRIPTION: Defines basic type structures including Identity type and mapped types M0, M1, M2, and M3 with partial and required type modifiers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeIndexedAccessConstraint.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type Identity<T> = { [K in keyof T]: T[K] };

type M0 = { a: 1, b: 2 };

type M1 = { [K in keyof Partial<M0>]: M0[K] };

type M2 = { [K in keyof Required<M1>]: M1[K] };

type M3 = { [K in keyof Identity<Partial<M0>>]: M0[K] };
```

----------------------------------------

TITLE: Incorrect 'this' Type Usage in Class Constructors
DESCRIPTION: This code snippet shows two classes with constructors that incorrectly use the 'this' type. The 'this' type is not allowed in these contexts, leading to TypeScript compilation errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisTypeErrors2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Base {
    constructor(a: this) {
    }
}
class Generic<T> {
}
class Derived {
    n: number;
    constructor(public host: Generic<this>) {
        let self: this = this;
        this.n = 12;
    }
}
```

----------------------------------------

TITLE: Incorrect Import Statement in TypeScript
DESCRIPTION: This snippet shows an incorrect import statement in TypeScript, resulting in multiple compiler errors. The statement attempts to import from a file named '0.ts' but contains syntax errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/invalidSyntaxNamespaceImportWithSystem.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import * from Zero from "./0"
```

----------------------------------------

TITLE: Using JSX Element Without Proper Interface Definition
DESCRIPTION: This code snippet demonstrates the usage of a JSX element (<div>) that causes a TypeScript error due to the missing JSX.IntrinsicElements interface. The error indicates that the element implicitly has type 'any'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxElementResolution18.errors.txt#2025-04-21_snippet_1

LANGUAGE: TSX
CODE:
```
<div n='x' />;
```

----------------------------------------

TITLE: Using const Type Parameters with Object Records in TypeScript
DESCRIPTION: Demonstrates how const type parameters affect type inference when working with Record types and mapped types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeParameterConstModifiers.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
type NotEmpty<T extends Record<string, any>> = keyof T extends never ? never : T;

const thing = <const O extends Record<string, any>>(o: NotEmpty<O>) => o;

const t = thing({ foo: '' });  // readonly { foo: "" }

type NotEmptyMapped<T extends Record<string, any>> = keyof T extends never ? never : { [K in keyof T]: T[K] };

const thingMapped = <const O extends Record<string, any>>(o: NotEmptyMapped<O>) => o;

const tMapped = thingMapped({ foo: '' });  // { foo: "" }
```

----------------------------------------

TITLE: Module Augmentation with Conflicting Declarations
DESCRIPTION: Attempts to redeclare variable 'x' in module augmentations, causing TypeScript errors due to duplicate declarations
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/duplicateIdentifierRelatedSpans_moduleAugmentation.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export {};

declare module "./a" {
    export const x = 0;
}

declare module "../dir/a" {
    export const x = 0;
}
```

----------------------------------------

TITLE: Using Reserved Keyword in Object Destructuring Pattern (TypeScript)
DESCRIPTION: This code attempts to use the reserved keyword 'while' as both a property name and an identifier in an object destructuring pattern, which is not allowed in TypeScript. The compiler generates errors indicating that 'while' cannot be used as an identifier and that the syntax is incorrect.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectBindingPatternKeywordIdentifiers02.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var { while: while } = { while: 1 }
```

----------------------------------------

TITLE: Complex Rest Parameter Type Assignment Validation
DESCRIPTION: Explores type compatibility and assignment constraints with generic rest parameters, highlighting TypeScript's strict type checking for function signatures
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericRestTypes.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function assignmentWithComplexRest<T extends any[]>() {
    const fn1: (x: string, ...rest: T) => void = (x, ..._) => x;
    const fn2: (...args: never) => void = fn1;
}

function assignmentWithComplexRest2<T extends any[]>() {
    const fn1: (cb: (x: string, ...rest: T) => void) => void = (cb) => {};
    const fn2: (cb: (...args: never) => void) => void = fn1;
}

function assignmentWithComplexRest3<T extends any[]>() {
    const fn1: (x: string, ...rest: T) => void = (x, ..._) => x;
    const fn2: (...args: {x: "a"} & {x: "b"}) => void = fn1;
}
```

----------------------------------------

TITLE: Configuring @restart/hooks Package in JSON
DESCRIPTION: This snippet shows the package.json configuration for the @restart/hooks library. It specifies the package name, version, main entry point, types definition, and module entry point.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nestedPackageJsonRedirect(moduleresolution=nodenext).errors.txt#2025-04-21_snippet_0

LANGUAGE: JSON
CODE:
```
{
    "name": "@restart/hooks",
    "version": "0.3.25",
    "main": "cjs/index.js",
    "types": "cjs/index.d.ts",
    "module": "esm/index.js"
}
```

----------------------------------------

TITLE: Invalid Arithmetic Operations Between Variables d and t in TypeScript
DESCRIPTION: Code demonstrating TypeScript errors when both operands in arithmetic operations have invalid types. Both variables d and t trigger errors as neither is of type 'any', 'number', 'bigint', or an enum type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arithmeticOperatorWithTypeParameter.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
var r1d1 = d * t;
var r1d2 = d / t;
var r1d3 = d % t;
var r1d4 = d - t;
var r1d5 = d << t;
var r1d6 = d >> t;
var r1d7 = d >>> t;
var r1d8 = d & t;
var r1d9 = d ^ t;
var r1d10 = d | t;
```

----------------------------------------

TITLE: Demonstrating Variable Use Before Declaration in TypeScript Destructuring
DESCRIPTION: This code snippet illustrates a TypeScript error where the variable 'a' is used before its declaration in a destructuring assignment. It also includes a function declaration with destructuring parameters to show correct usage.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/useBeforeDeclaration_destructuring.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
a;
let {a, b = a} = {a: '', b: 1};
b;

function test({c, d = c}: Record<string, number>) {}
```

----------------------------------------

TITLE: Invalid For-In Statement Type Examples in TypeScript
DESCRIPTION: Examples of incorrect for-in statement usage showing various type validation errors including invalid left-hand side types, type annotations, and right-hand side expressions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/for-inStatementsInvalid.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var aNumber: number;
for (aNumber in {}) { }

var aBoolean: boolean;
for (aBoolean in {}) { }

var aRegExp: RegExp;
for (aRegExp in {}) { }

for (var idx : number in {}) { }

function fn(): void { }
for (var x in fn()) { }

var c : string, d:string, e;

for (var x in c || d) { }
for (var x in e ? c : d) { }
for (var x in 42 ? c : d) { }
for (var x in '' ? c : d) { }
for (var x in 42 ? d[x] : c[x]) { }
for (var x in c[23]) { }

for (var x in (<T>(x: T) => x)) { }
for (var x in function (x: string, y: number) { return x + y }) { }

class A {
    biz() : number{
        for (var x in this.biz()) { }
        for (var x in this.biz) { }
        for (var x in this) { }
        return null;
    }

    static baz() : number {
        for (var x in this) { }
        for (var x in this.baz) { }
        for (var x in this.baz()) { }

        return null;
    }
}

class B extends A {
    boz() {
        for (var x in this.biz()) { }
        for (var x in this.biz) { }
        for (var x in this) { }

        for (var x in super.biz) { }
        for (var x in super.biz()) { }
        return null;
    }
}

interface I {
    id: number;
    [idx: number]: number;
}
var i: I;

for (var x in i[42]) { }
```

----------------------------------------

TITLE: Implementing TypeScript Class with Constructor and Properties
DESCRIPTION: Shows a TypeScript class with explicit constructor implementation alongside property declarations, illustrating the standard structure for class initialization.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classUpdateTests.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class B {
	public p1 = 0;
	private p2 = 0;
	p3;

	constructor() {}
}
```

----------------------------------------

TITLE: Importing and Using fromLocal from Local Module in TypeScript
DESCRIPTION: Shows how to import fromLocal from a local module file and use it in code. The import uses a relative path to access the module from the same directory.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/autoImportAllowTsExtensions1.baseline.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { fromLocal } from "./local";

fromLocal
```

----------------------------------------

TITLE: Implementing Functions with Optional Parameters in TypeScript
DESCRIPTION: Demonstrates functions with optional parameters, showing type inference and initialization.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionImplementations.errors.txt#2025-04-21_snippet_6

LANGUAGE: TypeScript
CODE:
```
function opt1(n = 4) {
    var m = n;
    var m: number;
}

function opt2(n = { x: null, y: undefined }) {
    var m = n;
    var m: { x: any; y: any };
}

function opt3(n: number, m = n) {
    var y = m;
    var y: number;
}
```

----------------------------------------

TITLE: Mapping String Arrays to Interface Objects in TypeScript
DESCRIPTION: Shows how to map an array of strings to an array of objects conforming to a specific interface. Demonstrates type inference when creating objects in map callbacks.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferFromGenericFunctionReturnTypes3.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
interface I {
    code: 'mapped',
    name: string,
}

const a3: I[] = ['a', 'b'].map(name => {
    return {
        code: 'mapped',
        name,
    }
});
```

----------------------------------------

TITLE: Generic SetOf Class Implementation in TypeScript
DESCRIPTION: Defines a generic SetOf class with methods for adding items, transforming the set via functions, and iterating over elements. The class serves as a container for elements of type A with transformation capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferFromGenericFunctionReturnTypes1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class SetOf<A> {
  _store: A[];

  add(a: A) {
    this._store.push(a);
  }

  transform<B>(transformer: (a: SetOf<A>) => SetOf<B>): SetOf<B> {
    return transformer(this);
  }

  forEach(fn: (a: A, index: number) => void) {
      this._store.forEach((a, i) => fn(a, i));
  }
}
```

----------------------------------------

TITLE: Type Casting with 'as' Operator in TypeScript
DESCRIPTION: This snippet demonstrates the use of the 'as' operator in TypeScript to perform type casting between incompatible types (number to string), which results in a compilation error. The snippet showcases a common error, TS2352, and suggests converting to 'unknown' first to safely perform such conversions. The example emphasizes TypeScript's strict type system and the importance of correct type assertions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asOperatorNames.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var a = 20;
var b = a as string;
var as = "hello";
var as1 = as as string;
```

----------------------------------------

TITLE: Demonstrating Type Declaration Conflict with IPromise and Promise
DESCRIPTION: This snippet attempts to declare the same variable `x` twice, first with the `IPromise` interface with specific types (string, number), and then with the `Promise` interface with different types (string, boolean). This causes a TypeScript error because subsequent variable declarations must have the same type. The error message points out the conflicting types and the locations of the declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promiseIdentityWithAny2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    // Error because type parameter arity doesn't match
    var x: IPromise<string, number>;
    var x: Promise<string, boolean>;
        ~
```

----------------------------------------

TITLE: React Type Definition for Intrinsic Class Attributes
DESCRIPTION: Defines the interface for React component class attributes, requiring a 'ref' property of generic type T
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxClassAttributeResolution.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface IntrinsicClassAttributesAlias<T> {
    ref: T
}
```

----------------------------------------

TITLE: TypeScript Let/Const Variable Declaration and Loop Examples
DESCRIPTION: Comprehensive test file demonstrating various scenarios of let/const declarations, destructuring assignments, and loop iterations in TypeScript. Shows error cases for tuple type access, undefined array operations, and invalid property access. Includes examples in function scope, class methods, and modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/downlevelLetConst16.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
'use strict'

declare function use(a: any);

var x = 10;
var y;
var z;
use(x);
use(y);
use(z);
function foo1() {
    let x = 1;
    use(x);
    let [y] = [1];
    use(y);
    let {a: z} = {a: 1};
    use(z);
}

function foo2() {
    {
        let x = 1;
        use(x);
        let [y] = [1];
        use(y);
        let {a: z} = { a: 1 };
        use(z);
    }
    use(x);
}

class A {
    m1() {
        let x = 1;
        use(x);
        let [y] = [1];
        use(y);
        let {a: z} = { a: 1 };
        use(z);
    }
    m2() {
        {
            let x = 1;
            use(x);
            let [y] = [1];
            use(y);
            let {a: z} = { a: 1 };
            use(z);
        }
        use(x);
    }

}

class B {
    m1() {
        const x = 1;
        use(x);
        const [y] = [1];
        use(y);
        const {a: z} = { a: 1 };
        use(z);

    }
    m2() {
        {
            const x = 1;
            use(x);
            const [y] = [1];
            use(y);
            const {a: z} = { a: 1 };
            use(z);

        }
        use(x);
    }
}

function bar1() {
    const x = 1;
    use(x);
    const [y] = [1];
    use(y);
    const {a: z} = { a: 1 };
    use(z);
}

function bar2() {
    {
        const x = 1;
        use(x);
        const [y] = [1];
        use(y);
        const {a: z} = { a: 1 };
        use(z);

    }
    use(x);
}

module M1 {
    let x = 1;
    use(x);
    let [y] = [1];
    use(y);
    let {a: z} = { a: 1 };
    use(z);
}

module M2 {
    {
        let x = 1;
        use(x);
        let [y] = [1];
        use(y);
        let {a: z} = { a: 1 };
        use(z);
    }
    use(x);
}

module M3 {
    const x = 1;
    use(x);
    const [y] = [1];
    use(y);
    const {a: z} = { a: 1 };
    use(z);

}

module M4 {
    {
        const x = 1;
        use(x);
        const [y] = [1];
        use(y);
        const {a: z} = { a: 1 };
        use(z);

    }
    use(x);
    use(y);
    use(z);
}

function foo3() {
    for (let x; ;) {
        use(x);
    }
    for (let [y] = []; ;) {
        use(y);
    }
    for (let {a: z} = {a: 1}; ;) {
        use(z);
    }
    use(x);
}

function foo4() {
    for (const x = 1; ;) {
        use(x);
    }
    for (const [y] = []; ;) {
        use(y);
    }
    for (const {a: z} = { a: 1 }; ;) {
        use(z);
    }
    use(x);
}

function foo5() {
    for (let x in []) {
        use(x);
    }
    use(x);
}

function foo6() {
    for (const x in []) {
        use(x);
    }
    use(x);
}

function foo7() {
    for (let x of []) {
        use(x);
    }
    use(x);
}

function foo8() {
    for (let [x] of []) {
        use(x);
    }
    use(x);
}

function foo9() {
    for (let {a: x} of []) {
        use(x);
    }
    use(x);
}

function foo10() {
    for (const x of []) {
        use(x);
    }
    use(x);
}

function foo11() {
    for (const [x] of []) {
        use(x);
    }
    use(x);
}

function foo12() {
    for (const {a: x} of []) {
        use(x);
    }
    use(x);
}
```

----------------------------------------

TITLE: Private Constructor Class Access Error Example in TypeScript
DESCRIPTION: Demonstrates error cases when attempting to instantiate a class with a private constructor or access it from outside the class. Shows both simple and parameterized constructor examples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typesWithPrivateConstructor.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    private constructor() { }
}

var c = new C(); // error C is private
var r: () => void = c.constructor;

class C2 {
    private constructor(x: number);
    private constructor(x: any) { }
}

var c2 = new C2(); // error C2 is private
var r2: (x: number) => void = c2.constructor;
```

----------------------------------------

TITLE: While Loop in TypeScript
DESCRIPTION: Shows a while loop that increments 'x' until it reaches 10.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationStatements.sourcemap.txt#2025-04-21_snippet_33

LANGUAGE: typescript
CODE:
```
while (x < 10) {
    x++;
}
```

----------------------------------------

TITLE: Complex Destructuring Assignment from Array in TypeScript
DESCRIPTION: This snippet demonstrates a more complex destructuring assignment from an array 'robotB'. It assigns values to multiple variables (numberB, nameB, skillB) with default values, using nested destructuring patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues3.sourcemap.txt#2025-04-21_snippet_11

LANGUAGE: TypeScript
CODE:
```
_s = robotB[0], numberB = _s === void 0 ? -1 : _s, _t = robotB[1], nameB = _t === void 0 ? "helloNoName" : _t, _u = robotB[2], skillB = _u === void 0 ? "noSkill" : _u;
```

----------------------------------------

TITLE: Exporting Variables and Classes in TypeScript
DESCRIPTION: This snippet exports a variable, a class, and an instance of that class, allowing them to be used in other modules. It defines a variable 'm1_a1', a class 'm1_c1' with a property, and a function 'm1_f1' that returns an instance of 'm1_c1'. Required dependencies include TypeScript environment for compiling modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlModuleSubfolderSpecifyOutputFile/node/maprootUrlModuleSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Declaration of Interface and Constant in TypeScript
DESCRIPTION: Defines an interface 'Thing' and exports a constant 'x' which is a function returning an instance of 'Thing'. Used in ECMAScript module systems. This defines structured contracts for TypeScript types, enhancing type safety.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSpecifierGenerationDirectory(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
    // esm format file\n    export interface Thing {}\n    export const x: () => Thing;
```

----------------------------------------

TITLE: TypeScript Module 2 Definition with Exports
DESCRIPTION: Defines a TypeScript module with explicit exports for variables, class, and function
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootAbsolutePathMixedSubfolderSpecifyOutputFile/node/mapRootAbsolutePathMixedSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export var m2_a1 = 10;
export class m2_c1 {
    public m2_c1_p1: number;
}

export var m2_instance1 = new m2_c1();
export function m2_f1() {
    return m2_instance1;
}
```

----------------------------------------

TITLE: Object Destructuring with Type Narrowing in TypeScript
DESCRIPTION: The function `f3` demonstrates object destructuring with type narrowing in a conditional block. If both `obj.a` and `obj.b` exist, the types of `a` and `b` within the destructuring assignment are narrowed to `number` and `string` respectively.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringControlFlow.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function f3(obj: { a?: number, b?: string }) {
    if (obj.a && obj.b) {
        let { a, b } = obj;  // number, string
        ({ a, b } = obj);
    }
}
```

----------------------------------------

TITLE: Converting Object to Map using Key-Value Pairs in TypeScript
DESCRIPTION: Implements a function that converts an object into a Map by mapping its keys and values to key-value pairs. Demonstrates object manipulation and Map construction patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferFromGenericFunctionReturnTypes3.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
function objectToMap(obj: any) {
	return new Map(Object.keys(obj).map(key => [key, obj[key]]));
};
```

----------------------------------------

TITLE: Iterating and Emitting Multi-Robot Skills in TypeScript
DESCRIPTION: This snippet iterates through the skills of a multi-robot object, destructuring the name and primary/secondary skills. It is designed to log the primary skills of the robots. The snippet assumes a 'multiRobot' object structure is available that contains 'name' and 'skills'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_30

LANGUAGE: typescript
CODE:
```
for (name = multiRobot.name, _r = multiRobot.skills, primary = _r.primary, secondary = _r.secondary, i = 0; i < 1; i++) {
    console.log(primaryA);
}
```

----------------------------------------

TITLE: Invalid Nullable Type Parameter Declaration (Prefix) - Number
DESCRIPTION: Similar to the previous example, function `f5` tries to use a prefix `?` to indicate a nullable number parameter, which is incorrect syntax. Use `number | null | undefined` instead.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parseInvalidNullableTypes.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
function f5(a: ?number) {}
```

----------------------------------------

TITLE: Demonstrating Object Spread with Optional and Undefined Properties in TypeScript
DESCRIPTION: This function demonstrates TypeScript's behavior when spreading objects with different combinations of definite, optional, and undefined properties. It highlights type inference and compatibility issues that arise in various scenarios.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectSpreadStrictNull.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function f(
    definiteBoolean: { sn: boolean },
    definiteString: { sn: string },
    optionalString: { sn?: string },
    optionalNumber: { sn?: number },
    undefinedString: { sn: string | undefined },
    undefinedNumber: { sn: number | undefined }) {
    // optional
    let optionalUnionStops: { sn: string | number } = { ...definiteBoolean, ...definiteString, ...optionalNumber };
    let optionalUnionDuplicates: { sn: string | number } = { ...definiteBoolean, ...definiteString, ...optionalString, ...optionalNumber };
    let allOptional: { sn?: string | number } = { ...optionalString, ...optionalNumber };

    // undefined
    let undefinedUnionStops: { sn: string | number } = { ...definiteBoolean, ...definiteString, ...undefinedNumber };
    let undefinedUnionDuplicates: { sn: string | number } = { ...definiteBoolean, ...definiteString, ...undefinedString, ...undefinedNumber };
    let allUndefined: { sn: string | number | undefined } = { ...undefinedString, ...undefinedNumber };

    let undefinedWithOptionalContinues: { sn: string | number | boolean } = { ...definiteBoolean, ...undefinedString, ...optionalNumber };
}
```

----------------------------------------

TITLE: Type-Only Import of Exported Types
DESCRIPTION: Corrects the previous import snippet to use type-only imports suitable for modules set with isolatedModules in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports_errors(isolatedmodules=true).errors.txt#2025-04-21_snippet_7

LANGUAGE: TypeScript
CODE:
```
import type { AA, BB } from "./d";
```

----------------------------------------

TITLE: ESM Imports in TypeScript (.mts)
DESCRIPTION: This TypeScript snippet demonstrates imports within a TypeScript module file (`index.mts`). It imports modules using aliases defined in `package.json`.  Similar to the `.ts` file, this demonstrates valid ESM imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackageImports(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// esm format file
import * as cjs from "#cjs";
import * as mjs from "#mjs";
import * as type from "#type";
cjs;
mjs;
type;
```

----------------------------------------

TITLE: ESM Import in MJS Module
DESCRIPTION: ES Module format file using .mjs extension with correct import syntax
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeAllowJsPackageSelfName(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
// esm format file
import * as self from "package";
self;
```

----------------------------------------

TITLE: Defining Foo Interface in TypeScript
DESCRIPTION: Defines an interface 'Foo' with a boolean property 'bar'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowOptionalChain3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Foo {
  bar: boolean;
}
```

----------------------------------------

TITLE: ESM Format Export in TypeScript
DESCRIPTION: This snippet demonstrates how to define and export a constant in an ECMAScript module format within a TypeScript file. It exemplifies basic export syntax in ESM and is expected to work in modules marked as having a module file structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=nodenext).errors.txt#2025-04-21_snippet_10

LANGUAGE: TypeScript
CODE:
```
// esm format file
const x = 1;
export {x};
```

----------------------------------------

TITLE: Type Comparisons Among C and D
DESCRIPTION: This snippet performs type comparisons between the utility types C and D, which are derived from classes A and B respectively. It checks whether C extends D and if the picked types from A and B provide expected results.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericIndexedAccessVarianceComparisonResultCorrect.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
type C = T<A>;
type D = T<B>;

type C_extends_D = C extends D ? true : false;                                  // true
type PickA_extends_PickB = Pick<A, 'x'> extends Pick<B, 'x'> ? true : false;    // true
type TA_extends_TB = T<A> extends T<B> ? true : false;                          // should be true
```

----------------------------------------

TITLE: Iteration and Destructuring with Predefined Array in JavaScript
DESCRIPTION: This snippet iterates over a predefined array of robot objects through a for-of loop and destructures these objects to access 'name' and 'skills'. The objects are defined within the snippet, comprising two robots with specified skills. This snippet is useful for working with static data arrays and demonstrates object destructuring and loop iteration without external dependencies.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_29

LANGUAGE: JavaScript
CODE:
```
for ({name, skills: { primary, secondary } } of 
     [{ name: "mower", skills: { primary: "mowing", secondary: "none" } },
      { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }]) {}
```

----------------------------------------

TITLE: JavaScript Import Syntax in ESM Format
DESCRIPTION: An ESM format file using import syntax. This file doesn't produce errors despite using the same import syntax as the CommonJS file because ESM supports these import patterns natively.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportHelpersCollisions1(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
// esm format file
import {default as _fs} from "fs";
_fs.readFile;
import * as fs from "fs";
fs.readFile;
```

----------------------------------------

TITLE: Initializing For Loop with Array Processing (TypeScript)
DESCRIPTION: Initializes a for loop. It processes the `robotA` array, extracting the first element into `numberA3` (defaulting to -1 if undefined) and the rest into `robotAInfo` using `slice(1)`. The loop condition `i < 1` indicates it will execute only once.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.sourcemap.txt#_snippet_86

LANGUAGE: TypeScript
CODE:
```
for (_24 = robotA[0], numberA3 = _24 === void 0 ? -1 : _24, robotAInfo = robotA.slice(1), i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Incorrect Type Assignment in Function Call
DESCRIPTION: This snippet highlights a type checking error when calling a function `a1` with arguments of incorrect types. The function expects either a number or a string in its array, but a boolean is provided, leading to a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration4.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function a1(...x: (number|string)[]) { }

    a1(1, 2, "hello", true);  // Error, parameter type is (number|string)[]
```

----------------------------------------

TITLE: Importing and Instantiating Classes and Functions in TypeScript
DESCRIPTION: This snippet demonstrates the importation of a Calculator class and two functions from 'file1.ts'. It also shows the instantiation of the Calculator class and the invocation of the 'handleChar' method along with the 'test' function. The snippet includes a TypeScript error indicating that 'test2' is declared but not used, which highlights code quality and potential cleanup.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedImports5.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import {Calculator, test, test2} from "./file1"\nvar x = new Calculator();\nx.handleChar();\ntest();
```

----------------------------------------

TITLE: Class Method Invocation in TypeScript
DESCRIPTION: This code snippet shows the instantiation of various class types and the invocation of their respective methods, including both exported and non-exported classes. It demonstrates method accessibility depending on class export status. Dependencies include TypeScript syntax and class structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeResolution.sourcemap.txt#2025-04-21_snippet_35

LANGUAGE: typescript
CODE:
```
export class ClassB {
    public BisIn1_1_1() {
        /** Exactly the same as above in AisIn1_1_1 **/
        // Try all qualified names of this type
        var a1: ClassA; a1.AisIn1_1_1();
        var a2: SubSubModule1.ClassA; a2.AisIn1_1_1();
        var a3: SubModule1.SubSubModule1.ClassA; a3.AisIn1_1_1();
        var a4: TopLevelModule1.SubModule1.SubSubModule1.ClassA; a4.AisIn1_1_1();
        // Two variants of qualifying a peer type
        var b1: ClassB; b1.BisIn1_1_1();
        var b2: TopLevelModule1.SubModule1.SubSubModule1.ClassB; b2.BisIn1_1_1();
        // Type only accessible from the root
        var c1: TopLevelModule1.SubModule2.SubSubModule2.ClassA; c1.AisIn1_2_2();
        var c2: TopLevelModule2.SubModule3.ClassA; c2.AisIn2_3();
        // Interface reference
        var d1: InterfaceX; d1.XisIn1_1_1();
        var d2: SubSubModule1.InterfaceX; d2.XisIn1_1_1();
    }
}
```

----------------------------------------

TITLE: Mapping Numeric Constants in TypeScript
DESCRIPTION: This code snippet demonstrates a pattern of mapping numeric constants to themselves, which is often used in TypeScript for creating enum-like structures or defining error codes. The constants range from 2693 to 3126, suggesting a comprehensive set of identifiers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionSubtypeReductionErrors.errors.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
2693 as 2693,
2694 as 2694,
2695 as 2695,
// ... (omitted for brevity)
3124 as 3124,
3125 as 3125,
3126 as 3126,
```

----------------------------------------

TITLE: TypeScript Type Assignment Error
DESCRIPTION: This snippet demonstrates a TypeScript type error (TS2322) that arises when assigning a value of type `string` to a property (`value`) that is expected to be of type `number`.  The `useState` hook is used to initialize the state, and the error occurs during the initialization phase. The expected type is defined within the `Data` type definition, highlighting the importance of type safety in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/circularResolvedSignature.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function useState<S>(initialState: (() => S)): [S, (s: S) => void];
    
    type Data = Readonly<{        value: number;
        foo: (arg: any) => void;
        bar: (arg: any) => void;
    }>;
    
    export function Component() {
        const [state, setState] = useState<Data>(() => ({
            value: "string", // this should be a number
            foo: (arg) => setState(arg),
            bar: (arg) => setState(arg),
        }));
    }
```

----------------------------------------

TITLE: Incorrect Prop Type Assignment: Number
DESCRIPTION: This code demonstrates another type error by attempting to assign the number `3` to the `x` property of the `OverWriteAttr` component, while the `Prop` interface defines it as `2`. This showcases TypeScript's strict type checking and its ability to catch type mismatches in React component props.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadAttributesResolution12.errors.txt#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
let x1 = <OverWriteAttr overwrite="hi" {...obj1} x={3} {...{y: true}} />
                                                     ~
!!! error TS2322: Type '3' is not assignable to type '2'.
!!! related TS6500 file.tsx:13:5: The expected type comes from property 'x' which is declared here on type 'IntrinsicAttributes & IntrinsicClassAttributes<OverWriteAttr> & Prop & { children?: ReactNode; }'
```

----------------------------------------

TITLE: Valid Dynamic Import with Attributes in TypeScript
DESCRIPTION: This snippet demonstrates a valid use of dynamic imports with import attributes. Dynamic imports, when used correctly, can avoid the TS2823 error if the compiler options are not set correctly, as shown in the previous example.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportAttributes(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const json2 = import("./package.json", { with: { type: "json" } });
```

----------------------------------------

TITLE: Identity Mapped Type and Partial<T> Compatibility in TypeScript
DESCRIPTION: Defines an Identity mapped type and tests its compatibility with Partial<U>. Shows that Partial<U> cannot be assigned to Identity<U> because Partial makes properties optional, while Identity preserves the original structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRelationships.errors.txt#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
type Identity<T> = {
    [P in keyof T]: T[P];
}

function f61<U>(x: Identity<U>, y: Partial<U>) {
    x = y;  // Error
    y = x;
}
```

----------------------------------------

TITLE: TypeScript React Function Definition
DESCRIPTION: TypeScript React function definition in a .tsx file that would also compile to a.js
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/filesEmittingIntoSameOutput.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function foo() {
}
```

----------------------------------------

TITLE: Logging Array Elements with For...of Loop in TypeScript
DESCRIPTION: This snippet demonstrates how to iterate over an array of strings using a for...of loop and log each element to the console.  It shows the basic structure of a for...of loop for iterating over arrays in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```

>>>    console.log(nameA);

```

----------------------------------------

TITLE: Defining Base and Derived Classes in TypeScript
DESCRIPTION: This snippet defines a base class and two derived classes to be used in subsequent examples. It sets up the inheritance hierarchy for testing assignment compatibility.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithObjectMembersOptionality.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Base { foo: string; }
class Derived extends Base { bar: string; }
class Derived2 extends Derived { baz: string; }
```

----------------------------------------

TITLE: Importing and Attempting to Modify a Readonly Property in TypeScript
DESCRIPTION: This code snippet demonstrates the error cases when trying to modify a readonly property 'x' imported from another module. The property is declared as a constant in the imported module, making any attempt to assign or modify its value result in a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constDeclarations-access5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
///<reference path='constDeclarations_access_1.ts'/>
import m = require('constDeclarations_access_1');
// Errors
m.x = 1;
m.x += 2;
m.x -= 3;
m.x *= 4;
m.x /= 5;
m.x %= 6;
m.x <<= 7;
m.x >>= 8;
m.x >>>= 9;
m.x &= 10;
m.x |= 11;
m.x ^= 12;
m
m.x++;
m.x--;
++m.x;
--m.x;

++((m.x));

m["x"] = 0;

// OK
var a = m.x + 1;

function f(v: number) { }
f(m.x);

if (m.x) { }

m.x;
(m.x);

-m.x;
+m.x;

m.x.toString();
```

----------------------------------------

TITLE: Handling Read-Only Property Assignment in TypeScript
DESCRIPTION: This snippet illustrates the error generated when attempting to assign a value to 'globalThis', which is a read-only property. It also demonstrates the TypeScript type checking that prevents the assignment of non-existent properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/globalThisReadonlyProperties.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
globalThis.globalThis = 1 as any // should error
// !!! error TS2540: Cannot assign to 'globalThis' because it is a read-only property.
```

LANGUAGE: TypeScript
CODE:
```
var x = 1
const y = 2
globalThis.x = 3
globalThis.y = 4 // should error
// !!! error TS2339: Property 'y' does not exist on type 'typeof globalThis'.
```

----------------------------------------

TITLE: Error TS2350 Handling in TypeScript
DESCRIPTION: This snippet captures the TypeScript error TS2350 which occurs when attempting to instantiate a function that is not defined as a constructor (void function). The error message indicates that the usage of the 'new' keyword is inappropriate for this function type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/symbolType14.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
symbolType14.ts(1,1): error TS2350: Only a void function can be called with the 'new' keyword.

==== symbolType14.ts (1 errors) ==== 
    new Symbol();
    ~~~~~~~~~~~~
!!! error TS2350: Only a void function can be called with the 'new' keyword.
```

----------------------------------------

TITLE: Defining Class with 'this' Binding in TypeScript
DESCRIPTION: This snippet defines a class C with a constructor that initializes a property x using both an arrow function and a regular function. It demonstrates the difference in 'this' binding between these function types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisBinding2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
 x: number;
    constructor() {
        this.x = (() => {
   var x = 1;
   return this.x;
  })();
  this.x = function() {
   var x = 1;
   return this.x;
  }();
    }  
}
```

----------------------------------------

TITLE: Importing ECMAScript Module in ESM TypeScript File
DESCRIPTION: This snippet demonstrates the correct way to import an ECMAScript module in an ESM-formatted TypeScript file. It imports all exports from '@scope/package' and assigns them to the 'self' variable.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodePackageSelfNameScoped(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// esm format file
import * as self from "@scope/package";
self;
```

----------------------------------------

TITLE: TypeScript Module Resolution Path Mapping Table
DESCRIPTION: A detailed mapping table showing the relationship between TypeScript @types directories and their corresponding node_modules folders. The table helps understand how TypeScript resolves type definition paths across different directory structures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/canWatch/getDirectoryToWatchFailedLookupLocationFromTypeRootNonRecursiveDos.baseline.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
## RootDirForResolution: c:/users/username

| Directory                                                                                  | getDirectoryToWatchFailedLookupLocationFromTypeRoot                                        |
| ------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------ |
| c:/folderAtRoot/node_modules/@types                                                        | c:/folderAtRoot/node_modules                                                               |
| c:/folderAtRoot/folder1/node_modules/@types                                                | c:/folderAtRoot/folder1/node_modules                                                       |
| c:/folderAtRoot/folder1/folder2/node_modules/@types                                        | c:/folderAtRoot/folder1/folder2/node_modules                                               |
| c:/folderAtRoot/folder1/folder2/folder3/node_modules/@types                                | c:/folderAtRoot/folder1/folder2/folder3/node_modules                                       |
| c:/folderAtRoot/folder1/folder2/folder3/folder4/node_modules/@types                        | c:/folderAtRoot/folder1/folder2/folder3/folder4/node_modules                               |
| c:/folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules/@types                | c:/folderAtRoot/folder1/folder2/folder3/folder4/folder5/node_modules                       |
```

----------------------------------------

TITLE: Type Incompatibility in Interface Assignment
DESCRIPTION: Demonstrates type mismatch between interfaces A1 and A2 when attempting to assign values, highlighting TypeScript's strict type checking
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/multiLineErrors.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface A1 {
    x: { y: number; };
}
interface A2 {
    x: { y: string; };
}

var t1: A1;
var t2: A2;
t1 = t2;
```

----------------------------------------

TITLE: TypeScript Comparison Operators Type Validation
DESCRIPTION: Demonstrates TypeScript's handling of comparison operators (<, >, <=, >=, ==, !=, ===, !==) with identical primitive types. Shows how null and undefined comparisons are restricted and generate type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/comparisonOperatorWithIdenticalPrimitiveType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
enum E { a, b, c }

var a: number;
var b: boolean;
var c: string;
var d: void;
var e: E;

// operator <
var ra1 = a < a;
var ra2 = b < b;
var ra3 = c < c;
var ra4 = d < d;
var ra5 = e < e;
var ra6 = null < null;
var ra7 = undefined < undefined;

// operator >
var rb1 = a > a;
var rb2 = b > b;
var rb3 = c > c;
var rb4 = d > d;
var rb5 = e > e;
var rb6 = null > null;
var rb7 = undefined > undefined;

// operator <=
var rc1 = a <= a;
var rc2 = b <= b;
var rc3 = c <= c;
var rc4 = d <= d;
var rc5 = e <= e;
var rc6 = null <= null;
var rc7 = undefined <= undefined;

// operator >=
var rd1 = a >= a;
var rd2 = b >= b;
var rd3 = c >= c;
var rd4 = d >= d;
var rd5 = e >= e;
var rd6 = null >= null;
var rd7 = undefined >= undefined;

// operator ==
var re1 = a == a;
var re2 = b == b;
var re3 = c == c;
var re4 = d == d;
var re5 = e == e;
var re6 = null == null;
var re7 = undefined == undefined;

// operator !=
var rf1 = a != a;
var rf2 = b != b;
var rf3 = c != c;
var rf4 = d != d;
var rf5 = e != e;
var rf6 = null != null;
var rf7 = undefined != undefined;

// operator ===
var rg1 = a === a;
var rg2 = b === b;
var rg3 = c === c;
var rg4 = d === d;
var rg5 = e === e;
var rg6 = null === null;
var rg7 = undefined === undefined;

// operator !==
var rh1 = a !== a;
var rh2 = b !== b;
var rh3 = c !== c;
var rh4 = d !== d;
var rh5 = e !== e;
var rh6 = null !== null;
var rh7 = undefined !== undefined;
```

----------------------------------------

TITLE: Error Handling for Undefined in Arithmetic Operations - TypeScript
DESCRIPTION: This snippet captures various TypeScript errors resulting from using 'undefined' in arithmetic operations with different operand types, such as boolean, string, and object. It emphasizes the importance of type compatibility in calculations, which is crucial for successful TypeScript programming.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arithmeticOperatorWithUndefinedValueAndInvalidOperands.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(142,17): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(145,12): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(145,24): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(146,12): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(146,24): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(147,12): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(147,24): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(149,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(149,16): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(150,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(150,16): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(151,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(151,16): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(153,12): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(153,24): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(154,12): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(154,24): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(155,12): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(155,24): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(157,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(157,19): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(158,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(158,17): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(159,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(159,17): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(162,13): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(162,25): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(163,13): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(163,25): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(164,13): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(164,25): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(166,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(166,17): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(167,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(167,17): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(168,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(168,17): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(170,13): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(170,25): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(171,13): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(171,25): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(172,13): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(172,25): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(174,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(174,20): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(175,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(175,18): error TS18050: The value 'undefined' cannot be used here.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(176,13): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.

```

LANGUAGE: TypeScript
CODE:
```
arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts(176,18): error TS18050: The value 'undefined' cannot be used here.

```

----------------------------------------

TITLE: Defining React Components with TypeScript and JSX
DESCRIPTION: This snippet defines two React components: Bar and Foo. Bar renders a simple div element, while Foo renders the Bar component. There's a TypeScript error indicating that the React import is unused, which may be due to implicit usage in JSX.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reactImportUnusedInNewJSXEmit(jsx=react-jsxdev).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
/// <reference path="/.lib/react16.d.ts" />

import React from "react";

function Bar() {
  return <div />;
}

export function Foo() {
  return <Bar />;
}
```

----------------------------------------

TITLE: Handling Optional Payload with Destructuring in Body
DESCRIPTION: This snippet handles `Action2` by destructuring inside the function body. The check `if (payload)` ensures that the `payload` is defined before any type-specific operations are performed based on the `kind`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
    function f21(action: Action2) {
        const { kind, payload } = action;
        if (payload) {
            if (kind === 'A') {
                payload.toFixed();
            }
            if (kind === 'B') {
                payload.toUpperCase();
            }
        }
    }

```

----------------------------------------

TITLE: Exporting with alias from missing module in TypeScript
DESCRIPTION: This snippet illustrates another instance where variables (s and s1 aliased as s2) are being exported from a missing module 'a', which leads to the TS2792 error in TypeScript. The error suggests that the TypeScript compiler lacks the information needed to locate the specified module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/systemModule11.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
    export var x;
    export function foo() {}
    export default function (){}
    
    var z, z1;
    export {z, z1 as z2};
    
    export {s, s1 as s2} from 'a'
                              ~~~
!!! error TS2792: Cannot find module 'a'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?
    
```

----------------------------------------

TITLE: Invalid and Valid Private Field Access in TypeScript Decorators
DESCRIPTION: Shows examples of private field access within decorators, highlighting TypeScript's rules around private identifiers. Includes cases where private field access is allowed (within class methods) and where it's forbidden (outside class bodies).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-privateFieldAccess.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare let dec: any;

@dec(x => x.#foo) // error
class A {
    #foo = 3;

    @dec(this, (x: A) => x.#foo) // ok
    m() {}
}

@dec((x: B) => x.#foo) // error
class B {
    #foo = 3;
}

class C {
    #foo = 2;
    m() {
        @dec(() => this.#foo) // ok
        class D {}
        return D;
    }
}
```

----------------------------------------

TITLE: Destructuring with Default Values in For-Of Loops (TypeScript)
DESCRIPTION: Examples of destructuring assignment with default values inside for-of loops, demonstrating both shorthand and longhand property syntax. Type errors occur when attempting to assign number default values to string-typed variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/shorthandPropertyAssignmentsInDestructuring_ES6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
(function() {
	var s0;
	for ({ s0 = 5 } of [{ s0: 1 }]) {
	}
});
(function() {
	var s0;
	for ({ s0:s0 = 5 } of [{ s0: 1 }]) {
	}
});

(function() {
	var s1;
	for ({ s1 = 5 } of [{}]) {
	}
});

(function() {
	var s1;
	for ({ s1:s1 = 5 } of [{}]) {
	}
});

(function() {
	var s2;
	for ({ s2 = 5 } of [{ s2: "" }]) {
	}
});

(function() {
	var s2;
	for ({ s2:s2 = 5 } of [{ s2: "" }]) {
	}
});

(function() {
	var s3: string;
	for ({ s3 = 5 } of [{ s3: "" }]) {
	}
});

(function() {
	var s3: string;
	for ({ s3:s3 = 5 } of [{ s3: "" }]) {
	}
});
```

----------------------------------------

TITLE: Destructuring Assignment with Default Values in JavaScript
DESCRIPTION: This JavaScript code snippet performs a destructuring assignment from an object `multiRobots_3[_84]`. It extracts properties `name` and `skills` and assigns default values if they are undefined.  The `skills` property is further destructured to extract `primary` and `secondary` skills, also with default values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_35

LANGUAGE: javascript
CODE:
```
>>>    _15 = multiRobots_3[_84], _16 = _15.name, nameA = _16 === void 0 ? "noName" : _16, _17 = _15.skills, _18 = _17 === void 0 ? { primary: "noSkill", secondary: "noSkill" } : _17, _19 = _18.primary, primaryA = _19 === void 0 ? "primary" : _19, _20 = _18.secondary, secondaryA = _20 === void 0 ? "secondary" : _20;
```

----------------------------------------

TITLE: Conflicting Promise Type Declarations
DESCRIPTION: Demonstrating type incompatibility when declaring variables with different promise interfaces and type parameters
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promiseIdentity2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var x: IPromise<string, number>;
var x: Promise<any, string>;
```

----------------------------------------

TITLE: Defining Color Base Class in TypeScript
DESCRIPTION: Base class with shade and hue methods providing default color-related functionality
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClasses.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Color {
    public shade() { return "some shade"; }
    public hue() { return "some hue"; }
}
```

----------------------------------------

TITLE: Function Call Type Checking in TypeScript
DESCRIPTION: Illustrates TypeScript's strict argument type checking when using .call() method, enforcing correct number and type of arguments
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictBindCallApply1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
let c00 = foo.call(undefined, 10, "hello");
let c01 = foo.call(undefined, 10);  // Error
let c02 = foo.call(undefined, 10, 20);  // Error
let c03 = foo.call(undefined, 10, "hello", 30);  // Error
```

----------------------------------------

TITLE: Destructuring Arrays with Default Values in TypeScript For-Of Loop
DESCRIPTION: This code uses array destructuring to extract nameMA and skills (primarySkillA, secondarySkillA) from a nested data structure, providing default values. It iterates through the results of getMultiRobots() and logs the nameMA value for each item.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_30

LANGUAGE: typescript
CODE:
```
for (let [nameMA = "noName", [
    primarySkillA = "primary",
    secondarySkillA = "secondary"
] = ["skill1", "skill2"]] of getMultiRobots()) {
    console.log(nameMA);
}
```

----------------------------------------

TITLE: Defining Class and Instance in m2.ts - TypeScript
DESCRIPTION: This snippet defines a class 'm2_c1' similar to the previous one, along with an instance creation and a function that returns the instance. It emphasizes encapsulation and instantiation in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootRelativePathMultifolderSpecifyOutputFile/node/mapRootRelativePathMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var m2_a1 = 10;
class m2_c1 {
    public m2_c1_p1: number;
}

var m2_instance1 = new m2_c1();
function m2_f1() {
    return m2_instance1;
}
```

----------------------------------------

TITLE: Basic Switch Statement with Union Types
DESCRIPTION: Function implementing a switch statement for numeric union type (1 | 2) with unreachable code detection.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exhaustiveSwitchStatements1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f1(x: 1 | 2): string {
    if (!!true) {
        switch (x) {
            case 1: return 'a';
            case 2: return 'b';
        }
        x;  // Unreachable
    }
    else {
        throw 0;
    }
}
```

----------------------------------------

TITLE: Defining Base Interface with String Indexer
DESCRIPTION: Creates a base interface with a string indexer that accepts objects with 'a' property and an explicit 'x' property with additional type constraints
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceWithStringIndexerHidingBaseTypeIndexer.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Base {
    [x: string]: { a: number }
    x: {
        a: number; b: number;
    }
}
```

----------------------------------------

TITLE: Demonstrating 'const' Variable Capture in For-of Loop
DESCRIPTION: This function illustrates the use of 'const' in a for-of loop, capturing the loop variable in closures and comparing it. It shows how TypeScript handles constant declarations in loop contexts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop5_ES6.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
function foo0_c(x) {
    for (const x of []) {
        var v = x;
        (function() { return x + v });
        (() => x + v);
        if (x == 1) {
            return;
        }
    }

    use(v);
}
```

----------------------------------------

TITLE: Class Definition with Private Fields and Methods in TypeScript
DESCRIPTION: Definition of a Foo class with private instance and static fields/methods that will be used in subsequent examples with the 'in' operator.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameInInExpression(target=es2022).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Foo {
    #field = 1;
    static #staticField = 2;
    #method() {}
    static #staticMethod() {}

    goodRhs(v: any) {
        const a = #field in v;

        const b = #field in v.p1.p2;

        const c = #field in (v as {});

        const d = #field in (v as Foo);

        const e = #field in (v as never);

        for (let f in #field in v as any) { /**/ } // unlikely but valid
    }
    badRhs(v: any) {
        const a = #field in (v as unknown); // Bad - RHS of in must be object type or any
                            ~~~~~~~~~~~~~~
!!! error TS2571: Object is of type 'unknown'.

        const b = #fiel in v; // Bad - typo in privateID
                  ~~~~~
!!! error TS2339: Property '#fiel' does not exist on type 'any'.

        const c = (#field) in v; // Bad - privateID is not an expression on its own
                   ~~~~~~
!!! error TS1451: Private identifiers are only allowed in class bodies and may only be used as part of a class member declaration, property access, or on the left-hand-side of an 'in' expression

        for (#field in v) { /**/ } // Bad - 'in' not allowed
             ~~~~~~
!!! error TS2406: The left-hand side of a 'for...in' statement must be a variable or a property access.

        for (let d in #field in v) { /**/ } // Bad - rhs of in should be a object/any
                      ~~~~~~~~~~~
!!! error TS2407: The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter, but here has type 'boolean'.
    }
    whitespace(v: any) {
        const a = v && /*0*/#field/*1*/
            /*2*/in/*3*/
                /*4*/v/*5*/
    }
    flow(u: unknown, n: never, fb: Foo | Bar, fs: FooSub, b: Bar, fsb: FooSub | Bar, fsfb: Foo | FooSub | Bar) {

        if (typeof u === 'object') {
            if (#field in n) {
                n; // good n is never
            }

            if (#field in u) {
                          ~
!!! error TS18047: 'u' is possibly 'null'.
                u; // good u is Foo
            } else {
                u; // good u is object | null
            }

            if (u !== null) {
                if (#field in u) {
                    u; // good u is Foo
                } else {
                    u; // good u is object
                }

                if (#method in u) {
                    u; // good u is Foo
                }

                if (#staticField in u) {
                    u; // good u is typeof Foo
                }

                if (#staticMethod in u) {
                    u; // good u is typeof Foo
                }
            }
        }

        if (#field in fb) {
            fb; // good fb is Foo
        } else {
            fb; // good fb is Bar
        }

        if (#field in fs) {
            fs; // good fs is FooSub
        } else {
            fs; // good fs is never
        }

        if (#field in b) {
            b; // good b is 'Bar & Foo'
        } else {
            b; // good b is Bar
        }

        if (#field in fsb) {
            fsb; // good fsb is FooSub
        } else {
            fsb; // good fsb is Bar
        }

        if (#field in fsfb) {
            fsfb; // good fsfb is 'Foo | FooSub'
        } else {
            fsfb; // good fsfb is Bar
        }

        class Nested {
            m(v: any) {
                if (#field in v) {
                    v; // good v is Foo
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Package Configuration for ECMAScript Modules (package.json)
DESCRIPTION: Configures the package to use ECMAScript modules by default with the "type": "module" setting.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExports(module=node16).errors.txt#2025-04-21_snippet_6

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Error Handling When Using Components
DESCRIPTION: This snippet demonstrates instances of using the defined components, highlighting the TypeScript errors that arise due to mismatched argument expectations when trying to render these components in JSX. It shows the need to match component argument requirements with React's `createElement` method limitations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxIssuesErrorWhenTagExpectsTooManyArguments.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const a = <MyComp4 x={2}/>; // using `MyComp` as a component should error - it expects more arguments than react provides
const b = <MyComp3 x={2}/>; // using `MyComp` as a component should error - it expects more arguments than react provides
const c  = <MyComp2 x={2}/>; // Should be OK, `context` is allowed, per react rules
```

----------------------------------------

TITLE: Styled Components Type Definitions
DESCRIPTION: Type definitions for styled-components library, including interfaces for styled components, themes, and base component structures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitObjectAssignedDefaultExport.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import * as hoistNonReactStatics from "hoist-non-react-statics";
export interface DefaultTheme {}
export type StyledComponent<TTag extends string, TTheme = DefaultTheme, TStyle = {}, TWhatever = never> =
    string
    & StyledComponentBase<TTag, TTheme, TStyle, TWhatever>
    & hoistNonReactStatics.NonReactStatics<TTag>;
export interface StyledComponentBase<TTag extends string, TTheme = DefaultTheme, TStyle = {}, TWhatever = never> {
    tag: TTag;
    theme: TTheme;
    style: TStyle;
    whatever: TWhatever;
}
export interface StyledInterface {
    div: (a: TemplateStringsArray) => StyledComponent<"div">;
}

declare const styled: StyledInterface;
export default styled;
```

----------------------------------------

TITLE: Constrained Generic Interface with Overload Signatures in TypeScript
DESCRIPTION: Interface with constrained generic type parameter and overload signatures. The type parameter T is constrained to extend String, which affects compatibility with the string literal 'a' signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/specializedSignatureIsNotSubtypeOfNonSpecializedSignature.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
interface I3<T extends String> {
    (x: 'a');
    (x: T);
    foo(x: 'a');
    foo(x: T);
}
```

----------------------------------------

TITLE: Property Existence Type Guards in TypeScript
DESCRIPTION: Demonstrates using 'in' operator as a type guard to narrow union types based on property existence, which allows for correct type inference.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypePredicates.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
// https://github.com/microsoft/TypeScript/issues/16069#issuecomment-1183547889
type Foo = {
  foo: string;
}
type Bar = Foo & {
  bar: string;
}

const list: (Foo | Bar)[] = [];
const resultBars: Bar[] = list.filter((value) => 'bar' in value);  // should ok

function isBarNonNull(x: Foo | Bar | null) {
  return ('bar' in x!);
}
const fooOrBar = list[0];
if (isBarNonNull(fooOrBar)) {
  const t: Bar = fooOrBar;  // should ok
}
```

----------------------------------------

TITLE: Defining Object with Incorrect Type Annotations in TypeScript
DESCRIPTION: This snippet defines an object 'obj' with properties and methods that have incorrect type annotations. The 'bar' property is set to a number, while it's expected to be a string. The methods 'method1', 'method2', and 'arrowFunc' are also incorrectly set to return strings instead of the expected number type. The snippet showcases type errors that arise when the actual return types do not match the defined types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocTypeTagOnObjectProperty2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// @ts-check
var lol;
const obj = {
  /** @type {string|undefined} */
  bar: 42,
  ~~~~~~~
!!! error TS2322: Type 'number' is not assignable to type 'string'.
  /** @type {function(number): number} */
  method1(n1) {
      return "42";
      ~~~~~~
!!! error TS2322: Type 'string' is not assignable to type 'number'.
  },
  /** @type {function(number): number} */
  method2: (n1) => "lol",
                   ~~~~~
!!! error TS2322: Type 'string' is not assignable to type 'number'.
  /** @type {function(number): number} */
  arrowFunc: (num="0") => num + 42,
              ~~~~~~~
!!! error TS2322: Type 'string' is not assignable to type 'number'.
  /** @type {string} */
  lol
  ~~~
!!! error TS2322: Type 'undefined' is not assignable to type 'string'.
}
lol = "string"
/** @type {string} */
var s = obj.method1(0);
    ~
!!! error TS2322: Type 'number' is not assignable to type 'string'.

/** @type {string} */
var s1 = obj.method2("0");
    ~~
!!! error TS2322: Type 'number' is not assignable to type 'string'.
                     ~~~
!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
```

----------------------------------------

TITLE: ESM Module with Valid Top-level Await
DESCRIPTION: Example showing valid usage of top-level await in an ESM module format. Both direct await usage and for-await-of loops are allowed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsTopLevelAwait(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// esm format file
const x = await 1;
export {x};
for await (const y of []) {}
```

----------------------------------------

TITLE: Using ES2015 Array Methods in TypeScript
DESCRIPTION: This snippet shows the usage of ES2015 Array methods like find, findIndex, fill, copyWithin, entries, keys, and values. These methods are not available in the default TypeScript configuration and require the 'lib' compiler option to be set to 'es2015' or later.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/doYouNeedToChangeYourTargetLibraryES2015.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const testArrayFind = [""].find((val, idx, obj) => {
    return true;
});
const testArrayFindIndex = [""].findIndex((val, idx, obj) => {
    return true;
});
const testArrayFill = [""].fill("fill");
const testArrayCopyWithin = [""].copyWithin(0, 0);
const testArrayEntries = [""].entries();
const testArrayKeys = [""].keys();
const testArrayValues = [""].values();
```

----------------------------------------

TITLE: Accessing Non-existent Properties on JSDoc-typed Variables
DESCRIPTION: Demonstrates TypeScript error detection when accessing properties that don't exist on the specified types. Variables 'one' and 'two' are annotated with JSDoc to specify their types as Ns.One and Ns.Two respectively.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/prototypePropertyAssignmentMergeAcrossFiles2.errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
/**
 * @type {Ns.One}
 */
var one;
one.wat;

/**
 * @type {Ns.Two}
 */
var two;
two.wat;
```

----------------------------------------

TITLE: Undefined Object Destructuring in Function Call in TypeScript
DESCRIPTION: This example illustrates a TypeScript error where `undefined` is passed as an argument to a function that expects an object to destructure, leading to a potential runtime error due to the function attempting to access properties of an `undefined` value. The resulting error is `TS2532: Object is possibly 'undefined'.`
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringAssignabilityCheck.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
    (({}) => 0)(undefined); // should be error
      ~~
!!! error TS2532: Object is possibly 'undefined'.
```

----------------------------------------

TITLE: Undefined Object Destructuring in Function Parameter in TypeScript
DESCRIPTION: This TypeScript code shows a function parameter being destructured, and the type `undefined` is provided, which results in the error `TS2532: Object is possibly 'undefined'.` as the destructuring will try to access properties from an undefined value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringAssignabilityCheck.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
    function foo({}: undefined) {
                 ~~~~~~~~~~~~~
!!! error TS2532: Object is possibly 'undefined'.
        return 0
    }
```

----------------------------------------

TITLE: Array Iteration with Destructuring in TypeScript
DESCRIPTION: Demonstrates array iteration using for...of loops with object destructuring, including default value assignment for the 'name' property as 'noName'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
for (var _i = 0, robots_1 = robots; _i < robots_1.length; _i++) {
    var _a = robots_1[_i].name, nameA = _a === void 0 ? "noName" : _a;
    console.log(nameA);
}

for (var _b = 0, _c = getRobots(); _b < _c.length; _b++) {
    var _d = _c[_b].name, nameA = _d === void 0 ? "noName" : _d;
}
```

----------------------------------------

TITLE: TypeScript Enum Declarations and Constant Assertions
DESCRIPTION: Demonstrates different types of enum declarations including numeric, string-based, and computed enums, along with various constant assertion patterns. Shows error case when trying to apply const assertion to non-enum member.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constantEnumAssert.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
enum E1 {
    a,
    b
}

enum E2 {
    a = 'a',
    b = 'b'
}

enum E3 {
    a = 1,
    b = a << 1,
    c = a << 2,
}

const enum E4 {
    a,
    b
}

const E5 = {
    a: 'a',
    b: 'b'
}

const foo1 = { a: E1.a }

const foo2 = { a: E2.a }

const foo3 = { a: E1.a } as const

const foo4 = { a: E2.a } as const

const foo5 = { a: E3.a } as const

const foo6 = { a: E4.a } as const

const foo7 = { a: E5.a } as const

const foo8 = { a: E1.a as const }

const foo9 = { a: E2.a as const }

const foo10 = { a: E3.a as const }

const foo11 = { a: E4.a as const }

const foo12 = { a: E5.a as const }
```

----------------------------------------

TITLE: Defining TypeScript Object Types T1 and T2
DESCRIPTION: This snippet defines two object types, T1 and T2. T1 requires a property 'a' of type number, and T2 requires a property 'a' that can be either 'a' or 'b'. These types are used later for validating object literals against their expected shape.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocSatisfiesTag1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/**
 * @typedef {Object} T1
 * @property {number} a
 */

/**
 * @typedef {Object} T2
 * @property {"a" | "b"} a
 */
```

----------------------------------------

TITLE: CommonJS Package Configuration
DESCRIPTION: Package configuration specifying CommonJS module type for a specific subfolder
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportHelpersCollisions(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "type": "commonjs"
}
```

----------------------------------------

TITLE: Object Destructuring with Default Values in TypeScript
DESCRIPTION: Demonstrates transformation of a for...of loop with object destructuring and default values, iterating over robot objects returned from getRobots() function. The code includes source mapping information showing the relationship between emitted JavaScript and original TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
for (let {name: nameA = "noName", skill: skillA = "noSkill"  } of getRobots()) {
    console.log(nameA);
}
```

LANGUAGE: javascript
CODE:
```
var _6 = _5[_4], _7 = _6.name, nameA = _7 === void 0 ? "noName" : _7, _8 = _6.skill, skillA = _8 === void 0 ? "noSkill" : _8;
console.log(nameA);
```

----------------------------------------

TITLE: subfolder/package.json: CommonJS Module Type
DESCRIPTION: This JSON snippet sets the 'type' field in 'subfolder/package.json' to 'commonjs'. This indicates that the JavaScript files in the 'subfolder' directory should be treated as CommonJS modules, using require and module.exports syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesGeneratedNameCollisions(module=node18).errors.txt#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
    {
        "type": "commonjs"
    }
```

----------------------------------------

TITLE: Custom Assertion Function Implementation
DESCRIPTION: Creates a generic assertion function that can validate various type conditions and narrow down type information
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assertionTypePredicates1.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const assert: (value: unknown) => asserts value = value => {}
```

----------------------------------------

TITLE: Defining Async Methods in an Object in TypeScript
DESCRIPTION: Shows how to define asynchronous methods within an object literal in TypeScript, including different return types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncAwaitIsolatedModules_es5.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
let o = {
	async m1() { },
	async m2(): Promise<void> { },
	async m3(): MyPromise<void> { }
};
```

----------------------------------------

TITLE: Defining a Default Exported Function in TypeScript
DESCRIPTION: This snippet defines a function 'fun' and exports it as the default export. It demonstrates the basic structure of a module with a default export in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esModuleInteropDefaultImports.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare function fun(): void;
export default fun;
```

----------------------------------------

TITLE: Defining and Using Invalid JSX Components in TypeScript
DESCRIPTION: This snippet defines two components, 'Foo' and 'Greet', both of which return undefined. It then attempts to use these components in JSX, resulting in TypeScript errors due to the invalid return types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSfcReturnUndefinedStrictNullChecks.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import React = require('react');

const Foo = (props: any) => undefined;
function Greet(x: {name?: string}) {
	return undefined;
}

// Error
const foo = <Foo />;
const G = <Greet />;
```

----------------------------------------

TITLE: Exporting Public Class from a Separate Module - TypeScript
DESCRIPTION: This code snippet depicts the export of another public class, 'c_public', with a property named 'bar'. It highlights the use of module definition and export in TypeScript with no additional dependencies.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privacyTopLevelAmbientExternalModuleImportWithExport.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export class c_public {
    bar: string;
}

```

----------------------------------------

TITLE: Iterating through an array of objects in TypeScript
DESCRIPTION: This code snippet iterates through an array of objects named `robots` using a `for` loop. Inside the loop, it accesses the 'skills' property of each object, then extracts the 'primary' and 'secondary' skills. The primary skill is then logged to the console.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
">>>    { name: \"trimmer\", skills: { primary: \"trimming\", secondary: \"edging\" } }]; _7 < _8.length; _7++) {\n1->^^^^\n2 >    ^^\n3 >      ^^^^\n4 >          ^^\n5 >            ^^^^^^^^^\n6 >                     ^^\n7 >                       ^^^^^^\n8 >                             ^^\n9 >                               ^^\n10>                                 ^^^^^^^\n11>                                        ^^\n12>                                          ^^^^^^^^^^\n13>                                                    ^^\n14>                                                      ^^^^^^^^^\n15>                                                               ^^\n16>                                                                 ^^^^^^^^\n17>                                                                         ^^\n18>                                                                           ^^\n19>                                                                             ^\n20>                                                                              ^^\n21>                                                                                ^^^^^^^^^^^^^^\n22>                                                                                              ^^\n23>                                                                                                ^^^^\n24>                                                                                                    ^^\n25>                                                                                                      ^\n1->,\n  >    \n2 >    { \n3 >      name\n4 >          : \n5 >            \"trimmer\"\n6 >                     , \n7 >                       skills\n8 >                             : \n9 >                               { \n10>                                 primary\n11>                                        : \n12>                                          \"trimming\"\n13>                                                    , \n14>                                                      secondary\n15>                                                               : \n16>                                                                 \"edging\"\n17>                                                                          }\n18>                                                                            }\n19>                                                                             ]\n20>                                                                              \n21>                                                                                [{ name: \"mower\", skills: { primary: \"mowing\", secondary: \"none\" } },\n  >                                                                                    { name: \"trimmer\", skills: { primary: \"trimming\", secondary: \"edging\" } }]\n22>                                                                                              \n23>                                                                                                [{ name: \"mower\", skills: { primary: \"mowing\", secondary: \"none\" } },\n  >                                                                                                    { name: \"trimmer\", skills: { primary: \"trimming\", secondary: \"edging\" } }]\n24>                                                                                                    ) \n25>                                                                                                      {"
```

LANGUAGE: typescript
CODE:
```
>>>    _c = _8[_7].skills, primaryA = _c.primary, secondaryA = _c.secondary;\n1 >^^^^\n2 >    ^^^^^^^^^^^^^^^^^^\n3 >                      ^^\n4 >                        ^^^^^^^^\n5 >                                ^^^^^^^^^^^^^\n6 >                                             ^^\n7 >                                               ^^^^^^^^^^\n8 >                                                         ^^^^^^^^^^^^^^^\n1 >\n2 >    skills: { primary: primaryA, secondary: secondaryA }\n3 >                      \n4 >                        primaryA\n5 >                                \n6 >                                             , secondary: \n7 >                                               secondaryA\n8 >                                                         \n1 >Emitted(35, 5) Source(47, 8) + SourceIndex(0)
2 >Emitted(35, 23) Source(47, 60) + SourceIndex(0)
3 >Emitted(35, 25) Source(47, 27) + SourceIndex(0)
4 >Emitted(35, 33) Source(47, 35) + SourceIndex(0)
5 >Emitted(35, 46) Source(47, 35) + SourceIndex(0)
6 >Emitted(35, 48) Source(47, 48) + SourceIndex(0)
7 >Emitted(35, 58) Source(47, 58) + SourceIndex(0)
8 >Emitted(35, 73) Source(47, 58) + SourceIndex(0)
```

LANGUAGE: typescript
CODE:
```
>>>    console.log(primaryA);\n1 >^^^^\n2 >    ^^^^^^^\n3 >           ^\n4 >            ^^^\n5 >               ^\n6 >                ^^^^^^^^\n7 >                        ^\n8 >                         ^\n1 > } } of [{ name: \"mower\", skills: { primary: \"mowing\", secondary: \"none\" } },
  >    { name: \"trimmer\", skills: { primary: \"trimming\", secondary: \"edging\" } }]) {\n  >    \n2 >    console\n3 >           .\n4 >            log\n5 >               (\n6 >                primaryA\n7 >                        )\n8 >                         ;\n1 >Emitted(36, 5) Source(49, 5) + SourceIndex(0)
2 >Emitted(36, 12) Source(49, 12) + SourceIndex(0)
3 >Emitted(36, 13) Source(49, 13) + SourceIndex(0)
4 >Emitted(36, 16) Source(49, 16) + SourceIndex(0)
5 >Emitted(36, 17) Source(49, 17) + SourceIndex(0)
6 >Emitted(36, 25) Source(49, 25) + SourceIndex(0)
7 >Emitted(36, 26) Source(49, 26) + SourceIndex(0)
8 >Emitted(36, 27) Source(49, 27) + SourceIndex(0)
```

LANGUAGE: typescript
CODE:
```
>>>}\n1 >\n2 >^\n3 > ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->\n1 >\n  >\n2 >}\n1 >Emitted(37, 1) Source(50, 1) + SourceIndex(0)
2 >Emitted(37, 2) Source(50, 2) + SourceIndex(0)
```

LANGUAGE: typescript
CODE:
```
>>>for (var _9 = 0, robots_2 = robots; _9 < robots_2.length; _9++) {\n1->\n2 >^^^^^\n3 >     ^^^^^^^^^^\n4 >               ^^\n5 >                 ^^^^^^^^^^^^^^^^^\n6 >                                  ^^\n7 >                                    ^^^^^^^^^^^^^^^^^^^^\n8 >                                                        ^^\n9 >                                                          ^^^^\n10>                                                              ^^\n11>                                                                ^\n1->
  >
2 >for ({name } of 
3 >     robots
4 >               
5 >                 robots
6 >                                  
7 >                                    robots
```

----------------------------------------

TITLE: Re-exporting TypeScript Module
DESCRIPTION: Re-exports all declarations from the "./file" module, which includes the Foo class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleAugmentationEnumClassMergeOfReexportIsError.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export * from "./file";
```

----------------------------------------

TITLE: Array Destructuring with For Loop - TypeScript
DESCRIPTION: Demonstrates array destructuring assignment within a for loop structure, including multiple variable declarations and iteration logic. The code processes elements from an array containing numbers, names, and skills.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_23

LANGUAGE: typescript
CODE:
```
for (let [numberA2, nameA2, skillA2] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
    console.log(nameA2);
}
```

LANGUAGE: typescript
CODE:
```
for (var nameMA = multiRobotA[0], _k = multiRobotA[1], primarySkillA = _k[0], secondarySkillA = _k[1], i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Defining Number Property Interface (TypeScript)
DESCRIPTION: Defines a TypeScript interface named `Foo` with a single property `a` of type `number`. This interface provides an alternative definition for the `Foo` interface, used in the dynamic import examples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importTypeGeneric.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export interface Foo {
    a: number;
}
```

----------------------------------------

TITLE: Handling Errors and Dates with TypeScript Predicate Checks
DESCRIPTION: This snippet checks if the variable 'x' is of type Error or Date using type predicates. It demonstrates error handling with specific properties related to those types and exposes common errors related to using incorrect property names.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowFromAnyWithTypePredicate.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
if (isError(x)) {
    x.message;
    x.mesage;
      ~~~~~~
!!! error TS2551: Property 'mesage' does not exist on type 'Error'. Did you mean 'message'?
!!! related TS2728 lib.es5.d.ts:--:--: 'message' is declared here.
}

if (isDate(x)) {
    x.getDate();
    x.getHuors();
      ~~~~~~~~
!!! error TS2551: Property 'getHuors' does not exist on type 'Date'. Did you mean 'getHours'?
!!! related TS2728 lib.es5.d.ts:--:--: 'getHours' is declared here.
}
```

----------------------------------------

TITLE: Accessing JSON Properties in TypeScript
DESCRIPTION: This snippet illustrates how to access properties of the imported JSON module.  The variable `x` is assigned the value of the `a` property from the imported `b1` object. This demonstrates accessing JSON data within the TypeScript code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/requireOfJsonFileWithSourceMap.sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
>>>var x = b1.a;
1 >
2 >^^^^
3 >    ^
4 >     ^^^
5 >        ^^
6 >          ^
7 >           ^
8 >            ^
9 >             ^^^^^^^^^^^^^^^^^->
1 >
  >
2 >let 
3 >    x
4 >      = 
5 >        b1
6 >          .
7 >           a
8 >            ;
1 >Emitted(4, 1) Source(2, 1) + SourceIndex(0)
2 >Emitted(4, 5) Source(2, 5) + SourceIndex(0)
3 >Emitted(4, 6) Source(2, 6) + SourceIndex(0)
4 >Emitted(4, 9) Source(2, 9) + SourceIndex(0)
5 >Emitted(4, 11) Source(2, 11) + SourceIndex(0)
6 >Emitted(4, 12) Source(2, 12) + SourceIndex(0)
7 >Emitted(4, 13) Source(2, 13) + SourceIndex(0)
8 >Emitted(4, 14) Source(2, 14) + SourceIndex(0)
---
```

----------------------------------------

TITLE: Configuring Package Exports in JSON
DESCRIPTION: This JSON snippet defines the exports configuration for modules, detailing how different formats of the index file are exported. There are no specific limitations mentioned, but it assumes JSON knowledge and proper project structuring.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesDeclarationEmitWithPackageExports(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: JSON
CODE:
```
    {
        "name": "package",
        "private": true,
        "type": "module",
        "exports": {
            "./cjs": "./index.cjs",
            "./mjs": "./index.mjs",
            ".": "./index.js"
        }
    }
```

LANGUAGE: JSON
CODE:
```
    {
        "name": "inner",
        "private": true,
        "exports": {
            "./cjs": "./index.cjs",
            "./mjs": "./index.mjs",
            ".": "./index.js"
        }
    }
```

----------------------------------------

TITLE: Class Reusability and Method Definition in TypeScript
DESCRIPTION: This snippet presents the definition of a class that extends a base class showcasing method reusability. It explores the significance of using previously defined classes for method returns, thereby allowing for more readable and maintainable code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_37

LANGUAGE: TypeScript
CODE:
```
module daubentonii { export class nigricans<T0, T1> extends sagitta.stolzmanni { woosnami(): dogramacii.robustulus { var x: dogramacii.robustulus; () => { var y = this; }; return x; } } }
```

----------------------------------------

TITLE: Missing JSX closing tag
DESCRIPTION: This snippet demonstrates an error where a JSX element is opened but not closed. JSX requires all elements to be properly closed, either with a closing tag or as a self-closing tag.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxInvalidEsprimaTestSuite.errors.txt#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
"<a b={}>;"
```

----------------------------------------

TITLE: Using Object Literals with Type Inference in TypeScript
DESCRIPTION: Demonstrates passing object literals that conform to the Computed<T> interface to a generic function. TypeScript infers the type parameter T as string from the context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeArgumentInferenceWithObjectLiteral.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// Calls below should infer string for T and then assign that type to the value parameter
foo({
    read: () => s,
    write: value => s = value
});
foo({
    write: value => s = value,
    read: () => s
});
```

----------------------------------------

TITLE: Defining Generic Classes with Multiple Type Parameters and Constraints in TypeScript
DESCRIPTION: This snippet demonstrates the definition of generic classes with multiple type parameters (T, U, V) that have hierarchical constraints. It shows how these classes extend a base class C3 with different type arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypesOfTypeParameterWithConstraints.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
class D20<T extends U, U extends V, V extends Date> extends C3<U> {
    [x: string]: U;
    foo: U; // ok
}

class D21<T extends U, U extends V, V extends Date> extends C3<V> {
    [x: string]: V;
    foo: U;
}

// test if V is a subtype of T, U, V, Date
// only a subtype of itself and Date
class D22<T extends U, U extends V, V extends Date> extends C3<Date> {
    [x: string]: Date;
    foo: T; // ok
}

class D23<T extends U, U extends V, V extends Date> extends C3<T> {
    [x: string]: T;
    foo: V; // error
}

class D24<T extends U, U extends V, V extends Date> extends C3<U> {
    [x: string]: U;
    foo: V; // error
}

class D25<T extends U, U extends V, V extends Date> extends C3<V> {
    [x: string]: V;
    foo: V; // ok
}

// test if Date is a subtype of T, U, V, Date
// only a subtype of itself
class D26<T extends U, U extends V, V extends Date> extends C3<Date> {
    [x: string]: Date;
    foo: Date; // ok
}

class D27<T extends U, U extends V, V extends Date> extends C3<T> {
    [x: string]: T;
    foo: Date; // error
}

class D28<T extends U, U extends V, V extends Date> extends C3<U> {
    [x: string]: U;
    foo: Date; // error
}

class D29<T extends U, U extends V, V extends Date> extends C3<V> {
    [x: string]: V;
    foo: Date; // error
}
```

----------------------------------------

TITLE: Defining Interface Hierarchy and Class with Numeric Indexer in TypeScript
DESCRIPTION: Defines a hierarchy of interfaces (Base, Derived, Derived2) and a class A with a numeric indexer returning Base type. Demonstrates assignment compatibility between different indexer types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithNumericIndexer.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// Derived type indexer must be subtype of base type indexer

interface Base { foo: string; }
interface Derived extends Base { bar: string; }
interface Derived2 extends Derived { baz: string; }

class A {
    [x: number]: Base;
}

var a: A;
var b: { [x: number]: Derived; }
a = b;
b = a; // error

var b2: { [x: number]: Derived2; }
a = b2;
b2 = a; // error
```

----------------------------------------

TITLE: Traditional Import Statements in TypeScript
DESCRIPTION: Illustrates importing both default and named exports from other modules using TypeScript's import syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports_errors(isolatedmodules=true).errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
import DefaultA from "./a";
import { A } from "./a";
import DefaultB from "./b";
import { B } from "./b";
```

----------------------------------------

TITLE: Implementing the StringHashTable Class in TypeScript
DESCRIPTION: This class implements a string-based hash table following the IHashTable interface. It provides functions to add, look up, map over, and count items, effectively managing key-value pairs.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserRealSource4.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export class StringHashTable implements IHashTable {
    public itemCount = 0;
    public table = <any>(<any> new BlockIntrinsics());

    public getAllKeys(): string[]{
        var result: string[] = [];
        for (var k in this.table) {
            if (this.table[k] != undefined) {
                result[result.length] = k;
            }
        }
        return result;
    }

    public add(key: string, data): boolean {
        if (this.table[key] != undefined) {
            return false;
        }
        this.table[key] = data;
        this.itemCount++;
        return true;
    }

    public addOrUpdate(key: string, data): boolean {
        if (this.table[key] != undefined) {
            this.table[key] = data;
            return false;
        }
        this.table[key] = data;
        this.itemCount++;
        return true;
    }

    public map(fn: (k: string, v, c) => void , context) {
        for (var k in this.table) {
            var data = this.table[k];
            if (data != undefined) {
                fn(k, this.table[k], context);
            }
        }
    }

    public every(fn: (k: string, v, c) => boolean, context) {
        for (var k in this.table) {
            var data = this.table[k];
            if (data != undefined) {
                if (!fn(k, this.table[k], context)) {
                    return false;
                }
            }
        }
        return true;
    }

    public some(fn: (k: string, v, c) => boolean, context) {
        for (var k in this.table) {
            var data = this.table[k];
            if (data != undefined) {
                if (fn(k, this.table[k], context)) {
                    return true;
                }
            }
        }
        return false;
    }

    public count(): number { return this.itemCount; }

    public lookup(key: string) {
        var data = this.table[key];
        if (data != undefined) {
            return data;
        }
        else {
            return (null);
        }
    }
}
```

----------------------------------------

TITLE: Importing and Using Namespace in TypeScript
DESCRIPTION: This snippet demonstrates correct usage of importing a module as a namespace and accessing its properties. It imports all exports from './1' as 'foo' and accesses the nested 'ns' object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace1(module=es2015).errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
import * as foo from './1'

foo.ns.a;
foo.ns.b;
```

----------------------------------------

TITLE: Configuring Package as ECMAScript Module in package.json
DESCRIPTION: This JSON snippet shows the package.json configuration that declares the package as an ECMAScript module. It sets the 'type' field to 'module' and specifies the main entry point using the 'exports' field.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodePackageSelfNameScoped(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "name": "@scope/package",
    "private": true,
    "type": "module",
    "exports": "./index.js"
}
```

----------------------------------------

TITLE: Root Package.json with ESM Configuration
DESCRIPTION: The root package.json file that sets the project type to 'module', indicating that JavaScript files should be treated as ES modules by default.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportHelpersCollisions1(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: React Component Type Definitions with Generic Parameters
DESCRIPTION: These declarations define React components with generic type parameters to specify the expected props. ComponentSpecific1 requires both 'prop' and 'ignore-prop' properties, while ComponentSpecific2 only requires 'prop'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentsWithTypeArguments2.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
declare function ComponentSpecific1<U>(l: {prop: U, "ignore-prop": string}): JSX.Element;
declare function ComponentSpecific2<U>(l: {prop: U}): JSX.Element;
```

----------------------------------------

TITLE: Exporting TypeScript Class and Functions
DESCRIPTION: Defines and exports a simple TypeScript class `Calculator` with a method `handleChar` and two functions `test` and `test2`. These are intended to be imported and used by other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedImports4.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
export class Calculator {
    handleChar() {}
}

export function test() {

}

export function test2() {

}
```

----------------------------------------

TITLE: Demonstrating Prototype Access Rules in TypeScript
DESCRIPTION: This code illustrates the difference between valid and invalid ways to access prototype in TypeScript. Object.prototype is valid, but instance.prototype is not allowed. Function objects can access their prototype property directly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/prototypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
Object.prototype; // ok
new Object().prototype; // error
function f() {}
f.prototype;
```

----------------------------------------

TITLE: Function Overload Ambiguity Example in TypeScript
DESCRIPTION: Demonstrates two cases of function overloads with lambda parameters. Shows how overload order affects type inference and property access validation. The first case results in an error while the second case works correctly due to different overload ordering.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionOverloadAmbiguity1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function callb(lam: (l: number) => void );
function callb(lam: (n: string) => void );
function callb(a) { }
callb((a) => { a.length; } ); // error, chose first overload

function callb2(lam: (n: string) => void );
function callb2(lam: (l: number) => void );
function callb2(a) { }
callb2((a) => { a.length; } ); // ok, chose first overload
```

----------------------------------------

TITLE: Module Export Definition - TypeScript
DESCRIPTION: Exports two constant values 'a' and 'b' from a TypeScript module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace2(module=commonjs).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const a = 1;
export const b = 2;
```

----------------------------------------

TITLE: Importing and Accessing Module Properties in TypeScript
DESCRIPTION: This snippet shows the import of two modules and various property access attempts. It demonstrates both valid and invalid assignments, highlighting TypeScript's type checking and read-only property enforcement.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkExportsObjectAssignProperty.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import "./";

import m1 = require("./mod1");

m1.thing;
m1.readonlyProp;
m1.rwAccessors;
m1.readonlyAccessor;
m1.setonlyAccessor;

// allowed assignments
m1.thing = 10;
m1.rwAccessors = 11;
m1.setonlyAccessor = "yes";

// disallowed assignments
m1.readonlyProp = "name";
m1.readonlyAccessor = 12;
m1.thing = "no";
m1.rwAccessors = "no";
m1.setonlyAccessor = 0;

import m2 = require("./mod2");

m2.thing;
m2.readonlyProp;
m2.rwAccessors;
m2.readonlyAccessor;
m2.setonlyAccessor;

// allowed assignments
m2.thing = "ok";
m2.rwAccessors = 11;
m2.setonlyAccessor = "yes";

// disallowed assignments
m2.readonlyProp = "name";
m2.readonlyAccessor = 12;
m2.thing = 0;
m2.rwAccessors = "no";
m2.setonlyAccessor = 0;
```

----------------------------------------

TITLE: Handling Import Errors in TypeScript
DESCRIPTION: This snippet shows TypeScript import statements that resulted in errors due to incorrect file extensions for imports. It exemplifies two types of errors related to importing TypeScript (.ts, .tsx) and declaration files (.d.ts) without the proper 'import type' syntax. The errors indicate that the TypeScript compiler settings must allow these imports or that the imports are improperly specified.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionNoTsESM.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
"import x from \"./x.ts\";\n                  ~~~~~~~~\n!!! error TS5097: An import path can only end with a '.ts' extension when 'allowImportingTsExtensions' is enabled.\n    import y from \"./y.tsx\";\n                  ~~~~~~~~~\n!!! error TS5097: An import path can only end with a '.tsx' extension when 'allowImportingTsExtensions' is enabled.\n    import z from \"./z.d.ts\";\n                  ~~~~~~~~~~\n!!! error TS2846: A declaration file cannot be imported without 'import type'. Did you mean to import an implementation file './z.js' instead;"
```

LANGUAGE: TypeScript
CODE:
```
// Making sure the suggested fixes are valid:\n    import x2 from \"./x\";\n    import y2 from \"./y\";\n    import z2 from \"./z\";
```

----------------------------------------

TITLE: Using ES2015 Object Constructor Methods in TypeScript
DESCRIPTION: This snippet shows the usage of ES2015 Object constructor methods like assign, getOwnPropertySymbols, is, and setPrototypeOf. These methods are not available in the default TypeScript configuration and require the 'lib' compiler option to be set to 'es2015' or later.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/doYouNeedToChangeYourTargetLibraryES2015.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
const testObjectConstructorAssign = Object.assign({}, {});
const testObjectConstructorGetOwnPropertySymbols = Object.getOwnPropertySymbols({});
const testObjectConstructorKeys = Object.keys({});
const testObjectConstructorIs = Object.is({}, {});
const testObjectConstructorSetPrototypeOf = Object.setPrototypeOf({}, {});
```

----------------------------------------

TITLE: Defining Conditional Types in TypeScript
DESCRIPTION: This snippet demonstrates the usage of conditional types in TypeScript, including Exclude, Extract, and NonNullable type utilities. It shows how these types can be used to manipulate and filter union types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/conditionalTypes1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
type T00 = Exclude<"a" | "b" | "c" | "d", "a" | "c" | "f">;  // "b" | "d"
type T01 = Extract<"a" | "b" | "c" | "d", "a" | "c" | "f">;  // "a" | "c"

type T02 = Exclude<string | number | (() => void), Function>;  // string | number
type T03 = Extract<string | number | (() => void), Function>;  // () => void

type T04 = NonNullable<string | number | undefined>;  // string | number
type T05 = NonNullable<(() => string) | string[] | null | undefined>;  // (() => string) | string[]
```

----------------------------------------

TITLE: Private Field Access Errors in Nested Classes
DESCRIPTION: Demonstrates TypeScript error cases for private field access including shadowed private methods and invalid private field access on 'any' type. Shows how nested class definitions can create naming conflicts with private fields.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameNestedMethodAccess.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    #foo = 42;
    #bar() { new C().#baz; }
    get #baz() { return 42; }

    m() {
        return class D {
            #bar() {}
            constructor() {
                new C().#foo;
                new C().#bar; // Error
                new C().#baz;
                new D().#bar;
            }

            n(x: any) {
                x.#foo;
                x.#bar;
                x.#unknown; // Error
            }
        }
    }
}
```

----------------------------------------

TITLE: Semantic Versioning Template Literal Type Usage in TypeScript
DESCRIPTION: A function demonstrating assignment compatibility with a semantic versioning template literal type. It shows various typecasts using 'as' with different template patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes3.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
function f2() {
    let x: `${number}.${number}.${number}`;
    x = '1.1.1';
    x = '1.1.1' as `1.1.${number}`;
    x = '1.1.1' as `1.${number}.1`;
    x = '1.1.1' as `1.${number}.${number}`;
    x = '1.1.1' as `${number}.1.1`;
    x = '1.1.1' as `${number}.1.${number}`;
    x = '1.1.1' as `${number}.${number}.1`;
    x = '1.1.1' as `${number}.${number}.${number}`;
}
```

----------------------------------------

TITLE: Demonstrating TypeScript Compiler Errors for Default Arguments in Function Overloads
DESCRIPTION: This code snippet showcases multiple scenarios where default parameter values are incorrectly used in function overloads, class methods, and interface declarations. The TypeScript compiler raises errors for each case, indicating that parameter initializers are only allowed in function or constructor implementations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/defaultArgsInOverloads.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function fun(a: string);
function fun(a = 3);
function fun(a = null) { }

class C {
	fun(a: string);
	fun(a = 3);
	fun(a = null) { }
	static fun(a: string);
	static fun(a = 3);
	static fun(a = null) { }
}

interface I {
    fun(a: string);
    fun(a = 3);
}

var f: (a = 3) => number;
```

----------------------------------------

TITLE: Circular Import Definition in TypeScript Module
DESCRIPTION: This snippet demonstrates a problematic module definition with a circular import. It causes a TypeScript compilation error due to the circular definition of the 'self' import alias.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveExportAssignmentAndFindAliasedType1.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
declare module "moduleC" {
    import self = require("moduleC");
    export = self;
}
```

----------------------------------------

TITLE: Defining Dictionary and NumericDictionary Interfaces with Index Signatures in TypeScript
DESCRIPTION: Defines basic interfaces with index signatures for string and number keys, commonly used in utility libraries like Lodash.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emptyObjectNotSubtypeOfIndexSignatureContainingObject1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Dictionary<T> {
  [index: string]: T;
}

interface NumericDictionary<T> {
  [index: number]: T;
}
```

----------------------------------------

TITLE: TypeScript Type Compatibility with Protected Members
DESCRIPTION: These examples demonstrate type compatibility issues when working with protected members. Classes with differently-accessible members (protected vs public) are not compatible even if the structure is otherwise the same.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/protectedMembers.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
class A1 {
    protected x;
}
class B1 {
    x;
}
var a1: A1;
var b1: B1;
a1 = b1;  // Error, B1 doesn't derive from A1
b1 = a1;  // Error, x is protected in A1 but public in B1

class A2 {
    protected x;
}
class B2 extends A2 {
    x;
}

class A3 {
    x;
}
// Error x is protected in B3 but public in A3
class B3 extends A3 {
    protected x;
}
```

----------------------------------------

TITLE: Property Initialization in Constructor of Extended Class
DESCRIPTION: Shows how to correctly initialize a property inherited from a base class within the constructor of a derived class. The property `p1` is initialized to `'z'` within the constructor, satisfying the definite assignment requirement.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedUninitializedPropertyDeclaration.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
class G extends E {
 p1: 'z'
 constructor() {
 super()
 this.p1 = 'z'
 }
 }
```

----------------------------------------

TITLE: Validating Object Types with Intersection in TypeScript
DESCRIPTION: This snippet defines a type and function that validate object types using intersection. It ensures that all properties of the object are of type 'object'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTypeFunctionObjectPropertyIntersection.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
type Validate<T> = T & { [K in keyof T]: object }
declare function f<S, T extends Record<string, (state: S) => any>>(s: S, x: Validate<T>): void;

f(0, {
  foo: s => s + 1,
})
```

----------------------------------------

TITLE: Higher-Order Function Composition
DESCRIPTION: Example of composing higher-order functions and component enhancers using pipe function
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericFunctionInference1.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
const enhance = pipe(
    myHoc1,
    myHoc2,
);

const MyComponent2 = enhance(MyComponent1);
```

----------------------------------------

TITLE: Using Interface Inheritance with Method Calls and Assignment
DESCRIPTION: Demonstrates usage of inherited interfaces through method calls and assignment, showing how properties and methods are accessed through the interface hierarchy.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserAstSpans1.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
var i2_i: i2;
var i3_i: i3;
i2_i.i2_f1();
i2_i.i2_nc_f1();
i2_i.f1();
i2_i.nc_f1();
i2_i.i2_l1();
i2_i.i2_nc_l1();
i2_i.l1();
i2_i.nc_l1();
i3_i.i2_f1();
i3_i.i2_nc_f1();
i3_i.f1();
i3_i.nc_f1();
i3_i.i2_l1();
i3_i.i2_nc_l1();
i3_i.l1();
i3_i.nc_l1();
// assign to interface
i2_i = i3_i;
i2_i.i2_f1();
i2_i.i2_nc_f1();
i2_i.f1();
i2_i.nc_f1();
i2_i.i2_l1();
i2_i.i2_nc_l1();
i2_i.l1();
i2_i.nc_l1();
```

----------------------------------------

TITLE: Implementing Interfaces and Type Assignments in TypeScript
DESCRIPTION: This snippet demonstrates class implementation of an interface and various type assignments between interfaces. It showcases TypeScript's ability to detect incorrect implementations and incompatible type assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceInheritance.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class C1 implements I2 { // should be an error - it doesn't implement the members of I1
    public i2P1: string;
}

var i2: I2;
var i1: I1;
var i3: I3;
i1 = i2;
i2 = i3; // should be an error - i3 does not implement the members of i1

var c1: C1;

var i4: I4;
var i5: I5;

i4 = i5; // should be an error
i5 = i4; // should be an error
```

----------------------------------------

TITLE: Implementing Nested Loops with Break and Continue in TypeScript
DESCRIPTION: This snippet defines a function 'foo' with nested loops using 'let' variables. It includes various break and continue statements, as well as closures capturing loop variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop8_ES6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function foo() {
    l0:
    for (let z = 0; z < 1; ++z) {
        l1:
        for (let x = 0; x < 1; ++x) {
            ll1:
            for (let y = 0; y < 1; ++y) {
                (function() { return x + y });
                (() => x + y);
                if (y == 1) {
                    break;
                }
                if (y == 1) {
                    break l1;
                }
                if (y == 1) {
                    break ll1;
                }
                if (y == 1) {
                    continue l0;
                }

                if (x == 2) {
                    continue;
                }
                if (x == 2) {
                    continue l1;
                }
                if (x == 2) {
                    continue ll1;
                }
                if (x == 2) {
                    return "123"
                }
                if (x == 3) {
                    return;
                }
            }
            if (x == 1) {
                break;
            }
            if (x == 1) {
                break l1;
            }
            if (x == 2) {
                continue;
            }
            if (x == 2) {
                continue l1;
            }
            if (x == 2) {
                continue l0;
            }
            if (x == 2) {
                return "456";
            }
            if (x == 3) {
                return;
            }
        }
    }
}
```

----------------------------------------

TITLE: CommonJS Package Configuration
DESCRIPTION: Subfolder package.json configuration specifying CommonJS module format.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportAssignment(module=node18).errors.txt#2025-04-21_snippet_4

LANGUAGE: JSON
CODE:
```
{
    "type": "commonjs"
}
```

----------------------------------------

TITLE: Importing Modules in ECMAScript Module Format (TypeScript)
DESCRIPTION: This snippet shows how to import modules in an ECMAScript module format file using TypeScript. It demonstrates importing from different module types and accessing their properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsConditionalPackageExports(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// esm format file
import * as cjs from "package/cjs";
import * as mjs from "package/mjs";
import * as type from "package";
cjs;
mjs;
type;
import * as cjsi from "inner/a";
import * as mjsi from "inner/b";
import * as typei from "inner";
import * as ts from "inner/types";
cjsi.mjsSource;
mjsi.mjsSource;
typei.mjsSource;
ts.mjsSource;
```

----------------------------------------

TITLE: TypeScript Compiler Error - Missing Return Value
DESCRIPTION: This error indicates that a function with a declared return type (other than 'undefined', 'void', or 'any') does not explicitly return a value. This can lead to unexpected behavior at runtime.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocOuterTypeParameters2.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
"jsdocOuterTypeParameters1.js(1,14): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value."
```

----------------------------------------

TITLE: Type Definition with Index Signature and Enum in TypeScript
DESCRIPTION: This code defines a type `DBBoolTable` with an index signature that maps keys of type `K` (constrained to be strings) to the union type `0 | 1`. An enum `Flag` is also defined with string values. Finally, `SimpleDBRecord` is defined as an intersection of a type with `staticField: number` and a `DBBoolTable<Flag>`.  The goal is to model a database table with boolean flags represented as 0 or 1.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_26

LANGUAGE: typescript
CODE:
```
    // Repro from #23618
    
    type DBBoolTable<K extends string> = { [k in K]: 0 | 1 }
    enum Flag {
        FLAG_1 = "flag_1",
        FLAG_2 = "flag_2"
    }
    
    type SimpleDBRecord<Flag extends string> = { staticField: number } & DBBoolTable<Flag>
```

----------------------------------------

TITLE: Defining Action Creators and Thunks in TypeScript
DESCRIPTION: This snippet defines a simple action creator (`simpleAction`) and a thunk action creator (`thunkAction`). The `simpleAction` returns a plain action object, while `thunkAction` returns an asynchronous function that dispatches actions and accesses props from the component.  The types for `Dispatch`, `Action`, and `AnyAction` are also defined to support type-safe dispatching.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reactReduxLikeDeferredInferenceAllowsAssignment.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
interface Dispatch<A extends Action = AnyAction> {
      <T extends A>(action: T): T;
    }
    interface Action<T = any> {
      type: T;
    }
    interface AnyAction extends Action {
      [extraProps: string]: any;
    }
    
    const simpleAction = (payload: boolean) => ({
      type: "SIMPLE_ACTION",
      payload
    });
    const thunkAction = (param1: number, param2: string) => async (
      dispatch: Dispatch,
      { foo }: OwnProps
    ) => {
      return foo;
    };
```

----------------------------------------

TITLE: Defining TypeScript Classes with Access Modifiers
DESCRIPTION: Defines a standard class and a generic class with private, protected, and public properties at both the instance and static levels. The code also extends the class via an interface to add extension methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisTypeAccessibility.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class MyClass {
    private p: number = 123;
    protected pp: number = 123;
    public ppp: number = 123;
    private static sp: number = 123;
    protected static spp: number = 123;
    public static sppp: number = 123;
}

interface MyClass {
    extension1(p: number): void;
    extension2(p: number): void;
    extension3(p: number): void;
}

class MyGenericClass<T> {
    private p: T;
    protected pp: T;
    public ppp: T;
    private static sp: number;
    protected static spp: number;
    public static sppp: number;
}
```

----------------------------------------

TITLE: Defining Asynchronous Methods in Objects
DESCRIPTION: This snippet demonstrates how to define asynchronous methods within a JavaScript object using TypeScript, showcasing different return types for async methods. It highlights the usage of async functions inside object literals.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncAwaitIsolatedModules_es2017.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
let o = {
	async m1() { },
	async m2(): Promise<void> { },
	async m3(): MyPromise<void> { }
};
```

----------------------------------------

TITLE: Defining Mode Class Extending AbstractMode - TypeScript
DESCRIPTION: This code snippet defines the Mode class which extends the AbstractMode class, implementing an initial state retrieval function. It demonstrates class inheritance in TypeScript, where Mode can utilize methods from AbstractMode and define its own functionalities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveClassReferenceTest.sourcemap.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
export class Mode extends AbstractMode {
    // scenario 2
    public getInitialState(): IState {
        return new State(self);
    }
}
```

----------------------------------------

TITLE: Handling Type Assignments in TypeScript
DESCRIPTION: This TypeScript code snippet defines a class, declares functions, and attempts to use these in function calls demonstrating type assignment errors. The 'Bar' class requires a property 'x', while the 'foo' function requires specific types for its arguments, highlighting issues when these constraints are not met. It also outlines errors when constructors aren't used and when function references are mistakenly used as arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/didYouMeanElaborationsForExpressionsWhichCouldBeCalled.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Bar {
    x!: string;
}

declare function getNum(): number;

declare function foo(arg: { x: Bar, y: Date }, item: number, items?: [number, number, number]): void;

foo({
    x: Bar,
       ~~~
!!! error TS2741: Property 'x' is missing in type 'typeof Bar' but required in type 'Bar'.
!!! related TS2728 didYouMeanElaborationsForExpressionsWhichCouldBeCalled.ts:2:5: 'x' is declared here.
!!! related TS6213 didYouMeanElaborationsForExpressionsWhichCouldBeCalled.ts:10:8: Did you mean to use 'new' with this expression?
    y: Date
       ~~~~
!!! error TS2740: Type 'DateConstructor' is missing the following properties from type 'Date': toDateString, toTimeString, toLocaleDateString, toLocaleTimeString, and 37 more.
!!! related TS6213 didYouMeanElaborationsForExpressionsWhichCouldBeCalled.ts:11:8: Did you mean to use 'new' with this expression?
}, getNum());

foo({
    x: new Bar(),
    y: new Date()
}, getNum);
   ~~~~~~
!!! error TS2345: Argument of type '() => number' is not assignable to parameter of type 'number'.
!!! related TS6212 didYouMeanElaborationsForExpressionsWhichCouldBeCalled.ts:17:4: Did you mean to call this expression?


foo({
    x: new Bar(),
    y: new Date()
}, getNum(), [
    1,
    2,
    getNum
    ~~~~~~
!!! error TS2322: Type '() => number' is not assignable to type 'number'.
!!! related TS6212 didYouMeanElaborationsForExpressionsWhichCouldBeCalled.ts:26:5: Did you mean to call this expression?
]);
```

----------------------------------------

TITLE: Declaring Interfaces and Classes in TypeScript
DESCRIPTION: This code snippet demonstrates the declaration of module 'TypeScript' defining the interfaces IIndexable and IHashTable for handling generic types. Additionally, it implements classes StringHashTable and IdentifierNameHashTable showing the relationships between them. The snippet reveals issues with duplicate index signatures for 'IIndexable' and duplicate class identifiers 'StringHashTable' and 'IdentifierNameHashTable'. Key functionalities include adding, removing, and looking up items within the hash tables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericClassesRedeclaration.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    declare module TypeScript {
        interface IIndexable<T> {
            [s: string]: T;
        }
        function createIntrinsicsObject<T>(): IIndexable<T>;
        interface IHashTable<T> {
            getAllKeys(): string[];
            add(key: string, data: T): boolean;
            addOrUpdate(key: string, data: T): boolean;
            map(fn: (k: string, value: T, context: any) => void, context: any): void;
            every(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            some(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            count(): number;
            lookup(key: string): T;
        }
        class StringHashTable<T> implements IHashTable<T> {
            private itemCount;
            private table;
            public getAllKeys(): string[];
            public add(key: string, data: T): boolean;
            public addOrUpdate(key: string, data: T): boolean;
            public map(fn: (k: string, value: T, context: any) => void, context: any): void;
            public every(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            public some(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            public count(): number;
            public lookup(key: string): T;
            public remove(key: string): void;
        }
        class IdentifierNameHashTable<T> extends StringHashTable<T> {
            public getAllKeys(): string[];
            public add(key: string, data: T): boolean;
            public addOrUpdate(key: string, data: T): boolean;
            public map(fn: (k: string, value: T, context: any) => void, context: any): void;
            public every(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            public some(fn: (k: string, value: any, context: any) => void, context: any): boolean;
            public lookup(key: string): T;
        }
    }
    declare module TypeScript {
        interface IIndexable<T> {
            [s: string]: T;
        }
        function createIntrinsicsObject<T>(): IIndexable<T>;
        interface IHashTable<T> {
            getAllKeys(): string[];
            add(key: string, data: T): boolean;
            addOrUpdate(key: string, data: T): boolean;
            map(fn: (k: string, value: T, context: any) => void, context: any): void;
            every(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            some(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            count(): number;
            lookup(key: string): T;
        }
        class StringHashTable<T> implements IHashTable<T> {
            private itemCount;
            private table;
            public getAllKeys(): string[];
            public add(key: string, data: T): boolean;
            public addOrUpdate(key: string, data: T): boolean;
            public map(fn: (k: string, value: T, context: any) => void, context: any): void;
            public every(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            public some(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            public count(): number;
            public lookup(key: string): T;
            public remove(key: string): void;
        }
        class IdentifierNameHashTable<T> extends StringHashTable<T> {
            public getAllKeys(): string[];
            public add(key: string, data: T): boolean;
            public addOrUpdate(key: string, data: T): boolean;
            public map(fn: (k: string, value: T, context: any) => void, context: any): void;
            public every(fn: (k: string, value: T, context: any) => void, context: any): boolean;
            public some(fn: (k: string, value: any, context: any) => void, context: any): boolean;
            public lookup(key: string): T;
        }
    }
```

----------------------------------------

TITLE: Invalid Decorator Usage on Abstract Methods in TypeScript
DESCRIPTION: Example showing incorrect usage of decorators on abstract class methods. The code demonstrates that decorators cannot be applied to abstract method declarations, resulting in TS1249 compiler errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-methods-nonStaticAbstract(target=es2015).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare let dec: any;

const method3 = "method3";

abstract class C {
    @dec(1) abstract method1(): void;
    @dec(2) abstract ["method2"](): void;
    @dec(3) abstract [method3](): void;
}
```

----------------------------------------

TITLE: Button Component with Duplicate Children Prop
DESCRIPTION: A React component that attempts to pass children prop twice, causing a TypeScript compilation error
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty13.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class Button extends React.Component<ButtonProp, any> {
    render() {
        return (<InnerButton {...this.props} children="hi">
            <div>Hello World</div>
        </InnerButton>);
    }
}
```

----------------------------------------

TITLE: String Literal Switch Statement with Errors in TypeScript
DESCRIPTION: This TypeScript code demonstrates the use of string literals and a union type in a switch statement, resulting in multiple compilation errors.  The errors point to issues such as unused comma operators, type incompatibilities, and conditions that are always truthy, as reported by the TypeScript compiler.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/stringLiteralsWithSwitchStatements04.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
"    let x: \"foo\";
    let y: \"foo\" | \"bar\"; 
    
    declare function randBool(): boolean;
    
    switch (y) {
        case \"foo\", x:
             ~~~~~
            break;
        case x, \"foo\":
             ~
            break;
        case x, \"baz\":
             ~
             ~~~~~~~~
            break;
        case \"baz\", x:
             ~~~~~
            break;
        case \"baz\" && \"bar\":
             ~~~~~
            break;
        case \"baz\" && (\"foo\" || \"bar\"):
             ~~~~~
                       ~~~~~
            break;
        case \"bar\" && (\"baz\" || \"bar\"):
             ~~~~~
                       ~~~~~
            break;
    }
    "
```

----------------------------------------

TITLE: Dynamic ESM Import Path Resolution
DESCRIPTION: Demonstrates errors when dynamically importing modules without explicit file extensions in node16 or nodenext module resolution modes
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node18).errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
const _m42 = import("./subfolder2/index");
const _m43 = import("./subfolder2/another");
const _m44 = import("./subfolder2/another/");
const _m45 = import("./subfolder2/another/index");
```

----------------------------------------

TITLE: Implementing Multimap3 Class with TypeScript Error
DESCRIPTION: Implementation of a Multimap3 class that demonstrates a TypeScript type checking error. The error occurs because the _map object doesn't have a string index signature defined but is being accessed with string keys.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeFromPrototypeAssignment3.errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
function Multimap3() {
    this._map = {};
};

Multimap3.prototype = {
    /**
     * @param {string} key
     * @returns {number} the value ok
     */
    get(key) {
        return this._map[key + ''];
    }
}

/** @type {Multimap3} */
const map = new Multimap3();
const n = map.get('hi')
```

----------------------------------------

TITLE: Usage of Function with Rest Parameters
DESCRIPTION: This snippet demonstrates calling the `foo2` function with a greeting and additional greetings, then iterating through the resulting array of `Greeter` objects and calling the `greet` method on each. It shows how to work with functions that use rest parameters and how to iterate over arrays of objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
 "var b = foo2(\"Hello\", \"World\", \"!\");\nfor (var j = 0; j < b.length; j++) {\n    b[j].greet();\n}"
```

----------------------------------------

TITLE: Demonstrating Invalid and Valid Usage of 'undefined' in TypeScript
DESCRIPTION: This code snippet illustrates various attempts to use 'undefined' as an identifier, which results in compilation errors. It also shows correct usage of 'undefined' as a type annotation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/undefinedTypeAssignment4.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class undefined {
	foo: string;
}
interface undefined {
	member: number;
}
namespace undefined {
	export var x = 42;
}
var x: undefined;
var y: typeof undefined;
```

----------------------------------------

TITLE: Calling Generic Map Function with Implicit and Explicit Type Parameters
DESCRIPTION: Demonstrates various ways of calling the generic map function, including both implicit type inference and explicit type parameter specification. Shows both valid uses and cases that produce type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mismatchedExplicitTypeParameterAndArgumentType.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var r0 = map([1, ""], (x) => x.toString());
var r5 = map<any, any>([1, ""], (x) => x.toString());
var r6 = map<Object, Object>([1, ""], (x) => x.toString());
var r7 = map<number, string>([1, ""], (x) => x.toString()); // error
var r7b = map<number>([1, ""], (x) => x.toString()); // error
var r8 = map<any, string>([1, ""], (x) => x.toString());
```

----------------------------------------

TITLE: TypeScript Class Definition
DESCRIPTION: This code snippet defines a simple TypeScript class named 'c'. It demonstrates a basic class structure in TypeScript, which can be used as input for the TypeScript compiler.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithJsEmitPathSameAsInput.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    class c {
    }
    
```

----------------------------------------

TITLE: Incorrect Computed Property Usage in TypeScript Class
DESCRIPTION: This code demonstrates an error in TypeScript where a computed property is used with an undefined variable 'x'. The error occurs because 'x' is not defined in the current scope but is being used as a computed property key.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indexWithoutParamType2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    // Used to be indexer, now it is a computed property
    [x]: string
}
```

----------------------------------------

TITLE: Defining Base and Derived Interfaces in TypeScript
DESCRIPTION: Defines a base interface and two derived interfaces that extend it, each adding a new property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithStringIndexer3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Base { foo: string; }
interface Derived extends Base { bar: string; }
interface Derived2 extends Derived { baz: string; }
```

----------------------------------------

TITLE: Class Definition with Base Class Extension in TypeScript
DESCRIPTION: This snippet defines a class that extends another class, showcasing inheritance in TypeScript. The base class must be declared before it's extended, and any methods defined within this class return types specified using generics.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_29

LANGUAGE: TypeScript
CODE:
```
export class fuscus<T0, T1> extends macrorhinos.daphaenodon {
```

----------------------------------------

TITLE: Element Utility Functions in TypeScript
DESCRIPTION: This snippet provides utility functions related to the custom `JSX.Element` interface, specifically `isElement` to check if an object is a JSX element and `createElement` to create a JSX element. The `createElement` function is currently a placeholder and returns an empty object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxFactoryAndReactNamespace.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export namespace Element {
    export function isElement(el: any): el is JSX.Element {
        return el.markAsChildOfRootElement !== undefined;
    }

    export function createElement(args: any[]) {

        return {
        }
    }
}
```

----------------------------------------

TITLE: Array Destructuring from Variable in TypeScript
DESCRIPTION: This snippet shows array destructuring from a variable 'multiRobotA'. It assigns the first element to 'nameB' and uses a for loop to iterate once, logging the value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_16

LANGUAGE: TypeScript
CODE:
```
for (nameB = multiRobotA[0], i = 0; i < 1; i++) {
    console.log(nameB);
}
```

----------------------------------------

TITLE: Declaring a React Component Function with TypeScript Props
DESCRIPTION: Declares a function component named 'Yadda' that accepts Props as its parameter type and returns a JSX element.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ignoredJsxAttributes.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
declare function Yadda(props: Props): JSX.Element;
```

----------------------------------------

TITLE: TypeScript Getter Method Missing Return Value
DESCRIPTION: A code example showing a class with a getter method that doesn't return a value, triggering a TypeScript error. The compiler reports 'error TS2378: A get accessor must return a value' because getter methods must always return something.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserES3Accessors1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
    get Foo() { }
}
```

----------------------------------------

TITLE: Importing and Using a Parameterized Class with Type Error in TypeScript
DESCRIPTION: Shows incorrect and correct usage of the imported Foo class. The first instantiation incorrectly passes a boolean where an object with specific properties is expected, causing a type error. The second example shows correct usage with a properly structured object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAssignmentConstrainedGenericType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import foo = require("./foo_0");
var x = new foo(true); // Should error
var y = new foo({a: "test", b: 42}); // Should be OK
var z: number = y.test.b;
```

----------------------------------------

TITLE: Class Destructuring Example in TypeScript
DESCRIPTION: This TypeScript code defines a class with public, private, and protected properties, a getter, a setter, and a method. It demonstrates destructuring the properties of the class instance into rest objects and highlights type errors when trying to access properties on these rest objects. Dependencies include TypeScript environment setup. Key parameters are different scopes of class properties accessed through rest objects. Inputs are class instantiations, and outputs are errors due to type mismatches.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringUnspreadableIntoRest.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class A {
    constructor(
        public publicProp: string,
        private privateProp: string,
        protected protectedProp: string,
    ) {}

    get getter(): number {
        return 1;
    }

    set setter(_v: number) {}

    method() {
        const {                 ...rest1 } = this;
        const {                 ...rest2 } = this as A;
        const { publicProp: _1, ...rest3 } = this;
        const { publicProp: _2, ...rest4 } = this as A;

        rest1.publicProp;
        rest2.publicProp;
        rest3.publicProp;
              ~~~~~~~~~~
!!! error TS2339: Property 'publicProp' does not exist on type 'Omit<this, "publicProp" | "getter" | "setter" | "method">'.
        rest4.publicProp;
              ~~~~~~~~~~
!!! error TS2339: Property 'publicProp' does not exist on type '{}'.

        rest1.privateProp;
              ~~~~~~~~~~~
!!! error TS2339: Property 'privateProp' does not exist on type 'Omit<this, "getter" | "setter" | "method">'.
        rest2.privateProp;
              ~~~~~~~~~~~
!!! error TS2339: Property 'privateProp' does not exist on type '{ publicProp: string; }'.
        rest3.privateProp;
              ~~~~~~~~~~~
!!! error TS2339: Property 'privateProp' does not exist on type 'Omit<this, "publicProp" | "getter" | "setter" | "method">'.
        rest4.privateProp;
              ~~~~~~~~~~~
!!! error TS2339: Property 'privateProp' does not exist on type '{}'.

        rest1.protectedProp;
              ~~~~~~~~~~~~~
!!! error TS2339: Property 'protectedProp' does not exist on type 'Omit<this, "getter" | "setter" | "method">'.
        rest2.protectedProp;
              ~~~~~~~~~~~~~
!!! error TS2339: Property 'protectedProp' does not exist on type '{ publicProp: string; }'.
        rest3.protectedProp;
              ~~~~~~~~~~~~~
!!! error TS2339: Property 'protectedProp' does not exist on type 'Omit<this, "publicProp" | "getter" | "setter" | "method">'.
        rest4.protectedProp;
              ~~~~~~~~~~~~~
!!! error TS2339: Property 'protectedProp' does not exist on type '{}'.

        rest1.getter;
              ~~~~~~
!!! error TS2339: Property 'getter' does not exist on type 'Omit<this, "getter" | "setter" | "method">'.
        rest2.getter;
              ~~~~~~
!!! error TS2339: Property 'getter' does not exist on type '{ publicProp: string; }'.
        rest3.getter;
              ~~~~~~
!!! error TS2339: Property 'getter' does not exist on type 'Omit<this, "publicProp" | "getter" | "setter" | "method">'.
        rest4.getter;
              ~~~~~~
!!! error TS2339: Property 'getter' does not exist on type '{}'.

        rest1.setter;
              ~~~~~~
!!! error TS2339: Property 'setter' does not exist on type 'Omit<this, "getter" | "setter" | "method">'.
        rest2.setter;
              ~~~~~~
!!! error TS2339: Property 'setter' does not exist on type '{ publicProp: string; }'.
        rest3.setter;
              ~~~~~~
!!! error TS2339: Property 'setter' does not exist on type 'Omit<this, "publicProp" | "getter" | "setter" | "method">'.
        rest4.setter;
              ~~~~~~
!!! error TS2339: Property 'setter' does not exist on type '{}'.

        rest1.method;
              ~~~~~~
!!! error TS2339: Property 'method' does not exist on type 'Omit<this, "getter" | "setter" | "method">'.
        rest2.method;
              ~~~~~~
!!! error TS2339: Property 'method' does not exist on type '{ publicProp: string; }'.
        rest3.method;
              ~~~~~~

```

----------------------------------------

TITLE: Analyzing Type Errors in TypeScript Importing - TypeScript
DESCRIPTION: This segment captures several TypeScript errors indicating issues with importing types from 'pkg'. It highlights the specific type errors, such as missing types and expected syntax, relevant to TypeScript's handling of module imports. Key errors include TS1340, TS1478, TS1005, etc., that affect the correct definition of interfaces like 'RequireInterface' and 'ImportInterface'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parseAssertEntriesError.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
/index.ts(2,7): error TS1340: Module 'pkg' does not refer to a type, but is used as a type here. Did you mean 'typeof import('pkg')'?
/index.ts(2,32): error TS1478: Identifier or string literal expected.
/index.ts(2,32): error TS2695: Left side of comma operator is unused and has no side effects.
/index.ts(2,55): error TS1005: ';' expected.
/index.ts(2,66): error TS1128: Declaration or statement expected.
/index.ts(2,68): error TS1128: Declaration or statement expected.
/index.ts(2,69): error TS1128: Declaration or statement expected.
/index.ts(2,70): error TS1128: Declaration or statement expected.
/index.ts(2,71): error TS2304: Cannot find name 'RequireInterface'.
/index.ts(3,36): error TS1005: ':' expected.
/index.ts(3,70): error TS2339: Property 'ImportInterface' does not exist on type 'Promise<{ default: typeof import("/node_modules/pkg/import"); }>'.
/index.ts(5,34): error TS1340: Module 'pkg' does not refer to a type, but is used as a type here. Did you mean 'typeof import('pkg')'?
/index.ts(5,59): error TS1478: Identifier or string literal expected.
/index.ts(5,59): error TS2695: Left side of comma operator is unused and has no side effects.
/index.ts(5,82): error TS1005: ';' expected.
/index.ts(5,93): error TS1128: Declaration or statement expected.
/index.ts(5,95): error TS1128: Declaration or statement expected.
/index.ts(5,96): error TS1128: Declaration or statement expected.
/index.ts(5,97): error TS1128: Declaration or statement expected.
/index.ts(5,98): error TS1434: Unexpected keyword or identifier.
/index.ts(5,98): error TS2304: Cannot find name 'RequireInterface'.
/index.ts(5,114): error TS1128: Declaration or statement expected.
/index.ts(6,34): error TS1340: Module 'pkg' does not refer to a type, but is used as a type here. Did you mean 'typeof import('pkg')'?
/index.ts(6,59): error TS1478: Identifier or string literal expected.
/index.ts(6,59): error TS2695: Left side of comma operator is unused and has no side effects.
/index.ts(6,82): error TS1005: ';' expected.
/index.ts(6,92): error TS1128: Declaration or statement expected.
/index.ts(6,94): error TS1128: Declaration or statement expected.
/index.ts(6,95): error TS1128: Declaration or statement expected.
/index.ts(6,96): error TS1128: Declaration or statement expected.
/index.ts(6,97): error TS1434: Unexpected keyword or identifier.
/index.ts(6,97): error TS2304: Cannot find name 'ImportInterface'.
/index.ts(6,112): error TS1128: Declaration or statement expected.
```

LANGUAGE: TypeScript
CODE:
```
export type LocalInterface =
        & import("pkg", { assert: {1234, "resolution-mode": "require"} }).RequireInterface
          ~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS1340: Module 'pkg' does not refer to a type, but is used as a type here. Did you mean 'typeof import('pkg')'?
                                   ~~~~
!!! error TS1478: Identifier or string literal expected.
                                   ~~~~
!!! error TS2695: Left side of comma operator is unused and has no side effects.
                                                          ~
!!! error TS1005: ';' expected.
                                                                     ~
!!! error TS1128: Declaration or statement expected.
                                                                       ~
!!! error TS1128: Declaration or statement expected.
                                                                        ~
!!! error TS1128: Declaration or statement expected.
                                                                         ~
!!! error TS1128: Declaration or statement expected.
                                                                          ~~~~~~~~~~~~~~~~
!!! error TS2304: Cannot find name 'RequireInterface'.
        & import("pkg", { assert: {1234, "resolution-mode": "import"} }).ImportInterface;
                                       ~
!!! error TS1005: ':' expected.
                                                                         ~~~~~~~~~~~~~~~
!!! error TS2339: Property 'ImportInterface' does not exist on type 'Promise<{ default: typeof import("/node_modules/pkg/import"); }>'.
```

LANGUAGE: TypeScript
CODE:
```
export const a = (null as any as import("pkg", { assert: {1234, "resolution-mode": "require"} }).RequireInterface);
                                     ~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS1340: Module 'pkg' does not refer to a type, but is used as a type here. Did you mean 'typeof import('pkg')'?
                                                              ~~~~
!!! error TS1478: Identifier or string literal expected.
                                                              ~~~~
!!! error TS2695: Left side of comma operator is unused and has no side effects.
                                                                                     ~
!!! error TS1005: ';' expected.
                                                                                                ~
!!! error TS1128: Declaration or statement expected.
                                                                                                  ~
!!! error TS1128: Declaration or statement expected.
                                                                                                   ~
!!! error TS1128: Declaration or statement expected.
                                                                                                    ~
!!! error TS1128: Declaration or statement expected.
                                                                                                     ~~~~~~~~~~~~~~~~
!!! error TS1434: Unexpected keyword or identifier.
                                                                                                     ~~~~~~~~~~~~~~~~
!!! error TS2304: Cannot find name 'RequireInterface'.
                                                                                                                     ~
!!! error TS1128: Declaration or statement expected.
```

LANGUAGE: TypeScript
CODE:
```
export const b = (null as any as import("pkg", { assert: {1234, "resolution-mode": "import"} }).ImportInterface);
                                     ~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS1340: Module 'pkg' does not refer to a type, but is used as a type here. Did you mean 'typeof import('pkg')'?
                                                              ~~~~
!!! error TS1478: Identifier or string literal expected.
                                                              ~~~~
!!! error TS2695: Left side of comma operator is unused and has no side effects.
                                                                                     ~
!!! error TS1005: ';' expected.
                                                                                               ~
!!! error TS1128: Declaration or statement expected.
                                                                                                 ~
!!! error TS1128: Declaration or statement expected.
                                                                                                  ~
!!! error TS1128: Declaration or statement expected.
                                                                                                   ~
!!! error TS1128: Declaration or statement expected.
                                                                                                    ~~~~~~~~~~~~~~~
!!! error TS1434: Unexpected keyword or identifier.
                                                                                                    ~~~~~~~~~~~~~~~
!!! error TS2304: Cannot find name 'ImportInterface'.
                                                                                                                   ~
!!! error TS1128: Declaration or statement expected.
```

----------------------------------------

TITLE: Implementing Private Method Access in TypeScript Class
DESCRIPTION: This snippet defines a class A2 with a private method #method(). It demonstrates how the private method can be accessed within the class but not from outside, resulting in TypeScript errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameMethodAccess.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class A2 {
    #method() { return "" }
    constructor() {
        console.log(this.#method);
        let a: A2 = this;
        a.#method();
        function  foo (){
            a.#method();
        }
    }
}
new A2().#method(); // Error

function  foo (){
    new A2().#method(); // Error
}

class B2 {
    m() {
        new A2().#method();
    }
}
```

----------------------------------------

TITLE: Package Configuration for Type Resolution
DESCRIPTION: This package.json file configures the 'pkg' module to provide different entry points for import and require contexts, affecting type resolution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesTripleSlashReferenceModeOverride2(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "exports": {
        "import": "./import.js",
        "require": "./require.js"
    }
}
```

----------------------------------------

TITLE: Invalid DOM Event Extension in TypeScript
DESCRIPTION: Demonstrates TypeScript preventing invalid extension of Event prototype by adding non-existent properties 'removeChildren' and 'textContent'. TypeScript correctly identifies these properties do not exist on the Event type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeFromPropertyAssignment21.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
Event.prototype.removeChildren = function () {
    this.textContent = 'nope, not going to happen'
}
```

----------------------------------------

TITLE: Incorrect Arity with Generic Rest Parameters
DESCRIPTION: This code attempts to call the `call` function with an incorrect number of arguments. The first call expects 3 arguments based on the generic type inference but only receives one (the handler). The second call also expects 3 but receives 8. This results in a TypeScript compiler error (TS2554) due to the arity mismatch.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericRestArityStrict.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    call((x: number, y: number) => x + y);
    ~~~~
!!! error TS2554: Expected 3 arguments, but got 1.
!!! related TS6236 genericRestArityStrict.ts:5:5: Arguments for the rest parameter 'args' were not provided.
    call((x: number, y: number) => x + y, 1, 2, 3, 4, 5, 6, 7);
                                                ~~~~~~~~~~~~~
!!! error TS2554: Expected 3 arguments, but got 8.
```

----------------------------------------

TITLE: Iterating over getRobots() with Destructuring in JavaScript
DESCRIPTION: This snippet shows a compiled for...of loop that iterates over the result of getRobots(). It destructures the first element of each item into 'numberB' and logs it to the console.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_14

LANGUAGE: JavaScript
CODE:
```
for (var _v = 0, _w = getRobots(); _v < _w.length; _v++) {
    var numberB = _w[_v][0];
    console.log(numberB);
}
```

----------------------------------------

TITLE: Destructuring Assignment in TypeScript For Loop
DESCRIPTION: Performs an array destructuring assignment within the initialization section of a for loop. It assigns values from the array literal `[2, "trimmer", "trimming"]` to the variables `numberA2`, `nameA2`, and `skillA2`, utilizing default values (`-1`, `"name"`, `"skill"`) if the corresponding array elements were missing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.sourcemap.txt#_snippet_58

LANGUAGE: TypeScript
CODE:
```
for (
     [numberA2 = -1, nameA2 = "name", skillA2 = "skill"] = 
          [
           2
            , 
              "trimmer"
                       , 
                         "trimming"
                                   ]

```

----------------------------------------

TITLE: Importing ECMAScript Modules in TypeScript (.cts)
DESCRIPTION: This snippet shows the incorrect import of an ECMAScript module in a CommonJS file, specifically a `.cts` file, which does not support such imports natively. A suggestion is made to either dynamically import the module or convert the file to an ES module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesCJSResolvingToESM2_cjsPackageJson.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import {} from "./module.mjs";
```

----------------------------------------

TITLE: Interface Definitions and Type Assignments in TypeScript
DESCRIPTION: Demonstrates type assignments between two interfaces where one has an optional property and the other has an 'any' type property. Shows various scenarios of type inference and assignment compatibility.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bestCommonTypeWithContextualTyping.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Contextual {
    dummy;
    p?: number;
}

interface Ellement {
    dummy;
    p: any;
}

var e: Ellement;

// All of these should pass. Neither type is a supertype of the other, but the RHS should
// always use Ellement in these examples (not Contextual). Because Ellement is assignable
// to Contextual, no errors.
var arr: Contextual[] = [e]; // Ellement[]
var obj: { [s: string]: Contextual } = { s: e }; // { s: Ellement; [s: string]: Ellement }

var conditional: Contextual = null ? e : e; // Ellement
var contextualOr: Contextual = e || e; // Ellement
```

----------------------------------------

TITLE: Multiple Default Exports Error in TypeScript
DESCRIPTION: Demonstrates invalid TypeScript code where multiple default exports are attempted in a single module. Shows errors for redeclaring exported variable 'default' and having multiple default exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDefaultTypeClassAndValue.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const foo = 1
export default foo
export default class Foo {}
type Bar = {}
export default Bar
```

----------------------------------------

TITLE: Type Error in Logical AND with Function Assignment
DESCRIPTION: Demonstrates type checking errors when attempting to assign a function that returns a number to a variable typed to return a string, with an additional type error in parameter usage.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextuallyTypeLogicalAnd02.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
let x: (a: string) => string;
let y = true;

x = y && (a => {
    const b: number = a;
    return b;
});
```

----------------------------------------

TITLE: Analyzing Type Compatibility with Partial and Readonly in TypeScript
DESCRIPTION: This function demonstrates type compatibility between Partial<T>, Readonly<T>, and their combinations. It highlights cases where type assignments are not compatible, resulting in TypeScript errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypes5.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function f<T>(p: Partial<T>, r: Readonly<T>, pr: Partial<Readonly<T>>, rp: Readonly<Partial<T>>) {
    let a1: Partial<T> = p;
    let a2: Partial<T> = r;
    let a3: Partial<T> = pr;
    let a4: Partial<T> = rp;
    let b1: Readonly<T> = p;  // Error
    let b2: Readonly<T> = r;
    let b3: Readonly<T> = pr;  // Error
    let b4: Readonly<T> = rp;  // Error
    let c1: Partial<Readonly<T>> = p;
    let c2: Partial<Readonly<T>> = r;
    let c3: Partial<Readonly<T>> = pr;
    let c4: Partial<Readonly<T>> = rp;
    let d1: Readonly<Partial<T>> = p;
    let d2: Readonly<Partial<T>> = r;
    let d3: Readonly<Partial<T>> = pr;
    let d4: Readonly<Partial<T>> = rp;
}
```

----------------------------------------

TITLE: Invalid Arithmetic Operations with Template Literals in TypeScript
DESCRIPTION: Collection of TypeScript examples showing type errors when attempting to perform bitwise AND operations between numbers and template literals. These operations are invalid because template literals produce strings, which cannot be used in arithmetic operations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateStringBinaryOperationsInvalid.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var ca = 1 & `${ 3 - 4 }5`;
var da = 1 & `2${ 3 - 4 }5`;
var ea = `${ 3 - 4 }` & 6;
var fa = `2${ 3 - 4 }` & 6;
var ga = `${ 3 - 4 }5` & 6;
var ha = `2${ 3 - 4 }5` & 6;

var ab = 1 & `${ 3 * 4 }`;
var bb = 1 & `2${ 3 * 4 }`;
var cb = 1 & `${ 3 * 4 }5`;
var db = 1 & `2${ 3 * 4 }5`;
var eb = `${ 3 * 4 }` & 6;
var fb = `2${ 3 * 4 }` & 6;
var gb = `${ 3 * 4 }5` & 6;
var hb = `2${ 3 * 4 }5` & 6;

var ac = 1 & `${ 3 & 4 }`;
var bc = 1 & `2${ 3 & 4 }`;
var cc = 1 & `${ 3 & 4 }5`;
var dc = 1 & `2${ 3 & 4 }5`;
var ec = `${ 3 & 4 }` & 6;
var fc = `2${ 3 & 4 }` & 6;
var gc = `${ 3 & 4 }5` & 6;
var hc = `2${ 3 & 4 }5` & 6;
```

----------------------------------------

TITLE: Generic Function with Specific Function Signature in TypeScript
DESCRIPTION: The function foo2<T extends (x: string) => string>(x: T) requires that the argument 'x' must match a specific function signature. If any other type is passed, the TypeScript compiler will raise errors indicating mismatches in expected arguments or types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionConstraintSatisfaction2.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function foo2<T extends (x: string) => string>(x: T): T { return x; }

class C {
    foo: string;
}

var b: { new (x: string): string };

class C2<T> {
    foo: T;
}

var b2: { new <T>(x: T): T };

var r = foo2(new Function());
                 ~~~~~~~~~~~~~~
!!! error TS2345: Argument of type 'Function' is not assignable to parameter of type '(x: string) => string'.
!!! error TS2345:   Type 'Function' provides no match for the signature '(x: string): string'.
```

----------------------------------------

TITLE: Type Utility Definitions for Channel System
DESCRIPTION: Implements utility types including Channel union type, ChannelType inference, and complex type helpers for channel manipulation using conditional types and mapped types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/complicatedIndexedAccessKeyofReliesOnKeyofNeverUpperBound.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
type Channel = TextChannel | EmailChannel;

export type ChannelType = Channel extends { type: infer R } ? R : never;

type Omit<T, K extends keyof T> = Pick<
    T,
    ({ [P in keyof T]: P } & { [P in K]: never } & { [x: string]: never })[keyof T]
>;

type ChannelOfType<T extends ChannelType, A = Channel> = A extends { type: T }
    ? A
    : never;

export type NewChannel<T extends Channel> = Pick<T, 'type'> &
    Partial<Omit<T, 'type' | 'id'>> & { localChannelId: string };
```

----------------------------------------

TITLE: Optional Parameters in Generic Functions in TypeScript
DESCRIPTION: Defines a generic function `makeArrayGOpt` that returns an array of optional parameters. Demonstrates the handling of optional arguments and types, with specific examples of type assignment issues.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericRestArgs.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function makeArrayGOpt<T>(item1?: T, item2?: T, item3?: T) {
    return [item1, item2, item3];
}
var a2Ga = makeArrayGOpt(1, ""); 
var a2Gb = makeArrayG<any>(1, "");
var a2Gc = makeArrayG<any[]>(1, ""); // error
```

----------------------------------------

TITLE: Testing Spread Syntax with Generic Types in TypeScript
DESCRIPTION: This code demonstrates when TypeScript allows or disallows spread syntax based on the generic type constraints. Functions f1, f3, and f4 produce errors because they attempt to spread primitive types or union types that include primitives, while f2, f5, and f6 are valid cases.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/spreadTypeVariable.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f1<T extends number>(arg: T) {
  return { ...arg };
}

function f2<T extends string[]>(arg: T) {
  return { ...arg }
}

function f3<T extends number | string[]>(arg: T) {
  return { ...arg }
}

function f4<T extends number | { [key: string]: any }>(arg: T) {
  return { ...arg }
}

function f5<T extends string[] | { [key: string]: any }>(arg: T) {
  return { ...arg }
}

function f6<T>(arg: T) {
  return { ...arg }
}
```

----------------------------------------

TITLE: TypeScript Abstract and Concrete Class Union Type Instantiation
DESCRIPTION: Demonstrates type definitions and instantiation attempts of abstract and concrete classes using union types. Shows error cases when trying to create instances of abstract classes directly or through array operations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/abstractClassUnionInstantiation.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class ConcreteA {}
class ConcreteB {}
abstract class AbstractA { a: string; }
abstract class AbstractB { b: string; }

type Abstracts = typeof AbstractA | typeof AbstractB;
type Concretes = typeof ConcreteA | typeof ConcreteB;
type ConcretesOrAbstracts = Concretes | Abstracts;

declare const cls1: ConcretesOrAbstracts;
declare const cls2: Abstracts;
declare const cls3: Concretes;

new cls1(); // should error
new cls2(); // should error
new cls3(); // should work

[ConcreteA, AbstractA, AbstractB].map(cls => new cls()); // should error
[AbstractA, AbstractB, ConcreteA].map(cls => new cls()); // should error
[ConcreteA, ConcreteB].map(cls => new cls()); // should work
[AbstractA, AbstractB].map(cls => new cls()); // should error
```

----------------------------------------

TITLE: Type Narrowing with Aliased Discriminants in TypeScript
DESCRIPTION: This function shows how TypeScript handles type narrowing when the discriminant property is aliased during destructuring. It demonstrates that type inference still works correctly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowAliasing.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
function f32(obj: { kind: 'foo', foo: string } | { kind: 'bar', bar: number }) {
    const { kind: k } = obj;
    if (k === 'foo') {
        obj.foo;
    }
    else {
        obj.bar;
    }
}
```

----------------------------------------

TITLE: Defining Base and Derived Interfaces in TypeScript
DESCRIPTION: Establishes a hierarchy of interfaces with Base as the root, Derived extending Base, and Derived2 extending Derived. Each interface adds a new string property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithNumericIndexer5.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Base { foo: string; }
interface Derived extends Base { bar: string; }
interface Derived2 extends Derived { baz: string; }
```

----------------------------------------

TITLE: Importing ESM in CommonJS TypeScript (.cts file with error)
DESCRIPTION: TypeScript code in a .cts file (explicitly CommonJS format) attempting to import from a package defined as ES Module. This produces a TS1479 error because CommonJS cannot directly require() an ES Module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodePackageSelfName(module=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// esm format file
import * as self from "package";
self;
```

----------------------------------------

TITLE: Array Iteration Loop
DESCRIPTION: For loop that iterates through array elements and calls greet() method on each element.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
for (var j = 0; j < b.length; j++) {
            b[j].greet();
        }
```

----------------------------------------

TITLE: TypeScript Arithmetic Operator Type Error TS2362
DESCRIPTION: This TypeScript compiler error (TS2362) occurs when the left-hand side of an arithmetic operation is not of type 'any', 'number', 'bigint', or an enum type. This error indicates that the operand on the left side of the operator is of an incompatible type for the specified operation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arithmeticOperatorWithInvalidOperands.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(78,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(79,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(80,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(81,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(82,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(83,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(92,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(93,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(94,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(95,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(96,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(97,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(99,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(100,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(101,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(102,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(103,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(104,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(106,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(107,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(108,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(109,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(110,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(111,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(121,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(123,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(124,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

LANGUAGE: typescript
CODE:
```
"arithmeticOperatorWithInvalidOperands.ts(125,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
```

----------------------------------------

TITLE: Demonstrating Property Initialization Error in TypeScript Inheritance
DESCRIPTION: Shows how accessing a redeclared property before initialization in a derived class causes TypeScript error TS2729. The base class has a property 'b' initialized to 1, but the derived class redeclares it and attempts to use it before initialization in the constructor.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/redeclaredProperty.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base {
  b = 1;
}

class Derived extends Base {
  b;
  d = this.b;

  constructor() {
    super();
    this.b = 2;
  }
}
```

----------------------------------------

TITLE: Assignment Compatibility Errors with 0-Parameter Signature
DESCRIPTION: This code snippet demonstrates assignment compatibility issues when assigning construct signatures to a variable `a` that expects a construct signature with no parameters (`new () => number`). Errors are raised when assigning signatures that require one or more parameters, as TypeScript enforces that the target signature must accept at least as many arguments as the source.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithConstructSignaturesWithOptionalParameters.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
 "   var a: new () => number;\n        a = b.a; // ok\n        a = b.a2; // ok\n        a = b.a3; // error\n        a = b.a4; // error\n        a = b.a5; // ok\n        a = b.a6; // error"
```

----------------------------------------

TITLE: Defining Interface with Function Index and Union Property (Error)
DESCRIPTION: This snippet defines an interface 'I12' with a string index signature allowing any property with a string key to have type '(x) => number'. It also defines two specific properties 'foo' and 'foo2' using union types. The assignment of 'string | number' to 'foo' and 'e | number' to 'foo2' triggers TS2411 errors, as the union types are not assignable to the function type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionSubtypeIfEveryConstituentTypeIsSubtype.errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
interface I12 {
        [x: string]: (x) => number;
        foo: string | number;
        foo2: e | number;
    }
```

----------------------------------------

TITLE: Exporting Constant in TypeScript
DESCRIPTION: Demonstrates the correct way to export a constant in a TypeScript file using ECMAScript module syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/impliedNodeFormatEmit3(module=esnext).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export const _ = 0;
```

----------------------------------------

TITLE: Union Types with Template Literals in TypeScript
DESCRIPTION: A complex union type combining string literals and template patterns. Demonstrates combining various string patterns into a single type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes3.errors.txt#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
type Boom = 'abc' | 'def' | `a${string}` | Lowercase<string>;
```

----------------------------------------

TITLE: Valid Async Function Declaration returning void
DESCRIPTION: This snippet defines an async function `fn7` that returns void. TypeScript infers the return type as `Promise<void>`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncFunctionDeclaration15_es6.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
async function fn7() { return; }
```

----------------------------------------

TITLE: Exporting Local Interface in TypeScript
DESCRIPTION: This snippet exports a local interface that extends both 'RequireInterface' and 'ImportInterface'. It contextualizes how interfaces are defined and combined in TypeScript. The reliance on previously imported interfaces is crucial for type compatibility and definition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportModeDeclarationEmitErrors1(module=node18).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
export interface LocalInterface extends RequireInterface, ImportInterface {}
```

----------------------------------------

TITLE: Configuring TypeScript ES2015 Reflect API Usage
DESCRIPTION: Example demonstrating usage of ES2015 Reflect API methods that require setting the TypeScript compiler 'lib' option to ES2015. Shows common Reflect operations like apply, construct, and property manipulation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/doYouNeedToChangeYourTargetLibraryES2015.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// es2015
const noOp = () => {};
const testReflectApply = Reflect.apply(noOp, this, []);
const testReflectConstruct = Reflect.construct(noOp, []);
const testReflectDefineProperty = Reflect.defineProperty({}, "", {});
const testReflectDeleteProperty = Reflect.deleteProperty({}, "");
const testReflectGet = Reflect.get({}, "");
```

----------------------------------------

TITLE: Defining Type Aliases for Function Types in TypeScript
DESCRIPTION: This snippet demonstrates defining type aliases for function types using `typeof` to extract the type of a function and its generic parameters. It shows how to create specialized function types with specific type arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/instantiationExpressions.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
type BoxFunc<T> = typeof makeBox<T>;  // (value: T) => { value: T }
    type StringBoxFunc = BoxFunc<string>;  // (value: string) => { value: string }
```

----------------------------------------

TITLE: Invalid Greater Than Symbol in JSX
DESCRIPTION: Example showing incorrect use of '>' symbol in JSX that should be escaped as {'>'} or &gt;
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxInvalidEsprimaTestSuite.errors.txt#2025-04-21_snippet_25

LANGUAGE: tsx
CODE:
```
<a>></a>;
```

----------------------------------------

TITLE: Reporting Errors Due to Undefined Identifiers in TypeScript
DESCRIPTION: This snippet shows TypeScript error messages indicating that the identifier 'foo1' cannot be found. This serves as a diagnostic output to help developers identify issues in their code related to undefined variables. The error messages indicate that 'foo1' is being called but has not been declared anywhere in the program.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserStrictMode2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
"parserStrictMode2.ts(2,1): error TS2304: Cannot find name 'foo1'.\nparserStrictMode2.ts(3,1): error TS2304: Cannot find name 'foo1'.\nparserStrictMode2.ts(4,1): error TS2304: Cannot find name 'foo1'."
```

----------------------------------------

TITLE: Comparing ComparableString Instances Using Generic Function
DESCRIPTION: Defines a generic function 'compare' that leverages the Comparable interface to compare two instances of types that extend Comparable. The function handles null values and uses the 'comparer' method for the actual comparison. This highlights the need for proper type constraints in TypeScript to avoid compilation errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericConstraint2.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function compare<T extends Comparable<T>>(x: T, y: T): number {
        if (x == null) return y == null ? 0 : -1;
        if (y == null) return 1;
        return x.comparer(y);
    }
```

----------------------------------------

TITLE: Defining Interface with Implicit 'any' Return Type in TypeScript
DESCRIPTION: This code snippet defines an interface 'Entry' with a construct signature that lacks a return type annotation. This implicitly gives it an 'any' return type, which triggers a compiler error (TS7013) when 'noImplicitAny' is enabled.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyReferencingDeclaredInterface.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Entry {
    // Should return error for implicit any.
    new ();
}

declare var x: Entry;
```

----------------------------------------

TITLE: Demonstrating TypeScript Uppercase Assignability Errors
DESCRIPTION: This snippet demonstrates type assignability errors that occur when attempting to assign incompatible values to a variable typed with Uppercase<string> in TypeScript. It highlights errors from assigning a number and an object to Uppercase<string>. Ensure TypeScript is installed to replicate these errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/stringMappingAssignability.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const x: Uppercase<string> = 42;
const y: Uppercase<string> = { foo: "bar" };
```

----------------------------------------

TITLE: Logging numberB fetched from a function in TypeScript
DESCRIPTION: This snippet logs the value of numberB fetched from a function getRobot(), demonstrating how to use function return values directly in console.log.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
for (var numberB = getRobot()[0], i = 0; i < 1; i++) {
    console.log(numberB);
}
```

----------------------------------------

TITLE: Exporting Variables and Inferring Types with TypeScript
DESCRIPTION: This code snippet demonstrates how to export variables and infer their types using the 'typeof' operator in TypeScript. The code includes various exports: variables, classes, interfaces, and modules. It shows how to use 'typeof' to infer the type of these exports and also highlights errors like redeclaration of types and self-referencing type issues.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeofAnExportedType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export var x = 1;
export var r1: typeof x;
export var y = { foo: '' };
export var r2: typeof y;
export class C {
    foo: string;
}
export var c: C;
var c2: C;

export var r3: typeof C;
export var r4: typeof c;
export var r4b: typeof c2;

export interface I {
    foo: string;
}
export var i: I;
var i2: I;
export var r5: typeof i;
export var r5: typeof i2;

export module M {
    export var foo = '';
    export class C {
        foo: string;
    }
}
export var r6: typeof M;
export var r7: typeof M.foo;

export import Z = M;
export var r8: typeof Z;
export var r9: typeof Z.foo;

export enum E {
    A
}
export var r10: typeof E;
export var r11: typeof E.A;

export var r12: typeof r12;

export function foo() { }
export module foo {
    export var y = 1;
    export class C {
        foo: string;
    }
}
export var r13: typeof foo;
```

----------------------------------------

TITLE: Array Literal Declaration
DESCRIPTION: This snippet declares and initializes an array 'a' with the values 1, 2, and 3.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationStatements.sourcemap.txt#2025-04-21_snippet_14

LANGUAGE: javascript
CODE:
```
>>>    var a = [
```

----------------------------------------

TITLE: Type Checking with Optional Properties in TypeScript
DESCRIPTION: This function `f1` demonstrates how TypeScript handles optional properties within objects and how assigning an empty object affects type inference. After the conditional check, `obj` is assigned an empty object, potentially leading to `undefined` values when accessing the 'a' property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringControlFlow.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f1(obj: { a?: string }) {
    if (obj.a) {
        obj = {};
        let a1 = obj["a"];  // string | undefined
        let a2 = obj.a;  // string | undefined
    }
}
```

----------------------------------------

TITLE: Declaring a Function in TypeScript Declaration File
DESCRIPTION: This code is an example of a TypeScript declaration file, defining a function 'foo' that returns a boolean. Declaration files are used in TypeScript to describe the shape of existing JavaScript code, aiding in type-checking and development. The function 'foo' does not have an implementation here, as is typical for declaration files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithOutDeclarationFileNameSameAsInputJsFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
declare function foo(): boolean;
```

----------------------------------------

TITLE: Valid string inputs for bigint template literal type (TypeScript)
DESCRIPTION: Shows examples of string literals that are correctly assigned to a parameter typed as `${bigint}`. This includes integers, binary, hexadecimal, and octal representations, demonstrating valid string formats for BigInts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypesPatterns.errors.txt#_snippet_10

LANGUAGE: TypeScript
CODE:
```
bigints("1");
bigints("-1");
bigints("0");
bigints("0b1");
bigints("0x1");
bigints("0o1");
```

----------------------------------------

TITLE: Logging numberB from an array in TypeScript
DESCRIPTION: This snippet creates an array and logs numberB extracted from it. It demonstrates how to log predefined array values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
for (var numberB = [2, "trimmer", "trimming"][0], i = 0; i < 1; i++) {
    console.log(numberB);
}
```

----------------------------------------

TITLE: Using the Comp Component with Button Constructor
DESCRIPTION: This snippet shows an attempt to pass the 'Button' component's class itself as a child to the 'Comp' component. TypeScript issues an error because the type of 'Button' as a class does not match the expected type for 'children', which demonstrates the necessity of using instances of components in React.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxChildrenProperty5.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
let k2 =
    <Comp a={10} b="hi">
        {Button}
         ~~~~~~
!!! error TS2740: Type 'typeof Button' is missing the following properties from type 'Button': render, setState, forceUpdate, props, and 3 more.
!!! related TS6213 file.tsx:29:10: Did you mean to use 'new' with this expression?
    </Comp>;
```

----------------------------------------

TITLE: External Module Import and Type Assignment
DESCRIPTION: Shows TypeScript module imports and type assignments that result in compilation errors due to missing required properties between module types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeofExternalModules.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import ext = require('./typeofExternalModules_external');
import exp = require('./typeofExternalModules_exportAssign');

var y1: typeof ext = ext;
y1 = exp;
var y2: typeof exp = exp;
y2 = ext;
```

----------------------------------------

TITLE: Get Multi Robots Function Definition
DESCRIPTION: Function that returns multiRobots data structure
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function getMultiRobots() {
    return multiRobots;
}
```

----------------------------------------

TITLE: Incorrect JSX Attribute Assignment with Comma Operator
DESCRIPTION: Demonstrates an invalid JSX element creation using comma operator for className, which triggers TypeScript compilation errors
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxParsingError1.errors.txt#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
const class1 = "foo";
const class2 = "bar";
const elem = <div className={class1, class2}/>;
```

----------------------------------------

TITLE: TypeScript Generic Type Error: Cannot find name 'A'
DESCRIPTION: This TypeScript code defines a 'Linq' class with a static method 'select'. The 'select' method is intended to project an array of type 'T' to an array of type 'A', using a provided function. However, the type 'A' is not defined, leading to a TypeScript error TS2304: Cannot find name 'A'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownSymbolInGenericReturnType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    class Linq {
        public static select<T, S>(values: T[], func: (v: T) => A): any[] {
                                                                ~
!!! error TS2304: Cannot find name 'A'.
            var result = new Array(values.length);
     
            for (var i = 0; i < values.length; i++) {
                result[i] = func(values[i]);
            }
     
            return result;
        }
    }
```

----------------------------------------

TITLE: Defining Component Interface in TypeScript
DESCRIPTION: Defines the `Component` interface with generic types for attributes and state. It includes a `view` method that takes a `Vnode` and returns a number.  The `view` method's `this` context is of type `State`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subclassThisTypeAssignable01.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    interface Component<Attrs, State> {
    	view(this: State, vnode: Vnode<Attrs, State>): number;
    	                                      ~~~~~
    }
```

----------------------------------------

TITLE: Defining Overloaded Function with Number Return Type in TypeScript
DESCRIPTION: This code declares a variable 'c3t7' as an overloaded function that can accept either a number or a string, and returns a number. The implementation simply returns the input parameter.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#2025-04-21_snippet_6

LANGUAGE: TypeScript
CODE:
```
var c3t7: {
    (n: number): number;    
    (s1: string): number;
} = function(n) { return n; };
```

----------------------------------------

TITLE: Interface Extension Conflict
DESCRIPTION: This snippet demonstrates an interface 'F' attempting to extend interfaces 'E' and 'D', where both 'E' and 'D' have a property 'a' but with different types (string and number respectively). This causes a TypeScript error because the compiler cannot reconcile the conflicting type definitions for 'a'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfacePropertiesWithSameName3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface D { a: number; }
interface E { a: string; }
interface F extends E, D { } // error
```

----------------------------------------

TITLE: Using Generic Component with Explicit Type Definition
DESCRIPTION: This shows an explicit return of the same interface. Here, the `nextValues` function explicitly returns an object with the same shape as `initialValues`, avoiding a type error. The type of `a` is explicitly declared as `{ x: string; }`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsxGenericTagHasCorrectInferences.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
let c = <GenericComponent initialValues={{ x: "y" }} nextValues={a => ({ x: a.x })} />; // No Error
```

----------------------------------------

TITLE: Unicode Sets Notation in Regular Expressions
DESCRIPTION: An example of Unicode sets notation in a regular expression, showing character class subtraction, intersection operations, and quotation with \q.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/regularExpressionScanning(target=es2015).errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
// Unicode sets notation
/[a--b[--][\d++[]]&&[[&0-9--]&&[\p{L}]--\P{L}-_-]]&&&\q{foo}[0---9][&&q&&&\q{bar}&&]/
```

----------------------------------------

TITLE: Defining Interface with Public and Optional Properties in TypeScript
DESCRIPTION: This snippet defines an interface with both mandatory and optional properties and demonstrates an instance of that interface with type constraints. The required property 'one' expects a type T, while 'two' is optional with type U. The instance 'obj4' specifically uses number for 'one' and string for 'two'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability14.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module __test1__ {
    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
    export var __val__obj4 = obj4;
}
```

----------------------------------------

TITLE: For Loop with Complex Array Destructuring
DESCRIPTION: A JavaScript for loop that iterates through an array of robot objects (multiRobotA, multiRobotB). The loop uses destructuring to extract properties with default values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_33

LANGUAGE: javascript
CODE:
```
for (var _54 = 0, _55 = [multiRobotA, multiRobotB]; _54 < _55.length; _54++) {
```

----------------------------------------

TITLE: Generic Function Tests - TypeScript
DESCRIPTION: Tests generic function declarations with different type constraints and their behavior with default parameter values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextuallyTypedParametersWithInitializers1.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
declare function g1<T>(x: T): T;
declare function g2<T extends any>(x: T): T;
declare function g3<T extends unknown>(x: T): T;
declare function g4<T extends Function>(x: T): T;
declare function g5<T extends (...args: any[]) => any>(x: T): T;
declare function g6<T extends () => any>(x: T): T;

g1((x = 1) => 0);  // number
g2((x = 1) => 0);  // number
g3((x = 1) => 0);  // number
g4((x = 1) => 0);  // number
g5((x = 1) => 0);  // any
g6((x = 1) => 0);  // number
g6((x?) => 0);     // Implicit any error
g6((...x) => 0);   // []
```

----------------------------------------

TITLE: Conditional Mapped Type with Underscore Filter
DESCRIPTION: Creates mapped type that filters keys based on underscore prefix condition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeConstraints2.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
type Mapped5<K extends string> = {
  [P in K as P extends `_${string}` ? P : never]: P;
};

function f5<K extends string>(obj: Mapped5<K>, key: keyof Mapped5<K>) {
  let s: `_${string}` = obj[key];
}
```

----------------------------------------

TITLE: TypeScript Spread Operator Error Cases
DESCRIPTION: Example code showing invalid spread operator usage in TypeScript function calls. Demonstrates cases where spreading arrays triggers the TS2556 error because the spread arguments lack tuple types or aren't passed to rest parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callWithSpread4.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type R = { a: number }
type W = { b: number }
type RW = { a: number, b: number }
declare const pli: {
    (s1: R, s2: RW, s3: RW, s4: RW, s5: W): Promise<void>;
    (streams: ReadonlyArray<R | W | RW>): Promise<void>;
    (s1: R, s2: RW | W, ...streams: Array<RW | W>): Promise<void>;
}

declare var writes: W
declare var reads: R
declare var tr: W
declare var gun: RW[]
declare var gz: RW[]
declare var fun: (inp: any) => AsyncGenerator<string, void, unknown>
pli(
    reads,
    ...gun,
    tr,
    fun,
    ...gz,
    writes
);

declare function test(x: any, y: () => string): string | undefined;
declare var anys: any[]
test(...anys)

pli(...[reads, writes, writes] as const)
```

----------------------------------------

TITLE: Defining Class A in TypeScript
DESCRIPTION: This snippet defines a class 'A' with a constructor initializing the property 'x' to 0. It is relevant for understanding basic class structure in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocImplements_missingType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A { constructor() { this.x = 0; } }
```

----------------------------------------

TITLE: TypeScript Class with Private Fields Error Example
DESCRIPTION: This code demonstrates a TypeScript class using ECMAScript private fields syntax (with #) and shows a type error when trying to assign a string value to a private numeric field. The example includes both instance and static private fields along with methods that access them.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameFieldsESNext(target=esnext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    a = 123;
    #a = 10;
    c = "hello";
    #b;
    method() {
        console.log(this.#a);
        this.#a = "hello";
        ~~~~~~~
!!! error TS2322: Type 'string' is not assignable to type 'number'.
        console.log(this.#b);
    }
    static #m = "test";
    static #x;
    static test() {
        console.log(this.#m);
        console.log(this.#x = "test");
    }
    #something = () => 1234;
}
```

----------------------------------------

TITLE: TypeScript Class Declaration with Decorator and Object Spread
DESCRIPTION: Demonstrates a TypeScript class using a decorator and object spread operator syntax. Includes declaration of decorator variables, a decorated class export, and object spread assignment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emitHelpersWithLocalCollisions(module=nodenext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare var dec: any, __decorate: any;
@dec export class A {
}

const o = { a: 1 };
const y = { ...o };
```

----------------------------------------

TITLE: Defining Class with Private Field in TypeScript
DESCRIPTION: This snippet defines a class 'Foo' with a private field '#field' and a method 'f()' that uses the private field. It demonstrates the use of private fields in TypeScript, but results in compilation errors due to missing tslib helper functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importHelpersNoHelpersForPrivateFields.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export class Foo {
    #field = true;
    f() {
        this.#field = this.#field;
        #field in this;
    }
}
```

----------------------------------------

TITLE: TypeScript Import with Path Errors
DESCRIPTION: Import statements demonstrating errors with file extensions and import paths
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolutionCandidateFromPackageJsonField2(moduleresolution=bundler).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { a } from "foo/bar.ts";
import { b } from "baz/main.ts";
```

----------------------------------------

TITLE: Generic Type with Type Constraint Error
DESCRIPTION: Definition of a generic type Foo2 with type parameters T and F, demonstrating an error when attempting to use T as a key in a mapped type without a proper constraint.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeErrors.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
type Foo2<T, F extends keyof T> = {
    pf: {[P in F]?: T[P]},
    pt: {[P in T]?: T[P]}, // note: should be in keyof T
};
```

----------------------------------------

TITLE: Using React Component with Incorrect Props in TypeScript JSX
DESCRIPTION: Demonstrates incorrect usage of the MyComp component without providing required props, resulting in a TypeScript error TS2739.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxReactComponentWithDefaultTypeParameter3.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
let x1 = <MyComp />
```

----------------------------------------

TITLE: TS1016: Invalid Parameter Order in TypeScript/JavaScript
DESCRIPTION: This snippet demonstrates the TypeScript error TS1016.  The error occurs because the parameter 'c' is required (not optional) and it appears after the optional parameter 'b' in the function definition. TypeScript enforces that all required parameters must come before any optional parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocOptionalParamOrder.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
    // @ts-check
    /**
     * @param {number} a
     * @param {number} [b]
     * @param {number} c
     */
    function foo(a, b, c) {}
                       ~
!!! error TS1016: A required parameter cannot follow an optional parameter.
    
```

----------------------------------------

TITLE: Creating Union Type Variables
DESCRIPTION: Declares union type variables combining different class types to demonstrate type compatibility and property access limitations
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionTypePropertyAccessibility.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var v1: Default;
var v2: Public;
var v3: Protected;
var v4: Private;
var v5: Default | Public;
var v6: Default | Protected;
var v7: Default | Private;
var v8: Public | Protected;
var v9: Public | Private;
var v10: Protected | Private;
var v11: Default | Public | Protected;
var v12: Default | Public | Private;
var v13: Default | Protected | Private;
var v14: Public | Private | Protected;
var v15: Default | Public | Private | Protected;
```

----------------------------------------

TITLE: 'for await' Loop in Async Function with Expression
DESCRIPTION: This snippet demonstrates the correct usage of 'for await...of' loop within an async function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parser.forAwait.es2018.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
 "async function f8() {\n    let x: any, y: any;\n    for await (x of y) {\n    }\n}\n"
```

----------------------------------------

TITLE: Handling Type Errors for Union Types in TypeScript
DESCRIPTION: This snippet showcases errors related to assigning incompatible types in union types. It defines interfaces and declares variables, providing examples of type assignments that lead to TypeScript errors due to missing required properties in the assigned types. The expected output is a series of informative error messages indicating the exact nature of the type mismatches.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionTypeErrorMessageTypeRefs01.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Foo { foo: any }
interface Bar { bar: any }
interface Baz { baz: any }
interface Kwah { kwah: any }

// Interfaces A, B, and C
interface A<T> {
    aProp: T;
}
interface B<T> {
    bProp: T;
}
interface C<T> {
    cProp: T;
}

declare const a: A<Foo>;
declare const b: B<Foo>;
declare const c: C<Foo>;
declare let thingOfInterfaces: A<Bar> | B<Baz> | C<Kwah>;

thingOfInterfaces = a;
// ~~~~~~~~~~~~~~~~~
// !!! error TS2322: Type 'A<Foo>' is not assignable to type 'A<Bar> | B<Baz> | C<Kwah>'.
// !!! error TS2322:   Type 'A<Foo>' is not assignable to type 'A<Bar>'.
// !!! error TS2322:     Property 'bar' is missing in type 'Foo' but required in type 'Bar'.
// !!! related TS2728 unionTypeErrorMessageTypeRefs01.ts:2:17: 'bar' is declared here.

thingOfInterfaces = b;
// ~~~~~~~~~~~~~~~~~
// !!! error TS2322: Type 'B<Foo>' is not assignable to type 'A<Bar> | B<Baz> | C<Kwah>'.
// !!! error TS2322:   Type 'B<Foo>' is not assignable to type 'B<Baz>'.
// !!! error TS2322:     Property 'baz' is missing in type 'Foo' but required in type 'Baz'.
// !!! related TS2728 unionTypeErrorMessageTypeRefs01.ts:3:17: 'baz' is declared here.

thingOfInterfaces = c;
// ~~~~~~~~~~~~~~~~~
// !!! error TS2322: Type 'C<Foo>' is not assignable to type 'A<Bar> | B<Baz> | C<Kwah>'.
// !!! error TS2322:   Type 'C<Foo>' is not assignable to type 'C<Kwah>'.
// !!! error TS2322:     Property 'kwah' is missing in type 'Foo' but required in type 'Kwah'.
// !!! related TS2728 unionTypeErrorMessageTypeRefs01.ts:4:18: 'kwah' is declared here.
```

LANGUAGE: typescript
CODE:
```
type X<T> = {
    xProp: T;
}
type Y<T> = {
    yProp: T;
}
type Z<T> = {
    zProp: T;
}

declare const x: X<Foo>;
declare const y: Y<Foo>;
declare const z: Z<Foo>;
declare let thingOfTypeAliases: X<Bar> | Y<Baz> | Z<Kwah>;

thingOfTypeAliases = x;
// ~~~~~~~~~~~~~~~~~~
// !!! error TS2322: Type 'X<Foo>' is not assignable to type 'X<Bar> | Y<Baz> | Z<Kwah>'.
// !!! error TS2322:   Type 'X<Foo>' is not assignable to type 'X<Bar>'.
// !!! error TS2322:     Property 'bar' is missing in type 'Foo' but required in type 'Bar'.
// !!! related TS2728 unionTypeErrorMessageTypeRefs01.ts:2:17: 'bar' is declared here.

thingOfTypeAliases = y;
// ~~~~~~~~~~~~~~~~~~
// !!! error TS2322: Type 'Y<Foo>' is not assignable to type 'X<Bar> | Y<Baz> | Z<Kwah>'.
// !!! error TS2322:   Type 'Y<Foo>' is not assignable to type 'Y<Baz>'.
// !!! error TS2322:     Property 'baz' is missing in type 'Foo' but required in type 'Baz'.
// !!! related TS2728 unionTypeErrorMessageTypeRefs01.ts:3:17: 'baz' is declared here.

thingOfTypeAliases = z;
// ~~~~~~~~~~~~~~~~~~
// !!! error TS2322: Type 'Z<Foo>' is not assignable to type 'X<Bar> | Y<Baz> | Z<Kwah>'.
// !!! error TS2322:   Type 'Z<Foo>' is not assignable to type 'Z<Kwah>'.
// !!! error TS2322:     Property 'kwah' is missing in type 'Foo' but required in type 'Kwah'.
// !!! related TS2728 unionTypeErrorMessageTypeRefs01.ts:4:18: 'kwah' is declared here.
```

----------------------------------------

TITLE: Undefined Object Destructuring Assignment in TypeScript
DESCRIPTION: This code shows a TypeScript error arising from destructuring an `undefined` value. Destructuring assignment expects an object with properties, but here it receives `undefined` which is not an object, thus causing `TS2532: Object is possibly 'undefined'.`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringAssignabilityCheck.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    const {} = undefined; // error correctly
          ~~
!!! error TS2532: Object is possibly 'undefined'.
```

----------------------------------------

TITLE: Handling Unmatched Discriminants in TypeScript Discriminated Union Assignment
DESCRIPTION: This snippet shows a case where type S is not fully assignable to type T due to unmatched discriminants, resulting in a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithDiscriminatedUnion.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
namespace Example3 {
    type S = { a: 0 | 2, b: 4 };
    type T = { a: 0,     b: 1 | 4 }     // T0
           | { a: 1,     b: 2 | 4 }     // T1
           | { a: 2,     b: 3 };        // T2
    declare let s: S;
    declare let t: T;

    // S is assignable to T0 when S["a"] is 0
    // S is *not* assignable to T1 when S["b"] is 4
    // S is *not* assignable to T2 when S["a"] is 2
    t = s;
}
```

----------------------------------------

TITLE: TypeScript Function Declaration Error: Mismatched Implementation Name
DESCRIPTION: This code demonstrates a TypeScript error (TS2389) that occurs when a function implementation has a different name than its declaration. In this example, the function 'foo' is declared but the implementation uses the name 'bar', which causes a compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/FunctionDeclaration6.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
{
    function foo();
    function bar() { }
}
```

----------------------------------------

TITLE: Generic Class with String Indexer Constraints in TypeScript
DESCRIPTION: Definition of a generic class A<T> where T extends Derived and the class has a string indexer returning type T. This demonstrates stronger type constraints on indexers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithStringIndexer3.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
module Generics {
    class A<T extends Derived> {
        [x: string]: T;
    }
   
    function foo<T extends Derived>() {
        var a: A<T>;
        var b: { [x: string]: string; }
        a = b; // error
        b = a; // error
    }
}
```

----------------------------------------

TITLE: Interface with This Type Declarations
DESCRIPTION: Interface definition showing various 'this' type declarations including void, structural, and self-referential types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisTypeInFunctions.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface I {
    a: number;
    explicitVoid1(this: void): number;
    explicitVoid2(this: void): number;
    explicitStructural(this: {a: number}): number;
    explicitInterface(this: I): number;
    explicitThis(this: this): number;
}
```

----------------------------------------

TITLE: Interface Definition and Re-export (a.ts)
DESCRIPTION: Defines an interface, imports a value from another module, and re-exports it. Shows interface implementation and value usage.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowImportClausesToMergeWithTypes.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export default interface zzz {
    x: string;
}

import zzz from "./b";

const x: zzz = { x: "" };
zzz;

export { zzz as default };
```

----------------------------------------

TITLE: Demonstrating TypeScript Function Overload Implementation Errors
DESCRIPTION: This code snippet showcases two TypeScript compiler errors: one for an incorrect function implementation name, and another for a missing function implementation. It illustrates common mistakes in function overloading.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionOverloadImplementationOfWrongName2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function foo(x);
function bar() { }
function foo(x, y);
```

----------------------------------------

TITLE: TypeScript Interface Definition
DESCRIPTION: Defines a TypeScript interface 'Foo' with a single numeric property 'a'
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importTag4.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export interface Foo {
    a: number;
}
```

----------------------------------------

TITLE: Defining TypeScript Module m2
DESCRIPTION: This snippet defines a TypeScript module named 'm2'. Similar to 'm1', it exports a variable `m2_a1`, a class `m2_c1`, an instance of the class `m2_instance1`, and a function `m2_f1`. This module demonstrates a similar structure for another independent module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootRelativePathModuleMultifolderSpecifyOutputFile/node/sourceRootRelativePathModuleMultifolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export var m2_a1 = 10;
export class m2_c1 {
    public m2_c1_p1: number;
}

export var m2_instance1 = new m2_c1();
export function m2_f1() {
    return m2_instance1;
}
```

----------------------------------------

TITLE: Implementing the IHashTable Interface in TypeScript
DESCRIPTION: This interface declares methods for a hash table object, outlining functionalities for key management, including adding, updating, mapping, and querying keys.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserRealSource4.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export interface IHashTable {
    getAllKeys(): string[];
    add(key: string, data): boolean;
    addOrUpdate(key: string, data): boolean;
    map(fn: (k: string, v, c) => void , context): void;
    every(fn: (k: string, v, c) => boolean, context): boolean;
    some(fn: (k: string, v, c) => boolean, context): boolean;
    count(): number;
    lookup(key: string): any;
}
```

----------------------------------------

TITLE: Defining Functions with Type Annotations in mod.js
DESCRIPTION: This snippet shows the definition of functions 'f', 'g', 'h', and 'i' in 'mod.js' with specific type annotations using JSDoc comments.  Functions 'f' and 'g' are defined to accept a number as input, while functions 'h' and 'i' are defined to accept a string. These type annotations are what the Typescript compiler uses to validate type correctness.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocTypeFromChainedAssignment2.errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
    /** @param {number} n */
    exports.f = exports.g = function fg(n) {
        return n + 1
    }
    /** @param {string} mom */
    module.exports.h = module.exports.i = function hi(mom) {
        return `hi, ${mom}!`;
    }
```

----------------------------------------

TITLE: Error with Unconstrained Generic Type in React Component Props
DESCRIPTION: This code shows a type error when spreading an unconstrained generic type into a component that requires specific properties. The generic type T needs constraints to ensure it has the required properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentsWithTypeArguments2.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function Baz<T>(arg: T) {
    let a0 = <ComponentSpecific1 {...arg} />
}
```

----------------------------------------

TITLE: For Loop for Processing Robots in TypeScript
DESCRIPTION: This snippet uses a for loop to iterate through a collection of robots. The loop utilizes an index variable `_48` and operates on the `robots` array, showcasing how to structure iteration in TypeScript for processing items in an array.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_17

LANGUAGE: typescript
CODE:
```
for (var _48 = 0, robots_2 = robots; _48 < robots_2.length; _48++) {
```

----------------------------------------

TITLE: Defining Interface and Function with Type Errors in TypeScript
DESCRIPTION: This code defines an interface 'Stuff' with methods returning Promises, and a function 'foo' that attempts to implement this interface. However, it contains multiple type errors where non-Promise values are incorrectly assigned to Promise-typed properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/errorOnUnionVsObjectShouldDeeplyDisambiguate2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Stuff {
  a?: () => Promise<number[]>;
  b: () => Promise<string>;
  c: () => Promise<string>;
  d: () => Promise<string>;
  e: () => Promise<string>;
  f: () => Promise<string>;
  g: () => Promise<string>;
  h: () => Promise<string>;
  i: () => Promise<string>;
  j: () => Promise<string>;
  k: () => Promise<number>;
}

function foo(): Stuff | Date {
  return {
    a() { return [123] },
    b: () => "hello",
    c: () => "hello",
    d: () => "hello",
    e: () => "hello",
    f: () => "hello",
    g: () => "hello",
    h: () => "hello",
    i: () => "hello",
    j: () => "hello",
    k: () => 123
  }
}
```

----------------------------------------

TITLE: Class Property Declaration with Function Type
DESCRIPTION: Example of class C1T5 with a function property declaration and implementation
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class C1T5 {
    foo: (i: number, s: string) => number = function(i) {
        return i;
    }
}
```

----------------------------------------

TITLE: Module Usage and Imports (usage.ts)
DESCRIPTION: Demonstrates usage of imported types and modules with type annotations. Contains several compilation errors due to missing modules and undefined members.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importTypeLocalMissing.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export const x: import("./fo") = { x: 0, y: 0 };
export let y: import("./fo2").Bar.I = { a: "", b: 0 };
export let z: import("./foo2").Bar.Q = { a: "", b: 0 };

export class Bar2 {
    item: {a: string, b: number, c: object};
    constructor(input?: any) {}
}

export let shim: typeof import("./fo2") = {
    Bar: Bar2
};
```

----------------------------------------

TITLE: Arrow Function with Implicit Any[] Rest Parameter
DESCRIPTION: A private class method using an arrow function with a rest parameter that lacks type annotation. This generates an implicit 'any[]' type error for the rest parameter 'r'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyParametersInClass.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
private priv_f13 = (...r) => "";
```

----------------------------------------

TITLE: Defining JSX Interfaces in TypeScript
DESCRIPTION: This snippet declares the JSX namespace and defines essential interfaces for JSX elements. It sets up the basic structure for using JSX in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxElementResolution11.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare module JSX {
	interface Element { }
	interface ElementAttributesProperty { }
	interface IntrinsicElements { }
}
```

----------------------------------------

TITLE: Defining Static Class Members in TypeScript
DESCRIPTION: Demonstrates initialization of static class members with reference to 'this' and inheritance constraints
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeOfThisInStaticMembers3(target=es5).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    static a = 1;
    static b = this.a + 1;
}
```

----------------------------------------

TITLE: ES Module Import Statement - TypeScript
DESCRIPTION: Module import statement attempting to import a default export that doesn't exist, resulting in a TypeScript compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esmModeDeclarationFileWithExportAssignment.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import example from "./other.mjs";
example();
```

----------------------------------------

TITLE: String Types with Branded Tags
DESCRIPTION: Shows how TypeScript handles string types combined with branding through const enum tags. These combinations create unique types that maintain compatibility with their base string type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionReduction.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
const enum Tag1 {}
const enum Tag2 {}

declare let s1: string & Tag1;
declare let s2: string & Tag2;

declare let t1: string & Tag1 | undefined;
declare let t2: string & Tag2 | undefined;

s1 = s2;
s2 = s1;

t1 = t2;
t2 = t1;
```

----------------------------------------

TITLE: Configuring Package as ES Module
DESCRIPTION: This package.json snippet sets the project's module type to 'module', indicating that the project uses ECMAScript Modules by default. It also marks the package as private.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsImportHelpersCollisions3(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: JSON
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Invalid For-Of Loop Type Annotation in TypeScript
DESCRIPTION: Example of incorrect for...of loop syntax where a type annotation is used on the loop variable and an undefined variable X is referenced. This generates two TypeScript compiler errors: TS2483 and TS2304.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserForOfStatement5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
for (var a: number of X) {
}
```

----------------------------------------

TITLE: Defining an Interface with Index Signature
DESCRIPTION: This snippet shows a TypeScript interface definition that incorrectly uses a boolean as an index signature parameter type, which is invalid. The interface 'I' attempts to define an index signature with a boolean type for its key, resulting in a TypeScript error. It highlights the need for index signature parameter types to be of 'string', 'number', 'symbol', or a template literal type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserIndexSignature6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I {
  [a:boolean]
   ~
}
```

----------------------------------------

TITLE: Interface with Generic Type and Property Access Errors
DESCRIPTION: This snippet defines an interface `I` with a generic type parameter constrained to `Date`. It demonstrates attempts to call a non-existent property 'notHere' on the `foo` property of an `I<Date>` instance, resulting in TypeScript compile-time errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertyAccessOnTypeParameterWithConstraints4.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface I<T extends Date> {
        foo: T;
    }
    var i: I<Date>;
    var r2 = i.foo.notHere();
                   ~~~~~~~
!!! error TS2339: Property 'notHere' does not exist on type 'Date'.
    var r2b = i.foo['notHere']();
```

----------------------------------------

TITLE: Error Handling in TypeScript - CommonJS Format - subfolder/index.cts
DESCRIPTION: This snippet captures the same errors as the index.cts, including specific recommendations for syntax corrections required in a CommonJS TypeScript file using .cts extension.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesForbidenSyntax(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// cjs format file
const x = <T>() => <T><any>(void 0);
export {x};
```

----------------------------------------

TITLE: Using Static Index Signatures in TypeScript Classes with Type Constraints
DESCRIPTION: A TypeScript example showing a class with static index signatures for both string and numeric indices. It demonstrates type checking for these indices, with the error occurring when attempting to assign the value '2' to a numeric index that requires type '42'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/staticIndexSignature1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    static [s: string]: number;
    static [s: number]: 42
}

C["foo"] = 1
C.bar = 2;
const foo = C["foo"]
C[42] = 42
C[2] = 2;
const bar = C[42]
```

----------------------------------------

TITLE: Generator Function with Implicit Return Type in Generic Context
DESCRIPTION: Demonstrates a generator function passed to f4 with an explicit unknown yield type but an implicit return type, causing an error for the implicit 'any' return type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implicitAnyGenericTypeInference.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
declare function f4<T>(cb: () => Generator<unknown, T>): void;
f4(function* () { return null; });
```

----------------------------------------

TITLE: Handling Missing Return Type Annotations in TypeScript
DESCRIPTION: This snippet showcases a static arrow function where the TypeScript compiler requires an explicit return type annotation due to isolated declarations settings. The function serves as an example of proper syntax usage when defining arrow functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedDeclarationErrorsReturnTypes.errors.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
static fnStaticArrow = (cb = function(){ }) => "S";
```

----------------------------------------

TITLE: Importing and Extending Module Definitions
DESCRIPTION: Demonstrates module import, local class definition, and referencing external module types
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlModuleSimpleSpecifyOutputFile/node/maprootUrlModuleSimpleSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import m1 = require("m1");
export var a1 = 10;
export class c1 {
    public p1: number;
}

export var instance1 = new c1();
export function f1() {
    return instance1;
}

export var a2 = m1.m1_c1;
```

----------------------------------------

TITLE: package.json Configuration for CommonJS
DESCRIPTION: This JSON snippet defines a `package.json` file that specifies the module type as 'commonjs'. This setting informs Node.js to treat the JavaScript files in that directory as CommonJS modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesGeneratedNameCollisions(module=nodenext).errors.txt#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
"{
    \"type\": \"commonjs\"
}"
```

----------------------------------------

TITLE: Checking Subtypes of Type Parameters in TypeScript
DESCRIPTION: This snippet defines a base class 'C3' and a derived class 'D1', illustrating how a type parameter 'U' cannot replace 'T' in 'foo'. It generates a TypeScript error indicating that 'U' is not assignable to 'T'. The snippet shows the significance of type constraints in class inheritance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypesOfTypeParameter.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// checking whether other types are subtypes of type parameters

class C3<T> {
    foo: T;
}

class D1<T, U> extends C3<T> {
    foo: U; // error
    ~~~
!!! error TS2416: Property 'foo' in type 'D1<T, U>' is not assignable to the same property in base type 'C3<T>'.
!!! error TS2416:   Type 'U' is not assignable to type 'T'.
!!! error TS2416:     'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.
!!! related TS2208 subtypesOfTypeParameter.ts:7:13: This type parameter might need an `extends T` constraint.
}
```

----------------------------------------

TITLE: Assigning Function Returning Object Literal in TypeScript
DESCRIPTION: This snippet assigns a function to the 't4' property of 'objc8'. The function returns an empty object literal cast to the 'IFoo' interface.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
objc8.t4 = function() { return <IFoo>({}); };
```

----------------------------------------

TITLE: Initializing Readonly Tuple in TypeScript
DESCRIPTION: Demonstrates the creation of a readonly tuple using the 'as const' assertion. This creates a tuple with specific numeric values that cannot be modified.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/readonlyTupleAndArrayElaboration.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
let point = [3, 4] as const;
```

----------------------------------------

TITLE: JSON Package Configuration
DESCRIPTION: Example package.json configurations for JSON module exports with ECMAScript module type
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesJson(module=node18).errors.txt#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "name": "not.json",
  "version": "1.0.0",
  "type": "module",
  "exports": "./index.js"
}
```

----------------------------------------

TITLE: Handling Subtypes in TypeScript
DESCRIPTION: This snippet defines various TypeScript structures like enums, interfaces, and classes, and explores their compatibility as subtypes of union types. It provides examples of properties that fail to conform to the expected union type, yielding TypeScript compiler errors. Key elements include string, number, and enum types along with more complex structures like classes, functions, and modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypesOfUnion.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    enum E { e1, e2 }
    interface I8 { [x: string]: number[]; }
    class A { foo: number; }
    class A2<T> { foo: T; }
    function f() { }
    module f { export var bar = 1; }
    class c { baz: string }
    module c { export var bar = 1; }
    
    // A type T is a subtype of a union type U if T is a subtype of any type in U.
    interface I1<T> {
        [x: string]: string | number;
        foo: any; // ok
        foo2: string; // ok
        foo3: number; // ok
        foo4: boolean; // error 
        ~~~~
!!! error TS2411: Property 'foo4' of type 'boolean' is not assignable to 'string' index type 'string | number'.
        foo5: E; // ok - subtype of number 
        foo6: Date; // error
        ~~~~
!!! error TS2411: Property 'foo6' of type 'Date' is not assignable to 'string' index type 'string | number'.
        foo7: RegExp; // error
        ~~~~
!!! error TS2411: Property 'foo7' of type 'RegExp' is not assignable to 'string' index type 'string | number'.
        foo8: { bar: number }; // error
        ~~~~
!!! error TS2411: Property 'foo8' of type '{ bar: number; }' is not assignable to 'string' index type 'string | number'.
        foo9: I8; // error
        ~~~~
!!! error TS2411: Property 'foo9' of type 'I8' is not assignable to 'string' index type 'string | number'.
        foo10: A; // error
        ~~~~~
!!! error TS2411: Property 'foo10' of type 'A' is not assignable to 'string' index type 'string | number'.
        foo11: A2<number>; // error
        ~~~~~
!!! error TS2411: Property 'foo11' of type 'A2<number>' is not assignable to 'string' index type 'string | number'.
        foo12: (x) => number; //error
        ~~~~~
!!! error TS2411: Property 'foo12' of type '(x: any) => number' is not assignable to 'string' index type 'string | number'.
        foo13: <T>(x: T) => T; // error
        ~~~~~
!!! error TS2411: Property 'foo13' of type '<T>(x: T) => T' is not assignable to 'string' index type 'string | number'.
        foo14: typeof f; // error
        ~~~~~
!!! error TS2411: Property 'foo14' of type 'typeof f' is not assignable to 'string' index type 'string | number'.
        foo15: typeof c; // error
        ~~~~~
!!! error TS2411: Property 'foo15' of type 'typeof c' is not assignable to 'string' index type 'string | number'.
        foo16: T; // error
        ~~~~~
!!! error TS2411: Property 'foo16' of type 'T' is not assignable to 'string' index type 'string | number'.
        foo17: Object; // error
        ~~~~~
!!! error TS2411: Property 'foo17' of type 'Object' is not assignable to 'string' index type 'string | number'.
        foo18: {}; // error
        ~~~~~
!!! error TS2411: Property 'foo18' of type '{}' is not assignable to 'string' index type 'string | number'.
    }
    interface I2<T> {
        [x: string]: E | number;
        foo: any; // ok
        foo2: string; // error
        ~~~~
!!! error TS2411: Property 'foo2' of type 'string' is not assignable to 'string' index type 'number'.
        foo3: number; // ok
        foo4: boolean; // error 
        ~~~~
!!! error TS2411: Property 'foo4' of type 'boolean' is not assignable to 'string' index type 'number'.
        foo5: E; // ok
        foo6: Date; // error
        ~~~~
!!! error TS2411: Property 'foo6' of type 'Date' is not assignable to 'string' index type 'number'.
        foo7: RegExp; // error
        ~~~~
!!! error TS2411: Property 'foo7' of type 'RegExp' is not assignable to 'string' index type 'number'.
        foo8: { bar: number }; // error
        ~~~~
!!! error TS2411: Property 'foo8' of type '{ bar: number; }' is not assignable to 'string' index type 'number'.
        foo9: I8; // error
        ~~~~
!!! error TS2411: Property 'foo9' of type 'I8' is not assignable to 'string' index type 'number'.
        foo10: A; // error
        ~~~~~
!!! error TS2411: Property 'foo10' of type 'A' is not assignable to 'string' index type 'number'.
        foo11: A2<number>; // error
        ~~~~~
!!! error TS2411: Property 'foo11' of type 'A2<number>' is not assignable to 'string' index type 'number'.
        foo12: (x) => number; //error
        ~~~~~
!!! error TS2411: Property 'foo12' of type '(x: any) => number' is not assignable to 'string' index type 'number'.
        foo13: <T>(x: T) => T; // error
        ~~~~~
!!! error TS2411: Property 'foo13' of type '<T>(x: T) => T' is not assignable to 'string' index type 'number'.
        foo14: typeof f; // error
        ~~~~~
!!! error TS2411: Property 'foo14' of type 'typeof f' is not assignable to 'string' index type 'number'.
        foo15: typeof c; // error
        ~~~~~
!!! error TS2411: Property 'foo15' of type 'typeof c' is not assignable to 'string' index type 'number'.
        foo16: T; // error
        ~~~~~
!!! error TS2411: Property 'foo16' of type 'T' is not assignable to 'string' index type 'number'.
        foo17: Object; // error
        ~~~~~
!!! error TS2411: Property 'foo17' of type 'Object' is not assignable to 'string' index type 'number'.
        foo18: {}; // error
        ~~~~~
!!! error TS2411: Property 'foo18' of type '{}' is not assignable to 'string' index type 'number'.
    }
```

----------------------------------------

TITLE: Base and Derived Class This Type Inheritance
DESCRIPTION: Demonstrates inheritance behavior with 'this' types in base and derived classes, including polymorphic and explicit this declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisTypeInFunctions.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class Base1 {
    x: number;
    public polymorphic(this: this): number { return this.x; }
    explicit(this: Base1): number { return this.x; }
    static explicitStatic(this: typeof Base1): number { return this.y; }
    static y: number;
}
class Derived1 extends Base1 {
    y: number
}
```

----------------------------------------

TITLE: Inline Object Destructuring with Direct Assignment
DESCRIPTION: Advanced destructuring technique showing inline object creation and simultaneous property extraction in a single statement.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatement1.sourcemap.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
var c, _a = { name: "Edger", skill: "cutting edges" }, nameC = _a.name, skillC = _a.skill;
```

----------------------------------------

TITLE: Instantiating Generic Classes with Incorrect Arguments in TypeScript
DESCRIPTION: This snippet demonstrates instantiating the generic class `D2` with an incorrect number of arguments. TypeScript's type checking catches these errors, ensuring the correct number and types of arguments are passed to the constructors of generic classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassWithoutExplicitConstructor3.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
    "var d = new D2(); // error
            ~~~~~~~~
!!! error TS2554: Expected 2 arguments, but got 0.
!!! related TS6210 derivedClassWithoutExplicitConstructor3.ts:32:17: An argument for 'y' was not provided.
    var d2 = new D2(new Date()); // error
             ~~~~~~~~~~~~~~~~~~
!!! error TS2554: Expected 2 arguments, but got 1.
!!! related TS6210 derivedClassWithoutExplicitConstructor3.ts:32:23: An argument for 'z' was not provided.
    var d3 = new D2(new Date(), new Date()); // ok"
```

----------------------------------------

TITLE: Implementing Interface I with Correct Generic Type (Unconstrained)
DESCRIPTION: The class `Z` correctly implements the interface `I` by using an unconstrained generic type `T`. Since the interface expects a function that can return *any* type extending `A`, a function that can return *any* type is a valid implementation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericImplements.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
// OK
class Z implements I {
    f<T>(): T { return undefined; }
} // { f: <T>() => T }
```

----------------------------------------

TITLE: Class Constructor with Type-Checked Property
DESCRIPTION: Defines a class C with a number parameter and demonstrates TypeScript type checking on property assignment. Shows error when assigning undefined to a number-typed property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constructorFunctionsStrict.errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
/** @param {number} x */
function C(x) {
    this.x = x
}
C.prototype.m = function() {
    this.y = 12
}
var c = new C(1)
c.x = undefined // should error
c.y = undefined // ok
```

----------------------------------------

TITLE: Defining Function Overloads in TypeScript
DESCRIPTION: This snippet demonstrates the definition of function overloads in TypeScript and highlights an error TS2389 indicating that the implementation name does not match the declared overloads. The required function name must be consistent across all overloads. In this case, 'foo' is correctly declared, but an error arises because the implementation references 'bar', which is not valid.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionOverloadImplementationOfWrongName.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo(x);
function foo(x, y);
function bar() { }
             ~~~
!!! error TS2389: Function implementation name must be 'foo'.
```

----------------------------------------

TITLE: Using Const Assertions with Template Literals in TypeScript
DESCRIPTION: This snippet shows how const assertions can be used with template literals, including nested template expressions. It demonstrates the creation of string literal types from const-asserted template literals.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constAssertions.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
let t1 = 'foo' as const;
let t2 = 'bar' as const;
let t3 = `${t1}-${t2}` as const;
let t4 = `${`(${t1})`}-${`(${t2})`}` as const;
```

----------------------------------------

TITLE: Defining Union Type with Call Signatures in TypeScript
DESCRIPTION: Demonstrates type interfaces with different this contexts and call signatures, leading to a type compatibility error when attempting to call the function
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionTypeCallSignatures5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface A {
  (this: void, b?: number): void;
}
interface B {
  (this: number, b?: number): void;
}
interface C {
  (i: number): void;
}
declare const fn: A | B | C;
fn(0);
```

----------------------------------------

TITLE: Equality and Inequality Operators with Incompatible Types in TypeScript
DESCRIPTION: This code demonstrates TypeScript's type checking system identifying potentially unintentional comparisons between incompatible types. The examples show various function signatures that appear similar but have no overlap according to TypeScript's type system, leading to TS2367 errors when using comparison operators.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/comparisonOperatorWithNoRelationshipObjectsOnCallSignature.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
var r5b2 = b2 == a2;
var r5b3 = b3 == a3;
var r5b4 = b4 == a4;
var r5b5 = b5 == a5;
var r5b6 = b6 == a6;
var r5b7 = b7 == a7;

// operator !=
var r6a1 = a1 != b1;
var r6a2 = a2 != b2;
var r6a3 = a3 != b3;
var r6a4 = a4 != b4;
var r6a5 = a5 != b5;
var r6a6 = a6 != b6;
var r6a7 = a7 != b7;

var r6b1 = b1 != a1;
var r6b2 = b2 != a2;
var r6b3 = b3 != a3;
var r6b4 = b4 != a4;
var r6b5 = b5 != a5;
var r6b6 = b6 != a6;
var r6b7 = b7 != a7;

// operator ===
var r7a1 = a1 === b1;
var r7a2 = a2 === b2;
var r7a3 = a3 === b3;
var r7a4 = a4 === b4;
var r7a5 = a5 === b5;
var r7a6 = a6 === b6;
var r7a7 = a7 === b7;

var r7b1 = b1 === a1;
var r7b2 = b2 === a2;
var r7b3 = b3 === a3;
var r7b4 = b4 === a4;
var r7b5 = b5 === a5;
var r7b6 = b6 === a6;
var r7b7 = b7 === a7;

// operator !==
var r8a1 = a1 !== b1;
var r8a2 = a2 !== b2;
var r8a3 = a3 !== b3;
var r8a4 = a4 !== b4;
var r8a5 = a5 !== b5;
var r8a6 = a6 !== b6;
var r8a7 = a7 !== b7;

var r8b1 = b1 !== a1;
var r8b2 = b2 !== a2;
var r8b3 = b3 !== a3;
var r8b4 = b4 !== a4;
var r8b5 = b5 !== a5;
var r8b6 = b6 !== a6;
var r8b7 = b7 !== a7;
```

----------------------------------------

TITLE: Property Access on Index Signature Interface
DESCRIPTION: Demonstrates accessing properties dynamically on an interface with a string index signature, including literal and non-literal keys
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertyAccessStringIndexSignatureNoImplicitAny.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
let flags: Flags;
flags.b;
flags.f;
flags.isNotNecessarilyNeverFalse;
flags['this is fine'];
```

----------------------------------------

TITLE: Switch Case Example with Boolean in TypeScript
DESCRIPTION: This function uses a switch statement to return different values based on a boolean input. It includes an unreachable code block at the end, which raises a compile-time error for unreachable code detection.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assertionsAndNonReturningFunctions.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
/**
 * @param {boolean} b 
 */
function f2(b) {
    switch (b) {
        case true: return 1;
        case false: return 0;
    }
    b;  // Unreachable
    ~~
!!! error TS7027: Unreachable code detected.
}
```

----------------------------------------

TITLE: Importing Module in TypeScript
DESCRIPTION: This TypeScript file attempts to import from the 'pkg' module, which results in a module resolution error due to the non-standard export configuration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/node10AlternateResult_noResolution.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { pkg } from "pkg";
```

----------------------------------------

TITLE: TypeScript CJS Definition File
DESCRIPTION: CJS format TypeScript definition file (.d.cts) importing and exporting modules from different subdirectories without circular import issues.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExports(module=nodenext).errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
// cjs format file
import * as cjs from "inner/cjs/index";
import * as mjs from "inner/mjs/index";
import * as type from "inner/js/index";
export { cjs };
export { mjs };
export { type };
```

----------------------------------------

TITLE: Demonstrate TypeScript Namespace Type Error
DESCRIPTION: Attempts to use the `Outer` namespace as a type for the variable `x4`. This results in a TypeScript error (TS2709) because namespaces cannot be directly used as types in this manner. It highlights that namespaces primarily serve as containers for types and values, but are not types themselves.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeofInternalModules.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
var x4: Outer = Outer;
            ~~~~~
!!! error TS2709: Cannot use namespace 'Outer' as a type.
```

----------------------------------------

TITLE: Destructuring Array and Variable Assignment in TypeScript
DESCRIPTION: This snippet demonstrates how to destructure values from an array into distinct variables. The function extracts 'numberA3' from 'robotA' and stores the rest in 'robotAInfo'. It simplifies accessing array elements and enhances code readability.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPattern.sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var numberA3 = robotA[0], robotAInfo = robotA.slice(1);
```

LANGUAGE: typescript
CODE:
```
let [numberA3, ...robotAInfo] = robotA;
```

----------------------------------------

TITLE: Class Inheritance and Array Type Checking in TypeScript
DESCRIPTION: This snippet shows type checking with class inheritance and arrays. It defines Animal and Giraffe classes, then demonstrates assignability issues between arrays of these types and object properties containing such arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeMatch2.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
class Animal { private a; }
class Giraffe extends Animal { private g; }

function f2() {
    var a = new Animal();
    var g = new Giraffe();
    var aa = [ a, a, a ];
    var gg = [ g, g, g ];
    aa = gg;
    gg = aa; // error
    var xa = { f1: 5, f2: aa };
    var xb = { f1: 5, f2: gg };
    xa = xb; // Should be ok
    xb = xa; // Not ok
}
```

----------------------------------------

TITLE: Declaring and Assigning Functions with Rest Parameters in TypeScript
DESCRIPTION: This code snippet demonstrates declaring and assigning functions that utilize rest parameters in TypeScript. It shows different ways to handle rest parameters including spreading and fixing errors related to type compatibility. It involves generic functions and compatibility issues with providing matching signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericRestParameters1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare let f1: (...x: [number, string, boolean]) => void;
declare let f2: (x0: number, x1: string, x2: boolean) => void;

f1 = f2;
f2 = f1;

declare const t3: [number, string, boolean];
declare const t2: [string, boolean];
declare const t1: [boolean];
declare const t0: [];

declare const ns: [number, string];
declare const sn: [string, number];

f1(42, "hello", true);
f1(t3[0], t3[1], t3[2]);
f1(...t3);
f1(42, ...t2);
f1(42, "hello", ...t1);
f1(42, "hello", true, ...t0);
f1(ns[0], ns[1], true);
f1(...ns, true);  // FIXME: Error, since ...ns is considered as string|number here

f2(42, "hello", true);
f2(t3[0], t3[1], t3[2]);
f2(...t3);
f2(42, ...t2);
f2(42, "hello", ...t1);
f2(42, "hello", true, ...t0);
f2(ns[0], ns[1], true);
f2(...ns, true);  // FIXME: Error, since ...ns is considered as string|number here

declare function f10<T extends unknown[]>(...args: T): T;
```

----------------------------------------

TITLE: Import.meta Usage in Module Context in TypeScript
DESCRIPTION: This snippet shows various attempts to use import.meta in a module context, including incorrect property access and invalid meta-properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importMeta(module=es2020,target=es5).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export let x = import.meta;
export let y = import.metal;
export let z = import.import.import.malkovich;
```

----------------------------------------

TITLE: Defining JSX Interfaces and Type Checking in TypeScript
DESCRIPTION: Demonstrates JSX module declaration with interface definitions for Element and IntrinsicElements. Shows type checking with generic functions and spread operators, including various error cases for property type mismatches and missing required properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxAttributeResolution5.errors.txt#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
declare module JSX {
	interface Element { }
	interface IntrinsicElements {
		test1: Attribs1;
		test2: Attribs2;
	}
}
interface Attribs1 {
	x: string;
}

interface Attribs2 {
	toString(): string;
}

function make1<T extends {x: string}> (obj: T) {
	return <test1 {...obj} />; // OK
}

function make2<T extends {x: number}> (obj: T) {
	return <test1 {...obj} />; // Error (x is number, not string)
}

function make3<T extends {y: string}> (obj: T) {
	return <test1 {...obj} />; // Error, missing x
}


<test1 {...{}} />; // Error, missing x
<test2 {...{}} />; // Error, missing toString
```

----------------------------------------

TITLE: Async Function Declaration with Invalid Return Type (Object)
DESCRIPTION: This snippet defines an async function `fn2` with a declared return type of `{}`. TypeScript throws an error because async functions must return a Promise.  It also throws an error because the function doesn't return a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncFunctionDeclaration15_es6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
async function fn2(): { } { }
```

----------------------------------------

TITLE: Extending Class with Private Constructor in TypeScript
DESCRIPTION: This snippet demonstrates an attempt to extend a class 'abc.XYZ' that has a private constructor, which results in a TypeScript compilation error. The error highlights that a class with a private constructor cannot be extended.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/extendPrivateConstructorClass.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare namespace abc {
    class XYZ {
        private constructor();
    }
}

class C extends abc.XYZ {
}

```

----------------------------------------

TITLE: Object Type Satisfaction in JavaScript
DESCRIPTION: This snippet checks whether JavaScript objects conform to specified types, using inline JSDoc comments to define the expected structure. The first object satisfies the type requirement, while the second object triggers a TypeScript error due to a mismatch in expected properties. No external dependencies are specified, and the focus is on property names and types. The snippet highlights the need for the property 'f' as a function mapping strings to strings.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocSatisfiesTag13.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
/** @satisfies {{ f: (x: string) => string }} */
const t1 = { f: s => s.toLowerCase() }; // should work

/** @satisfies {{ f: (x: string) => string }} */
const t2 = { g: "oops" }; // should error
             ~
```

----------------------------------------

TITLE: Namespace Import Error Examples in TypeScript
DESCRIPTION: Demonstrates various error cases with namespace imports including duplicate namespace bindings and conflicts with local declarations. Shows how TypeScript handles namespace import conflicts and duplicate identifier errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ImportNameSpaceImportMergeErrors.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import * as nameSpaceBinding from "./es6ImportNameSpaceImportMergeErrors_0"; 
interface nameSpaceBinding { } // this should be ok

import * as nameSpaceBinding1 from "./es6ImportNameSpaceImportMergeErrors_0"; // should be error
import * as nameSpaceBinding1 from "./es6ImportNameSpaceImportMergeErrors_0"; // should be error

import * as nameSpaceBinding3 from "./es6ImportNameSpaceImportMergeErrors_0"; // should be error
var nameSpaceBinding3 = 10;
```

----------------------------------------

TITLE: Defining Helper Types for Type Inference in TypeScript
DESCRIPTION: This snippet defines helper types `InferValueFromObjectType`, `FieldResolver`, and `FieldFuncArgs` to assist with type inference when working with `ObjectType` and `Field`. `InferValueFromObjectType` extracts the source type from an `ObjectType`.  `FieldResolver` defines the structure of a function that resolves a field's value from a source. `FieldFuncArgs` encapsulates the arguments needed for defining a field, including the type and resolver.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/circularReferenceInReturnType2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    type InferValueFromObjectType<Type extends ObjectType<any>> =
      Type extends ObjectType<infer Source> ? Source : never;
    
    type FieldResolver<Source, TType extends ObjectType<any>> = (
      source: Source
    ) => InferValueFromObjectType<TType>;
    
    type FieldFuncArgs<Source, Type extends ObjectType<any>> = {
      type: Type;
      resolve: FieldResolver<Source, Type>;
    };
```

----------------------------------------

TITLE: Async Type Conversion and Arithmetic Operations in TypeScript
DESCRIPTION: This snippet defines several async functions (h1, h2, h3, h4) that demonstrate different approaches to type conversion and arithmetic operations within async contexts. It showcases TypeScript's type inference and checking capabilities in complex async scenarios.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowIterationErrorsAsync.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
async function asNumber(x: string | number): Promise<number> {
    return +x;
}

async function h1() {
    let x: string | number | boolean;
    x = "0";
    while (cond) {
        x = +x + 1;
        x;
    }
}

async function h2() {
    let x: string | number | boolean;
    x = "0";
    while (cond) {
        x = await asNumber(x) + 1;
        x;
    }
}
```

----------------------------------------

TITLE: Basic Generic Function with Index Access in TypeScript
DESCRIPTION: Two simple generic functions that access object properties using index signatures. The first uses direct keyof T type, while the second uses a more constrained K extends keyof T parameter.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRelationships.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f1<T>(x: T, k: keyof T) {
    return x[k];
}

function f2<T, K extends keyof T>(x: T, k: K) {
    return x[k];
}
```

----------------------------------------

TITLE: Iterating with Destructuring using getMultiRobots() in TypeScript
DESCRIPTION: This code demonstrates another `for...of` loop using the return value of `getMultiRobots()`. Destructuring is used to extract the `primary` and `secondary` skills from each object. This shows the emitted JavaScript and source mappings for this particular destructuring for loop.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
>>>for (var _g = 0, _h = getMultiRobots(); _g < _h.length; _g++) {
1->
2 >^^^^^
3 >     ^^^^^^^^^^
4 >               ^^
5 >                 ^^^^^
6 >                      ^^^^^^^^^^^^^^
7 >                                    ^^
8 >                                      ^^
9 >                                        ^^^^^^^^^^^^^^
10>                                                      ^^
11>                                                        ^^^^
12>                                                            ^^
13>                                                              ^
14>                                                               ^^^^^^^^^^^^^^^->
1->
  >
2 >for (let { skills: { primary: primaryA, secondary: secondaryA } } of 
3 >     getMultiRobots()
4 >               
5 >                 
6 >                      getMultiRobots
7 >                                    ()
8 >                                      
9 >                                        getMultiRobots()
10>                                                      
11>                                                        getMultiRobots()
12>                                                            ) 
13>                                                              {
1->Emitted(26, 1) Source(41, 1) + SourceIndex(0)
2 >Emitted(26, 6) Source(41, 70) + SourceIndex(0)
3 >Emitted(26, 16) Source(41, 86) + SourceIndex(0)
4 >Emitted(26, 18) Source(41, 70) + SourceIndex(0)
5 >Emitted(26, 23) Source(41, 70) + SourceIndex(0)
6 >Emitted(26, 37) Source(41, 84) + SourceIndex(0)
7 >Emitted(26, 39) Source(41, 86) + SourceIndex(0)
8 >Emitted(26, 41) Source(41, 70) + SourceIndex(0)
9 >Emitted(26, 55) Source(41, 86) + SourceIndex(0)
10>Emitted(26, 57) Source(41, 70) + SourceIndex(0)
11>Emitted(26, 61) Source(41, 86) + SourceIndex(0)
12>Emitted(26, 63) Source(41, 88) + SourceIndex(0)
13>Emitted(26, 64) Source(41, 89) + SourceIndex(0)
---
```

----------------------------------------

TITLE: Retrieving Robot Data in TypeScript
DESCRIPTION: Defines functions to return robot data. getRobot() returns a single-skilled robot, while getMultiRobot() returns a multi-skilled robot.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function getRobot() {
    return robotA;
}

function getMultiRobot() {
    return multiRobotA;
}
```

----------------------------------------

TITLE: Assignability Checks for Raw String Mapping in TypeScript
DESCRIPTION: This snippet defines a function 'f2' that explores the assignability between raw string types and their respective uppercase and lowercase transformations. It includes scenarios showing valid and invalid assignments, highlighting the constraints imposed by type safety in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/stringMappingOverPatternLiterals.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function f2(x1: string, x2: Uppercase<string>, x3: Lowercase<string>) {
        // ok
        x1 = x2;
        x1 = x3;
    
        x2 = "ABC";
        x3 = "abc";
    
        // should fail (sets do not match)
        x2 = x1;
        ~~
!!! error TS2322: Type 'string' is not assignable to type 'Uppercase<string>'.
        x2 = x3;
        ~~
!!! error TS2322: Type 'Lowercase<string>' is not assignable to type 'Uppercase<string>'.
        x3 = x1;
        ~~
!!! error TS2322: Type 'string' is not assignable to type 'Lowercase<string>'.
        x3 = x2;
        ~~
!!! error TS2322: Type 'Uppercase<string>' is not assignable to type 'Lowercase<string>'.
    }
```

----------------------------------------

TITLE: Creating Function with Multiple Parameters and IFoo Return Type in TypeScript
DESCRIPTION: This snippet defines a variable 'c3t6' as a function that takes a number and a string parameter, returning an object of type IFoo. The function body returns an empty object cast as IFoo.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
var c3t6: (n: number, s: string) => IFoo = function(n, s) { return <IFoo>({}); };
```

----------------------------------------

TITLE: Demonstrating Type Assignment Errors with Interfaces in TypeScript
DESCRIPTION: This code showcases several examples of type assignment errors when using generic interfaces and classes in TypeScript. It highlights issues that arise when trying to assign an object with a `Comparable<number>` property to a variable expecting a `Comparable<string>` property, leading to type incompatibilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericAssignmentCompatWithInterfaces1.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
var z = { x: new A<number>() };
var a1: I<string> = { x: new A<number>() };
var a2: I<string> = function (): { x: A<number> } {
   var z = { x: new A<number>() }; return z;
} ();
var a3: I<string> = z;
var a4: I<string> = <K<number>>z;
```

----------------------------------------

TITLE: For Loop with Function Return and Destructuring - TypeScript
DESCRIPTION: This snippet initializes variables by destructuring the return value of the 'getRobot' function call in a for loop. It showcases how to handle multiple values returned from a function effectively.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPattern2.sourcemap.txt#2025-04-21_snippet_31

LANGUAGE: typescript
CODE:
```
>>>for (_q = getRobot(), numberA3 = _q[0], robotAInfo = _q.slice(1), i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Defining a Function Type in TypeScript
DESCRIPTION: This code defines a type alias `FuncType` which represents a function that takes another function as an argument. The inner function takes a type parameter `T` and a parameter `p` of type `T`, and returns `T`. The outer function returns the type of `x`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parenthesizedContexualTyping2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type FuncType = (x: <T>(p: T) => T) => typeof x;
```

----------------------------------------

TITLE: Defining Class with Private Fields in TypeScript (ES5 Target)
DESCRIPTION: This code snippet defines a class 'A' with various private fields, methods, and accessors. However, these private identifiers are not supported when targeting ECMAScript 5, resulting in multiple compiler errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameES5Ban.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class A {
    constructor() {}
    #field = 123;
    #method() {}
    static #sField = "hello world";
    static #sMethod() {}
    get #acc() { return ""; }
    set #acc(x: string) {}
    static get #sAcc() { return 0; }
    static set #sAcc(x: number) {}
}
```

----------------------------------------

TITLE: Object Literal Property Type Error in TypeScript
DESCRIPTION: Shows an invalid object literal assignment where a 'name' property is included but not defined in the type annotation '{ id: number }'. The compiler raises error TS2353 because only known properties can be specified.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping4.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class foo { public bar:{id:number;} = {id:5, name:"foo"}; }
```

----------------------------------------

TITLE: Attempting to Pass Type Arguments to Non-Generic Functions in TypeScript
DESCRIPTION: This code snippet demonstrates multiple cases where developers incorrectly provide type arguments to non-generic functions, resulting in TypeScript compiler errors. It shows examples with regular functions, arrow functions, object methods, interface implementations, and untyped variables. TypeScript correctly flags all these cases with either TS2558 (Expected 0 type arguments) or TS2347 (Untyped function calls may not accept type arguments) errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callNonGenericFunctionWithTypeArguments.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// it is always illegal to provide type arguments to a non-generic function
// all invocations here are illegal

function f(x: number) { return null; }
var r = f<string>(1);

var f2 = (x: number) => { return null; }
var r2 = f2<string>(1);

var f3: { (x: number): any; }
var r3 = f3<string>(1);

class C {
    f(x: number) {
        return null;
    }
}
var r4 = (new C()).f<string>(1);

interface I {
    f(x: number): any;
}
var i: I;
var r5 = i.f<string>(1);

class C2 {
    f(x: number) {
        return null;
    }
}
var r6 = (new C2()).f<string>(1);

interface I2 {
    f(x: number);
}
var i2: I2;
var r7 = i2.f<string>(1);

var a;
var r8 = a<number>();

var a2: any;
var r8 = a2<number>();
```

----------------------------------------

TITLE: Testing Dynamic Import Syntax Variations in TypeScript
DESCRIPTION: This snippet tests various syntax variations for dynamic imports in TypeScript, including valid and invalid uses. It demonstrates error cases where the import syntax is incorrect.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importAttributes1(module=esnext).errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
const a = import('./0')
const b = import('./0', { with: { type: "json" } })
const c = import('./0', { with: { type: "json", ttype: "typo" } })
const d = import('./0', { with: {} })
const dd = import('./0', {})
declare function foo(): any;
const e = import('./0', foo())
const f = import()
const g = import('./0', {}, {})
const h = import('./0', { with: { type: "json" }},)
```

----------------------------------------

TITLE: Dynamic Importing JSON in TypeScript
DESCRIPTION: This snippet illustrates a dynamic import of a JSON module with assertions in TypeScript, which is compatible with ES modules. It shows the correct usage of the import function and the assertion type without encountering errors. This example would successfully load the JSON file in a module environment that supports dynamic imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportAssertions(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const json2 = import("./package.json", { assert: { type: "json" } });
```

----------------------------------------

TITLE: Importing and Using F Class with Indexing in JavaScript
DESCRIPTION: This snippet demonstrates importing a class F from another module and attempting to access properties using string and symbol indexers, which results in TypeScript errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/lateBoundAssignmentDeclarationSupport5.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
const x = require("./lateBoundAssignmentDeclarationSupport5.js");
const inst =  new x.F();
const y = inst["my-fake-sym"];
const z = inst[x.S];
```

----------------------------------------

TITLE: Defining Interface with Boolean Index and Union Property (Error)
DESCRIPTION: This snippet defines an interface 'I4' with a string index signature allowing any property with a string key to have type 'boolean'. It also defines two specific properties 'foo' and 'foo2' using union types. Assigning 'string | number' to 'foo' and 'e | number' to 'foo2' triggers TS2411 errors because 'string', 'number', and 'e' are not subtypes of 'boolean'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionSubtypeIfEveryConstituentTypeIsSubtype.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
interface I4 {
        [x: string]: boolean;
        foo: string | number;
        foo2: e | number;
    }
```

----------------------------------------

TITLE: Rest Type Cannot Be Created From Unknown
DESCRIPTION: This function shows that you cannot use the rest parameter syntax to extract properties from an 'unknown' type.  This operation is only allowed on object types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownType1.errors.txt#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
    // Rest type cannot be created from unknown
    
    function f28(x: unknown) {
        let { ...a } = x;  // Error
    }
```

----------------------------------------

TITLE: TypeScript Class and Function Definition
DESCRIPTION: Demonstrates basic TypeScript code structure with class definition, variable declaration, and function implementation. Includes a numeric variable, class with a number property, and a function that returns an instance of the class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootRelativePathSingleFileSpecifyOutputFile/node/mapRootRelativePathSingleFileSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: Package Configuration for ES Module (.json file)
DESCRIPTION: Package.json configuration that defines the package as an ES Module via the "type": "module" property. This setting is what causes the import in .cts files to fail.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodePackageSelfName(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module",
    "exports": "./index.js"
}
```

----------------------------------------

TITLE: Root Package.json Configuration with ESM Default
DESCRIPTION: The main package.json file setting the project as an ECMAScript module using the 'type' field set to 'module'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExportsExclude(module=node18).errors.txt#2025-04-21_snippet_10

LANGUAGE: json
CODE:
```
{
    "name": "package",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: For Loop with Variable Initialization - TypeScript
DESCRIPTION: This snippet employs a for loop to iterate through an array 'robotA', initializing variables 'numberA2', 'nameA2', and 'skillA2' with default values. It outputs the initialized variables, if values are not provided in the array.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_25

LANGUAGE: typescript
CODE:
```
for (var _1 = robotA[0], numberA2 = _1 === void 0 ? -1 : _1, _2 = robotA[1], nameA2 = _2 === void 0 ? "name" : _2, _3 = robotA[2], skillA2 = _3 === void 0 ? "skill" : _3, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: TypeScript For-Await-Of Loop Example
DESCRIPTION: Example of for-await-of loop usage in TypeScript with Promise array iteration. Shows error condition when module and target options are not properly configured.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/topLevelAwait.1(module=es2022,target=es2015).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const _await = 1;

// await allowed in aliased export
export { _await as await };

// for-await-of
const arr = [Promise.resolve()];

for await (const item of arr) {
  item;
}
```

----------------------------------------

TITLE: TypeScript Array Destructuring with Default Value Declaration
DESCRIPTION: This TypeScript code snippet shows array destructuring with a default value. `numberC2` will be assigned -1 if the first element in the array is undefined or not present. The snippet demonstrates concise syntax for destructuring and providing default values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
let [
    numberC2 = -1] = [3, "edging", "Trimming edges"];
```

----------------------------------------

TITLE: Function Declaration with Generic Type Parameter in TypeScript
DESCRIPTION: This snippet illustrates a function 'f' that accepts a parameter 'p' of type 'C'. The error TS2314 alerts developers that the generic type 'C<T>' needs at least one type argument to be specified. This highlights the importance of correctly instantiating generic types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocClassMissingTypeArguments.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
/** @param {C} p */
                ~
function f(p) {}
```

----------------------------------------

TITLE: Defining Constructor Type and Base Class in TypeScript
DESCRIPTION: Defines a Constructor type alias for class constructors and creates a base class A with public, protected, and private properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mixinPrivateAndProtected.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type Constructor<T> = new(...args: any[]) => T;

class A {
    public pb: number = 2;
    protected ptd: number = 1;
    private pvt: number = 0;
}
```

----------------------------------------

TITLE: Generator Yielding Multiple Numbers
DESCRIPTION: This defines a generator function that yields the numbers 1 and 2. The inferred type is Generator<1 | 2, void, unknown>.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatorReturnTypeInference.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
function* g006() { // Generator<1 | 2, void, unknown>
        yield 1;
        yield 2;
    }
```

----------------------------------------

TITLE: Importing a Module with Dynamic Import
DESCRIPTION: This snippet shows a dynamic import statement in TypeScript that is expected to fail due to the missing file extension. The error TS2834 indicates that explicit file extensions are mandatory when using the specified module resolution options in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionWithoutExtension5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// Extensionless relative path dynamic import in an ES module
    import("./foo").then(x => x); // should error, ask for extension
```

----------------------------------------

TITLE: Defining DOM Node Type Constants - TypeScript
DESCRIPTION: This snippet defines read-only constants representing different types of DOM Nodes (e.g., element, attribute, text, comment), typically used with the `nodeType` property to identify the node's kind.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRecursiveInference.errors.txt#_snippet_18

LANGUAGE: TypeScript
CODE:
```
readonly ELEMENT_NODE: { toString: any; toFixed: any; toExponential: any; toPrecision: any; valueOf: any; toLocaleString: any; }; readonly ATTRIBUTE_NODE: { toString: any; toFixed: any; toExponential: any; toPrecision: any; valueOf: any; toLocaleString: any; }; readonly TEXT_NODE: { toString: any; toFixed: any; toExponential: any; toPrecision: any; valueOf: any; toLocaleString: any; }; readonly CDATA_SECTION_NODE: { toString: any; toFixed: any; toExponential: any; toPrecision: any; valueOf: any; toLocaleString: any; }; readonly ENTITY_REFERENCE_NODE: { toString: any; toFixed: any; toExponential: any; toPrecision: any; valueOf: any; toLocaleString: any; }; readonly ENTITY_NODE: { toString: any; toFixed: any; toExponential: any; toPrecision: any; valueOf: any; toLocaleString: any; }; readonly PROCESSING_INSTRUCTION_NODE: { toString: any; toFixed: any; toExponential: any; toPrecision: any; valueOf: any; toLocaleString: any; }; readonly COMMENT_NODE: { toString: any; toFixed: any; toExponential: any; toPrecisi
```

----------------------------------------

TITLE: Defining IsArray Conditional Type in TypeScript
DESCRIPTION: This snippet defines a conditional type 'IsArray<T>' that checks if a type T is an array. It illustrates type errors that occur when incorrectly assigning a boolean to a strictly defined true or false type in a function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/distributiveConditionalTypeConstraints.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
type IsArray<T> = T extends unknown[] ? true : false;

function f1<T extends object>(x: IsArray<T>) {
    let t: true = x;   // Error
        ~
!!! error TS2322: Type 'boolean' is not assignable to type 'true'.
    let f: false = x;  // Error
        ~
!!! error TS2322: Type 'boolean' is not assignable to type 'false'.
}

function f2<T extends unknown[]>(x: IsArray<T>) {
    let t: true = x;
    let f: false = x;  // Error
        ~
!!! error TS2322: Type 'IsArray<T>' is not assignable to type 'false'.
!!! error TS2322:   Type 'true' is not assignable to type 'false'.
}

function f3<T extends string[]>(x: IsArray<T>) {
    let t: true = x;
    let f: false = x;  // Error
        ~
!!! error TS2322: Type 'IsArray<T>' is not assignable to type 'false'.
!!! error TS2322:   Type 'true' is not assignable to type 'false'.
}

function f4<T extends Function>(x: IsArray<T>) {
    let t: true = x;   // Error
        ~
!!! error TS2322: Type 'IsArray<T>' is not assignable to type 'true'.
!!! error TS2322:   Type 'false' is not assignable to type 'true'.
    let f: false = x;
}
```

----------------------------------------

TITLE: package.json for Module 'foo'
DESCRIPTION: This `package.json` file defines the entry point for the module 'foo' as 'oof'. This means that when 'foo' is required, it will attempt to load the 'oof' file. The file is located under `/node_modules/foo/package.json`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/packageJsonMain_isNonRecursive.errors.txt#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{ "main": "oof" }
```

----------------------------------------

TITLE: Iterating Over Never Type in TypeScript
DESCRIPTION: This snippet illustrates the errors that occur when attempting to use a 'never' type in for...of and for...in loops. It shows that 'never' type lacks the necessary iteration properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/neverTypeErrors1.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
for (const n of f4()) {}
for (const n in f4()) {}
```

----------------------------------------

TITLE: Accessing Object with Getter Method Using Index Notation in TypeScript
DESCRIPTION: This snippet shows an object with a 'get' method being accessed using index notation, which causes a TypeScript error due to the lack of an index signature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyStringIndexerOnObject.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
var c = {
  get: (key: string) => 'foobar'
};
c['hello'];
const foo = c['hello'];
```

----------------------------------------

TITLE: Defining and Using Private Methods in TypeScript Class
DESCRIPTION: This snippet defines a class A1 with a private method #method that takes a string parameter and returns a string. The constructor demonstrates correct and incorrect usage of this private method, resulting in TypeScript errors for type mismatch and missing arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameMethod.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class A1 {
    #method(param: string): string {
        return "";
    }
    constructor(name: string) {
        this.#method("")
        this.#method(1) // Error
        this.#method()  // Error 
    }
}
```

----------------------------------------

TITLE: Demonstrating TypeScript Class Extension Errors in Module Context
DESCRIPTION: This code snippet shows two TypeScript errors: trying to extend a non-existent property B on module M, and trying to extend an undefined class B within module M. Both result in compiler errors highlighting the importance of ensuring extended classes are properly defined and accessible.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/extBaseClass2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module N {
    export class C4 extends M.B {
    }
}

module M {
    export class C5 extends B {
    }
}
```

----------------------------------------

TITLE: Exporting Generic Class Definition
DESCRIPTION: Defines a generic class C with a single type parameter T and exports it as a module. The class contains a single property foo of type T.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/externalModuleExportingGenericClass.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class C<T> {
    foo: T;
}
export = C;
```

----------------------------------------

TITLE: Type Assignment Error with Different Private Property Visibility
DESCRIPTION: Shows a type assignment error where type D has a private property not matching the private property constraints of type E
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithObjectMembersAccessibility.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
e = e;
```

----------------------------------------

TITLE: Implementing State and Mode Classes in TypeScript
DESCRIPTION: This snippet defines State and Mode classes within the Sample.Thing.Languages.PlainText module. The State class implements IState, while the Mode class extends AbstractMode. It demonstrates a scenario for recursive function calls with type casting and 'this' parameter.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveClassReferenceTest.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
module Sample.Thing.Languages.PlainText {
	
	export class State implements IState {		
        constructor(private mode: IMode) { }
		public clone():IState {
			return this;
		}

		public equals(other:IState):boolean {
			return this === other;
		}
		
		public getMode(): IMode { return mode; }
	}
	
	export class Mode extends AbstractMode {

		// scenario 2
		public getInitialState(): IState {
			return new State(self);
		}


	}
}
```

----------------------------------------

TITLE: Catch Clause Destructuring with Array - Not an Array Type
DESCRIPTION: This snippet demonstrates the error TS2461, which occurs when trying to destructure an array from a catch clause variable when `useUnknownInCatchVariables` is enabled. The error indicates that the type 'unknown' is not an array type, as TypeScript infers the catch clause variable as 'unknown' by default.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructureCatchClause(strict=false,useunknownincatchvariables=true).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
"try {} catch ([ x ]) { x }"
```

----------------------------------------

TITLE: TypeScript Class and Variable Declarations with Type Annotations
DESCRIPTION: Demonstrates TypeScript code with class definition, array type annotations, and union types. Contains compilation errors due to expressions that are always evaluated as truthy in logical OR operations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declFileTypeAnnotationParenType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class c {
    private p: string;
}

var x: (() => c)[] = [() => new c()];
var y = [() => new c()];

var k: (() => c) | string = (() => new c()) || "";
var l = (() => new c()) || "";
```

----------------------------------------

TITLE: Accessing Variables in Closures - TypeScript
DESCRIPTION: This snippet 'f11' showcases how closures can capture outer function variables, completing the expected behavior from the outer context within the returned function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowingPastLastAssignment.errors.txt#2025-04-21_snippet_13

LANGUAGE: TypeScript
CODE:
```
function f11() {
    let r;
    r = "b";
    () => r;
}
```

----------------------------------------

TITLE: Importing Default Export with Alias and Exporting Class in TypeScript
DESCRIPTION: This snippet demonstrates importing the default export from the 'path' module with an alias 'resolve', using it to resolve a path, and exporting a class named Foo3. It includes an error indicating that 'tslib' module is required but not found.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esModuleInteropTslibHelpers.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import {default as resolve} from "path";
resolve("", "../");
export class Foo3 { }
```

----------------------------------------

TITLE: Defining Class Types with Different Access Modifiers in TypeScript
DESCRIPTION: This snippet defines several TypeScript classes with private, protected, and public member properties and methods. These classes are used to demonstrate how TypeScript handles access modifiers in type intersections and mixin patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mixinAccessModifiers.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type Constructable = new (...args: any[]) => object;

class Private {
	constructor (...args: any[]) {}
	private p: string;
}

class Private2 {
	constructor (...args: any[]) {}
	private p: string;
}

class Protected {
	constructor (...args: any[]) {}
	protected p: string;
	protected static s: string;
}

class Protected2 {
	constructor (...args: any[]) {}
	protected p: string;
	protected static s: string;
}

class Public {
	constructor (...args: any[]) {}
	public p: string;
	public static s: string;
}

class Public2 {
	constructor (...args: any[]) {}
	public p: string;
	public static s: string;
}
```

----------------------------------------

TITLE: Array1 Interface with Numeric and Symbol Indexes
DESCRIPTION: Defines an interface with numeric length and index, along with symbol-based iterator and unscopables methods
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indexSignatureInOtherFile1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Array1<T> {
  length: number;
  [n: number]: T;
}
```

----------------------------------------

TITLE: Object Property Key Template Literals with TypeScript
DESCRIPTION: A function demonstrating template literal types for property keys, including negated property keys. Shows how to create derived property name patterns from object types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes3.errors.txt#2025-04-21_snippet_17

LANGUAGE: typescript
CODE:
```
function a<T extends {id: string}>() {
    let x: keyof T & string | `-${keyof T & string}`;
    x = "id";
    x = "-id";
}
```

----------------------------------------

TITLE: Invalid Nullish Coalescing Operator Combinations
DESCRIPTION: Shows examples of invalid syntax when mixing ?? operator with || and && operators without proper parentheses. These combinations trigger TS5076 errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nullishCoalescingOperator5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare const a: string | undefined
declare const b: string | undefined
declare const c: string | undefined

// should be a syntax error
a ?? b || c;
a || b ?? c;
a ?? b && c;
a && b ?? c;
```

----------------------------------------

TITLE: Defining Generic Base and Derived Classes in TypeScript
DESCRIPTION: This snippet defines a generic base class `Base2` and a generic derived class `D` extending `Base`. The constructor of `D` expects two arguments of the same type `T`. It also defines `D2`, which extends `D` with a type constraint on `T` being a Date object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassWithoutExplicitConstructor3.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    "class Base2<T> {
        a: T;
        constructor(x: T) { this.a = x; }
    }
    
    class D<T> extends Base {
        b: T = null;
        constructor(y: T, z: T) {
            super(2);
            this.b = y;
        }
    }
    
    
    class D2<T extends Date> extends D<T> {
        x = 2
        y: T = null;
    }"
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options in JSON
DESCRIPTION: This JSON snippet defines TypeScript compiler options in tsconfig.json. It sets various compilation flags and specifies the main TypeScript file to compile.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/emitDecoratorMetadataSystemJSISolatedModulesNoResolve/node/emitDecoratorMetadataSystemJSISolatedModulesNoResolve.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "compileOnSave": true,
  "compilerOptions": {
    "target": "es5",
    "module": "system",
    "moduleResolution": "node",
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "isolatedModules": true,
    "noResolve": true
  },
  "files": [
    "main.ts"
  ]
}
```

----------------------------------------

TITLE: Illustrating JSX Errors in TypeScript
DESCRIPTION: This code snippet demonstrates common errors encountered when using JSX in TypeScript without providing the '--jsx' compiler flag. It highlights syntax errors such as missing closing tags and the use of JSX expressions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parseUnaryExpressionNoTypeAssertionInJsx2.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
    const x = "oops";
    const y = + <> x;
```

----------------------------------------

TITLE: Demonstrating Unused Import Error in TypeScript
DESCRIPTION: This code example shows a TypeScript error (TS6133) that occurs when an import is declared but its value is never read. Module A exports a Calculator class, while Module B imports module A but never uses the import, triggering the error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedImports10.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module A {
    export class Calculator {
        public handelChar() {
        }
    }
}

module B {
    import a = A;
           ~
!!! error TS6133: 'a' is declared but its value is never read.
}
```

----------------------------------------

TITLE: Accessing Elements in TypeScript Tuples With Length Checking
DESCRIPTION: This code demonstrates TypeScript's ability to enforce tuple length constraints. It shows that accessing indices beyond a tuple's length results in compile-time errors for fixed-length tuples, while tuples with rest elements allow access to higher indices without errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tupleLengthCheck.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare const a: [number, string]
declare const rest: [number, string, ...boolean[]]

const a1 = a[1]
const a2 = a[2]
const a3 = a[1000]

const a4 = rest[1]
const a5 = rest[2]
const a6 = rest[3]
const a7 = rest[1000]
```

----------------------------------------

TITLE: Defining a Set Accessor in TypeScript
DESCRIPTION: This snippet defines a setter accessor within a TypeScript class `C`. The setter `Foo` incorrectly takes two parameters, violating TypeScript's rule requiring exactly one parameter for set accessors. The use of the set keyword indicates modification of a property, with only one argument allowed to assign a value. This snippet highlights a common mistake in accessor usage and the importance of adhering to language syntax rules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserMemberAccessorDeclaration14.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
   set Foo(a: number, b: number) { }
       ~~~
}
```

----------------------------------------

TITLE: Generic Constructor with No Parameters
DESCRIPTION: Defines an interface for a constructor that takes no parameters but has a generic type parameter T.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeArgumentInferenceConstructSignatures.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface NoParams {
    new <T>();
}
var noParams: NoParams;
new noParams();
new noParams<string>();
new noParams<{}>();
```

----------------------------------------

TITLE: TypeScript Class Extension and Interface Property Type Assignment
DESCRIPTION: Demonstrates TypeScript type checking for class inheritance, interface implementation, and index signatures. Shows how property types interact with string index signatures and inherited object members.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectTypeHidingMembersOfExtendedObject.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
    foo: string;
}

class B extends A {
    bar: string;
}

interface Object {
    data: A;
    [x: string]: Object;
}

class C {
    valueOf() { }
    data: B;
    [x: string]: any;
}

var c: C;
var r1: void = c.valueOf();
var r1b: B = c.data;
var r1c = r1b['hm']; // should be 'Object'
var r1d = c['hm']; // should be 'any'

interface I {
    valueOf(): void;
    data: B;
    [x: string]: any;
}

var i: I;
var r2: void = i.valueOf();
var r2b: B = i.data;
var r2c = r2b['hm']; // should be 'Object'
var r2d = i['hm']; // should be 'any'

var a = {
    valueOf: () => { },
    data: new B()
}

var r3: void = a.valueOf();
var r3b: B = a.data;
var r3c = r3b['hm']; // should be 'Object'
var r3d = i['hm'];

var b: {
    valueOf(): void;
    data: B;
    [x: string]: any;
}

var r4: void = b.valueOf();
```

----------------------------------------

TITLE: Defining Class Property with Contextual Typing in TypeScript
DESCRIPTION: This snippet shows a class C1T5 with a property 'foo' that is contextually typed as a function taking a number and a string, and returning a number. The implementation only uses the number parameter.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C1T5 {
    foo: (i: number, s: string) => number = function(i) {
        return i;
    }
}
```

----------------------------------------

TITLE: TypeScript Interface Declarations with Default Export
DESCRIPTION: TypeScript declaration file defining a named interface 'Foo' and a default export interface 'Bar'. Each interface contains a single numeric property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/elidedJSImport2(module=es2022).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export interface Foo {
    bar: number;
}

export default interface Bar {
    foo: number;
}
```

----------------------------------------

TITLE: Generic Type Arguments in Class Extension
DESCRIPTION: Demonstrates usage of generic type arguments when extending a base class with different type parameter combinations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classExtendingClassLikeType.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class D2 extends getBase() <number> {
    constructor() {
        super(10);
        super(10, 20);
        this.x = 1;
        this.y = 2;
    }
}

class D3 extends getBase() <string, number> {
    constructor() {
        super("abc", 42);
        this.x = "x";
        this.y = 2;
    }
}
```

----------------------------------------

TITLE: For Loop with Array Destructuring and Default - TS/JS
DESCRIPTION: This example illustrates the compilation of a `for` loop's initialization clause that uses array destructuring with a default value. The TypeScript syntax `[, nameA = "name"] = robotA` is transformed into JavaScript code that uses a temporary variable (`_a`) and a ternary operator to handle the default value assignment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.sourcemap.txt#_snippet_11

LANGUAGE: JavaScript
CODE:
```
for (_a = robotA[1], nameA = _a === void 0 ? "name" : _a, i = 0; i < 1; i++) {
```

LANGUAGE: TypeScript
CODE:
```
for ([, nameA = "name"] = robotA, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Defining Map and Equals Interfaces in TypeScript
DESCRIPTION: Defines two core interfaces: Map<T> for indexable structures and Equals<T> for objects that can be compared for equality.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unspecializedConstraints.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Map<T> {
    [index: string]: T;
}

interface Equals<T> {
    equals(other: T): boolean;
}
```

----------------------------------------

TITLE: Non-Generic Async Functions with Various Parameter Types in TypeScript
DESCRIPTION: Examples of non-generic async functions handling different parameter types (string, unknown, object) and their Promise variants, demonstrating how the await operator unwraps Promise types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitedType.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// non-generic
async function f1(x: string) {
    // y: string
    const y = await x;
}

async function f2(x: unknown) {
    // y: unknown
    const y = await x;
}

async function f3(x: object) {
    // y: object
    const y = await x;
}

async function f4(x: Promise<string>) {
    // y: string
    const y = await x;
}

async function f5(x: Promise<unknown>) {
    // y: unknown
    const y = await x;
}

async function f6(x: Promise<object>) {
    // y: object
    const y = await x;
}
```

----------------------------------------

TITLE: Final Class Structure in TypeScript
DESCRIPTION: This snippet concludes by defining the final structure of a class, showcasing methods that extend other classes while using base methods and types effectively.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_42

LANGUAGE: TypeScript
CODE:
```
module argurus { export class oreas extends lavali.wilsoni { } }
```

----------------------------------------

TITLE: Exporting React Module and ReactNode Type
DESCRIPTION: This code snippet defines the React module and its types. It includes the export statement for React along with the declaration of the ReactNode type and the useMemo function, which is important for optimizing functional components.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkerInitializationCrash.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// /node_modules/@types/react/index.d.ts
export = React;
export as namespace React;
declare namespace React {
    type ReactNode = any;
    function useMemo<T>(factory: () => T, deps: undefined): T;
}
```

----------------------------------------

TITLE: CSS Class Name Processing Function in TypeScript
DESCRIPTION: Implements a css function that processes class names and styles with type safety. Takes a styles object and variable number of class name arguments, processing them based on their type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveTypeRelations.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export function css<S extends { [K in keyof S]: string }>(styles: S, ...classNames: ClassNameArg<S>[]): string {
  const args = classNames.map(arg => {
    if (arg == null) {
      return null;
    }
    if (typeof arg == "string") {
      return styles[arg];
    }
    if (typeof arg == "object") {
      return Object.keys(arg).reduce<ClassNameObject>((obj: ClassNameObject, key: keyof S) => {
        const exportedClassName = styles[key];
        obj[exportedClassName] = (arg as ClassNameMap<S>)[key]; 
        return obj;
      }, {});
    }
  });
  return "";
}
```

----------------------------------------

TITLE: Class Definition with Function Property - TypeScript
DESCRIPTION: Defines a class C4T5 with a constructor that initializes a foo property as a function taking number and string parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
var C4T5 = /** @class */ (function () {
    function C4T5() {
        this.foo = function (i, s) {
            return s;
        };
    }
    return C4T5;
}());
```

----------------------------------------

TITLE: Function Overload Assignability in TypeScript
DESCRIPTION: This snippet illustrates how TypeScript handles function overloads with specific string literal types. It defines two functions 'f' and 'g', each overloaded with a string literal type and a general string type. The snippet assigns the functions to variables and demonstrates type incompatibility errors due to mismatched parameter types. There are no additional dependencies required.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/stringLiteralTypesOverloadAssignability01.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f(x: "foo"): number;
function f(x: string): number {
    return 0;
}

function g(x: "bar"): number;
function g(x: string): number {
    return 0;
}

let a = f;
let b = g;

a = b;
// error TS2322: Type '(x: "bar") => number' is not assignable to type '(x: "foo") => number'.
// error TS2322:   Types of parameters 'x' and 'x' are incompatible.
// error TS2322:     Type '"foo"' is not assignable to type '"bar"'.
b = a;
// error TS2322: Type '(x: "foo") => number' is not assignable to type '(x: "bar") => number'.
// error TS2322:   Types of parameters 'x' and 'x' are incompatible.
// error TS2322:     Type '"bar"' is not assignable to type '"foo"'.
```

----------------------------------------

TITLE: Switching with Union Types - TypeScript
DESCRIPTION: This snippet demonstrates how to handle union types within switch case statements in TypeScript. It illustrates a common type comparison error where a boolean type is compared to a union of string and number types, leading to a TypeScript compiler error. The required variable types include string, number, and boolean, showcased through various case scenarios.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/switchCaseWithUnionTypes01.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var strOrNum: string | number;
var numOrBool: number | boolean;
var str: string;
var num: number;
var bool: boolean;

switch (strOrNum) {
    // Identical
    case strOrNum:
        break;

    // Constituents
    case str:
    case num:
        break;

    // Overlap in constituents
    case numOrBool:
        break;

    // No relation
    case bool:
         ~~~~
!!! error TS2678: Type 'boolean' is not comparable to type 'string | number'.
        break;
}
```

----------------------------------------

TITLE: Defining ESM Module in Nested Subfolder
DESCRIPTION: This package.json file in a nested subfolder explicitly marks the module type as 'module', ensuring all JavaScript files in this directory are treated as ESM by the TypeScript compiler and Node.js.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=nodenext).errors.txt#2025-04-21_snippet_13

LANGUAGE: JSON
CODE:
```
{
    "type": "module"
}
```

----------------------------------------

TITLE: Generic Overloads with Constraints in TypeScript
DESCRIPTION: This section covers the definition and utilization of generic function overloads with type constraints. It handles scenarios where the constraints are met or violated, demonstrating overload resolution with and without explicit type arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadResolution.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function fn4<T extends string, U extends number>(n: T, m: U);\nfunction fn4<T extends number, U extends string>(n: T, m: U);\nfunction fn4() { }\nfn4<string, number>('', 3);\nfn4<string, number>(3, ''); // Error\nfn4<number, string>('', 3); // Error\nfn4<number, string>(3, ''); \n\nfn4('', 3);\nfn4(3, '');\nfn4(3, undefined);\nfn4('', null);\n\nfn4<boolean, Date>(null, null); // Error\n\nfn4(true, null); // Error\nfn4(null, true); // Error\n
```

----------------------------------------

TITLE: Class with Unused Parameter Property and Variable
DESCRIPTION: A TypeScript class demonstrating two compiler errors: an unused private parameter property 'used' in the constructor and an unused local variable 'foge'. The code triggers TS6138 and TS6133 errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedParameterProperty1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
    constructor(private used: string) {
        let foge = used;
    }
}
```

----------------------------------------

TITLE: Importing Default Export with Alias in TypeScript
DESCRIPTION: TypeScript file 'b.ts' attempting to import a default export with an alias, resulting in an error due to missing tslib module. The code includes usage of the imported value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importHelpersWithImportOrExportDefaultNoTslib.3(esmoduleinterop=true,module=amd).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { default as b } from "./a";
void b;
```

----------------------------------------

TITLE: Demonstrating Abstract Method Overload Errors in TypeScript Classes
DESCRIPTION: This code snippet shows two abstract class definitions with different method signature patterns that generate TypeScript errors. The errors include mixing abstract and non-abstract overloads, missing implementations, and non-consecutive abstract method declarations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classAbstractOverloads.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
abstract class A {
    abstract foo();
    abstract foo() : number;
    abstract foo();
    
    abstract bar();
    bar();
    abstract bar();
    
    abstract baz();
    baz();
    abstract baz();
    baz() {}
    
    qux();
}

abstract class B {
    abstract foo() : number;
    abstract foo();
    x : number;
    abstract foo();
    abstract foo();
}
```

----------------------------------------

TITLE: Demonstrating Implicit Any Type Errors in TypeScript Ambient Declarations
DESCRIPTION: This code snippet demonstrates various cases where TypeScript reports errors for implicit 'any' types in ambient declarations. It shows examples of variables, functions, interface methods, and class methods that lack proper type annotations within a module declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/implicitAnyAmbients.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare module m {
    var x; // error
    var y: any;

    function f(x); // error 
    function f2(x: any); // error
    function f3(x: any): any;

    interface I {
        foo(); // error
        foo2(x: any); // error
        foo3(x: any): any;
    }

    class C {
        foo(); // error
        foo2(x: any); // error
        foo3(x: any): any;
    }

    module n {
        var y; // error
    }

    import m2 = n;
}
```

----------------------------------------

TITLE: Defining a Package Configuration in JSON
DESCRIPTION: This JSON snippet represents a typical package configuration file defining name, visibility, and module type attributes. It sets the type to module, enabling ECMAScript module syntax computations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportAttributes(module=nodenext).errors.txt#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
{
    "name": "pkg",
    "private": true,
    "type": "module"
}
```

----------------------------------------

TITLE: Using Reflect Methods in TypeScript
DESCRIPTION: This snippet demonstrates the usage of various Reflect methods, which are not available by default in TypeScript. To use these methods, the 'lib' compiler option needs to be set to 'es2015' or later.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/doYouNeedToChangeYourTargetLibraryES2015.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
const testReflectGetOwnPropertyDescriptor = Reflect.getOwnPropertyDescriptor({}, "");
const testReflectGetPrototypeOf = Reflect.getPrototypeOf({});
const testReflectIsExtensible = Reflect.isExtensible({});
const testReflectOwnKeys = Reflect.ownKeys({});
const testReflectPreventExtensions = Reflect.preventExtensions({});
const testReflectSet = Reflect.set({}, "", 0);
const testReflectSetPrototypeOf = Reflect.setPrototypeOf({}, {});
```

----------------------------------------

TITLE: Using Generics and Conditional Types in TypeScript
DESCRIPTION: This snippet defines functions f3, f4, and f5 using generics and type constraints in TypeScript. It shows how TypeScript can infer types and apply constraints dynamically through inference and also demonstrates the usage of mapped types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionWithUnionConstraint.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function f3<T extends string | number | undefined>(x: T & (number | object | undefined)) {
    const y: number | undefined = x;
}

function f4<T extends string | number>(x: T & (number | object)) {
    const y: number = x;
}

function f5<T, U extends keyof T>(x: keyof T & U) {
    let y: keyof any = x;
}
```

----------------------------------------

TITLE: Creating a Component with React and TypeScript
DESCRIPTION: This snippet defines a React component using an interface for its props. The component 'Poisoned' is created with certain expected properties defined in the 'PoisonedProp' interface. 'Poisoned' is then renderable using these props. This setup requires the 'react' package to be installed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadAttributesResolution4.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import React = require('react');

interface PoisonedProp {
    x: string;
    y: 2;
}

class Poisoned extends React.Component<PoisonedProp, {}> {
    render() {
        return <div>Hello</div>;
    }
}

const obj: PoisonedProp = {
    x: "hello world",
    y: 2
};

// OK
let p = <Poisoned {...obj} />;
```

----------------------------------------

TITLE: Using Type Guards with Tuple Union
DESCRIPTION: This snippet shows how to use type guards with the `Args` tuple type. The function `f40` takes a variadic argument that must conform to the `Args` type. It uses conditional checks on `kind` to determine the type of `data` and perform the appropriate operation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
    function f40(...[kind, data]: Args) {
        if (kind === 'A') {
            data.toFixed();
        }
        if (kind === 'B') {
            data.toUpperCase();
        }
    }

```

----------------------------------------

TITLE: Static Property Access Error in TypeScript Class
DESCRIPTION: Example showing two common TypeScript errors: implicit 'any' type on static property and incorrect access of static member through instance reference. The code defines a Square class with a static sideLength property that generates compiler errors due to missing type annotation and improper access pattern.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/staticVisibility2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Square {
    static sideLength;
    constructor(sideLength: number) {
        this.sideLength = sideLength;
    }
}
```

----------------------------------------

TITLE: Invalid TypeScript Import Declaration
DESCRIPTION: Example showing incorrect import syntax that generates three TypeScript compilation errors: circular definition, unknown name reference, and missing namespace
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitUnknownImport.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import Foo = SomeNonExistingName
export {Foo}
```

----------------------------------------

TITLE: Defining RoyalGuard Class Hierarchy with Type Guards in TypeScript
DESCRIPTION: This snippet defines a class hierarchy with RoyalGuard as the base class, and LeadGuard and FollowerGuard as derived classes. It includes type guard methods to check instance types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardFunctionOfFormThisErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class RoyalGuard {
    isLeader(): this is LeadGuard {
        return this instanceof LeadGuard;
    }
    isFollower(): this is FollowerGuard {
        return this instanceof FollowerGuard;
    }
}

class LeadGuard extends RoyalGuard {
    lead(): void {};
}

class FollowerGuard extends RoyalGuard {
    follow(): void {};
}

interface GuardInterface extends RoyalGuard {}
let a: RoyalGuard = new FollowerGuard();
let b: GuardInterface = new LeadGuard();
```

----------------------------------------

TITLE: Type Declarations for Modules in TypeScript
DESCRIPTION: The code defines an interface 'Thing' and a function 'x' exporting the interface 'Thing'. It is part of the TypeScript type declaration file, allowing these types to be accessible upon import in different parts of the application.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsBlocksSpecifierResolution(module=nodenext).errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
    // esm format file
    export interface Thing {}
    export const x: () => Thing;
```

----------------------------------------

TITLE: Declaring Variables with Tuple Type in TypeScript
DESCRIPTION: This code declares two variables `i1` and `i2` with specific types based on the interface `I`. `i1` is of type `I<string, number>`, meaning its tuple property must be a tuple containing a string and a number. `i2` is of type `I<{}, {}>`, meaning its tuple property must contain two empty objects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCallWithTupleType.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var i1: I<string, number>;
var i2: I<{}, {}>;
```

----------------------------------------

TITLE: Derived Class Accessing 'this' Before Super (TypeScript)
DESCRIPTION: This code shows an example where 'this' is accessed before calling `super()` in the constructor of a derived class `DerivedAfterParameterDefault`. This will result in a TypeScript error (TS17009) because 'super()' must be called before accessing 'this'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassSuperStatementPosition.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
class DerivedAfterParameterDefault extends Object {
        x1: boolean;
        x2: boolean;
        constructor(x = false) {
            this.x1 = x;
            super(x);
            this.x2 = x;
        }
    }
```

----------------------------------------

TITLE: TypeScript Error TS17009: super before this
DESCRIPTION: This code demonstrates the TypeScript error TS17009, which occurs when accessing 'this' before calling 'super()' in a derived class constructor. The error message indicates that 'super' must be called before accessing 'this'. The constructor attempts to pass `this.x` to the super constructor before `this` is fully initialized.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkSuperCallBeforeThisAccessing5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Based { constructor(...arg) { } }
    class Derived extends Based {
        public x: number;
        constructor() {
            super(this.x);
                  ~~~~
!!! error TS17009: 'super' must be called before accessing 'this' in the constructor of a derived class.
        }
    }
```

----------------------------------------

TITLE: Handling JSX Closing Tag Errors in TypeScript
DESCRIPTION: This snippet highlights error messages resulting from improper usage of JSX elements in TypeScript, specifically focusing on missing closing tags and syntax errors. The errors indicate problems in elements such as <number>, <>, and <1234>, which do not have corresponding closing tags. Prerequisites include familiarity with JSX syntax in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parseUnaryExpressionNoTypeAssertionInJsx4.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
const x = "oops";

const a = + <number> x;
                 ~~~~~~
!!! error TS17008: JSX element 'number' has no corresponding closing tag.
const b = + <> x;
                ~~
!!! error TS17014: JSX fragment has no corresponding closing tag.
const c = + <1234> x;
                 ~~~~
!!! error TS1003: Identifier expected.
                     ~
!!! error TS1382: Unexpected token. Did you mean `{'>'}` or `&gt;`?

!!! error TS1005: '</' expected.
```

----------------------------------------

TITLE: Private Fields Shadowing in Nested TypeScript Classes
DESCRIPTION: Demonstrates how TypeScript handles private field access between nested classes. Shows error cases when attempting to access shadowed private fields and valid access patterns for private fields within the same class scope.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNamesInNestedClasses-1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
   #foo = "A's #foo";
   #bar = "A's #bar";
   method () {
       class B {
           #foo = "B's #foo";
           bar (a: any) {
               a.#foo; // OK, no compile-time error, don't know what `a` is
           }
           baz (a: A) {
               a.#foo; // compile-time error, shadowed
           }
           quux (b: B) {
               b.#foo; // OK
           }
       }
       const a = new A();
       new B().bar(a);
       new B().baz(a);
       const b = new B();
       new B().quux(b);
   }
}

new A().method();
```

----------------------------------------

TITLE: Using await in normal function (TypeScript)
DESCRIPTION: Example of TypeScript error when using 'for await' loop and 'await' expression in a non-async function. This demonstrates TS1103 and TS1308 errors, with suggestions to mark the function as async.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitInNonAsyncFunction.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function normalFunc(p: Promise<number>) {
  for await (const _ of []);
  return await p;
}
```

----------------------------------------

TITLE: Invalid Arithmetic Operations in TypeScript
DESCRIPTION: This code snippet demonstrates TypeScript compiler errors when performing arithmetic operations on non-numeric types. The errors indicate that both the left-hand and right-hand sides of arithmetic operations must be of type 'any', 'number', 'bigint', or an enum type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arithmeticOperatorWithTypeParameter.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
var r1f9 = t ^ t;
var r1f10 = t | t;
```

----------------------------------------

TITLE: Defining Functions with NoInfer Parameters
DESCRIPTION: Declarations of functions that use NoInfer in various positions within their parameter types. These examples show how NoInfer can be applied to direct parameters, array elements, and nested object properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noInfer.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
declare function foo1<T extends string>(a: T, b: NoInfer<T>): void
declare function foo2<T extends string>(a: T, b: NoInfer<T>[]): void
declare function foo3<T extends string>(a: T, b: NoInfer<T[]>): void
declare function foo4<T extends string>(a: T, b: { x: NoInfer<T> }): void
declare function foo5<T extends string>(a: T, b: NoInfer<{ x: T }>): void
```

----------------------------------------

TITLE: Defining Class Methods with Explicit 'this' Parameters in TypeScript
DESCRIPTION: Defines class methods with various 'this' parameter annotations including 'this: this', 'this: C', 'this: {n: number}', and 'this: void'. The example shows type checking for accessing properties from the 'this' context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisTypeInFunctionsNegative.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
explicitThis(this: this, m: number): number {
    return this.n + m;
}
implicitThis(m: number): number {
    return this.n + m;
}
explicitC(this: C, m: number): number {
    return this.n + m;
}
explicitProperty(this: {n: number}, m: number): number {
    return this.n + m;
}
explicitVoid(this: void, m: number): number {
	return this.n + m; // 'n' doesn't exist on type 'void'.
	            ~
!!! error TS2339: Property 'n' does not exist on type 'void'.
}
```

----------------------------------------

TITLE: Type Variable and Unknown in Union and Intersection
DESCRIPTION: These snippets demonstrate how type variables interact with 'unknown' in unions and intersections. Intersecting a type variable 'T' with 'unknown' results in 'T', while unioning 'T' with 'unknown' results in 'unknown'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownType1.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    // Type variable and unknown in union and intersection
    
    type T20<T> = T & {};  // T & {}
    type T21<T> = T | {};  // T | {}
    type T22<T> = T & unknown;  // T
    type T23<T> = T | unknown;  // unknown
```

----------------------------------------

TITLE: Defining Class and Functions in TypeScript
DESCRIPTION: This snippet defines a TypeScript class and two functions in 'file1.ts'. The class ‘Calculator’ includes a method 'handleChar', while two empty functions 'test' and 'test2' are defined as exports. This setup forms the base for importing into other TypeScript files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedImports3.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export class Calculator {
    handleChar() {}
}

export function test() {

}

export function test2() {

}
```

----------------------------------------

TITLE: Correctly Extending Base Interface with Matching Optional Parameters in TypeScript
DESCRIPTION: This snippet shows interface I15 correctly extending Base by implementing the a4 method with the same number of required parameters and matching types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithCallSignaturesWithRestParameters.errors.txt#2025-04-21_snippet_21

LANGUAGE: typescript
CODE:
```
interface I15 extends Base {
    a4: (x?: number, y?: string) => number;  // ok, same number of required params with matching types
}
```

----------------------------------------

TITLE: Implementing Mapped Type with Known Keys in TypeScript
DESCRIPTION: This function demonstrates the use of a mapped type with generic constraints and known literal keys. It shows type checking for property access and assignment, including cases that generate errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeGenericWithKnownKeys.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function test<Shape extends Record<string, string>>(shape: Shape, key: keyof Shape) {
    const obj = {} as Record<keyof Shape | "knownLiteralKey", number>;

    obj.knownLiteralKey = 1;
    obj[key] = 2;

    obj.unknownLiteralKey = 3; // error
    obj['' as string] = 4; // error
}
```

----------------------------------------

TITLE: Class Definition and Method Implementation in TypeScript
DESCRIPTION: Defines a ClassA with AisIn1_1_1 method implementation. Demonstrates various ways of referencing types through qualified names and namespace hierarchies.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeResolution.sourcemap.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
var ClassA = /** @class */ (function () {
    function ClassA() {
    }
    ClassA.prototype.AisIn1_1_1 = function () {
        // Try all qualified names of this type
        var a1;
        a1.AisIn1_1_1();
        var a2;
        a2.AisIn1_1_1();
        var a3;
        a3.AisIn1_1_1();
        var a4;
        a4.AisIn1_1_1();
        // Two variants of qualifying a peer type
        var b1;
        b1.BisIn1_1_1();
    }
});
```

----------------------------------------

TITLE: TypeScript index.mts content
DESCRIPTION: This snippet shows the content of index.mts, an ECMAScript module format file. It imports modules from 'package' and 'inner' directories using both cjs and mjs extensions. Then, it exports the imported modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesDeclarationEmitWithPackageExports(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    // esm format file
    import * as cjs from "package/cjs";
    import * as mjs from "package/mjs";
    import * as type from "package";
    export const a = cjs;
    export const b = mjs;
    export const c = type;
    import * as cjsi from "inner/cjs";
    import * as mjsi from "inner/mjs";
    import * as typei from "inner";
    export const d = cjsi;
    export const e = mjsi;
    export const f = typei;
```

----------------------------------------

TITLE: Exporting Constants in TypeScript
DESCRIPTION: Defines and exports two constant values 'a' and 'b'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace2(module=umd).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const a = 1;
export const b = 2;
```

----------------------------------------

TITLE: Template Literal Types with String Pattern Validation in TypeScript
DESCRIPTION: Shows how to define and use template literal types in TypeScript to enforce specific string patterns. The examples include CSS pseudo-selector patterns, URL paths, and ID format validations with appropriate type-checking.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indexSignatures1.errors.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
type Pseudo = `&:${string}`;

const AmIPseudo1: Pseudo = '&:test';
const AmIPseudo: Pseudo = '&';  // Error

type PseudoDeclaration = { [key in Pseudo]: string };

const test: PseudoDeclaration = { 'someKey' : 'someValue' };  // Error

type FieldPattern = `/${string}`;

const path1: FieldPattern = '/one';
const path2: FieldPattern = 'two';  // Error

type PathsObject = { [P in FieldPattern]: object; };
const pathObject: PathsObject = 123;  // Error

type IdType = `${number}-${number}-${number}-${number}`
const id: IdType = '0000-0000-0000-0001';

type A = Record<IdType, string>;

const a: A = { [id]: 'test' }

let aid = a[id];
```

----------------------------------------

TITLE: Valid @satisfies Usage (T1)
DESCRIPTION: This snippet shows a valid usage of `@satisfies` where the object `t1` conforms to the type `T1`. The object has a property `a` of type `number`, which matches the definition in the JSDoc.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocSatisfiesTag12.errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
    /**
     * @satisfies {T1}
     */
    const t1 = { a: 1 };
```

----------------------------------------

TITLE: Exporting in CommonJS Format (JavaScript)
DESCRIPTION: This snippet demonstrates the correct way to export in a CommonJS format file. It uses 'module.exports' for exporting an object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsExportAssignment(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
// cjs format file
const a = {};
module.exports = a;
```

----------------------------------------

TITLE: Accessing Private Methods in Derived Classes - TypeScript
DESCRIPTION: Demonstrates the TypeScript error that occurs when trying to access a private (#) method from a derived class. The example shows how private fields with # syntax are not accessible even through inheritance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameMethodsDerivedClasses.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base {
    #prop(): number{ return  123; }
    static method(x: Derived) {
        console.log(x.#prop());
    }
}
class Derived extends Base {
    static method(x: Derived) {
        console.log(x.#prop());
    }
}
```

----------------------------------------

TITLE: For Loop with Array Destructuring in TypeScript
DESCRIPTION: A for loop that uses array destructuring with default values. It extracts 'numberA3' with a default value of -1 and collects remaining elements in 'robotAInfo' using the rest parameter syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_40

LANGUAGE: typescript
CODE:
```
for (var _30 = getRobot(), _31 = _30[0], numberA3 = _31 === void 0 ? -1 : _31, robotAInfo = _30.slice(1), i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Illustrating Type Errors with Incorrect Arguments
DESCRIPTION: This code demonstrates type errors by calling the methods `y`, `z`, `s`, and `t` with string arguments when they expect number arguments according to the JSDoc annotations. It also shows an error where `10` is assigned to `a.first` which is annotated with the type `1`. The purpose is to highlight TypeScript's type checking capabilities with JSDoc and show common mistakes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocTypeFromChainedAssignment.errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
    a.y('no') // error
        ~~~~
!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
    a.z('not really') // error
        ~~~~~~~~~~~~
!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
    A.s('still no') // error
        ~~~~~~~~~~
!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
    A.t('not here either') // error
        ~~~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
    a.first = 10 // error: '10' isn't assignable to '1'
    ~~~~~~~~
!!! error TS2322: Type '10' is not assignable to type '1'.
```

----------------------------------------

TITLE: Importing and Utilizing Modules in TypeScript
DESCRIPTION: This snippet demonstrates importing a module in TypeScript and using its exports. It shows how to import a module using the require syntax, and use the imported class within a new module. There are no specific dependencies or prerequisites besides TypeScript itself.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcemapModuleSubfolderSpecifyOutputFile/node/sourcemapModuleSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import m1 = require("ref/m1");
export var a1 = 10;
export class c1 {
    public p1: number;
}

export var instance1 = new c1();
export function f1() {
    return instance1;
}

export var a2 = m1.m1_c1;
```

----------------------------------------

TITLE: TypeScript Interface Definitions and Type Error Example
DESCRIPTION: Defines interfaces for Runtype, Num, Obj, and Constraint types with a demonstration of type incompatibility errors. Shows how generic type constraints and property requirements can cause type assignment issues.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/invariantGenericErrorElaboration.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Runtype<A> {
  constraint: Constraint<this>
  witness: A
}

interface Num extends Runtype<number> {
  tag: 'number'
}
declare const Num: Num

interface Obj<O extends { [_ in string]: Runtype<any> }> extends Runtype<{[K in keyof O]: O[K]['witness'] }> {}
declare function Obj<O extends { [_: string]: Runtype<any> }>(fields: O): Obj<O>;

interface Constraint<A extends Runtype<any>> extends Runtype<A['witness']> {
  underlying: A,
  check: (x: A['witness']) => void,
}
```

LANGUAGE: typescript
CODE:
```
const wat: Runtype<any> = Num;
const Foo = Obj({ foo: Num })
```

----------------------------------------

TITLE: Validating Type Constraints in TypeScript Function
DESCRIPTION: This TypeScript snippet illustrates an error that occurs when a generic function is invoked with type parameters that do not satisfy specified constraints. The function 'f' expects a type 'U' extending an object with a property 'a' of type 'T'. An incorrect instantiation with 'string' for 'T' and '{ a: number }' for 'U' leads to a constraint violation error. Ensure that object properties match expected types to avoid such compile-time errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/invalidConstraint1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function f<T, U extends { a: T }>() {
    return undefined;
}
f<string, { a: number }>(); // should error
          ~~~~~~~~~~~~~
```

----------------------------------------

TITLE: TypeScript Module Import/Export with Resolution Errors
DESCRIPTION: Example showing various TypeScript module import and export patterns that are generating errors due to missing module resolution configuration. The code attempts to import and export from 'foo' and 'bar' modules while also showing unused comma operator issues.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/systemModule16.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import * as x from "foo";
import * as y from "bar";
export * from "foo";
export * from "bar"
export {x}
export {y}
import {a1, b1, c1 as d1} from "foo";
export {a2, b2, c2 as d2} from "bar";

x,y,a1,b1,d1;
```

----------------------------------------

TITLE: Class Property Declarations with --isolatedDeclarations in TypeScript
DESCRIPTION: This snippet demonstrates class property declarations that require explicit type annotations when using --isolatedDeclarations, including various data types and readonly properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedDeclarationErrorsExpressions.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
export class Exported {
    public numberLet = 1;
    public numberLetBad1 = 1 + 1;
    public numberLetBad2 = Math.random();
    public numberLetBad3 = numberLet;

    public bigIntLet = 1n;
    public bigIntLetBad1 = 1n + 1n;
    public bigIntLetBad2 = time();
    public bigIntLetBad3 = bigIntLet;

    public stringLet = "s";
    public stringLetBad = "s" + "s";

    public templateLetOk1 = `s`;
    public templateLetOk2 = `s${1} - ${"S"}`;
    public templateLetOk3 = `s${1} - ${"S"} - ${false}`;
    public templateLetOk4 = `s${1 + 1} - ${"S"} - ${!false}`;


    readonly numberConst = 1;
    readonly numberConstBad1 = 1 + 1;
    readonly numberConstBad2 = Math.random();
    readonly numberConstBad3 = numberConst;

    readonly bigIntConst = 1n;
    readonly bigIntConstBad1 = 1n + 1n;
    readonly bigIntConstBad2 = time();
    readonly bigIntConstBad3 = bigIntConst;

    readonly stringConst = "s";
    readonly stringConstBad = "s" + "s";

    readonly templateConstOk1 = `s`;
    readonly templateConstNotOk2 = `s${1} - ${"S"}`;
}
```

----------------------------------------

TITLE: TypeScript Interface Definition with Generic Function
DESCRIPTION: Defines an interface `I1` with a generic function `func` that takes a callback function and returns an instance of `I1`. The callback transforms the input value `T` to type `U`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericChainedCalls.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I1<T> {
    func<U>(callback: (value: T) => U): I1<T>;
}
```

----------------------------------------

TITLE: Defining a Function with Return Type in TypeScript
DESCRIPTION: This code snippet defines a function that is expected to return a number, but currently does not return any value, which violates TypeScript's type-checking rules. The snippet illustrates the error caused when a declared return type does not correspond to the function's actual output. To resolve the issue, ensure the function returns a value of the expected type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocFunction_missingReturn.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
/** @type {function(): number} */
function f() {}
```

----------------------------------------

TITLE: Iterating with Destructuring in TypeScript
DESCRIPTION: This code snippet demonstrates iterating over the result of the `getMultiRobots()` function using a `for...of` loop. Inside the loop, destructuring is used to extract the `primary` and `secondary` properties from the `skills` property of each robot object. The primary skill (`primaryA`) is then logged to the console.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern.sourcemap.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
>>>    console.log(primaryA);
1 >^^^^
2 >    ^^^^^^^
3 >           ^
4 >            ^^^
5 >               ^
6 >                ^^^^^^^^
7 >                        ^
8 >                         ^
1 > } } of multiRobots) {
  >    
2 >    console
3 >           .
4 >            log
5 >               (
6 >                primaryA
7 >                        )
8 >                         ;
1 >Emitted(24, 5) Source(39, 5) + SourceIndex(0)
2 >Emitted(24, 12) Source(39, 12) + SourceIndex(0)
3 >Emitted(24, 13) Source(39, 13) + SourceIndex(0)
4 >Emitted(24, 16) Source(39, 16) + SourceIndex(0)
5 >Emitted(24, 17) Source(39, 17) + SourceIndex(0)
6 >Emitted(24, 25) Source(39, 25) + SourceIndex(0)
7 >Emitted(24, 26) Source(39, 26) + SourceIndex(0)
8 >Emitted(24, 27) Source(39, 27) + SourceIndex(0)
---
```

----------------------------------------

TITLE: Configuring Package Metadata with package.json
DESCRIPTION: This JSON snippet configures a package using package.json where it defines module type, privacy settings, and entry points. It ensures the project is recognized as an ESM module, thereby facilitating correct module resolution. Required fields include 'name' for identification and 'type' set to 'module'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSourceTs(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
    {
        "name": "package",
        "private": true,
        "type": "module",
        "exports": "./index.ts"
    }
```

----------------------------------------

TITLE: Defining Element Property Types in TypeScript
DESCRIPTION: This snippet provides a TypeScript type definition for a set of properties and methods, likely representing part of a DOM element interface. It includes definitions for ARIA attributes (`ariaSort`, `ariaValueMax`, etc.), the `role` attribute, various methods (`animate`, `getAnimations`, etc., typed as `unknown`), and the `nextElementSibling` property with its nested structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRecursiveInference.errors.txt#_snippet_46

LANGUAGE: TypeScript
CODE:
```
r]: any; }; ariaSort: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; ariaValueMax: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; ariaValueMin: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; ariaValueNow: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; ariaValueText: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; role: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; animate: unknown; getAnimations: unknown; after: unknown; before: unknown; remove: unknown; replaceWith: unknown; readonly nextElementSibling: { readonly attributes: any; classList: any; className: any; readonly clientHeight: any; readonly clientLeft: any; readonly clientTop: any; readonly clientWidth: any; readonly currentCSSZoom: any; id: any; innerHTML: any; readonly localName: any; readonly namespaceURI: any; onfullscreenchange: any; onfullscreenerror: any; outerHTML: any; readonly ownerDocument: any; part: any; readonly prefix: any; readonly scrollHeight: any; scrollLeft: any; scrollTop: any; readonly scrollWidth: any; readonly shadowRoot: any; slot: any; readonly tagName: any; attachShadow: any; checkVisibility: any; closest: any; computedStyleMap: any; getAttribute: any; getAttributeNS: any; getAttributeNames: any; getAttributeNode: any; getAttributeNodeNS: any; getBoundingClientRect: any; getClientRects: any; getElementsByClassName: any; getElementsByTagName: any; getElementsByTagNameNS: any; getHTML: any; hasAttribute: any; hasAttributeNS: any; hasAttributes: any; hasPointerCapture: any; insertAdjacentElement: any; insertAdjacentHTML: any; insertAdjacentText: any; matches: any; releasePointerCaptu
```

----------------------------------------

TITLE: Demonstrating TypeScript Type Comparison Errors with === and !== Operators
DESCRIPTION: This code shows TypeScript's strict type checking for equality operators (=== and !==) when comparing incompatible types. The examples illustrate how TypeScript generates TS2367 errors when comparing types that have no overlap, such as boolean vs. string or number vs. void. Only certain combinations (like enum vs. number) don't trigger errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/comparisonOperatorWithNoRelationshipPrimitiveType.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
var r7b1 = b === e;
var r7c1 = c === a;
var r7c1 = c === b;
var r7c1 = c === d;
var r7c1 = c === e;

var r7d1 = d === a;
var r7d1 = d === b;
var r7d1 = d === c;
var r7d1 = d === e;

var r7e1 = e === a; // no error, expected
var r7e1 = e === b;
var r7e1 = e === c;
var r7e1 = e === d;

// operator !==
var r8a1 = a !== b;
var r8a1 = a !== c;
var r8a1 = a !== d;
var r8a1 = a !== e; // no error, expected

var r8b1 = b !== a;
var r8b1 = b !== c;
var r8b1 = b !== d;
var r8b1 = b !== e;

var r8c1 = c !== a;
var r8c1 = c !== b;
var r8c1 = c !== d;
var r8c1 = c !== e;

var r8d1 = d !== a;
var r8d1 = d !== b;
var r8d1 = d !== c;
var r8d1 = d !== e;

var r8e1 = e !== a; // no error, expected
var r8e1 = e !== b;
var r8e1 = e !== c;
var r8e1 = e !== d;
```

----------------------------------------

TITLE: Rest Operator Errors with Invalid Types in TypeScript
DESCRIPTION: This code snippet demonstrates the TypeScript compiler's error (TS2700) when the rest operator is used with invalid argument types like generic type parameters, index access types, mapped types, union types, primitive types, null, undefined, literal types, and enums.  The rest operator can only be applied to object types. The errors highlight the type restrictions enforced by the TypeScript compiler.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/restInvalidArgumentType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    enum E { v1, v2 };
    
    function f<T extends { b: string }>(p1: T, p2: T[]) {
        var t: T;
    
        var i: T["b"];
        var k: keyof T;
    
        var mapped_generic: {[P in keyof T]: T[P]};
        var mapped: {[P in "b"]: T[P]};
    
        var union_generic: T | { a: number };
        var union_primitive: { a: number } | number;
        var intersection_generic: T & { a: number };
        var intersection_primitive: { a: number } & string;
        var num: number;
        var str: string;
        var literal_string: "string";
        var literal_number: 42;
        var e: E;
    
        var u: undefined;
        var n: null;
    
        var a: any;
    
        var {...r1} = p1;   // Error, generic type paramterre
        var {...r2} = p2;   // OK
        var {...r3} = t;   // Error, generic type paramter
        var {...r4} = i;   // Error, index access

        var {...r5} = k;   // Error, index
    
        var {...r6} = mapped_generic; // Error, generic mapped object type
        var {...r7} = mapped;  // OK, non-generic mapped type
    
        var {...r8} = union_generic;  // Error, union with generic type parameter
        var {...r9} = union_primitive;  // Error, union with generic type parameter
    
        var {...r10} = intersection_generic;  // Error, intersection with generic type parameter
        var {...r11} = intersection_primitive;  // Error, intersection with generic type parameter
    
        var {...r12} = num;  // Error
        var {...r13} = str;  // Error
    
        var {...r14} = u;  // error, undefined-only not allowed
        var {...r15} = n;  // error, null-only not allowed
    
        var {...r16} = a;  // OK
    
        var {...r17} = literal_string;  // Error
        var {...r18} = literal_number;  // Error
    
        var {...r19} = e;  // Error, enum
    }
```

----------------------------------------

TITLE: Invalid Closing Brace in JSX Attribute
DESCRIPTION: Example showing syntax error with unexpected closing brace in JSX attribute and missing closing tag
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxInvalidEsprimaTestSuite.errors.txt#2025-04-21_snippet_27

LANGUAGE: tsx
CODE:
```
<a b=}>;
```

----------------------------------------

TITLE: Defining Classes and Methods With Generics in TypeScript
DESCRIPTION: This code snippet demonstrates the declaration of multiple modules, each containing classes with methods in TypeScript. It highlights the use of generics in defining class hierarchies and methods. The pattern is seen where methods return TypeScript typed values, often utilizing generic types. The class declarations imply inheritance despite errors due to unresolved class dependencies.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_27

LANGUAGE: TypeScript
CODE:
```
module panamensis {
    export class linulus<T0, T1> extends ruatanica.hector<julianae.sumatrana, samarensis.pelurus<Lanthanum.jugularis, sagitta.walkeri>> {
        goslingi(): daubentonii.arboreus<gabriellae.amicus, dogramacii.kaiseri> { var x: daubentonii.arboreus<gabriellae.amicus, dogramacii.kaiseri>; () => { var y = this; }; return x; }
        taki(): patas.uralensis { var x: patas.uralensis; () => { var y = this; }; return x; }
        fumosus(): rendalli.moojeni<argurus.netscheri<dogramacii.aurata, dogramacii.aurata>, lavali.beisa> { var x: rendalli.moojeni<argurus.netscheri<dogramacii.aurata, dogramacii.aurata>, lavali.beisa>; () => { var y = this; }; return x; }
        rufinus(): macrorhinos.konganensis { var x: macrorhinos.konganensis; () => { var y = this; }; return x; }
        lami(): nigra.thalia<patas.uralensis, dogramacii.robustulus> { var x: nigra.thalia<patas.uralensis, dogramacii.robustulus>; () => { var y = this; }; return x; }
        regina(): trivirgatus.oconnelli { var x: trivirgatus.oconnelli; () => { var y = this; }; return x; }
        nanilla(): dammermani.siberu<lavali.xanthognathus, trivirgatus.oconnelli> { var x: dammermani.siberu<lavali.xanthognathus, trivirgatus.oconnelli>; () => { var y = this; }; return x; }
        enganus(): petrophilus.sodyi<dogramacii.aurata, argurus.oreas> { var x: petrophilus.sodyi<dogramacii.aurata, argurus.oreas>; () => { var y = this; }; return x; }
        gomantongensis(): rionegrensis.veraecrucis<caurinus.psilurus, minutus.inez<rendalli.zuluensis, rionegrensis.caniventer>> { var x: rionegrensis.veraecrucis<caurinus.psilurus, minutus.inez<rendalli.zuluensis, rionegrensis.caniventer>>; () => { var y = this; }; return x; }
    }
}
module nigra {
    export class gracilis<T0, T1> {
        weddellii(): nigra.dolichurus<dogramacii.aurata, julianae.steerii> { var x: nigra.dolichurus<dogramacii.aurata, julianae.steerii>; () => { var y = this; }; return x; }
        echinothrix(): Lanthanum.nitidus<panglima.amphibius<caurinus.megaphyllus, lavali.lepturus>, argurus.oreas> { var x: Lanthanum.nitidus<panglima.amphibius<caurinus.megaphyllus, lavali.lepturus>, argurus.oreas>; () => { var y = this; }; return x; }
        garridoi(): dogramacii.koepckeae { var x: dogramacii.koepckeae; () => { var y = this; }; return x; }
        rouxii(): nigra.gracilis<argurus.dauricus<macrorhinos.konganensis, patas.uralensis>, nigra.thalia<patas.uralensis, julianae.galapagoensis>> { var x: nigra.gracilis<argurus.dauricus<macrorhinos.konganensis, patas.uralensis>, nigra.thalia<patas.uralensis, julianae.galapagoensis>>; () => { var y = this; }; return x; }
        aurita(): sagitta.stolzmanni { var x: sagitta.stolzmanni; () => { var y = this; }; return x; }
        geoffrensis(): rionegrensis.caniventer { var x: rionegrensis.caniventer; () => { var y = this; }; return x; }
        theresa(): macrorhinos.marmosurus<argurus.netscheri<dammermani.siberu<lutreolus.foina, samarensis.pallidus>, argurus.luctuosa>, nigra.dolichurus<lavali.lepturus, samarensis.pallidus>> { var x: macrorhinos.marmosurus<argurus.netscheri<dammermani.siberu<lutreolus.foina, samarensis.pallidus>, argurus.luctuosa>, nigra.dolichurus<lavali.lepturus, samarensis.pallidus>>; () => { var y = this; }; return x; }
        melanocarpus(): julianae.albidens<dammermani.siberu<lutreolus.foina, samarensis.pallidus>, julianae.sumatrana> { var x: julianae.albidens<dammermani.siberu<lutreolus.foina, samarensis.pallidus>, julianae.sumatrana>; () => { var y = this; }; return x; }
        dubiaquercus(): dogramacii.robustulus { var x: dogramacii.robustulus; () => { var y = this; }; return x; }
        pectoralis(): julianae.sumatrana { var x: julianae.sumatrana; () => { var y = this; }; return x; }
        apoensis(): caurinus.megaphyllus { var x: caurinus.megaphyllus; () => { var y = this; }; return x; }
        grisescens(): Lanthanum.jugularis { var x: Lanthanum.jugularis; () => { var y = this; }; return x; }
        ramirohitra(): panglima.amphibius<trivirgatus.falconeri, gabriellae.echinatus> { var x: panglima.amphibius<trivirgatus.falconeri, gabriellae.echinatus>; () => { var y = this; }; return x; }
    }
}
```

----------------------------------------

TITLE: Demonstrating Duplicate Property Names in TypeScript Object Literals
DESCRIPTION: This snippet shows an object literal with duplicate property names, which TypeScript flags as an error. It illustrates TypeScript's ability to detect and prevent accidental property overwriting.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectLiteralErrors.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var e17 = { a: 0, b: 1, a: 0 };
```

----------------------------------------

TITLE: TypeScript Interface Assignment Compatibility Test
DESCRIPTION: Example showing type mismatch between an interface with a number property and an object requiring a number array. The error occurs when trying to assign an object of type interfaceWithPublicAndOptional<number,string> to a type requiring one: number[].
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability30.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module __test1__ {
    export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U; };  var obj4: interfaceWithPublicAndOptional<number,string> = { one: 1 };;
    export var __val__obj4 = obj4;
}
module __test2__ {
    export var aa:{one:number[];};
    export var __val__aa = aa;
}
__test2__.__val__aa = __test1__.__val__obj4
```

----------------------------------------

TITLE: Defining and Testing Optional Tuple Elements in TypeScript
DESCRIPTION: Demonstrates type definitions for tuples with varying levels of optional elements and tests their assignment compatibility. Includes type declarations, function parameters, and various assignment scenarios to show TypeScript's type checking behavior with optional tuple elements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/optionalTupleElements1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
type T1 = [number, string, boolean];
type T2 = [number, string, boolean?];
type T3 = [number, string?, boolean?];
type T4 = [number?, string?, boolean?];

type L1 = T1["length"];
type L2 = T2["length"];
type L3 = T3["length"];
type L4 = T4["length"];

type T5 = [number, string?, boolean];  // Error

function f1(t1: T1, t2: T2, t3: T3, t4: T4) {
    t1 = t1;
    t1 = t2;  // Error
    t1 = t3;  // Error
    t1 = t4;  // Error
    t2 = t1;
    t2 = t2;
    t2 = t3;  // Error
    t2 = t4;  // Error
    t3 = t1;
    t3 = t2;
    t3 = t3;
    t3 = t4;  // Error
    t4 = t1;
    t4 = t2;
    t4 = t3;
    t4 = t4;
}

let t2: T2;
let t3: T3;
let t4: T4;

t2 = [42, "hello"];
t3 = [42, "hello"];
t3 = [42,,true]
t3 = [42];
t4 = [42, "hello"];
t4 = [42,,true];
t4 = [,"hello", true];
t4 = [,,true];
t4 = [];
```

----------------------------------------

TITLE: Nested Switch Statement Pattern
DESCRIPTION: Demonstration of nested switch statements with shape types and exhaustive checking.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exhaustiveSwitchStatements1.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function withDefault(s1: Shape2, s2: Shape2): string {
    switch (s1.kind) {
        case "square":
            return "1";
        case "circle":
            switch (s2.kind) {
                case "square":
                    return "2";
                case "circle":
                    return "3";
                default:
                    return "never";
            }
    }
}
```

----------------------------------------

TITLE: Interface Type Assignment Errors in TypeScript
DESCRIPTION: Demonstrates various error cases when attempting to assign values to interface types i7 and i8. Shows type mismatches, invalid constructor usage, and incorrect type assertions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intTypeCheck.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
var obj76: i7 = new {};

var obj77: i8;
var obj78: i8 = {};
var obj79: i8 = new Object();
var obj80: i8 = new obj77;
var obj81: i8 = new Base;
var obj82: i8 = null;
var obj83: i8 = function () { };
//var obj84: i8 = function foo() { };
var obj85: i8 = <i8> anyVar;
var obj86: i8 = new <i8> anyVar;
var obj87: i8 = new {};
```

----------------------------------------

TITLE: Demonstrating Property Type Assignment in TypeScript Class Inheritance
DESCRIPTION: Shows two derived class implementations of a generic base class, where one implementation is valid and another causes a type error by making a required property optional. Illustrates TypeScript's strict type checking with class inheritance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classIsSubtypeOfBaseType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base<T> {
    foo: T;
}

class Derived extends Base<{ bar: string; }> {
    foo: {
        bar: string; baz: number; // ok
    }
}

class Derived2 extends Base<{ bar: string; }> {
    foo: {
        bar?: string; // error
    }
}
```

----------------------------------------

TITLE: TypeScript Class Declaration After Usage - func4()
DESCRIPTION: Function demonstrating class reference before its declaration, causing compilation errors about premature class usage
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unreachableDeclarations(preserveconstenums=true).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function func4() {
    aFunc();

    console.log(ClassA.Value);

    return;

    function aFunc() {
        console.log(ClassA.Value);
    }

    class ClassA { static Value = 1234; }
}
```

----------------------------------------

TITLE: Generic Type Narrowing with 'in' Operator
DESCRIPTION: The foo function demonstrates narrowing a generic type using object checks and the 'in' operator. It shows how TypeScript combines multiple type guards to create a more specific narrowed type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=false).errors.txt#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
function foo<A>(value: A) {
    if (typeof value === "object" && value !== null && "prop" in value) {
        value;  // A & object & Record<"prop", unknown>
    }
}
```

----------------------------------------

TITLE: Function Call Utilities with Flexible Parameter Types in TypeScript
DESCRIPTION: Utilities for invoking functions with rest parameters offer ways to handle parameter lists dynamically. Demonstrating usage of these utility functions helps in understanding how TypeScript type inference can be leveraged for flexible parameter lists.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericRestParameters1.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function call<T extends unknown[], U>(f: (...args: T) => U, ...args: T) {
    return f(...args);
}

function callr<T extends unknown[], U>(args: T, f: (...args: T) => U) {
    return f(...args);
}
```

----------------------------------------

TITLE: Interface Definitions with Base and Derived Types
DESCRIPTION: Defines a base interface and two derived interfaces with additional properties to test type compatibility rules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithNumericIndexer2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Base { foo: string; }
interface Derived extends Base { bar: string; }
interface Derived2 extends Derived { baz: string; }
```

----------------------------------------

TITLE: TypeScript: Undeclared variable in if statement
DESCRIPTION: The code snippet attempts to use the variable 'a' within an if statement without declaring it first. This results in a TypeScript error TS2304: "Cannot find name 'a'." To fix this, 'a' should be declared before being used in the conditional statement.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserIfStatement2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    if (a) {
        ~
!!! error TS2304: Cannot find name 'a'.
    }
```

----------------------------------------

TITLE: Unused TypeScript Imports with Various Import Syntaxes
DESCRIPTION: Several TypeScript import statements that generate compiler errors because the imported items are never used. Demonstrates four different import syntaxes: named import, default import with named import, namespace import, and require import.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedImports12.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { Member } from './b';
import d, { Member as M } from './b';
import * as ns from './b';
import r = require("./b");
```

----------------------------------------

TITLE: Scoped Type Declaration in Conditional Block (TypeScript)
DESCRIPTION: This snippet shows a type declaration inside a properly formed block statement, but the type is not accessible outside the block, causing a TS2304 error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeInterfaceDeclarationsInBlockStatements1.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
function f2() {
  if (true) {
    type s = string;
  }
  console.log("" as s);
}
```

----------------------------------------

TITLE: Defining Async Arrow Function with Await in Parameter - TypeScript
DESCRIPTION: This snippet attempts to define an async arrow function named 'foo'. It includes a parameter 'a' with a default value expression that uses 'await'. The TypeScript compiler reports multiple errors on this definition, highlighting issues with the syntax and usage of 'async' and 'await' within the parameter default.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncArrowFunction9_es6.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
var foo = async (a = await => await): Promise<void> => {
}
```

----------------------------------------

TITLE: Invalid Spaced Greater Than Symbol in JSX
DESCRIPTION: Example showing incorrect use of spaced '>' symbol in JSX that should be escaped as {'>'} or &gt;
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxInvalidEsprimaTestSuite.errors.txt#2025-04-21_snippet_26

LANGUAGE: tsx
CODE:
```
<a> ></a>;
```

----------------------------------------

TITLE: TypeScript Invalid Import Statement
DESCRIPTION: Import statement referencing a non-existent TypeScript file, resulting in a TS2307 error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowImportingTsExtensions(moduleresolution=node16).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import {} from "./thisfiledoesnotexist.ts";
```

----------------------------------------

TITLE: Demonstrating Function Overload Errors in TypeScript
DESCRIPTION: This code snippet contains multiple examples of incorrect function overloads in TypeScript. It covers various error scenarios including parameter initializers in overload signatures, inconsistent accessibility modifiers, export conflicts, and incompatible signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionOverloadErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
//Function overload signature with initializer
function fn1(x = 3);
function fn1() { }

//Multiple function overload signatures that are identical
function fn2a();
function fn2a();
function fn2a() {

}
function fn2b(n: number[]);
function fn2b(n: Array<number>);
function fn2b() {
}

//Multiple function overload signatures that differ only by return type
function fn3(x: string): string;
function fn3(y: string): number;
function fn3(): any {
    return null;
}

//Function overload with rest param and another with only an optional parameter
function fn6(...t: any[]);
function fn6(x?: any);
function fn6() { }

//Function overload with rest param and another with only optional parameters
function fn7(...t: any[]);
function fn7(x?: any, y?: any, z?: any);
function fn7() { }

//Function overloads that differ only by type parameter name
function fn8<T>(n: string);
function fn8<S>(n: string);
function fn8() { }

//Function overloads that differ only by type parameter name when used in parameter type annotations
function fn9<T>(n: T);
function fn9<S>(n: S);
function fn9() { }

//Function overloads that differ only by type parameter constraints
function fn10<T extends Window>();
function fn10<S extends Date>();
function fn10() { }
// (actually OK)

//Function overloads that differ only by type parameter constraints where constraints are structually identical
function fn11<T extends Window>();
function fn11<S extends typeof window>();
function fn11() { }

//Function overloads that differ only by type parameter constraints where constraints include infinitely recursive type reference
interface List<T> {
    parents: List<List<T>>;
}
function fn12<T extends List<List<any>>>();
function fn12<T extends List<any>>();
function fn12() { }

//Function overloads that differ by accessibility
class cls {
    public f();
    private f(s: string);
    f() { }

    private g(s: string);
    public g();
    g() { }
}

//Function overloads with differing export
module M {
    export function fn1();
    function fn1(n: string);
    function fn1() { } 

    function fn2(n: string);
    export function fn2();
    export function fn2() { } 
}

//Function overloads with differing ambience
declare function dfn1();
function dfn1(s: string);
function dfn1() { }

function dfn2();
declare function dfn2(s: string);
function dfn2() { }

//Function overloads with fewer params than implementation signature
function fewerParams();
function fewerParams(n: string) {
}

//Function implementation whose parameter types are not assignable to all corresponding overload signature parameters
function fn13(n: string);
function fn13(n: number) { }

//Function overloads where return types are not all subtype of implementation return type
function fn14(n: string): string;
function fn14() {
    return 3;
}

//Function overloads where return types are different infinitely recursive type reference
function fn15<T extends List<List<any>>>(): T;
function fn15<T extends List<any>>(): T;
function fn15() {
    return undefined;
}

//Function overloads which use initializer expressions
function initExpr(n = 13);
function initExpr() { }
```

----------------------------------------

TITLE: Type Assignment Error Demonstration in TypeScript
DESCRIPTION: Demonstrates type assignment errors when assigning incompatible types to an array declared as `any[]`. It highlights instances where the compiler correctly identifies the error and scenarios where it doesn't, according to the comments in the original code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arrayAssignmentTest4.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
var c3 : C3 = new C3();
var o1 = {one : 1};

var arr_any: any[] = [];

arr_any = function () { return null;} // should be an error - is

arr_any = c3; // should be an error - is
```

----------------------------------------

TITLE: Defining a Generator Function with TypeScript
DESCRIPTION: The snippet defines a generator function in TypeScript intended to yield iterables of functions. It demonstrates a type mismatch where the generator function's output does not align with the expected iterable signature. Key dependencies include TypeScript’s type system managing generator and iterator patterns. The input is a generator yielding functions operating on strings while the output is expected to produce numbers. This illustrates constraints in strict type adherence in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatorTypeCheck31.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function* g2(): Iterator<() => Iterable<(x: string) => number>> {
    yield function* () {
        yield x => x.length;
    } ()
}
```

----------------------------------------

TITLE: Array Destructuring with Tuple Type Errors
DESCRIPTION: Demonstrates array destructuring patterns and associated tuple length errors when trying to access elements beyond tuple bounds.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationsAndAssignments.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f0() {
    var [] = [1, "hello"];
    var [x] = [1, "hello"];
    var [x, y] = [1, "hello"];
    var [x, y, z] = [1, "hello"];
    var [,, x] = [0, 1, 2];
    var x: number;
    var y: string;
}
```

----------------------------------------

TITLE: Defining Complex TypeScript Type
DESCRIPTION: This code defines a TypeScript type or interface. It lists numerous properties, some of which have types that resemble the structure of the built-in String type (listing many string methods), while others are typed as 'unknown' or represent DOM element properties like 'nextElementSibling'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRecursiveInference.errors.txt#_snippet_22

LANGUAGE: TypeScript
CODE:
```
Sort: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; };
ariaValueMax: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; };
ariaValueMin: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; };
ariaValueNow: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; };
ariaValueText: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; };
role: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; };
animate: unknown;
getAnimations: unknown;
after: unknown;
before: unknown;
remove: unknown;
replaceWith: unknown;
readonly nextElementSibling: { readonly attributes: any; classList: any; className: any; readonly clientHeight: any; readonly clientLeft: any; readonly clientTop: any; readonly clientWidth: any; id: any; innerHTML: any; readonly localName: any; readonly namespaceURI: any; onfullscreenchange: any; onfullscreenerror: any; outerHTML: any; readonly ownerDocument: any; part: any; readonly prefix: any; readonly scrollHeight: any; scrollLeft: any; scrollTop: any; readonly scrollWidth: any; readonly shadowRoot: any; slot: any; readonly tagName: any; attachShadow: any; checkVisibility: any; closest: any; computedStyleMap: any; getAttribute: any; getAttributeNS: any; getAttributeNames: any; getAttributeNode: any; getAttributeNodeNS: any; getBoundingClientRect: any; getClientRects: any; getElementsByClassName: any; getElementsByTagName: any; getElementsByTagNameNS: any; getHTML: any; hasAttribute: any; hasAttributeNS: any; hasAttributes: any; hasPointerCapture: any; insertAdjacentElement: any; insertAdjacentHTML: any; insertAdjacentText: any; matches: any; releasePointerCapture: any; removeA
```

----------------------------------------

TITLE: Using Nullish Coalescing Operator in TypeScript with Various Data Types
DESCRIPTION: Demonstrates the usage of the nullish coalescing operator (??) with different data types including strings, numbers, booleans, and custom interfaces. The code shows how to provide fallback values when variables might be null or undefined, and includes an error case where the operator is used with a non-nullish left operand.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nullishCoalescingOperator1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare const a1: string | undefined | null
declare const a2: string | undefined | null
declare const a3: string | undefined | null
declare const a4: string | undefined | null

declare const b1: number | undefined | null
declare const b2: number | undefined | null
declare const b3: number | undefined | null
declare const b4: number | undefined | null

declare const c1: boolean | undefined | null
declare const c2: boolean | undefined | null
declare const c3: boolean | undefined | null
declare const c4: boolean | undefined | null

interface I { a: string }
declare const d1: I | undefined | null
declare const d2: I | undefined | null
declare const d3: I | undefined | null
declare const d4: I | undefined | null

const aa1 = a1 ?? 'whatever';
const aa2 = a2 ?? 'whatever';
const aa3 = a3 ?? 'whatever';
const aa4 = a4 ?? 'whatever';

const bb1 = b1 ?? 1;
const bb2 = b2 ?? 1;
const bb3 = b3 ?? 1;
const bb4 = b4 ?? 1;

const cc1 = c1 ?? true;
const cc2 = c2 ?? true;
const cc3 = c3 ?? true;
const cc4 = c4 ?? true;

const dd1 = d1 ?? {b: 1};
const dd2 = d2 ?? {b: 1};
const dd3 = d3 ?? {b: 1};
const dd4 = d4 ?? {b: 1};

// Repro from #34635

declare function foo(): void;

const maybeBool = false;

if (!(maybeBool ?? true)) {
    foo();
}

if (maybeBool ?? true) {
    foo();
}
else {
    foo();
}

if (false ?? true) {
    foo();
}
else {
    foo();
}

```

----------------------------------------

TITLE: Rendering Custom JSX Elements in TypeScript
DESCRIPTION: This snippet demonstrates how to render custom JSX elements using the defined classes Foo and Bar. It shows the usage of these custom elements in a JSX context within the TypeScript module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxEmit3.sourcemap.txt#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
module M {
	// Emit M.Foo
	Foo, <Foo />;
	export module S {
		// Emit M.Foo
		Foo, <Foo />;

		// Emit S.Bar
		Bar, <Bar />;
	}
}
```

----------------------------------------

TITLE: Incompatible Function Overload Signatures in TypeScript
DESCRIPTION: Example of a function with an overload signature that is not compatible with its implementation. The specialized signature with string literal 'a' is not a subtype of the implementation signature that accepts 'number'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/specializedSignatureIsNotSubtypeOfNonSpecializedSignature.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo(x: 'a');
function foo(x: number) { }
```

----------------------------------------

TITLE: Implementing Logical Assignment with Nullish Coalescing in TypeScript
DESCRIPTION: This function demonstrates the use of the ??= (nullish coalescing assignment) operator. It assigns a default arrow function to 'f' if it's undefined, then invokes it.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment5(target=esnext).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
function foo1 (f?: (a: number) => void) {
    f ??= (a => a)
    f(42)
}
```

----------------------------------------

TITLE: Implementing Non-Generic Class Inheritance in TypeScript
DESCRIPTION: Defines non-generic classes C and D, where D extends C. Demonstrates property accessors, method chaining, and an error when attempting to call a getter method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/instancePropertiesInheritedIntoClassType.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module NonGeneric {
    class C {
        x: string;
        get y() {
            return 1;
        }
        set y(v) { }
        fn() { return this; }
        constructor(public a: number, private b: number) { }
    }

    class D extends C { e: string; }

    var d = new D(1, 2);
    var r = d.fn();
    var r2 = r.x;
    var r3 = r.y;
    r.y = 4;
    var r6 = d.y(); // error
```

----------------------------------------

TITLE: Demonstrate TypeScript Namespace Value Error
DESCRIPTION: Attempts to use the `importUninst` namespace as a value when declaring the type of `x3`. This results in a TypeScript error (TS2708) because namespaces cannot be directly used as values in this context. It illustrates an incorrect way to refer to types defined within a namespace.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeofInternalModules.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var x3: typeof importUninst.P; // Error again
                   ~~~~~~~~~~~~
!!! error TS2708: Cannot use namespace 'importUninst' as a value.
```

----------------------------------------

TITLE: Function parameter initializer with previous parameter
DESCRIPTION: This snippet shows a function `f8` where parameter `bar` is initialized with `foo1` which is a previous parameter. This is allowed and does not throw an error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parameterInitializersForwardReferencing1.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
    function f8(foo1: string, bar = foo1) { }
```

----------------------------------------

TITLE: Initialize Variables with Destructuring and Defaults in JavaScript Loop
DESCRIPTION: This snippet initializes several variables (`_19` through `_24`, `nameA`, `primaryA`, `secondaryA`, and `i`) within the first part of a `for` loop. It calls `getMultiRobot()`, extracts `name` and `skills` (including nested `primary` and `secondary`), and assigns them to `nameA`, `primaryA`, and `secondaryA`, providing default string values if the source properties are `undefined`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_70

LANGUAGE: javascript
CODE:
```
for (_19 = getMultiRobot(), _20 = _19.name, nameA = _20 === void 0 ? "noName" : _20, _21 = _19.skills, _22 = _21 === void 0 ? { primary: "none", secondary: "none" } : _21, _23 = _22.primary, primaryA = _23 === void 0 ? "primary" : _23, _24 = _22.secondary, secondaryA = _24 === void 0 ? "secondary" : _24, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Demonstrating Type Parameter Assignability Constraints in TypeScript
DESCRIPTION: This function demonstrates that generic type parameters T and U are not assignable to each other without proper constraints. TypeScript generates errors when attempting direct assignments between unconstrained type parameters, as they could represent entirely unrelated types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeParameterAssignability.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo<T, U>(t: T, u: U) {
    t = u; // error
    u = t; // error
}
```

----------------------------------------

TITLE: Invalid Parameter Property Usage in TypeScript Function
DESCRIPTION: Demonstrates an incorrect attempt to use a parameter property modifier 'public' in a regular function declaration. Parameter properties are only allowed within class constructor methods in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ParameterList4.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function F(public A) {
}
```

----------------------------------------

TITLE: Using Underscore.js Collection Functions in TypeScript
DESCRIPTION: This snippet demonstrates the usage of Underscore.js collection functions like each, map, reduce, and filter in TypeScript. It shows how to iterate over arrays and objects, transform data, and filter elements based on conditions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
_.each([1, 2, 3], (num) => alert(num.toString()));
_.each({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => alert(value.toString()));

_.map([1, 2, 3], (num) => num * 3);
_.map({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => value * 3);

var sum = _.reduce([1, 2, 3], (memo, num) => memo + num, 0);

var list = [[0, 1], [2, 3], [4, 5]];
var flat = _.reduceRight(list, (a, b) => a.concat(b), []);

var even = _.find([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0);

var evens = _.filter([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0);
```

----------------------------------------

TITLE: Constraint Interface Definition
DESCRIPTION: This code defines a 'Constraint' interface that requires its type parameter to extend number, which is used in previous examples as a constraint for other interface type parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/twoGenericInterfacesWithDifferentConstraints.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
interface Constraint<T extends number> {}
```

----------------------------------------

TITLE: Default Props and Type Validation
DESCRIPTION: Shows how default props interact with TypeScript type checking, including validation of prop types and preventing invalid prop assignments
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxLibraryManagedAttributes.errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
class JustDefaultPropsWithSpecifiedGeneric extends ReactComponent<FooProps> {
    static defaultProps = {
        foo: "no",
    };
}

const x = <JustDefaultPropsWithSpecifiedGeneric foo="eh" />;
const y = <JustDefaultPropsWithSpecifiedGeneric foo="no" bar="ok" />; // error, no prop named bar
const z = <JustDefaultPropsWithSpecifiedGeneric foo={12} />; // error, wrong type
const aa = <JustDefaultPropsWithSpecifiedGeneric />;
```

----------------------------------------

TITLE: Using Block-Scoped Variable in Object Literal Property (TS2448) - TypeScript
DESCRIPTION: This snippet demonstrates error TS2448 where the block-scoped variable 'x' is used as the value for property 'a' in an object literal initializer. The declaration of 'x' using 'let' occurs after its usage, resulting in a temporal dead zone error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/blockScopedVariablesUseBeforeDef.errors.txt#_snippet_3

LANGUAGE: TypeScript
CODE:
```
function foo14() {
    let a = {
        a: x
    }
    let x
}
```

----------------------------------------

TITLE: Any Return Type Examples - TypeScript
DESCRIPTION: Functions `f8`, `f9`, and `f10` demonstrate valid usages of the `any` return type. They can return implicitly undefined or explicitly return undefined or null.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionsMissingReturnStatementsAndExpressions.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
    function f8(): any {
        // Fine since are typed any.
        return;
    }
    
    function f9(): any {
        // Fine since we are typed any and return undefined
        return undefined;
    }
    
    function f10(): void {
        // Fine since we are typed any and return null
        return null;
    }
```

----------------------------------------

TITLE: Enum and Module Declaration with Assignment Tests
DESCRIPTION: Demonstrates TypeScript enum compatibility rules with module declaration, enum definition, interface declaration and various assignment scenarios showing type checking errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enumAssignmentCompat.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module W {
    export class D { }
}

enum W {
    a, b, c,
}

interface WStatic {
    a: W;
    b: W;
    c: W;
}

var x: WStatic = W;
var y: typeof W = W;
var z: number = W; // error
var a: number = W.a;
var b: typeof W = W.a; // error
var c: typeof W.a = W.a;
var d: typeof W = 3; // error
var e: typeof W.a = 4;
var f: WStatic = W.a; // error
var g: WStatic = 5; // error
var h: W = 3;
var i: W = W.a;
i = W.a;
W.D;
var p: W.D;
```

----------------------------------------

TITLE: TypeScript Class Constructor with Module References
DESCRIPTION: Constructor function containing references to various module classes and interfaces, demonstrating nested module access patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeResolution.sourcemap.txt#2025-04-21_snippet_19

LANGUAGE: typescript
CODE:
```
constructor() {
    function QQ() {
        /* Sampling of stuff from AisIn1_1_1 */
        var a4: TopLevelModule1.SubModule1.SubSubModule1.ClassA; a4.AisIn1_1_1();
        var c1: TopLevelModule1.SubModule2.SubSubModule2.ClassA; c1.AisIn1_2_2();
        var d1: InterfaceX; d1.XisIn1_1_1();
        var c2: TopLevelModule2.SubModule3.ClassA; c2.AisIn2_3();
    }
}
```

----------------------------------------

TITLE: Accessing Static Property Before Initialization in TypeScript Class
DESCRIPTION: This example demonstrates a TypeScript error (TS2729) that occurs when trying to access a static class property before it is initialized. The errors happen both in the static property initializer and in the static block, as 'foo' is defined after these usages.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classStaticBlock9(target=es2022).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
    static bar = A.foo + 1
    static {
        A.foo + 2;
    }
    static foo = 1;
}
```

----------------------------------------

TITLE: Multiple Default Export Declarations Error in TypeScript
DESCRIPTION: Demonstrates a TypeScript error case where multiple default exports are attempted in the same file. This is invalid as only one default export is allowed per module. The example shows attempts to export a variable, class, and interface all as default.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDefaultInterfaceClassAndValue.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const foo = 1
export default foo
export default class Foo {}
export default interface Foo {}
```

----------------------------------------

TITLE: Defining Field Creation Function in TypeScript
DESCRIPTION: This snippet declares the `field` function, which is used to create a `Field` instance. It takes the source type, the type of the field, and the key as type parameters, and expects `FieldFuncArgs` as argument. This function is responsible for constructing field definitions with type information and a resolver.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/circularReferenceInReturnType2.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    declare const field: <Source, Type extends ObjectType<any>, Key extends string>(
      field: FieldFuncArgs<Source, Type>
    ) => Field<Source, Key>;
```

----------------------------------------

TITLE: Handling Abstract Class Errors in TypeScript
DESCRIPTION: This snippet addresses common TypeScript errors related to the use of 'abstract' keyword and methods. It demonstrates incorrect declarations of abstract methods and their placement in non-abstract classes, highlighting the need for correct class definitions. These errors are crucial for maintaining proper object-oriented programming principles in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asiAbstract.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
asiAbstract.ts(1,1): error TS2304: Cannot find name 'abstract'.
asiAbstract.ts(3,3): error TS1244: Abstract methods can only appear within an abstract class.

==== asiAbstract.ts (2 errors) ====
    abstract
    ~~~~~~~~
!!! error TS2304: Cannot find name 'abstract'.
    class NonAbstractClass {
      abstract s();
      ~~~~~~~~
!!! error TS1244: Abstract methods can only appear within an abstract class.
    }
    
    class C2 {
        abstract
        nonAbstractFunction() {
        }
    }
    
    class C3 {
        abstract
    }
```

----------------------------------------

TITLE: Variable Initialization with Nested Module Qualification
DESCRIPTION: The snippet initializes 'b2' as an instance of 'ClassB' declared within multiple nested modules. It later calls a method 'BisIn1_1_1' on 'b2'. Dependencies include presence of 'ClassB' in 'TopLevelModule1.SubModule1.SubSubModule1'. The key functionality is the instantiation and method invocation. Inputs and outputs involve correct module path and successful method execution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeResolution.sourcemap.txt#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
var b2: TopLevelModule1.SubModule1.SubSubModule1.ClassB;
b2.BisIn1_1_1();
```

----------------------------------------

TITLE: Declaring Rest Parameters with Type Annotations
DESCRIPTION: Demonstrates different ways of declaring rest parameters with various type annotations in TypeScript, including union types and specific array types
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration3ES5iterable.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function a1(...x: (number|string)[]) { }
function a2(...a) { }
function a3(...a: Array<String>) { }
function a4(...a: arrayString) { }
function a5(...a: stringOrNumArray) { }
```

----------------------------------------

TITLE: Invalid JSX Element Type Function Returning Number in TypeScript
DESCRIPTION: Illustrates an error case where a function 'Fnum' returning a number is used as a JSX element, which is not allowed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxElementResolution8.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
function Fnum(): number{ return 42; }
<Fnum />
```

----------------------------------------

TITLE: Multiple Simple Switch Statements
DESCRIPTION: A series of single-line switch statements with various primitive and complex types as switch expressions
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/switchStatements.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
switch ('') { }
switch (12) { }
switch (true) { }
switch (null) { }
switch (undefined) { }
switch (new Date(12)) { }
switch (new Object()) { }
switch (/[a-z]/) { }
switch ([]) { }
switch ({}) { }
switch ({ id: 12 }) { }
switch (['a']) { }
switch (<T>(x: number) => '') { }
switch ((<T>(x: T) => '')(1)) { }
```

----------------------------------------

TITLE: Demonstrating Class Declaration Order Error in TypeScript
DESCRIPTION: This code snippet shows a TypeScript error that occurs when a derived class (SubText) is defined before its base class (TextBase). The error message indicates that 'TextBase' is used before its declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classSideInheritance2.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface IText {
    foo: number;
}

interface TextSpan {}

class SubText extends TextBase {
    constructor(text: IText, span: TextSpan) {
        super();
    }
}

class TextBase implements IText {
    public foo: number;
    public subText(span: TextSpan): IText {
        return new SubText(this, span);
    }
}
```

----------------------------------------

TITLE: Implementing Static Private Class Members in TypeScript
DESCRIPTION: A TypeScript class implementation that uses static private fields, methods, and accessors. This code requires newer versions of tslib helper functions that support static private members with additional parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameStaticEmitHelpers.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export class S {
    static #a = 1;
    static #b() { this.#a = 42; }
    static get #c() { return S.#b(); }
}
```

----------------------------------------

TITLE: Defining and Using Promise Interfaces in TypeScript
DESCRIPTION: The code defines interfaces for promises (`IPromise`, `Promise`) and their variant (`IPromise2`, `Promise2`) using generic parameters for different application scenarios. It showcases their purpose by demonstrating interface declarations and the constraints when attempting to declare variables of these interfaces with incompatible types. The dependency includes TypeScript's type system, focusing on generics. This example raises a TypeScript compilation error due to type mismatches.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promiseIdentity.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface IPromise<T> {
    then<U>(callback: (x: T) => IPromise<U>): IPromise<U>;
}
interface Promise<T> {
    then<U>(callback: (x: T) => Promise<U>): Promise<U>;
}
var x: IPromise<string>;
var x: Promise<string>;


interface IPromise2<T, V> {
    then<U, W>(callback: (x: T) => IPromise2<U, W>): IPromise2<W, U>;
}
interface Promise2<T, V> {
    then<U, W>(callback: (x: V) => Promise2<U, T>): Promise2<T, W>; // Uses V instead of T in callback's parameter
}

// Ok because T in this particular Promise2 is any, as are all the U and W references.
// Also, the V of Promise2 happens to coincide with the T of IPromise2 (they are both string).
var y: IPromise2<string, number>;
var y: Promise2<any, string>;
    ~
!!! error TS2403: Subsequent variable declarations must have the same type.  Variable 'y' must be of type 'IPromise2<string, number>', but here has type 'Promise2<any, string>'.
!!! related TS6203 promiseIdentity.ts:20:5: 'y' was also declared here.
```

----------------------------------------

TITLE: Demonstrating Error in TypeScript Class Declaration
DESCRIPTION: The snippet represents a TypeScript class with a member declared using two accessibility modifiers ('public public'), which results in an error. The purpose is to show how TypeScript throws an error when encountering redundant syntax. Since the code is erroneous, it serves as a learning tool for understanding TypeScript's syntax rules. Proper class member definition should only use one accessibility modifier.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserMemberVariableDeclaration1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {\n  public public Foo;\n         ~~~~~~\n}
```

----------------------------------------

TITLE: Generic Type Constraints and Key Operations
DESCRIPTION: Complex generic function showing type relationships between different key types and their constraints. Demonstrates type checking for property access and assignment with multiple generic parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccessErrors.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function f20<T, U>(x: T | U, y: T & U, k1: keyof (T | U), k2: keyof T & keyof U, k3: keyof (T & U), k4: keyof T | keyof U) {
    x[k1];
    x[k2];
    x[k3];  // Error
    x[k4];  // Error

    y[k1];
    y[k2];
    y[k3];
    y[k4];

    k1 = k2;
    k1 = k3;  // Error
    k1 = k4;  // Error
}
```

----------------------------------------

TITLE: Mapping Arrays to Objects with Specific Type Properties in TypeScript
DESCRIPTION: Shows how TypeScript can infer types when mapping arrays to objects with specific properties. This example creates a folder content item array from a numeric array using map.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferFromGenericFunctionReturnTypes3.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
interface FolderContentItem {
    type: 'folder' | 'file';
}

let a: FolderContentItem[] = [];
a = [1, 2, 3, 4, 5].map(v => ({ type: 'folder' }));
```

----------------------------------------

TITLE: Defining Recursive Conditional Type for Awaited Promises in TypeScript
DESCRIPTION: This snippet defines a recursive conditional type '__Awaited<T>' that unwraps nested promises. It handles null, undefined, and PromiseLike types recursively.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveConditionalTypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
type __Awaited<T> =
    T extends null | undefined ? T :
    T extends PromiseLike<infer U> ? __Awaited<U> :
    T;
```

----------------------------------------

TITLE: Identity Mapped Type and Readonly<T> Compatibility in TypeScript
DESCRIPTION: Tests compatibility between Identity<U> and Readonly<U>. Both types are mutually assignable because Identity preserves the structure of U and Readonly only affects mutability at the type system level.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRelationships.errors.txt#2025-04-21_snippet_17

LANGUAGE: typescript
CODE:
```
function f62<U>(x: Identity<U>, y: Readonly<U>) {
    x = y;
    y = x;
}
```

----------------------------------------

TITLE: Extending Multiple Interfaces Locally - TypeScript
DESCRIPTION: This snippet demonstrates extending multiple interfaces from a package locally in a TypeScript file. It combines 'RequireInterface' and 'ImportInterface' to form a 'LocalInterface'. Dependencies include these interfaces being correctly defined and exported in the package. The output is the combined interface. No import assertions are involved directly here.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportModeDeclarationEmitErrors1(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
export interface LocalInterface extends RequireInterface, ImportInterface {}
```

----------------------------------------

TITLE: No Access or Calls with Unknown
DESCRIPTION: This function shows that you cannot directly access properties, elements, or call an 'unknown' type value without narrowing it down to a more specific type.  Attempting to do so results in a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownType1.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
    // No property accesses, element accesses, or function calls
    
    function f11(x: unknown) {
        x.foo;  // Error
        x[5];  // Error
        x();  // Error
        new x();  // Error
    }
```

----------------------------------------

TITLE: Array Destructuring with Default Values and For Loop in TypeScript
DESCRIPTION: This snippet demonstrates advanced array destructuring in TypeScript, assigning default values and then overwriting them. It's followed by the beginning of a for loop. The code showcases TypeScript's ability to handle complex destructuring patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_29

LANGUAGE: TypeScript
CODE:
```
for (let [numberA2 = -1, nameA2 = "name", skillA2 = "skill"] = [2, "trimmer", "trimming"], numberA2 = -1, numberA2 = -1, nameA2 = "name", nameA2 = "name", skillA2 = "skill", skillA2 = "skill"] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Handling Type Error in Array Initialization - TypeScript
DESCRIPTION: This snippet demonstrates an error where a variable 'autoToken' is mistakenly defined as a one-dimensional array while attempting to initialize it with a multi-dimensional array. The error message indicates the type mismatch due to the assignment of 'number[][]' to 'number[]'. Required dependencies include TypeScript setup for compiling and type checking.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserObjectCreation1.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
var autoToken: number[] = new Array<number[]>(1);
```

----------------------------------------

TITLE: TypeScript Validation of Read-Only Properties
DESCRIPTION: This TypeScript code imports a JavaScript module and attempts to assign values to properties, triggering TypeScript errors when assigning to read-only properties. It demonstrates TypeScript's compile-time checks and type safety features. The `require("./")` imports the JavaScript module, which defines the object with properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkObjectDefineProperty.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
"// Validate in TS as simple validations would usually be interpreted as more special assignments
    import x = require("./");
    x.name;
    x.middleInit;
    x.lastName;
    x.zip;
    x.houseNumber;
    x.zipStr;
    
    x.name = \"Another\";
    x.zip = 98123;
    x.zipStr = \"OK\";
    
    x.lastName = \"should fail\";
    x.houseNumber = 12; // should also fail
    x.zipStr = 12; // should fail
    x.middleInit = \"R\"; // should also fail"
```

----------------------------------------

TITLE: Union of Different Number of Signatures
DESCRIPTION: This snippet creates a union of types with differing numbers of construct signatures. One type has one signature, while the other has two. This results in errors because TypeScript cannot resolve a common construct signature for the union.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionTypeConstructSignatures.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
    var unionOfDifferentNumberOfSignatures: { new (a: number): number; } | { new (a: number): Date; new (a: string): boolean; };
    new unionOfDifferentNumberOfSignatures(); // error - no call signatures
    new unionOfDifferentNumberOfSignatures(10); // error - no call signatures
    new unionOfDifferentNumberOfSignatures("hello"); // error - no call signatures
```

----------------------------------------

TITLE: Destructuring MultiRobot Skills JavaScript
DESCRIPTION: The snippet demonstrates destructuring of an object into variables `nameA`, `primaryA`, and `secondaryA` using the `getMultiRobot` function. This operation sorts robot attributes into a temporary map for further usage. Note: Requires `getMultiRobot` function to execute correctly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_24

LANGUAGE: JavaScript
CODE:
```
getMultiRobot()                          
nameA                                 
skills: { primary: primaryA, secondary: secondaryA }
primaryA                                       , secondary: 
secondaryA                                                                               } } = getMultiRobot(), 
i                                                                                                  = 
i < 1; 
i++ ) {

```

----------------------------------------

TITLE: Extending Class with Super Access in TypeScript
DESCRIPTION: A derived class 'c3' that extends 'c2' and attempts to access a property via super, which causes an error. The class overrides some methods and properties from the base class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserAstSpans1.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
class c3 extends c2 {
    constructor() {
        super(10);
        this.p1 = super.c2_p1;
                        ~~~~~
!!! error TS2340: Only public and protected methods of the base class are accessible via the 'super' keyword.
    }
    /** c3 p1*/
    public p1: number;
    /** c3 f1*/
    public f1() {
    }
    /** c3 prop*/
    public get prop() {
        return 10;
    }
    public nc_p1: number;
    public nc_f1() {
    }
    public get nc_prop() {
        return 10;
    }
}
```

----------------------------------------

TITLE: Complex TypeScript Type Annotations and Initializations
DESCRIPTION: This snippet shows more complex TypeScript type annotations including generic types, object types with function properties, and nested object types. It demonstrates TypeScript's ability to handle intricate type structures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
var x235: (s: Base[]) => any; x235 = n => { var n: Base[]; return null; };
var x236: Genric<Base>; x236 = { func: n => { return [d1, d2]; } };
var x237: { n: () => Base[]; } = { n: () => [d1, d2] };
var x238: { n: () => Base[]; } = { n: function() { return [d1, d2] } };
var x239: { n: () => Base[]; } = { n: function named() { return [d1, d2] } };
var x240: { n: { (): Base[]; }; } = { n: () => [d1, d2] };
var x241: { n: { (): Base[]; }; } = { n: function() { return [d1, d2] } };
var x242: { n: { (): Base[]; }; } = { n: function named() { return [d1, d2] } };
var x243: { n: Base[]; } = { n: [d1, d2] };
var x244: { n: Array<Base>; } = { n: [d1, d2] };
var x245: { n: { [n: number]: Base; }; } = { n: [d1, d2] };
var x246: { n: {n: Base[]; } ; } = { n: { n: [d1, d2] } };
var x247: { n: (s: Base[]) => any; } = { n: n => { var n: Base[]; return null; } };
var x248: { n: Genric<Base>; } = { n: { func: n => { return [d1, d2]; } } };
```

----------------------------------------

TITLE: Strategy Function Implementation - TypeScript
DESCRIPTION: This snippet implements the 'strategy' function that takes a strategy name and a generator function. It returns a generator function which updates the lastStrategyApplied property and yields the next state based on the input.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatorTypeCheck62.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export function strategy<T extends StrategicState>(stratName: string, gen: (a: T) => IterableIterator<T | undefined, void>): (a: T) => IterableIterator<T | undefined, void> {
    return function*(state) {
        for (const next of gen(state)) {
            if (next) {
                next.lastStrategyApplied = stratName;
            }
            yield next;
        }
    }
}
```

----------------------------------------

TITLE: Implementing Class with Function Overload Error in TypeScript
DESCRIPTION: This snippet demonstrates TypeScript errors that occur when attempting to merge a class declaration with a function overload without proper ambient declaration. It shows three specific errors: trying to implement an overload list for a class, missing function implementation, and merging function bodies with non-ambient classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callOverloads1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Foo { // error
    bar1() { /*WScript.Echo("bar1");*/ }

    constructor(x: any) {
        // WScript.Echo("Constructor function has executed");
    }
}

function Foo(); // error
function F1(s:string);
function F1(a:any) { return a;}

var f1 = new Foo("hey");


f1.bar1();
Foo();
```

----------------------------------------

TITLE: Correct Class Extension with Compatible String Indexer in TypeScript
DESCRIPTION: Shows a correct class extension where the derived class B2 has a string indexer returning a more specific type than its base class A.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithStringIndexer3.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
class B2 extends A {
    [x: string]: Derived2; // ok
}
```

----------------------------------------

TITLE: TypeScript Deep Path Type Narrowing
DESCRIPTION: Implements complex type narrowing functionality for deeply nested object structures using conditional types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictSubtypeAndNarrowing.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
type DistributedKeyOf<T> = T extends unknown ? keyof T : never;

type NarrowByKeyValue<ObjT, KeyT extends PropertyKey, ValueT> = ObjT extends unknown
    ? KeyT extends keyof ObjT
        ? ValueT extends ObjT[KeyT]
            ? ObjT & Readonly<Record<KeyT, ValueT>>
            : never
        : never
    : never;
```

----------------------------------------

TITLE: package.json Configuration (Inner Package)
DESCRIPTION: This snippet displays the package.json file for the 'inner' package.  It's marked as a module and the "exports" field defines how modules within 'inner' are accessible. Specifically, any JavaScript file within 'inner' can be imported directly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSpecifierGenerationPattern(module=node16).errors.txt#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
    "name": "inner",
    "private": true,
    "type": "module",
    "exports": {
        "./*.js": "./*.js"
    }
}
```

----------------------------------------

TITLE: Destructuring with Default Values (TypeScript)
DESCRIPTION: This snippet demonstrates destructuring assignment with default values in TypeScript. It shows how to assign default values to variables during destructuring when the source array might not have enough elements. This avoids `undefined` values and provides a fallback.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
		[, [ 
			primarySkillA = "primary",
			secondarySkillA = "secondary"
		] = ["skill1", "skill2"]]

		[
			primarySkillA = "primary",
			secondarySkillA = "secondary"
		] = ["skill1", "skill2"]

		[
			primarySkillA = "primary",
			secondarySkillA = "secondary"
		] =
										[
										"skill1"
										,
										"skill2"
										]

										
										primarySkillA = "primary"
										
										primarySkillA
										=
																"primary"
										
										,
										
										secondarySkillA = "secondary"
										
										secondarySkillA
										=
																"secondary"
```

----------------------------------------

TITLE: Defining Decorator Function in TypeScript
DESCRIPTION: This snippet declares a decorator function 'dec' that can be applied to method parameters. It takes the target object, property key, and parameter index as arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/decoratorOnClassMethodThisParameter.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare function dec(target: Object, propertyKey: string | symbol, parameterIndex: number): void;
```

----------------------------------------

TITLE: Arithmetic Operation Type Error with Union Type (Undefined | Object)
DESCRIPTION: This snippet demonstrates a TypeScript error (TS2363 and TS18050) that arises when attempting to use a union type containing 'undefined' and an object as the right-hand side of an arithmetic operation. The TypeScript compiler requires the right-hand side operand to be of type 'any', 'number', 'bigint' or an enum type and also doesn't allow direct usage of 'undefined'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arithmeticOperatorWithUndefinedValueAndInvalidOperands.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
var r10c3 = undefined | {};
```

----------------------------------------

TITLE: Defining Class Hierarchy and Interface for TypeScript Function Type Compatibility Testing
DESCRIPTION: This code establishes a class hierarchy with Base, Derived, and other classes, along with an interface A that defines various generic function types. This structure is used to test TypeScript's assignment compatibility rules for function types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithCallSignatures6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// checking assignment compatibility relations for function types. All valid

class Base { foo: string; }
class Derived extends Base { bar: string; }
class Derived2 extends Derived { baz: string; }
class OtherDerived extends Base { bing: string; }

interface A {
    a: <T>(x: T) => T[];
    a2: <T>(x: T) => string[];
    a3: <T>(x: T) => void;
    a4: <T,U>(x: T, y: U) => string;
    a5: <T,U>(x: (arg: T) => U) => T;
    a6: <T extends Base>(x: (arg: T) => Derived) => T;
    a11: <T>(x: { foo: T }, y: { foo: T; bar: T }) => Base;
    a15: <T>(x: { a: T; b: T }) => T[];
    a16: <T extends Base>(x: { a: T; b: T }) => T[];
}
```

----------------------------------------

TITLE: Defining Date and Event Types in TypeScript
DESCRIPTION: This snippet defines a Date interface and an Event namespace with a generic type T. These types are exported for use in other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedModulesShadowGlobalTypeNotValue(isolatedmodules=false,verbatimmodulesyntax=true).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export interface Date {
    day: number;
    month: number;
    year: number;
}

export namespace Event {
    export type T = any;
}
```

----------------------------------------

TITLE: Greeter Class Definition
DESCRIPTION: This snippet defines a Greeter class with a constructor that takes a greeting string and a greet method that returns an HTML string with the greeting. It shows a simple class structure with a constructor and a method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
 "class Greeter {\n    constructor(public greeting: string) {\n    }\n\n    greet() {\n        return \"<h1>\" + this.greeting + \"</h1>\";\n    }\n}"
```

----------------------------------------

TITLE: Type Assertion on Object Literal in TypeScript
DESCRIPTION: This snippet declares a variable `c12t2` and assigns it an object literal with a property `n` set to 1.  The object literal is type-asserted to the `IFoo` interface, indicating that the compiler should treat the object as an instance of `IFoo`. This demonstrates how to type-assert an object literal.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#2025-04-21_snippet_38

LANGUAGE: typescript
CODE:
```
var c12t2 = ({
    n: 1
});
```

----------------------------------------

TITLE: Importing and Exporting Modules in TypeScript
DESCRIPTION: This TypeScript snippet shows an attempt to import a 'Thing' from 'inner/other.js', which results in a module not found error. It also demonstrates exporting a constant 'a' using dynamic import. The snippet highlights the need for proper module resolution in the TypeScript configuration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSpecifierGenerationConditions(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// esm format file
import { Thing } from "inner/other.js"; // should fail
                          ~~~~~~~~~~~~~~~~
export const a = (await import("inner")).x();
```

----------------------------------------

TITLE: Correct ESM Module Implementation in JavaScript
DESCRIPTION: This snippet shows a correct implementation of an ECMAScript module (ESM) in JavaScript. It defines functions and variables without conflicting with reserved identifiers, and exports them properly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsGeneratedNameCollisions(module=nodenext).errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
// esm format file
function require() {}
const exports = {};
class Object {}
export const __esModule = false;
export {require, exports, Object};
```

----------------------------------------

TITLE: Importing CJS Module in TypeScript
DESCRIPTION: This snippet demonstrates an attempt to import a CommonJS module without using an extension in a TypeScript file. The import is expected to fail because the module './foo' cannot be found, leading to an error regarding missing type declarations. It highlights a common issue faced when importing modules without explicit file extensions in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionWithoutExtension7.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import foo = require("./foo"); // should error, should not ask for extension
```

----------------------------------------

TITLE: CFA with Uninitialized Let Variable
DESCRIPTION: Demonstrates control flow analysis for a 'let' variable without type annotation or initializer, showing how TypeScript infers union types based on assignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowNoImplicitAny.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function f1() {
    let x;
    if (cond) {
        x = 1;
    }
    if (cond) {
        x = "hello";
    }
    const y = x;  // string | number | undefined
}
```

----------------------------------------

TITLE: Type Compatibility with Indexed Access Types
DESCRIPTION: Functions f90, f91, and f92 demonstrate type compatibility between different forms of indexed access types. The code shows how TypeScript handles assignability between direct types, keyof types, and type parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
type S2 = {
    a: string;
    b: string;
};

function f90<T extends S2, K extends keyof S2>(x1: S2[keyof S2], x2: T[keyof S2], x3: S2[K]) {
    x1 = x2;
    x1 = x3;
    x2 = x1;
    x2 = x3;
    x3 = x1;
    x3 = x2;
    x1.length;
    x2.length;
    x3.length;
}

function f91<T, K extends keyof T>(x: T, y: T[keyof T], z: T[K]) {
    let a: {};
    a = x;
    ~
!!! error TS2322: Type 'T' is not assignable to type '{}'.
!!! related TS2208 keyofAndIndexedAccess.ts:314:14: This type parameter might need an `extends {}` constraint.
    a = y;
    ~
!!! error TS2322: Type 'T[keyof T]' is not assignable to type '{}'.
!!! error TS2322:   Type 'T[string] | T[number] | T[symbol]' is not assignable to type '{}'.
!!! error TS2322:     Type 'T[string]' is not assignable to type '{}'.
    a = z;
    ~
!!! error TS2322: Type 'T[K]' is not assignable to type '{}'.
!!! error TS2322:   Type 'T[keyof T]' is not assignable to type '{}'.
!!! error TS2322:     Type 'T[string] | T[number] | T[symbol]' is not assignable to type '{}'.
!!! error TS2322:       Type 'T[string]' is not assignable to type '{}'.
}

function f92<T, K extends keyof T>(x: T, y: T[keyof T], z: T[K]) {
    let a: {} | null | undefined;
    a = x;
    a = y;
    a = z;
}
```

----------------------------------------

TITLE: TypeScript Compiler Configuration
DESCRIPTION: This snippet contains the TypeScript configuration settings that affect module resolution. The 'moduleResolution' and 'moduleSuffixes' options define how modules are resolved during compilation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleResolutionWithSuffixes_threeLastIsBlank4.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
{
    "compilerOptions": {
        "moduleResolution": "node",
        "traceResolution": true,
        "moduleSuffixes": ["-ios", "__native", ""]
    }
}
```

----------------------------------------

TITLE: Invalid 'using' Declaration and Null Property Access in TypeScript
DESCRIPTION: This code snippet demonstrates two TypeScript errors: an invalid binding pattern in a 'using' declaration and an attempt to access a property on null. The 'using' declaration does not allow destructuring patterns, and null has no properties to access.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/usingDeclarations.7.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
{
    using a = null,
          {b} = null,
          c = null;
}
```

----------------------------------------

TITLE: Module D: TypeScript Self-Reference Export
DESCRIPTION: Imports and re-exports moduleE content using self alias.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveExportAssignmentAndFindAliasedType6.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import self = require("recursiveExportAssignmentAndFindAliasedType6_moduleE");
export = self;
```

----------------------------------------

TITLE: Invalid Assignments to TypeScript Module, Class, Enum, and Function
DESCRIPTION: This snippet shows attempts to perform arithmetic and assignment operations on module, class, enum, and function identifiers, which are not allowed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/compoundAssignmentLHSIsValue.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
module M { export var a; }
M *= value;
M += value;

C *= value;
C += value;

enum E { }
E *= value;
E += value;

foo *= value;
foo += value;
```

----------------------------------------

TITLE: Accessing 'this' before super() in class constructors
DESCRIPTION: These examples demonstrate the error when accessing 'this' before calling super() in a derived class constructor. TypeScript requires super() to be called before any reference to 'this' in derived classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisInInvalidContexts.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class BaseErrClass {
    constructor(t: any) { }
}

class ClassWithNoInitializer extends BaseErrClass {
    t;
    //'this' in optional super call
    constructor() {
        super(this); // Error
    }
}

class ClassWithInitializer extends BaseErrClass {
    t = 4;
    //'this' in required super call
    constructor() {
        super(this); // Error
    }
}
```

----------------------------------------

TITLE: Implementing OR Logical Assignment (||=) with Undefined Arrays in TypeScript
DESCRIPTION: Function demonstrating the OR logical assignment operator with chained assignments for possibly undefined arrays. This operator ensures that if 'results' is falsy, it gets assigned 'results1', and if both are falsy, an empty array is assigned.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment7(target=esnext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function foo1(results: number[] | undefined, results1: number[] | undefined) {
    (results ||= results1 ||= []).push(100);
}
```

----------------------------------------

TITLE: Handling TypeScript Generic Types
DESCRIPTION: This TypeScript snippet shows multiple errors where generic types are used without specifying required type arguments. The example demonstrates declaring variables, functions, and interfaces with the generic types C and E without providing type parameters, which leads to compilation errors. The snippet illustrates the importance of providing type arguments to maintain type safety and avoid TS2314 errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericTypeReferenceWithoutTypeArgument.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```

    // it is an error to use a generic type without type arguments
    // all of these are errors 
    
    class C<T> {
        foo: T;
    }
    
    var c: C;
           ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
    
    var a: { x: C };
                ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
    var b: { (x: C): C };
                 ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
                     ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
    var d: { [x: C]: C };
              ~
!!! error TS1268: An index signature parameter type must be 'string', 'number', 'symbol', or a template literal type.
                 ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
                     ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
    
    var e = (x: C) => { var y: C; return y; }
                ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
                               ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
    
    function f(x: C): C { var y: C; return y; }
                  ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
                      ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
                                 ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
    
    var g = function f(x: C): C { var y: C; return y; }
                          ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
                              ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
                                         ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
    
    class D extends C {
                    ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
    }
    
    interface I extends C {}
                        ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
    
    module M {
        export class E<T> { foo: T }
    }
    
    class D2 extends M.E { }
                     ~~~
!!! error TS2314: Generic type 'E<T>' requires 1 type argument(s).
    class D3<T extends M.E> { }
                       ~~~
!!! error TS2314: Generic type 'E<T>' requires 1 type argument(s).
    interface I2 extends M.E { }
                         ~~~
!!! error TS2314: Generic type 'E<T>' requires 1 type argument(s).
    
    function h<T extends C>(x: T) { }
                         ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
    function i<T extends M.E>(x: T) { }
                         ~~~
!!! error TS2314: Generic type 'E<T>' requires 1 type argument(s).
    
    var j = <C>null;
             ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
    var k = <M.E>null;
             ~~~
!!! error TS2314: Generic type 'E<T>' requires 1 type argument(s).

```

----------------------------------------

TITLE: Implementing Abstract Method in Derived Class
DESCRIPTION: Demonstrates a valid implementation of an abstract class by providing implementations for all abstract methods in the base class.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classAbstractInstantiations2.errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
class E extends B { // okay -- implements abstract method
    bar() { return 1; }
}
```

----------------------------------------

TITLE: Defining Decorated Class and Using Object Spread in TypeScript
DESCRIPTION: This snippet demonstrates the declaration of a decorated class 'A' and the use of object spread syntax. It includes a TypeScript decorator and showcases ES6+ features.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emitHelpersWithLocalCollisions(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare var dec: any, __decorate: any;
@dec export class A {
}

const o = { a: 1 };
const y = { ...o };
```

----------------------------------------

TITLE: ESM Module Declaration File
DESCRIPTION: This TypeScript ESM declaration file (.d.mts) shows a valid module pattern with proper imports and exports across different module formats without errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesPackagePatternExportsExclude(module=node16).errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
// esm format file
import * as cjs from "inner/cjs/index";
import * as mjs from "inner/mjs/index";
import * as type from "inner/js/index";
export { cjs };
export { mjs };
export { type };
```

----------------------------------------

TITLE: Type Assertion Error in TypeScript Function foo2
DESCRIPTION: This code snippet defines another function `foo2` using JSDoc type annotations. It attempts to return a value of type `T` but includes conflicting type assertions. It first casts the return value to `T` and then to `string`. This creates a type mismatch, because the explicit cast to string after the spread is not compatible with the expected generic type `T`, leading to the TS2322 error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arrowExpressionBodyJSDoc.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
    /**
     * @template T
     * @param {T|undefined} value value or not
     * @returns {T} result value
     */
    const foo2 = value => /** @type {string} */(/** @type {T} */({ ...value }));
                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```

----------------------------------------

TITLE: Implementing Chained Method Calls with Type Parameter Constraints in TypeScript
DESCRIPTION: Demonstrates a chain pattern with generic type parameters constrained to a base type. The code shows how TypeScript enforces type safety when moving through an inheritance hierarchy, allowing downcast operations but throwing errors when attempting to upcast in a chain.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/chainedCallsWithTypeParameterConstrainedToOtherTypeParameter.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Chain<T extends A> {
    constructor(public value: T) { }
    then<S extends T>(cb: (x: T) => S): Chain<S> {
        return null;
    }
}

class A {
    x;
}
class B extends A {
    y;
}
class C extends B {
    z;
}

// Ok to go down the chain, but error to try to climb back up
(new Chain(new A)).then(a => new B).then(b => new C).then(c => new B).then(b => new A);
```

----------------------------------------

TITLE: Handling Unused Local Imports
DESCRIPTION: This example shows how TypeScript flags imports that are not used in the code. It demonstrates rules around noUnusedLocals and the necessity of removing or using all declared imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importsNotUsedAsValues_error.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { A, B } from './a'; // noUnusedLocals error only
~~~~~~~~~~~~~~~~~~~~~~~~~~~
```

----------------------------------------

TITLE: Defining Local Interfaces with Imports in TypeScript
DESCRIPTION: This snippet imports interfaces from a module using specific resolution modes and combines them into local interfaces. It highlights TypeScript's import assertions and the merging of imported content into local constructs. Dependencies include the 'pkg' module that must export the specified interfaces. Input: none; Output: 'LocalInterface' and 'Loc' interfaces.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportModeDeclarationEmit1(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { RequireInterface } from "pkg" assert { "resolution-mode": "require" };
import type { ImportInterface } from "pkg" assert { "resolution-mode": "import" };

export interface LocalInterface extends RequireInterface, ImportInterface {}

import {type RequireInterface as Req} from "pkg" assert { "resolution-mode": "require" };
import {type ImportInterface as Imp} from "pkg" assert { "resolution-mode": "import" };

export interface Loc extends Req, Imp {}

export type { RequireInterface } from "pkg" assert { "resolution-mode": "require" };
export type { ImportInterface } from "pkg" assert { "resolution-mode": "import" };
```

----------------------------------------

TITLE: Destructuring Assignment Array JavaScript
DESCRIPTION: The code snippet demonstrates a simple array destructuring assignment to initialize a variable with the first element of an array. It relies on correct ECMAScript syntax and assumes an environment supporting ES6. The snippet involves using array indexes to fetch values and is bound to two variables 'x' and 'y, z' from arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPattern5.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
var x = [1, 2][0];
```

LANGUAGE: javascript
CODE:
```
var _a = [1, 2], y = _a[0], z = _a[1];
```

----------------------------------------

TITLE: Defining a numeric enum (TypeScript)
DESCRIPTION: Defines a simple numeric enum `Enum` with two members, `No` and `Yes`, assigned explicit numeric values 0 and 1 respectively. Enums are used here as arguments for decorators.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/decoratorUsedBeforeDeclaration.errors.txt#_snippet_11

LANGUAGE: TypeScript
CODE:
```
enum Enum {
  No = 0,
  Yes = 1,
}
```

----------------------------------------

TITLE: Invalid Type Arguments with Non-Generic Class
DESCRIPTION: Example showing incorrect usage of type arguments with a non-generic class. This results in a TypeScript compiler error since the class C is not defined as generic.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/instantiateNonGenericTypeWithTypeArguments.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    x: string;
}

var c = new C<number>();
```

----------------------------------------

TITLE: Number Type Extraction with Template Literals
DESCRIPTION: Shows how to extract number types from string literals using template literals with the infer keyword. Demonstrates relationships between numbers and other types including enums and bigint.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypes4.errors.txt#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
// #region number
// number > enum
type PNumber0 = "0" extends `${infer T extends number | NonLiteralEnum}` ? T : never; // 0

// number > number-literal-enum
type PNumber1 = "0" extends `${infer T extends number | NumberLiteralEnum}` ? T : never; // 0

// number > bigint
type PNumber2 = "0" extends `${infer T extends number | bigint}` ? T : never; // 0

// number > bigint-literal
type PNumber3 = "0" extends `${infer T extends number | 0n}` ? T : never; // 0
// #endregion number
```

----------------------------------------

TITLE: Export Assignment in TypeScript Module
DESCRIPTION: Shows incorrect usage of 'export =' syntax when targeting ECMAScript modules. This pattern is not compatible with ES modules and should use 'export default' instead.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importNonExportedMember7.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Foo {}
export = Foo;
```

----------------------------------------

TITLE: Invalid Tuple Assignment - Incorrect Length in TypeScript
DESCRIPTION: This code attempts to assign a tuple with four elements (string, number, boolean, boolean) to `i1.tuple1`, which is defined as a tuple of only two elements (string, number). This results in a TypeScript error because the source tuple has more elements than the target tuple type allows.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCallWithTupleType.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
i1.tuple1 = ["foo", 5, false, true];
```

----------------------------------------

TITLE: Object Initialization with Interface Type - TypeScript
DESCRIPTION: Creates an object c3t12 implementing IBar interface with a foo property containing an empty object cast to IFoo.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
var c3t12 = {
    foo: ({})
};
```

----------------------------------------

TITLE: Configuring TypeScript Compiler Options in JSON
DESCRIPTION: This snippet configures TypeScript compiler options using a JSON structure, defining the base URL for project files and specifying path mapping patterns. It outlines a limitation with wildcard patterns in the 'paths' key, signaling potential configuration errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/pathMappingBasedModuleResolution2_classic.errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
    "compilerOptions": {
        "baseUrl": "./src",
        "paths": {
            "*1*": [ "*2*" ]
            ~~~~~
!!! error TS5061: Pattern '*1*' can have at most one '*' character.
                     ~~~~~
!!! error TS5062: Substitution '*2*' in pattern '*1*' can have at most one '*' character.
        }
    }
}
```

----------------------------------------

TITLE: Implementing FunctionExpression with Multiple Return Statements in TypeScript
DESCRIPTION: Demonstrates function expressions with multiple return statements, showing how TypeScript infers the return type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionImplementations.errors.txt#2025-04-21_snippet_4

LANGUAGE: TypeScript
CODE:
```
var n = function () {
    return 3;
    return 5;
}();

class Base { private m; }
class Derived extends Base { private q; }
var b: Base;
var b = function () {
    return new Base(); return new Derived();
} ();

var a = function f() {
    return new Base(); return new Derived(); return f(); // ?
} ();
```

----------------------------------------

TITLE: TypeScript Compilation Error: Module Not Found
DESCRIPTION: This error (TS2307) indicates that the TypeScript compiler cannot find the specified module. This usually happens when the module path is incorrect, or the module is not installed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node16).errors.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
"index.js(74,21): error TS2307: Cannot find module './' or its corresponding type declarations."

```

LANGUAGE: TypeScript
CODE:
```
"index.mjs(14,22): error TS2307: Cannot find module './' or its corresponding type declarations."

```

LANGUAGE: TypeScript
CODE:
```
"index.mjs(74,21): error TS2307: Cannot find module './' or its corresponding type declarations."

```

----------------------------------------

TITLE: Reporting Undeclared Variable Errors in TypeScript
DESCRIPTION: This snippet demonstrates TypeScript's error reporting for undeclared variables.  The TypeScript compiler identifies and reports errors when variables are used without prior declaration within a variable declaration statement. This ensures that variables are properly defined before being used in the code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserVariableDeclaration1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
    		var selection = a, 
    		                ~
!!! error TS2304: Cannot find name 'a'.
    			position = b,
    			           ~
!!! error TS2304: Cannot find name 'b'.
    			model = c,
    			        ~
!!! error TS2304: Cannot find name 'c'.
    			support = d;
    			          ~
!!! error TS2304: Cannot find name 'd'.
```

----------------------------------------

TITLE: Defining Package Exports in package.json
DESCRIPTION: This JSON snippet defines the package metadata and specifies conditional exports for the 'pkg' module, mapping 'import' and 'require' conditions to different entry points (`./import.js` and `./require.js`). This is standard Node.js package configuration for dual CommonJS/ES Module support.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportTypeModeDeclarationEmitErrors1(module=nodenext).errors.txt#_snippet_0

LANGUAGE: JSON
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "exports": {
        "import": "./import.js",
        "require": "./require.js"
    }
}
```

----------------------------------------

TITLE: Defining TypeScript Classes with Private Members
DESCRIPTION: This snippet demonstrates multiple TypeScript class declarations with various private members, including methods, properties, getters, and setters. It showcases different usage patterns and includes an example of an unused private member that triggers a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedPrivateMembers.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Test1 {
    private initializeInternal() {
    }

    public test() {
        var x = new Test1();
        x.initializeInternal();
    }
}

class Test2 {
    private p = 0;
    public test() {
        var x = new Test2();
        x.p;
    }
}

class Test3 {
    private get x () {
        return 0;
    }

    public test() {
        var x = new Test3();
        x.x;
    }
}

class Test4 {
    private set x(v) {
        v;
    }

    public test() {
        var x = new Test4();
        x.x;
    }
}

class Test5<T> {
    private p: T;
    public test() {
        var x = new Test5<number>();
        x.p;
    }
}

class Test6 {
    private get a() {
        return 0;
    }
    private set a(v) {
        v;
    }
    private b = 0;

    public test() {
        var x = new Test6();
        x.a++;
    }
}
```

----------------------------------------

TITLE: Method Decorator Type Error Example - TypeScript
DESCRIPTION: Example showing incorrect implementation of a method decorator where the decorator signature and return type don't match TypeScript's requirements. The decorator expects 1 parameter but will receive 3 at runtime, and returns an incompatible type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/decoratorOnClassMethod8.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare function dec<T>(target: T): T;

class C {
    @dec method() {}
}
```

----------------------------------------

TITLE: Interface with Invalid Computed Property Type (TS)
DESCRIPTION: This code defines an interface `I` with a computed property name using `Symbol.keyFor` as its type. The TypeScript compiler flags this as an error (TS2464) because the type of the computed property name must be 'string', 'number', 'symbol', or 'any'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/symbolProperty59.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I {
    [Symbol.keyFor]: string;
}
```

----------------------------------------

TITLE: Defining Class with Private Fields and Methods in TypeScript
DESCRIPTION: This snippet defines a class 'Foo' with private instance and static fields and methods. It demonstrates how these private members can be used with the 'in' operator.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privateNameInInExpressionTransform(target=es2022).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class Foo {
    #field = 1;
    #method() {}
    static #staticField= 2;
    static #staticMethod() {}

    check(v: any) {
        #field in v; // expect Foo's 'field' WeakMap
        #method in v; // expect Foo's 'instances' WeakSet
        #staticField in v; // expect Foo's constructor
        #staticMethod in v; // expect Foo's constructor
    }
}
```

----------------------------------------

TITLE: Class with Invalid Computed Property in TypeScript
DESCRIPTION: This snippet demonstrates a TypeScript class 'C' with a computed property that attempts to initialize the property name with a non-literal value. This results in TS1166 because computed properties in class declarations must have a simple literal type or a 'unique symbol' type. It also causes a TS2304 error due to the undefined variable 'x'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indexSignatureWithInitializer.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
"class C {\n    [x = 0]: string\n}"
```

----------------------------------------

TITLE: Static Member Initialization in Base Class
DESCRIPTION: Demonstrates initializing static members using this keyword and basic arithmetic operations within a class
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeOfThisInStaticMembers7(target=es5).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    static a = 1;
    static b = this.a + 1;
}
```

----------------------------------------

TITLE: Type Guard Function with Mismatched Parameter Types
DESCRIPTION: This function incorrectly tries to use a type guard to assert that a parameter of type A is actually of type B.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeGuardFunctionErrors.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function hasNonMatchingParameterType1(x: A): x is B {
    return true;
}
```

----------------------------------------

TITLE: CommonJS TypeScript Declaration File with Import Error (node_modules/inner/index.d.cts)
DESCRIPTION: Shows a CommonJS TypeScript declaration file with an error when importing an ECMAScript module. It suggests using dynamic import for 'inner/mjs/index'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJsPackagePatternExports(module=node16).errors.txt#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
// cjs format file
import * as cjs from "inner/cjs/index";
import * as mjs from "inner/mjs/index";
import * as type from "inner/js/index";
export { cjs };
export { mjs };
export { type };
```

----------------------------------------

TITLE: Static Utility Methods Interface Definition
DESCRIPTION: Defines a TypeScript interface for static utility methods including chain, map, reduce, filter, etc. with support for both array and dictionary operations and method overloading.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
export interface Static {
    <T>(list: T[]): WrappedArray<T>;
    <T>(list: Dictionary<T>): WrappedDictionary<T>;
    <T extends Function>(func: T): WrappedFunction<T>;
    <T>(obj: T): WrappedObject<T>;

    chain<T>(list: T[]): ChainedArray<T>;
    chain<T>(list: Dictionary<T>): ChainedDictionary<T>;
    chain<T>(obj: T): ChainedObject<T>;

    each<T>(list: T[], iterator: Iterator_<T, void>, context?: any): void;
    each<T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void;
    forEach<T>(list: T[], iterator: Iterator_<T, void>, context?: any): void;
    forEach<T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void;

    // ... additional method definitions
```

----------------------------------------

TITLE: Module Declaration of Mover and Shaker
DESCRIPTION: This snippet declares a module named MoversAndShakers containing a Mover class and a Shaker interface, which are supposed to represent the moving and shaking functionalities. It shows the definitions within a module scope, which are intended to be used later while extending interfaces.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfacePropertiesWithSameName2.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// Inside a module
declare module MoversAndShakers {
    export class Mover {
        move(): void;
        getStatus(): { speed: number; };
    }
    export interface Shaker {
        shake(): void;
        getStatus(): { frequency: number; };
    }
}
```

----------------------------------------

TITLE: Defining Custom Type in TypeScript
DESCRIPTION: Exports a custom type 'Data' that can be either string or boolean, with an example variable initialization
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitInferredTypeAlias5.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export type Data = string | boolean;
let obj: Data = true;
```

----------------------------------------

TITLE: Demonstrating TypeScript Error for Implicit 'any' Type in Abstract Getter
DESCRIPTION: This code snippet shows an abstract class with a getter method lacking a return type annotation, which results in an implicit 'any' type error. It also includes a child class that implements the abstract method correctly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyMissingSetAccessor.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
abstract class Parent
{
    public abstract get message();
}

class Child extends Parent {
    public get message() {
        return "";
    }
}
```

----------------------------------------

TITLE: Assigning Number to String Variable in JavaScript with TypeScript Check
DESCRIPTION: This code snippet shows a JavaScript file using the @ts-check directive to enable TypeScript type checking. It demonstrates a type error where a number is assigned to a variable initially declared as a string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsFiles2.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
// @ts-check
var x = "string";
x = 0;
```

----------------------------------------

TITLE: Parameter Type Mismatch in Generic Component Callback Function
DESCRIPTION: This code shows a type error when the callback function parameter type doesn't match the inferred generic type. The component infers T as number from the values array, but the callback expects a string parameter.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxStatelessFunctionComponentsWithTypeArguments2.errors.txt#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
let i = <InferParamComponent values={[1, 2, 3, 4]} selectHandler={(val: string) => { }} />;
```

----------------------------------------

TITLE: Higher-Order Generic Function with Callback Parameter
DESCRIPTION: Demonstrates a generic function that takes a callback function and an argument, showcasing flexible type inference and function composition
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCallWithObjectTypeArgsAndConstraints3.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
function f3<T extends Base>(y: (a: T) => T, x: T) {
    return y(null);
}

var r4 = f3(x => x, new Base());
var r5 = f3(x => x, new Derived());
var r6 = f3(x => x, null);
```

----------------------------------------

TITLE: Handling JSON Import Errors in TypeScript Modules
DESCRIPTION: This snippet highlights the error messages related to improper JSON file imports in TypeScript modules when using ECMAScript module syntax. It indicates that a 'type: "json"' import attribute is required for JSON files when using the 'NodeNext' module setting. It emphasizes the restrictions on named imports and type-only imports from JSON files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesJson(module=nodenext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
/main.mts(2,22): error TS1543: Importing a JSON file into an ECMAScript module requires a 'type: "json"' import attribute when 'module' is set to 'NodeNext'.
/main.mts(3,19): error TS1543: Importing a JSON file into an ECMAScript module requires a 'type: "json"' import attribute when 'module' is set to 'NodeNext'.
/main.mts(7,21): error TS1543: Importing a JSON file into an ECMAScript module requires a 'type: "json"' import attribute when 'module' is set to 'NodeNext'.
/main.mts(9,47): error TS2857: Import attributes cannot be used with type-only imports or exports.
/main.mts(10,10): error TS1544: Named imports from a JSON file into an ECMAScript module are not allowed when 'module' is set to 'NodeNext'.
/main.mts(12,9): error TS2339: Property 'version' does not exist on type '{ default: { version: number; }; }'.
```

LANGUAGE: typescript
CODE:
```
/loosey.cts(1,36): error TS2856: Import attributes are not allowed on statements that compile to CommonJS 'require' calls.
/loosey.cts(6,9): error TS2339: Property 'default' does not exist on type '{ version: number; }'.
```

----------------------------------------

TITLE: Class with Readonly Props and Type Intersection
DESCRIPTION: A sample class pattern that freezes props and demonstrates using intersection types with generics. The code shows how to merge object types while preserving type safety.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#2025-04-21_snippet_20

LANGUAGE: typescript
CODE:
```
class SampleClass<P> {
    public props: Readonly<P>;
    constructor(props: P) {
        this.props = Object.freeze(props);
    }
}

interface Foo {
    foo: string;
}

declare function merge<T, U>(obj1: T, obj2: U): T & U;

class AnotherSampleClass<T> extends SampleClass<T & Foo> {
    constructor(props: T) {
        const foo: Foo = { foo: "bar" };
```

----------------------------------------

TITLE: Type mismatch in multiline arrow function - TypeScript
DESCRIPTION: This code snippet illustrates a similar type error as the previous example, but within a multiline arrow function. The function `f` still expects a function returning a `number`, but the multiline arrow function explicitly returns `void` (or implicitly does not return anything). This results in a TS2345 error, indicating that `void` cannot be assigned to `number`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arrowFunctionErrorSpan.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    function f(a: () => number) { }
    
    // multiline, body
    f(() => {
    
    });

```

----------------------------------------

TITLE: Unresolved JSX Element Usage in TypeScript
DESCRIPTION: This snippet shows TypeScript errors when using an unresolved JSX element, both with and without props.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxElementType.errors.txt#2025-04-21_snippet_6

LANGUAGE: TypeScript
CODE:
```
<Unresolved />;
<Unresolved foo="abc" />;
```

----------------------------------------

TITLE: Usage of React Component with Only DefaultProps
DESCRIPTION: This snippet demonstrates various usages of the 'JustDefaultProps' React component, showing correct prop passing and intentional errors to illustrate TypeScript's type checking for components with only default props.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxLibraryManagedAttributes.errors.txt#2025-04-21_snippet_5

LANGUAGE: TSX
CODE:
```
const k = <JustDefaultProps foo={12} />;
const l = <JustDefaultProps foo={12} bar="ok" />; // error, no prop named bar
const m = <JustDefaultProps foo="no" />; // error, wrong type
```

----------------------------------------

TITLE: JSDoc Array Type - Correct Usage with Type Argument
DESCRIPTION: This snippet shows the correct usage of the `Array` type in JSDoc. The `numberArray` variable is declared as an `Array<number>`, which satisfies the type checker since the generic type `Array` receives a specific type argument.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocArrayObjectPromiseNoImplicitAny.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    /** @type {Array<number>} */
    var numberArray = [5];
```

----------------------------------------

TITLE: Importing React Components with TypeScript - JSX Error
DESCRIPTION: This snippet imports React components while specifying JSX import source and describes handling specific types for JSX elements. It also demonstrates an error message encountered when the required Preact module path is missing. The code includes references to type definitions for React and uses props to pass attributes to the elements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxJsxsCjsTransformKeyPropCustomImportPragma(jsx=react-jsx).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// react.tsx
/// <reference path="/lib/react16.d.ts" />
/* @jsxImportSource react */
import "./preact";
const props2 = { answer: 42 }
const a2 = <div key="foo" {...props2}>text</div>;
const b2 = <div {...props2} key="bar">text</div>;

export {};
```

----------------------------------------

TITLE: Type Guards with Getters and Setters in TypeScript
DESCRIPTION: This snippet demonstrates using type guards with getters and setters. It defines a variable `x` that can be either a string or a number. Inside an `if` statement, it checks if `x` is a string using `typeof x === 'string'`. If it is, it defines an object with a getter, setter, and method that operate on `x` as a string (using `toUpperCase`). This ensures that the getter, setter and method are only called when `x` is known to be a string.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/gettersAndSetters.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
    "// Repro from #45006
    const x: string | number = Math.random() < 0.5 ? \"str\" : 123;
    if (typeof x === \"string\") {
      let obj = {
        set prop(_: any) { x.toUpperCase(); },
        get prop() { return x.toUpperCase() },
        method() { return x.toUpperCase() }
      }
    }"
```

----------------------------------------

TITLE: Debugging TypeScript Syntax Errors in Class Methods
DESCRIPTION: This code snippet demonstrates a TypeScript class with methods, focusing on syntax errors in the 'f1' method. The compiler highlights issues with an incomplete if statement and missing parentheses.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserErrorRecoveryIfStatement2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Foo {
  f1() {
    if (a
  }
  f2() {
  }
  f3() {
  }
}
```

----------------------------------------

TITLE: Demonstrating TypeScript Errors with Empty Generic Type Arguments
DESCRIPTION: This code demonstrates two TypeScript errors that occur when a generic class is used without specifying required type arguments. The compiler produces TS2314 (missing required type argument) and TS1099 (empty type argument list) errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emptyGenericParamList.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class I<T> {}
var x: I<>;
```

----------------------------------------

TITLE: Incorrectly Re-exporting a Type-Only Declaration in TypeScript
DESCRIPTION: Demonstrates the error TS1289 that occurs when re-exporting a type-only declaration without using 'import type' syntax when 'isolatedModules' is enabled. The proper fix is to use 'import type' as shown in the c.ts file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportDeclaration(isolatedmodules=true).errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { A } from './a';
export = A;
```

----------------------------------------

TITLE: Implementing Extension Methods with Access Control Violations
DESCRIPTION: Demonstrates how TypeScript enforces access control when implementing extension methods on classes. The code showcases error cases where attempting to access private and protected members from extension methods is disallowed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisTypeAccessibility.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
MyClass.prototype.extension1 = function (this: MyClass, p: number) { 
    this.p = p; // Error: Property 'p' is private
    this.pp = p;
    this.ppp = p;
    MyClass.sp = p; // Error: Property 'sp' is private
    MyClass.spp = p; // Error: Property 'spp' is protected
    MyClass.sppp = p;
}

MyClass.prototype.extension2 = function<T extends MyClass> (this: T, p: number) { 
    this.p = p; // Error: Property 'p' is private
    this.pp = p;
    this.ppp = p;
    MyClass.sp = p; // Error: Property 'sp' is private
    MyClass.spp = p; // Error: Property 'spp' is protected
    MyClass.sppp = p;
}

function extension3<T extends MyClass> (this: T, p: number) { 
    this.p = p; // Error: Property 'p' is private
    this.pp = p;
    this.ppp = p;
    MyClass.sp = p; // Error: Property 'sp' is private
    MyClass.spp = p; // Error: Property 'spp' is protected
    MyClass.sppp = p;
}

MyClass.prototype.extension3 = extension3;
```

----------------------------------------

TITLE: Object with Function Property - TypeScript
DESCRIPTION: Initializes variable c3t13 as an object cast to IFoo interface with a function property f that takes number and string parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
var c3t13 = ({
    f: function (i, s) { return s; }
});
```

----------------------------------------

TITLE: Defining Module m1 in TypeScript
DESCRIPTION: This snippet defines a module (m1.ts) consisting of a variable, a class with a property, and a function returning an instance of the class. No external dependencies are required, but this module uses TypeScript's module and class capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootAbsolutePathSimpleSpecifyOutputFile/node/mapRootAbsolutePathSimpleSpecifyOutputFile.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Defining Public Classes in TypeScript
DESCRIPTION: This snippet defines a public class 'c_public' which includes a single property 'foo'. It serves as a public interface for external consumption. No external dependencies are needed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/privacyTopLevelAmbientExternalModuleImportWithoutExport.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// Public elements
export class c_public {
    foo: string;
}
```

----------------------------------------

TITLE: Defining and Extending Interfaces in TypeScript
DESCRIPTION: This snippet defines several interfaces, demonstrating interface extension and property definitions. It includes examples of correct and incorrect interface extensions, which TypeScript will validate.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceInheritance.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I1 {
    i1P1: number;
    i1P2(): void;
}

interface I2 extends I1 {
    i2P1: string;
}

interface I3 {
    i2P1: string; // has a member from i2P1, but not from I1
}

interface I4 {
	one: number;
}

interface I5 {
	one: string;
}
```

----------------------------------------

TITLE: Interface with Optional Properties in TypeScript
DESCRIPTION: Definition of an interface IFoo with a required id property and optional name and print properties. Demonstrates typical interface structure with mixed required and optional members.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/optionalPropertiesTest.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface IFoo
{
    id: number;
    name?: string;
    print?(): void;
}
```

----------------------------------------

TITLE: Defining Class with Required Properties - TypeScript
DESCRIPTION: This snippet defines a class constructor that requires two properties: 'one' of type T and 'two' of type U. An object of this class is instantiated with valid arguments, demonstrating how required properties work in TypeScript classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatability39.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
module __test2__ {
    export class classWithTwoPublic<T,U> { constructor(public one: T, public two: U) {} }
    var x2 = new classWithTwoPublic(1, "a");
    export var __val__x2 = x2;
}
```

----------------------------------------

TITLE: Defining a Non-exported Interface in Typescript
DESCRIPTION: This snippet defines a non-exported interface named NonExportedInterfaceQ without any methods or properties, intended to serve as a private contract within the module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeResolution.sourcemap.txt#2025-04-21_snippet_33

LANGUAGE: typescript
CODE:
```
interface NonExportedInterfaceQ { }
```

----------------------------------------

TITLE: Creating Mixin Functions for Class Extension in TypeScript
DESCRIPTION: Defines two mixin functions (mixB and mixB2) that extend classes with additional protected and private properties. mixB works with any constructor while mixB2 is constrained to work with constructors of type A.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mixinPrivateAndProtected.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function mixB<T extends Constructor<{}>>(Cls: T) {
    return class extends Cls {
        protected ptd: number = 10;
        private pvt: number = 0;
    };
}

function mixB2<T extends Constructor<A>>(Cls: T) {
    return class extends Cls {
        protected ptd: number = 10;
    };
}
```

----------------------------------------

TITLE: Missing Property Error in TypeScript Class (Method Context)
DESCRIPTION: This snippet demonstrates a TypeScript error that occurs when attempting to access a property that is not defined on a class within a method's scope. The code tries to access `this._store` in the `foo` method of the `Bar` class, but `_store` is not yet defined at this point.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertyOrdering.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
    class Bar {
          public foo() {
    
                return this._store.length;   // shouldn't be an error
                            ~~~~~~
!!! error TS2339: Property '_store' does not exist on type 'Bar'.
    
          }

```

----------------------------------------

TITLE: Uppercase Mapped Type Function
DESCRIPTION: Implements mapped type with uppercase key transformation using utility type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeConstraints2.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
type Mapped3<K extends string> = { [P in K as Uppercase<P>]: { a: P } };

function f3<K extends string>(obj: Mapped3<K>, key: Uppercase<K>) {
    const x: { a: K } = obj[key];
}
```

----------------------------------------

TITLE: Defining a Generic Function in TypeScript
DESCRIPTION: This snippet defines a generic function 'id' that returns the input parameter 'x'. This function is exported as 'result', which is invoked with a template string. The snippet demonstrates generic types in TypeScript and how to export a constant using the function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/taggedTemplateWithoutDeclaredHelper.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function id<T>(x: T) {
  return x;
}

export const result = id `hello world`;\n
```

----------------------------------------

TITLE: Implementing Constructor in Class B3
DESCRIPTION: This snippet demonstrates a proper implementation through class 'B3', where the constructor is used to initialize the property 'x', adhering to the requirements of class 'A'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocImplements_properties.errors.txt#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
/** @implements {A}*/
class B3 {
    constructor() { this.x = 10 }
}
```

----------------------------------------

TITLE: Call Expression with Missing Type Argument in TypeScript
DESCRIPTION: This code snippet demonstrates a TypeScript error case where a function call has incorrectly formatted generic type arguments. The code attempts to call a function named 'Foo' with generic type parameters, but includes an empty type argument between commas and references undefined identifiers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callExpressionWithMissingTypeArgument1.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
Foo<a,,b>();
```

----------------------------------------

TITLE: TypeScript Enum Case Sensitivity Example
DESCRIPTION: Demonstrates how TypeScript handles case-sensitive enum property access and provides suggestions. The example shows an error when accessing 'bit_2' instead of the correctly defined 'BIT_2' enum property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exactSpellingSuggestion.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
enum U8 {
    BIT_0 = 1 << 0,
    BIT_1 = 1 << 1,
    BIT_2 = 1 << 2
}

U8.bit_2
```

----------------------------------------

TITLE: Assigning Variables from Nested Array in TypeScript
DESCRIPTION: This snippet demonstrates assigning multiple variables (nameMB, primarySkillB, secondarySkillB) by accessing elements from a nested array (_k). It first assigns the array elements to intermediate variables (_k, _l) and then uses those to assign the final variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementArrayBindingPattern3.sourcemap.txt#_snippet_26

LANGUAGE: TypeScript
CODE:
```
_k = ["trimmer", ["trimming", "edging"]], nameMB = _k[0], _l = _k[1], primarySkillB = _l[0], secondarySkillB = _l[1];
```

----------------------------------------

TITLE: Iterating Over Robots
DESCRIPTION: This snippet demonstrates a for-of loop that iterates through an array of robot objects, each with defined skills. The primary and secondary skill attributes are destructured and assigned within the loop from each robot's skills property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
for ({ skills: { primary: primaryA = "primary", secondary: secondaryA = "secondary" } =
    { primary: "nosKill", secondary: "noSkill" } } of
     <MultiRobot[]>[{ name: "mower", skills: { primary: "mowing", secondary: "none" } },
             { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } }]
```

----------------------------------------

TITLE: Invalid Index Signature Examples in TypeScript
DESCRIPTION: Shows multiple examples of invalid index signature implementations that trigger TypeScript compiler errors. These include optional parameters, rest parameters, and multiple parameters in index signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indexSignatureTypeCheck.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface indexErrors {
    [p2?: string];
       ~
!!! error TS1019: An index signature parameter cannot have a question mark.
    [...p3: any[]];
     ~~~
!!! error TS1017: An index signature cannot have a rest parameter.
    [p4: string, p5?: string];
     ~~
!!! error TS1096: An index signature must have exactly one parameter.
    [p6: string, ...p7: any[]];
     ~~
!!! error TS1096: An index signature must have exactly one parameter.
}
```

----------------------------------------

TITLE: Implicit Any Array Type in TypeScript
DESCRIPTION: This code snippet demonstrates an implicit `any[]` type assignment in TypeScript. The `twices` property within the `Installer` class is initialized as an empty array `[]`.  Because no explicit type is given, TypeScript infers the type to be `any[]`. TypeScript raises error TS7008, warning about the lack of an explicit type definition for the `twices` array, which implicitly defaults to `any[]`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeFromJSConstructor.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
        this.twices = []
        ~~~~~~~~~~~~~~~~
!!! error TS7008: Member 'twices' implicitly has an 'any[]' type.

```

----------------------------------------

TITLE: TypeScript Module with Named Export Only
DESCRIPTION: Module that exports a class Foo as a named export without providing a default export.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowSyntheticDefaultImports3.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export class Foo {
	member: string;
}
```

----------------------------------------

TITLE: Iterator Object Declarations and Await Using Implementation in TypeScript
DESCRIPTION: Demonstrates the usage of await using declarations with different iterator types. Shows both valid cases (iterator objects with dispose methods) and invalid cases (plain iterators without dispose methods). Includes class definition for custom iterator and various built-in iterator examples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitUsingDeclarationsWithIteratorObject.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare const i: Iterator<string, undefined>;
declare const io: IteratorObject<string, undefined, unknown>;
declare const g: Generator<string, void>;

class MyIterator extends Iterator<string> {
    next() { return { done: true, value: undefined }; }
}

async function f() {
    // should pass
    await using it0 = io;
    await using it1 = g;
    await using it2 = Iterator.from(i)
    await using it3 = new MyIterator();
    await using it4 = [].values();
    await using it5 = new Map<string, string>().entries();
    await using it6 = new Set<string>().keys();

    // should fail
    await using it7 = i;
}
```

----------------------------------------

TITLE: Valid and Invalid Uses of 'this' in Type Predicates in Object Literals
DESCRIPTION: Demonstrates two cases of type predicates in object literals: one valid case where 'this' is the target being narrowed to a specific type, and one invalid case where 'this' is used as the type being narrowed to. The second case generates a TypeScript error as 'this' types are only available in non-static class or interface members.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisPredicateInObjectLiteral.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// Should be OK
const foo2 = {
    isNumber(): this is { b: string } {
        return true;
    },
};

// Still an error
const foo3 = {
    isNumber(x: any): x is this {
        return true;
    },
};
```

----------------------------------------

TITLE: Defining and Using Readonly and Mutable Interfaces - TypeScript
DESCRIPTION: This code snippet defines multiple TypeScript interfaces with readonly and mutable properties, demonstrating union types and their implications on property assignment. The purpose is to highlight TypeScript's error checking on assignment to readonly properties, providing a practical example of compile-time type safety. The snippet requires TypeScript and a basic understanding of TypeScript interfaces and union types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionTypeReadonly.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Base {
    readonly value: number;
}
interface Identical {
    readonly value: number;
}
interface Mutable {
    value: number;
}
interface DifferentType {
    readonly value: string;
}
interface DifferentName {
    readonly other: number;
}
let base: Base;
base.value = 12 // error, lhs can't be a readonly property
let identical: Base | Identical;
identical.value = 12; // error, lhs can't be a readonly property
let mutable: Base | Mutable;
mutable.value = 12; // error, lhs can't be a readonly property
let differentType: Base | DifferentType;
differentType.value = 12; // error, lhs can't be a readonly property
let differentName: Base | DifferentName;
differentName.value = 12; // error, property 'value' doesn't exist
```

----------------------------------------

TITLE: Advanced Mapped Type with Conditional Type Inference
DESCRIPTION: Shows a complex mapped type with conditional type inference, supporting different type behaviors based on input type conditions
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reverseMappedPartiallyInferableTypes.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
type Mapped2<T> = {
    [K in keyof T]: [T[K], unknown extends T ? unknown : (arg: T) => boolean];
}
```

----------------------------------------

TITLE: Using the Poisoned Component and Demonstrating Type Errors
DESCRIPTION: This snippet illustrates examples of using the 'Poisoned' component with both valid and invalid props. It shows how passing an empty object and incorrect types leads to TypeScript errors. The comments indicate each type error that occurs, providing a reference for troubleshooting prop issues.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxSpreadAttributesResolution2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const obj = {};

// OK
<Poisoned {...{x: "ok", y: "2"}} />;

// Error
let p = <Poisoned {...obj} />;
             ~~~~~~~~
!!! error TS2739: Type '{}' is missing the following properties from type 'PoisonedProp': x, y
let y = <Poisoned />;
             ~~~~~~~~
!!! error TS2739: Type '{}' is missing the following properties from type 'PoisonedProp': x, y
let z = <Poisoned x y/>;
                      ~
!!! error TS2322: Type 'boolean' is not assignable to type 'string'.
!!! related TS6500 file.tsx:4:5: The expected type comes from property 'x' which is declared here on type 'IntrinsicAttributes & IntrinsicClassAttributes<Poisoned> & PoisonedProp & { children?: ReactNode; }'
                        ~
!!! error TS2322: Type 'true' is not assignable to type '"2"'.
!!! related TS6500 file.tsx:5:5: The expected type comes from property 'y' which is declared here on type 'IntrinsicAttributes & IntrinsicClassAttributes<Poisoned> & PoisonedProp & { children?: ReactNode; }'
let w = <Poisoned {...{x: 5, y: "2"}}/>;
             ~~~~~~~~
```

LANGUAGE: typescript
CODE:
```
!!! error TS2322: Type '{ x: number; y: "2"; }' is not assignable to type 'PoisonedProp'.
!!! error TS2322:   Types of property 'x' are incompatible.
!!! error TS2322:     Type 'number' is not assignable to type 'string'.
let w1 = <Poisoned {...{x: 5, y: "2"}} X="hi" />;
                                           ~
!!! error TS2322: Type '{ X: string; x: number; y: "2"; }' is not assignable to type 'IntrinsicAttributes & IntrinsicClassAttributes<Poisoned> & PoisonedProp & { children?: ReactNode; }'.
!!! error TS2322:   Property 'X' does not exist on type 'IntrinsicAttributes & IntrinsicClassAttributes<Poisoned> & PoisonedProp & { children?: ReactNode; }'. Did you mean 'x'?
```

----------------------------------------

TITLE: Defining TypeScript Classes with Lambda Function Initializers
DESCRIPTION: This snippet defines two TypeScript classes, Test and Test1, with instance and static members initialized using lambda functions. It demonstrates correct and incorrect ways of accessing variables within these lambda functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classMemberInitializerWithLamdaScoping.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare var console: {
    log(msg?: any): void;
};
class Test {
    constructor(private field: string) {
    }
    messageHandler = () => {
        var field = this.field;
        console.log(field); // Using field here shouldnt be error
    };
    static field: number;
    static staticMessageHandler = () => {
        var field = Test.field;
        console.log(field); // Using field here shouldnt be error
    };
}

var field1: string;
class Test1 {
    constructor(private field1: string) {
    }
    messageHandler = () => {
        console.log(field1); // But this should be error as the field1 will resolve to var field1 
                    ~~~~~~
!!! error TS2301: Initializer of instance member variable 'messageHandler' cannot reference identifier 'field1' declared in the constructor.
                             // but since this code would be generated inside constructor, in generated js
                             // it would resolve to private field1 and thats not what user intended here. 
    };
    static staticMessageHandler = () => {
        console.log(field1); // This shouldnt be error as its a static property
    };
}
```

----------------------------------------

TITLE: Correct Use of JSDoc Typedef with Properties in JavaScript
DESCRIPTION: This snippet shows a correct definition of a typedef for a 'Person' object using JSDoc. The typedef is followed by a @property tag to outline the expected structure. The code segment also includes the creation of a 'person' instance adhering to the defined typedef, demonstrating proper usage.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocTypedefMissingType.errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
/**
 * @typedef Person
 * @property {string} name
 */

/** @type Person */
const person = { name: "" };
```

----------------------------------------

TITLE: Overloaded Function Declaration
DESCRIPTION: Declares an overloaded function `foo` with three different signatures.  Each overload accepts a function as an argument, with specific input and output types. The purpose is to showcase overload resolution based on the argument type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overloadresolutionWithConstraintCheckingDeferred.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
"declare function foo(arg: (x: D) => number): string;\ndeclare function foo(arg: (x: C) => any): string;\ndeclare function foo(arg: (x: B) => any): number;"
```

----------------------------------------

TITLE: Invoking Possibly Undefined Function in TypeScript
DESCRIPTION: This snippet demonstrates an error when attempting to invoke a function that is initially undefined. It illustrates the TypeScript error TS2722, which indicates that the object being invoked may not be defined. To avoid this issue, ensure that the function is properly assigned before invocation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleExportDuplicateAlias.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
exports.apply = undefined;
function a() { }
exports.apply()
~~~~~~~~~~~~~
!!! error TS2722: Cannot invoke an object which is possibly 'undefined'.
exports.apply = a;
exports.apply()
```

----------------------------------------

TITLE: Defining an Object Type with Function Properties in TypeScript
DESCRIPTION: This code defines an object type `ObjType` with properties `x` and `y`, both of which are function types. The `x` property takes a number and returns a string, while the `y` property takes a string and returns a number. This code then defines an object that implements that type with lambda functions that contains an unused comma operator.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parenthesizedContexualTyping2.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
type ObjType = { x: (p: number) => string; y: (p: string) => number };
var obj1: ObjType = { x: x => (x, undefined), y: y => (y, undefined) };
var obj2: ObjType = ({ x: x => (x, undefined), y: y => (y, undefined) });
```

----------------------------------------

TITLE: Generic Function with Extract Type Conditions
DESCRIPTION: Functions demonstrating usage of Extract type with multiple type parameters and error handling for type mismatches.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/conditionalTypes2.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
function f20<T>(x: Extract<Extract<T, Foo>, Bar>, y: Extract<T, Foo & Bar>, z: Extract2<T, Foo, Bar>) {
    fooBar(x);
    fooBar(y);
    fooBar(z);
}

function f21<T>(x: Extract<Extract<T, Foo>, Bar>, y: Extract<T, Foo & Bar>, z: Extract2<T, Foo, Bar>) {
    fooBat(x);
    fooBat(y);
    fooBat(z);
}
```

----------------------------------------

TITLE: @satisfies with Unknown Property Error (T2)
DESCRIPTION: This snippet demonstrates an error with `@satisfies`. The object `t6` has a property `b` which is not defined in `T2`, resulting in a TypeScript error. This reinforces how `@satisfies` enforces that only properties defined in the specified type are allowed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocSatisfiesTag12.errors.txt#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
    /**
     * @satisfies {T2}
     */
    const t6 = { a: 'test', b: 'test' };
                            ~
```

----------------------------------------

TITLE: TypeScript Class with Unused Private Methods
DESCRIPTION: Example class showing TypeScript compiler errors for unused private methods and local variables. The code demonstrates how TypeScript identifies unused private methods and variables, raising TS6133 errors for declarations that are never read.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unusedPrivateMethodInClass4.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class greeter {
    private function1() {
        var y = 10;
    }

    private function2() {
        var y = 10;
    }

    public function3() {
        var y = 10;
        this.function2();
    }
}
```

----------------------------------------

TITLE: Module and Class Definition in TypeScript
DESCRIPTION: This snippet shows the definition of a module 'ruatanica' containing a generic class 'hector' with two type parameters. This demonstrates TypeScript's namespace and module system for organizing code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/resolvingClassDeclarationWhenInBaseTypeResolution.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
module ruatanica {
  export class hector<T0, T1> {
    humulis() : julianae.steerii { var x : julianae.steerii; () => { var y = this; }; return x; }
    eurycerus() : panamensis.linulus<ruatanica.Praseodymium<Lanthanum.jugularis, dammermani.melanops>, lavali.wilsoni> { var x : panamensis.linulus<ruatanica.Praseodymium<Lanthanum.jugularis, dammermani.melanops>, lavali.wilsoni>; () => { var y = this; }; return x; }
  }
}
```

----------------------------------------

TITLE: Configuring Module Imports and Exports in package.json - JSON
DESCRIPTION: Defines import and export rules for a TypeScript project in the package.json file. It uses '#foo.ts' and '#internal/*' to specify path mappings for imports. This configuration ensures proper module resolution when translating .ts files to .js, with the constraint that the paths should be configured correctly to avoid errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/packageJsonImportsErrors(module=node18).errors.txt#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "pkg",
  "type": "module",
  "imports": {
    "#foo.ts": "./foo.ts",
    "#internal/*": "./internal/*"
  },
  "exports": {
    "./*.ts": {
      "source": "./*.ts",
      "default": "./*.js"
    }
  }
}
```

----------------------------------------

TITLE: Using generic type as function parameter and return type in TypeScript
DESCRIPTION: This code shows the error when using the generic type `C` as a function parameter and return type without providing the type argument. This triggers a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericTypeReferenceWithoutTypeArgument.d.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
    declare function f(x: C): C;
                          ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
                              ~
!!! error TS2314: Generic type 'C<T>' requires 1 type argument(s).
```

----------------------------------------

TITLE: Declaring JSX Intrinsic Elements with Template Literal Types
DESCRIPTION: Defines custom JSX intrinsic elements using template literal types with specific prop type constraints for elements starting with 'foo' and 'foobar'
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxIntrinsicDeclaredUsingTemplateLiteralTypeSignatures.errors.txt#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
declare namespace JSX {
  interface IntrinsicElements {
    [k: `foo${string}`]: { prop: string };
    [k: `foobar${string}`]: { prop: 'literal' };
  }
}
```

----------------------------------------

TITLE: Readonly Property Base Class Implementation
DESCRIPTION: Class A implements a readonly property 'x' as a constructor parameter property and assigns a value to it within the constructor.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/readonlyConstructorAssignment.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class A {
    constructor(readonly x: number) {
        this.x = 0;
    }
}
```

----------------------------------------

TITLE: Importing with Attributes in TypeScript (Errors)
DESCRIPTION: Various import statements using import attributes, which are not supported with the current module settings. Each import statement generates a TS2823 error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importAttributes2(module=commonjs).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export {} from './0' with { type: "json" }
export { a, b } from './0' with { type: "json" }
export * from './0' with { type: "json" }
export * as ns from './0' with { type: "json" }
```

----------------------------------------

TITLE: Extending Base Interface with Incompatible Rest Parameters in TypeScript
DESCRIPTION: This snippet demonstrates interface I10E extending Base with an incompatible a3 method signature. The rest parameter type doesn't match, resulting in a TypeScript error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithCallSignaturesWithRestParameters.errors.txt#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
interface I10E extends Base {
    a3: (x: number, ...z: string[]) => number;  // error
}
```

----------------------------------------

TITLE: Defining Other Interface in TypeScript
DESCRIPTION: Declares an OtherProps interface in a separate declaration file within the foo package.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitCommonJsModuleReferencedType.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
export interface OtherProps {}
```

----------------------------------------

TITLE: TypeScript Utility Types for Array Operations
DESCRIPTION: Implements utility types First, DropFirst, Last, and DropLast for handling array operations with type safety. These types work with both regular and readonly arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/variadicTuples1.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
type First<T extends readonly unknown[]> =
    T extends readonly [unknown, ...unknown[]] ? T[0] :
    T[0] | undefined;

type DropFirst<T extends readonly unknown[]> = T extends readonly [unknown?, ...infer U] ? U : [...T];

type Last<T extends readonly unknown[]> =
    T extends readonly [...unknown[], infer U] ? U :
    T extends readonly [unknown, ...unknown[]] ? T[number] :
    T[number] | undefined;

type DropLast<T extends readonly unknown[]> = T extends readonly [...infer U, unknown] ? U : [...T];
```

----------------------------------------

TITLE: Defining and Using Enum Literal Types in TypeScript
DESCRIPTION: This code defines a constant enum 'Choice' with three values, creates specific type aliases for different combinations of these enum values, and demonstrates type checking through various function implementations that test assignment compatibility, equality comparisons, and switch statement pattern matching.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enumLiteralTypes3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const enum Choice { Unknown, Yes, No };

type Yes = Choice.Yes;
type YesNo = Choice.Yes | Choice.No;
type NoYes = Choice.No | Choice.Yes;
type UnknownYesNo = Choice.Unknown | Choice.Yes | Choice.No;

function f1(a: Yes, b: YesNo, c: UnknownYesNo, d: Choice) {
    a = a;
    a = b;
    a = c;
    a = d;
}

function f2(a: Yes, b: YesNo, c: UnknownYesNo, d: Choice) {
    b = a;
    b = b;
    b = c;
    b = d;
}

function f3(a: Yes, b: YesNo, c: UnknownYesNo, d: Choice) {
    c = a;
    c = b;
    c = c;
    c = d;
}

function f4(a: Yes, b: YesNo, c: UnknownYesNo, d: Choice) {
    d = a;
    d = b;
    d = c;
    d = d;
}

function f5(a: Yes, b: YesNo, c: UnknownYesNo, d: Choice) {
    a = Choice.Unknown;
    a = Choice.Yes;
    a = Choice.No;
    b = Choice.Unknown;
    b = Choice.Yes;
    b = Choice.No;
    c = Choice.Unknown;
    c = Choice.Yes;
    c = Choice.No;
    d = Choice.Unknown;
    d = Choice.Yes;
    d = Choice.No;
}

function f6(a: Yes, b: YesNo, c: UnknownYesNo, d: Choice) {
    a === Choice.Unknown;
    a === Choice.Yes;
    a === Choice.No;
    b === Choice.Unknown;
    b === Choice.Yes;
    b === Choice.No;
    c === Choice.Unknown;
    c === Choice.Yes;
    c === Choice.No;
    d === Choice.Unknown;
    d === Choice.Yes;
    d === Choice.No;
}

function f7(a: Yes, b: YesNo, c: UnknownYesNo, d: Choice) {
    a === a;
    a === b;
    a === c;
    a === d;
    b === a;
    b === b;
    b === c;
    b === d;
    c === a;
    c === b;
    c === c;
    c === d;
    d === a;
    d === b;
    d === c;
    d === d;
}

function f10(x: Yes): Yes {
    switch (x) {
        case Choice.Unknown: return x;
        case Choice.Yes: return x;
        case Choice.No: return x;
    }
    return x;
}

function f11(x: YesNo): YesNo {
    switch (x) {
        case Choice.Unknown: return x;
        case Choice.Yes: return x;
        case Choice.No: return x;
    }
    return x;
}

function f12(x: UnknownYesNo): UnknownYesNo {
    switch (x) {
        case Choice.Unknown: return x;
        case Choice.Yes: return x;
        case Choice.No: return x;
    }
    return x;
}

function f13(x: Choice): Choice {
    switch (x) {
        case Choice.Unknown: return x;
        case Choice.Yes: return x;
        case Choice.No: return x;
    }
    return x;
}
```

----------------------------------------

TITLE: Defining ARIA Property Types in TypeScript
DESCRIPTION: This snippet defines the TypeScript types for several ARIA attributes, including ariaModal, ariaMultiLine, ariaMultiSelectable, ariaOrientation, and ariaOwnsElements. It specifies that these properties should hold objects or arrays with a comprehensive set of standard JavaScript string methods or DOM element properties/methods, indicating the expected shape of values used for these accessibility attributes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRecursiveInference.errors.txt#_snippet_30

LANGUAGE: TypeScript
CODE:
```
; }; ariaModal: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; ariaMultiLine: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; ariaMultiSelectable: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; ariaOrientation: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; ariaOwnsElements: readonly { readonly attributes: any; classList: any; className: any; readonly clientHeight: any; readonly clientLeft: any; readonly clientTop: any; readonly clientWidth: any; readonly currentCSSZoom: any; id: any; innerHTML: any; readonly localName: any; readonly namespaceURI: any; onfullscreenchange: any; onfullscreenerror: any; outerHTML: any; readonly ownerDocument: any; part: any; readonly prefix: any; readonly scrollHeight: any; scrollLeft: any; scrollTop: any; readonly scrollWidth: any; readonly shadowRoot: any; slot: any; readonly tagName: any; attachShadow: any; checkVisibility: any; closest: any; computedStyleMap: any; getAttribute: any; getAttributeNS: any; getAttributeNames: any; getAttributeNode: any; getAttributeNodeNS: any; getBoundingClientRect: any; getClientRects: any; getElementsByClassName: any; getElementsByTagName: any; getElementsByTagNameNS: any; getHTML: any; hasAttribute: any; hasAttributeNS: any; hasAttributes: any; hasPointerCapture: any; insertAdjacentElement: any; insertAdjacentHTML: any; insertAdjacentText: any; matches: any; releasePointerCapture: any; removeAttribute: any; removeAttributeNS: any; removeAttributeNode: any; requestFullscreen: any; requestPointerLock: any; scroll: any; scrollBy: any; scrollIntoView: any; scrollTo: any; setAttribute: any; setAttributeNS: any; setAttributeNode: any; setAttributeNodeNS: any; setHTMLUnsafe: any; setPointerCapture: any; toggleAttribute: any; webkitMatchesSelector: any; addEventListener: any; removeEventListener: any; readonly baseURI: any; readonly childNodes: any; readonly firstChild: any; readonly isConnected: any; readonly lastChild: any; readonly nextSibling: any; readonly nodeName: any; readonly nodeType: any; nodeValue: any; readonly parentElement: any; readonly parentNode: any; readonly previousSibling: any; textContent: any; appendChild: any; cloneNode: any; compareDocumentPosition: any; contains: any; getRootNode: any; hasChildNodes: any; insertBefore: any; isDefaultNamespace: any; isEqualNode: any; isSameNode: any; lookupNamespaceURI: any; lookupPrefix: any; normalize: any; removeChild: any; replaceChild: any; readonly ELEMENT_NODE: any; readonly ATTRIBUTE_NODE: any; readonly TEXT_NODE: any; readonly CDATA_SECTION_NODE: any; readonly ENTITY_REFERENCE_NODE: any; readonly ENTITY_NODE: any; readonly PROCESSING_INSTRUCTION_NODE: any; readonly COMMENT_NODE: any; readonly DOCUMENT_NODE: any; readonly DOCUMENT_TYPE_NODE: any; readonl
```

----------------------------------------

TITLE: Extending Interface with Compatible Generic Constructor Signature
DESCRIPTION: This snippet demonstrates a valid interface extension where 'I8' extends 'D'. The constructor signature in 'I8' is compatible with the overloaded signatures in 'D', as it uses a more general type constraint (Base instead of Derived).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constructSignatureAssignabilityInInheritance3.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
interface D {
    a14: {
        new <T extends Derived>(x: T): number[];
        new <U extends Base>(x: U): number[];
    };
}

interface I8 extends D {
    a14: new <T extends Base>(x: T) => number[];
}
```

----------------------------------------

TITLE: Generic Function with Mixed Parameter Types and Number Constraint
DESCRIPTION: Defines a function with generic type T and number-constrained type U, demonstrating parameter type compatibility errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeArgumentInferenceWithConstraints.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
// 2 parameter generic call with argument 1 of type parameter type and argument 2 of function type whose parameter is of type parameter type
function someGenerics4<T, U extends number>(n: T, f: (x: U) => void) { }
someGenerics4(4, () => null); // Valid
someGenerics4<string, number>('', () => 3);
someGenerics4<string, number>('', (x: string) => ''); // Error
someGenerics4<string, number>(null, null);
```

----------------------------------------

TITLE: Invalid Array Type Assertion in TypeScript
DESCRIPTION: This snippet tries to assign an empty array (`[]`) to a variable of type `A<number>` using a type assertion. This results in a TypeScript error because the array type does not have the required properties of `A<number>`, specifically, the method `foo`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericTypeAssertions2.errors.txt#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
    var r4: A<number> = <A<number>>new A();
    var r5: A<number> = <A<number>>[]; // error
                        ~~~~~~~~~~~~~
```

----------------------------------------

TITLE: Exporting Variables in TypeScript (t1.ts)
DESCRIPTION: Demonstrates basic named exports of variables 'x' and 'y' from a TypeScript module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportStar-amd.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export var x = 1;
export var y = 2;
```

----------------------------------------

TITLE: Base Class Definition in TypeScript
DESCRIPTION: Defines a simple base class with a string property, serving as a parent class for inheritance examples
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassParameterProperties.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class Base {
    x: string;
}
```

----------------------------------------

TITLE: Formatting BigInt Values with Intl.NumberFormat
DESCRIPTION: Demonstrates how to format BigInt values using the Internationalization API. Shows that Intl.NumberFormat can accept bigint values for locale-specific formatting.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bigintWithLib.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
// Test Intl methods with new parameter type
new Intl.NumberFormat("fr").format(3000n);
new Intl.NumberFormat("fr").format(bigintVal);
```

----------------------------------------

TITLE: Chaining .then() with nIPromise on an IPromise
DESCRIPTION: Chains the `.then()` method on an `IPromise<number>` instance with `nIPromise` as fulfillment, rejection and notify handlers. This should be type-compatible.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations3.errors.txt#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
var r9c = r9.then(nIPromise, nIPromise, nIPromise); // ok
```

----------------------------------------

TITLE: Destructuring Arrays with Default Values in TypeScript
DESCRIPTION: Example of complex array destructuring pattern including nested arrays with multiple default value assignments. Shows interaction with a getMultiRobot() function call and subsequent value reassignments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.sourcemap.txt#2025-04-21_snippet_34

LANGUAGE: typescript
CODE:
```
for (let [nameMA = "noName", [primarySkillA = "primary", secondarySkillA = "secondary"] = ["none", "none"]] = getMultiRobot())
```

----------------------------------------

TITLE: Test Module with Cross-Module Imports (test.ts)
DESCRIPTION: Demonstrates importing classes and types from other modules and creating local exports
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlModuleMultifolderSpecifyOutputFile/node/maprootUrlModuleMultifolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import m1 = require("ref/m1");
import m2 = require("../outputdir_module_multifolder_ref/m2");
export var a1 = 10;
export class c1 {
    public p1: number;
}

export var instance1 = new c1();
export function f1() {
    return instance1;
}

export var a2 = m1.m1_c1;
export var a3 = m2.m2_c1;
```

----------------------------------------

TITLE: Implementing Logical Assignment with AND in TypeScript
DESCRIPTION: This function uses the &&= (logical AND assignment) operator to assign a new arrow function to 'f' if it's truthy. It then attempts to invoke 'f', which may lead to an error if 'f' is undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment5(target=esnext).errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
function foo3 (f?: (a: number) => void) {
    f &&= (a => a)
    f(42)
}
```

----------------------------------------

TITLE: Generic Functions with Multiple Type Parameters in TypeScript
DESCRIPTION: Demonstrates generic function calls with two type parameters where only one is used in parameter type annotations. Ensures correct inference from direct and explicit type annotations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeArgumentInference.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
    // Generic call with multiple type parameters and only one used in parameter type annotation
    function someGenerics1<T, U>(n: T, m: number) { }
    someGenerics1(3, 4);
    someGenerics1<number, {}>(3, 4);
```

----------------------------------------

TITLE: Subfolder Package JSON Configuration
DESCRIPTION: Subfolder package.json configuration specifying CommonJS module type
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node16).errors.txt#2025-04-21_snippet_26

LANGUAGE: json
CODE:
```
{
    "type": "commonjs"
}
```

----------------------------------------

TITLE: Defining Recursive Type Box1 and Constants in TypeScript
DESCRIPTION: This snippet defines a recursive type `Box1` which is either a `Box<Box1>` or a number. Three constants `b10`, `b11`, and `b12` are then declared using this type.  The snippet demonstrates how a recursive type that includes a primitive type can be instantiated with values of that primitive type as well as nested `Box` structures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveTypeReferences1.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
type Box1 = Box<Box1> | number;

const b10: Box1 = 42;
const b11: Box1 = { value: 42 };
const b12: Box1 = { value: { value: { value: 42 }}};
```

----------------------------------------

TITLE: Import Statements with Assertions in TypeScript
DESCRIPTION: This snippet demonstrates various import statements with assertions, including side-effect imports, named imports, and namespace imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importAssertion1(module=esnext).errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import './0' assert { type: "json" }
import { a, b } from './0' assert { "type": "json" }
import * as foo from './0' assert { type: "json" }
a;
b;
foo.a;
foo.b;
```

----------------------------------------

TITLE: Correct Enum String Assignments in TypeScript
DESCRIPTION: This snippet shows various correct ways to assign string and number values to enum members that are syntactically recognizable, even when 'isolatedModules' is enabled.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enumWithNonLiteralStringInitializer.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { foo } from "./helpers";
enum A {
   a = `${foo}`,
   b = "" + 2,
   c = 2 + "",
   d = ("foo"),
}
```

----------------------------------------

TITLE: Importing a Non-Exported Interface in TypeScript
DESCRIPTION: This TypeScript code attempts to import `Foo` from the `a.ts` module. However, since `Foo` is not exported from `a.ts`, this will result in a TypeScript error (TS2459).  The error message points to the line where `Foo` is declared in `a.ts`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importNonExportedMember3.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { Foo } from './a';

```

----------------------------------------

TITLE: TypeScript Generic Map Usage with Type Mismatch
DESCRIPTION: This snippet attempts to use the `map` function from the `Combinators` interface to transform a `Collection<number, string>` into a `Collection<number, Date>`. However, the provided mapping function returns a `string`, leading to a type error because a `Date` is expected. The errors highlight the importance of type safety when working with generics in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCombinators2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    var _: Combinators;
    var c2: Collection<number, string>;
    var rf1 = (x: number, y: string) => { return x.toFixed() };
    var r5a = _.map<number, string, Date>(c2, (x, y) => { return x.toFixed() });
                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type '(x: number, y: string) => string' is not assignable to parameter of type '(x: number, y: string) => Date'.
!!! error TS2345:   Type 'string' is not assignable to type 'Date'.
    var r5b = _.map<number, string, Date>(c2, rf1);
                                              ~~~
!!! error TS2345: Argument of type '(x: number, y: string) => string' is not assignable to parameter of type '(x: number, y: string) => Date'.
!!! error TS2345:   Type 'string' is not assignable to type 'Date'.
```

----------------------------------------

TITLE: Type Parameter Assignment Compatibility in TypeScript Generics
DESCRIPTION: This function demonstrates TypeScript's type checking for generic parameters. It shows that different type parameters (T and U) are not implicitly assignable to each other, and that Object type is not assignable to a generic type parameter without constraints.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeParametersShouldNotBeEqual.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function ff<T, U>(x: T, y: U) {
    var z: Object;
    x = x;  // Ok
    x = y;  // Error
    x = z;  // Error
    z = x;  // Ok
}
```

----------------------------------------

TITLE: Redeclaring Block-Scoped Variable in Export
DESCRIPTION: Attempting to export a type and a constant with the same name, causing TypeScript compilation errors
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocTypedefNoCrash2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export type foo = 5;
```

LANGUAGE: typescript
CODE:
```
export const foo = 5;
```

----------------------------------------

TITLE: TypeScript Module Error: Property Access
DESCRIPTION: This TypeScript code defines a module 'A' with a local function 'b' and an exported function 'a'. The function 'a' attempts to access 'b' using 'A.b()', which results in a TypeScript error because 'b' is not an exported member of 'A'. This highlights the importance of exporting members to make them accessible from outside their immediate scope within a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/qualifiedModuleLocals.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module A {

  function b() {}

  export function a(){  A.b();  } // A.b should be an unresolved symbol error
                          ~


}

A.a();
```

----------------------------------------

TITLE: Complex Destructuring with Multiple Default Values in JavaScript
DESCRIPTION: This snippet uses destructuring to extract properties 'name' and 'skill' from 'robotB', with default values '<NoName>' and '<skillUnspecified>' respectively, in case the properties are undefined. It requires a 'robotB' object to exist.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringVariableStatementDefaultValues.sourcemap.txt#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
var _b = robotB.name, nameB = _b === void 0 ? "<NoName>" : _b, _c = robotB.skill, skillB = _c === void 0 ? "<skillUnspecified>" : _c;
```

----------------------------------------

TITLE: Demonstrating JSX Fragment Syntax Errors in TypeScript
DESCRIPTION: This code snippet shows incorrect usage of JSX fragments, resulting in multiple TypeScript compiler errors. It includes a malformed JSX fragment and an unclosed fragment, highlighting common syntax mistakes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxFragmentErrors.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare module JSX {
	interface Element { }
	interface IntrinsicElements {
		[s: string]: any;
	}
}
declare var React: any;

<>hi</div> // Error


<>eof   // Error
```

----------------------------------------

TITLE: package.json Configuration for CommonJS
DESCRIPTION: This JSON snippet represents a 'package.json' file, specifying the module type as 'commonjs'.  This indicates that the module is in CommonJS format. This configuration is likely the source of the '__exportStar' and '__importStar' errors because the compiler expects those helpers to be available, whereas ES modules handle these exports natively.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportHelpersCollisions2(module=node18).errors.txt#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
    {
        "type": "commonjs"
    }
```

----------------------------------------

TITLE: Importing Multiple Modules with Error Handling in CommonJS TypeScript
DESCRIPTION: This snippet shows the importation of modules, with a specific error occurring when importing from './3.cjs'. The errors indicate that './3.cjs' lacks a default export, which must be addressed for seamless import functionality. The comment provides context for handling imports and exports correctly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesCJSEmit1(module=node18).errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import two from "./2.cjs";   // ok\nimport three from "./3.cjs"; // error\n       ~~~~~\n!!! error TS1192: Module '"/3"' has no default export.\ntwo.foo;\nthree.foo;\n
```

----------------------------------------

TITLE: Interface Definitions with Compatible Index Signatures in TypeScript
DESCRIPTION: Defines two base interfaces A and B, where B extends A. Then shows a valid implementation of interface D with both string and number index signatures, where the number indexer returns a more specific type than the string indexer.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indexerConstraints.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface A { a: number; }
interface B extends A { b: number; }

// Good case
interface D {
    [s: string]: A;
}
interface D {
    [n: number]: B;
}
```

----------------------------------------

TITLE: Defining Underscore Module Interfaces in TypeScript
DESCRIPTION: This snippet defines an 'Underscore' module with interfaces for iterators and static methods. It introduces the 'Iterator' interface, which is a callback function type, and the 'Static' interface that includes the 'all' and 'identity' methods. The 'all' method verifies if all elements in a list pass a certain condition defined by the 'iterator'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericArgumentCallSigAssignmentCompat.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module Underscore {
    export interface Iterator<T, U> {
        (value: T, index: any, list: any): U;
    }
 
    export interface Static {
        all<T>(list: T[], iterator?: Iterator<T, boolean>, context?: any): boolean;
        identity<T>(value: T): T;
    }
}
 
declare var _: Underscore.Static;
```

----------------------------------------

TITLE: Array Destructuring with Any Type in TypeScript
DESCRIPTION: This snippet demonstrates array destructuring when the source is of type 'any'.  No type checking occurs during assignment, which may hide potential errors. The variables a0 and a1 are assigned from undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringArrayBindingPatternAndAssignment1ES6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var [a0, a1]: any = undefined;
var [a2 = false, a3 = 1]: any = undefined;
```

----------------------------------------

TITLE: Missing File Extension Errors in TypeScript ESM Imports
DESCRIPTION: TypeScript errors (TS2834, TS2835) indicating missing file extensions in ECMAScript module import statements when using --moduleResolution 'node16' or 'nodenext'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import './index'           // Should be: import './index.mjs'
import './subfolder/index'  // Should be: import './subfolder/index.mjs'
import './subfolder2/index' // Should be: import './subfolder2/index.mjs'
```

----------------------------------------

TITLE: Defining and Using Intersection and Union Types in TypeScript
DESCRIPTION: This code defines four interfaces (A, B, C, D) and creates variables of various intersection and union types. It then demonstrates TypeScript's type checking by attempting various assignments between these types, showing which assignments are allowed and which produce type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionAndUnionTypes.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface A { a: string }
interface B { b: string }
interface C { c: string }
interface D { d: string }

var a: A;
var b: B;
var c: C;
var d: D;
var anb: A & B;
var aob: A | B;
var cnd: C & D;
var cod: C | D;
var x: A & B | C & D;
var y: (A | B) & (C | D);

a = anb;  // Ok
b = anb;  // Ok
anb = a;
~~~
!!! error TS2322: Type 'A' is not assignable to type 'A & B'.
!!! error TS2322:   Property 'b' is missing in type 'A' but required in type 'B'.
!!! related TS2728 intersectionAndUnionTypes.ts:2:15: 'b' is declared here.
anb = b;
~~~
!!! error TS2322: Type 'B' is not assignable to type 'A & B'.
!!! error TS2322:   Property 'a' is missing in type 'B' but required in type 'A'.
!!! related TS2728 intersectionAndUnionTypes.ts:1:15: 'a' is declared here.

x = anb;  // Ok
x = aob;
~
!!! error TS2322: Type 'A | B' is not assignable to type '(A & B) | (C & D)'.
!!! error TS2322:   Type 'A' is not assignable to type '(A & B) | (C & D)'.
!!! error TS2322:     Type 'A' is not assignable to type 'A & B'.
!!! error TS2322:       Property 'b' is missing in type 'A' but required in type 'B'.
!!! related TS2728 intersectionAndUnionTypes.ts:2:15: 'b' is declared here.
x = cnd;  // Ok
x = cod;
~
!!! error TS2322: Type 'C | D' is not assignable to type '(A & B) | (C & D)'.
!!! error TS2322:   Type 'C' is not assignable to type '(A & B) | (C & D)'.
!!! error TS2322:     Type 'C' is not assignable to type 'C & D'.
!!! error TS2322:       Property 'd' is missing in type 'C' but required in type 'D'.
!!! related TS2728 intersectionAndUnionTypes.ts:4:15: 'd' is declared here.
anb = x;
~~~
!!! error TS2322: Type '(A & B) | (C & D)' is not assignable to type 'A & B'.
!!! error TS2322:   Type 'C & D' is not assignable to type 'A & B'.
!!! error TS2322:     Property 'a' is missing in type 'C & D' but required in type 'A'.
!!! related TS2728 intersectionAndUnionTypes.ts:1:15: 'a' is declared here.
aob = x;
~~~
!!! error TS2322: Type '(A & B) | (C & D)' is not assignable to type 'A | B'.
!!! error TS2322:   Type 'C & D' is not assignable to type 'A | B'.
cnd = x;
~~~
!!! error TS2322: Type '(A & B) | (C & D)' is not assignable to type 'C & D'.
!!! error TS2322:   Type 'A & B' is not assignable to type 'C & D'.
!!! error TS2322:     Property 'c' is missing in type 'A & B' but required in type 'C'.
!!! related TS2728 intersectionAndUnionTypes.ts:3:15: 'c' is declared here.
cod = x;
~~~
!!! error TS2322: Type '(A & B) | (C & D)' is not assignable to type 'C | D'.
!!! error TS2322:   Type 'A & B' is not assignable to type 'C | D'.

y = anb;
~
!!! error TS2322: Type 'A & B' is not assignable to type '(A | B) & (C | D)'.
!!! error TS2322:   Type 'A & B' is not assignable to type 'B & D'.
!!! error TS2322:     Property 'd' is missing in type 'A & B' but required in type 'D'.
!!! related TS2728 intersectionAndUnionTypes.ts:4:15: 'd' is declared here.
y = aob;
~
!!! error TS2322: Type 'A | B' is not assignable to type '(A | B) & (C | D)'.
!!! error TS2322:   Type 'A' is not assignable to type '(A | B) & (C | D)'.
!!! error TS2322:     Type 'A' is not assignable to type 'A & D'.
!!! error TS2322:       Property 'd' is missing in type 'A' but required in type 'D'.
!!! related TS2728 intersectionAndUnionTypes.ts:4:15: 'd' is declared here.
y = cnd;
~
!!! error TS2322: Type 'C & D' is not assignable to type '(A | B) & (C | D)'.
!!! error TS2322:   Type 'C & D' is not assignable to type 'B & D'.
!!! error TS2322:     Property 'b' is missing in type 'C & D' but required in type 'B'.
!!! related TS2728 intersectionAndUnionTypes.ts:2:15: 'b' is declared here.
y = cod;
~
!!! error TS2322: Type 'C | D' is not assignable to type '(A | B) & (C | D)'.
!!! error TS2322:   Type 'C' is not assignable to type '(A | B) & (C | D)'.
!!! error TS2322:     Type 'C' is not assignable to type 'B & C'.
!!! error TS2322:       Property 'b' is missing in type 'C' but required in type 'B'.
!!! related TS2728 intersectionAndUnionTypes.ts:2:15: 'b' is declared here.
anb = y;
~~~
!!! error TS2322: Type '(A | B) & (C | D)' is not assignable to type 'A & B'.
!!! error TS2322:   Type 'A & C' is not assignable to type 'A & B'.
!!! error TS2322:     Property 'b' is missing in type 'A & C' but required in type 'B'.
!!! related TS2728 intersectionAndUnionTypes.ts:2:15: 'b' is declared here.
aob = y;  // Ok
cnd = y;
~~~
!!! error TS2322: Type '(A | B) & (C | D)' is not assignable to type 'C & D'.
!!! error TS2322:   Type 'A & C' is not assignable to type 'C & D'.
!!! error TS2322:     Property 'd' is missing in type 'A & C' but required in type 'D'.
!!! related TS2728 intersectionAndUnionTypes.ts:4:15: 'd' is declared here.
cod = y;  // Ok
```

----------------------------------------

TITLE: Declaring and Assigning Tuple Types in TypeScript
DESCRIPTION: This snippet shows various declarations and assignments of tuple types in TypeScript, including basic tuples, tuples with union types, and class instances in tuples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTypeWithTuple.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var numStrTuple: [number, string] = [5, "hello"];
var numStrTuple2: [number, string] = [5, "foo", true];
var numStrBoolTuple: [number, string, boolean] = [5, "foo", true];
var objNumTuple: [{ a: string }, number] = [{ a: "world" }, 5];
var strTupleTuple: [string, [number, {}]] = ["bar", [5, { x: 1, y: 1 }]];
class C { }
class D { }
var unionTuple: [C, string | number] = [new C(), "foo"];
var unionTuple1: [C, string | number] = [new C(), "foo"];
var unionTuple2: [C, string | number, D] = [new C(), "foo", new D()];
var unionTuple3: [number, string| number] = [10, "foo"];
```

----------------------------------------

TITLE: Iterating Over Array with Destructuring in JavaScript
DESCRIPTION: This code snippet demonstrates iterating over an array of objects using a for...of loop with object destructuring. It extracts the 'name' property from each object and logs it to the console.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
for (var _14 = 0, multiRobots_2 = multiRobots; _14 < multiRobots_2.length; _14++) {
    name = _13[_12].name;
    console.log(nameA);
}
```

----------------------------------------

TITLE: Exporting Types from a Module in TypeScript
DESCRIPTION: Exports all types from the 'a' module using the 'export type' syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace6.errors.txt#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
export type * from "./a";
```

----------------------------------------

TITLE: Assigning to Uninitialized Generic Function Variable in TypeScript
DESCRIPTION: Attempt to assign a function to an uninitialized generic function variable, resulting in compilation errors due to variable usage before assignment and invalid left-hand side of the assignment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentToInstantiationExpression.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
let getValue: <T>() => T;
getValue<number> = () => 1234;
```

----------------------------------------

TITLE: Demonstrating TypeScript Errors for Unchecked Indexed Access and Destructuring
DESCRIPTION: This code snippet showcases different scenarios where TypeScript's strict null checks and unchecked indexed access flags catch potential runtime errors. It includes examples of array destructuring, object destructuring, and assignments that may lead to undefined values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noUncheckedIndexedAccessDestructuring.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare const strArray: string[];
declare const strStrTuple: [string, string];

// Declaration forms for array destructuring

// Destructuring from a simple array -> include undefined
const [s1] = strArray;
s1.toString(); // Should error, s1 possibly undefined

// Destructuring a rest element -> do not include undefined
const [...s2] = strArray;
s2.push(undefined); // Should error, 'undefined' not part of s2's element type

// Destructuring a rest element -> do not include undefined
const [, , ...s3] = strArray;
s3.push(undefined); // Should error, 'undefined' not part of s2's element type

// Declaration forms for object destructuring

declare const strMap: { [s: string]: string };

const { t1 } = strMap;
t1.toString(); // Should error, t1 possibly undefined

const { ...t2 } = strMap;
t2.z.toString(); // Should error

// Test intersections with declared properties
declare const numMapPoint: { x: number, y: number} & { [s: string]: number };
{
    const { x, y, z } = numMapPoint;
    x.toFixed(); // Should OK
    y.toFixed(); // Should OK
    z.toFixed(); // Should error
}

{
    const { x, ...q } = numMapPoint;
    x.toFixed(); // Should OK
    q.y.toFixed(); // Should OK
    q.z.toFixed(); // Should error
}

{
    const { x, ...q } = numMapPoint;
    x.
    toFixed(); // Should OK

    q.
    y.toFixed(); // Should OK

    q.
    z.toFixed(); // Should error
}


declare let target_string: string;
declare let target_string_undef: string | undefined;
declare let target_string_arr: string[];

// Assignment forms
[target_string] = strArray; // Should error
[target_string_undef] = strArray;  // Should OK
[,,, ...target_string_arr] = strArray; // Should OK

{
    let x: number, y: number, z: number | undefined;
    ({ x, y, z } = numMapPoint); // Should OK

    let q: number;
    ({ q } = numMapPoint); // Should error
}
```

----------------------------------------

TITLE: Defining Enums with Invalid Primitive Names in TypeScript
DESCRIPTION: This code snippet demonstrates the TypeScript compiler's rejection of enum declarations using reserved primitive type names. The compiler throws errors for attempts to use 'string', 'number', and 'any' as enum identifiers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enumWithPrimitiveName.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
enum string { }
enum number { }
enum any { }
```

----------------------------------------

TITLE: Invalid Import Alias Using Reserved Word
DESCRIPTION: This snippet demonstrates a TypeScript error occurring when trying to use 'await' as an import alias. The compiler raises error TS1262 because 'await' is a reserved word that cannot be used as an identifier at the module level.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/topLevelAwaitErrors.10(module=es2022).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { await as await } from "./other";
```

----------------------------------------

TITLE: Using ES6 Function.name with ES5 Library in TypeScript
DESCRIPTION: Demonstrates the error when trying to access the 'name' property of a function which is not available in ES5.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/modularizeLibrary_ErrorFromUsingES6FeaturesWithOnlyES5Lib.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function Baz() { }
Baz.name;
```

----------------------------------------

TITLE: Destructuring and Default Value Assignment in JavaScript
DESCRIPTION: This snippet shows the JavaScript code emitted when destructuring an object with a default value in a loop. It demonstrates how the ternary operator is used to assign the default value if the property is undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
>>>    _b = _61[_60].name, nameA = _b === void 0 ? "noName" : _b;
```

----------------------------------------

TITLE: Initializing Class Static Properties with Block Error
DESCRIPTION: Class implementation showing incorrect static property access order causing initialization errors. Properties f2 and f3 are accessed in static blocks before they are declared, leading to TypeScript compile errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classStaticBlock3(target=esnext).errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const a = 1;

class C {
    static f1 = 1;

    static {
        console.log(C.f1, C.f2, C.f3)
    }

    static f2 = 2;

    static {
        console.log(C.f1, C.f2, C.f3)
    }

    static f3 = 3;
}
```

----------------------------------------

TITLE: Exporting a Class as a Module in TypeScript
DESCRIPTION: This snippet defines a class 'SomeClass' and exports it as a module. This class is imported as a type in the main file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importEqualsDeclaration.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
class SomeClass {}
export = SomeClass;
```

----------------------------------------

TITLE: Inner Module Index Declaration File
DESCRIPTION: This TypeScript declaration file for the 'inner' module re-exports the 'x' symbol from './other.js', intended for module resolution within the package.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSpecifierGenerationDirectory(module=nodenext).errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
// esm format file
export { x } from "./other.js";
```

----------------------------------------

TITLE: Defining Abstract Base Class in TypeScript
DESCRIPTION: Creates an abstract base class named AbstractGreeter with no explicit constructor or methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationClassWithDefaultConstructorAndExtendsClause.sourcemap.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
class AbstractGreeter {
}
```

----------------------------------------

TITLE: Demonstrating Type Parameter Assignability with Constraints in TypeScript
DESCRIPTION: This function demonstrates TypeScript's type checking behavior when attempting to assign between different generic type parameters. It shows how the 'extends' constraint affects assignability, with TypeScript generating detailed error messages when assignments violate type safety rules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeParameterAssignability2.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
function foo6<T extends U, U, V>(t: T, u: U, v: V) {
    t = u; // error
    ~
!!! error TS2322: Type 'U' is not assignable to type 'T'.
!!! error TS2322:   'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.
!!! related TS2208 typeParameterAssignability2.ts:63:28: This type parameter might need an `extends T` constraint.
    t = v; // error
    ~
!!! error TS2322: Type 'V' is not assignable to type 'T'.
!!! error TS2322:   'T' could be instantiated with an arbitrary type which could be unrelated to 'V'.
!!! related TS2208 typeParameterAssignability2.ts:63:31: This type parameter might need an `extends T` constraint.

    u = t; // ok
    u = v; // error
    ~
!!! error TS2322: Type 'V' is not assignable to type 'U'.
!!! error TS2322:   'U' could be instantiated with an arbitrary type which could be unrelated to 'V'.
!!! related TS2208 typeParameterAssignability2.ts:63:31: This type parameter might need an `extends U` constraint.

    v = t; // error
    ~
!!! error TS2322: Type 'T' is not assignable to type 'V'.
!!! error TS2322:   'V' could be instantiated with an arbitrary type which could be unrelated to 'T'.
    v = u; // error
    ~
!!! error TS2322: Type 'U' is not assignable to type 'V'.
!!! error TS2322:   'V' could be instantiated with an arbitrary type which could be unrelated to 'U'.
!!! related TS2208 typeParameterAssignability2.ts:63:28: This type parameter might need an `extends V` constraint.
}
```

----------------------------------------

TITLE: Initializing Type-Annotated Variables with Invalid Conversions
DESCRIPTION: Demonstrates type conversion errors when attempting to assign incorrect types using type assertions and JSDoc annotations
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocTypeTagCast.errors.txt#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
var W = /** @type {string} */(/** @type {*} */ (4));

var W = /** @type {string} */(4); // Error
```

----------------------------------------

TITLE: TypeScript Object Literal Property Mismatch Example
DESCRIPTION: Demonstrates a type error when passing an object with shorthand properties to a function expecting different property names. The error occurs because the object literal has 'name' property while the function expects an 'a' property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectLiteralShorthandPropertiesFunctionArgument2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var id: number = 10000;
var name: string = "my name";

var person = { name, id };

function foo(p: { a: string; id: number }) { }
foo(person);  // error
```

----------------------------------------

TITLE: Extending Base Interface with Mismatched Rest Parameter Type in TypeScript
DESCRIPTION: This snippet demonstrates interface I16 incorrectly extending Base due to a type mismatch in the rest parameter of the a4 method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypingWithCallSignaturesWithRestParameters.errors.txt#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
interface I16 extends Base {
    a4: (x: number, ...args: string[]) => number;  // error, rest param has type mismatch
}
```

----------------------------------------

TITLE: Valid Decorator with Export Default Class
DESCRIPTION: Valid placement of decorator before export default class declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-exportModifier.errors.txt#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
@dec export default class C2 {}
```

----------------------------------------

TITLE: Package Module Configuration
DESCRIPTION: The package.json file describes the configuration of the package named 'pkg', specifying how it exports modules for 'import' and 'require' resolutions, which are used in TypeScript imports. This configuration is critical for correct resolution of imports in TypeScript when specific resolution modes are deployed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportAttributesModeDeclarationEmit2(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "name": "pkg",
    "version": "0.0.1",
    "exports": {
        "import": "./import.js",
        "require": "./require.js"
    }
}
```

----------------------------------------

TITLE: Robot Array Iteration with Destructuring in TypeScript
DESCRIPTION: Iterates through a robots array, using destructuring to extract names with a default 'noName' value when undefined
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues2.sourcemap.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
for ([, nameA = "noName"] of robots) {
    console.log(nameA);
}
```

----------------------------------------

TITLE: Abstract Class Extension without Implementation in TypeScript
DESCRIPTION: Defines an abstract class `AD1` that extends the abstract class `AB` without providing any implementations for the abstract methods inherited from `AB`. Because `AD1` doesn't implement the abstract methods, it must also be declared as abstract.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/override2.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
"    abstract class AD1 extends AB {\n    \n    }"
```

----------------------------------------

TITLE: Implementing Interface in TypeScript
DESCRIPTION: This snippet highlights an error arising from trying to extend an interface from a namespace 'M'. The code demonstrates a TypeScript compilation error TS2709 when the interface 'I' is defined to extend the namespace, which is not permitted.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleAsBaseType.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface I extends M { }
                        ~

```

----------------------------------------

TITLE: Type Error: Number Assigned to String Prop
DESCRIPTION: This snippet illustrates an example where a number is incorrectly assigned to a property that is expected to be a string, triggering a TypeScript error. This demonstrates type enforcement in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tsxTypeArgumentResolution.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
x = <MyComp<Prop> a={10} b={20} />; // error
                             ~
!!! error TS2322: Type 'number' is not assignable to type 'string'.
```

LANGUAGE: TypeScript
CODE:
```
x = <MyComp<Prop> a={10} b={20}></MyComp>; // error
                             ~
!!! error TS2322: Type 'number' is not assignable to type 'string'.
```

----------------------------------------

TITLE: ES Module Import Error
DESCRIPTION: Demonstrates incorrect ES Module named import syntax that causes TypeScript compilation errors when importing a CommonJS module
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importNonExportedMember9.errors.txt#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { Foo } from './a';
```

----------------------------------------

TITLE: Instantiating Classes and Demonstrating Access Errors in TypeScript
DESCRIPTION: Creates instances of the defined classes and attempts to access their properties, demonstrating access violations with protected and private properties, as well as 'never' type reductions in mixed classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mixinPrivateAndProtected.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
const
    a = new A(),
    ab = new AB(),
    abc = new ABC(),
    ab2c = new AB2C();

a.pb.toFixed();
a.ptd.toFixed();    // Error
a.pvt.toFixed();    // Error

ab.pb.toFixed();
ab.ptd.toFixed();   // Error
ab.pvt.toFixed();   // Error

abc.pb.toFixed();
abc.ptd.toFixed();  // Error
abc.pvt.toFixed();  // Error

ab2c.pb.toFixed();
ab2c.ptd.toFixed(); // Error
ab2c.pvt.toFixed(); // Error
```

----------------------------------------

TITLE: Defining Standard DOM Node Properties and Methods (TypeScript)
DESCRIPTION: This TypeScript snippet defines the structure of common DOM node properties like `nextSibling`, `nodeName`, `nodeType`, `nodeValue`, and `parentElement`, listing their expected members and types (often `any` in this definition). It includes standard DOM API methods and properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeRecursiveInference.errors.txt#_snippet_36

LANGUAGE: TypeScript
CODE:
```
 readonly DOCUMENT_POSITION_FOLLOWING: any; readonly DOCUMENT_POSITION_CONTAINS: any; readonly DOCUMENT_POSITION_CONTAINED_BY: any; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: any; addEventListener: any; dispatchEvent: any; removeEventListener: any; }; readonly nextSibling: { after: any; before: any; remove: any; replaceWith: any; readonly baseURI: any; readonly childNodes: any; readonly firstChild: any; readonly isConnected: any; readonly lastChild: any; readonly nextSibling: any; readonly nodeName: any; readonly nodeType: any; nodeValue: any; readonly ownerDocument: any; readonly parentElement: any; readonly parentNode: any; readonly previousSibling: any; textContent: any; appendChild: any; cloneNode: any; compareDocumentPosition: any; contains: any; getRootNode: any; hasChildNodes: any; insertBefore: any; isDefaultNamespace: any; isEqualNode: any; isSameNode: any; lookupNamespaceURI: any; lookupPrefix: any; normalize: any; removeChild: any; replaceChild: any; readonly ELEMENT_NODE: any; readonly ATTRIBUTE_NODE: any; readonly TEXT_NODE: any; readonly CDATA_SECTION_NODE: any; readonly ENTITY_REFERENCE_NODE: any; readonly ENTITY_NODE: any; readonly PROCESSING_INSTRUCTION_NODE: any; readonly COMMENT_NODE: any; readonly DOCUMENT_NODE: any; readonly DOCUMENT_TYPE_NODE: any; readonly DOCUMENT_FRAGMENT_NODE: any; readonly NOTATION_NODE: any; readonly DOCUMENT_POSITION_DISCONNECTED: any; readonly DOCUMENT_POSITION_PRECEDING: any; readonly DOCUMENT_POSITION_FOLLOWING: any; readonly DOCUMENT_POSITION_CONTAINS: any; readonly DOCUMENT_POSITION_CONTAINED_BY: any; readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: any; addEventListener: any; dispatchEvent: any; removeEventListener: any; }; readonly nodeName: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; readonly nodeType: { toString: any; toFixed: any; toExponential: any; toPrecision: any; valueOf: any; toLocaleString: any; }; nodeValue: { toString: any; charAt: any; charCodeAt: any; concat: any; indexOf: any; lastIndexOf: any; localeCompare: any; match: any; replace: any; search: any; slice: any; split: any; substring: any; toLowerCase: any; toLocaleLowerCase: any; toUpperCase: any; toLocaleUpperCase: any; trim: any; readonly length: any; substr: any; valueOf: any; codePointAt: any; includes: any; endsWith: any; normalize: any; repeat: any; startsWith: any; anchor: any; big: any; blink: any; bold: any; fixed: any; fontcolor: any; fontsize: any; italics: any; link: any; small: any; strike: any; sub: any; sup: any; [Symbol.iterator]: any; }; readonly parentElement: { accessKey: any; readonly accessKeyLabel: any; autocapitalize: any; autocorrect: any; dir: any; draggable: any; hidden: any; inert: any; innerText: any; lang: any; readonly offsetHeight: any; readonly offsetLeft: any; readonly offsetParent: any; readonly offsetTop: any; readonly offsetWidth: any; outerText: any; popover: any; spellcheck: any; title: any; translate: any; writingSuggestions: any; attachInternals: any; click: any; hidePopover: any; showPopover: any; togglePopover: any; addEventListener: any; removeEventListener: any; readonly attributes: any; classList: any; className: any; readonly clientHeight: any; readonly clientLeft: any; readonly clientTop: any; readonly clientWidth: any; readonly currentCSSZoom: any; id: any; innerHTML: any; readonly localName: any; readonly namespaceURI: any; onfullscreenchange: any; onfullscreenerror: any; outerHTML: any; readonly ownerDocument: any; part: any; readonly prefix: any; readonly scrollHeight: any; scrollLeft: any; scrollTop: any; readonly scrollWidth: any; readonly shadowRoot: any; slot: any; readonly tagName: any; attachShadow: any; checkVisibility: any; closest: any; computedStyleMap: any; getAttribute: any; getAttributeNS: any; getAttributeNames: any; getAttributeNode: any; getAttributeNodeNS: any; getBoundingClientRect: any; getClientRects: any; getElementsByClassName: any; getElementsByTagName: any; getElementsByTagNameNS: any; getHTML: any; hasAttribute: any; hasAttributeNS: any; hasAttributes: any; hasPointerCapture: any; insertAdjacentElement: any; insertAdjacentHTML: any; insertAdjacentText: any; matches: any; releasePointerCapture: any; removeAttribute: any; removeAttributeNS: any; removeAttributeNode: any; requestFullscreen: any; requestPointerLock: any; scroll: any; scrollBy: any; scrollIntoView: any; scrollTo: any; setAttribute: any; setAttributeNS: any; setAttributeNode: any;
```

----------------------------------------

TITLE: Implementing TypeScript UnaryOperator Class for AST
DESCRIPTION: Implementation of a UnaryOperator class for TypeScript's Abstract Syntax Tree. This class handles various unary operations including logical not, bitwise not, increments/decrements, array literals, object literals, type assertions, void operator, and more. It provides methods for type checking and code emission.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserRealSource11.errors.txt#2025-04-21_snippet_27

LANGUAGE: TypeScript
CODE:
```
public castTerm: AST = null;

constructor (nodeType: NodeType, public operand: AST) {
    super(nodeType);
}

public addToControlFlow(context: ControlFlowContext): void {
    super.addToControlFlow(context);
    // TODO: add successor as catch block/finally block if present
    if (this.nodeType == NodeType.Throw) {
        context.returnStmt();
    }
}

public typeCheck(typeFlow: TypeFlow) {
    switch (this.nodeType) {
        case NodeType.Not:
            return typeFlow.typeCheckBitNot(this);

        case NodeType.LogNot:
            return typeFlow.typeCheckLogNot(this);

        case NodeType.Pos:
        case NodeType.Neg:
            return typeFlow.typeCheckUnaryNumberOperator(this);

        case NodeType.IncPost:
        case NodeType.IncPre:
        case NodeType.DecPost:
        case NodeType.DecPre:
            return typeFlow.typeCheckIncOrDec(this);

        case NodeType.ArrayLit:
            typeFlow.typeCheckArrayLit(this);
            return this;

        case NodeType.ObjectLit:
            typeFlow.typeCheckObjectLit(this);
            return this;

        case NodeType.Throw:
            this.operand = typeFlow.typeCheck(this.operand);
            this.type = typeFlow.voidType;
            return this;

        case NodeType.Typeof:
            this.operand = typeFlow.typeCheck(this.operand);
            this.type = typeFlow.stringType;
            return this;

        case NodeType.Delete:
            this.operand = typeFlow.typeCheck(this.operand);
            this.type = typeFlow.booleanType;
            break;

        case NodeType.TypeAssertion:
            this.castTerm = typeFlow.typeCheck(this.castTerm);
            var applyTargetType = !this.operand.isParenthesized;

            var targetType = applyTargetType ? this.castTerm.type : null;

            typeFlow.checker.typeCheckWithContextualType(targetType, typeFlow.checker.inProvisionalTypecheckMode(), true, this.operand);
            typeFlow.castWithCoercion(this.operand, this.castTerm.type, false, true);
            this.type = this.castTerm.type;
            return this;

        case NodeType.Void:
            // REVIEW - Although this is good to do for completeness's sake,
            // this shouldn't be strictly necessary from the void operator's
            // point of view
            this.operand = typeFlow.typeCheck(this.operand);
            this.type = typeFlow.checker.undefinedType;
            break;

        default:
            throw new Error("please implement in derived class");
    }
    return this;
}
```

----------------------------------------

TITLE: Using Intersections in Index Signatures
DESCRIPTION: This snippet illustrates the use of intersection types within index signatures, where tagged strings are defined as types and used as keys in several interfaces. TypeScript checks for type compatibility across these interfaces, generating errors when mismatches are detected.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indexSignatures1.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
// Intersections in index signatures

type Tag1 = { __tag1__: void };
type Tag2 = { __tag2__: void };

type TaggedString1 = string & Tag1;
type TaggedString2 = string & Tag2;

declare let s0: string;
declare let s1: TaggedString1;
declare let s2: TaggedString2;
declare let s3: TaggedString1 | TaggedString2;
declare let s4: TaggedString1 & TaggedString2;

interface I1 { [key: TaggedString1]: string }
interface I2 { [key: TaggedString2]: string }
interface I3 { [key: TaggedString1 | TaggedString2]: string }
interface I4 { [key: TaggedString1 & TaggedString2]: string }

declare let i1: I1;
declare let i2: I2;
declare let i3: I3;
declare let i4: I4;

i1[s0];  // Error
    ~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'I1'.
!!! error TS7053:   No index signature with a parameter of type 'string' was found on type 'I1'.
i1[s1];
i1[s2];  // Error
    ~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString2' can't be used to index type 'I1'.
i1[s3];  // Error
    ~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type 'I1'.
i1[s4];

i2[s0];  // Error
    ~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'I2'.
!!! error TS7053:   No index signature with a parameter of type 'string' was found on type 'I2'.
i2[s1];  // Error
    ~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1' can't be used to index type 'I2'.
i2[s2];
i2[s3];  // Error
    ~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type 'I2'.
i2[s4];

i3[s0];  // Error
    ~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'I3'.
!!! error TS7053:   No index signature with a parameter of type 'string' was found on type 'I3'.
i3[s1];
i3[s2];
i3[s3];
i3[s4];

i4[s0];  // Error
    ~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'I4'.
!!! error TS7053:   No index signature with a parameter of type 'string' was found on type 'I4'.
i4[s1];  // Error
    ~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1' can't be used to index type 'I4'.
i4[s2];  // Error
    ~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString2' can't be used to index type 'I4'.
i4[s3];  // Error
    ~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type 'I4'.
i4[s4];

    i1 = i2;  // Error
    ~~
!!! error TS2322: Type 'I2' is not assignable to type 'I1'.
!!! error TS2322:   Index signature for type 'TaggedString1' is missing in type 'I2'.
i1 = i3;
i1 = i4;  // Error
    ~~
!!! error TS2322: Type 'I4' is not assignable to type 'I1'.
!!! error TS2322:   Index signature for type 'TaggedString1' is missing in type 'I4'.

    i2 = i1;  // Error
    ~~
!!! error TS2322: Type 'I1' is not assignable to type 'I2'.
!!! error TS2322:   Index signature for type 'TaggedString2' is missing in type 'I1'.
i2 = i3;
i2 = i4;  // Error
    ~~
!!! error TS2322: Type 'I4' is not assignable to type 'I2'.
!!! error TS2322:   Index signature for type 'TaggedString2' is missing in type 'I4'.

    i3 = i1;  // Error
    ~~
!!! error TS2322: Type 'I1' is not assignable to type 'I3'.
!!! error TS2322:   Index signature for type 'TaggedString2' is missing in type 'I1'.
i3 = i2;  // Error
    ~~
!!! error TS2322: Type 'I2' is not assignable to type 'I3'.
!!! error TS2322:   Index signature for type 'TaggedString1' is missing in type 'I2'.
i3 = i4;  // Error
    ~~
!!! error TS2322: Type 'I4' is not assignable to type 'I3'.
!!! error TS2322:   Index signature for type 'TaggedString1' is missing in type 'I4'.

    i4 = i1;
i4 = i2;
i4 = i3;

    declare let o1: { [key: TaggedString1]: string };
declare let o2: { [key: TaggedString2]: string };
declare let o3: { [key: TaggedString1 | TaggedString2]: string };
declare let o4: { [key: TaggedString1 & TaggedString2]: string };

o1[s0];  // Error
    ~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ [key: TaggedString1]: string; }'.
!!! error TS7053:   No index signature with a parameter of type 'string' was found on type '{ [key: TaggedString1]: string; }'.
o1[s1];
o1[s2];  // Error
    ~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString2' can't be used to index type '{ [key: TaggedString1]: string; }'.
o1[s3];  // Error
    ~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'TaggedString1 | TaggedString2' can't be used to index type '{ [key: TaggedString1]: string; }'.
o1[s4];
```

----------------------------------------

TITLE: Pre-Collecting Variable Declaration Types in TypeScript
DESCRIPTION: This function handles the collection of variable declaration types from AST nodes, maintaining context and scope information. It checks for various declaration flags and manages symbols accordingly. Inputs include AST nodes for variable declarations, and outputs involve updates to their semantic properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserRealSource7.errors.txt#2025-04-21_snippet_13

LANGUAGE: TypeScript
CODE:
```
export function preCollectVarDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {
    var scopeChain = context.scopeChain;
    var varDecl = <VarDecl>ast;
    var isAmbient = hasFlag(varDecl.varFlags, VarFlags.Ambient);
    var isExported = hasFlag(varDecl.varFlags, VarFlags.Exported);
    var isGlobal = context.scopeChain.container == context.checker.gloMod;
    var isProperty = hasFlag(varDecl.varFlags, VarFlags.Property);
    var isStatic = hasFlag(varDecl.varFlags, VarFlags.Static);
    var isPrivate = hasFlag(varDecl.varFlags, VarFlags.Private);
    var isOptional = hasFlag(varDecl.id.flags, ASTFlags.OptionalName);

    if (context.scopeChain.moduleDecl) {
        context.scopeChain.moduleDecl.recordNonInterface();
    }
    if (isProperty ||
        isExported ||
        (context.scopeChain.container == context.checker.gloMod) ||
        context.scopeChain.moduleDecl) {
        if (isAmbient) {
            var existingSym =
                <FieldSymbol>scopeChain.scope.findLocal(varDecl.id.text, false, false);
            if (existingSym) {
                varDecl.sym = existingSym;
                return false;
            }
        }

        if (varDecl.id == null) {
            context.checker.errorReporter.simpleError(varDecl, "Expected variable identifier at this location");
            return false;
        }

        var field = new ValueLocation();
        var fieldSymbol =
            new FieldSymbol(varDecl.id.text, varDecl.minChar,
                context.checker.locationInfo.unitIndex,
                (varDecl.varFlags & VarFlags.Readonly) == VarFlags.None,
                field);
        fieldSymbol.transferVarFlags(varDecl.varFlags);
        if (isOptional) {
            fieldSymbol.flags |= SymbolFlags.Optional;
        }
        field.symbol = fieldSymbol;
        fieldSymbol.declAST = ast;
        if ((context.scopeChain.moduleDecl) ||
            (context.scopeChain.container == context.checker.gloMod)) {
            fieldSymbol.flags |= SymbolFlags.ModuleMember;
            fieldSymbol.declModule = context.scopeChain.moduleDecl;
        }

        if (hasFlag(varDecl.varFlags, VarFlags.Property) && isStatic && context.scopeChain.classType) {
            if (!context.scopeChain.classType.members.publicMembers.add(varDecl.id.text, fieldSymbol)) {
                context.checker.errorReporter.duplicateIdentifier(ast, fieldSymbol.name);
            }
            fieldSymbol.container = context.scopeChain.classType.symbol;
        }
        else {
            context.scopeChain.scope.enter(context.scopeChain.container,
                                            ast,
                                            fieldSymbol,
                                            context.checker.errorReporter,
                                            !isPrivate && (isProperty || isExported || isGlobal || isStatic),
                                            false,
                                            isAmbient);
        }

        if (hasFlag(varDecl.varFlags, VarFlags.Exported)) {
            fieldSymbol.flags |= SymbolFlags.Exported;
        }
    }
}
```

----------------------------------------

TITLE: Analyzing Unicode Property Expressions in TypeScript Regular Expressions
DESCRIPTION: This code snippet showcases multiple invalid uses of Unicode property expressions in regular expressions, resulting in various TypeScript compiler errors. It demonstrates issues with property names, values, and flag requirements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/regularExpressionScanning(target=es5).errors.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
/\p{InvalidProperty=Value}\p{=}\p{sc=}\P{=foo}[\p{}\p\\\P\P{]\p{/u,
/\p{InvalidProperty=Value}\p{=}\p{sc=}\P{=foo}[\p{}\p\\\P\P{]\p{/v,
/\p{RGI_Emoji}\P{RGI_Emoji}[^\p{RGI_Emoji}\P{RGI_Emoji}]/,
/\p{RGI_Emoji}\P{RGI_Emoji}[^\p{RGI_Emoji}\P{RGI_Emoji}]/u,
/\p{RGI_Emoji}\P{RGI_Emoji}[^\p{RGI_Emoji}\P{RGI_Emoji}]/v,
```

----------------------------------------

TITLE: Testing Enum Assignment Compatibility in TypeScript
DESCRIPTION: This code demonstrates various scenarios of enum assignment compatibility in TypeScript, including tests with enums having different members, different values for the same member names, const enums, and merged enums. It illustrates which assignments are type-compatible and which generate errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enumAssignmentCompat3.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
namespace First {
    export enum E {
        a, b, c,
    }
}
namespace Abc {
    export enum E {
        a, b, c,
    }
    export enum Nope {
        a, b, c,
    }
}
namespace Abcd {
    export enum E {
        a, b, c, d,
    }
}
namespace Ab {
    export enum E {
        a, b,
    }
}
namespace Cd {
    export enum E {
        c, d,
    }
}
namespace Const {
    export const enum E {
        a, b, c,
    }
}
namespace Decl {
    export declare enum E {
        a, b, c = 3,
    }
}
namespace Merged {
    export enum E {
        a, b, 
    }
    export enum E {
        c = 3, d,
    }
}

namespace Merged2 {
    export enum E {
        a, b, c
    }
    export module E {
        export let d = 5;
    }
}

var abc: First.E;
var secondAbc: Abc.E;
var secondAbcd: Abcd.E;
var secondAb: Ab.E;
var secondCd: Cd.E;
var nope: Abc.Nope;
var k: Const.E;
var decl: Decl.E;
var merged: Merged.E;
var merged2: Merged2.E;
abc = secondAbc; // ok
abc = secondAbcd; // missing 'd'
abc = secondAb; // ok
abc = secondCd; // missing 'd'
abc = nope; // nope!
abc = decl; // bad - value of 'c' differs between these enums
secondAbc = abc; // ok
secondAbcd = abc; // ok
secondAb = abc; // missing 'c'
secondCd = abc; // missing 'a' and 'b'
nope = abc; // nope!
decl = abc; // bad - value of 'c' differs between these enums

// const is only assignable to itself
k = k;
abc = k; // error
k = abc;

// merged enums compare all their members
abc = merged; // missing 'd'
merged = abc; // bad - value of 'c' differs between these enums
abc = merged2; // ok
merged2 = abc; // ok
```

----------------------------------------

TITLE: Demonstrating TypeScript Numeric Index Signature Type Compatibility
DESCRIPTION: This code shows how TypeScript treats properties with names that look like numbers. Properties with names that are valid numeric literals must match the type of the numeric indexer, while properties with names that only partially resemble numbers are treated as string literals.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/propertiesAndIndexersForNumericNames.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    [i: number]: number;

    // These all have numeric names; they should error
    // because their types are not compatible with the numeric indexer.
    public "1": string = "number"; // Error
    public "-1": string = "negative number"; // Error
    public "-2.5": string = "negative number"; // Error
    public "3.141592": string = "pi-sitive number"; // Error
    public "1.2e-20": string = "really small number"; // Error
    public "Infinity": string = "A gillion"; // Error
    public "-Infinity": string = "Negative-a-gillion"; // Error
    public "NaN": string = "not a number"; // Error
    
    // These all have *partially* numeric names,
    // but should really be treated as plain string literals.
    public " 1": string = "leading space"; // No error
    public "1    ": string = "trailing space"; // No error
    public "": string = "no nothing"; // No error
    public "    ": string = "just space"; // No error
    public "1 0 1": string = "several numbers and spaces"; // No error
    public "hunter2": string = "not a password"; // No error
    public "+Infinity": string = "A gillion"; // No error
    public "+NaN": string = "not a positive number"; // No error
    public "-NaN": string = "not a negative number"; // No error
    

    // These fall into the above category, however, they are "trickier";
    // these all are *scanned* as numeric literals, but they are not written in
    // "canonical" numeric representations.
    public "+1": string = "positive number (for the paranoid)"; // No error
    public "1e0": string = "just one"; // No error
    public "-0": string = "just zero"; // No error
    public "-0e0": string = "just zero"; // No error
    public "0xF00D": string = "hex food"; // No error
    public "0xBEEF": string = "hex beef"; // No error
    public "0123": string = "oct 83"; // No error
    public "0o123": string = "explicit oct 83"; // No error
    public "0b101101001010": string = "explicit binary"; // No error
    public "0.000000000000000000012": string = "should've been in exponential form"; // No error
}
```

----------------------------------------

TITLE: Invalid Export Assignment in ES6 Module
DESCRIPTION: Example showing incorrect usage of CommonJS 'export =' syntax alongside ES6 exports, resulting in compiler errors TS1203 and TS2309. The code attempts to mix module syntax patterns that are incompatible.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es6ExportEquals.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export function f() { }

export = f;
```

----------------------------------------

TITLE: Assigning Empty Object to Function Type in TypeScript
DESCRIPTION: This snippet illustrates an incorrect assignment of an empty object literal to a Function type variable. The empty object lacks the necessary properties of a Function, such as apply, call, bind, and prototype.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentToObjectAndFunction.errors.txt#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
var errFun: Function = {}; // Error for no call signature
```

----------------------------------------

TITLE: Symbol and Property Checks - TypeScript
DESCRIPTION: Function f8 checks for properties 'a' and uses a Symbol 'sym' in conjunction with other properties in an object to ensure existence before accessing them.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inKeywordTypeguard(strict=true).errors.txt#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
const sym = Symbol();

function f8(x: object) {
    if ("a" in x && 1 in x && sym in x) {
        x.a;
        x["a"];
        x[1];
        x["1"];
        x[sym];
    }
}
```

----------------------------------------

TITLE: Generic Class with String Index Signature
DESCRIPTION: Defines a generic class A<T> with constraints and string index signature in a Generics module
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assignmentCompatWithStringIndexer.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
class A<T extends Base> {
    [x: string]: T;
}
```

----------------------------------------

TITLE: Invalid Constructor Overloads with Number Type
DESCRIPTION: Class declaration showing invalid constructor overloads where string literal types are mixed with number type, causing implementation compatibility errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constructorsWithSpecializedSignatures.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare class C {
    constructor(x: "hi");
    constructor(x: "foo");
    constructor(x: number);
}
```

----------------------------------------

TITLE: Miss assignment operators - delete number array
DESCRIPTION: This snippet demonstrates using the `delete` operator on a number array without assignment. TypeScript throws an error because the operand must be a property reference.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/deleteOperatorWithNumberType.errors.txt#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
    var NUMBER1: number[] = [1, 2];
    delete NUMBER1;

```

----------------------------------------

TITLE: Module Declaration with Named Exports
DESCRIPTION: TypeScript declaration file defining two exported functions without a default export
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowSyntheticDefaultImports8.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export function foo();
export function bar();
```

----------------------------------------

TITLE: Type Export and Import with Assignment Error
DESCRIPTION: This snippet demonstrates exporting and importing types with arbitrary identifiers and highlights type assignment errors in TypeScript. It exports a type with an unusual name using the `as` keyword, imports it using a different name, and then attempts to assign an incorrect type to a variable of the imported type, resulting in a type error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arbitraryModuleNamespaceIdentifiers_module(module=amd).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
    export { type someType as "<A>" };
    import { type "<A>" as typeA } from "./arbitraryModuleNamespaceIdentifiers_module";
    const importTest: typeA = "expect error about someType";
          ~~~~~~~~~~
```

----------------------------------------

TITLE: Implementing Generic Class Decorator in TypeScript
DESCRIPTION: This code snippet defines a generic interface 'I<T>' and a decorator function 'dec' that expects an argument of type 'I<T>'. It then attempts to apply this decorator to a class 'C', resulting in a type error due to incompatible method return types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/decoratorCallGeneric.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface I<T> {
    prototype: T,
    m: () => T
}
function dec<T>(c: I<T>) { }

@dec
class C {
    _brand: any;
    static m() {}
}
```

----------------------------------------

TITLE: TypeScript Class with Invalid Public Property Declaration in Constructor
DESCRIPTION: Shows incorrect syntax where a public property is declared inside a constructor body instead of in the class body, resulting in a syntax error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/classUpdateTests.errors.txt#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
class O {
	constructor() {
		public p1 = 0; // ERROR
	}
}
```

----------------------------------------

TITLE: Generic API Class with Async Methods in TypeScript
DESCRIPTION: This snippet defines a generic API class with async methods, demonstrating how TypeScript handles promise resolution in generic contexts. It addresses a specific GitHub issue related to promise inference.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitedTypeStrictNull.errors.txt#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
// https://github.com/microsoft/TypeScript/issues/45924
class Api<D = {}> {
	// Should result in `Promise<T>` instead of `Promise<Awaited<T>>`.
	async post<T = D>() { return this.request<T>(); }
	async request<D>(): Promise<D> { throw new Error(); }
}

declare const api: Api;
interface Obj { x: number }

async function fn<T>(): Promise<T extends object ? { [K in keyof T]: Obj } : Obj> {
	// Per #45924, this was failing due to incorrect inference both above and here.
	// Should not error.
	return api.post();
}
```

----------------------------------------

TITLE: Complex Logical Assignment with Object Properties in TypeScript
DESCRIPTION: Demonstrates advanced usage of logical assignment operators (&&=, ||=, ??=) with TypeScript interfaces and conditional checks. Shows how TypeScript identifies potentially undefined values and generates type errors for unsafe property access.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/logicalAssignment4(target=es2015).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
interface ThingWithOriginal {
    name: string;
    original?: ThingWithOriginal
}
declare const v: number
function doSomethingWithAlias(thing: ThingWithOriginal | undefined, defaultValue: ThingWithOriginal | undefined) {
    if (v === 1) {
        if (thing &&= thing.original) {
            thing.name;
        }
    }
    else if (v === 2) {
        if (thing &&= defaultValue) {
            thing.name;
            defaultValue.name
        }
    }
    else if (v === 3) {
        if (thing ||= defaultValue) {
            thing.name;
            defaultValue.name;
            ~~~~~~~~~~~~
!!! error TS18048: 'defaultValue' is possibly 'undefined'.
        }
    }
    else {
        if (thing ??= defaultValue) {
            thing.name;
            defaultValue.name;
            ~~~~~~~~~~~~
!!! error TS18048: 'defaultValue' is possibly 'undefined'.
        }
    }
}
```

----------------------------------------

TITLE: Declaring function with number template literal type (TypeScript)
DESCRIPTION: Declares a function `numbers` that accepts a single argument `x` which must be a string matching the `${number}` template literal type. This type allows any string representation of a finite JavaScript number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypesPatterns.errors.txt#_snippet_6

LANGUAGE: TypeScript
CODE:
```
declare function numbers(x: `${number}`): void;
```

----------------------------------------

TITLE: Exporting a Variable in TypeScript Module
DESCRIPTION: A simple TypeScript module that exports a single variable 'a' with a numeric value of 1.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleAugmentationDisallowedExtensions.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export let a = 1;
```

----------------------------------------

TITLE: Importing fromDecl from Module in TypeScript
DESCRIPTION: Example showing how to import the fromDecl function from a declaration file and using it after import. This demonstrates single-member imports from external modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/autoImportAllowTsExtensions4.baseline.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { fromDecl } from "./decl.js";
import { Component } from "./local.js";
fromDecl
```

----------------------------------------

TITLE: Emitted JavaScript Object Destructuring Loop
DESCRIPTION: A JavaScript for loop with object destructuring assignment and variable initialization, compiled from TypeScript source.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPattern2.sourcemap.txt#2025-04-21_snippet_20

LANGUAGE: javascript
CODE:
```
for (nameA = robot.name, skillA = robot.skill, i = 0; i < 1; i++) {
    console.log(nameA);
}
```

----------------------------------------

TITLE: Invalid for...in Loop with Number Literal in TypeScript
DESCRIPTION: This snippet shows an invalid for...in loop that attempts to iterate over a numeric literal (1), which causes TypeScript error TS2407. The for...in statement requires an object, 'any' type, or type parameter on the right-hand side.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/forIn2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
for (var i in 1) {
}
```

----------------------------------------

TITLE: TypeScript Class C with A Import
DESCRIPTION: Defines class C that imports and uses class A from parent directory, showing relative path imports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/declarationDir3/amd/declarationDir3.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import {A} from '../a';

export class C {
    a: A;
}
```

----------------------------------------

TITLE: Importing and Using Exports in TypeScript
DESCRIPTION: This snippet imports the previously defined module and demonstrates the creation of its own variable and class. It creates an instance of the class and provides a function to return this instance. Additionally, it accesses an exported class from the imported module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/outModuleSubfolderSpecifyOutputFile/node/outModuleSubfolderSpecifyOutputFile.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import m1 = require("ref/m1");
export var a1 = 10;
export class c1 {
    public p1: number;
}

export var instance1 = new c1();
export function f1() {
    return instance1;
}

export var a2 = m1.m1_c1;
```

----------------------------------------

TITLE: Exporting and Importing Values with Arbitrary Identifiers in TypeScript
DESCRIPTION: This snippet demonstrates exporting and importing values using arbitrary string literals as identifiers. It includes examples of direct exports, re-exports, and namespace exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arbitraryModuleNamespaceIdentifiers_module(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
const someValue = "someValue";
type someType = "someType";

export { someValue as "<X>" };
import { "<X>" as valueX } from "./arbitraryModuleNamespaceIdentifiers_module";
if (valueX !== "someValue") throw "should be someValue";

export { "<X>" as "<Y>" } from "./arbitraryModuleNamespaceIdentifiers_module";
import { "<Y>" as valueY } from "./arbitraryModuleNamespaceIdentifiers_module";
if (valueY !== "someValue") throw "should be someValue";

export * as "<Z>" from "./arbitraryModuleNamespaceIdentifiers_module";
import { "<Z>" as valueZ } from "./arbitraryModuleNamespaceIdentifiers_module";
if (valueZ["<X>"] !== "someValue") throw "should be someValue";
if (valueZ["<Y>"] !== "someValue") throw "should be someValue";
if (valueZ["<Z>"] !== valueZ) throw "should be export namespace";
```

----------------------------------------

TITLE: Defining TypeScript Index Signature with Error
DESCRIPTION: This snippet demonstrates an error related to index signatures in TypeScript. The index signature is declared without a type annotation, which prompts a TypeScript compiler error (TS1021). It serves as an example of what not to do when defining interfaces with index signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserIndexSignature7.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface I {
  [a:string]
  ~~~~~~~~~~
!!! error TS1021: An index signature must have a type annotation.
}
```

----------------------------------------

TITLE: Initializing Loop with Variable Assignments in JavaScript
DESCRIPTION: Initializes a `for` loop. It sets up variables `_11`, `_12`, `nameA`, `_13`, and `skillA` before the loop starts. `nameA` and `skillA` are assigned values from `_11`'s properties, with default string values ('noName', 'skill') provided if the source property is `void 0`. The loop condition `i < 1` ensures the loop body executes exactly once.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.sourcemap.txt#_snippet_60

LANGUAGE: JavaScript
CODE:
```
for (_11 = { name: "trimmer", skill: "trimming" }, _12 = _11.name, nameA = _12 === void 0 ? "noName" : _12, _13 = _11.skill, skillA = _13 === void 0 ? "skill" : _13, i = 0; i < 1; i++) {
```

----------------------------------------

TITLE: Method Call Errors with this-typed Class Methods in TypeScript
DESCRIPTION: Shows type errors when calling this-typed class methods with incorrect arguments. Demonstrates parameter count and type checking for methods with both explicit and implicit this parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/thisTypeInFunctionsNegative.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
let c = new C();
c.explicitC(); // not enough arguments
  ~~~~~~~~~
!!! error TS2554: Expected 1 arguments, but got 0.
!!! related TS6210 thisTypeInFunctionsNegative.ts:9:24: An argument for 'm' was not provided.
c.explicitC('wrong type');
            ~~~~~~~~~~~~
!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
c.explicitC(13, 'too many arguments');
                ~~~~~~~~~~~~~~~~~~~~
!!! error TS2554: Expected 1 arguments, but got 2.
c.explicitThis(); // not enough arguments
  ~~~~~~~~~~~~
!!! error TS2554: Expected 1 arguments, but got 0.
!!! related TS6210 thisTypeInFunctionsNegative.ts:3:30: An argument for 'm' was not provided.
c.explicitThis('wrong type 2');
               ~~~~~~~~~~~~~~
!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
c.explicitThis(14, 'too many arguments 2');
                   ~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2554: Expected 1 arguments, but got 2.
c.implicitThis(); // not enough arguments
  ~~~~~~~~~~~~
!!! error TS2554: Expected 1 arguments, but got 0.
!!! related TS6210 thisTypeInFunctionsNegative.ts:6:18: An argument for 'm' was not provided.
c.implicitThis('wrong type 2');
               ~~~~~~~~~~~~~~
!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
c.implicitThis(14, 'too many arguments 2');
                   ~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2554: Expected 1 arguments, but got 2.
c.explicitProperty(); // not enough arguments
  ~~~~~~~~~~~~~~~~
!!! error TS2554: Expected 1 arguments, but got 0.
!!! related TS6210 thisTypeInFunctionsNegative.ts:12:41: An argument for 'm' was not provided.
c.explicitProperty('wrong type 3');
                   ~~~~~~~~~~~~~~
!!! error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
c.explicitProperty(15, 'too many arguments 3');
                       ~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2554: Expected 1 arguments, but got 2.
```

----------------------------------------

TITLE: Demonstrating TS1099 with Generic Class
DESCRIPTION: This snippet shows the TS1099 error when attempting to instantiate a generic class (`foo<T>`) using `new` with an empty type argument list (`<>`). This syntax is invalid in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emptyTypeArgumentListWithNew.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class foo<T> { }
new foo<>();
```

----------------------------------------

TITLE: Demonstrating TypeScript Error Detection for Falsy Expressions
DESCRIPTION: This snippet shows TypeScript detecting always-falsy expressions in type assertions and variable assignments. It highlights how TypeScript can identify logical errors in comparisons with undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
var x218 = (<() => Base[]>undefined) || function named() { return [d1, d2] };
var x219 = (<{ (): Base[]; }>undefined) || function() { return [d1, d2] };
var x220 = (<{ (): Base[]; }>undefined) || function named() { return [d1, d2] };
var x221 = (<Base[]>undefined) || [d1, d2];
var x222 = (<Array<Base>>undefined) || [d1, d2];
var x223 = (<{ [n: number]: Base; }>undefined) || [d1, d2];
var x224 = (<{n: Base[]; } >undefined) || { n: [d1, d2] };
```

----------------------------------------

TITLE: Exporting with Default and Named Exports in TypeScript
DESCRIPTION: Demonstrates exporting a default object and named constants using TypeScript. It does not depend on external libraries or prerequisites beyond TypeScript's basic setup. The code exports a default object and named exports that can be imported in other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports(isolatedmodules=true).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default {};
export const b = 0;
export const c = 1;
export interface D {}
```

----------------------------------------

TITLE: Spread of Unknown
DESCRIPTION: This function shows how spreading an 'unknown' type in an object literal affects the resulting type. Spreading 'unknown' causes the resulting type to become 'unknown'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unknownType1.errors.txt#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
    // Spread of unknown causes result to be unknown
    
    function f26(x: {}, y: unknown, z: any) {
        let o1 = { a: 42, ...x };  // { a: number }
        let o2 = { a: 42, ...x, ...y };  // unknown
        let o3 = { a: 42, ...x, ...y, ...z };  // any
        let o4 = { a: 42, ...z }; // any
    }
```

----------------------------------------

TITLE: Generic Type Assignment with Object Constraints in TypeScript
DESCRIPTION: Demonstrates type definitions and assignments involving generics, mapped types, and object constraints. Shows error cases where type parameters require explicit object constraints.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nonPrimitiveAndTypeVariables.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// Repros from #23800

type A<T, V> = { [P in keyof T]: T[P] extends V ? 1 : 0; };
type B<T, V> = { [P in keyof T]: T[P] extends V | object ? 1 : 0; };

let a: A<{ a: 0 | 1 }, 0> = { a: 0 };
let b: B<{ a: 0 | 1 }, 0> = { a: 0 };

function foo<T, U>(x: T) {
    let a: object = x;  // Error
    let b: U | object = x;  // Error
}
```

----------------------------------------

TITLE: Declaring Empty Module in TypeScript
DESCRIPTION: This TypeScript declaration file (definitely-not-index.d.ts) exports an empty object, providing type information for the 'pkg' module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/node10AlternateResult_noResolution.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export {};
```

----------------------------------------

TITLE: Module and Interface Name Collision in TypeScript
DESCRIPTION: This code demonstrates naming conflicts between modules and interfaces in TypeScript. It shows three scenarios: Foo1 (both module and interface exported), Foo2 (module not exported, interface exported), and Foo3 (module exported, interface not exported). The error occurs when trying to access Bar as a namespace on Foo2.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleAndInterfaceWithSameName.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
module Foo1 {
    export module Bar {
        export var x = 42;
    }

    export interface Bar { 
        y: string;
    }
}

module Foo2 {
    module Bar {
        export var x = 42;
    }

    export interface Bar {
        y: string;
    }
}

var z2 = Foo2.Bar.y; // Error for using interface name as a value.

module Foo3 {
    export module Bar {
        export var x = 42;
    }

    interface Bar { 
        y: string;
    }
}
```

----------------------------------------

TITLE: Incompatible Interface Extension in TypeScript
DESCRIPTION: Highlights an interface attempting to extend two interfaces with conflicting method signatures
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/interfaceDeclaration1.errors.txt#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
interface i10 {
	foo():number;
}

interface i11{
	foo():string;
}

interface i12 extends i10, i11 { }
```

----------------------------------------

TITLE: Importing JSON with Assertion in TypeScript
DESCRIPTION: This snippet demonstrates the importation of a JSON file using the 'import' syntax with assertions in TypeScript. It highlights the error when the module option is not correctly set. The assert statement specifies that the imported file type is JSON.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportAssertions(module=node16).errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import json from "./package.json" assert { type: "json" };
```

----------------------------------------

TITLE: Declaring Variable with Number Template Literal Type in TypeScript
DESCRIPTION: Shows variable declarations using the `${number}` template literal type, demonstrating its basic usage and combination with literal union types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypesPatterns.errors.txt#_snippet_19

LANGUAGE: TypeScript
CODE:
```
var bb: `${number}`;
var bb: `${number}` | '0';
```

----------------------------------------

TITLE: Defining Alias Class in JavaScript
DESCRIPTION: This snippet defines an 'Alias' class with a 'bar' method and exports it as a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importAliasModuleExports.errors.txt#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
class Alias {
    bar() { return 1 }
}
module.exports = Alias;
```

----------------------------------------

TITLE: String Indexer Constraint Error in Object Literal
DESCRIPTION: This snippet demonstrates a similar constraint violation within an object literal. An object `a` is defined with a string indexer, but some of its properties have types other than `string`. Consequently, TypeScript flags error TS2411, highlighting the type incompatibility.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/stringIndexerConstrainsPropertyDeclarations.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
var a: {
    [x: string]: string;

    a: string; // ok
    b: number; // error
    b: number; // error
    c: () => {} // error
    c: () => {} // error
    "d": string; // ok
    "e": number; // error
    "e": number; // error
    1.0: string; // ok
    2.0: number; // error
    2.0: number; // error
    (): string; // ok
    (x): number // ok
    foo(): string; // error
    foo(): string; // error
    "3.0": string; // ok
    "4.0": number; // error
    "4.0": number; // error
    f: MyString; // error
    f: MyString; // error
}
```

----------------------------------------

TITLE: TypeScript Constant Declaration and Import Error Handling
DESCRIPTION: This snippet demonstrates declaring constants with specific imported types in TypeScript. It uses the 'pkg' module interfaces `RequireInterface` and `ImportInterface` with type assertions and requires correct resolution modes. It addresses an error condition where the specified resolution mode must be `require` or `import`, emphasizing the importance of correct module import syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportAttributesTypeModeDeclarationEmitErrors(module=node18).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export const a = (null as any as import("pkg", { with: {"resolution-mode": "foobar"} }).RequireInterface);
export const b = (null as any as import("pkg", { with: {"resolution-mode": "import"} }).ImportInterface);
```

----------------------------------------

TITLE: Demonstrating Unreachable Code in TypeScript
DESCRIPTION: This function illustrates unreachable code in TypeScript. Due to the initial `return f();`, the subsequent `return 2;`, `return 3;`, the `function f() {}` definition, and `return 4;` statements are never executed, leading the TypeScript compiler to flag them as unreachable (TS7027).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unreachableJavascriptChecked.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
function unreachable() {
    return f();
    return 2;
    return 3;
    function f() {}
    return 4;
}
```

----------------------------------------

TITLE: Module Import and Usage
DESCRIPTION: Shows proper module import and usage of the namespace object
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAsNamespace3(module=amd).errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import * as foo from './1'

foo.ns.a;
foo.ns.b;
```

----------------------------------------

TITLE: Declaring Variables with Optional Properties and Index Signatures in TypeScript
DESCRIPTION: This snippet declares variables with optional properties and index signatures to demonstrate type compatibility. It shows how TypeScript handles assignments between objects with optional properties and those with string index signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/optionalPropertyAssignableToStringIndexSignature.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
declare let optionalProperties: { k1?: string };
declare let undefinedProperties: { k1: string | undefined };

declare let stringDictionary: { [key: string]: string };
stringDictionary = optionalProperties;  // ok
stringDictionary = undefinedProperties; // error
```

----------------------------------------

TITLE: Defining Knockout Observable Interface in TypeScript
DESCRIPTION: This snippet declares a module for Knockout (ko) and defines the Observable interface with its properties and methods. It also exports a function to create observables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/knockout.errors.txt#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare module ko {
 export interface Observable<T> {
   (): T;
   (value: T): any;
   N: number;
   g: boolean;
   r: T;
 }
 export function observable<T>(value: T): Observable<T>;
}
```

----------------------------------------

TITLE: Re-exporting Type - TypeScript
DESCRIPTION: This snippet re-exports type 'B' as type 'C' from module './a'. It allows other modules to access type 'B' under a different name. No prerequisites are required.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/renamed.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export type { B as C } from './a';
```

----------------------------------------

TITLE: Package Configuration for TypeScript Project
DESCRIPTION: This JSON structure defines a package configuration indicating the module type as ECMAScript and the main 'exports' entry point for the module. It ensures the project is treated as a module and that its entry point is './index.js'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesExportsSpecifierGenerationDirectory(module=node16).errors.txt#2025-04-21_snippet_3

LANGUAGE: JSON
CODE:
```
    {\n        \"name\": \"package\",\n        \"private\": true,\n        \"type\": \"module\",\n        \"exports\": \"./index.js\"\n    }
```

----------------------------------------

TITLE: Importing Non-Exported Module Members - TypeScript
DESCRIPTION: This snippet illustrates an incorrect attempt to import a non-exported member from a module, leading to a TypeScript error. The 'pkg' module is expected to export 'ImportInterface', but it is only declared in 'import.d.ts'. Dependencies include correctly configured module exports. Outputs are TypeScript compilation errors due to missing exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportModeDeclarationEmitErrors1(module=node16).errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { ImportInterface } from "pkg" assert { "resolution-mode": "import" };
```

----------------------------------------

TITLE: Generic Map Function for SetOf Transformation in TypeScript
DESCRIPTION: Implements a higher-order map function that transforms elements in a SetOf container. It takes a transformation function from type A to B and returns a function that converts a SetOf<A> to a SetOf<B>.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferFromGenericFunctionReturnTypes1.errors.txt#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function map<A, B>(fn: (a: A) => B): (s: SetOf<A>) => SetOf<B> {
  return (a: SetOf<A>) => {
    const b: SetOf<B> = new SetOf();
    a.forEach(x => b.add(fn(x)));
    return b;
  }
}
```

----------------------------------------

TITLE: Type Query Error in TypeScript
DESCRIPTION: This snippet demonstrates a TypeScript error (TS2304) where the name 'A' is not found when used with the `typeof` operator.  This usually means that 'A' has not been defined or imported correctly.  The error message indicates the line and column where the issue occurs.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserTypeQuery2.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var v: typeof A;
```

----------------------------------------

TITLE: Correcting Implementation by Assigning Property in Class B2
DESCRIPTION: This snippet shows an attempt to correct the class 'B' implementation through 'B2' by directly assigning a value to the property 'x'. It corrects the issue partially by adding the missing property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocImplements_properties.errors.txt#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
/** @implements A*/
class B2 {
    x = 10
}
```

----------------------------------------

TITLE: Demonstrating Unused Parameter TypeScript Error
DESCRIPTION: Shows a function where parameter 'a' is declared but never used in the function body, causing TypeScript error TS6133. The function only returns a random boolean value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noUnusedLocals_potentialPredicateUnusedParam.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
function potentialPredicateUnusedParam(a: unknown) {
  return !!Math.random();
}
```

----------------------------------------

TITLE: Preact Fragment-Only Component
DESCRIPTION: Basic implementation of a Preact-style empty Fragment component.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inlineJsxAndJsxFragPragma.errors.txt#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
/**
 * @jsx h
 * @jsxFrag Fragment
 */
import {h, Fragment} from "./renderer";
<></>
```

----------------------------------------

TITLE: Implementing Generic OK Result Type with Tuples in TypeScript
DESCRIPTION: Creates a generic OK result type and implements a function to create it. Demonstrates how TypeScript handles generic tuple types in a result container.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferFromGenericFunctionReturnTypes3.errors.txt#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
interface OK<T> {
    kind: "OK";
    value: T;
}
export function ok<T>(value: T): OK<T> {
    return {
        kind: "OK",
        value: value
    };
}

let result: OK<[string, number]> = ok(["hello", 12]);
```

----------------------------------------

TITLE: Incorrectly Assigning Function to Interface Type in TypeScript
DESCRIPTION: This code snippet shows a type error when assigning a function 'getRover' that returns a 'Dog' type directly to a variable of type 'Dog'. The function needs to be called to obtain the actual Dog object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/avoidListingPropertiesForTypesWithOnlyCallOrConstructSignatures.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface Dog {
    barkable: true
}

declare function getRover(): Dog
    
export let x:Dog = getRover;
// export let x: Dog = getRover; 
```

----------------------------------------

TITLE: Demonstrating Enum Member Resolution Errors in TypeScript
DESCRIPTION: This code snippet demonstrates how TypeScript handles enum member access. It shows both incorrect access (trying to use an enum member without proper qualification) and correct access (using the enum name with dot notation). The incorrect access triggers compiler errors TS2304 and TS1003.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/enumMemberResolution.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
enum Position2 {
    IgnoreRulesSpecific = 0
}
var x = IgnoreRulesSpecific. // error
var y = 1;
var z = Position2.IgnoreRulesSpecific; // no error
```

----------------------------------------

TITLE: Type Definition in Custom Typings Directory
DESCRIPTION: A TypeScript definition file in the typings directory that declares a constant variable 'a2' with a type of number.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeReferenceDirectiveWithFailedFromTypeRoot.errors.txt#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
declare const a2: number;
```

----------------------------------------

TITLE: Defining Object Literal with Super Method
DESCRIPTION: This snippet demonstrates an object literal definition that attempts to use 'super.method()' in several properties. However, since these definitions are not within a derived class or its methods, TypeScript raises errors indicating improper usage of 'super'. The context shows various attempts to define methods and properties using 'super' keyword without being inside a derived context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/superInObjectLiterals_ES6.errors.txt#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
var obj = {
    __proto__: {
        method() {
        }
    },
    method() {
        super.method();
    },
    get prop() {
        super.method();
        return 10;
    },
    set prop(value) {
        super.method();
    },
    p1: function () {
        super.method();
        ~~~~~
!!! error TS2660: 'super' can only be referenced in members of derived classes or object literal expressions.
    },
    p2: function f() {
        super.method();
        ~~~~~
!!! error TS2660: 'super' can only be referenced in members of derived classes or object literal expressions.
    },
    p3: () => {
        super.method();
        ~~~~~
!!! error TS2660: 'super' can only be referenced in members of derived classes or object literal expressions.
    }
};
```

LANGUAGE: typescript
CODE:
```
class A {
    method() { }
}

class B extends A {
    f() {
        var obj = {
            __proto__: {
                method() {
                }
            },
            method() {
                super.method();
            },
            get prop() {
                super.method();
                return 10;
            },
            set prop(value) {
                super.method();
            },
            p1: function () {
                super.method();
                ~~~~~
!!! error TS2660: 'super' can only be referenced in members of derived classes or object literal expressions.
            },
            p2: function f() {
                super.method();
                ~~~~~
!!! error TS2660: 'super' can only be referenced in members of derived classes or object literal expressions.
            },
            p3: () => {
                super.method();
            }
        };
    }
}
```