TITLE: Building/Running Docker Compose Project - Shell
DESCRIPTION: This command builds and starts all services defined in a docker-compose.yml file. It's recommended when a Compose file is present, simplifying the build and run process into a single step. Requires a `docker-compose.yml` file in the current directory.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/docker/010_system_prompt.md#_snippet_0

LANGUAGE: Shell
CODE:
```
docker compose up --build
```

----------------------------------------

TITLE: Building Docker Image (sh)
DESCRIPTION: Builds a Docker image using the Dockerfile in the current directory. Tags the resulting image with the name 'vonwig/bb' and the 'latest' tag. Requires Docker and a Dockerfile.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/bb/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker build -t vonwig/bb:latest .
```

----------------------------------------

TITLE: Building qrencode Docker Image (Basic - sh)
DESCRIPTION: Provides the standard 'docker build' command to create the 'vonwig/qrencode:latest' image from the Dockerfile located in the current directory.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/hub/qrencode/runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
docker build -t vonwig/qrencode:latest .
```

----------------------------------------

TITLE: Viewing Root package.json Content - JSON
DESCRIPTION: Displays the content of the main package.json file for the project. This file contains metadata about the project, including dependencies, scripts, and version information. It's used by npm or yarn to manage project packages.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/npm/2_user_prompt.md#_snippet_0

LANGUAGE: json
CODE:
```
{{npm.root_package_json}}
```

----------------------------------------

TITLE: Build and Push Docker Image with Buildx (sh)
DESCRIPTION: Builds a Docker image using the specified Buildx builder for multiple architectures (linux/amd64, linux/arm64), tags the image with a specific name and version, and pushes it to a container registry. This command requires a 'Dockerfile' in the current directory and a configured buildx builder.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/stable-diffusion/local-runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker buildx build --builder hydrobuild \
                    --platform linux/amd64,linux/arm64 \
                    --tag vonwig/evolute-stable-diffusion:latest \
                    --file Dockerfile \
                    --push .
```

----------------------------------------

TITLE: Building Multi-Platform Docker Image with Push - sh
DESCRIPTION: This command uses docker buildx with a specific builder (hydrobuild) to build a multi-platform image (linux/amd64, linux/arm64) from the Dockerfile in the current directory, tags it as 'vonwig/memory:latest', and immediately pushes it to the registry. Backslashes '\' are used for shell line continuation.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/memory/runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
docker buildx build \\
    --builder hydrobuild \\
    --platform linux/amd64,linux/arm64 \\
    --tag vonwig/memory:latest \\
    --file Dockerfile \\
    --push .
```

----------------------------------------

TITLE: Building Standard Docker Image - Docker - sh
DESCRIPTION: Builds a standard Docker image for the tree-sitter tool using the current directory as the build context. The resulting image is tagged with the name 'vonwig/tree-sitter'. This requires Docker to be installed and running.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/tree-sitter/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker build -t vonwig/tree-sitter .
```

----------------------------------------

TITLE: Building Standard Docker Image Shell
DESCRIPTION: Provides a basic command to build the Docker image locally using the Dockerfile in the current directory and tagging it.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/what_is_my_ip/runbook.md#_snippet_1

LANGUAGE: Shell
CODE:
```
docker build -t vonwig/what-is-my-ip:latest .
```

----------------------------------------

TITLE: Building Docker Image (Shell)
DESCRIPTION: Builds a Docker image named `vonwig/node_intersector` using the Dockerfile located in the current directory (.). This command creates the container image necessary to run the `node_intersector` tool.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/node_intersector/readme.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker build . -t vonwig/node_interector
```

----------------------------------------

TITLE: Running Service in Docker Container - Shell
DESCRIPTION: Runs the main service image ('mcp/docker:0.0.15') in a Docker container. It maps ports, mounts necessary sockets and volumes (including 'docker-prompts'), sets an environment variable, and ensures the container is removed on exit. This is the typical way to deploy and run the service.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/runbook.md#_snippet_6

LANGUAGE: sh
CODE:
```
docker run --rm -i --pull always -q --init \
           -v /var/run/docker.sock:/var/run/docker.sock \
           -v /run/host-services/backend.sock:/backend.sock \
           --mount type=volume,source=docker-prompts,target=/prompts \
           -p 8811:8811 \
           -e "GATEWAY_CONTAINER_RM=false" \
           mcp/docker:0.0.15 \
           serve --mcp --port 8811
```

----------------------------------------

TITLE: Execute prompts tool via Docker (Shell)
DESCRIPTION: This command runs the `vonwig/prompts:latest` Docker container to execute its internal `run` command. It sets up crucial mounts: `/var/run/docker.sock` for Docker daemon access, `docker-prompts` volume for prompts, `$HOME/.openai-api-key` for the API key, and `$PWD` for the local project directory. It also configures the working directory, user, host directory, platform, and prompts directory arguments for the tool.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/docker/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker run --rm -it \n -v /var/run/docker.sock:/var/run/docker.sock \n --mount type=volume,source=docker-prompts,target=/prompts \n --mount type=bind,source=$HOME/.openai-api-key,target=/root/.openai-api-key \n --mount type=bind,source=$PWD,target=/app/local \n --workdir /app \n vonwig/prompts:latest run \n --host-dir ~/docker/lsp \n --user $USER \n --platform "$(uname -o)" \n --prompts-dir local
```

----------------------------------------

TITLE: Run Docker Container (sh)
DESCRIPTION: Runs the built Docker image ('vonwig/evolute-stable-diffusion:latest') as a detached container named 'evolute-stable-diffusion'. It mounts the current working directory ($PWD) to a path inside the container and maps port 8000 from the container to port 8000 on the host machine.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/stable-diffusion/local-runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
docker run -d \
    --name evolute-stable-diffusion \
    -v $PWD:/app/output \
    -p 8000:8000 \
    vonwig/evolute-stable-diffusion:latest
```

----------------------------------------

TITLE: Building and Pushing docker_scout_tag_recommendation Docker Image (Shell)
DESCRIPTION: This snippet outlines the process for building and pushing the Docker image using `docker buildx` for multi-platform support (`linux/amd64`, `linux/arm64`). It tags the image and pushes it to a registry. It also includes a command to pull the image locally after pushing.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/docker_scout_tag_recommendation/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/docker_scout_tag_recommendation:latest \
    --file Dockerfile \
    --push .
docker pull vonwig/docker_scout_tag_recommendation:latest
```

----------------------------------------

TITLE: Pushing Docker Image to Registry (Shell)
DESCRIPTION: Explains the command to push a tagged Docker image to a remote container registry (like Docker Hub or another private registry). This makes the image available for others to pull and use.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/runbook.md#_snippet_3

LANGUAGE: shell
CODE:
```
docker push docker<image-name>
```

----------------------------------------

TITLE: Building Multi-Platform Docker Image with Buildx Shell
DESCRIPTION: Shows how to use docker buildx to build the image for multiple platforms (linux/amd64, linux/arm64), push the resulting manifest and layers to a registry, and then pull the image to verify.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/what_is_my_ip/runbook.md#_snippet_2

LANGUAGE: Shell
CODE:
```
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/what-is-my-ip:latest \
    --file Dockerfile \
    --push .
docker pull vonwig/what-is-my-ip:latest
```

----------------------------------------

TITLE: Run Docker Compose with Build
DESCRIPTION: This command builds the necessary Docker images (if they don't exist or have changed) and starts the services defined in the Docker Compose file in detached mode. It is the primary command used to launch the local development environment. It requires Docker Desktop to be installed and a valid Docker Compose file in the current directory.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/docker/020_user_prompt.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker compose up --build
```

----------------------------------------

TITLE: Specifying Base Image in Dockerfile
DESCRIPTION: This code snippet is a single line from a Dockerfile that specifies the base image for the build process. It indicates that the image being built should start from the latest version of the official Node.js image available on Docker Hub. This is a fundamental instruction required for almost all Dockerfiles.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/recommended_tags/README.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM node:latest
```

----------------------------------------

TITLE: Building Multi-Platform Findutils Image (sh)
DESCRIPTION: These commands use `docker buildx` to build the image for multiple platforms (`linux/amd64`, `linux/arm64`) using a specified builder. It tags the image, pushes it to a registry, and then pulls the manifest, useful for multi-architecture image management.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/findutils/runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/findutils:latest \
    --file Dockerfile \
    --push .
docker pull vonwig/findutils:latest
```

----------------------------------------

TITLE: Building and Pushing Multi-Platform Docker Image (Shell)
DESCRIPTION: Shows how to use `docker buildx build` to create a multi-platform Docker image (`linux/amd64`, `linux/arm64`), push it to a registry, and tag it as `vonwig/typos:latest`. It utilizes a specified builder (`hydrobuild`) and a Dockerfile. A subsequent `docker pull` command ensures the image is locally accessible after pushing. Requires Docker with buildx plugin, a configured builder, and registry access for pushing.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/hub/typo/runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
# docker:command=build

docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/typos:latest \
    --file Dockerfile \
    --push .
docker pull vonwig/typos:latest
```

----------------------------------------

TITLE: Multi-Platform Build and Pull Graphviz Docker (Shell)
DESCRIPTION: This command sequence uses `docker buildx` with a specific builder (`hydrobuild`) to build a multi-platform image for `linux/amd64` and `linux/arm64`. It tags the image `vonwig/graphviz:latest` and pushes it. The subsequent `docker pull` command fetches the image, likely to make it available locally after the push. Requires Docker with Buildx plugin installed, a Buildx builder configured, and a `Dockerfile` in the current directory.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/graphviz/runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
# docker:command=build

docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/graphviz:latest \
    --file Dockerfile \
    --push .
docker pull vonwig/graphviz:latest
```

----------------------------------------

TITLE: Building Multi-Platform Docker Image (Shell)
DESCRIPTION: Builds the Docker image for multiple CPU architectures (`linux/amd64`, `linux/arm64`) using Docker Buildx with a specified builder (`hydrobuild`). The `--push` flag pushes the multi-architecture image manifest and layers directly to the registry upon successful build. Requires Docker Buildx set up with a multi-platform builder. Output is the build and push progress for each platform.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/javascript-runner/runbook.md#_snippet_4

LANGUAGE: sh
CODE:
```
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/javascript-runner:latest \
    --file Dockerfile \
    --push .
```

----------------------------------------

TITLE: Building Multi-Platform Docker Image with Buildx (Shell)
DESCRIPTION: Builds a multi-architecture Docker image (`linux/amd64`, `linux/arm64`) tagged `vonwig/inotifywait:latest` using Docker Buildx and pushes it to a container registry. It requires a configured Buildx builder (like `hydrobuild`) and uses the specified Dockerfile.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/inotifywait/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/inotifywait:latest \
    --file Dockerfile \
    --push .
```

----------------------------------------

TITLE: Sharing Docker Image on Docker Hub - Shell
DESCRIPTION: This command pushes a local Docker image to a remote registry like Docker Hub. The image name must be tagged appropriately (e.g., `username/imagename:tag`) before pushing. Requires a valid image tag and authentication to the registry.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/docker/010_system_prompt.md#_snippet_2

LANGUAGE: Shell
CODE:
```
docker push repo/imagename
```

----------------------------------------

TITLE: Pushing Docker Image to Registry (Shell)
DESCRIPTION: Pushes the locally built Docker image `vonwig/javascript-runner:latest` to a Docker registry (defaulting to Docker Hub). Requires Docker and login/permissions for the registry. Output is the push progress.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/javascript-runner/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker push vonwig/javascript-runner:latest
```

----------------------------------------

TITLE: Building qrencode Docker Image (Multi-Platform - sh)
DESCRIPTION: Illustrates using 'docker buildx build' to create a multi-platform image for 'linux/amd64' and 'linux/arm64', tag it, push it to a registry, and then pull it locally.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/hub/qrencode/runbook.md#_snippet_3

LANGUAGE: sh
CODE:
```
# docker:command=build

docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/qrencode:latest \
    --file Dockerfile \
    --push .
docker pull vonwig/qrencode:latest
```

----------------------------------------

TITLE: Building Docker Image for Prompts (Shell)
DESCRIPTION: This `docker build` command constructs a Docker image for the project, using the local Dockerfile. It tags the resulting image as `vonwig/prompts:local`. The `#docker:command=build` comment is a metadata tag potentially used by other tools. Requires Docker to be installed and a Dockerfile in the current directory.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/README.md#_snippet_4

LANGUAGE: sh
CODE:
```
#docker:command=build

docker build -t vonwig/prompts:local -f Dockerfile .
```

----------------------------------------

TITLE: Running Stable Diffusion Container (Shell)
DESCRIPTION: Runs the `vonwig/evolute-stable-diffusion:latest` Docker image as a detached container named `evolute-stable-diffusion` using the specified context. It's configured with GPU access, volume mapping for output, and port mapping for API access, suitable for running the stable diffusion model.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/stable-diffusion/runbook.md#_snippet_7

LANGUAGE: Shell
CODE:
```
docker --context evolute-stable-diffusion run \
    -d --rm \
    --name evolute-stable-diffusion \
    --gpus all \
    -v $PWD:/app/output \
    -p 8000:8000 \
    vonwig/evolute-stable-diffusion:latest
```

----------------------------------------

TITLE: Building Docker Image with Buildx and Pulling (Shell)
DESCRIPTION: This snippet demonstrates using `docker buildx build` for a multi-platform build (`linux/amd64,linux/arm64`) using a specific builder (`hydrobuild`). It tags the image, pushes the resulting multi-architecture image, and then pulls the image.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/write_files/runbook.md#_snippet_2

LANGUAGE: Shell
CODE:
```
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/function_write_files:latest \
    --file Dockerfile \
    --push .
docker pull vonwig/function_write_files:latest
```

----------------------------------------

TITLE: Building and Pulling Pre-release Docker Image - Shell
DESCRIPTION: Builds a multi-platform Docker image using buildx with the 'hydrobuild' builder, tags it as 'prerelease', and pushes it. Subsequently, pulls the built image locally. Used for generating pre-release versions of the service image.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
# docker:command=build-pre-release
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag mcp/docker:prerelease \
    --file Dockerfile \
    --push .
docker pull mcp/docker:prerelease
```

----------------------------------------

TITLE: Building Docker Image from Dockerfile - Shell
DESCRIPTION: This command builds a Docker image from a Dockerfile. It is used when only Dockerfiles are present, typically requiring a path to the build context (usually '.') and potentially an image tag (e.g., `-t myimage:latest`). Requires a Dockerfile in the specified context.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/docker/010_system_prompt.md#_snippet_1

LANGUAGE: Shell
CODE:
```
docker build
```

----------------------------------------

TITLE: Building Reproducible Docker Image with Buildx (Shell)
DESCRIPTION: Builds a multi-platform Docker image for codescope using docker buildx. Tags the image and pushes it to a registry. Requires a configured buildx builder and access to a build environment.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/codescope/runbook.md#_snippet_1

LANGUAGE: Shell
CODE:
```
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/codescope:latest \
    --file Dockerfile \
    --push .
```

----------------------------------------

TITLE: Building Local Docker Images for AI Linters
DESCRIPTION: These shell commands build the Docker images required for local development and testing of the AI assistant's linting and file reading tools. The commands use the `docker build` command and tag the images with `:local`. Requires Docker to be installed and running on the local machine. The output is three locally available Docker images.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/eslint/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker build . -t vonwig/eslint:local
docker build . -t vonwig/extractor-eslint:local -f extractor.Dockerfile
docker build . -t vonwig/standardjs:local -f standardjs.Dockerfile
```

----------------------------------------

TITLE: Defining Write Files Function (YAML)
DESCRIPTION: This YAML snippet defines a function named `write_files` for a platform or tool. It takes an array of file objects as input, where each object specifies a relative `path`, the file `content`, and an optional `executable` boolean flag. The function is executed within the `vonwig/function_write_files:latest` container image, which requires read/write access to the project root.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/write_files/README.md#_snippet_0

LANGUAGE: YAML
CODE:
```
functions:
  - name: write_files
    description: Write a set of files to my project
    parameters:
        type: object
        properties:
          files:
            type: array
            items:
              type: object
              properties:
                path:
                  type: string
                  description: the relative path to the file that should be written
                content:
                  type: string
                  description: the content that should be written to a file
                executable:
                  type: boolean
                  description: whether to make the file executable
    container:
        image: vonwig/function_write_files:latest
```

----------------------------------------

TITLE: Building Docker Image (Standard) - sh
DESCRIPTION: This command builds a docker image from the Dockerfile in the current directory and tags it as 'vonwig/memory:latest'. This is a standard local build process.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/memory/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker build -t vonwig/memory:latest .
```

----------------------------------------

TITLE: Running Project Classification Tool via Docker (Shell)
DESCRIPTION: This shell command demonstrates how to execute the project classification tool packaged as a Docker image. It sets up necessary volume mounts for accessing the Docker daemon, prompt definitions, OpenAI API key, and the specific project directory to be analyzed. It passes environment and context information to the container.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/project_type/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker run --rm -it \
           -v /var/run/docker.sock:/var/run/docker.sock \
           --mount type=volume,source=docker-prompts,target=/prompts \
           --mount type=bind,source=$HOME/.openai-api-key,target=/root/.openai-api-key \
           --mount type=bind,source=/Users/slim/docker/labs-make-runbook/prompts,target=/my-prompts \
           --workdir /my-prompts \
           vonwig/prompts:latest run \
                                 --host-dir $PWD \
                                 --user $USER \
                                 --platform "$(uname -o)" \
                                 --prompts-dir "github:docker/labs-make-runbook?ref=main&path=prompts/project_type"
```

----------------------------------------

TITLE: Fetching Production Dependencies NPM Dockerfile
DESCRIPTION: Installs only the production-required dependencies within the initial Dockerfile stage using `npm ci --omit=dev`. The included `--mount` argument ensures that the npm package cache is utilized, speeding up subsequent builds.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/docker_rag/npm-best-practices.md#_snippet_0

LANGUAGE: Shell
CODE:
```
RUN --mount=type=cache,target=/root/.npm npm ci --omit=dev
```

----------------------------------------

TITLE: Build and Run Docker Image for File Processing (Shell)
DESCRIPTION: These two shell commands demonstrate the workflow for building and running a Docker image designed for file processing. The first command builds the image named `vonwig/read_files` from the current directory. The second command runs this image, mounting the host's current directory to `/project` inside the container and setting it as the working directory, then passes a JSON string `{"files":["Dockerfile"]}` as an argument to the container's entrypoint to specify the files to process.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/read_files/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker build . -t vonwig/read_files
docker run --mount type=bind,source=$PWD,target=/project --workdir /project vonwig/read_files '{"files":["Dockerfile"]}'
```

----------------------------------------

TITLE: Testing Stable Diffusion API with cURL (Shell)
DESCRIPTION: Sends an HTTP POST request to the stable diffusion API endpoint `/generate` on `localhost:8000`. It includes a JSON payload defining the image generation parameters like prompt, dimensions, and steps to test the running service directly.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/stable-diffusion/runbook.md#_snippet_10

LANGUAGE: Shell
CODE:
```
curl -X POST localhost:8000/generate \
     -H 'Content-Type: application/json' \
     -d '{"prompt": "a photo-realistic picture of a cyclist riding in Iceland. Use the style of Ray man.", "height": 512, "width": 512, "num_inference_steps": 50}'
```

----------------------------------------

TITLE: Starting Application Final Stage Dockerfile
DESCRIPTION: Defines the primary command executed when a container based on the final Docker image is launched. Using `CMD npm start` ensures that the application is correctly initiated as the container's main process.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/docker_rag/npm-best-practices.md#_snippet_3

LANGUAGE: Dockerfile
CODE:
```
CMD npm start
```

----------------------------------------

TITLE: Configuring a Custom Tool with Parameters and Container (Markdown/YAML)
DESCRIPTION: This snippet shows a more complex tool definition in the YAML frontmatter. It defines an `ffmpeg` tool with a description, parameters using a JSON schema, and details for running the tool within a Docker container, including the image and command with parameter interpolation (`{{args|into}}`). The prompt then instructs the agent on how to use this tool.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/content/tools/docs/authoring-prompts.md#_snippet_3

LANGUAGE: markdown
CODE:
```
---
tools:
  - name: ffmpeg
    description: run the ffmpeg command
    parameters:
      type: object
      properties:
        args:
          description: arguments to pass to ffmpeg
          type: array
          items:
            type: string
    container:
      image: linuxserver/ffmpeg:version-7.1-cli
      command:
        - "{{args|into}}"
---

# prompt

Use ffmpeg to convert the file UsingPuppeteer.mp4 into an animated gif file at 1 frame per second.
The output file should be named UsingPuppeteer.gif.
```

----------------------------------------

TITLE: Building and Pulling Docker Image - Shell
DESCRIPTION: This snippet shows two shell commands. The first command builds a multi-architecture (amd64, arm64) Docker image using the specified Dockerfile and buildx builder, tags it as mcp/github-mcp-server:latest, and pushes it. The second command then pulls the latest version of that image. Requires Docker, buildx, and a configured builder.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/github-mcp-server/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag mcp/github-mcp-server:latest \
    --file Dockerfile \
    --push .
docker pull mcp/github-mcp-server:latest
```

----------------------------------------

TITLE: Building Multi-platform Docker Image with Buildx (Shell)
DESCRIPTION: This command uses `docker buildx` to build the `vonwig/curl:latest` image for multiple architectures (linux/amd64, linux/arm64). It specifies a builder (`hydrobuild`), uses a Dockerfile, tags the image, and pushes it to a registry. It also includes a subsequent command to pull the built image.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/hub/curl/runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/curl:latest \
    --file Dockerfile \
    --push .
docker pull vonwig/curl:latest
```

----------------------------------------

TITLE: Building Multi-Platform Docker Image with Buildx - sh
DESCRIPTION: This command uses docker buildx to build a multi-platform Docker image for linux/amd64 and linux/arm64. It uses a specific builder (hydrobuild), tags the image as vonwig/sqlite:latest, uses the specified Dockerfile, and automatically pushes the resulting manifest list and associated images to a registry.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/sqlite/runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/sqlite:latest \
    --file Dockerfile \
    --push .
```

----------------------------------------

TITLE: Running clj-kondo Docker Command - Shell
DESCRIPTION: This command executes a specific Docker container (`vonwig/prompts:local`) to run the `clj-kondo` function. It mounts local directories and files (like the Docker socket, OpenAI API key, and the project directory) and passes various configuration parameters to the containerized prompt execution engine.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/clj-kondo/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker run --rm \
           -it \
           -v /var/run/docker.sock:/var/run/docker.sock \
           --mount type=volume,source=docker-prompts,target=/prompts \
           --mount type=bind,source=$HOME/.openai-api-key,target=/root/.openai-api-key \
           --mount type=bind,source=$PWD,target=/app/local \
           --workdir /app \
           vonwig/prompts:local run \
                                 --host-dir /Users/slim/docker/labs-ai-tools-for-devs \
                                 --user jimclark106 \
                                 --platform "$(uname -o)" \
                                 --prompts local \
                                 --pat "$(cat ~/.secrets/dockerhub-pat-ai-tools-for-devs.txt)" \
                                 --thread-id "clj-kondo"
```

----------------------------------------

TITLE: Running Docker Container for Prompts - Shell
DESCRIPTION: This command executes the `vonwig/prompts:latest` Docker container to run project-specific prompts or functions, likely related to code analysis. It sets up necessary volume mounts and bind mounts to provide access to the Docker socket, a prompts directory, the user's home directory (for sensitive files like API keys), and the current project directory. It passes arguments including the current working directory, user name, operating system info, and a target command or script name (`eslint_fix`) to the container's entrypoint. Required: Docker engine, the specified Docker image, potentially environment variables like `PROMPTS_DIR`, `HOME`, `PWD`, and `USER`.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/eslint_fix/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker run --rm \n           -it \n           -v /var/run/docker.sock:/var/run/docker.sock \n           --mount type=bind,source=$PROMPTS_DIR,target=/app/eslint_fix \n           --workdir /app \n           --mount type=volume,source=docker-prompts,target=/prompts \n           --mount type=bind,source=$HOME/.openai-api-key,target=/root/.openai-api-key \n           vonwig/prompts:latest \n                                 run \n                                 $PWD \n                                 $USER \n                                 "$(uname -o)" \n                                 eslint_fix
```

----------------------------------------

TITLE: Running Docker Container with Volumes and Args - sh
DESCRIPTION: This command runs the 'vonwig/memory:latest' image in interactive mode (-it), removes the container upon exit (--rm), mounts a local directory (~/slimslenderslacks/flask-nix-example) to /project, mounts a named volume (mcp-memory) to /memory, and passes 'create-entities' and a JSON string as arguments to the container's entrypoint. Backslashes '\' are used for shell line continuation.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/memory/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker run -it --rm \\
           -v ~/slimslenderslacks/flask-nix-example:/project \\
           -v mcp-memory:/memory \\
           vonwig/memory:latest \\
           'create-entities' \\
           '{"entities": [{"name": "me"}]}'
```

----------------------------------------

TITLE: Listing SQLite tables via Docker Shell
DESCRIPTION: Executes the SQLite `.tables` command within a Docker container to list all available tables in the specified database file (`./Chinook.db`). This requires mounting the host directory containing the database file into the container's working directory.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/sql/runbook.md#_snippet_0

LANGUAGE: shell
CODE:
```
docker run --rm -v $PWD:/workdir --workdir /workdir vonwig/sqlite:latest ./Chinook.db ".tables"
```

----------------------------------------

TITLE: Running Docker Compose Project (Shell)
DESCRIPTION: Demonstrates the command to start the project's containers defined in a `docker-compose.yml` file. The `--build` flag ensures that images are built or rebuilt as needed before starting the services.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker compose up --build
```

----------------------------------------

TITLE: Listing Docker Containers with Context (Shell)
DESCRIPTION: Lists running Docker containers within the `evolute-stable-diffusion` context. This command is helpful for checking the status and verifying that the intended container is operational.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/stable-diffusion/runbook.md#_snippet_9

LANGUAGE: Shell
CODE:
```
docker --context evolute-stable-diffusion ps
```

----------------------------------------

TITLE: Defining SQL Database Query Tool (YAML)
DESCRIPTION: This YAML snippet defines the structure and execution configuration for the `sql_db_query_tool`. It specifies the tool's name, description, input parameters (`database` and `sql`), and details the Docker container (`vonwig/sqlite:latest`) used for execution, including the command format that passes the parameters.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/sql/query-check.md#_snippet_0

LANGUAGE: YAML
CODE:
```
tools:
  - name: sql_db_query_tool
    description: execute the DB query
    parameters:
      type: object
      properties:
        database:
          type: string
          description: the database to query
        sql:
          type: string
          description: the sql statement to run
    container:
      image: vonwig/sqlite:latest
      command:
        - "{{database}}"
        - "{{sql}}"
tool_choice: required
```

----------------------------------------

TITLE: Running lazy-docker UI via Docker Container - Shell
DESCRIPTION: This command runs the lazy-docker terminal UI application inside a Docker container. It mounts the host's Docker socket to enable interaction with the Docker daemon and automatically removes the container upon exit.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/lazy_docker/020_user_prompt.md#_snippet_0

LANGUAGE: sh
CODE:
```
# docker:command=lazy-docker\ndocker run --rm -it \\n           -v /var/run/docker.sock:/var/run/docker.sock \\n           --name=lazy-docker \\n           lazyteam/lazydocker
```

----------------------------------------

TITLE: Running Command inside Codescope Container (Shell)
DESCRIPTION: Runs a specified command (e.g., man) inside the codescope Docker container. Mounts the local project path and sets the working directory. Requires the Docker image and a local project path.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/codescope/runbook.md#_snippet_5

LANGUAGE: Shell
CODE:
```
docker run -it --rm \
           --mount=type=bind,source=/Users/slim/slimslenderslacks/flask-nix-example,target=/project --workdir /project \
           vonwig/codescope:latest \
           '{"args": ""}' man
```

----------------------------------------

TITLE: Creating Custom Profile Page (TSX)
DESCRIPTION: This TSX snippet shows a Client Component page for a custom user profile. It uses `useUser({ or: "redirect" })` to ensure the user is authenticated (redirecting if not) and displays user details like `displayName` and `primaryEmail`. It also includes a `<UserButton />` and a sign-out button using `user.signOut()`. The `"use client"` directive is necessary.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/neon.md#_snippet_7

LANGUAGE: tsx
CODE:
```
'use client';
import { useUser, useStackApp, UserButton } from '@stackframe/stack';
export default function ProfilePage() {
  const user = useUser({ or: "redirect" });
  const app = useStackApp();
  return (
    <div>
      <UserButton />
      <h1>Welcome, {user.displayName || "User"}</h1>
      <p>Email: {user.primaryEmail}</p>
      <button onClick={() => user.signOut()}>Sign Out</button>
    </div>
  );
}
```

----------------------------------------

TITLE: Stopping Docker Container with Context (Shell)
DESCRIPTION: Stops the specified Docker container (`evolute-stable-diffusion`) using the named Docker context (`evolute-stable-diffusion`). This command is used to terminate a running container process gracefully.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/stable-diffusion/runbook.md#_snippet_0

LANGUAGE: Shell
CODE:
```
docker --context evolute-stable-diffusion kill evolute-stable-diffusion
```

----------------------------------------

TITLE: Running Docker AI Container via CLI (Shell)
DESCRIPTION: This detailed `docker run` command executes the `vonwig/prompts:latest` container to run an AI agent workflow via the command line. It sets up volume mounts for Docker socket access, prompt storage, and the OpenAI API key file, and binds the current directory ($PWD) as the host project directory. It passes user, platform, and the location of prompts (in this case, a GitHub repository) as arguments to the container's `run` command. Requires Docker Desktop running, the container image, and necessary files/permissions.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/README.md#_snippet_3

LANGUAGE: sh
CODE:
```
docker run
  --rm \
  --pull=always \
  -it \
  -v /var/run/docker.sock:/var/run/docker.sock \
  --mount type=volume,source=docker-prompts,target=/prompts \
  --mount type=bind,source=$HOME/.openai-api-key,target=/root/.openai-api-key \
  vonwig/prompts:latest \
    run \
    --host-dir $PWD \
    --user $USER \
    --platform "$(uname -o)" \
    --prompts "github:docker/labs-githooks?ref=main&path=prompts/git_hooks"
```

----------------------------------------

TITLE: Defining Moby Tool API Schema - OpenAPI
DESCRIPTION: This snippet provides the OpenAPI 3.1.0 specification for the Triple Whale Moby Chat API. It details the /willy/moby-chat POST endpoint, required parameters like shopId and question, response structures (SimplifiedMobyResponse), and API key security. It defines the format for requests and expected successful or error responses.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/triplewhale.md#_snippet_0

LANGUAGE: OpenAPI
CODE:
```
openapi: 3.1.0
info:
  title: Triple Whale GPT API
  description: Access e-commerce performance data using the Triple Whale Moby API.
  version: 1.0.0
servers:
  - url: https://api.triplewhale.com
    description: Production server
paths:
  /willy/moby-chat:
    post:
      operationId: answerMobyQuestion
      summary: Get an answer from the Triple Whale Moby API.
      description: Sends a user question to the API along with their shop ID and API key.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionRequest"
      responses:
        "200":
          description: Successfully retrieved the answer.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimplifiedMobyResponse"
        "400":
          description: Bad request (e.g., missing parameters).
        "403":
          description: Unauthorized, invalid API key.
        "500":
          description: Internal server error.
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: User-provided API key in UUID format.
  schemas:
    QuestionRequest:
      type: object
      required:
        - shopId
        - question
      properties:
        shopId:
          type: string
          description: store ID
          example: example-store.com
        question:
          type: string
          description: The question to ask Triple Whale.
          example: What is my ROAS for Facebook campaigns in the last 60 days?
    SimplifiedMobyResponse:
      type: object
      properties:
        isError:
          type: boolean
          description: Indicates if the API request resulted in an error.
        error:
          type: string
          nullable: true
          description: Error message if `isError` is true.
        responses:
          type: array
          description: List of responses from the API.
          items:
            $ref: "#/components/schemas/SimplifiedResponse"
        assistantConclusion:
          type: string
          description: Final summary from the assistant.
    SimplifiedResponse:
      type: object
      properties:
        isError:
          type: boolean
        errorMsg:
          type: string
          nullable: true
        question:
          type: string
        answer:
          type: array
          description: The structured answer.
          items:
            type: object
            additionalProperties:
              oneOf:
                - type: string
                - type: number
                - type: "null"
        assistant:
          type: string
```

----------------------------------------

TITLE: Executing Findutils Docker Container (sh)
DESCRIPTION: This command demonstrates how to run the `vonwig/findutils` docker container. It removes the container after exit (`--rm`), mounts the current directory (`$PWD`) to `/project` inside the container, sets a custom entrypoint, sets the working directory to `/project`, and passes arguments to the entrypoint.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/findutils/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker run --rm \
       --mount type=bind,source=$PWD,target=/project \
       --entrypoint /app/result/bin/entrypoint \
       --workdir /project \
       vonwig/findutils:latest '{"glob":"*.md"}' find "." "-name"
```

----------------------------------------

TITLE: Building Findutils Docker Image (sh)
DESCRIPTION: This command builds the docker image from the Dockerfile in the current directory and tags it as `vonwig/findutils:latest`. This is the standard way to build a single-architecture image.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/findutils/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker build -t vonwig/findutils:latest .
```

----------------------------------------

TITLE: Building Docker Image (Shell)
DESCRIPTION: This is the basic command to build the `vonwig/curl:latest` Docker image. It executes the build process using the Dockerfile located in the current directory (`.`) and tags the resulting image.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/hub/curl/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker build -t vonwig/curl:latest .
```

----------------------------------------

TITLE: Building Docker Image Locally - sh
DESCRIPTION: This command builds a Docker image from the current directory (.) using the Dockerfile found within it. The resulting image is tagged with the name vonwig/sqlite. This is a standard way to create a local image.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/sqlite/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker build -t vonwig/sqlite .
```

----------------------------------------

TITLE: Building the `vonwig/typos` Docker Image (Shell)
DESCRIPTION: Provides a basic command to build the Docker image tagged as `vonwig/typos:latest` using a Dockerfile located in the current directory (`.`). This command is suitable for a standard Docker build environment. Requires Docker installed and a valid Dockerfile in the execution directory.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/hub/typo/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker build -t vonwig/typos:latest .
```

----------------------------------------

TITLE: Building Graphviz Docker Image (Shell)
DESCRIPTION: This is a standard Docker command to build an image. It uses the `Dockerfile` in the current directory (`.`) and tags the resulting image as `vonwig/graphviz:latest`. Requires Docker installed and a `Dockerfile` in the current directory.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/graphviz/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker build -t vonwig/graphviz:latest .
```

----------------------------------------

TITLE: Building Docker Image (Shell)
DESCRIPTION: This standard Docker command builds the image from the Dockerfile located in the current directory (`.`). It tags the resulting image with the name `vonwig/imagemagick` and the tag `latest`.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/imagemagick/runbook.md#_snippet_1

LANGUAGE: shell
CODE:
```
docker build -t vonwig/imagemagick:latest .
```

----------------------------------------

TITLE: Building Docker Image (Single Platform) - Docker sh
DESCRIPTION: Build a local Docker image tagged `vonwig/sequential-thinking:latest` from the current directory's Dockerfile and build context. This command is suitable for basic local development and testing.
Requires Docker installed.
Input: Dockerfile and build context ('.').
Output: A local Docker image tagged as specified.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/sequentialthinking/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker build -t vonwig/sequential-thinking:latest .
```

----------------------------------------

TITLE: Building Fasttext Docker Image (Shell)
DESCRIPTION: Provides the standard command to build the `vonwig/fasttext:latest` Docker image. It executes the build process using the Dockerfile located in the current directory (`.`). This is suitable for single-platform builds.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/hub/fasttext/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker build -t vonwig/fasttext:latest .
```

----------------------------------------

TITLE: Building Multi-Platform Docker Image with Buildx (Shell)
DESCRIPTION: This sequence of shell commands builds the Docker image for multiple platforms (`linux/amd64`, `linux/arm64`) using `docker buildx` and a specified builder (`hydrobuild`). It tags the image, pushes it to the configured registry, and then pulls the image locally, likely for testing or immediate use.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/imagemagick/runbook.md#_snippet_2

LANGUAGE: shell
CODE:
```
# docker:command=build

docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/imagemagick:latest \
    --file Dockerfile \
    --push .
docker pull vonwig/imagemagick:latest
```

----------------------------------------

TITLE: Building and Pulling Release Docker Image - Shell
DESCRIPTION: Builds a multi-platform Docker image using buildx for a specific release version. It uses the 'hydrobuild' builder, tags the image with the version specified in the VERSION variable, and pushes it before pulling it locally.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/runbook.md#_snippet_3

LANGUAGE: sh
CODE:
```
# docker:command=build-release
VERSION="0.0.15"
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag mcp/docker:$VERSION \
    --file Dockerfile \
    --push .
docker pull mcp/docker:$VERSION
```

----------------------------------------

TITLE: Building Multi-Platform Docker Image (Buildx/Push) - Docker sh
DESCRIPTION: Use Docker Buildx with a specified builder (`hydrobuild`) to build the image for `linux/amd64` and `linux/arm64` platforms from the Dockerfile, tag it as `vonwig/sequentialthinking:latest`, push it to a registry, and then pull the resulting multi-platform image locally.
Requires Docker, Docker Buildx, a configured builder, and access to a container registry.
Input: Dockerfile, build context ('.'), builder name, platforms, tag.
Output: A multi-platform image pushed to a registry and subsequently pulled locally.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/sequentialthinking/runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/sequentialthinking:latest \
    --file Dockerfile \
    --push .
docker pull vonwig/sequentialthinking:latest
```

----------------------------------------

TITLE: Copying Artifacts Final Stage Dockerfile
DESCRIPTION: Copies the essential directories containing installed dependencies (`node_modules`) and the compiled application (`dist`) from previous build stages into the final runtime image. This step isolates the runtime environment and helps create a smaller final image.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/docker_rag/npm-best-practices.md#_snippet_2

LANGUAGE: Dockerfile
CODE:
```
COPY --from=deps /app/node_modules /app/node_modules
```

LANGUAGE: Dockerfile
CODE:
```
COPY --from=build /app/dist /app/dist
```

----------------------------------------

TITLE: Fetching User in Server Component (TSX)
DESCRIPTION: This TSX snippet demonstrates how to fetch the current authenticated user within a React Server Component using the asynchronous `stackServerApp.getUser()` method. This method is typically imported from a project-specific `stack.ts` file. It shows accessing the user's `displayName` property.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/neon.md#_snippet_5

LANGUAGE: tsx
CODE:
```
import { stackServerApp } from "@/stack";
export default async function ServerComponent() {
  const user = await stackServerApp.getUser();
  return <div>{user ? `Hello, ${user.displayName}` : "Not logged in"}</div>;
}
```

----------------------------------------

TITLE: Starting Frontend Dev Server (Shell)
DESCRIPTION: These commands navigate into the ui directory, install necessary Node.js dependencies using npm, and then start the frontend development server, typically with hot-reloading enabled. Required: Node.js, npm, being in the project root.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
cd ui
  npm install
  npm run dev
```

----------------------------------------

TITLE: Building Docker Image (Basic) with Docker (Shell)
DESCRIPTION: Builds a standard Docker image tagged `vonwig/inotifywait` using the Dockerfile located in the current directory. This is a basic build useful for local testing or single-architecture deployment.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/inotifywait/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker build -t vonwig/inotifywait .
```

----------------------------------------

TITLE: Pushing Docker Image to Registry (sh)
DESCRIPTION: Pushes the tagged Docker image 'vonwig/bb:latest' to the configured container registry (e.g., Docker Hub). Requires Docker and login credentials for the registry.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/bb/runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
docker push vonwig/bb:latest
```

----------------------------------------

TITLE: Running FFmpeg Commands via Container
DESCRIPTION: Configures an AI tool to run FFmpeg commands inside a `linuxserver/ffmpeg` container. It requires a `basedir` parameter to mount a directory volume and expects the FFmpeg command arguments via the `args` parameter.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/examples/ffmpeg.md#_snippet_2

LANGUAGE: Shell
CODE:
```
"{{args|into}}"
```

----------------------------------------

TITLE: Executing SQLite query via Docker Shell
DESCRIPTION: Executes a standard SQL `SELECT` query (`SELECT * FROM Album LIMIT 5`) against the `./Chinook.db` database within a Docker container. This demonstrates how to run arbitrary SQL statements using the containerized `sqlite3` tool.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/sql/runbook.md#_snippet_2

LANGUAGE: shell
CODE:
```
docker run --rm -v $PWD:/workdir --workdir /workdir vonwig/sqlite:latest ./Chinook.db "SELECT * FROM Album LIMIT 5"
```

----------------------------------------

TITLE: Setting JFS Secret using OpenAPI Client (Go)
DESCRIPTION: Shows how to set a JFS secret value using the generated OpenAPI Go client. It creates a Secret object with name and value, initializes the API client, invokes the SetJfsSecret endpoint, and reports errors to stderr if the call is unsuccessful. The secret object containing name and value is the primary parameter.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/docs/SecretsApi.md#_snippet_7

LANGUAGE: go
CODE:
```
package main

import (
    "context"
    "fmt"
    "os"
    openapiclient "./openapi"
)

func main() {
    secret := *openapiclient.NewSecret("Name_example", "Value_example") // Secret | the secret to be set

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)
    resp, r, err := apiClient.SecretsApi.SetJfsSecret(context.Background()).Secret(secret).Execute()
    if err != nil {
        fmt.Fprintf(os.Stderr, "Error when calling `SecretsApi.SetJfsSecret`": %v\n", err)
        fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
    }
}
```

----------------------------------------

TITLE: Retrieving Secret with SecretsApi Go
DESCRIPTION: Demonstrates how to retrieve a secret using the generated Go OpenAPI client. It shows initializing the client, setting the secret ID, executing the get request, and handling the response or error. Requires the OpenAPI client library and a configured API endpoint. Takes a secret ID string as input and returns a Secret object.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/docs/SecretsApi.md#_snippet_3

LANGUAGE: go
CODE:
```
package main

import (
    "context"
    "fmt"
    "os"
    openapiclient "./openapi"
)

func main() {
    secret := "secret_example" // string | 

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)
    resp, r, err := apiClient.SecretsApi.GetJfsSecret(context.Background(), secret).Execute()
    if err != nil {
        fmt.Fprintf(os.Stderr, "Error when calling `SecretsApi.GetJfsSecret``: %v\n", err)
        fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
    }
    // response from `GetJfsSecret`: Secret
    fmt.Fprintf(os.Stdout, "Response from `SecretsApi.GetJfsSecret`: %v\n", resp)
}
```

----------------------------------------

TITLE: Setting HTTP Proxy in Go
DESCRIPTION: This Go snippet demonstrates how to configure an HTTP proxy for the API client by setting the `HTTP_PROXY` environment variable using the `os` package. The proxy server details should replace `http://proxy_name:proxy_port`.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/README.md#_snippet_2

LANGUAGE: golang
CODE:
```
os.Setenv("HTTP_PROXY", "http://proxy_name:proxy_port")
```

----------------------------------------

TITLE: Initializing Stack Auth Project (Bash)
DESCRIPTION: This bash command uses `npx` to run the `@stackframe/init-stack` script, which automatically sets up a Next.js project for Stack Auth integration. It adds the necessary dependency, creates configuration and handler files, and wraps the root layout. The `--no-browser` flag prevents opening a browser after initialization.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/neon.md#_snippet_2

LANGUAGE: bash
CODE:
```
npx @stackframe/init-stack . --no-browser
```

----------------------------------------

TITLE: Building Docker Image for JS Runner (Shell)
DESCRIPTION: Builds the Docker image for the JavaScript runner application. It tags the image `vonwig/javascript-runner:latest` based on the Dockerfile in the current directory. Requires Docker installed. Output is the build log.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/javascript-runner/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker build -t vonwig/javascript-runner:latest .
```

----------------------------------------

TITLE: Running Fasttext Docker Image with Bind Mount (Shell)
DESCRIPTION: Demonstrates how to execute the `vonwig/fasttext:latest` Docker image. It configures a read/write bind mount to map the current host directory (`$PWD`) to `/project` inside the container, sets a specific entrypoint (`/app/result/bin/entrypoint`), and changes the working directory to `/project`.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/hub/fasttext/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker run --rm \
       --mount type=bind,source=$PWD,target=/project \
       --entrypoint /app/result/bin/entrypoint \
       --workdir /project \
       vonwig/fasttext:latest '{}'
```

----------------------------------------

TITLE: Extracting Tree-sitter Node Ranges (Regex)
DESCRIPTION: A regular expression designed to match lines in tree-sitter's parenthesized S-expression format that contain node information and its byte/point ranges. It captures the node name and the four components of its range coordinates (start line, start column, end line, end column) using capturing groups. Uses the multiline (`m`) and global (`g`) flags.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/pylint/5-1-insert-top-level-ranges.md#_snippet_2

LANGUAGE: Regex
CODE:
```
/\n (.*) \[\d*, \d*\] - \[\d*, \d*\]/gm
```

----------------------------------------

TITLE: Building and Pushing Latest Docker Images for AI Linters
DESCRIPTION: These shell commands build and push the Docker images intended for production or shared environments. The commands use the `docker build` command with the `--push` flag and tag the images with `:latest`. This requires Docker to be installed, running, and authenticated to the target Docker registry (implied by the `vonwig/` prefix). The output is updated images available in the remote registry.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/eslint/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker build --push . -t vonwig/eslint:latest --push
docker build --push . -t vonwig/extractor-eslint:latest -f extractor.Dockerfile --push
docker build --push . -t vonwig/standardjs:latest -f standardjs.Dockerfile --push
```

----------------------------------------

TITLE: Running Docker Container (Local Test) - Docker sh
DESCRIPTION: Run the previously built `vonwig/sequential-thinking:latest` image interactively (`-it`) in a disposable container (`--rm`). It mounts a volume named `mcp-sequentialthinking` to `/sequentialthinking` inside the container and passes a JSON string as a command-line argument.
Requires Docker and the image `vonwig/sequential-thinking:latest` to be built locally.
Input: Image name, volume name, JSON string argument.
Output: A running container executing the image's entrypoint or command with the provided input.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/sequentialthinking/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker run -it --rm \
           -v mcp-sequentialthinking:/sequentialthinking \
           vonwig/sequential-thinking:latest \
           '{"entities": [{"name": "me"}]}'
```

----------------------------------------

TITLE: Deleting OAuth App using ToolsApi Go
DESCRIPTION: Demonstrates how to unauthorize an OAuth application using the generated Go client library. The example initializes the client, specifies the application ID as a path parameter, executes the DELETE request, and includes basic error checking.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/docs/ToolsApi.md#_snippet_0

LANGUAGE: go
CODE:
```
package main

import (
    "context"
    "fmt"
    "os"
    openapiclient "./openapi"
)

func main() {
    app := "app_example" // string | 

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)
    resp, r, err := apiClient.ToolsApi.DeleteOAuthApp(context.Background(), app).Execute()
    if err != nil {
        fmt.Fprintf(os.Stderr, "Error when calling `ToolsApi.DeleteOAuthApp`": %v\n", err)
        fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
    }
}
```

----------------------------------------

TITLE: Running Docker Image with Bind Mount (Shell)
DESCRIPTION: This shell command runs the `vonwig/imagemagick:latest` Docker image with specific configurations. It creates a read-write bind mount from the current directory (`$PWD`) to `/project` inside the container, sets the entrypoint to `/app/result/bin/entrypoint`, changes the working directory to `/project`, and passes a JSON string `{"args": "man convert"}` as an argument to the entrypoint.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/imagemagick/runbook.md#_snippet_0

LANGUAGE: shell
CODE:
```
docker run --rm \
       --mount type=bind,source=$PWD,target=/project \
       --entrypoint /app/result/bin/entrypoint \
       --workdir /project \
       vonwig/imagemagick:latest '{"args": "man convert"}'
```

----------------------------------------

TITLE: Running Docker Image with Piped Input and Query - Docker - sh
DESCRIPTION: Runs the built Docker image of the tool, removing the container upon exit (`--rm`) and keeping stdin open (`-i`). It specifies a language and a tree-sitter query. Input is provided via process substitution (`< <(...)`) which echoes a string containing the source code directly to the container's stdin. Requires the 'vonwig/tree-sitter:latest' image to be available.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/tree-sitter/runbook.md#_snippet_5

LANGUAGE: sh
CODE:
```
docker run --rm -i vonwig/tree-sitter -lang python -query "(module (function_definition) @top-level)" < <(echo "def hello():\n\tprint(\"hello\")")
```

----------------------------------------

TITLE: Direct Tree-sitter Tool Execution with Docker Run (Shell)
DESCRIPTION: This shell command demonstrates how to execute the tree-sitter Docker tool directly using `docker run`. It specifies the container image, passes language and query parameters, and pipes sample Python code into the container's standard input using process substitution (`<(echo ...)`) for processing. The `--rm` flag ensures the container is removed after execution, and `-i` keeps stdin open.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/tree-sitter/README.md#_snippet_3

LANGUAGE: shell
CODE:
```
docker run --rm -i vonwig/tree-sitter \
                   -lang python \
                   -query "(module (function_definition) @top-level)" \
                   < <(echo "def hello():\n\tprint(\"hello\")")
```

----------------------------------------

TITLE: Configuring AWS KB Retrieval MCP Server with Docker JSON
DESCRIPTION: This JSON configuration block is used by an MCP client to define how to run the AWS Knowledge Base retrieval server as a Docker container. It specifies the 'docker run' command, includes necessary flags like '-i' and '--rm', and defines environment variables required for AWS authentication (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION). Users must replace placeholder values with their actual AWS credentials and region.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/aws-kb-retrieval-server.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "aws-kb-retrieval-server": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "AWS_ACCESS_KEY_ID",
        "-e",
        "AWS_SECRET_ACCESS_KEY",
        "-e",
        "AWS_REGION",
        "mcp/aws-kb-retrieval-server"
      ],
      "env": {
        "AWS_ACCESS_KEY_ID": "YOUR_ACCESS_KEY_HERE",
        "AWS_SECRET_ACCESS_KEY": "YOUR_SECRET_ACCESS_KEY_HERE",
        "AWS_REGION": "YOUR_AWS_REGION_HERE"
      }
    }
  }
}
```

----------------------------------------

TITLE: Build Stage Commands NPM Dockerfile
DESCRIPTION: Executes commands necessary for building the application in a dedicated stage. It first installs all project dependencies, leveraging the npm cache, and then runs the specified build script to generate distributable artifacts.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/docker_rag/npm-best-practices.md#_snippet_1

LANGUAGE: Shell
CODE:
```
RUN --mount=type=cache,target=/root/.npm npm ci
```

LANGUAGE: Shell
CODE:
```
RUN npm build
```

----------------------------------------

TITLE: Building Docker Image for AI Tools (sh)
DESCRIPTION: This command builds a Docker image from the Dockerfile located in the current directory. It tags the resulting image with the name `vonwig/tools-vector-store` and the tag `local`. This is the first step required before running a container from this image.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/tools_vector_store/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker build -t vonwig/tools-vector-store:local .
```

----------------------------------------

TITLE: Building Docker Image Locally (Shell)
DESCRIPTION: This basic command builds the Docker image from the current directory (`.`) and tags it as `vonwig/function_write_files:latest`. This is suitable for local testing and development.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/write_files/runbook.md#_snippet_1

LANGUAGE: Shell
CODE:
```
docker build -t vonwig/function_write_files:latest .
```

----------------------------------------

TITLE: Building Docker Image Locally with Docker (Shell)
DESCRIPTION: Builds a Docker image for codescope using the standard docker build command. Tags the image as vonwig/codescope:latest. Requires Docker to be installed locally.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/codescope/runbook.md#_snippet_2

LANGUAGE: Shell
CODE:
```
docker build -t vonwig/codescope:latest -f Dockerfile .
```

----------------------------------------

TITLE: Installing Dependencies using Go Get - Shell
DESCRIPTION: Explains how to install the required Go dependencies (`testify/assert`, `oauth2`, `context`) for the API client using the `go get` command. Prerequisites include having a Go environment setup.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
go get github.com/stretchr/testify/assert
go get golang.org/x/oauth2
go get golang.org/x/net/context
```

----------------------------------------

TITLE: Configuring Claude Desktop MCP Server Integration (JSON)
DESCRIPTION: This JSON snippet defines a new Model Context Protocol (MCP) server named `mcp_docker` within the Claude Desktop configuration file (`claude_desktop_config.json`). It specifies the `docker` command to be executed with arguments that run an `alpine/socat` container, bridging standard I/O (STDIO) to a TCP connection at `host.docker.internal:8811`. This allows Claude Desktop to communicate with an MCP server instance running via Docker, enabling the use of Docker-based AI tools.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/content/tools/docs/claude-desktop.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "mcp_docker": {
      "command": "docker",
      "args": [
    	"run", "-i", "--rm", "alpine/socat", "STDIO", "TCP:host.docker.internal:8811"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Configuring MCP Tavily Server with Docker (JSON)
DESCRIPTION: This JSON snippet provides the configuration required by an MCP client to launch the Tavily MCP server using Docker. It specifies the `docker run` command, arguments like passing the `TAVILY_API_KEY` environment variable and removing the container after exit, and the environment variables to set, including a placeholder for the Tavily API key. This configuration allows the MCP client to manage the lifecycle of the Tavily server container.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/tavily.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "tavily": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "TAVILY_API_KEY",
        "mcp/tavily"
      ],
      "env": {
        "TAVILY_API_KEY": "your-tavily-apikey-here"
      }
    }
  }
}
```

----------------------------------------

TITLE: Run Pylint with JSON Output in Docker - sh
DESCRIPTION: This shell command runs the pylint analysis tool inside a Docker container using the `vonwig/pylint:latest` image. It specifies the JSON output format (`-f json`) and directs the output to the `/thread/violations.json` file, analyzing all Python files (`**/*.py`). Requires Docker installed and Python files to analyze.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/pylint/1-generate-violations.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker run -it --rm vonwig/pylint:latest '{}' -f json --output /thread/violations.json **/*.py
```

----------------------------------------

TITLE: Running Codescope Container with Project Argument (Shell)
DESCRIPTION: Runs the codescope Docker container interactively and removes it upon exit. Mounts the local project path into the container and executes the application with /project as an argument. Requires the Docker image and a local project path.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/codescope/runbook.md#_snippet_3

LANGUAGE: Shell
CODE:
```
docker run -it --rm \
           --mount=type=bind,source=/Users/slim/slimslenderslacks/flask-nix-example,target=/project --workdir /project \
           vonwig/codescope:latest \
           '{"args": "/project"}'
```

----------------------------------------

TITLE: Running Docker Container Shell
DESCRIPTION: Demonstrates how to run the specific Docker image, removing the container after exit (--rm) and overriding the default entrypoint to execute the application's binary.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/what_is_my_ip/runbook.md#_snippet_0

LANGUAGE: Shell
CODE:
```
docker run --rm --entrypoint /app/result/bin/entrypoint vonwig/what-is-my-ip:latest
```

----------------------------------------

TITLE: Remove Docker Container (sh)
DESCRIPTION: Removes the specified Docker container named 'evolute-stable-diffusion' from the system. The container must be stopped (e.g., using `docker kill` or `docker stop`) before it can be removed.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/stable-diffusion/local-runbook.md#_snippet_4

LANGUAGE: sh
CODE:
```
docker rm evolute-stable-diffusion
```

----------------------------------------

TITLE: Configuring MCP Container for Gyazo Service with YAML
DESCRIPTION: This YAML snippet defines the configuration for an MCP container. It specifies the container image (`mcp/gyazo:latest`), sets the working directory inside the container (`/app`), maps a secret (`gyazo.access_token`) for environment variable injection (commonly `GYAZO_ACCESS_TOKEN`), and provides the URL of the source code repository.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/gyazo.md#_snippet_0

LANGUAGE: YAML
CODE:
```
---
mcp:
  - container:
      image: mcp/gyazo:latest
      workdir: /app
      secrets:
        gyazo.access_token: GYAZO_ACCESS_TOKEN
    source:
      url: https://github.com/nota/gyazo-mcp-server/tree/main
---
```

----------------------------------------

TITLE: Configuring Puppeteer MCP Server with Docker
DESCRIPTION: This JSON snippet provides the configuration required to define and run the Puppeteer MCP server using Docker. It specifies the Docker command, arguments (including interactive mode, auto-removal, and environment variables), and the Docker image name (`mcp/puppeteer`). This configuration is typically used within an environment that supports the Model Context Protocol for integrating AI tools.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/puppeteer.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "puppeteer": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "DOCKER_CONTAINER",
        "mcp/puppeteer"
      ],
      "env": {
        "DOCKER_CONTAINER": "true"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Azure MCP Server using Docker JSON
DESCRIPTION: This JSON snippet defines the configuration for running the Azure Model Context Protocol (MCP) server using a Docker container. It specifies the `docker` command and arguments required to execute the `mcp/azure` image, enabling access to the documented Azure tools. This configuration block is typically used within a settings file or configuration managed by the MCP client application.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/azure.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "azure": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/azure",
        "server",
        "start"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Running Docker Container with Volume and Args (sh)
DESCRIPTION: Runs the built Docker image interactively and removes the container on exit. Mounts a local project directory as a volume and sets it as the working directory inside the container. Passes specific JSON and Lisp-like arguments to the container's command. Requires Docker and the image.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/bb/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker run -it --rm -v ~/slimslenderslacks/flask-nix-example:/project \
           --workdir /project vonwig/bb:latest \
           '{"path": "./src/app.py"}' \
           '(slurp (:path args))'
```

----------------------------------------

TITLE: Building clj-kondo Docker Image Multi-Platform Shell
DESCRIPTION: Illustrates using docker buildx to build the clj-kondo image for multiple platforms (amd64, arm64), tag it, and push to a registry. Includes a subsequent command to pull the built image. Requires Docker with buildx configured and authenticated access to a registry.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/hub/clj-kondo/runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/clj-kondo:latest \
    --file Dockerfile \
    --push .
docker pull vonwig/clj-kondo:latest
```

----------------------------------------

TITLE: Configuring Redis Cloud MCP Server using Docker (JSON)
DESCRIPTION: This JSON snippet defines the configuration for running a Redis Cloud Model Context Protocol (MCP) server using a Docker container. It specifies the 'docker' command with arguments like '-i', '--rm', and '-e' to pass environment variables (API_KEY, SECRET_KEY) to the 'mcp/redis-cloud' image. The 'env' section shows where the actual key and secret values should be placed.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/redis-cloud.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "redis-cloud": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "API_KEY",
        "-e",
        "SECRET_KEY",
        "mcp/redis-cloud"
      ],
      "env": {
        "API_KEY": "<redis_cloud_api_key>",
        "SECRET_KEY": "<redis_cloud_api_secret_key>"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Notion MCP Server via Docker (JSON)
DESCRIPTION: This JSON snippet provides the configuration for running a Notion Model Context Protocol (MCP) server using Docker. It defines the `command` and `args` to execute the `mcp/notion` Docker image, including necessary flags like `-i`, `--rm`, and environment variable passing (`-e INTERNAL_INTEGRATION_TOKEN`). It also sets the `INTERNAL_INTEGRATION_TOKEN` environment variable with a placeholder value within the `env` block for the Docker container.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/notion.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "notion": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "INTERNAL_INTEGRATION_TOKEN",
        "mcp/notion"
      ],
      "env": {
        "INTERNAL_INTEGRATION_TOKEN": "ntn_****"
      }
    }
  }
}
```

----------------------------------------

TITLE: Using a Pre-configured Model Endpoint (Markdown/YAML)
DESCRIPTION: This snippet shows how to specify a known model, such as `claude-3-5-sonnet-20241022`, by name in the YAML frontmatter. For models with pre-configured endpoints, the `url` field is not required, simplifying the configuration.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/content/tools/docs/authoring-prompts.md#_snippet_5

LANGUAGE: markdown
CODE:
```
---
tools:
  - name: curl
model: claude-3-5-sonnet-20241022
---

# prompt

Run the curl command, in silent mode, to fetch gists for user slimslenderslacks from GitHub.
```

----------------------------------------

TITLE: Multi-Platform Docker Image Build with Buildx (Shell)
DESCRIPTION: Illustrates how to build the `vonwig/fasttext:latest` Docker image for multiple platforms (`linux/amd64,linux/arm64`) using `docker buildx`. It specifies a builder (`hydrobuild`), tags the image, points to the Dockerfile, and pushes the resulting multi-architecture image manifest to the registry. A subsequent pull command is included, likely for testing or local availability.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/hub/fasttext/runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/fasttext:latest \
    --file Dockerfile \
    --push .
docker pull vonwig/fasttext:latest
```

----------------------------------------

TITLE: Verifying Column Existence and Type - SQL
DESCRIPTION: An example SQL query used to verify that a column has been successfully added to a table by querying the database's information schema. This query is intended to be run using a separate tool like 'run_sql' on the temporary branch created during the migration process. It requires access to the `information_schema` and the target table/column.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/neon.md#_snippet_1

LANGUAGE: SQL
CODE:
```
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name = 'users' AND column_name = 'last_login';
```

----------------------------------------

TITLE: Running Tree-sitter Docker Image (Basic Invocation) (Shell)
DESCRIPTION: This command runs the previously built 'vonwig/tree-sitter' Docker image. The '--rm' flag ensures the container is removed after execution completes. Without further arguments, it likely runs the default command specified in the Dockerfile.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/tree-sitter-clj/runbook.md#_snippet_8

LANGUAGE: sh
CODE:
```
docker run --rm vonwig/tree-sitter
```

----------------------------------------

TITLE: Get Description Field from OAuthScopes Go
DESCRIPTION: Returns the value of the `Description` field from the `OAuthScopes` object if it is non-nil. Otherwise, it returns the zero value for a string.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/docs/OAuthScopes.md#_snippet_6

LANGUAGE: Go
CODE:
```
func (o *OAuthScopes) GetDescription() string
```

----------------------------------------

TITLE: Running Codescope Container with Input Argument (Shell)
DESCRIPTION: Runs the codescope Docker container interactively and removes it upon exit. Mounts the local project path and executes the application with -i /project as an argument, likely specifying an input path. Requires the Docker image and a local project path.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/codescope/runbook.md#_snippet_4

LANGUAGE: Shell
CODE:
```
docker run -it --rm \
           --mount=type=bind,source=/Users/slim/slimslenderslacks/flask-nix-example,target=/project --workdir /project \
           vonwig/codescope:latest \
           '{"args": "-i /project"}'
```

----------------------------------------

TITLE: Running Docker Container with Bind Mount (Shell)
DESCRIPTION: This command shows how to run the `vonwig/function_write_files` Docker container. It uses a read/write bind mount (`--mount type=bind`) to map the current directory (`$PWD`) to `/project` inside the container, sets the working directory to `/project`, and passes a JSON string defining the files to be written and their content.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/write_files/runbook.md#_snippet_0

LANGUAGE: Shell
CODE:
```
docker run --rm --mount type=bind,source=$PWD,target=/project \
                --workdir /project \
                vonwig/function_write_files:latest \
                '{"files":[{"path":"file1.txt","content":"hellow world"}]}'
```

----------------------------------------

TITLE: Running Curl Function in Docker (Shell)
DESCRIPTION: This command demonstrates how to run the `vonwig/curl:latest` Docker container, mounting the current host directory to `/project` inside the container. It sets `/project` as the working directory and executes the container's entrypoint, passing a JSON string with arguments to the curl function.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/hub/curl/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker run --rm \
       --mount type=bind,source=$PWD,target=/project \
       --entrypoint /app/result/bin/entrypoint \
       --workdir /project \
       vonwig/curl:latest '{"args": "--help"}'
```

----------------------------------------

TITLE: Running Graphviz Docker with Bind Mount (Shell)
DESCRIPTION: This command demonstrates how to execute the `vonwig/graphviz:latest` Docker image. It sets up a read-write bind mount from the current host directory (`$PWD`) to `/project` inside the container, configures `/project` as the working directory, and uses a custom entrypoint `/app/result/bin/entrypoint`. It passes arguments `{"args": "--help"}` to the image, likely consumed by the entrypoint or the `curl` function it invokes. Requires Docker installed and the image `vonwig/graphviz:latest` to be available.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/graphviz/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker run --rm \
       --mount type=bind,source=$PWD,target=/project \
       --entrypoint /app/result/bin/entrypoint \
       --workdir /project \
       vonwig/graphviz:latest '{"args": "--help"}'
```

----------------------------------------

TITLE: Running qrencode Docker Container (sh)
DESCRIPTION: Demonstrates how to run the 'vonwig/qrencode' Docker image, mounting the current directory to '/project', setting the workdir, and executing the '/app/result/bin/entrypoint' with arguments to generate a QR code image.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/hub/qrencode/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker run --rm \
       --mount type=bind,source=$PWD,target=/project \
       --entrypoint /app/result/bin/entrypoint \
       --workdir /project \
       vonwig/qrencode:latest '{"args": "-o /project/crap.png https://github.com/docker/labs-ai-tools-for-devs"}'
```

----------------------------------------

TITLE: Building Multi-Platform Docker Image - Docker Buildx - sh
DESCRIPTION: Builds a multi-architecture Docker image using Docker Buildx for linux/amd64 and linux/arm64 platforms. It tags the image as 'vonwig/tree-sitter:latest', pushes it to a registry (requires login), and then pulls the latest image locally. This process requires Docker Buildx and a configured builder, e.g., 'hydrobuild'.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/tree-sitter/runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
docker buildx build \
    --builder hydrobuild \
    --platform linux/amd64,linux/arm64 \
    --tag vonwig/tree-sitter:latest \
    --file Dockerfile \
    --push .
docker pull vonwig/tree-sitter:latest
```

----------------------------------------

TITLE: Protecting Pages with Stack Auth Middleware (TSX)
DESCRIPTION: This TSX snippet provides an example of a Next.js middleware function used to protect routes. It fetches the user using `stackServerApp.getUser()` and redirects the request to the Stack Auth sign-in page (`/handler/sign-in`) if no user is found. The `config` object specifies which paths the middleware should apply to.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/neon.md#_snippet_6

LANGUAGE: tsx
CODE:
```
export async function middleware(request: NextRequest) {
  const user = await stackServerApp.getUser();
  if (!user) {
    return NextResponse.redirect(new URL('/handler/sign-in', request.url));
  }
  return NextResponse.next();
}
export const config = { matcher: '/protected/:path*' };
```

----------------------------------------

TITLE: Configuring EduBase MCP Server with Docker JSON
DESCRIPTION: This JSON configuration defines an MCP server named "edubase" that runs using a Docker container. It specifies the Docker command and arguments needed to execute the `mcp/edubase` image, passing necessary EduBase API environment variables (`EDUBASE_API_APP`, `EDUBASE_API_URL`, `EDUBASE_API_KEY`) from the host into the container, and also explicitly setting placeholders for these variables within the configuration itself. It requires Docker to be installed and the `mcp/edubase` Docker image to be available.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/edubase.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "edubase": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "EDUBASE_API_APP",
        "-e",
        "EDUBASE_API_URL",
        "-e",
        "EDUBASE_API_KEY",
        "mcp/edubase"
      ],
      "env": {
        "EDUBASE_API_APP": "YOUR_EDUBASE_API_APP",
        "EDUBASE_API_URL": "YOUR_EDUBASE_API_URL",
        "EDUBASE_API_KEY": "YOUR_EDUBASE_API_KEY"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Lara Translate MCP Server with Docker JSON
DESCRIPTION: This JSON snippet provides the configuration required to set up the Lara Translate MCP server using Docker. It defines the command and arguments for running the 'mcp/lara' Docker image, including passing necessary environment variables for Lara Translate API authentication (LARA_ACCESS_KEY_ID and LARA_ACCESS_KEY_SECRET). This configuration is typically used within applications that support the Model Context Protocol and can launch external commands like Docker.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/lara.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "lara": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "LARA_ACCESS_KEY_ID",
        "-e",
        "LARA_ACCESS_KEY_SECRET",
        "mcp/lara"
      ],
      "env": {
        "LARA_ACCESS_KEY_ID": "YOUR_LARA_ACCESS_KEY_ID",
        "LARA_ACCESS_KEY_SECRET": "YOUR_LARA_ACCESS_KEY_SECRET"
      }
    }
  }
}
```

----------------------------------------

TITLE: Verify Column Schema SQL Query
DESCRIPTION: This SQL query retrieves the `column_name` and `data_type` from the `information_schema.columns` view for a specific table and column. It is used to verify that a new column was successfully added to a table with the expected schema after running the `prepare_database_migration` tool. This query should be executed using the `run_sql` tool against the temporary branch created during the migration process.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/neondatabase-labs.md#_snippet_0

LANGUAGE: SQL
CODE:
```
SELECT column_name, data_type
FROM information_schema.columns
WHERE table_name = 'users' AND column_name = 'last_login';
```

----------------------------------------

TITLE: Running Docker Inotifywait Container and Watching Directory (Shell)
DESCRIPTION: Runs the `vonwig/inotifywait` Docker image as a container. It removes the container upon exit (`--rm`), mounts the Docker volume `docker-prompts` to the `/prompts` directory inside the container, and executes `inotifywait` to monitor `/prompts` for modify, create, and delete events (`-e`), in monitor mode (`-m`), with quiet output (`-q`).
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/inotifywait/runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
docker run --rm -v "docker-prompts:/prompts" vonwig/inotifywait -e modify -e create -e delete -m -q /prompts/
```

----------------------------------------

TITLE: Configuring Docker Run Command for Sequential Thinking MCP Server
DESCRIPTION: This JSON snippet defines the configuration for running the 'sequentialthinking' MCP server using Docker. It specifies the 'docker' command and arguments ('run', '-i', '--rm', 'mcp/sequentialthinking') required to launch the server as a disposable interactive container. This configuration is typically used by applications that interact with MCP Servers, such as Claude Desktop.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/sequentialthinking.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "sequentialthinking": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/sequentialthinking"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Configuring VeyraX MCP Server with Docker JSON
DESCRIPTION: This JSON snippet provides the configuration structure for integrating the VeyraX MCP server into an MCP-compatible environment using Docker. It defines the command and arguments for running the Docker image and sets the necessary environment variables, specifically requiring the VEYRAX_API_KEY for authentication. Replace 'your-veyrax-api-key-here' with your actual API key.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/veyrax.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "veyrax": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "VEYRAX_API_KEY",
        "mcp/veyrax"
      ],
      "env": {
        "VEYRAX_API_KEY": "your-veyrax-api-key-here"
      }
    }
  }
}
```

----------------------------------------

TITLE: Tagging Docker Image for Sharing (Shell)
DESCRIPTION: Shows how to create a new tag for a Docker image. This command is typically used to tag an image with a repository name and optionally a version before pushing it to a container registry.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/runbook.md#_snippet_2

LANGUAGE: shell
CODE:
```
docker tag <image-name> docker<image-name>
```

----------------------------------------

TITLE: Configuring Sentry MCP Server using Docker (MCP JSON)
DESCRIPTION: Provides a JSON configuration snippet for defining the Sentry MCP server within an MCP environment. It uses Docker to run the server image, passing the necessary SENTRY_AUTH_TOKEN environment variable via command-line arguments for security.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/sentry.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "sentry": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "SENTRY_AUTH_TOKEN",
        "mcp/sentry",
        "--auth-token",
        "$SENTRY_AUTH_TOKEN"
      ],
      "env": {
        "SENTRY_AUTH_TOKEN": "YOUR_SENTRY_TOKEN"
      }
    }
  }
}
```

----------------------------------------

TITLE: Building Tree-sitter Docker Image (Shell)
DESCRIPTION: This command uses Docker to build an image from the Dockerfile in the current directory. The resulting image is tagged as 'vonwig/tree-sitter' for easy reference.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/tree-sitter-clj/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker build -t vonwig/tree-sitter .
```

----------------------------------------

TITLE: List User GitHub Issues (gh CLI, Shell)
DESCRIPTION: Uses the `gh` command-line tool to retrieve and display a list of the current user's open GitHub issues. Requires the `gh` CLI to be installed and configured with authentication to your GitHub account.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/hub/gh.md#_snippet_0

LANGUAGE: Shell
CODE:
```
gh list issues
```

----------------------------------------

TITLE: Check if Metadata Field is Set on OAuthScopes Go
DESCRIPTION: Returns a boolean value indicating whether the `Metadata` field has been explicitly set on the `OAuthScopes` object.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/docs/OAuthScopes.md#_snippet_13

LANGUAGE: Go
CODE:
```
func (o *OAuthScopes) HasMetadata() bool
```

----------------------------------------

TITLE: Defining Git Tool Configuration (YAML)
DESCRIPTION: This YAML snippet defines a 'git' tool for use by an agent. It specifies the container image 'alpine/git:latest', sets up read-only volume mounts for SSH credentials and git configuration needed to access private repositories, and defines how command arguments are passed to the container.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/examples/git.md#_snippet_0

LANGUAGE: yaml
CODE:
```
tools:
  - name: git
    description: execute something with git
    parameters:
      type: object
      properties:
        args:
          type: array
          description: the args to send to git
          items:
            type: string
    container:
     image: alpine/git:latest
     mounts:
       - "/Users/slim/agent/.ssh:/root/.ssh:ro"
       - "/Users/slim/agent/.gitconfig:/root/.gitconfig:ro"
     command:
       - --no-pager
       - "{{args|into}}"
workdir: /thread/docker-test
```

----------------------------------------

TITLE: Running docker_scout_tag_recommendation Docker Image (Shell)
DESCRIPTION: This snippet demonstrates how to execute the docker_scout_tag_recommendation function packaged as a Docker image. It uses `docker run` with the `--rm` flag to remove the container after execution. The input is passed as a JSON string via standard input using `echo` and command substitution.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/docker_scout_tag_recommendation/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker run --rm vonwig/docker_scout_tag_recommendation:latest "$(echo '{"repository":"alpine"}')"
```

----------------------------------------

TITLE: Configuring MCP Client for Astra DB Server (JSON)
DESCRIPTION: This JSON snippet provides the configuration necessary for an MCP client to integrate with the Astra DB MCP server by running its Docker image. It defines the command to execute the Docker container, passing essential arguments and environment variables like the Astra DB API endpoint and application token required for the server to connect to Astra DB.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/astra-db.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "astra-db": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "ASTRA_DB_API_ENDPOINT",
        "-e",
        "ASTRA_DB_APPLICATION_TOKEN",
        "mcp/astra-db"
      ],
      "env": {
        "ASTRA_DB_API_ENDPOINT": "",
        "ASTRA_DB_APPLICATION_TOKEN": "your_astra_db_token"
      }
    }
  }
}
```

----------------------------------------

TITLE: Building clj-kondo Docker Image Locally Shell
DESCRIPTION: Provides the standard Docker command to build the clj-kondo image from a Dockerfile in the current directory. Requires Docker to be installed.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/hub/clj-kondo/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker build -t vonwig/clj-kondo:latest .
```

----------------------------------------

TITLE: Get Metadata Field with Existence Check from OAuthScopes Go
DESCRIPTION: Returns a tuple containing the `Metadata` field value and a boolean indicating if the value has been set. This allows distinguishing between a zero value and a field that hasn't been explicitly set.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/docs/OAuthScopes.md#_snippet_11

LANGUAGE: Go
CODE:
```
func (o *OAuthScopes) GetMetadataOk() (*[]string, bool)
```

----------------------------------------

TITLE: Running Docker Image for Markdown Parsing with Input (Shell)
DESCRIPTION: This command runs the 'vonwig/tree-sitter' Docker image specifically for parsing Markdown. The '-i' flag keeps stdin open, '--rm' removes the container afterward, and it pipes a Markdown string as input.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/tree-sitter-clj/runbook.md#_snippet_10

LANGUAGE: sh
CODE:
```
docker run -i --rm vonwig/tree-sitter markdown < <(echo "## hello\n")
```

----------------------------------------

TITLE: Setting Environment Variable (Shell)
DESCRIPTION: Explains how to set the `DESKTOP_PLUGIN_IMAGE` environment variable, which is a prerequisite for running the project. Replace `<your-image-name>` with the actual name of the Docker image required.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/runbook.md#_snippet_0

LANGUAGE: shell
CODE:
```
export DESKTOP_PLUGIN_IMAGE=<your-image-name>
```

----------------------------------------

TITLE: Get Policy Name With Ok Go
DESCRIPTION: Returns a tuple containing the Name field value and a boolean. The boolean indicates whether the field is non-nil (i.e., has been explicitly set), allowing callers to distinguish between a zero value and an unset field.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/docs/Policy.md#_snippet_3

LANGUAGE: go
CODE:
```
func (o *Policy) GetNameOk() (*string, bool)
```

----------------------------------------

TITLE: Expected AI Output Format for Project Classification (JSON)
DESCRIPTION: This JSON snippet specifies the required format for the AI's response after classifying the project. The AI is instructed to output only this structure, providing the identified project type(s) as an array under the 'context.project' path.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/project_type/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{"context": {"project": ["type"]}}
```

----------------------------------------

TITLE: Setting StoredSecret Name Go
DESCRIPTION: Sets the value of the Name field to the provided string value.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/docs/StoredSecret.md#_snippet_4

LANGUAGE: Go
CODE:
```
func (o *StoredSecret) SetName(v string)
```

----------------------------------------

TITLE: Installing VSCode Extension (Shell)
DESCRIPTION: This shell command installs the Docker AI VSCode extension from a local .vsix package file. The command uses the `code` CLI tool provided by VSCode, followed by the `--install-extension` flag and the path to the .vsix file. Requires the VSCode application and its CLI tool to be in the system's PATH.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
code --install-extension 'labs-ai-tools-vscode-<version>.vsix'
```

----------------------------------------

TITLE: Configuring Headless Chrome Startup Command (Shell)
DESCRIPTION: This snippet defines the command-line arguments used to start the headless Chrome browser within the `alpine-chrome` container. It includes `--no-sandbox` necessary for running in some container environments, sets the remote debugging address to listen on all interfaces (`0.0.0.0`) on port `9222`, and navigates to an initial URL specified by the `{{url|safe}}` template variable upon startup.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/chrome.md#_snippet_4

LANGUAGE: Shell
CODE:
```
--no-sandbox --remote-debugging-address=0.0.0.0 --remote-debugging-port=9222 {{url|safe}}
```

----------------------------------------

TITLE: Defining Bash Function Configuration in YAML
DESCRIPTION: This snippet defines a function named `bash` for execution within a containerized environment. It specifies the Docker image (`wbitt/network-multitool`) and the command pattern (`bash -c "{{command|safe}}"`) used to execute the function's input. The function accepts a single string parameter named `command`, which is inserted into the container's execution command. This allows the system to run arbitrary bash commands using the tools available in the container image.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/networking.md#_snippet_0

LANGUAGE: YAML
CODE:
```
---
functions:
  - name: bash
    description: Run a bash script in the utilities container.
    parameters:
      type: object
      properties:
        command:
          type: string
          description: The command to send to bash
    container: 
        image: wbitt/network-multitool  
        command:
          - "bash"
          - "-c"
          - "{{command|safe}}"
---

```

----------------------------------------

TITLE: Switching Docker Context (Shell)
DESCRIPTION: Switches the current active Docker context to `evolute-stable-diffusion`. This command ensures that subsequent Docker commands target the daemon associated with this specific context, useful for managing multiple Docker environments.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/stable-diffusion/runbook.md#_snippet_3

LANGUAGE: Shell
CODE:
```
docker context use evolute-stable-diffusion
```

----------------------------------------

TITLE: Building Docker Image for Git Tool (Shell)
DESCRIPTION: This command builds a local Docker image for the Git tool. It uses the Dockerfile located in the current directory (`.`) and tags the resulting image as `vonwig/git:local`.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/git/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker build . -t vonwig/git:local
```

----------------------------------------

TITLE: Kill Docker Container (sh)
DESCRIPTION: Forces the immediate stop of the running Docker container named 'evolute-stable-diffusion'. This is often used to quickly shut down a container.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/stable-diffusion/local-runbook.md#_snippet_3

LANGUAGE: sh
CODE:
```
docker kill evolute-stable-diffusion
```

----------------------------------------

TITLE: Defining qrencode Tool Configuration in YAML
DESCRIPTION: Defines the configuration for the 'qrencode' tool within the MCP framework using YAML. It specifies the tool's name, a description to guide AI models, the parameters expected ('args' as a string), the Docker image to use ('vonwig/qrencode:latest'), and how the container command is constructed using the provided arguments. This configuration allows the tool to be invoked with command-line arguments passed directly to the 'qrencode' executable inside the container.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/content/tools/posts/tool_descriptions.md#_snippet_0

LANGUAGE: yaml
CODE:
```
tools:
  - name: qrencode
    description: use the qrencode command
    parameters:
      type: object
      properties:
        args:
          type: string
          description: The arguments to pass to qrencode
    container:
      image: vonwig/qrencode:latest
      command:
        - "{{args}}"

```

----------------------------------------

TITLE: Running Simple JS Code in Docker (Shell)
DESCRIPTION: Runs the Docker image, passing a simple JavaScript string `"console.log('gorsh');"` as a command-line argument for evaluation. The `--rm` flag removes the container after execution, and `-v thread:/thread` mounts a volume (likely related to the application's internal handling). Requires Docker installed. Input is the JS string; output is the result of the JS execution.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/javascript-runner/runbook.md#_snippet_2

LANGUAGE: sh
CODE:
```
docker run --rm -v thread:/thread vonwig/javascript-runner:latest "console.log('gorsh');"
```

----------------------------------------

TITLE: Viewing package-lock.json Content - JSON
DESCRIPTION: Shows the content of the package-lock.json file. This file is automatically generated for npm projects and records the exact versions of installed packages and their dependencies, ensuring reproducible builds.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/npm/2_user_prompt.md#_snippet_1

LANGUAGE: json
CODE:
```
{{npm.package_lock}}
```

----------------------------------------

TITLE: Configuring Docker Command for Oxylabs MCP Server - JSON
DESCRIPTION: This JSON snippet defines the configuration for running the Oxylabs MCP server using Docker. It specifies the `docker run` command, arguments for interactive mode, automatic removal, and passing required environment variables (`OXYLABS_USERNAME`, `OXYLABS_PASSWORD`). It also provides placeholders for the actual credentials within the `env` object. This configuration is intended for use with systems supporting the MCP standard to launch the server.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/oxylabs.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "oxylabs": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "OXYLABS_USERNAME",
        "-e",
        "OXYLABS_PASSWORD",
        "mcp/oxylabs"
      ],
      "env": {
        "OXYLABS_USERNAME": "YOUR_USERNAME_HERE",
        "OXYLABS_PASSWORD": "YOUR_PASSWORD_HERE"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Elasticsearch MCP Server with Docker
DESCRIPTION: This configuration snippet defines how to run the Elasticsearch MCP server using Docker. It specifies the `docker run` command, arguments like `-i`, `--rm`, and environment variables (`ES_URL`, `ES_API_KEY`) required by the server, and provides default values for these variables. It's intended for integration into a larger system that uses MCP servers.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/elasticsearch.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "elasticsearch": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "ES_URL",
        "-e",
        "ES_API_KEY",
        "mcp/elasticsearch"
      ],
      "env": {
        "ES_URL": "http://localhost:9200",
        "ES_API_KEY": "your-api-key"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring PostgreSQL MCP Server with Docker - JSON
DESCRIPTION: This JSON snippet defines the configuration for integrating the `mcp/postgres` Docker image as an MCP server. It specifies the `docker` command to run the container with interactive mode (`-i`), auto-removal (`--rm`), and passes the `POSTGRES_URL` environment variable, including the URL itself as an argument. The `env` block explicitly sets a placeholder `POSTGRES_URL`.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/postgres.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "postgres": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "POSTGRES_URL",
        "mcp/postgres",
        "$POSTGRES_URL"
      ],
      "env": {
        "POSTGRES_URL": "postgresql://host.docker.internal:5432/mydb"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring MCP Project with Docker Container - YAML
DESCRIPTION: This YAML snippet defines the configuration for a single service or component within an MCP project. It specifies the Docker image to use, the working directory inside the container, how to map secrets (like API tokens) to environment variables, and the source code repository URL.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/webflow.md#_snippet_0

LANGUAGE: yaml
CODE:
```
mcp:
  - container:
      image: mcp/webflow:latest
      workdir: /app
      secrets:
        webflow.token: WEBFLOW_TOKEN
    source:
      url: https://github.com/slimslenderslacks/mcp-server/tree/slim/docker
```

----------------------------------------

TITLE: Running JS with UUID Module in Docker (Shell)
DESCRIPTION: Executes the Docker image with JavaScript code that requires and uses the `uuid` module to generate and print a UUID. Similar to the previous run command, it uses `--rm` and volume mounting. Requires Docker and the `uuid` module to be available within the container image. Input is the JS string; output is a generated UUID.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/javascript-runner/runbook.md#_snippet_3

LANGUAGE: sh
CODE:
```
docker run --rm -v thread:/thread vonwig/javascript-runner:latest "const { v4 } = require('uuid'); console.log(v4());"
```

----------------------------------------

TITLE: Configuring Dart MCP Server with Docker (JSON)
DESCRIPTION: This JSON configuration defines how to run the Dart MCP server as a Docker container. It specifies the `docker` command, arguments for interactive execution and removal after exit, and environment variables (`DART_HOST`, `DART_TOKEN`) required for the server to connect to the Dart instance. Example values for the environment variables are provided.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/dart.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "dart": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "DART_HOST",
        "-e",
        "DART_TOKEN",
        "mcp/dart"
      ],
      "env": {
        "DART_HOST": "https://app.itsdart.com",
        "DART_TOKEN": "dsa_..."
      }
    }
  }
}
```

----------------------------------------

TITLE: Define Imagemagick Command (YAML)
DESCRIPTION: This YAML snippet defines the command executed inside the 'dpokidov/imagemagick' container for the 'imagemagick' function. It passes the value provided by the 'args' parameter directly as arguments to the default executable within the container. The '{{args|safe}}' syntax is a templated parameter injection using the 'safe' filter.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/grab-logo.md#_snippet_1

LANGUAGE: YAML
CODE:
```
command:
  - "{{args|safe}}"
```

----------------------------------------

TITLE: Installing Go Dependencies
DESCRIPTION: These shell commands install the required Go dependencies for the generated API client. It includes packages for testing, OAuth2 authentication, and context handling.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
go get github.com/stretchr/testify/assert
go get golang.org/x/oauth2
go get golang.org/x/net/context
```

----------------------------------------

TITLE: Define Bash Command for Network Tools (YAML)
DESCRIPTION: This YAML snippet defines the command executed inside the 'wbitt/network-multitool' container when the 'bash-network-tools' function is invoked. It runs '/bin/bash' with the '-c' option, executing the string provided by the 'command' parameter. The '{{command|safe}}' syntax indicates a templated parameter injection, with the 'safe' filter likely preventing auto-escaping.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/grab-logo.md#_snippet_0

LANGUAGE: YAML
CODE:
```
command:
  - "bash"
  - "-c"
  - "{{command|safe}}"
```

----------------------------------------

TITLE: Listing Docker Contexts (Shell)
DESCRIPTION: Lists all configured Docker contexts available on the system. This helps users see their available environments and verify the active context.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/stable-diffusion/runbook.md#_snippet_4

LANGUAGE: Shell
CODE:
```
docker context ls
```

----------------------------------------

TITLE: Example curl Command for Chrome DevTools Endpoint (Shell)
DESCRIPTION: This snippet provides a concrete example of a `curl` command used to interact with the Chrome DevTools endpoint. It sends a `PUT` request to the `/json/new` endpoint to create a new browser tab, includes the required `Host` header, and uses `-sg` flags for silent output and error suppression, commonly used to check the Chrome server status or get a new page ID.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/chrome.md#_snippet_3

LANGUAGE: Shell
CODE:
```
-X PUT -H "Host: localhost:9222" -sg http://host.docker.internal:9222/json/new
```

----------------------------------------

TITLE: Configuring Stripe MCP Server with Docker JSON
DESCRIPTION: This JSON snippet provides the configuration required to run the Stripe MCP server as a Docker container. It specifies the Docker command and arguments, including mounting the container interactively, auto-removing it on exit, passing the `STRIPE_SECRET_KEY` environment variable from the host, specifying the `mcp/stripe` image, and enabling all tools. It also defines the `STRIPE_SECRET_KEY` environment variable with a placeholder value.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/stripe.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "stripe": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "STRIPE_SECRET_KEY",
        "mcp/stripe",
        "--tools=all"
      ],
      "env": {
        "STRIPE_SECRET_KEY": "sk_STRIPE_SECRET_KEY"
      }
    }
  }
}
```

----------------------------------------

TITLE: Running clj-kondo Docker Image Shell
DESCRIPTION: Demonstrates how to run the clj-kondo Docker image with a bind mount to a local project, passing arguments as a JSON string to the entrypoint. The output is piped to jq for pretty printing. Requires Docker and jq to be installed.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/hub/clj-kondo/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker run --rm \
       --mount type=bind,source=/Users/slim/docker/labs-ai-tools-for-devs,target=/project \
       --workdir /project \
       vonwig/clj-kondo:latest '{"args": ["--lint","."]}' | jq .
```

----------------------------------------

TITLE: Configuring Descope MCP Server with Docker (JSON)
DESCRIPTION: This JSON configuration snippet shows how to define the Descope MCP server for use within an application that utilizes the Model Context Protocol. It specifies the 'docker' command to run the 'mcp/descope' image, including arguments for interactive mode, automatic removal, and mapping required environment variables. The snippet includes placeholders for the Descope Project ID and Management Key, which are essential for authenticating and connecting the server to your Descope project.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/descope.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "descope": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "DESCOPE_PROJECT_ID",
        "-e",
        "DESCOPE_MANAGEMENT_KEY",
        "mcp/descope"
      ],
      "env": {
        "DESCOPE_PROJECT_ID": "your-descope-project-id-here",
        "DESCOPE_MANAGEMENT_KEY": "your-descope-management-key-here"
      }
    }
  }
}
```

----------------------------------------

TITLE: Running Box MCP Server with Docker Configuration (JSON)
DESCRIPTION: JSON configuration defining how to run the Box MCP server using Docker. It specifies the Docker command, arguments (including volume mounts and environment variable flags), and the required `env` block to pass the `BOX_CLIENT_ID` and `BOX_CLIENT_SECRET` for authentication.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/box.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "box": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "BOX_CLIENT_ID",
        "-e",
        "BOX_CLIENT_SECRET",
        "mcp/box"
      ],
      "env": {
        "BOX_CLIENT_ID": "your_client_id",
        "BOX_CLIENT_SECRET": "your_client_secret"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Scrapezy MCP Server with Docker in JSON
DESCRIPTION: This JSON snippet provides a configuration example for setting up the Scrapezy MCP server using Docker. It defines a server entry named 'scrapezy', specifying the Docker command and arguments required to run the container. It also includes an environment variable placeholder for the required SCRAPEZY_API_KEY.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/scrapezy.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "scrapezy": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "SCRAPEZY_API_KEY",
        "mcp/scrapezy"
      ],
      "env": {
        "SCRAPEZY_API_KEY": "your_api_key"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring ScrapeGraph MCP Server with Docker JSON
DESCRIPTION: This JSON snippet defines how to configure the ScrapeGraph MCP server to run via Docker. It specifies the Docker command, arguments (`run`, `-i`, `--rm`, `-e`), and environment variables (`SGAI_API_KEY`) needed to launch the server as a disposable container. Users need to replace "YOUR_SGAI_API_KEY" with their actual ScrapeGraphAI API key.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/scrapegraph.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "scrapegraph": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "SGAI_API_KEY",
        "mcp/scrapegraph"
      ],
      "env": {
        "SGAI_API_KEY": "YOUR_SGAI_API_KEY"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring and Running Tembo MCP Server via Docker (JSON)
DESCRIPTION: This JSON snippet provides a configuration example for running the Tembo MCP server using Docker. It specifies the Docker command, arguments for running interactively and removing the container on exit, and setting the TEMBO_API_KEY environment variable required for authentication. Requires Docker installed and a valid Tembo API key.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/tembo.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "tembo": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "TEMBO_API_KEY",
        "mcp/tembo"
      ],
      "env": {
        "TEMBO_API_KEY": "your-tembo-apikey-here"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Wolfram Alpha MCP Server in JSON
DESCRIPTION: This JSON snippet shows the configuration required to define and run the Wolfram Alpha MCP server using Docker. It specifies the Docker command, arguments (including interactive mode, auto-removal, and environment variable pass-through), and the necessary environment variable `WOLFRAM_API_KEY` for authentication with the Wolfram Alpha API.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/wolfram-alpha.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "wolfram-alpha": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "WOLFRAM_API_KEY",
        "mcp/wolfram-alpha"
      ],
      "env": {
        "WOLFRAM_API_KEY": "your-app-id"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring OpenAPI Schema MCP Server using Docker JSON
DESCRIPTION: This JSON snippet shows how to configure the `openapi-schema` Model Context Protocol (MCP) server to run as a Docker container within an MCP configuration file. It specifies the `docker` command and the arguments needed to execute the server image `mcp/openapi-schema`, ensuring it runs interactively (`-i`), removes the container on exit (`--rm`), and uses the specified image.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/openapi-schema.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "openapi-schema": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/openapi-schema"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Configuring TweetBinder MCP Server using Docker JSON
DESCRIPTION: This JSON configuration demonstrates how to set up the TweetBinder MCP server to run as a Docker container via an MCP client. It specifies the `docker` command, arguments like interactive mode, auto-removal, and setting the API token environment variable, and the required environment variable `TWEETBINDER_API_TOKEN`.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/tweetbinder.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "tweetbinder": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "TWEETBINDER_API_TOKEN",
        "mcp/tweetbinder"
      ],
      "env": {
        "TWEETBINDER_API_TOKEN": "your-bearer-token-here"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Context7 MCP Server with Docker - JSON
DESCRIPTION: This JSON configuration block shows how to define the Context7 MCP server within a system that supports the Model Context Protocol. It specifies using the `docker` command to run the `mcp/context7` image with interactive input and automatic removal after completion, providing a standard way to launch the server.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/context7.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "context7": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/context7"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Configuring LINE MCP Server with Docker
DESCRIPTION: This JSON snippet provides the configuration for running the LINE MCP server within a Docker container. It defines the Docker command and arguments, including specifying environment variables like DESTINATION_USER_ID and CHANNEL_ACCESS_TOKEN that need to be set for the server to function correctly.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/line.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "line": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "DESTINATION_USER_ID",
        "-e",
        "CHANNEL_ACCESS_TOKEN",
        "mcp/line"
      ],
      "env": {
        "DESTINATION_USER_ID": "FILL_HERE",
        "CHANNEL_ACCESS_TOKEN": "FILL_HERE"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configure Kubernetes MCP Server using Docker - JSON
DESCRIPTION: This JSON snippet defines the configuration for an MCP server named 'kubernetes'. It specifies that the server should be run using the 'docker' command with arguments that launch the 'mcp/kubernetes' container in interactive mode, automatically removing it upon exit. This setup allows the MCP server to interact with Kubernetes resources via a Docker container.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/kubernetes.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "kubernetes": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/kubernetes"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Configuring Gyazo MCP Server with Docker using JSON
DESCRIPTION: This JSON snippet provides the configuration required for an MCP client to interact with the Gyazo MCP server by running it as a Docker container. It specifies the Docker command and arguments, including setting the `GYAZO_ACCESS_TOKEN` environment variable needed for authentication with the Gyazo API. This setup ensures the server runs ephemerally (`--rm`) and interactively (`-i`). Requires Docker and the `mcp/gyazo` image.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/gyazo.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "gyazo": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "GYAZO_ACCESS_TOKEN",
        "mcp/gyazo"
      ],
      "env": {
        "GYAZO_ACCESS_TOKEN": "your-access-token-here"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Grafana MCP Server using Docker (JSON)
DESCRIPTION: This JSON object defines the configuration for running the Grafana Model Context Protocol (MCP) server within a Docker container. It specifies the Docker command, arguments, and required environment variables for the server to connect to a Grafana instance.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/grafana.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "grafana": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "GRAFANA_URL",
        "-e",
        "GRAFANA_API_KEY",
        "mcp/grafana",
        "--transport=stdio"
      ],
      "env": {
        "GRAFANA_URL": "http://localhost:3000",
        "GRAFANA_API_KEY": "<your service account token>"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Filesystem MCP Server with Docker JSON
DESCRIPTION: This JSON configuration block defines how to run the `filesystem` MCP server using Docker within an environment that supports MCP server configuration. It specifies the `docker` command and its arguments, including the `mcp/filesystem` image name. The `{{filesystem.paths|into}}` placeholder is used by the MCP environment to inject the list of allowed directory paths into the Docker container's command.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/filesystem.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "filesystem": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/filesystem",
        "{{filesystem.paths|into}}"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Setting JFS Policy using OpenAPI Client (Go)
DESCRIPTION: Demonstrates how to set a JFS policy using the generated OpenAPI Go client. It initializes a Policy object, configures the API client, calls the SetJfsPolicy endpoint, and checks for potential errors during the API interaction. The policy to be set is passed as a parameter.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/docs/SecretsApi.md#_snippet_6

LANGUAGE: go
CODE:
```
package main

import (
    "context"
    "fmt"
    "os"
    openapiclient "./openapi"
)

func main() {
    policy := *openapiclient.NewPolicy("Name_example") // Policy | the policy to be set

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)
    resp, r, err := apiClient.SecretsApi.SetJfsPolicy(context.Background()).Policy(policy).Execute()
    if err != nil {
        fmt.Fprintf(os.Stderr, "Error when calling `SecretsApi.SetJfsPolicy`": %v\n", err)
        fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
    }
}
```

----------------------------------------

TITLE: Listing Policies with SecretsApi Go
DESCRIPTION: Demonstrates how to list all policies using the generated Go OpenAPI client. It shows initializing the client, executing the list request, and handling the response or error. Requires the OpenAPI client library and a configured API endpoint. Returns a list of Policy objects.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/docs/SecretsApi.md#_snippet_4

LANGUAGE: go
CODE:
```
package main

import (
    "context"
    "fmt"
    "os"
    openapiclient "./openapi"
)

func main() {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)
    resp, r, err := apiClient.SecretsApi.ListJfsPolicies(context.Background()).Execute()
    if err != nil {
        fmt.Fprintf(os.Stderr, "Error when calling `SecretsApi.ListJfsPolicies``: %v\n", err)
        fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
    }
    // response from `ListJfsPolicies`: []Policy
    fmt.Fprintf(os.Stdout, "Response from `SecretsApi.ListJfsPolicies`: %v\n", resp)
}
```

----------------------------------------

TITLE: Configuring GitLab MCP Server for Docker Execution - JSON
DESCRIPTION: This JSON snippet provides the configuration required to run the GitLab MCP Server using Docker. It defines the Docker command, arguments, and environment variables (GITLAB_API_URL, GITLAB_PERSONAL_ACCESS_TOKEN) needed to connect to the GitLab API. Users must replace `<YOUR_TOKEN>` with their actual GitLab Personal Access Token.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/gitlab.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "gitlab": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "GITLAB_API_URL",
        "-e",
        "GITLAB_PERSONAL_ACCESS_TOKEN",
        "mcp/gitlab"
      ],
      "env": {
        "GITLAB_API_URL": "https://gitlab.com/api/v4",
        "GITLAB_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
      }
    }
  }
}
```

----------------------------------------

TITLE: Running ImageMagick Commands via Container
DESCRIPTION: Specifies an AI tool configuration to execute arbitrary ImageMagick commands within a `vonwig/imagemagick` container. The actual command arguments are expected to be passed via the `raw` parameter, which is then templated directly into the container's command.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/examples/ffmpeg.md#_snippet_1

LANGUAGE: Shell
CODE:
```
"{{raw|safe}}"
```

----------------------------------------

TITLE: Configuring DevHub CMS MCP Server Docker Run JSON
DESCRIPTION: This JSON configuration block specifies how to run the `mcp/devhub-cms` Docker image as an MCP server using the `docker run` command. It defines the command, arguments (including environment variables), and environment variables (`DEVHUB_BASE_URL`, `DEVHUB_API_KEY`, `DEVHUB_API_SECRET`) required for the server to connect to the DevHub API.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/devhub-cms.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "devhub-cms": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "DEVHUB_BASE_URL",
        "-e",
        "DEVHUB_API_KEY",
        "-e",
        "DEVHUB_API_SECRET",
        "mcp/devhub-cms"
      ],
      "env": {
        "DEVHUB_BASE_URL": "https://yourbrand.cloudfrontend.net",
        "DEVHUB_API_KEY": "YOUR_KEY_HERE",
        "DEVHUB_API_SECRET": "YOUR_SECRET_HERE"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configure Firecrawl MCP Server with Docker - JSON
DESCRIPTION: This JSON configuration block sets up the Firecrawl MCP Server to run within a Docker container for use with an MCP client. It specifies the `docker run` command, arguments to pass environment variables from the host into the container, and explicitly sets default values for various environment variables required by the server, such as the API URL, retry settings, credit thresholds, and the API key. Users must replace the placeholder API key with their actual Firecrawl API key for the server to function.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/firecrawl.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "firecrawl": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "FIRECRAWL_API_URL",
        "-e",
        "FIRECRAWL_RETRY_MAX_ATTEMPTS",
        "-e",
        "FIRECRAWL_RETRY_INITIAL_DELAY",
        "-e",
        "FIRECRAWL_RETRY_MAX_DELAY",
        "-e",
        "FIRECRAWL_RETRY_BACKOFF_FACTOR",
        "-e",
        "FIRECRAWL_CREDIT_WARNING_THRESHOLD",
        "-e",
        "FIRECRAWL_CREDIT_CRITICAL_THRESHOLD",
        "-e",
        "FIRECRAWL_API_KEY",
        "mcp/firecrawl"
      ],
      "env": {
        "FIRECRAWL_API_URL": "https://api.firecrawl.dev/v1",
        "FIRECRAWL_RETRY_MAX_ATTEMPTS": "5",
        "FIRECRAWL_RETRY_INITIAL_DELAY": "2000",
        "FIRECRAWL_RETRY_MAX_DELAY": "30000",
        "FIRECRAWL_RETRY_BACKOFF_FACTOR": "3",
        "FIRECRAWL_CREDIT_WARNING_THRESHOLD": "2000",
        "FIRECRAWL_CREDIT_CRITICAL_THRESHOLD": "500",
        "FIRECRAWL_API_KEY": "YOUR-API-KEY"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Audiense Insights MCP Server Docker Run - JSON
DESCRIPTION: This JSON configuration snippet defines the necessary settings to run the Audiense Insights MCP server as a Docker container. It specifies the Docker command, arguments for interactive and auto-removal modes, environment variables required for authentication (Audiense API credentials and potentially a Twitter token), and the Docker image name. This configuration is typically used within an environment that integrates with MCP servers.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/audiense-insights.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "audiense-insights": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "AUDIENSE_CLIENT_ID",
        "-e",
        "AUDIENSE_CLIENT_SECRET",
        "-e",
        "TWITTER_BEARER_TOKEN",
        "mcp/audiense-insights"
      ],
      "env": {
        "AUDIENSE_CLIENT_ID": "your_client_id_here",
        "AUDIENSE_CLIENT_SECRET": "your_client_secret_here",
        "TWITTER_BEARER_TOKEN": "your_token_here"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring HTTP Proxy in Go - Go
DESCRIPTION: Demonstrates how to set the `HTTP_PROXY` environment variable programmatically in Go using `os.Setenv`. This is used to configure the API client to use a proxy for network requests. Requires the `os` package.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/README.md#_snippet_2

LANGUAGE: Go
CODE:
```
os.Setenv("HTTP_PROXY", "http://proxy_name:proxy_port")
```

----------------------------------------

TITLE: Configuring CircleCI MCP Server with Docker JSON
DESCRIPTION: This JSON snippet provides the configuration structure for running the CircleCI MCP server as a Docker container. It specifies the command, arguments, and environment variables (`CIRCLECI_BASE_URL`, `CIRCLECI_TOKEN`) required to launch the server and authenticate with CircleCI.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/circleci.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "circleci": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "CIRCLECI_BASE_URL",
        "-e",
        "CIRCLECI_TOKEN",
        "mcp/circleci"
      ],
      "env": {
        "CIRCLECI_BASE_URL": "https://circleci.com",
        "CIRCLECI_TOKEN": "your-circleci-token"
      }
    }
  }
}
```

----------------------------------------

TITLE: Running Docker Container for AI Tools (sh)
DESCRIPTION: This command runs a container from the `vonwig/tools-vector-store:local` Docker image. It runs the container interactively (`-it`), automatically removes the container upon exit (`--rm`), and sets the `OPENAI_API_KEY` environment variable by reading the content of the `~/.openai-api-key` file. The string "hola" is passed as an argument to the container's entrypoint or command.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/tools_vector_store/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker run -it --rm -e "OPENAI_API_KEY=$(cat ~/.openai-api-key)" vonwig/tools-vector-store:local "hola"
```

----------------------------------------

TITLE: Configuring Docker Run for Triplewhale MCP Server - JSON
DESCRIPTION: This JSON snippet provides a configuration object for running the mcp/triplewhale Docker image. It specifies the command (docker), arguments (run, -i, --rm, -e, TRIPLEWHALE_API_KEY, mcp/triplewhale), and environment variables (TRIPLEWHALE_API_KEY), demonstrating how to launch the server with the necessary API key passed as an environment variable.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/triplewhale.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "triplewhale": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "TRIPLEWHALE_API_KEY",
        "mcp/triplewhale"
      ],
      "env": {
        "TRIPLEWHALE_API_KEY": "your-triplewhale-api-key-here"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Iaptic MCP Server with Docker in JSON
DESCRIPTION: This JSON object defines the configuration for the 'iaptic' MCP server. It specifies the 'docker' command and arguments required to run the 'mcp/iaptic' image, passing necessary environment variables for authentication. The 'env' block provides default placeholder values for 'IAPTIC_APP_NAME' and 'IAPTIC_API_KEY'.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/iaptic.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "iaptic": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "IAPTIC_APP_NAME",
        "-e",
        "IAPTIC_API_KEY",
        "mcp/iaptic"
      ],
      "env": {
        "IAPTIC_APP_NAME": "your-app-name-here",
        "IAPTIC_API_KEY": "your-api-key-here"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Resend MCP Server with Docker (JSON)
DESCRIPTION: This JSON configuration defines how to integrate the Resend MCP server into a system (like Cursor). It specifies the 'docker' command and arguments needed to run the 'mcp/resend' Docker image. It also lists essential environment variables (like RESEND_API_KEY) that must be provided for the server to function correctly.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/resend.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "resend": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "REPLY_TO_EMAIL_ADDRESSES",
        "-e",
        "SENDER_EMAIL_ADDRESS",
        "-e",
        "RESEND_API_KEY",
        "mcp/resend"
      ],
      "env": {
        "REPLY_TO_EMAIL_ADDRESSES": "YOUR_REPLY_TO_EMAIL_ADDRESSES",
        "SENDER_EMAIL_ADDRESS": "YOUR_SENDER_EMAIL_ADDRESS",
        "RESEND_API_KEY": "YOUR_RESEND_API_KEY"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring OSP Marketing Tools MCP Server with Docker JSON
DESCRIPTION: This JSON snippet provides a configuration entry for the `osp_marketing_tools` MCP server. It specifies `docker` as the command to execute and provides the necessary arguments (`run`, `-i`, `--rm`, `mcp/osp_marketing_tools`) to run the server interactively using its Docker image and automatically remove the container upon completion.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/osp_marketing_tools.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "osp_marketing_tools": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/osp_marketing_tools"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Configuring ElevenLabs MCP Server using Docker JSON
DESCRIPTION: This snippet provides the JSON configuration required to set up an ElevenLabs MCP server. It specifies the `docker` command to execute, the arguments needed to run the container (including setting the `ELEVENLABS_API_KEY` environment variable), and the environment variable object itself where the API key placeholder is provided. This configuration is used within the Model Context Protocol to integrate ElevenLabs services.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/elevenlabs.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "elevenlabs": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "ELEVENLABS_API_KEY",
        "mcp/elevenlabs"
      ],
      "env": {
        "ELEVENLABS_API_KEY": "<insert-your-api-key-here>"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Templated Server URL Variables - Go
DESCRIPTION: Illustrates setting variables for templated server URLs using the `context` package and `ContextServerVariables` key. A map is used to provide values for variables like `basePath` defined in the OpenAPI server URL template. Requires the `context` and `oauthapi` packages.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/README.md#_snippet_4

LANGUAGE: Go
CODE:
```
ctx := context.WithValue(context.Background(), oauthapi.ContextServerVariables, map[string]string{
	"basePath": "v2"
})
```

----------------------------------------

TITLE: Configuring EverArt MCP Server with Docker (JSON)
DESCRIPTION: This JSON snippet provides the configuration required to launch the EverArt Model Context Protocol (MCP) server as a Docker container. It defines the Docker command and arguments needed to run the container interactively, remove it after exit, and pass the EVERART_API_KEY environment variable. It also specifies the environment variable itself, prompting the user to replace "your_key_here" with their actual API key. This configuration is typically used within a larger MCP application or setup to define how the server should be executed.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/everart.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "everart": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "EVERART_API_KEY",
        "mcp/everart"
      ],
      "env": {
        "EVERART_API_KEY": "your_key_here"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Heroku MCP Server with Docker - JSON
DESCRIPTION: This JSON object defines the configuration for a Heroku Model Context Protocol (MCP) server intended to interact with Heroku tools. It specifies the command to execute as 'docker' with arguments to run the 'mcp/heroku' Docker image in interactive, auto-removing mode, exposing the 'HEROKU_API_KEY' environment variable.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/heroku.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "heroku": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "HEROKU_API_KEY",
        "mcp/heroku"
      ],
      "env": {
        "HEROKU_API_KEY": "<YOUR_HEROKU_AUTH_TOKEN>"
      }
    }
  }
}
```

----------------------------------------

TITLE: Setting Templated Server Variables in Go
DESCRIPTION: This Go snippet illustrates how to provide values for templated server URLs defined in the OpenAPI specification. It uses `context.WithValue` to pass a map of variable names and their desired string values (e.g., `"basePath": "v2"`).
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/README.md#_snippet_4

LANGUAGE: golang
CODE:
```
ctx := context.WithValue(context.Background(), secretsapi.ContextServerVariables, map[string]string{
	"basePath": "v2",
})
```

----------------------------------------

TITLE: Configuring Basic Memory MCP Server Run - JSON
DESCRIPTION: This JSON snippet defines a configuration entry for running the Basic Memory MCP Server using a Docker container. It specifies the 'docker' command and arguments ('run', '-i', '--rm', 'mcp/basic-memory') required to launch the server instance, typically used in an MCP client configuration.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/basic-memory.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "basic-memory": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/basic-memory"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Configuring GitHub Chat MCP Server with Docker (JSON)
DESCRIPTION: This JSON snippet provides a configuration example for integrating the GitHub Chat MCP Server. It defines how to run the server as a Docker container, including passing environment variables like the GITHUB_API_KEY. This configuration is typically used within an MCP client or orchestrator.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/github-chat.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "github-chat": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "GITHUB_API_KEY",
        "mcp/github-chat"
      ],
      "env": {
        "GITHUB_API_KEY": "YOUR_GITHUB_API_KEY"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Memory MCP Server via Docker (JSON)
DESCRIPTION: This JSON snippet provides a configuration object for the 'memory' MCP server, specifying how to execute it using Docker. It defines the command ('docker') and arguments ('run', '-i', '--rm', 'mcp/memory') required to run the 'mcp/memory' Docker image. This configuration is typically used by a larger system that orchestrates MCP servers.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/memory.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "memory": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/memory"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Removing Docker Extension (Shell)
DESCRIPTION: This command completely removes the specified Docker extension from the local Docker Desktop instance, including any associated containers. Required: Docker Desktop.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/README.md#_snippet_7

LANGUAGE: shell
CODE:
```
docker extension rm docker/labs-ai-tools-for-devs:local
```

----------------------------------------

TITLE: Updating Docker Extension (Shell)
DESCRIPTION: Provides the command to update a specific Docker extension to a particular version. It targets the `docker/labs-ai-tools-for-devs` extension and updates it to version `0.2.25`.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/runbook.md#_snippet_5

LANGUAGE: sh
CODE:
```
docker extension update docker/labs-ai-tools-for-devs:0.2.25
```

----------------------------------------

TITLE: Configuring Handwriting OCR MCP Server Docker Run
DESCRIPTION: This JSON configuration defines how to run the `handwriting-ocr` MCP server using Docker. It specifies the `docker run` command with arguments to run interactively, remove the container after exit, expose the `API_TOKEN` environment variable (which needs to be set), and use the `mcp/handwriting-ocr` image. The `env` block shows how the `API_TOKEN` can be passed during runtime.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/handwriting-ocr.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "handwriting-ocr": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "API_TOKEN",
        "mcp/handwriting-ocr"
      ],
      "env": {
        "API_TOKEN": "your-api-token"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Docker Execution for Shodan MCP Server
DESCRIPTION: This JSON object defines the configuration for launching the Shodan MCP server using a Docker container. It specifies the Docker command and arguments, including mounting standard input (-i), automatically removing the container on exit (--rm), passing the SHODAN_API_KEY environment variable, and specifying the Docker image mcp/cyreslab-ai-shodan. It also shows where to define the SHODAN_API_KEY within the configuration itself.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/cyreslab-ai-shodan.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "cyreslab-ai-shodan": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "SHODAN_API_KEY",
        "mcp/cyreslab-ai-shodan"
      ],
      "env": {
        "SHODAN_API_KEY": "YOUR_SHODAN_API_KEY"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Smithery CLI MCP Server with Docker (JSON)
DESCRIPTION: This JSON snippet shows a configuration example for integrating the `smithery-cli` MCP server into an MCP client by defining its execution command, arguments, and necessary environment variables when run via Docker.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/smithery-cli.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "smithery-cli": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "SMITHERY_API_KEY",
        "mcp/smithery-cli"
      ],
      "env": {
        "SMITHERY_API_KEY": "your_api_key_here"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configure Obsidian MCP Server with Docker
DESCRIPTION: This JSON snippet provides the configuration structure for integrating the Obsidian MCP server into a system that utilizes the Model Context Protocol. It specifies how to launch the server using a Docker container, including the required command, arguments, and environment variables like the Obsidian API key.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/obsidian.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "obsidian": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "OBSIDIAN_API_KEY",
        "mcp/obsidian"
      ],
      "env": {
        "OBSIDIAN_API_KEY": "YOUR_OBSIDIAN_API_KEY"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring MCP Server with Docker (JSON)
DESCRIPTION: This JSON snippet provides the configuration for setting up an MCP server named "armor-crypto" using a Docker container. It specifies the `docker run` command, arguments including standard input (`-i`) and automatic removal (`--rm`), and maps essential environment variables like `ARMOR_API_URL` and `ARMOR_API_KEY`, which must be replaced with the actual key.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/armor-crypto.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "armor-crypto": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "ARMOR_API_URL",
        "-e",
        "ARMOR_API_KEY",
        "mcp/armor-crypto"
      ],
      "env": {
        "ARMOR_API_URL": "https://app.armorwallet.ai/api/v1",
        "ARMOR_API_KEY": "<PUT-YOUR-KEY-HERE>"
      }
    }
  }
}
```

----------------------------------------

TITLE: Writing File Content with Echo (Shell)
DESCRIPTION: This shell command snippet, defined within the `write_file` tool, utilizes `echo` to print the provided content (`{{content|safe}}`) and redirects the output using `>` to the specified file path (`{{path|safe}}`). This command is executed via `bash -c` within a `bash_alpine` container, overwriting the target file if it exists.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/examples/mcp-filesystem.md#_snippet_1

LANGUAGE: Shell
CODE:
```
echo {{content|safe}} > {{path|safe}}
```

----------------------------------------

TITLE: Configuring Bitrefill MCP Server Docker (JSON)
DESCRIPTION: This JSON configuration shows how to set up the Bitrefill Model Context Protocol server by running the `mcp/bitrefill` Docker image. It passes required API credentials (`BITREFILL_API_ID`, `BITREFILL_API_SECRET`) as environment variables to the container, enabling interaction with the Bitrefill API for AI agents.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/bitrefill.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "bitrefill": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "BITREFILL_API_ID",
        "-e",
        "BITREFILL_API_SECRET",
        "mcp/bitrefill"
      ],
      "env": {
        "BITREFILL_API_ID": "your_api_id_here",
        "BITREFILL_API_SECRET": "your_api_key_here"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring glif.app MCP Server with Docker JSON
DESCRIPTION: This JSON snippet provides a configuration example for integrating the glif.app MCP server as an MCP server. It defines the Docker command to run the server, including arguments for interactive mode (`-i`), automatic container removal (`--rm`), and setting environment variables like `GLIF_IDS`, `IGNORE_SAVED_GLIFS`, and `GLIF_API_TOKEN`.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/glif.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "glif": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "GLIF_IDS",
        "-e",
        "IGNORE_SAVED_GLIFS",
        "-e",
        "GLIF_API_TOKEN",
        "mcp/glif"
      ],
      "env": {
        "GLIF_IDS": "",
        "IGNORE_SAVED_GLIFS": "false",
        "GLIF_API_TOKEN": "your-token-here"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Slack MCP Server using Docker - JSON
DESCRIPTION: This JSON snippet provides a configuration example for running the mcp/slack server using Docker within an MCP framework. It defines the 'slack' server using the 'docker' command, passing arguments for running the container interactively, removing it on exit, and injecting required Slack environment variables like SLACK_TEAM_ID, SLACK_CHANNEL_IDS, and SLACK_BOT_TOKEN for authentication and targeting.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/slack.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "slack": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "SLACK_TEAM_ID",
        "-e",
        "SLACK_CHANNEL_IDS",
        "-e",
        "SLACK_BOT_TOKEN",
        "mcp/slack"
      ],
      "env": {
        "SLACK_TEAM_ID": "T01234567",
        "SLACK_CHANNEL_IDS": "C01234567, C76543210",
        "SLACK_BOT_TOKEN": "xoxb-your-bot-token"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring JetBrains MCP Server with Docker JSON
DESCRIPTION: This JSON snippet provides the configuration for running the JetBrains MCP server using a Docker container. It specifies the Docker command and arguments required to execute the mcp/jetbrains image, including setting the IDE_PORT environment variable.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/jetbrains.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "jetbrains": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "IDE_PORT",
        "mcp/jetbrains"
      ],
      "env": {
        "IDE_PORT": "8090"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configure Google Maps MCP Server (JSON)
DESCRIPTION: This JSON snippet defines the configuration for integrating the Google Maps MCP server using Docker. It specifies the `docker run` command, including necessary arguments and the environment variable for the Google Maps API key, enabling the MCP client to launch and communicate with the server.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/google-maps.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "google-maps": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "GOOGLE_MAPS_API_KEY",
        "mcp/google-maps"
      ],
      "env": {
        "GOOGLE_MAPS_API_KEY": "<YOUR_API_KEY>"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring DOiT MCP Server with Docker
DESCRIPTION: This JSON snippet provides a configuration example for setting up the DOiT MCP server using Docker. It specifies the Docker command and arguments required to run the `mcp/doit` image, including passing the necessary `DOIT_API_KEY` as an environment variable for authentication.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/doit.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "doit": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "DOIT_API_KEY",
        "mcp/doit"
      ],
      "env": {
        "DOIT_API_KEY": "your_doit_api_key"
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Code Correction JSON Format
DESCRIPTION: This JSON structure defines a specific code edit to be applied to a file. It requires the starting and ending line/column coordinates of the text to be replaced, and the new text to insert. The coordinates are 1-based arrays where the first element is the line number and the second is the column number.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/eslint_fix/fixing.md#_snippet_0

LANGUAGE: json
CODE:
```
{
    "start": [1, 4], // row,col for start character
    "end": [2, 4], // row,col for end character
    "edit": "Lorem ipsum" // The edit to make
}
```

----------------------------------------

TITLE: Defining Prompt-Engine Tools Configuration in YAML
DESCRIPTION: This YAML configuration block defines two tools, 'ls' and 'echo', for integration into a prompt-engine system. Each tool specifies a Docker container image ('alpine:latest', 'vonwig/bash_alpine') and the command to execute within that container. The 'echo' tool demonstrates accessing the host directory path via the '{{hostDir}}' variable. Dependencies are the specified Docker images and a prompt-engine system capable of processing this YAML format and mounting the host directory.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/examples/using-host-dir.md#_snippet_0

LANGUAGE: yaml
CODE:
```
---
tools:
  - name: ls
    description: list files in a directory
    container:
      image: alpine:latest
      command:
        - ls
        - /project
  - name: echo
    description: echo the current host dir
    container:
      image: vonwig/bash_alpine
      command:
        - -c
        - "echo {{hostDir}}"
---
```

----------------------------------------

TITLE: Building Docker Extension Image (Shell)
DESCRIPTION: This command builds the Docker extension image using Docker Buildx. It tags the image as docker/labs-ai-tools-for-devs:local and loads it into the local Docker daemon, making it ready for installation. Required: Docker and Buildx.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
docker buildx build -t docker/labs-ai-tools-for-devs:local . --load
```

----------------------------------------

TITLE: Configuring Hackle MCP Server Docker Launch JSON
DESCRIPTION: This JSON snippet defines the configuration needed to launch the Hackle MCP server as a Docker container. It specifies the Docker command and arguments to run the 'mcp/hackle' image, including necessary flags like '-i', '--rm', and '-e' to pass environment variables. The 'env' block shows how to provide the required API key.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/hackle.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "hackle": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "API_KEY",
        "mcp/hackle"
      ],
      "env": {
        "API_KEY": "YOUR_API_KEY"
      }
    }
  }
}
```

----------------------------------------

TITLE: Running 302 Sandbox MCP Server with Docker (JSON Config)
DESCRIPTION: This JSON configuration block shows how to define the 302 Sandbox MCP Server for use with the Model Context Protocol (MCP). It specifies the Docker command and arguments required to run the server, including setting the necessary API key environment variable. This configuration is used by an MCP client to launch the server.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/302_sandbox.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "302_sandbox": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "302AI_API_KEY",
        "mcp/302_sandbox"
      ],
      "env": {
        "302AI_API_KEY": "YOUR_API_KEY_HERE"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Docker Run for Hyperspell MCP Server (JSON)
DESCRIPTION: This JSON snippet provides the configuration required to run the Hyperspell MCP server as a Docker container. It specifies the 'docker' command, necessary arguments like '-i', '--rm', and environment variable flags ('-e'), and defines the environment variables ('USE_RESOURCES', 'HYPERSPELL_COLLECTION', 'HYPERSPELL_TOKEN') within the 'env' block. This configuration is typically used within a larger system that manages MCP server processes.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/hyperspell.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "hyperspell": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "USE_RESOURCES",
        "-e",
        "HYPERSPELL_COLLECTION",
        "-e",
        "HYPERSPELL_TOKEN",
        "mcp/hyperspell"
      ],
      "env": {
        "USE_RESOURCES": "false",
        "HYPERSPELL_COLLECTION": "",
        "HYPERSPELL_TOKEN": "<app or user token>"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Desktop Commander MCP Server with Docker JSON
DESCRIPTION: This JSON snippet illustrates the configuration structure required to define the Desktop Commander as an MCP server. It specifies using the 'docker' command with arguments to run the 'mcp/desktop-commander' image, enabling interactive mode (-i) and automatic removal (--rm) after the container exits.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/desktop-commander.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "desktop-commander": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/desktop-commander"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Configure Opik MCP Server with Docker
DESCRIPTION: This JSON snippet provides a configuration for running the Opik MCP server using Docker. It specifies the Docker command, arguments for passing environment variables like API base URL, workspace name, and API key, and sets default values for these variables.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/opik.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "opik": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "OPIK_API_BASE_URL",
        "-e",
        "OPIK_WORKSPACE_NAME",
        "-e",
        "OPIK_API_KEY",
        "mcp/opik"
      ],
      "env": {
        "OPIK_API_BASE_URL": "https://www.comet.com/opik/api",
        "OPIK_WORKSPACE_NAME": "default",
        "OPIK_API_KEY": "your_api_key"
      }
    }
  }
}
```

----------------------------------------

TITLE: Running Docker Image for Python Parsing with Input (Shell)
DESCRIPTION: This command runs the 'vonwig/tree-sitter' Docker image targeting Python parsing. It uses the '-i' and '--rm' flags and pipes a simple Python print statement as standard input for parsing.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/tree-sitter-clj/runbook.md#_snippet_11

LANGUAGE: sh
CODE:
```
docker run -i --rm vonwig/tree-sitter python < <(echo "print(\"hello\")")
```

----------------------------------------

TITLE: Configuring YouTube Transcript MCP Server with Docker (JSON)
DESCRIPTION: This JSON snippet defines the configuration for the `youtube_transcript` MCP Server. It specifies that the server should be launched using the `docker` command with specific arguments (`run -i --rm mcp/youtube-transcript`) to execute the server process within a Docker container. The configuration ensures the container runs interactively (`-i`) and is automatically removed (`--rm`) upon exit.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/youtube_transcript.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "youtube_transcript": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/youtube-transcript"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Configuring DuckDuckGo MCP Server with Docker - JSON
DESCRIPTION: This JSON snippet provides a configuration structure for defining the DuckDuckGo MCP server within a system that utilizes the Model Context Protocol. It specifies the `docker` command and arguments required to run the server container, enabling integration with MCP-compatible clients or runtimes. This configuration assumes Docker is installed and the `mcp/duckduckgo` image is available.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/duckduckgo.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "duckduckgo": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/duckduckgo"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Configuring Databutton MCP Server using Docker (JSON)
DESCRIPTION: This JSON snippet provides a configuration entry for integrating the Databutton MCP Server by running its Docker image. It defines an MCP server named 'databutton' that executes the 'docker run' command with specific arguments ('-i', '--rm', 'mcp/databutton') to start the container. This configuration requires Docker to be installed and available.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/databutton.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "databutton": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/databutton"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Configuring Fetch MCP Server Docker Command JSON
DESCRIPTION: This JSON configuration specifies how to execute the 'fetch' MCP server using Docker. It defines the 'command' as 'docker' and provides the necessary 'args' to run the server in interactive, ephemeral mode using the 'mcp/fetch' Docker image. This setup requires Docker to be installed and the 'mcp/fetch' image available.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/fetch.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "fetch": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/fetch"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Running Docker Container (Shell)
DESCRIPTION: Runs the built `vonwig/node_intersector` Docker image. It mounts the current working directory (`$PWD`) to `/project` inside the container and sets the working directory to `/project`. A JSON string argument specifies the file path and line number for the tool to process.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/node_intersector/readme.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker run --mount type=bind,source=$PWD,target=/project --workdir /project vonwig/node_intersector '{"path": "test_file.py", "line": 32}'
```

----------------------------------------

TITLE: Defining Stable Diffusion Tool Configuration - YAML
DESCRIPTION: This YAML snippet configures a tool named `stable-diffusion` for image generation within a Docker AI Tools environment. It specifies that the tool accepts a `prompt` parameter (a string describing the desired image) and links to the external implementation source on GitHub.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/stable-diffusion/prompt.md#_snippet_0

LANGUAGE: yaml
CODE:
```
---
tools:
  - name: stable-diffusion
    description: generate an image using stable diffusion
    parameters:
      type: object
      properties:
        prompt:
          type: string
          description: a description of the image that should be generated
    type: prompt
    ref: "github:docker/labs-ai-tools-for-devs?path=prompts/stable-diffusion/image-generation-service.md&ref=slim/stable-diffusion"
---
```

----------------------------------------

TITLE: Configuring GitHub MCP Server with Docker (JSON)
DESCRIPTION: This JSON snippet provides the configuration for running the `mcp/github-mcp-server` using Docker as a Model Context Protocol server. It defines the `command`, `args` for running the Docker container, and sets the `GITHUB_PERSONAL_ACCESS_TOKEN` environment variable required for authentication within the container. Users need to replace `<YOUR_TOKEN>` with their actual GitHub personal access token.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/github-official.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "github-official": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "GITHUB_PERSONAL_ACCESS_TOKEN",
        "mcp/github-mcp-server"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
      }
    }
  }
}
```

----------------------------------------

TITLE: Running Docker Tool in MCP Serve Mode (Shell)
DESCRIPTION: This command demonstrates how to run the AI tool Docker container in Model Context Protocol (MCP) serve mode. It registers prompts from both a remote GitHub repository (specified by path and ref) and a local file path, making them available via the MCP server. Requires the Docker container built or pulled and access to the specified prompt files.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
# ...
serve
--mcp
--register github:docker/labs-ai-tools-for-devs?path=prompts/examples/generate_dockerfile.md
--register /Users/ai-overlordz/some/local/prompt.md
# ...
```

----------------------------------------

TITLE: Configuring Docker AI Service with Gordon (YAML)
DESCRIPTION: This YAML configuration defines a service named `mcp_docker` for use with the `docker ai` command. It specifies the `alpine:socat:latest` image and a command to establish a TCP connection to `host.docker.internal:8811`, enabling 'Gordon' to load tools from this service. The `x-mcp-autoremove` flag ensures the container is removed after use.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/content/tools/quickstart_gordon.md#_snippet_0

LANGUAGE: yaml
CODE:
```
services:
  mcp_docker:
    image: alpine:socat:latest
    command: 
      - STDIO
      - TCP:host.docker.internal:8811
    x-mcp-autoremove: true
```

----------------------------------------

TITLE: Listing Secrets with SecretsApi Go
DESCRIPTION: Demonstrates how to list all secrets using the generated Go OpenAPI client. It shows initializing the client, executing the list request, and handling the response or error. Requires the OpenAPI client library and a configured API endpoint. Returns a list of StoredSecret objects.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/docs/SecretsApi.md#_snippet_5

LANGUAGE: go
CODE:
```
package main

import (
    "context"
    "fmt"
    "os"
    openapiclient "./openapi"
)

func main() {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)
    resp, r, err := apiClient.SecretsApi.ListJfsSecrets(context.Background()).Execute()
    if err != nil {
        fmt.Fprintf(os.Stderr, "Error when calling `SecretsApi.ListJfsSecrets``: %v\n", err)
        fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
    }
    // response from `ListJfsSecrets`: []StoredSecret
    fmt.Fprintf(os.Stdout, "Response from `SecretsApi.ListJfsSecrets`: %v\n", resp)
}
```

----------------------------------------

TITLE: Configuring Webflow MCP Server with Docker (JSON)
DESCRIPTION: This JSON configuration block defines how to run the Webflow MCP server as a Docker container for use with an MCP client. It specifies the Docker command, arguments (interactive mode, auto-removal, environment variable passing), and explicitly provides a placeholder for the required Webflow API token within the 'env' field. This setup ensures the server is launched correctly with necessary authentication details.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/webflow.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "webflow": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "WEBFLOW_TOKEN",
        "mcp/webflow"
      ],
      "env": {
        "WEBFLOW_TOKEN": "your_api_token"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Discord MCP Server Docker Run - JSON
DESCRIPTION: This JSON snippet provides the configuration structure for running the Discord MCP Server as a Docker container using the Model Context Protocol (MCP). It specifies the 'docker run' command, arguments for interactive mode, automatic removal on exit, and passing the required 'DISCORD_TOKEN' environment variable to the container. The user needs to replace 'YOUR_DISCORD_TOKEN' with their actual Discord bot token.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/mcp-discord.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "mcp-discord": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "DISCORD_TOKEN",
        "mcp/mcp-discord"
      ],
      "env": {
        "DISCORD_TOKEN": "YOUR_DISCORD_TOKEN"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring MultiversX MCP Server using Docker JSON
DESCRIPTION: This JSON snippet defines the configuration for running the 'multiversx-mx' MCP server using Docker. It specifies the Docker command and arguments needed to launch the container, including running interactively (-i), removing the container after exit (--rm), and passing required environment variables for network and wallet configuration. It also provides default values for these environment variables.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/multiversx-mx.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "multiversx-mx": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "MVX_NETWORK",
        "-e",
        "MVX_WALLET",
        "mcp/multiversx-mx"
      ],
      "env": {
        "MVX_NETWORK": "devnet",
        "MVX_WALLET": "absolute/path/to/someWallet.pem"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring MCP Server for Neon with Docker (JSON)
DESCRIPTION: This JSON snippet configures the Model Context Protocol (MCP) server for interacting with Neon. It specifies running the server using Docker, including the command (`docker`), arguments (`run`, `-i`, `--rm`, `-e`, `NEON_API_KEY`), the Docker image (`mcp/neon`), and required environment variables like `NEON_API_KEY`.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/neon.md#_snippet_8

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "neon": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "NEON_API_KEY",
        "mcp/neon"
      ],
      "env": {
        "NEON_API_KEY": "YOUR_API_KEY_HERE"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring MCP Server for Atlassian with Docker JSON
DESCRIPTION: This JSON snippet defines the configuration for an MCP (Model Context Protocol) server named 'atlassian'. It specifies that the server should be run as a Docker container using the 'docker' command, passing arguments to run the 'mcp/atlassian' image. It configures environment variables needed for connecting to Jira and Confluence, expecting URLs and API tokens or personal tokens.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/atlassian.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "atlassian": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "CONFLUENCE_URL",
        "-e",
        "CONFLUENCE_USERNAME",
        "-e",
        "JIRA_URL",
        "-e",
        "JIRA_USERNAME",
        "-e",
        "CONFLUENCE_API_TOKEN",
        "-e",
        "CONFLUENCE_PERSONAL_TOKEN",
        "-e",
        "JIRA_API_TOKEN",
        "-e",
        "JIRA_PERSONAL_TOKEN",
        "mcp/atlassian"
      ],
      "env": {
        "CONFLUENCE_URL": "https://your-company.atlassian.net/wiki",
        "CONFLUENCE_USERNAME": "your.email@company.com",
        "JIRA_URL": "https://your-company.atlassian.net",
        "JIRA_USERNAME": "your.email@company.com",
        "CONFLUENCE_API_TOKEN": "your_api_token",
        "CONFLUENCE_PERSONAL_TOKEN": "your_api_token",
        "JIRA_API_TOKEN": "your_api_token",
        "JIRA_PERSONAL_TOKEN": "your_api_token"
      }
    }
  }
}
```

----------------------------------------

TITLE: Using the `vonwig/typos` Docker Image (Shell)
DESCRIPTION: Demonstrates how to run the `vonwig/typos` Docker image, mounting the current directory as `/project` and executing the entrypoint. It shows how to pass a JSON payload containing file path information, likely for processing by an internal tool or function like `write_file`. Requires Docker installed and the image `vonwig/typos:latest` to be available.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/hub/typo/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker run --rm \
       --mount type=bind,source=$PWD,target=/project \
       --entrypoint /app/result/bin/entrypoint \
       --workdir /project \
       vonwig/typos:latest '{"files":[{"path":"./runbook.md"}]}'
```

----------------------------------------

TITLE: Checking if Secret Policies is Set - Go
DESCRIPTION: Checks if the `Policies` field has been set on the `Secret` object. Returns a boolean indicating whether the field is present and non-nil.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/docs/Secret.md#_snippet_11

LANGUAGE: Go
CODE:
```
func (o *Secret) HasPolicies() bool
```

----------------------------------------

TITLE: Creating Custom User Profile Page (TSX)
DESCRIPTION: This Client Component (`"use client";`) demonstrates creating a custom profile page. It fetches the user using `useUser({ or: "redirect" })` (ensuring the user is logged in or redirected), uses `useStackApp()`, displays user details, includes a `<UserButton />` component, and provides a manual sign-out button using `user.signOut()`. Requires the `@stackframe/stack` dependency and the page to be rendered within the `StackProvider`.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/neondatabase-labs.md#_snippet_6

LANGUAGE: tsx
CODE:
```
'use client';
import { useUser, useStackApp, UserButton } from '@stackframe/stack';
export default function ProfilePage() {
  const user = useUser({ or: "redirect" });
  const app = useStackApp();
  return (
    <div>
      <UserButton />
      <h1>Welcome, {user.displayName || "User"}</h1>
      <p>Email: {user.primaryEmail}</p>
      <button onClick={() => user.signOut()}>Sign Out</button>
    </div>
  );
}
```

----------------------------------------

TITLE: Protecting Routes with Stack Auth Middleware (TSX)
DESCRIPTION: This Next.js middleware function checks if a user is authenticated using `stackServerApp.getUser()`. If no user is found, it redirects the request to the sign-in page (`/handler/sign-in`). The `config.matcher` defines which paths this middleware applies to. Requires `@stackframe/stack`, `NextRequest`, and `NextResponse`.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/neondatabase-labs.md#_snippet_5

LANGUAGE: tsx
CODE:
```
import { stackServerApp } from "@stackframe/stack";
import { NextRequest, NextResponse } from "next/server";
export async function middleware(request: NextRequest) {
  const user = await stackServerApp.getUser();
  if (!user) {
    return NextResponse.redirect(new URL('/handler/sign-in', request.url));
  }
  return NextResponse.next();
}
export const config = { matcher: '/protected/:path*' };
```

----------------------------------------

TITLE: Updating Docker Extension (Shell)
DESCRIPTION: This command updates the installed Docker extension, effectively removing the old version and installing the new one. It's particularly useful for redeploying the backend container after code changes. Optional: Use -f or --force to automate acceptance of warnings. Required: Docker Desktop.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/README.md#_snippet_6

LANGUAGE: shell
CODE:
```
docker extension update docker/labs-ai-tools-for-devs:local
```

----------------------------------------

TITLE: Accessing User in Server Component (TSX)
DESCRIPTION: This Next.js Server Component accesses the current user by awaiting `stackServerApp.getUser()`. This method is used in server-side contexts like Server Components or API routes to fetch user information securely. Requires the `@stackframe/stack` dependency and importing the `stackServerApp` instance typically defined in `stack.ts`.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/neondatabase-labs.md#_snippet_4

LANGUAGE: tsx
CODE:
```
import { stackServerApp } from "@/stack";
export default async function ServerComponent() {
  const user = await stackServerApp.getUser();
  return <div>{user ? `Hello, ${user.displayName}` : "Not logged in"}</div>;
}
```

----------------------------------------

TITLE: Configuring Git MCP Server with Docker JSON
DESCRIPTION: This JSON snippet illustrates how to configure the Git MCP server within an MCP client or system. It defines the server named "git", specifies "docker" as the command to execute, and provides the necessary arguments (`run`, `-i`, `--rm`, `mcp/git`) to run the server as a temporary, interactive Docker container. This setup allows the MCP client to interact with the Git tools exposed by the Dockerized server.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/git.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "git": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/git"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Configuring MCP SQLite Server Execution with Docker JSON
DESCRIPTION: This JSON configuration block specifies how to run the `mcp/sqlite` server using Docker. It defines the command (`docker`) and its arguments (`run`, `-i`, `--rm`, `mcp/sqlite`) to start the server interactively and remove the container after exit. This setup is typically used within an environment that integrates with MCP servers.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/sqlite.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "sqlite": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "mcp/sqlite"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Docker Configuration for 3D Printer MCP Server
DESCRIPTION: This JSON snippet provides a configuration structure for integrating the mcp/3d-printer Docker image as an MCP Server. It defines the command (`docker run`) and arguments needed to launch the container, including mapping environment variables required for printer connectivity and authentication.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/3d-printer.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "3d-printer": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "BAMBU_SERIAL",
        "-e",
        "PRINTER_HOST",
        "-e",
        "PRINTER_TYPE",
        "-e",
        "BAMBU_TOKEN",
        "mcp/3d-printer"
      ],
      "env": {
        "BAMBU_SERIAL": "YOUR_BAMBU_SERIAL",
        "PRINTER_HOST": "REAL",
        "PRINTER_TYPE": "bambu",
        "BAMBU_TOKEN": "YOUR_BAMBU_TOKEN"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Ollama Model and URL in Prompt (YAML)
DESCRIPTION: This YAML snippet illustrates how to configure a Docker AI prompt to use an Ollama model hosted at a specific URL. The 'model' key specifies the Ollama model name ('llama3.2'), and the 'url' key provides the endpoint for the Ollama service. This is useful for using local or custom Ollama installations.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/content/tools/quickstart_vscode.md#_snippet_2

LANGUAGE: yml
CODE:
```
---
model: llama3.2
url: https://docker.host.internal:11434/v1
---
```

----------------------------------------

TITLE: Configuring Anthropic Model in Prompt (YAML)
DESCRIPTION: This YAML snippet shows how to specify an Anthropic AI model within the front-matter of a Docker AI prompt file. Using the 'model' key allows overriding the default model setting for that particular prompt. This example sets the model to 'claude-3-5-sonnet-20240620'.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/content/tools/quickstart_vscode.md#_snippet_1

LANGUAGE: yml
CODE:
```
---
model: claude-3-5-sonnet-20240620
---
```

----------------------------------------

TITLE: Defining SQLite Database Schema (SQL)
DESCRIPTION: This SQL snippet defines two tables for an SQLite database: `VIOLATIONS` and `RANGES`. The `VIOLATIONS` table stores details about code violations, linked to location information in the `RANGES` table via a foreign key. The `RANGES` table stores the exact file path and line/column numbers for each violation.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/pylint/6-1-query.md#_snippet_0

LANGUAGE: sql
CODE:
```
CREATE TABLE VIOLATIONS (ID INTEGER PRIMARY KEY AUTOINCREMENT, MESSAGE TEXT, TYPE TEXT, RANGE STRING, FOREIGN KEY (RANGE) REFERENCES RANGES (ID));
CREATE TABLE RANGES (ID STRING PRIMARY KEY, PATH TEXT, START_LINE INT, END_LINE INT, START_COLUMN INT, END_COLUMN INT);
```

----------------------------------------

TITLE: Basic Prompt with Default Tool Configuration (Markdown/YAML)
DESCRIPTION: This example demonstrates a simple prompt file structure. It includes a YAML frontmatter section delimited by `---` that defines a tool named `curl`. The subsequent Markdown content, starting with `# prompt`, contains the instructions for the AI agent using the configured tool.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/content/tools/docs/authoring-prompts.md#_snippet_2

LANGUAGE: markdown
CODE:
```
---
tools:
  - name: curl
---

# prompt

Run the curl command, in silent mode, to fetch gists for user slimslenderslacks from GitHub.
```

----------------------------------------

TITLE: Running Socat Docker Container for Tool Connection (Shell)
DESCRIPTION: This command runs a temporary Docker container using the `alpine/socat` image to establish a bridge. It connects the container's standard I/O to a TCP endpoint (`TCP:host.docker.internal:8811`), allowing Cursor to communicate with a tool server running on the host machine. Prerequisites include Docker installed and a tool server active at the specified address.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/content/tools/quickstart_cursor.md#_snippet_0

LANGUAGE: Shell
CODE:
```
docker run --rm -i alpine/socat:latest STDIO TCP:host.docker.internal:8811
```

----------------------------------------

TITLE: Generating SQLite Insert Statement (CODE Table)
DESCRIPTION: Example SQL INSERT statement for adding a row to the `CODE` table. It demonstrates how to populate the `RANGE_ID` and `CODE_AT_RANGE` columns, using values derived from the CSV data and extracted file content.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/pylint/5-2-insert-code.md#_snippet_2

LANGUAGE: SQL
CODE:
```
INSERT INTO CODE (RANGE_ID, CODE_AT_RANGE) ('1234-abcd-1234', "<Contents of wsgi_skylines from line 11 to 104>")
```

----------------------------------------

TITLE: Defining Atlas Docs Container in MCP YAML
DESCRIPTION: This YAML snippet configures an MCP container for the 'atlas-docs' application. It specifies the container image 'mcp/atlas-docs:latest', sets the working directory to '/app', defines an environment variable 'ATLAS_API_URL' using a template variable, and links the container source to a specific GitHub repository branch.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/atlas-docs.md#_snippet_0

LANGUAGE: YAML
CODE:
```
mcp:
  - container:
      image: mcp/atlas-docs:latest
      workdir: /app
      environment:
        ATLAS_API_URL: "{{atlas-docs.api_url|safe}}"
    source:
      url: https://github.com/CartographAI/atlas-docs-mcp/tree/master
```

----------------------------------------

TITLE: Executing `fd` and Redirecting Output (Shell)
DESCRIPTION: Executes the `fdfind` command (an alternative to `find`) with specified arguments and redirects its standard output to a file path provided via templating. Requires the `fd` utility to be installed and accessible in the container environment.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/pylint/5-1-insert-top-level-ranges.md#_snippet_0

LANGUAGE: Shell
CODE:
```
fdfind {{fd_args|safe}} > {{out_file|safe}}
```

----------------------------------------

TITLE: Configuring MCP Container Deployment - YAML
DESCRIPTION: This YAML snippet defines the setup for a container within an MCP environment. It specifies the Docker image to use (`mcp/mcp-discord:latest`), the working directory inside the container (`/app`), a secret mount (`discord.token` mapped to `DISCORD_TOKEN`), and the source URL for the container's code (`https://github.com/slimslenderslacks/mcp-discord/tree/slim/docker`). It requires an MCP-compatible platform to execute this configuration.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/barryyip0625-mcp-discord.md#_snippet_0

LANGUAGE: YAML
CODE:
```
---
mcp:
  - container:
      image: mcp/mcp-discord:latest
      workdir: /app
      secrets:
        discord.token: DISCORD_TOKEN
    source:
      url: https://github.com/slimslenderslacks/mcp-discord/tree/slim/docker
---
```

----------------------------------------

TITLE: Listing OAuth Apps using ToolsApi Go
DESCRIPTION: Demonstrates how to fetch a list of all authorized OAuth applications using the generated Go client. The example initializes the client, executes the GET request for the list endpoint (which requires no parameters), handles errors, and prints the array of OAuthApp objects received.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/docs/ToolsApi.md#_snippet_3

LANGUAGE: go
CODE:
```
package main

import (
    "context"
    "fmt"
    "os"
    openapiclient "./openapi"
)

func main() {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)
    resp, r, err := apiClient.ToolsApi.ListOAuthApps(context.Background()).Execute()
    if err != nil {
        fmt.Fprintf(os.Stderr, "Error when calling `ToolsApi.ListOAuthApps`": %v\n", err)
        fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
    }
    // response from `ListOAuthApps`: []OAuthApp
    fmt.Fprintf(os.Stdout, "Response from `ToolsApi.ListOAuthApps`: %v\n", resp)
}
```

----------------------------------------

TITLE: Running Local Clojure Binary with Python Input (Shell)
DESCRIPTION: This command executes the built Clojure tree-sitter binary found in the ./result/bin directory. It pipes the content of a Python test file ('test/resources/hello.py') into the binary via standard input.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/tree-sitter-clj/runbook.md#_snippet_6

LANGUAGE: sh
CODE:
```
./result/bin/tree-sitter-clj-bin < test/resources/hello.py
```

----------------------------------------

TITLE: Configuring Atlas Docs MCP Server with Docker (JSON)
DESCRIPTION: This JSON snippet defines the configuration for running the Atlas Docs MCP server using Docker. It specifies the `docker run` command, arguments (including interactive mode, auto-removal, and passing environment variables), and sets the `ATLAS_API_URL` environment variable needed for the server to connect to the Atlas API.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/atlas-docs.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "atlas-docs": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "ATLAS_API_URL",
        "mcp/atlas-docs"
      ],
      "env": {
        "ATLAS_API_URL": "https://atlas.cartograph.app/api"
      }
    }
  }
}
```

----------------------------------------

TITLE: Docker Configuration for E2B MCP Server (JSON)
DESCRIPTION: This JSON snippet provides a configuration structure for defining an MCP server named 'e2b' that executes via a Docker command. It specifies the command arguments for running the 'mcp/e2b' image, including interactive mode (-i), automatic removal after exit (--rm), and setting the E2B_API_KEY environment variable.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/e2b.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "mcpServers": {
    "e2b": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "E2B_API_KEY",
        "mcp/e2b"
      ],
      "env": {
        "E2B_API_KEY": "YOUR_API_KEY_HERE"
      }
    }
  }
}
```

----------------------------------------

TITLE: Authorizing OAuth App using ToolsApi Go
DESCRIPTION: Shows how to authorize a new OAuth application using the generated Go client library. The example configures the client, specifies the application ID, optionally sets scopes using the builder pattern, executes the POST request, and handles the `AuthResponse` or potential errors.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/docs/ToolsApi.md#_snippet_4

LANGUAGE: go
CODE:
```
package main

import (
    "context"
    "fmt"
    "os"
    openapiclient "./openapi"
)

func main() {
    app := "app_example" // string | 
    scopes := "scopes_example" // string |  (optional)

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)
    resp, r, err := apiClient.ToolsApi.PostOAuthApp(context.Background(), app).Scopes(scopes).Execute()
    if err != nil {
        fmt.Fprintf(os.Stderr, "Error when calling `ToolsApi.PostOAuthApp`": %v\n", err)
        fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
    }
    // response from `PostOAuthApp`: AuthResponse
    fmt.Fprintf(os.Stdout, "Response from `ToolsApi.PostOAuthApp`: %v\n", resp)
}
```

----------------------------------------

TITLE: Running Docker Image Interactively - sh
DESCRIPTION: This command runs the vonwig/sqlite Docker image. The -it flags allow interactive use, typically providing a shell inside the container. The --rm flag ensures the container is automatically cleaned up upon exit, preventing clutter.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/sqlite/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker run -it --rm vonwig/sqlite
```

----------------------------------------

TITLE: Configuring Razorpay MCP Server Docker Container (JSON)
DESCRIPTION: This JSON snippet defines the configuration for running the Razorpay MCP Server as a Docker container within an MCP environment. It specifies the docker command and arguments, including passing through and explicitly setting required environment variables (RAZORPAY_KEY_ID and RAZORPAY_KEY_SECRET) for authentication with the Razorpay API. Replace the placeholder values with your actual API credentials.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/razorpay.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "razorpay": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "RAZORPAY_KEY_ID",
        "-e",
        "RAZORPAY_KEY_SECRET",
        "mcp/razorpay"
      ],
      "env": {
        "RAZORPAY_KEY_ID": "your_razorpay_key_id",
        "RAZORPAY_KEY_SECRET": "your_razorpay_key_secret"
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Bash Function Structure (YAML)
DESCRIPTION: This YAML snippet defines a function named 'bash' for an AI agent framework. It specifies that the function accepts a string parameter named 'command' and executes this command within a 'wbitt/network-multitool' Docker container by passing it to bash using the '-c' flag, ensuring the command is safely processed.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/screenshot.md#_snippet_0

LANGUAGE: yaml
CODE:
```
---
functions:
  - name: bash
    description: Run a bash script in the utilities container.
    parameters:
      type: object
      properties:
        command:
          type: string
          description: The command to send to bash
    container: 
        image: wbitt/network-multitool
        command: 
          - "bash"
          - "-c"
          - "{{command|safe}}"
---
```

----------------------------------------

TITLE: Executing Echo Command in Docker Container (Shell)
DESCRIPTION: This command is configured to execute within a Docker container (specifically `busybox:latest`) as part of the 'hello-docker' tool definition. It uses the standard shell `echo` command to print output. The string to be echoed includes a templated variable `{{greeting}}`, which is populated dynamically from the tool's parameters before execution.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/examples/hello_world.md#_snippet_0

LANGUAGE: Shell
CODE:
```
echo "{{greeting}}"
```

----------------------------------------

TITLE: Configuring the Template Engine and Arguments (Markdown/YAML)
DESCRIPTION: This snippet shows how to configure the templating engine using the `prompt-format` field in the YAML frontmatter, setting it to `django`. It also includes the `arguments` section to define parameters that can be bound to template variables within the prompt.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/content/tools/docs/authoring-prompts.md#_snippet_7

LANGUAGE: markdown
CODE:
```
---
prompt-format: "django"
arguments:
  - name: user
    description: the GitHub username to fetch gists for
    required: true
---

```

----------------------------------------

TITLE: Getting StoredSecret Name With Check Go
DESCRIPTION: Returns a tuple containing a pointer to the Name field's value and a boolean indicating whether the field has been explicitly set (non-nil). Returns zero value otherwise.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/docs/StoredSecret.md#_snippet_3

LANGUAGE: Go
CODE:
```
func (o *StoredSecret) GetNameOk() (*string, bool)
```

----------------------------------------

TITLE: Getting AuthType with Check (Go)
DESCRIPTION: Returns a tuple containing the AuthType field value (if non-nil) and a boolean indicating whether the value has been explicitly set on the object.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/docs/AuthResponse.md#_snippet_7

LANGUAGE: go
CODE:
```
func (o *AuthResponse) GetAuthTypeOk() (*string, bool)
```

----------------------------------------

TITLE: Updating Docker Extension Version - Shell
DESCRIPTION: Updates the installed Docker extension to a specific version using the 'docker extension update' command. Requires the extension name and target version.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/runbook.md#_snippet_1

LANGUAGE: sh
CODE:
```
docker extension update docker/labs-ai-tools-for-devs:0.2.8
```

----------------------------------------

TITLE: Configuring MCP Container with Wolfram Alpha Image (YAML)
DESCRIPTION: This YAML snippet configures a container for the Wolfram Alpha service on an MCP platform. It specifies the Docker image `mcp/wolfram-alpha:latest`, maps the `wolfram-alpha.api_key` secret to the `WOLFRAM_API_KEY` environment variable within the container, and provides a link to the source code repository on GitHub. Requires an MCP environment, the specified Docker image, and a configured secret.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/wolfram-alpha.md#_snippet_0

LANGUAGE: YAML
CODE:
```
---
mcp:
  - container:
      image: mcp/wolfram-alpha:latest
      secrets:
        wolfram-alpha.api_key: WOLFRAM_API_KEY
    source:
      url: https://github.com/SecretiveShell/MCP-wolfram-alpha/tree/master
---
```

----------------------------------------

TITLE: Getting Tools Field With Presence Check Go
DESCRIPTION: This method retrieves the value of the `Tools` field from an `OAuthApp` instance along with a boolean indicating if the field has been explicitly set. It returns a pointer to the slice of strings and a boolean flag.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/docs/OAuthApp.md#_snippet_6

LANGUAGE: go
CODE:
```
func (o *OAuthApp) GetToolsOk() (*[]string, bool)
```

----------------------------------------

TITLE: Defining Hello Function (Clojure)
DESCRIPTION: This snippet defines a simple Clojure function named `hello`. The function takes no arguments and, when invoked, prints the string "Hello, World!" to the standard output using the `println` function. It serves as a basic illustration of function declaration and side effects in Clojure.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/tree-sitter/test/resources/hello.md#_snippet_0

LANGUAGE: Clojure
CODE:
```
(defn hello []
  (println "Hello, World!"))
```

----------------------------------------

TITLE: Configuring Chroma MCP Server Docker Run
DESCRIPTION: This JSON snippet provides a configuration example for running the Chroma MCP server as a Docker container. It defines the `command` as 'docker' and specifies the `args` for the `run` command, including options for interactive mode (`-i`), auto-removal (`--rm`), and passing the `CHROMA_API_KEY` environment variable from the host environment to the container using the `mcp/chroma` image. It also shows an example of setting the `CHROMA_API_KEY` within the `env` block.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/chroma.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "chroma": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "CHROMA_API_KEY",
        "mcp/chroma"
      ],
      "env": {
        "CHROMA_API_KEY": "your-api-key"
      }
    }
  }
}
```

----------------------------------------

TITLE: Preparing SQLite CSV Export Script
DESCRIPTION: Template for an SQLite script using command-line directives. It sets the output mode to CSV, includes headers, directs the output of the subsequent query to `/thread/code_insert/all_ranges.csv`, and includes a placeholder for the actual SQL query.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/pylint/5-2-insert-code.md#_snippet_1

LANGUAGE: SQLite CLI
CODE:
```
.mode csv
.headers on
.once /thread/code_insert/all_ranges.csv
<Query>
```

----------------------------------------

TITLE: Defining Bootstrap Tool for Docker AI YAML
DESCRIPTION: This YAML snippet defines a tool named 'bootstrap' intended for registering other tool definitions. It specifies the AI model to use, the parameters it accepts ('content' for the tool definition body and 'name' for the filename), and the container environment. The container configuration uses a specific bash alpine image, mounts a volume, and executes a command that writes the provided 'content' parameter into a file named after the 'name' parameter within the mounted volume.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/bootstrap.md#_snippet_0

LANGUAGE: yaml
CODE:
```
name: bootstrap
model: claude-3-5-sonnet-20241022
tools:
  - name: tool-registration
    description: bootstrap a tool definition in the current session
    parameters:
      type: object
      properties:
        content:
          type: string
          description: the content of the tool definition
        name:
          type: string
          description: the name of the tool
    container:
      image: vonwig/bash_alpine
      volumes:
        - "docker-prompts:/prompts"
      command:
        - -c
        - "echo \"{{content|safe}}\" > /prompts/{{name}}.md"
    source:
      url: https://github.com/docker/labs-ai-tools-for-devs/tree/main/functions/bash_alpine
```

----------------------------------------

TITLE: Tree-sitter Tool Agent Interface Definition (YAML)
DESCRIPTION: This YAML snippet defines the structure for interacting with the tree-sitter Docker tool when used by an agent. It specifies the required input parameters (`lang`, `query`, `file`) and configures how the tool should be invoked via Docker, including the container image and command-line arguments. The tool reads the content of the specified file from standard input.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/tree-sitter/README.md#_snippet_1

LANGUAGE: yaml
CODE:
```
name: tree-sitter
description: Extract code ranges using tree-sitter queries
parameters:
  type: object
  properties:
    lang:
      type: string
      description: language to parse
    query:
      type: string
      description: tree-sitter query
    file:
      type: string
      description: the file to parse
  container:
    image: vonwig/tree-sitter:latest
    command:
      - "-lang"
      - "{{lang}}"
      - "-query"
      - "{{query}}"
    stdin:
      file: "{{file}}"
```

----------------------------------------

TITLE: Getting OAuth App using ToolsApi Go
DESCRIPTION: Illustrates how to retrieve details for a specific OAuth application using the generated Go client. The example configures the client, provides the application ID, executes the GET request, handles potential errors, and prints the successful response object.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/docs/ToolsApi.md#_snippet_2

LANGUAGE: go
CODE:
```
package main

import (
    "context"
    "fmt"
    "os"
    openapiclient "./openapi"
)

func main() {
    app := "app_example" // string | 

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)
    resp, r, err := apiClient.ToolsApi.GetOAuthApp(context.Background(), app).Execute()
    if err != nil {
        fmt.Fprintf(os.Stderr, "Error when calling `ToolsApi.GetOAuthApp`": %v\n", err)
        fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
    }
    // response from `GetOAuthApp`: OAuthApp
    fmt.Fprintf(os.Stdout, "Response from `ToolsApi.GetOAuthApp`: %v\n", resp)
}
```

----------------------------------------

TITLE: Deleting Secret with SecretsApi Go
DESCRIPTION: Demonstrates how to delete a secret using the generated Go OpenAPI client. It shows initializing the client, setting the secret ID, and executing the delete request, including basic error handling. Requires the OpenAPI client library and a configured API endpoint. Takes a secret ID string as input.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/docs/SecretsApi.md#_snippet_1

LANGUAGE: go
CODE:
```
package main

import (
    "context"
    "fmt"
    "os"
    openapiclient "./openapi"
)

func main() {
    secret := "secret_example" // string | 

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)
    resp, r, err := apiClient.SecretsApi.DeleteJfsSecret(context.Background(), secret).Execute()
    if err != nil {
        fmt.Fprintf(os.Stderr, "Error when calling `SecretsApi.DeleteJfsSecret``: %v\n", err)
        fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
    }
}
```

----------------------------------------

TITLE: Convert YAML to EDN using Jet (Shell)
DESCRIPTION: This shell command uses the 'jet' utility to perform a format conversion. It takes `registry.yaml` as input via standard input redirection (`<`) and outputs the converted content to `registry.edn` via standard output redirection (`>`). The `-i yaml` option specifies the input format as YAML, the `-o edn` option specifies the output format as EDN, and the `-k` option is likely used to preserve comments or keys during the conversion process. This requires the 'jet' tool to be installed and available in the environment.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
#docker:command=jet
jet -i yaml -o edn -k < registry.yaml > registry.edn
```

----------------------------------------

TITLE: Example Tree-sitter Tool Output JSON Format (JSON)
DESCRIPTION: This JSON snippet illustrates the format of the output generated by the tree-sitter tool. It represents a single extracted code range, including the capture name from the query, the text of the captured node, byte offsets, and line/column point information for both the start and end of the range. The tool streams a series of these objects.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/tree-sitter/README.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "capture_name": "top-level",
  "node_text": "def hello():\n\tprint(\"hello\")",
  "start_byte": 0,
  "end_byte": 30,
  "start_point": {
    "row": 0,
    "column": 0
  },
  "end_point": {
    "row": 0,
    "column": 30
  }
}
```

----------------------------------------

TITLE: Defining Moby API Response Types - TypeScript
DESCRIPTION: This snippet defines the TypeScript interfaces SimplifiedResponse and SimplifiedMobyResponse. These types represent the expected JSON structure returned by the /willy/moby-chat API endpoint, detailing the properties like isError, errorMsg, question, answer array, and assistantConclusion.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/triplewhale.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export type SimplifiedResponse = {
  isError: boolean;
  errorMsg?: string;
  question: string;
  answer: Record<string, string | number | null>[];
  assistant: string;
};

export type SimplifiedMobyResponse = {
  isError: boolean;
  error?: string;
  responses: SimplifiedResponse[];
  assistantConclusion: string;
};
```

----------------------------------------

TITLE: Example Output for Function Line Ranges JSON
DESCRIPTION: This JSON snippet illustrates the expected format for reporting the line number ranges occupied by functions within a source file. It maps function names to an array containing their start and end line numbers.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/linting/read-file.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
 "foo": [10,20]
 }
```

----------------------------------------

TITLE: Get Description Field with Existence Check from OAuthScopes Go
DESCRIPTION: Returns a tuple containing the `Description` field value and a boolean indicating if the value has been set. This allows distinguishing between a zero value and a field that hasn't been explicitly set.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/docs/OAuthScopes.md#_snippet_7

LANGUAGE: Go
CODE:
```
func (o *OAuthScopes) GetDescriptionOk() (*string, bool)
```

----------------------------------------

TITLE: Docker Configuration for Exa MCP Server (JSON)
DESCRIPTION: This JSON object defines the setup for launching the Exa MCP server using Docker. It specifies the `docker` command, necessary arguments like `-i` (interactive), `--rm` (remove on exit), and `-e` (environment variable), pointing to the `mcp/exa` image. It also includes an `env` block to set the `EXA_API_KEY` required by the server, which must be replaced with your actual key.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/exa.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "exa": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "EXA_API_KEY",
        "mcp/exa"
      ],
      "env": {
        "EXA_API_KEY": "your-api-key-here"
      }
    }
  }
}
```

----------------------------------------

TITLE: Get Pylint Man Page via Docker - sh
DESCRIPTION: This shell command executes the `man` command within an ephemeral Docker container running the `vonwig/pylint:latest` image. It's used to display the manual page for the pylint tool. Requires Docker installed and the `vonwig/pylint:latest` image available.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/pylint/1-generate-violations.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker run -it --rm vonwig/pylint:latest '{}' man
```

----------------------------------------

TITLE: Connecting to Service Port via Socat - Shell
DESCRIPTION: Uses the `socat` utility to create a connection between standard input/output (STDIO) and a TCP port (127.0.0.1:8811). This is likely used for interactive testing or sending commands to the service running on that port.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/runbook.md#_snippet_7

LANGUAGE: sh
CODE:
```
socat STDIO TCP:127.0.0.1:8811
```

----------------------------------------

TITLE: Configuring Server per Operation in Go
DESCRIPTION: This Go code demonstrates how to set specific server indices and variables for individual API operations. It uses `context.WithValue` with `ContextOperationServerIndices` and `ContextOperationServerVariables`, mapping operation identifiers to their desired configuration.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/README.md#_snippet_5

LANGUAGE: golang
CODE:
```
ctx := context.WithValue(context.Background(), secretsapi.ContextOperationServerIndices, map[string]int{
	"{classname}Service.{nickname}": 2,
})
ctx = context.WithValue(context.Background(), secretsapi.ContextOperationServerVariables, map[string]map[string]string{
	"{classname}Service.{nickname}": {
		"port": "8443",
	},
})
```

----------------------------------------

TITLE: Configuring Operation-Specific Server URL and Variables - Go
DESCRIPTION: Explains how to override the default server and its variables for a specific API operation using `ContextOperationServerIndices` and `ContextOperationServerVariables` in the context. The operation is identified by "{classname}Service.{nickname}". Requires the `context` and `oauthapi` packages.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/README.md#_snippet_5

LANGUAGE: Go
CODE:
```
ctx := context.WithValue(context.Background(), oauthapi.ContextOperationServerIndices, map[string]int{
	"{classname}Service.{nickname}": 2
})
ctx = context.WithValue(context.Background(), oauthapi.ContextOperationServerVariables, map[string]map[string]string{
	"{classname}Service.{nickname}": {
		"port": "8443"
	}
})
```

----------------------------------------

TITLE: Stopping Docker Container with Context (Shell)
DESCRIPTION: Stops the specified Docker container (`evolute-stable-diffusion`) using the named Docker context (`evolute-stable-diffusion`). This command appears again, likely representing another point in the workflow where the container needs to be stopped.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/stable-diffusion/runbook.md#_snippet_8

LANGUAGE: Shell
CODE:
```
docker --context evolute-stable-diffusion kill evolute-stable-diffusion
```

----------------------------------------

TITLE: Tailing Docker MCP Server Logs - Shell
DESCRIPTION: This command executes a temporary Docker container based on Alpine Linux. It mounts the 'docker-prompts' volume to access the log file and then uses 'tail -f' to continuously display the contents of the server output log file (`/prompts/log/docker-mcp-server.out`). This is useful for monitoring the server's activity.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/content/tools/docs/mcp-server.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker run --rm -t --init \
           -v docker-prompts:/prompts alpine:latest \
           tail -f /prompts/log/docker-mcp-server.out
```

----------------------------------------

TITLE: Defining SubmitFinalAnswer Tool in YAML
DESCRIPTION: This YAML configuration block defines the 'SubmitFinalAnswer' tool for an AI agent. It specifies the tool's name, a description of its function (submitting the final answer), and the parameters it accepts. The tool requires a single parameter, 'final_answer', which must be a string containing the answer for the user.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/sql/query-gen.md#_snippet_0

LANGUAGE: YAML
CODE:
```
tools:
  - name: SubmitFinalAnswer
    description: Submit the final answer to the user based on the query results
    parameters:
      type: object
      properties:
        final_answer:
          type: string
          description: The final answer to the user
```

----------------------------------------

TITLE: Instructing AI to Fetch README (Shell)
DESCRIPTION: This is an instruction written in shell command format within a prompt system, intended for an AI agent equipped with a `curl` tool. It directs the agent to fetch the content of the README file from the specified GitHub URL (`https://github.com/docker/labs-ai-tools-for-devs`). Requires the AI agent to understand and execute `curl` commands.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/README.md#_snippet_5

LANGUAGE: sh
CODE:
```
Use curl to get the readme for https://github.com/docker/labs-ai-tools-for-devs before answering the following questions.
```

----------------------------------------

TITLE: Running Local Tree-sitter Query Binary with Python Input (Shell)
DESCRIPTION: This command runs a local tree-sitter query binary ('./result/bin/ts'). It provides a tree-sitter query as the first argument and pipes a dynamically created Python code snippet via process substitution as standard input.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/tree-sitter-clj/runbook.md#_snippet_7

LANGUAGE: sh
CODE:
```
./result/bin/ts "(module (function_definition) @top-level)" < <(echo "def hello():\n\tprint(\"hello\")")
```

----------------------------------------

TITLE: Get Policy Name Go
DESCRIPTION: Returns the value of the Name field from the Policy object if it is non-nil. Otherwise, it returns the zero value for the string type.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/docs/Policy.md#_snippet_2

LANGUAGE: go
CODE:
```
func (o *Policy) GetName() string
```

----------------------------------------

TITLE: Executing SQLite Script File (SQLite)
DESCRIPTION: This snippet contains an SQLite command instructing the user to execute the contents of the `/thread/insert.sql` file. The command uses the `.read` dot command, which reads and executes SQL commands from a specified file. The surrounding text indicates this command should be run against the `/thread/db.sqlite` database.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/pylint/4-run-violation-insert.md#_snippet_1

LANGUAGE: SQLite
CODE:
```
.read /thread/insert.sql
```

----------------------------------------

TITLE: Specifying a Custom Model Endpoint (Markdown/YAML)
DESCRIPTION: This example demonstrates how to override the default AI model and endpoint by specifying the `model` and `url` fields within the YAML frontmatter. This is useful for directing prompts to local models or specific API endpoints.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/content/tools/docs/authoring-prompts.md#_snippet_4

LANGUAGE: markdown
CODE:
```
---
tools:
  - name: curl
model: llama3.2
url: http://localhost:11434/v1
---

# prompt

Run the curl command, in silent mode, to fetch gists for user slimslenderslacks from GitHub.
```

----------------------------------------

TITLE: Tailing Service Logs from Docker Volume - Shell
DESCRIPTION: Runs an Alpine container to access and continuously display the contents of a log file located within a Docker volume named 'docker-prompts'. Useful for monitoring the output of the service that writes to this volume.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/runbook.md#_snippet_4

LANGUAGE: sh
CODE:
```
docker run --rm -t --init -v docker-prompts:/prompts alpine:latest tail -f /prompts/log/docker-mcp-server.out
```

----------------------------------------

TITLE: Accessing User in Client Component (TSX)
DESCRIPTION: This React Client Component uses the `useUser()` hook provided by `@stackframe/stack` to retrieve the currently logged-in user object. It conditionally renders a greeting message based on whether a user is available. Requires the `"use client";` directive, the `@stackframe/stack` dependency, and the component to be rendered within the `StackProvider`.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/readmes/neondatabase-labs.md#_snippet_3

LANGUAGE: tsx
CODE:
```
"use client";
import { useUser } from "@stackframe/stack";
export function MyComponent() {
  const user = useUser();
  return <div>{user ? `Hello, ${user.displayName}` : "Not logged in"}</div>;
}
```

----------------------------------------

TITLE: Getting SQLite table schema via Docker Shell
DESCRIPTION: Runs the SQLite `.schema` command for a specific table (`Album`) inside a Docker container to display the SQL creation statement. This is useful for understanding the structure, columns, constraints, and indices of a table.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/sql/runbook.md#_snippet_1

LANGUAGE: shell
CODE:
```
docker run --rm -v $PWD:/workdir --workdir /workdir vonwig/sqlite:latest ./Chinook.db ".schema Album"
```

----------------------------------------

TITLE: Defining MCP Tools and Prompts via Markdown/YAML
DESCRIPTION: This snippet demonstrates the structure of a markdown file used to define tools and MCP servers for the `mcp/docker` environment. The YAML frontmatter specifies a 'curl' tool based on a Docker image and an 'mcp/sequentialthinking' server container, while the markdown body provides a sample prompt that utilizes the defined tool.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/content/tools/_index.md#_snippet_1

LANGUAGE: Markdown
CODE:
```
---
tools:
  - name: curl
    description: run the curl command
    container:
      image: curl:latest
mcp:
  - container: mcp/sequentialthinking
---

# prompt

Run the curl command, in silent mode, to fetch gists for user slimslenderslacks from GitHub.
```

----------------------------------------

TITLE: Building Clojure Component with Nix (Shell)
DESCRIPTION: This command uses Nix to build the 'clj' component of the project. The '--log-format bar-with-logs' option provides a specific output format for the build logs.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/functions/tree-sitter-clj/runbook.md#_snippet_3

LANGUAGE: sh
CODE:
```
nix build .#clj --log-format bar-with-logs
```

----------------------------------------

TITLE: Checking File Existence using Shell Command
DESCRIPTION: Defines an AI tool that uses the standard shell `test -f` command within a BusyBox container to verify if a file exists at a specified path. It requires the `path` parameter to be mounted as a volume.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/examples/ffmpeg.md#_snippet_0

LANGUAGE: Shell
CODE:
```
test -f "{{path|safe}}"
```

----------------------------------------

TITLE: Diagramming MCP Docker Architecture with Mermaid
DESCRIPTION: This Mermaid diagram visualizes the interaction between the MCP Client, the `mcp/docker` container within Docker Desktop, and how it's extended by external Tool Containers and MCP Server Containers. It shows the data flow from the client to the `mcp/docker` container.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/content/tools/_index.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
mermaid
flowchart LR
    desktop["MCP Client"]
    subgraph docker["Docker Desktop"]
        mcp["mcp/docker"]
    end
    desktop --> docker
    docker -- extended by --- box1["Tool Containers"]
    docker -- extended by --- box2["MCP Server Containers"]
    style desktop fill:#f9f9f9,stroke:#333,stroke-width:2px
    style docker fill:#e6f3ff,stroke:#333,stroke-width:2px,color:#0066cc
    style mcp fill:#fff,stroke:#333,stroke-width:1px
    style box1 fill:#f9f9f9,stroke:#333,stroke-width:2px
    style box2 fill:#f9f9f9,stroke:#333,stroke-width:2px
```

----------------------------------------

TITLE: Structuring curl Command Input (Shell)
DESCRIPTION: This snippet shows the structure for defining the `command` to be executed by the `curl` container. It indicates that the entire `curl` command line, including all arguments, will be provided dynamically via the `{{raw|safe}}` template variable, allowing for flexible execution of various curl commands.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/chrome.md#_snippet_2

LANGUAGE: Shell
CODE:
```
{{raw|safe}}
```

----------------------------------------

TITLE: Set Docker Context (sh)
DESCRIPTION: Sets the current active Docker context to 'desktop-linux'. This command is used to switch between different Docker environments or configurations.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/stable-diffusion/local-runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
docker context use desktop-linux
```

----------------------------------------

TITLE: Adding OAuth App Tool using ToolsApi Go
DESCRIPTION: Demonstrates adding a specific tool to an authorized OAuth application using the generated Go client. The example initializes the client, provides the application and tool IDs as path parameters, executes the POST request to associate them, and includes basic error handling.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/docs/ToolsApi.md#_snippet_5

LANGUAGE: go
CODE:
```
package main

import (
    "context"
    "fmt"
    "os"
    openapiclient "./openapi"
)

func main() {
    app := "app_example" // string | 
    tool := "tool_example" // string | 

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)
    resp, r, err := apiClient.ToolsApi.PostOAuthAppTool(context.Background(), app, tool).Execute()
    if err != nil {
        fmt.Fprintf(os.Stderr, "Error when calling `ToolsApi.PostOAuthAppTool`": %v\n", err)
        fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
    }
}
```

----------------------------------------

TITLE: Accessing Global Node Modules Node.js
DESCRIPTION: This snippet demonstrates how to find the installation root directory for globally installed Node.js packages. It uses the `child_process` module to execute the `npm root -g` command and captures the output to construct the correct path for requiring a global package. This method is useful when you need to interact with packages installed outside the local project's `node_modules` folder.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/telegram/telegram.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { execSync } = require("child_process");
// get root folder of global node modules
const root = execSync("npm root -g")
  .toString()
  .trim();
// then we require global node modules as
const package = require(`${root}/package-name`);
```

----------------------------------------

TITLE: Setting Docker Extension Policy and Secret - Shell
DESCRIPTION: Configures Docker extension access control by setting a policy named 'my-policy' to allow access to all extensions ('*'). It then associates a secret, 'stripe.api_key', with this policy. This is crucial for securing sensitive configuration used by extensions.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/runbook.md#_snippet_8

LANGUAGE: sh
CODE:
```
docker x policy set my-policy '*'
docker x secret set 'stripe.api_key=....' --policy my-policy
```

----------------------------------------

TITLE: Building Hugo Site with Docker Command - Shell
DESCRIPTION: Executes the Hugo build command with options for garbage collection (`--gc`), minification (`--minify`), and sets the site's base URL. The `# docker:command=hugo-build` comment suggests this command is intended to be run within a Docker container or context.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/runbook.md#_snippet_0

LANGUAGE: sh
CODE:
```
hugo build --gc --minify --baseURL https://vonwig.github.io/prompts.docs/
```

----------------------------------------

TITLE: Defining Audiense Insights Container Configuration (YAML)
DESCRIPTION: This YAML snippet defines a container configuration under the 'mcp' key. It specifies the Docker image 'mcp/audiense-insights:latest', sets the working directory to '/app', maps platform secrets 'audiense-insights.client_secret' and 'audiense-insights.twitter_bearer_token' to environment variables 'AUDIENSE_CLIENT_SECRET' and 'TWITTER_BEARER_TOKEN' respectively, sets an environment variable 'AUDIENSE_CLIENT_ID' from a platform value, and provides the source URL of the GitHub repository.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/mcp/audiense-insights.md#_snippet_0

LANGUAGE: yaml
CODE:
```
mcp:
  - container:
      image: mcp/audiense-insights:latest
      workdir: /app
      secrets:
        audiense-insights.client_secret: AUDIENSE_CLIENT_SECRET
        audiense-insights.twitter_bearer_token: TWITTER_BEARER_TOKEN
      environment:
        AUDIENSE_CLIENT_ID: "{{audiense-insights.client_id}}"
    source:
      url: https://github.com/AudienseCo/mcp-audiense-insights/tree/main
```

----------------------------------------

TITLE: Instantiating Secret with Required Fields - Go
DESCRIPTION: Instantiates a new `Secret` object, ensuring that required properties like `name` and `value` are set. This constructor will assign default values to properties where defined and ensures required API properties are initialized.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/docs/Secret.md#_snippet_0

LANGUAGE: Go
CODE:
```
func NewSecret(name string, value string, ) *Secret
```

----------------------------------------

TITLE: Set Name Field on OAuthScopes Go
DESCRIPTION: Sets the value of the `Name` field on the `OAuthScopes` object to the provided string value `v`.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/docs/OAuthScopes.md#_snippet_4

LANGUAGE: Go
CODE:
```
func (o *OAuthScopes) SetName(v string)
```

----------------------------------------

TITLE: Getting Secret Value - Go
DESCRIPTION: Retrieves the `Value` field of the `Secret` object. Returns the Value string if the field is non-nil; otherwise, returns the zero value for a string.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/secrets/docs/Secret.md#_snippet_5

LANGUAGE: Go
CODE:
```
func (o *Secret) GetValue() string
```

----------------------------------------

TITLE: Installing Docker Extension Locally (Shell)
DESCRIPTION: This command installs the previously built Docker extension image onto the local Docker Desktop instance. It makes the extension available in the Docker Dashboard. Optional: Use -f or --force to automate acceptance of warnings. Required: Docker Desktop.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
docker extension install docker/labs-ai-tools-for-devs:local
```

----------------------------------------

TITLE: Initializing OAuthApp Go Struct
DESCRIPTION: This constructor function creates a new `OAuthApp` object. It requires specific parameters (`app`, `tools`, `authorized`, `provider`) to be provided, ensuring that all required properties for the API object are set upon instantiation. It also handles assigning any default values defined for other properties.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/src/extension/host-binary/pkg/generated/go/client/tools/docs/OAuthApp.md#_snippet_0

LANGUAGE: go
CODE:
```
func NewOAuthApp(app string, tools []string, authorized bool, provider string, ) *OAuthApp
```

----------------------------------------

TITLE: Declaring SQLite Tool (YAML)
DESCRIPTION: This YAML configuration block declares 'sqlite' as a required tool for the project. This is likely used by a system or orchestrator to ensure the necessary tools are available before proceeding with subsequent steps or instructions defined within the file.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/prompts/pylint/4-run-violation-insert.md#_snippet_0

LANGUAGE: YAML
CODE:
```
tools:
  - name: sqlite
```

----------------------------------------

TITLE: Testing Template Parameter Values (Markdown/YAML)
DESCRIPTION: This example demonstrates how to provide test values for template parameters directly within the YAML frontmatter using the `parameter-values` field. This feature is useful for quickly testing prompts during development, particularly in integrated environments like VSCode.
SOURCE: https://github.com/docker/labs-ai-tools-for-devs/blob/main/docs/content/tools/docs/authoring-prompts.md#_snippet_8

LANGUAGE: markdown
CODE:
```
---
parameter-values:
  user: slimslenderslacks
---

```