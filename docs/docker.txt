TITLE: Building a Python application image with Dockerfile
DESCRIPTION: This Dockerfile creates a ready-to-run Python application. It specifies the base image, sets the working directory, installs dependencies, copies source code, exposes a port, sets up an app user, and defines the command to run.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/writing-a-dockerfile.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
FROM python:3.12
WORKDIR /usr/local/app

# Install the application dependencies
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy in the source code
COPY src ./src
EXPOSE 5000

# Setup an app user so the container doesn't run as the root user
RUN useradd app
USER app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8080"]
```

----------------------------------------

TITLE: GitHub Actions Workflow Configuration
DESCRIPTION: This YAML file defines a GitHub Actions workflow that builds, tests, and pushes a Docker image to Docker Hub. It uses the `docker/login-action`, `docker/setup-buildx-action`, and `docker/build-push-action` actions to automate the process.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/configure-ci-cd.md#_snippet_3

LANGUAGE: YAML
CODE:
```
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test
        uses: docker/build-push-action@v6
        with:
          target: build
          load: true

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          target: final
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
```

----------------------------------------

TITLE: Setting the Application Startup Command in Dockerfile
DESCRIPTION: This snippet demonstrates how to set the command that runs when a container based on the image starts, using the `CMD` instruction in a Dockerfile. It uses the "exec form" to start a Flask development server.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/dockerfile.md#_snippet_10

LANGUAGE: dockerfile
CODE:
```
CMD ["flask", "run", "--host", "0.0.0.0", "--port", "8000"]
```

----------------------------------------

TITLE: Building images with SBOM and Provenance attestations using Docker Buildx
DESCRIPTION: This command builds a Docker image with both SBOM (Software Bill of Materials) and provenance attestations enabled. The resulting image will contain metadata describing its software components and build process, enhancing supply chain security.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/_index.md#_snippet_0

LANGUAGE: shell
CODE:
```
$ docker buildx build --sbom=true --provenance=true .
```

----------------------------------------

TITLE: Docker Compose Production Configuration
DESCRIPTION: Defines services, volumes, and networks for a production environment. Includes web (nginx), php-fpm, php-cli, postgres, and redis services. Specifies build contexts, Dockerfiles, restart policies, volume mounts, environment variables, network configurations, health checks, and service dependencies.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/production-setup.md#_snippet_11

LANGUAGE: yaml
CODE:
```
services:
  web:
    build:
      context: .
      dockerfile: ./docker/production/nginx/Dockerfile
    restart: unless-stopped # Automatically restart unless the service is explicitly stopped
    volumes:
      # Mount the 'laravel-storage' volume to '/var/www/storage' inside the container.
      # -----------------------------------------------------------
      # This volume stores persistent data like uploaded files and cache.
      # The ':ro' option mounts it as read-only in the 'web' service because Nginx only needs to read these files.
      # The 'php-fpm' service mounts the same volume without ':ro' to allow write operations.
      # -----------------------------------------------------------
      - laravel-storage-production:/var/www/storage:ro
    networks:
      - laravel-production
    ports:
      # Map port 80 inside the container to the port specified by 'NGINX_PORT' on the host machine.
      # -----------------------------------------------------------
      # This allows external access to the Nginx web server running inside the container.
      # For example, if 'NGINX_PORT' is set to '8080', accessing 'http://localhost:8080' will reach the application.
      # -----------------------------------------------------------
      - "${NGINX_PORT:-80}:80"
    depends_on:
      php-fpm:
        condition: service_healthy # Wait for php-fpm health check

  php-fpm:
    # For the php-fpm service, we will create a custom image to install the necessary PHP extensions and setup proper permissions.
    build:
      context: .
      dockerfile: ./docker/common/php-fpm/Dockerfile
      target: production # Use the 'production' stage in the Dockerfile
    restart: unless-stopped
    volumes:
      - laravel-storage-production:/var/www/storage # Mount the storage volume
    env_file:
      - .env
    networks:
      - laravel-production
    healthcheck:
      test: ["CMD-SHELL", "php-fpm-healthcheck || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    # The 'depends_on' attribute with 'condition: service_healthy' ensures that
    # this service will not start until the 'postgres' service passes its health check.
    # This prevents the application from trying to connect to the database before it's ready.
    depends_on:
      postgres:
        condition: service_healthy

  # The 'php-cli' service provides a command-line interface for running Artisan commands and other CLI tasks.
  # -----------------------------------------------------------
  # This is useful for running migrations, seeders, or any custom scripts.
  # It shares the same codebase and environment as the 'php-fpm' service.
  # -----------------------------------------------------------
  php-cli:
    build:
      context: .
      dockerfile: ./docker/php-cli/Dockerfile
    tty: true # Enables an interactive terminal
    stdin_open: true # Keeps standard input open for 'docker exec'
    env_file:
      - .env
    networks:
      - laravel

  postgres:
    image: postgres:16
    restart: unless-stopped
    user: postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data-production:/var/lib/postgresql/data
    networks:
      - laravel-production
    # Health check for PostgreSQL
    # -----------------------------------------------------------
    # Health checks allow Docker to determine if a service is operational.
    # The 'pg_isready' command checks if PostgreSQL is ready to accept connections.
    # This prevents dependent services from starting before the database is ready.
    # -----------------------------------------------------------
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    restart: unless-stopped # Automatically restart unless the service is explicitly stopped
    networks:
      - laravel-production
    # Health check for Redis
    # -----------------------------------------------------------
    # Checks if Redis is responding to the 'PING' command.
    # This ensures that the service is not only running but also operational.
    # -----------------------------------------------------------
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  # Attach the service to the 'laravel-production' network.
  # -----------------------------------------------------------
  # This custom network allows all services within it to communicate using their service names as hostnames.
```

----------------------------------------

TITLE: Creating a Docker Service with a Specific Image Digest
DESCRIPTION: This command creates a Docker service named 'myservice' using a specific image digest. It demonstrates how to specify the exact version of the image using its SHA256 digest, ensuring that the service always uses that specific version.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#_snippet_19

LANGUAGE: console
CODE:
```
$ docker service create \
      --name="myservice" \
      ubuntu:16.04@sha256:35bc48a1ca97c3971611dc4662d08d131869daa692acb281c7e9e052924e38b1
```

----------------------------------------

TITLE: Installing packages with apt-get
DESCRIPTION: This snippet shows how to install multiple packages using `apt-get` in a Dockerfile. It includes updating the package list, installing specified packages while avoiding recommended dependencies, and cleaning up the APT list directory to reduce image size. Sorting the packages alphanumerically improves readability and maintainability.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```
RUN apt-get update && apt-get install -y --no-install-recommends \
  bzr \
  cvs \
  git \
  mercurial \
  subversion \
  && rm -rf /var/lib/apt/lists/*
```

----------------------------------------

TITLE: Using sync+restart Action in Compose
DESCRIPTION: This example demonstrates the use of the `sync+restart` action in Docker Compose. It configures the `watch` feature to synchronize changes in the `./web` directory to `/app/web` inside the container, ignoring the `node_modules/` directory. It also uses the `sync+restart` action to synchronize changes to `./proxy/nginx.conf` to `/etc/nginx/conf.d/default.conf` and restart the `web` service.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/file-watch.md#_snippet_2

LANGUAGE: yaml
CODE:
```
services:
  web:
    build: .
    command: npm start
    develop:
      watch:
        - action: sync
          path: ./web
          target: /app/web
          ignore:
            - node_modules/
        - action: sync+restart
          path: ./proxy/nginx.conf
          target: /etc/nginx/conf.d/default.conf

  backend:
    build:
      context: backend
      target: builder
```

----------------------------------------

TITLE: Multi-Stage Dockerfile for Maven/Tomcat
DESCRIPTION: This multi-stage Dockerfile builds a Java application using Maven in the first stage and then copies the resulting WAR file to a Tomcat server in the second stage. This separates the build-time dependencies (JDK, Maven) from the runtime dependencies (Tomcat).
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/09_image_best.md#_snippet_4

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM maven AS build
WORKDIR /app
COPY . .
RUN mvn package

FROM tomcat
COPY --from=build /app/target/file.war /usr/local/tomcat/webapps
```

----------------------------------------

TITLE: Dockerfile: Serving Static Files with Nginx
DESCRIPTION: This Dockerfile stage uses an Nginx image to serve the static files generated in the previous build stage. It copies a custom Nginx configuration file, copies the build output to Nginx's HTML serving directory, exposes port 8080, and starts Nginx with the custom configuration.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/containerize.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
FROM nginxinc/nginx-unprivileged:${NGINX_VERSION} AS runner

# Use a built-in non-root user for security best practices
USER nginx

# Copy custom Nginx config
COPY --link nginx.conf /etc/nginx/nginx.conf

# Copy the static build output from the build stage to Nginx's default HTML serving directory
COPY --link --from=builder /app/dist /usr/share/nginx/html

# Expose port 8080 to allow HTTP traffic
# Note: The default NGINX container now listens on port 8080 instead of 80 
EXPOSE 8080

# Start Nginx directly with custom config
ENTRYPOINT ["nginx", "-c", "/etc/nginx/nginx.conf"]
CMD ["-g", "daemon off;"]
```

----------------------------------------

TITLE: Setting ENTRYPOINT and CMD for s3cmd in Dockerfile
DESCRIPTION: This example demonstrates how to use `ENTRYPOINT` to set the main command for an image (s3cmd) and `CMD` to provide default flags. This allows the image to be run as if it were the s3cmd command itself.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_25

LANGUAGE: dockerfile
CODE:
```
ENTRYPOINT ["s3cmd"]
CMD ["--help"]
```

----------------------------------------

TITLE: Nginx Configuration for React.js App
DESCRIPTION: This Nginx configuration file is optimized for serving a React.js application. It configures worker processes, sets up logging, optimizes static file serving, enables gzip compression, configures caching, and handles client-side routing.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/containerize.md#_snippet_7

LANGUAGE: Nginx
CODE:
```
worker_processes auto;

# Store PID in /tmp (always writable)
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Disable logging to avoid permission issues
    access_log off;
    error_log  /dev/stderr warn;

    # Optimize static file serving
    sendfile        on;
    tcp_nopush      on;
tcp_nodelay     on;
    keepalive_timeout  65;
    keepalive_requests 1000;

    # Gzip compression for optimized delivery
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
    gzip_min_length 256;
    gzip_vary on;

    server {
        listen       8080;
        server_name  localhost;

        # Root directory where React.js build files are placed
        root /usr/share/nginx/html;
        index index.html;

        # Serve React.js static files with proper caching
        location / {
            try_files $uri /index.html;
        }

        # Serve static assets with long cache expiration
        location ~* \.(?:ico|css|js|gif|jpe?g|png|woff2?|eot|ttf|svg|map)$ {
            expires 1y;
            access_log off;
            add_header Cache-Control "public, immutable";
        }

        # Handle React.js client-side routing
        location /static/ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
}
```

----------------------------------------

TITLE: Running Postgres Container with Volume
DESCRIPTION: This command starts a Postgres container, sets the password, and attaches a volume named `postgres_data` to the `/var/lib/postgresql/data` directory, where Postgres stores its data files. This ensures data persistence across container restarts.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#_snippet_5

LANGUAGE: bash
CODE:
```
$ docker run --name=db -e POSTGRES_PASSWORD=secret -d -v postgres_data:/var/lib/postgresql/data postgres
```

----------------------------------------

TITLE: Creating a Dockerfile for a Python Application
DESCRIPTION: This Dockerfile sets up an environment for running a Python application. It uses a specific Python version, installs dependencies from requirements.txt, creates a non-privileged user, copies the source code, and exposes port 8000.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/containerize.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/go/dockerfile-reference/

# Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7

ARG PYTHON_VERSION=3.11.4
FROM python:${PYTHON_VERSION}-slim AS base

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

WORKDIR /app

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/go/dockerfile-user-best-practices/
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# Leverage a bind mount to requirements.txt to avoid having to copy them into
# into this layer.
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=bind,source=requirements.txt,target=requirements.txt \
    python -m pip install -r requirements.txt

# Switch to the non-privileged user to run the application.
USER appuser

# Copy the source code into the container.
COPY . .

# Expose the port that the application listens on.
EXPOSE 8000
```

----------------------------------------

TITLE: GitHub Actions Workflow Configuration
DESCRIPTION: This YAML configuration defines a GitHub Actions workflow that builds, tests, and pushes a Docker image to Docker Hub. It uses the `docker/login-action`, `docker/setup-buildx-action`, and `docker/build-push-action` actions to achieve this.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/php/configure-ci-cd.md#_snippet_3

LANGUAGE: yaml
CODE:
```
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test
        uses: docker/build-push-action@v6
        with:
          target: test
          load: true

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          target: final
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
```

----------------------------------------

TITLE: Referencing .env variables in compose.yaml
DESCRIPTION: This snippet demonstrates how to reference environment variables defined in a .env file within a compose.yaml file using the ${VARIABLE} syntax. Docker Compose automatically replaces the variable with its value from the .env file.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/environment-variables/variable-interpolation.md#_snippet_6

LANGUAGE: yaml
CODE:
```
services:
  webapp:
    image: my-webapp-image
    environment:
      - DEBUG=${DEBUG}
```

----------------------------------------

TITLE: CI/CD Workflow Configuration
DESCRIPTION: This YAML configuration defines a GitHub Actions workflow for building, testing, and pushing a React.js application with Docker. It triggers on pushes and pull requests to the main branch, sets up build environment, caches dependencies, builds Docker images, runs tests, and pushes the production image to Docker Hub.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/configure-ci-cd.md#_snippet_5

LANGUAGE: yaml
CODE:
```
name: CI/CD – React.js Application with Docker

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  build-test-push:
    name: Build, Test and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches full history for better caching/context

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      # 4. Cache npm dependencies
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      # 5. Extract metadata
      - name: Extract metadata
        id: meta
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> "$GITHUB_OUTPUT"
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      # 6. Build dev Docker image
      - name: Build Docker image for tests
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.dev
          tags: ${{ steps.meta.outputs.REPO_NAME }}-dev:latest
          load: true # Load to local Docker daemon for testing
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      # 7. Run Vitest tests
      - name: Run Vitest tests and generate report
        run: |
          docker run --rm \
            --workdir /app \
            --entrypoint "" \
            ${{ steps.meta.outputs.REPO_NAME }}-dev:latest \
            sh -c "npm ci && npx vitest run --reporter=verbose"
        env:
          CI: true
          NODE_ENV: test
        timeout-minutes: 10

      # 8. Login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 9. Build and push prod image
      - name: Build and push production image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKERHUB_PROJECT_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKERHUB_PROJECT_NAME }}:${{ steps.meta.outputs.SHORT_SHA }}
          cache-from: type=local,src=/tmp/.buildx-cache
```

----------------------------------------

TITLE: Complete Docker Compose file for a Node.js and MySQL application
DESCRIPTION: This YAML file defines a complete Docker Compose configuration for a Node.js application and a MySQL database. It includes service definitions for both, along with volume mappings, environment variables, and port mappings. The Node.js application is configured to connect to the MySQL database using environment variables.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/08_using_compose.md#_snippet_10

LANGUAGE: yaml
CODE:
```
services:
  app:
    image: node:18-alpine
    command: sh -c "yarn install && yarn run dev"
    ports:
      - 127.0.0.1:3000:3000
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: secret
      MYSQL_DB: todos

  mysql:
    image: mysql:8.0
    volumes:
      - todo-mysql-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: todos

volumes:
  todo-mysql-data:
```

----------------------------------------

TITLE: Defining MySQL and phpMyAdmin Services in Docker Compose
DESCRIPTION: This Docker Compose YAML file defines two services: a MySQL database and a phpMyAdmin interface. It configures the database image, environment variables for root password and database name, port mappings, and volume for persistent data. The phpMyAdmin service is configured to connect to the database service.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#_snippet_18

LANGUAGE: yaml
CODE:
```
services:
  db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: my-secret-pw
      MYSQL_DATABASE: mydb
    ports:
      - 3307:3306
    volumes:
      - my-db-volume:/var/lib/mysql

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD: my-secret-pw
    ports:
      - 8080:80
    depends_on:
      - db

volumes:
  my-db-volume:
```

----------------------------------------

TITLE: Docker Compose Configuration for Laravel Development
DESCRIPTION: Defines a multi-service Docker environment for Laravel development, including web (Nginx), PHP-FPM, workspace, PostgreSQL, and Redis. It configures networking, volumes, and dependencies between services for a complete development setup.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/development-setup.md#_snippet_2

LANGUAGE: yaml
CODE:
```
services:
  web:
    image: nginx:latest # Using the default Nginx image with custom configuration.
    volumes:
      # Mount the application code for live updates
      - ./:/var/www
      # Mount the Nginx configuration file
      - ./docker/development/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      # Map port 80 inside the container to the port specified by 'NGINX_PORT' on the host machine
      - "80:80"
    environment:
      - NGINX_HOST=localhost
    networks:
      - laravel-development
    depends_on:
      php-fpm:
        condition: service_started # Wait for php-fpm to start

  php-fpm:
    # For the php-fpm service, we will use our common PHP-FPM Dockerfile with the development target
    build:
      context: .
      dockerfile: ./docker/common/php-fpm/Dockerfile
      target: development
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
        XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}
        XDEBUG_MODE: develop,coverage,debug,profile
        XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}
        XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}
        XDEBUG_LOG: /dev/stdout
        XDEBUG_LOG_LEVEL: 0
    env_file:
      # Load the environment variables from the Laravel application
      - .env
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      # Mount the application code for live updates
      - ./:/var/www
    networks:
      - laravel-development
    depends_on:
      postgres:
        condition: service_started # Wait for postgres to start

  workspace:
    # For the workspace service, we will also create a custom image to install and setup all the necessary stuff.
    build:
      context: .
      dockerfile: ./docker/development/workspace/Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
        XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}
        XDEBUG_MODE: develop,coverage,debug,profile
        XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}
        XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}
        XDEBUG_LOG: /dev/stdout
        XDEBUG_LOG_LEVEL: 0
    tty: true # Enables an interactive terminal
    stdin_open: true # Keeps standard input open for 'docker exec'
    env_file:
      - .env
    volumes:
      - ./:/var/www
    networks:
      - laravel-development

  postgres:
    image: postgres:16
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=laravel
      - POSTGRES_PASSWORD=secret
    volumes:
      - postgres-data-development:/var/lib/postgresql/data
    networks:
      - laravel-development

  redis:
    image: redis:alpine
    networks:
      - laravel-development

networks:
  laravel-development:

volumes:
  postgres-data-development:
```

----------------------------------------

TITLE: Creating a User-Defined Overlay Network
DESCRIPTION: Creates a user-defined overlay network named `my-overlay`. This network will be used for service communication.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#_snippet_10

LANGUAGE: Docker CLI
CODE:
```
$ docker network create -d overlay my-overlay
```

----------------------------------------

TITLE: Defining volume mapping for MySQL in Docker Compose
DESCRIPTION: This YAML snippet extends the previous example by defining a volume mapping for the MySQL service. It maps the `todo-mysql-data` volume to the `/var/lib/mysql` directory inside the container, ensuring data persistence. The volume is also defined in the top-level `volumes` section.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/08_using_compose.md#_snippet_8

LANGUAGE: yaml
CODE:
```
services:
  app:
    # The app service definition
  mysql:
    image: mysql:8.0
    volumes:
      - todo-mysql-data:/var/lib/mysql

volumes:
  todo-mysql-data:
```

----------------------------------------

TITLE: Adding Compose Watch configuration to compose.yaml
DESCRIPTION: This snippet adds a `develop` section with `watch` instructions to the `server` service in the `compose.yaml` file. This configures Compose Watch to monitor changes in the `./src` directory and automatically sync them to the `/var/www/html` directory in the running container.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#_snippet_6

LANGUAGE: yaml
CODE:
```
services:
  server:
    build:
      context: .
    ports:
      - 9000:80
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password
    environment:
      - PASSWORD_FILE_PATH=/run/secrets/db-password
      - DB_HOST=db
      - DB_NAME=example
      - DB_USER=root
    develop:
      watch:
        - action: sync
          path: ./src
          target: /var/www/html
  db:
    image: mariadb
    restart: always
    user: root
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/mysql
    environment:
      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/db-password
      - MARIADB_DATABASE=example
    expose:
      - 3306
    healthcheck:
      test:
        [
          "CMD",
          "/usr/local/bin/healthcheck.sh",
          "--su-mysql",
          "--connect",
          "--innodb_initialized",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
  phpmyadmin:
    image: phpmyadmin
    ports:
      - 8080:80
    depends_on:
      - db
    environment:
      - PMA_HOST=db
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt
```

----------------------------------------

TITLE: Full Workflow Configuration for Building and Pushing Docker Image
DESCRIPTION: This is a complete GitHub Actions workflow for building and pushing Docker images. It includes steps for checking out the code, extracting Docker image metadata, logging into Docker Hub, setting up Docker Buildx, and building and pushing the image with provenance and SBOM attestations.  It is triggered on push to the main branch and on pull requests.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/gha.md#_snippet_6

LANGUAGE: yaml
CODE:
```
name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_USERNAME }}/my-image

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          provenance: true
          sbom: true
```

----------------------------------------

TITLE: Listing Kubernetes Deployments
DESCRIPTION: This command retrieves a list of all deployments currently running in the Kubernetes cluster. It shows the name, readiness, up-to-date status, availability, and age of each deployment.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/deploy.md#_snippet_4

LANGUAGE: Bash
CODE:
```
kubectl get deployments
```

----------------------------------------

TITLE: Building a Docker Image
DESCRIPTION: Builds a Docker image from the Dockerfile in the current directory, tagging it with a specified username and image name. Replace `DOCKER_USERNAME` with your Docker Hub username.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/introduction/build-and-push-first-image.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker build -t <DOCKER_USERNAME>/getting-started-todo-app .
```

----------------------------------------

TITLE: Building a Spring Boot Application with Dockerfile
DESCRIPTION: This Dockerfile builds a Spring Boot application using multi-stage builds. It uses a Maven build stage, an extraction stage to separate layers, and a final stage with minimal runtime dependencies. It copies dependencies, spring-boot-loader, snapshot-dependencies and application files.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#_snippet_4

LANGUAGE: Dockerfile
CODE:
```
FROM deps as package

WORKDIR /build

COPY ./src src/
RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/root/.m2 \
    ./mvnw package -DskipTests && \
    mv target/$(./mvnw help:evaluate -Dexpression=project.artifactId -q -DforceStdout)-$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout).jar target/app.jar

################################################################################

# Create a stage for extracting the application into separate layers.
# Take advantage of Spring Boot's layer tools and Docker's caching by extracting
# the packaged application into separate layers that can be copied into the final stage.
# See Spring's docs for reference:
# https://docs.spring.io/spring-boot/docs/current/reference/html/container-images.html
FROM package as extract

WORKDIR /build

RUN java -Djarmode=layertools -jar target/app.jar extract --destination target/extracted

################################################################################

# Create a new stage for running the application that contains the minimal
# runtime dependencies for the application. This often uses a different base
# image from the install or build stage where the necessary files are copied
# from the install stage.
#
# The example below uses eclipse-turmin's JRE image as the foundation for running the app.
# By specifying the "17-jre-jammy" tag, it will also use whatever happens to be the
# most recent version of that tag when you build your Dockerfile.
# If reproducibility is important, consider using a specific digest SHA, like
# eclipse-temurin@sha256:99cede493dfd88720b610eb8077c8688d3cca50003d76d1d539b0efc8cca72b4.
FROM eclipse-temurin:21-jre-jammy AS final

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/go/dockerfile-user-best-practices/
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser
USER appuser

# Copy the executable from the "package" stage.
COPY --from=extract build/target/extracted/dependencies/ ./
COPY --from=extract build/target/extracted/spring-boot-loader/ ./
COPY --from=extract build/target/extracted/snapshot-dependencies/ ./
COPY --from=extract build/target/extracted/application/ ./

EXPOSE 8080

ENTRYPOINT [ "java", "org.springframework.boot.loader.launch.JarLauncher" ]
```

----------------------------------------

TITLE: Running Docker Compose in Detached Mode
DESCRIPTION: This command builds and starts the services defined in the docker-compose.yaml file in detached mode. The `-d` flag runs the containers in the background.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/containerize.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker compose up --build -d
```

----------------------------------------

TITLE: Define Service Dependencies and Healthcheck in Docker Compose
DESCRIPTION: This Docker Compose configuration defines dependencies between services (`web`, `db`, `redis`) and uses a healthcheck to ensure the `db` service is ready before the `web` service starts. The `depends_on` attribute specifies the dependencies, and the `condition: service_healthy` ensures that Compose waits for the `db` service to pass its healthcheck before starting the `web` service. `restart: true` ensures that if `db` is restarted, `web` is also restarted.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/startup-order.md#_snippet_0

LANGUAGE: yaml
CODE:
```
services:
  web:
    build: .
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_started
  redis:
    image: redis
  db:
    image: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
```

----------------------------------------

TITLE: Including a Compose file
DESCRIPTION: This example demonstrates how to include another Compose file using the `include` directive. `serviceB` is defined in `my-compose-include.yaml` and is used directly in the main Compose file as if it were declared there.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/include.md#_snippet_0

LANGUAGE: yaml
CODE:
```
include:
  - my-compose-include.yaml  #with serviceB declared
services:
  serviceA:
    build: .
    depends_on:
      - serviceB #use serviceB directly as if it was declared in this Compose file
```

----------------------------------------

TITLE: Run a Docker container in detached mode with port mapping
DESCRIPTION: This command runs a Docker container in detached mode, mapping port 3000 on the host (localhost) to port 3000 on the container. The container is based on the 'getting-started' image. The -d flag runs the container in the background, and the -p flag publishes the container's port to the host.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/02_our_app.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker run -d -p 127.0.0.1:3000:3000 getting-started
```

----------------------------------------

TITLE: Docker TLS Configuration
DESCRIPTION: Configures the Docker daemon to use TLS, specifying the server certificate, key, and enabling client authentication. It listens on all interfaces on port 2376.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#_snippet_17

LANGUAGE: console
CODE:
```
--tlscert=server-cert.pem \
    --tlskey=server-key.pem \
    -H=0.0.0.0:2376
```

----------------------------------------

TITLE: Consuming secrets in Dockerfile using mount
DESCRIPTION: This Dockerfile instruction demonstrates how to consume a secret within a `RUN` command using the `--mount=type=secret` flag. It mounts the secret with the ID `aws` and sets the `AWS_SHARED_CREDENTIALS_FILE` environment variable to `/run/secrets/aws`, which is where the secret file is located inside the container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
RUN --mount=type=secret,id=aws \
    AWS_SHARED_CREDENTIALS_FILE=/run/secrets/aws \
    aws s3 cp ...
```

----------------------------------------

TITLE: Update Vite Configuration for Docker Compatibility
DESCRIPTION: Updates the `vite.config.ts` file to ensure the Vite development server works reliably inside Docker. It sets the `host` option to `true` to allow access from outside the container, sets a consistent `port` to 5173, and enables `strictPort` to ensure Vite fails if the port is unavailable.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/develop.md#_snippet_2

LANGUAGE: typescript
CODE:
```
/// <reference types="vitest" />

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  base: "/",
  plugins: [react()],
  server: {
    host: true,
    port: 5173,
    strictPort: true,
  },
});
```

----------------------------------------

TITLE: Dockerfile using a helper script as ENTRYPOINT
DESCRIPTION: This Dockerfile copies a helper script into the container and sets it as the ENTRYPOINT. The CMD instruction specifies the default command to run (postgres).
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_29

LANGUAGE: dockerfile
CODE:
```
COPY ./docker-entrypoint.sh /
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["postgres"]
```

----------------------------------------

TITLE: Dockerfile for Node.js Application
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for a Node.js application. It uses a Node.js Alpine base image, sets the working directory, installs dependencies, copies source files, exposes port 3000, and defines the command to start the application.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/containerize.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/go/dockerfile-reference/

# Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7

ARG NODE_VERSION=18.0.0

FROM node:${NODE_VERSION}-alpine

# Use production node environment by default.
ENV NODE_ENV production


WORKDIR /usr/src/app

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.npm to speed up subsequent builds.
# Leverage a bind mounts to package.json and package-lock.json to avoid having to copy them into
# into this layer.
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev

# Run the application as a non-root user.
USER node

# Copy the rest of the source files into the image.
COPY . .

# Expose the port that the application listens on.
EXPOSE 3000

# Run the application.
CMD node src/index.js
```

----------------------------------------

TITLE: GitHub Actions CI Workflow with Docker Bake
DESCRIPTION: This YAML configuration defines a GitHub Actions workflow for building Docker images using Docker Bake. It includes jobs for preparing the build matrix, building images for multiple platforms, and merging manifests.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/multi-platform.md#_snippet_8

LANGUAGE: yaml
CODE:
```
name: ci

on:
  push:

env:
  REGISTRY_IMAGE: user/app

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.platforms.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create matrix
        id: platforms
        run: |
          echo "matrix=$(docker buildx bake image-all --print | jq -cr '.target."image-all".platforms')" >>${GITHUB_OUTPUT}

      - name: Show matrix
        run: |
          echo ${{ steps.platforms.outputs.matrix }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Rename meta bake definition file
        run: |
          mv "${{ steps.meta.outputs.bake-file }}" "${{ runner.temp }}/bake-meta.json"

      - name: Upload meta bake definition
        uses: actions/upload-artifact@v4
        with:
          name: bake-meta
          path: ${{ runner.temp }}/bake-meta.json
          if-no-files-found: error
          retention-days: 1

  build:
    runs-on: ubuntu-latest
    needs:
      - prepare
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Download meta bake definition
        uses: actions/download-artifact@v4
        with:
          name: bake-meta
          path: ${{ runner.temp }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        id: bake
        uses: docker/bake-action@v6
        with:
          files: |
            ./docker-bake.hcl
            cwd://${{ runner.temp }}/bake-meta.json
          targets: image
          set: |
            *.tags=${{ env.REGISTRY_IMAGE }}
            *.platform=${{ matrix.platform }}
            *.output=type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ fromJSON(steps.bake.outputs.metadata).image['containerimage.digest'] }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download meta bake definition
        uses: actions/download-artifact@v4
        with:
          name: bake-meta
          path: ${{ runner.temp }}

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.target."docker-metadata-action".tags | map(select(startswith("${{ env.REGISTRY_IMAGE }}")) | "-t " + .) | join(" ")' ${{ runner.temp }}/bake-meta.json) \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |

```

----------------------------------------

TITLE: Complete apt-get RUN Instruction Example
DESCRIPTION: This example demonstrates a well-formed RUN instruction that incorporates all the recommended apt-get practices, including updating the package list, installing specific versions, and cleaning up the apt cache to reduce image size. It installs a variety of tools and libraries.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_15

LANGUAGE: dockerfile
CODE:
```
RUN apt-get update && apt-get install -y --no-install-recommends \
    aufs-tools \
    automake \
    build-essential \
    curl \
    dpkg-sig \
    libcap-dev \
    libsqlite3-dev \
    mercurial \
    reprepro \
    ruby1.9.1 \
    ruby1.9.1-dev \
    s3cmd=1.1.* \
    && rm -rf /var/lib/apt/lists/*
```

----------------------------------------

TITLE: Building the image for multiple platforms
DESCRIPTION: This command builds the Docker image for both `linux/amd64` and `linux/arm64` platforms, enabling cross-platform compatibility.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#_snippet_16

LANGUAGE: console
CODE:
```
$ docker build --platform linux/amd64,linux/arm64 -t go-server .
```

----------------------------------------

TITLE: Dockerfile with Go Test Stage
DESCRIPTION: This Dockerfile defines a multi-stage build process. It compiles a Go application, runs unit tests, and then packages the compiled binary into a minimal base image. The `run-test-stage` executes the `go test` command.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-tests.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1

# Build the application from source
FROM golang:1.19 AS build-stage

WORKDIR /app

COPY go.mod go.sum ./
RUN go mod download

COPY *.go ./

RUN CGO_ENABLED=0 GOOS=linux go build -o /docker-gs-ping

# Run the tests in the container
FROM build-stage AS run-test-stage
RUN go test -v ./...

# Deploy the application binary into a lean image
FROM gcr.io/distroless/base-debian11 AS build-release-stage

WORKDIR /

COPY --from=build-stage /docker-gs-ping /docker-gs-ping

EXPOSE 8080

USER nonroot:nonroot

ENTRYPOINT ["/docker-gs-ping"]
```

----------------------------------------

TITLE: Stopping the application
DESCRIPTION: This snippet shows how to stop the application using the `docker compose down` command. This command stops and removes the containers, networks, and volumes created by `docker compose up`.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/containerize.md#_snippet_7

LANGUAGE: console
CODE:
```
$ docker compose down
```

----------------------------------------

TITLE: Building multi-platform images with Docker Buildx
DESCRIPTION: This command uses Docker Buildx to build a multi-platform image for both linux/amd64 and linux/arm64 architectures. The `--platform` flag specifies the target platforms.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker buildx build --platform linux/amd64,linux/arm64 .
```

----------------------------------------

TITLE: Creating a RESTful Web Service with Spring Boot
DESCRIPTION: This code snippet defines a simple Spring Boot application that exposes a REST endpoint at the root path ('/') which returns the string 'Hello World'. It uses annotations like `@RestController` and `@RequestMapping` to configure the endpoint.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/multi-stage-builds.md#_snippet_1

LANGUAGE: java
CODE:
```
package com.example.spring_boot_docker;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


@RestController
@SpringBootApplication
public class SpringBootDockerApplication {

    @RequestMapping("/")
        public String home() {
        return "Hello World";
    }

	public static void main(String[] args) {
		SpringApplication.run(SpringBootDockerApplication.class, args);
	}

}
```

----------------------------------------

TITLE: Defining a Shared Volume for Services in Docker Compose
DESCRIPTION: This example demonstrates how to define a shared volume named `db-data` and mount it to two services, `backend` and `backup`, at different container paths. The `backend` service uses the volume for its data directory, while the `backup` service uses it for storing backup data. Running `docker compose up` creates the volume if it doesn't exist.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/volumes.md#_snippet_0

LANGUAGE: YAML
CODE:
```
services:
  backend:
    image: example/database
    volumes:
      - db-data:/etc/data

  backup:
    image: backup-service
    volumes:
      - db-data:/var/lib/backup/data

volumes:
  db-data:
```

----------------------------------------

TITLE: Dockerfile for Java Application
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for a Java application. It uses multi-stage builds to manage dependencies and create an optimized final image. The first stage downloads dependencies using Maven, and the second stage builds the application.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/go/dockerfile-reference/

# Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7

################################################################################

# Create a stage for resolving and downloading dependencies.
FROM eclipse-temurin:21-jdk-jammy as deps

WORKDIR /build

# Copy the mvnw wrapper with executable permissions.
COPY --chmod=0755 mvnw mvnw
COPY .mvn/ .mvn/

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.m2 so that subsequent builds don't have to
# re-download packages.
RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/root/.m2 ./mvnw dependency:go-offline -DskipTests

################################################################################

# Create a stage for building the application based on the stage with downloaded dependencies.
# This Dockerfile is optimized for Java applications that output an uber jar, which includes
# all the dependencies needed to run your app inside a JVM. If your app doesn't output an uber
# jar and instead relies on an application server like Apache Tomcat, you'll need to update this
# stage with the correct filename of your package and update the base image of the "final" stage
```

----------------------------------------

TITLE: Configuring Ports with Long Syntax in Docker Compose
DESCRIPTION: This snippet demonstrates the long syntax for configuring port mappings in a Docker Compose file, including specifying the target port, published port, host IP, protocol, application protocol, mode, and a human-readable name for the port.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_82

LANGUAGE: YAML
CODE:
```
ports:
  - name: web
    target: 80
    host_ip: 127.0.0.1
    published: "8080"
    protocol: tcp
    app_protocol: http
    mode: host

  - name: web-secured
    target: 443
    host_ip: 127.0.0.1
    published: "8083-9000"
    protocol: tcp
    app_protocol: https
    mode: host
```

----------------------------------------

TITLE: Running Docker Compose
DESCRIPTION: This command demonstrates how to start the Docker Compose service defined in the YAML file. It shows the output of the nvidia-smi command running inside the container, displaying GPU information.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/gpu-support.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker compose up
Creating network "gpu_default" with the default driver
Creating gpu_test_1 ... done
Attaching to gpu_test_1    
test_1  | +-----------------------------------------------------------------------------+
test_1  | | NVIDIA-SMI 450.80.02    Driver Version: 450.80.02    CUDA Version: 11.1     |
test_1  | |-------------------------------+----------------------+----------------------+
test_1  | | GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
test_1  | | Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
test_1  | |                               |                      |               MIG M. |
test_1  | |===============================+======================+======================|
test_1  | |   0  Tesla T4            On   | 00000000:00:1E.0 Off |                    0 |
test_1  | | N/A   23C    P8     9W /  70W |      0MiB / 15109MiB |      0%      Default |
test_1  | |                               |                      |                  N/A |
test_1  | +-------------------------------+----------------------+----------------------+
test_1  |                                                                                
test_1  | +-----------------------------------------------------------------------------+
test_1  | | Processes:                                                                  |
test_1  | |  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
test_1  | |        ID   ID                                                   Usage      |
test_1  | |=============================================================================|
test_1  | |  No running processes found                                                 |
test_1  | +-----------------------------------------------------------------------------+
gpu_test_1 exited with code 0
```

----------------------------------------

TITLE: Installing a Specific Docker Engine Version using DNF
DESCRIPTION: This command installs a specific version of Docker Engine, Docker CLI, containerd, Docker Buildx plugin, and Docker Compose plugin using the DNF package manager. Replace `<VERSION_STRING>` with the desired version string.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/centos.md#_snippet_4

LANGUAGE: console
CODE:
```
$ sudo dnf install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io docker-buildx-plugin docker-compose-plugin
```

----------------------------------------

TITLE: Define Base Image in Dockerfile
DESCRIPTION: This instruction sets the base image for the Docker container to a specific version of Eclipse Temurin JDK. It specifies the foundation upon which the Spring Boot application will be built and run.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/multi-stage-builds.md#_snippet_2

LANGUAGE: Dockerfile
CODE:
```
FROM eclipse-temurin:21.0.2_13-jdk-jammy
```

----------------------------------------

TITLE: Running the hello-world image
DESCRIPTION: Downloads and runs the hello-world image in a container to verify the Docker installation. This command confirms that Docker Engine is installed and configured correctly.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/ubuntu.md#_snippet_5

LANGUAGE: bash
CODE:
```
sudo docker run hello-world
```

----------------------------------------

TITLE: Jenkins Pipeline for Multi-Arch Docker Build
DESCRIPTION: This Jenkins pipeline builds a multi-architecture Docker image using Docker Buildx. It sets up the environment, downloads and configures Buildx, logs into Docker, creates a Buildx builder, and then builds and pushes the image for both linux/amd64 and linux/arm64 platforms. It requires the 'docker-personal-access-token' and 'docker-username' credentials to be configured in Jenkins.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/ci.md#_snippet_7

LANGUAGE: groovy
CODE:
```
pipeline {
  agent any

  environment {
    ARCH = 'amd64'
    DOCKER_PAT = credentials('docker-personal-access-token')
    DOCKER_USER = credentials('docker-username')
    DOCKER_ORG = '<ORG>'
    IMAGE_NAME = '<IMAGE>'
  }

  stages {
    stage('Build') {
      environment {
        BUILDX_URL = sh (returnStdout: true, script: 'curl -s https://raw.githubusercontent.com/docker/actions-toolkit/main/.github/buildx-lab-releases.json | jq -r ".latest.assets[] | select(endswith(\"linux-$ARCH\"))"').trim()
      }
      steps {
        sh 'mkdir -vp ~/.docker/cli-plugins/'
        sh 'curl --silent -L --output ~/.docker/cli-plugins/docker-buildx $BUILDX_URL'
        sh 'chmod a+x ~/.docker/cli-plugins/docker-buildx'
        sh 'echo "$DOCKER_PAT" | docker login --username $DOCKER_USER --password-stdin'
        sh 'docker buildx create --use --driver cloud "$DOCKER_ORG/default"'
        // Cache-only build
        sh 'docker buildx build --platform linux/amd64,linux/arm64 --tag "$IMAGE_NAME" --output type=cacheonly .'
        // Build and push a multi-platform image
        sh 'docker buildx build --platform linux/amd64,linux/arm64 --push --tag "$IMAGE_NAME" .'
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Nginx Service with Secrets and Target Option
DESCRIPTION: This command creates a Docker service named 'nginx' that uses the 'nginx:latest' image. It mounts the 'site.key' and 'site.crt' secrets using the short-hand syntax, and the 'site.conf' secret using the `target` option to specify the mount point. It publishes port 3000 to port 443 and starts Nginx.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_31

LANGUAGE: bash
CODE:
```
docker service create \
     --name nginx \
     --secret site.key \
     --secret site.crt \
     --secret source=site.conf,target=/etc/nginx/conf.d/site.conf \
     --publish published=3000,target=443 \
     nginx:latest \
     sh -c "exec nginx -g 'daemon off;'"
```

----------------------------------------

TITLE: Running Docker Container with Mount Volume
DESCRIPTION: This command runs a Docker container named `devtest` with a volume mount using the `--mount` flag. It specifies the source volume (`myvol2`) and the target mount path (`/app`) inside the container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker run -d \
  --name devtest \
  --mount source=myvol2,target=/app \
  nginx:latest
```

----------------------------------------

TITLE: Building a Docker Image for a React.js Application
DESCRIPTION: This command builds a Docker image for a React.js application using the Dockerfile in the current directory. It packages the application and its dependencies into a Docker image and tags the image as docker-reactjs-sample for later reference.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/containerize.md#_snippet_8

LANGUAGE: Shell
CODE:
```
$ docker build --tag docker-reactjs-sample .
```

----------------------------------------

TITLE: List Docker secrets
DESCRIPTION: Lists the secrets managed by Docker using the `docker secret ls` command. This command displays the ID, name, creation date, and update date of each secret.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_39

LANGUAGE: bash
CODE:
```
docker secret ls
```

----------------------------------------

TITLE: Initializing Docker Assets with Docker Init
DESCRIPTION: This command initializes Docker assets for the Python application using the Docker Init feature. It prompts the user for information about the application, such as the platform, Python version, port, and run command.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/containerize.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker init
Welcome to the Docker Init CLI!

This utility will walk you through creating the following files with sensible defaults for your project:
  - .dockerignore
  - Dockerfile
  - compose.yaml
  - README.Docker.md

Let's get started!

? What application platform does your project use? Python
? What version of Python do you want to use? 3.11.4
? What port do you want your app to listen on? 8000
? What is the command to run your app? python3 -m uvicorn app:app --host=0.0.0.0 --port=8000
```

----------------------------------------

TITLE: Add Annotations using build-push-action in GitHub Actions
DESCRIPTION: This workflow demonstrates how to add OCI-compliant annotations to Docker images using the docker/metadata-action and docker/build-push-action. It extracts metadata, builds the image, and pushes it to a registry with the specified annotations.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/annotations.md#_snippet_0

LANGUAGE: yaml
CODE:
```
name: ci

on:
  push:

env:
  IMAGE_NAME: user/app

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          push: true
```

----------------------------------------

TITLE: GitHub Actions Workflow Configuration
DESCRIPTION: This YAML configuration defines a GitHub Actions workflow that automatically builds and pushes a Docker image to Docker Hub whenever changes are pushed to the `main` branch. It uses Docker's login, setup-buildx, and build-push actions.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/configure-ci-cd.md#_snippet_2

LANGUAGE: YAML
CODE:
```
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
```

----------------------------------------

TITLE: Viewing Docker Image History
DESCRIPTION: This command shows the history of a Docker image, displaying the layers that make up the image and how each layer was created. It requires the image name as an argument.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#_snippet_8

LANGUAGE: shell
CODE:
```
$ docker image history mobywhale/concepts-build-image-demo
```

----------------------------------------

TITLE: Deploy application to Kubernetes
DESCRIPTION: This command deploys the application to Kubernetes using the configuration file `docker-rust-kubernetes.yaml`. It creates the Kubernetes objects defined in the file.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/deploy.md#_snippet_1

LANGUAGE: console
CODE:
```
$ kubectl apply -f docker-rust-kubernetes.yaml
```

----------------------------------------

TITLE: Create a Docker service
DESCRIPTION: This command creates a Docker service named 'helloworld' with one replica, running an Alpine Linux container that pings docker.com.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/deploy-service.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker service create --replicas 1 --name helloworld alpine ping docker.com
```

----------------------------------------

TITLE: Creating a Docker Volume
DESCRIPTION: This command creates a Docker volume named `log-data`. Volumes are used to persist data generated by containers beyond their lifecycle.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ docker volume create log-data
```

----------------------------------------

TITLE: Setting up Docker's apt repository
DESCRIPTION: Adds Docker's official GPG key and the Docker repository to the system's apt sources. This allows the system to install and update Docker packages from the Docker repository.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/ubuntu.md#_snippet_1

LANGUAGE: bash
CODE:
```
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL {{% param "download-url-base" %}}/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] {{% param "download-url-base" %}} \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
```

----------------------------------------

TITLE: GitHub Actions Workflow: Build and Push Docker Image
DESCRIPTION: This workflow configuration runs on pushes to the main branch and on pull requests. It ensures that the image builds correctly for a pull request before it's merged.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/gha.md#_snippet_1

LANGUAGE: YAML
CODE:
```
name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
```

----------------------------------------

TITLE: GitHub Actions workflow configuration
DESCRIPTION: This YAML file defines a GitHub Actions workflow that automatically builds, tests, and pushes a Docker image to Docker Hub on every push to the `main` branch. It uses Docker Buildx to build multi-platform images and requires `DOCKER_USERNAME` and `DOCKERHUB_TOKEN` secrets to be configured in the repository settings.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/configure-ci-cd.md#_snippet_2

LANGUAGE: yaml
CODE:
```
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
```

----------------------------------------

TITLE: Building and Running Application with Docker Compose
DESCRIPTION: This command builds and runs the application using Docker Compose. It downloads dependencies and starts the services defined in the `docker-compose.yml` file. The application can be accessed at http://localhost:8000.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-pdf-bot/containerize.md#_snippet_2

LANGUAGE: shell
CODE:
```
docker compose up --build
```

----------------------------------------

TITLE: Build and Push Multi-Platform Image with GitHub Actions
DESCRIPTION: This workflow builds and pushes a multi-platform Docker image to a registry using GitHub Actions. It sets up QEMU for emulation, Docker Buildx for building, and logs into Docker Hub for pushing the image. The platforms are specified as linux/amd64 and linux/arm64.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/multi-platform.md#_snippet_0

LANGUAGE: yaml
CODE:
```
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: user/app:latest
```

----------------------------------------

TITLE: Running the hello-world image
DESCRIPTION: This command downloads and runs the hello-world image in a container to verify the Docker installation.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/raspberry-pi-os.md#_snippet_5

LANGUAGE: console
CODE:
```
$ sudo docker run hello-world
```

----------------------------------------

TITLE: Defining an Inline Dockerfile in Docker Compose
DESCRIPTION: This snippet demonstrates how to define the Dockerfile content directly within the Docker Compose file using the `dockerfile_inline` option. YAML multi-line string syntax is used to define the Dockerfile content.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#_snippet_14

LANGUAGE: YAML
CODE:
```
build:
  context: .
  dockerfile_inline: |
    FROM baseimage
    RUN some command
```

----------------------------------------

TITLE: Pushing a Docker Image to Docker Hub
DESCRIPTION: This command pushes a Docker image to Docker Hub. Replace <YOUR-USERNAME> with your Docker ID. The image must be tagged correctly for the push to succeed. You must be signed in to Docker Hub through Docker Desktop or the command line, and you must also name your images correctly, as per the above steps.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/quickstart.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker push <YOUR-USERNAME>/nginx-custom
```

----------------------------------------

TITLE: Using Relative Paths with WORKDIR in Dockerfile
DESCRIPTION: This Dockerfile snippet demonstrates how the WORKDIR instruction can be used multiple times with relative paths. Each subsequent WORKDIR instruction is relative to the previous one, resulting in a nested directory structure.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_117

LANGUAGE: dockerfile
CODE:
```
WORKDIR /a
WORKDIR b
WORKDIR c
RUN pwd
```

----------------------------------------

TITLE: Starting Docker Daemon with TLS Verification
DESCRIPTION: This command starts the Docker daemon with TLS verification enabled, requiring clients to provide a certificate trusted by the specified CA (ca.pem). It uses the --tlsverify and --tlscacert options.  The command assumes that the 'dockerd' executable is in the system's PATH.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#_snippet_16

LANGUAGE: console
CODE:
```
$ dockerd \
    --tlsverify \
    --tlscacert=ca.pem
```

----------------------------------------

TITLE: Running a Containerized React.js Application with Docker Compose
DESCRIPTION: This command uses Docker Compose to build and run the React.js application defined in the compose.yaml file. It starts the application in a container and makes it accessible at http://localhost:8080.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/containerize.md#_snippet_10

LANGUAGE: Shell
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Defining a Secret from a File in Docker Compose
DESCRIPTION: This example shows how to define a secret named `server-certificate` in a Docker Compose file. The secret's value is read from the `server.cert` file. When the application is deployed, the secret is created as `<project_name>_server-certificate`.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/secrets.md#_snippet_0

LANGUAGE: YAML
CODE:
```
secrets:
  server-certificate:
    file: ./server.cert
```

----------------------------------------

TITLE: Creating a .dockerignore file
DESCRIPTION: This snippet defines a `.dockerignore` file, which specifies files and directories that should be excluded from the Docker image build context. This helps to reduce the image size and improve build performance by excluding unnecessary files such as build artifacts, temporary files, and version control directories.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/containerize.md#_snippet_4

LANGUAGE: text
CODE:
```
# Include any files or directories that you don't want to be copied to your
# container here (e.g., local build artifacts, temporary files, etc.).
#
# For more help, visit the .dockerignore file reference guide at
# https://docs.docker.com/go/build-context-dockerignore/

**/.classpath
**/.dockerignore
**/.env
**/.git
**/.gitignore
**/.project
**/.settings
**/.toolstarget
**/.vs
**/.vscode
**/.next
**/.cache
**/*.*proj.user
**/*.dbmdl
**/*.jfm
**/charts
**/docker-compose*
**/compose.y*ml
**/Dockerfile*
**/node_modules
**/npm-debug.log
**/obj
**/secrets.dev.yaml
**/values.dev.yaml
**/build
**/dist
LICENSE
README.md
```

----------------------------------------

TITLE: Defining Service Dependencies with depends_on in Docker Compose
DESCRIPTION: This snippet demonstrates how to define service dependencies using the `depends_on` option in a Docker Compose file. It shows how to specify conditions for dependency satisfaction, such as `service_healthy` and `service_started`, and how to configure restart behavior.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_19

LANGUAGE: yml
CODE:
```
services:
  web:
    build: .
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_started
  redis:
    image: redis
  db:
    image: postgres
```

----------------------------------------

TITLE: Run Postgres Container on Custom Network
DESCRIPTION: This command runs a Postgres container, setting the password and connecting it to the 'mynetwork' Docker network. It maps port 5434 on the host to port 5432 on the container.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#_snippet_8

LANGUAGE: docker
CODE:
```
$ docker run -d -e POSTGRES_PASSWORD=secret -p 5434:5432 --network mynetwork postgres
```

----------------------------------------

TITLE: Sign in to Docker CLI with access token
DESCRIPTION: This command is used to sign in to your Docker account from the Docker CLI. Replace `<YOUR_USERNAME>` with your Docker ID. When prompted for a password, enter your personal access token instead of your actual password.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-developers/access-tokens.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker login --username <YOUR_USERNAME>
```

----------------------------------------

TITLE: Running a Docker Container
DESCRIPTION: This snippet shows how to run a Docker container using the `docker run` command. The `-p` option publishes the container's port 8000 to `http://localhost:8000` on the Docker host.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/dockerfile.md#_snippet_13

LANGUAGE: console
CODE:
```
$ docker run -p 127.0.0.1:8000:8000 test:latest
```

----------------------------------------

TITLE: ARG Usage Example in Dockerfile
DESCRIPTION: This example demonstrates how to define and use build arguments (ARG) for specifying versions of node and alpine. It shows how to set default values for the arguments and override them using the `--build-arg` flag during the build process. The build arguments are used to define the base image and its versions.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1

ARG NODE_VERSION="{{% param example_node_version %}}"
ARG ALPINE_VERSION="{{% param example_alpine_version %}}"

FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS base
WORKDIR /src

FROM base AS build
COPY package*.json ./
RUN npm ci
RUN npm run build

FROM base AS production
COPY package*.json ./
RUN npm ci --omit=dev && npm cache clean --force
COPY --from=build /src/dist/ .
CMD ["node", "app.js"]
```

----------------------------------------

TITLE: Running an Ubuntu Container with Docker
DESCRIPTION: This command runs an Ubuntu container, attaches interactively to the local command-line session, and executes `/bin/bash`. The `-i` flag keeps STDIN open even if not attached, and the `-t` flag allocates a pseudo-TTY.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-overview.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker run -i -t ubuntu /bin/bash
```

----------------------------------------

TITLE: Defining services in a Compose file using YAML
DESCRIPTION: This YAML file defines two services: web and redis. The web service builds from the Dockerfile in the current directory and maps port 8000 on the host to port 5000 on the container. The redis service uses the redis:alpine image from Docker Hub.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#_snippet_4

LANGUAGE: yaml
CODE:
```
services:
  web:
    build: .
    ports:
      - "8000:5000"
  redis:
    image: "redis:alpine"
```

----------------------------------------

TITLE: Volumes From with Mode
DESCRIPTION: You can now optionally pass a mode to `volumes_from`. This allows you to specify read-only or read-write access to the volumes.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#_snippet_19

LANGUAGE: YAML
CODE:
```
volumes_from: ["servicename:ro"]
```

----------------------------------------

TITLE: Pushing Tagged Docker Image to Docker Hub
DESCRIPTION: This command pushes a tagged Docker image to Docker Hub. Replace `YOUR-USER-NAME` with your Docker ID. Docker uses the `latest` tag if no tag is specified.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/04_sharing_app.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker push YOUR-USER-NAME/getting-started
```

----------------------------------------

TITLE: Run MySQL container with environment variables
DESCRIPTION: This command runs a MySQL container named 'my-mysql' in detached mode, sets the root password to 'my-secret-pw', and creates a database named 'mydb'. It uses the latest version of the MySQL image from Docker Hub.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker run --name my-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -e MYSQL_DATABASE=mydb -d mysql:latest
```

----------------------------------------

TITLE: Adding User to Docker Group
DESCRIPTION: Adds the current user to the 'docker' group. Requires a logout and login or running 'newgrp docker' for the changes to take effect.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/linux-postinstall.md#_snippet_1

LANGUAGE: bash
CODE:
```
$ sudo usermod -aG docker $USER
```

----------------------------------------

TITLE: Including infra.yaml in compose.yaml
DESCRIPTION: Shows how to include the `infra.yaml` file in the main `compose.yaml` file using the `include` directive. This allows for modularizing the Compose configuration and managing services in separate files.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#_snippet_11

LANGUAGE: yaml
CODE:
```
include:
  - infra.yaml
services:
  web:
    build: .
    ports:
      - "8000:5000"
    develop:
      watch:
        - action: sync
          path: .
          target: /code
```

----------------------------------------

TITLE: Bind Mount with -v Flag in Docker Run
DESCRIPTION: This command uses the `-v` flag with `docker run` to create a bind mount, mapping a directory on the host machine to a directory within the container. Any changes in the host directory will be reflected in the container directory and vice versa. The `-it` flags allocate a pseudo-TTY and keep STDIN open even if not attached.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/sharing-local-files.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker run -v /HOST/PATH:/CONTAINER/PATH -it nginx
```

----------------------------------------

TITLE: Passing secrets to Docker build using CLI
DESCRIPTION: This command demonstrates how to pass a secret to a Docker build using the `--secret` flag. It sets the secret ID to `aws` and specifies the source file as `$HOME/.aws/credentials`. The `src` parameter defines the path to the secret file on the host machine.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker build --secret id=aws,src=$HOME/.aws/credentials .
```

----------------------------------------

TITLE: Configuring Watch for Node.js App
DESCRIPTION: This example demonstrates how to configure the `watch` feature in Docker Compose for a Node.js application. It uses the `sync` action to synchronize changes in the `./web` directory to `/src/web` inside the container, ignoring the `node_modules/` directory. It also uses the `rebuild` action to rebuild the image and recreate the container when `package.json` is changed.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/file-watch.md#_snippet_1

LANGUAGE: yaml
CODE:
```
services:
  web:
    build: .
    command: npm start
    develop:
      watch:
        - action: sync
          path: ./web
          target: /src/web
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
```

----------------------------------------

TITLE: Building with Azure Blob Storage Cache
DESCRIPTION: This command demonstrates how to use Azure Blob Storage as a cache backend for Docker builds using Buildx. It specifies the cache image name and other parameters for both `--cache-to` (exporting the cache) and `--cache-from` (importing the cache).
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/azblob.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker buildx build --push -t <registry>/<image> \
  --cache-to type=azblob,name=<cache-image>[,parameters...] \
  --cache-from type=azblob,name=<cache-image>[,parameters...] .
```

----------------------------------------

TITLE: Cloning a Git Repository
DESCRIPTION: This command clones the specified Git repository to your local machine. It's the first step in obtaining the sample application for containerization.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-pdf-bot/containerize.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/craig-osterhout/docker-genai-sample
```

----------------------------------------

TITLE: Installing the latest Docker packages
DESCRIPTION: This snippet installs the latest version of Docker Engine, Docker CLI, containerd.io, docker-buildx-plugin and docker-compose-plugin using apt-get.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#_snippet_2

LANGUAGE: bash
CODE:
```
$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
```

----------------------------------------

TITLE: Publishing container port 80 to host port 8080
DESCRIPTION: This command publishes the container's port 80 to host port 8080. Any traffic sent to port 8080 on the host machine will be forwarded to port 80 within the container.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/publishing-ports.md#_snippet_1

LANGUAGE: Bash
CODE:
```
$ docker run -d -p 8080:80 nginx
```

----------------------------------------

TITLE: Healthcheck with CMD - Docker Compose YAML
DESCRIPTION: This snippet demonstrates how to define a healthcheck command using the `CMD` instruction within the `test` array. It executes a curl command to check the local web application's health.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_55

LANGUAGE: yaml
CODE:
```
test: ["CMD", "curl", "-f", "http://localhost"]
```

----------------------------------------

TITLE: Install Docker Engine from RPM Packages
DESCRIPTION: This command installs Docker Engine, CLI, containerd, Docker Buildx plugin, and Docker Compose plugin from local RPM packages.  The command assumes the packages are in the current directory. Requires root privileges.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/rhel.md#_snippet_8

LANGUAGE: bash
CODE:
```
sudo dnf install ./containerd.io-<version>.<arch>.rpm \
     ./docker-ce-<version>.<arch>.rpm \
     ./docker-ce-cli-<version>.<arch>.rpm \
     ./docker-buildx-plugin-<version>.<arch>.rpm \
     ./docker-compose-plugin-<version>.<arch>.rpm
```

----------------------------------------

TITLE: Docker Ignore File Example
DESCRIPTION: This .dockerignore file specifies patterns for files and directories to exclude from the Docker build context. Excluding unnecessary files can improve build performance and reduce the size of the Docker image.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#_snippet_7

LANGUAGE: Docker
CODE:
```
**/.classpath
**/.dockerignore
**/.env
**/.git
**/.gitignore
**/.project
**/.settings
**/.toolstarget
**/.vs
**/.vscode
**/.next
**/.cache
**/*.*proj.user
**/*.dbmdl
**/*.jfm
**/charts
**/docker-compose*
**/compose.y*ml
**/target
**/Dockerfile*
**/node_modules
**/npm-debug.log
**/obj
**/secrets.dev.yaml
**/values.dev.yaml
**/vendor
LICENSE
README.md
```

----------------------------------------

TITLE: Nginx Configuration for HTTPS with TLS Secrets
DESCRIPTION: This Nginx configuration file (site.conf) sets up a server to listen on port 443 (HTTPS), specifies the server name, and points to the TLS certificate and key files stored as Docker secrets. It also configures the root directory for serving static files.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_27

LANGUAGE: nginx
CODE:
```
server {
    listen                443 ssl;
    server_name           localhost;
    ssl_certificate       /run/secrets/site.crt;
    ssl_certificate_key   /run/secrets/site.key;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }
}
```

----------------------------------------

TITLE: Kafka Service Configuration in Docker Compose
DESCRIPTION: This YAML snippet configures the Kafka service within a Docker Compose file. It defines listeners for host and Docker connections, sets up KRaft mode, and configures inter-broker communication. The environment variables configure Kafka to listen on different ports and interfaces, while also setting up the necessary parameters for KRaft mode to function correctly in a single-node cluster.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#_snippet_11

LANGUAGE: yaml
CODE:
```
services:
  kafka:
    image: apache/kafka-native
    ports:
      - "9092:9092"
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
```

----------------------------------------

TITLE: Dockerfile for Ruby on Rails Application
DESCRIPTION: This Dockerfile is designed for production Ruby on Rails applications. It uses multi-stage builds to create smaller, more efficient images by separating build and runtime dependencies. It installs necessary packages, sets the production environment, installs gems, copies application code, precompiles bootsnap code, and precompiles assets.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/containerize.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
# check=error=true

# This Dockerfile is designed for production, not development.
# docker build -t app .
# docker run -d -p 80:80 -e RAILS_MASTER_KEY=<value from config/master.key> --name app app

# For a containerized dev environment, see Dev Containers: https://guides.rubyonrails.org/getting_started_with_devcontainer.html

# Make sure RUBY_VERSION matches the Ruby version in .ruby-version
ARG RUBY_VERSION=3.3.6
FROM docker.io/library/ruby:$RUBY_VERSION-slim AS base

# Rails app lives here
WORKDIR /rails

# Install base packages
# Replace libpq-dev with sqlite3 if using SQLite, or libmysqlclient-dev if using MySQL
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y curl libjemalloc2 libvips libpq-dev && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Set production environment
ENV RAILS_ENV="production" \
    BUNDLE_DEPLOYMENT="1" \
    BUNDLE_PATH="/usr/local/bundle" \
    BUNDLE_WITHOUT="development"

# Throw-away build stage to reduce size of final image
FROM base AS build

# Install packages needed to build gems
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential curl git pkg-config libyaml-dev && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Install JavaScript dependencies and Node.js for asset compilation
#
# Uncomment the following lines if you are using NodeJS need to compile assets
#
# ARG NODE_VERSION=18.12.0
# ARG YARN_VERSION=1.22.19
# ENV PATH=/usr/local/node/bin:$PATH
# RUN curl -sL https://github.com/nodenv/node-build/archive/master.tar.gz | tar xz -C /tmp/ && \
#     /tmp/node-build-master/bin/node-build "${NODE_VERSION}" /usr/local/node && \
#     npm install -g yarn@$YARN_VERSION && \
#     npm install -g mjml && \
#     rm -rf /tmp/node-build-master

# Install application gems
COPY Gemfile Gemfile.lock ./
RUN bundle install && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git && \
    bundle exec bootsnap precompile --gemfile

# Install node modules
#
# Uncomment the following lines if you are using NodeJS need to compile assets
#
# COPY package.json yarn.lock ./
# RUN --mount=type=cache,id=yarn,target=/rails/.cache/yarn YARN_CACHE_FOLDER=/rails/.cache/yarn \
#     yarn install --frozen-lockfile

# Copy application code
COPY . .

# Precompile bootsnap code for faster boot times
RUN bundle exec bootsnap precompile app/ lib/

# Precompiling assets for production without requiring secret RAILS_MASTER_KEY
RUN SECRET_KEY_BASE_DUMMY=1 ./bin/rails assets:precompile

# Final stage for app image
FROM base

# Copy built artifacts: gems, application
COPY --from=build "${BUNDLE_PATH}" "${BUNDLE_PATH}"
COPY --from=build /rails /rails
```

----------------------------------------

TITLE: Install Flask Dependency in Dockerfile
DESCRIPTION: This instruction uses pip to install the Flask web framework with a specific version constraint. It requires that pip is already installed in the build container, which is ensured by a previous RUN command.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/dockerfile.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
RUN pip install flask==3.0.*
```

----------------------------------------

TITLE: Testing Service with curl
DESCRIPTION: This command sends an HTTP request to the deployed service at `localhost` on port `30001` using `curl`. It verifies that the service is accessible and returns the expected response.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/deploy.md#_snippet_6

LANGUAGE: Bash
CODE:
```
curl http://localhost:30001/
```

----------------------------------------

TITLE: Excluding files using .dockerignore
DESCRIPTION: This snippet demonstrates how to exclude files with the `.md` extension from the Docker build context using a `.dockerignore` file. This prevents unnecessary files from being included in the image, reducing its size and build time.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_2

LANGUAGE: plaintext
CODE:
```
*.md
```

----------------------------------------

TITLE: Overriding Network Ports with Docker Run
DESCRIPTION: Maps a container port to a host port using the `-p` option in `docker run`. This allows running multiple instances of the same container without port conflicts.  `HOST_PORT` specifies the port on the host machine, and `CONTAINER_PORT` specifies the port inside the container.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ docker run -d -p HOST_PORT:CONTAINER_PORT postgres
```

----------------------------------------

TITLE: Creating a service using a private registry image
DESCRIPTION: This command creates a service named `my_service` using an image from a private registry (`registry.example.com/acme/my_image:latest`). The `--with-registry-auth` flag ensures that the login token is passed to the swarm nodes, allowing them to pull the image from the private registry.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker service  create \
  --with-registry-auth \
  --name my_service \
  registry.example.com/acme/my_image:latest
```

----------------------------------------

TITLE: Stage, Commit, and Push to GitHub
DESCRIPTION: Stages all changes, commits them with a message, and pushes the commit to the main branch of the remote GitHub repository. This sequence uploads the local code to GitHub.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/configure-ci-cd.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ git add -A
$ git commit -m "my commit"
$ git push -u origin main
```

----------------------------------------

TITLE: Deploy application to Kubernetes
DESCRIPTION: This command deploys the Ruby on Rails application to a Kubernetes cluster using the configuration defined in the `docker-ruby-on-rails-kubernetes.yaml` file. It creates the necessary Kubernetes objects, such as deployments and services, to run the application.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/deploy.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ kubectl apply -f docker-ruby-on-rails-kubernetes.yaml
```

----------------------------------------

TITLE: Creating a Dockerfile
DESCRIPTION: Defines the steps to build a Docker image for the Node.js application. It uses a base image, sets the working directory, copies the source code, installs dependencies, specifies the command to run, and exposes port 3000.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/02_our_app.md#_snippet_1

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1

FROM node:lts-alpine
WORKDIR /app
COPY . .
RUN yarn install --production
CMD ["node", "src/index.js"]
EXPOSE 3000
```

----------------------------------------

TITLE: Apache httpd: Configuring Output to STDOUT/STDERR in Dockerfile
DESCRIPTION: This snippet demonstrates how the official Apache httpd image configures the httpd application to write its output directly to `/proc/self/fd/1` (STDOUT) and its errors to `/proc/self/fd/2` (STDERR) within a Dockerfile. This ensures that the application's logs are captured by the container's standard output and standard error streams, allowing them to be viewed with `docker logs`.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/_index.md#_snippet_1

LANGUAGE: Dockerfile
CODE:
```
RUN sed -ri 's/^(ErrorLog|CustomLog)\s+\S+$/\1 \/proc\/self\/fd\/2/g' /usr/local/apache2/conf/httpd.conf

```

----------------------------------------

TITLE: Setting a Custom Volume Name in Docker Compose
DESCRIPTION: This example shows how to set a custom name for a volume using the `name` attribute. The custom name is used as is and is not scoped with the stack name. This allows you to reference volumes that contain special characters or to parameterize the volume name using environment variables.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/volumes.md#_snippet_6

LANGUAGE: YAML
CODE:
```
volumes:
  db-data:
    name: "my-app-data"
```

----------------------------------------

TITLE: Complete Dockerfile for Spring Boot App
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for a Spring Boot application. It includes setting the base image, working directory, copying project files, downloading dependencies, and setting the default command to run the application.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/multi-stage-builds.md#_snippet_8

LANGUAGE: Dockerfile
CODE:
```
FROM eclipse-temurin:21.0.2_13-jdk-jammy
WORKDIR /app
COPY .mvn/ .mvn
COPY mvnw pom.xml ./
RUN ./mvnw dependency:go-offline
COPY src ./src
CMD ["./mvnw", "spring-boot:run"]
```

----------------------------------------

TITLE: Running Docker Compose Up with Build (Shell)
DESCRIPTION: This command starts the application defined in the `compose.yaml` file, building any necessary images. It ensures that the application and its dependencies are running.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/develop.md#_snippet_3

LANGUAGE: Shell
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Overriding ARG Values During Docker Build
DESCRIPTION: This example shows how to override the default values of build arguments defined in a Dockerfile using the `--build-arg` flag with the `docker build` command. This allows for dynamic configuration of the build process without modifying the Dockerfile itself.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker build --build-arg NODE_VERSION=current .
```

----------------------------------------

TITLE: Configuring Compose Watch in compose.yml
DESCRIPTION: This YAML configuration adds Compose Watch to the `compose.yml` file, enabling automatic rebuilding of the service when code changes are detected. It specifies the path to watch and the action to perform (rebuild).
SOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/develop.md#_snippet_1

LANGUAGE: yaml
CODE:
```
services:
  ok-api:
    image: ok-api
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    develop:
      watch:
        - action: rebuild
          path: .
```

----------------------------------------

TITLE: Stopping a Docker Container
DESCRIPTION: This command stops a running Docker container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_12

LANGUAGE: console
CODE:
```
$ docker container stop devtest
```

----------------------------------------

TITLE: Base Image Selection in Dockerfile
DESCRIPTION: Specifies the base image for a Dockerfile using the FROM instruction. It uses a specific version of Alpine Linux identified by its SHA256 digest to ensure consistency and avoid unexpected changes from tag updates.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
FROM alpine:3.19@sha256:13b7e62e8df80264dbb747995705a986aa530415763a6c58f84a3ca8af9a5bcd
```

----------------------------------------

TITLE: Building Docker image from specific branch and subdirectory
DESCRIPTION: This command shows how to specify a branch and subdirectory within a Git repository to use as the build context. The #ref:dir syntax is used to target a specific location in the repository.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker build https://github.com/user/myrepo.git#container:docker
```

----------------------------------------

TITLE: Piping commands in RUN instruction
DESCRIPTION: This example demonstrates how to pipe the output of one command into another within a RUN instruction in a Dockerfile. It uses wget to download content and wc -l to count the number of lines, redirecting the output to a file.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_16

LANGUAGE: dockerfile
CODE:
```
RUN wget -O - https://some.site | wc -l > /number
```

----------------------------------------

TITLE: Using npm cache mount in Dockerfile
DESCRIPTION: This example demonstrates how to use a cache mount with npm to persist the npm cache across builds. The `npm install` command will use the specified cache directory, improving build times by reusing cached packages.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#_snippet_7

LANGUAGE: Dockerfile
CODE:
```
FROM node:latest
WORKDIR /app
RUN --mount=type=cache,target=/root/.npm npm install
```

----------------------------------------

TITLE: Kubernetes Deployment and Service Definition
DESCRIPTION: Defines a Kubernetes Deployment for a simple web application (bb-demo) and a NodePort service (bb-entrypoint) to expose the application. The deployment specifies a single replica of the pod, using the 'getting-started' image. The service routes traffic from port 30001 on the host to port 3000 inside the pod.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/kube-deploy.md#_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bb-demo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      bb: web
  template:
    metadata:
      labels:
        bb: web
    spec:
      containers:
        - name: bb-site
          image: getting-started
          imagePullPolicy: Never
---
apiVersion: v1
kind: Service
metadata:
  name: bb-entrypoint
  namespace: default
spec:
  type: NodePort
  selector:
    bb: web
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30001
```

----------------------------------------

TITLE: Dockerfile for Nginx (Production)
DESCRIPTION: This Dockerfile sets up an Nginx web server for a Laravel application in a production environment. It includes stages for building assets and configuring Nginx.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/production-setup.md#_snippet_6

LANGUAGE: dockerfile
CODE:
```
# docker/nginx/Dockerfile
# Stage 1: Build assets
FROM debian AS builder

# Install Node.js and build tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    nodejs \
    npm \
    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set working directory
WORKDIR /var/www

# Copy Laravel application code
COPY . /var/www

# Install Node.js dependencies and build assets
RUN npm install && npm run build

# Stage 2: Nginx production image
FROM nginx:alpine

# Copy custom Nginx configuration
# -----------------------------------------------------------
```

----------------------------------------

TITLE: Defining Build Secrets in Docker Compose
DESCRIPTION: Shows how to define a secret that is available during the build process. The `npm_token` secret is populated from the `NPM_TOKEN` environment variable and made available to the build context.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/use-secrets.md#_snippet_2

LANGUAGE: yaml
CODE:
```
services:
  myapp:
    build:
      secrets:
        - npm_token
      context: .

secrets:
  npm_token:
    environment: NPM_TOKEN
```

----------------------------------------

TITLE: Publishing a specific port
DESCRIPTION: This command publishes a specific port on the host machine to a specific port within the Docker container. Traffic sent to the host port will be forwarded to the container port.  It uses the `-p` flag with `docker run`.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/publishing-ports.md#_snippet_0

LANGUAGE: Bash
CODE:
```
$ docker run -d -p HOST_PORT:CONTAINER_PORT nginx
```

----------------------------------------

TITLE: GitHub Actions Workflow for Docker Image Testing and Push
DESCRIPTION: This workflow defines a CI pipeline that builds, tests, and pushes Docker images. It includes steps for logging into Docker Hub, setting up QEMU and Docker Buildx, building and exporting the image, running tests, and building and pushing for multiple platforms.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/test-before-push.md#_snippet_0

LANGUAGE: yaml
CODE:
```
name: ci

on:
  push:

env:
  TEST_TAG: user/app:test
  LATEST_TAG: user/app:latest

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        with:
          load: true
          tags: ${{ env.TEST_TAG }}

      - name: Test
        run: |
          docker run --rm ${{ env.TEST_TAG }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.LATEST_TAG }}
```

----------------------------------------

TITLE: Configuring the Dockerfile
DESCRIPTION: This Dockerfile uses multi-stage builds to create a production-ready Docker image for a React.js application. It builds the application in the first stage and serves it using NGINX in the second stage, optimizing for size, performance, and security.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/containerize.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```
# =========================================
# Stage 1: Build the React.js Application
```

----------------------------------------

TITLE: Running Docker Image from Registry
DESCRIPTION: This command runs a Docker image from a registry on a new instance using Play with Docker. It maps port 3000 on the host to port 3000 on the container, making the application accessible. The `-dp` flags run the container in detached mode and publish the port.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/04_sharing_app.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker run -dp 0.0.0.0:3000:3000 YOUR-USER-NAME/getting-started
```

----------------------------------------

TITLE: Multi-stage Dockerfile for .NET application
DESCRIPTION: This Dockerfile defines a multi-stage build process for a .NET application. It uses separate stages for building, development, and final deployment, optimizing for size and security. The build stage compiles the application, the development stage provides a development environment, and the final stage contains the runtime environment.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/develop.md#_snippet_12

LANGUAGE: Dockerfile
CODE:
```
FROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS build
ARG TARGETARCH
COPY . /source
WORKDIR /source/src
RUN --mount=type=cache,id=nuget,target=/root/.nuget/packages \
    dotnet publish -a ${TARGETARCH/amd64/x64} --use-current-runtime --self-contained false -o /app

FROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS development
COPY . /source
WORKDIR /source/src
CMD dotnet run --no-launch-profile

FROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine AS final
WORKDIR /app
COPY --from=build /app .
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser
USER appuser
ENTRYPOINT ["dotnet", "myWebApp.dll"]
```

----------------------------------------

TITLE: Creating a Docker Volume
DESCRIPTION: This command creates a new Docker volume named `my-vol`. Volumes provide a way to persist data outside the container's lifecycle.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker volume create my-vol
```

----------------------------------------

TITLE: Define Base Image
DESCRIPTION: Defines the base image for the Docker container. This example uses Node.js version 20 based on Alpine Linux, a lightweight distribution.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/writing-a-dockerfile.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
FROM node:20-alpine
```

----------------------------------------

TITLE: Verifying Data Persistence in MySQL (CLI)
DESCRIPTION: This command uses 'docker exec' to run a 'SELECT' query inside the 'my-mysql' container, verifying that the data created in the previous container still exists in the 'mytable' table.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#_snippet_12

LANGUAGE: bash
CODE:
```
$ docker exec my-mysql mysql -u root -pmy-secret-pw -e "SELECT * FROM mydb.mytable;"
```

----------------------------------------

TITLE: Compose file for GPU access
DESCRIPTION: This Docker Compose file configures a service to access a single GPU device. It uses the nvidia/cuda image and specifies the necessary resources and capabilities for GPU access.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/gpu-support.md#_snippet_0

LANGUAGE: yaml
CODE:
```
services:
  test:
    image: nvidia/cuda:12.3.1-base-ubuntu20.04
    command: nvidia-smi
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
```

----------------------------------------

TITLE: Set Working Directory
DESCRIPTION: Sets the working directory inside the container where subsequent commands will be executed. This example sets the working directory to /app.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/writing-a-dockerfile.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
WORKDIR /app
```

----------------------------------------

TITLE: Apply Kubernetes Configuration
DESCRIPTION: Deploys the application to Kubernetes using the `kubectl apply` command. This command creates the Deployment and Service defined in the `docker-node-kubernetes.yaml` file.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/deploy.md#_snippet_1

LANGUAGE: shell
CODE:
```
$ kubectl apply -f docker-node-kubernetes.yaml
```

----------------------------------------

TITLE: Running MySQL Container with Existing Volume (CLI)
DESCRIPTION: This command runs a new MySQL container named 'my-mysql' and attaches the existing volume 'my-db-volume' to the '/var/lib/mysql' directory.  It reuses the data from the volume.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#_snippet_11

LANGUAGE: bash
CODE:
```
$ docker run --name my-mysql -v my-db-volume:/var/lib/mysql -d mysql:latest
```

----------------------------------------

TITLE: Setting environment variable using environment attribute
DESCRIPTION: Sets the `DEBUG` environment variable to `true` directly within the `compose.yaml` file using the `environment` attribute. This method allows defining environment variables as key-value pairs.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/environment-variables/set-environment-variables.md#_snippet_0

LANGUAGE: yaml
CODE:
```
services:
  webapp:
    environment:
      DEBUG: "true"
```

----------------------------------------

TITLE: Building a Docker Image
DESCRIPTION: This command builds a Docker image from a Dockerfile in the current directory. Replace YOUR_DOCKER_USERNAME with your Docker Hub username. The -t flag tags the image with a name.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#_snippet_6

LANGUAGE: shell
CODE:
```
$ docker build -t <YOUR_DOCKER_USERNAME>/concepts-build-image-demo .
```

LANGUAGE: shell
CODE:
```
$ docker build -t mobywhale/concepts-build-image-demo .
```

----------------------------------------

TITLE: Building a Docker image with Bake
DESCRIPTION: This command uses Docker Buildx Bake to build the 'myapp' target defined in a Bake file.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/introduction.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker buildx bake myapp
```

----------------------------------------

TITLE: Publishing a Docker image
DESCRIPTION: This command pushes a Docker image to a registry using the `docker push` command. It requires the image to be built and tagged beforehand.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#_snippet_4

LANGUAGE: console
CODE:
```
docker push my-username/my-image
```

----------------------------------------

TITLE: GitHub Action Workflow with docker/build-push-action and SSH
DESCRIPTION: This GitHub Actions workflow demonstrates how to build and push a Docker image using `docker/build-push-action` with SSH. It sets up SSH using `MrSquaare/ssh-setup-action` and then builds and pushes the image with SSH enabled.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/secrets.md#_snippet_7

LANGUAGE: YAML
CODE:
```
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: MrSquaare/ssh-setup-action@2d028b70b5e397cf8314c6eaea229a6c3e34977a # v3.1.0
        with:
          host: github.com
          private-key: ${{ secrets.SSH_GITHUB_PPK }}
          private-key-name: github-ppk

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          ssh: default
          push: true
          tags: user/app:latest
```

----------------------------------------

TITLE: GitHub Actions Workflow with Local Cache
DESCRIPTION: This GitHub Actions workflow demonstrates how to use the actions/cache action to cache Docker layers locally. It includes steps for logging into Docker Hub, setting up Buildx, caching Docker layers, and building and pushing the Docker image with local cache configuration.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/cache.md#_snippet_8

LANGUAGE: YAML
CODE:
```
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: user/app:latest
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          cache-to: type=local,dest=${{ runner.temp }}/.buildx-cache-new,mode=max

      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache
```

----------------------------------------

TITLE: Start application using Docker Compose
DESCRIPTION: This command starts the application using Docker Compose, building the images if necessary. It sets up the services defined in the compose.yaml file, including the web and database services.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/develop.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Running bash in an Ubuntu container with a bind mount (Git Bash)
DESCRIPTION: This command starts an interactive bash session in an Ubuntu container, creating a bind mount between the host's current working directory and the /src directory inside the container. The `src` is the current working directory on your host machine (`getting-started-app`), and `target` is where that directory should appear inside the container (`/src`).
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#_snippet_4

LANGUAGE: bash
CODE:
```
docker run -it --mount type=bind,src="/$(pwd)",target=/src ubuntu bash
```

----------------------------------------

TITLE: Extending Environment Variables with Anchors and Aliases in Compose
DESCRIPTION: This example shows how to extend an anchor to add additional values. The `env` anchor is created under the `first` service, and the `second` service extends it by adding the `YET_ANOTHER: VARIABLE` environment variable. This allows for building upon existing configurations while adding service-specific customizations.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/fragments.md#_snippet_3

LANGUAGE: yaml
CODE:
```
services:
  first:
    image: my-image:latest
    environment: &env
      FOO: BAR
      ZOT: QUIX
  second:
    image: another-image:latest
    environment:
      <<: *env
      YET_ANOTHER: VARIABLE
```

----------------------------------------

TITLE: Pushing a Docker Image to Docker Hub
DESCRIPTION: This command pushes a Docker image to a Docker registry, such as Docker Hub. Replace YOUR_DOCKER_USERNAME with your Docker Hub username. Ensure you are logged in to Docker Hub before running this command.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#_snippet_9

LANGUAGE: shell
CODE:
```
$ docker push <YOUR_DOCKER_USERNAME>/concepts-build-image-demo
```

----------------------------------------

TITLE: Building Docker Image with Dockerfile
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for the Python Flask application. It specifies the base image, sets the working directory, installs dependencies, copies the application code, and defines the command to run the application.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM python:3.10-alpine
WORKDIR /code
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
RUN apk add --no-cache gcc musl-dev linux-headers
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
EXPOSE 5000
COPY . .
CMD ["flask", "run", "--debug"]
```

----------------------------------------

TITLE: Docker Run with --mount (Bind Mount)
DESCRIPTION: Demonstrates the syntax for using the `--mount` flag with `type=bind` to mount a host directory into a container.  It shows how to specify the source and destination paths, as well as additional options like `ro` (read-only) and `bind-propagation`. The order of key-value pairs is not significant.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker run --mount type=bind,src=<host-path>,dst=<container-path>[,<key>=<value>...]
```

----------------------------------------

TITLE: Prune Docker Resources Older Than 24 Hours
DESCRIPTION: This command removes all unused containers, networks, and images that are older than 24 hours. It uses the `--filter` flag to limit the scope of the prune operation.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#_snippet_11

LANGUAGE: bash
CODE:
```
$ docker system prune --filter "until=24h"
```

----------------------------------------

TITLE: Creating a Docker Network
DESCRIPTION: This command creates a new bridge network named 'mynet'. Bridge networks provide DNS lookup services, allowing containers to be referred to by their hostnames.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#_snippet_2

LANGUAGE: docker
CODE:
```
$ docker network create -d bridge mynet
```

----------------------------------------

TITLE: .dockerignore Configuration
DESCRIPTION: This .dockerignore file specifies files and directories to exclude from the Docker image. It ignores dependencies, build output, environment files, lockfiles, local development files, Docker-related files, and build-specific cache files.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/containerize.md#_snippet_6

LANGUAGE: Dockerignore
CODE:
```
# Ignore dependencies and build output
node_modules/
dist/
out/
.tmp/
.cache/

# Ignore Vite, Webpack, and React-specific build artifacts
.vite/
.vitepress/
.eslintcache
.npm/
coverage/
jest/
cypress/
cypress/screenshots/
cypress/videos/
reports/

# Ignore environment and config files (sensitive data)
*.env*
*.log

# Ignore TypeScript build artifacts (if using TypeScript)
*.tsbuildinfo

# Ignore lockfiles (optional if using Docker for package installation)
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Ignore local development files
.git/
.gitignore
.vscode/
.idea/
*.swp
.DS_Store
Thumbs.db

# Ignore Docker-related files (to avoid copying unnecessary configs)
Dockerfile
.dockerignore
docker-compose.yml
docker-compose.override.yml

# Ignore build-specific cache files
*.lock

```

----------------------------------------

TITLE: GitHub Actions Workflow with Docker Buildx Cache
DESCRIPTION: This YAML configuration sets up a GitHub Actions workflow that logs into Docker Hub, sets up Docker Buildx, and builds and pushes a Docker image. It utilizes `cache-from` to pull cache from a registry and `cache-to` to push the updated cache back to the registry, optimizing subsequent builds.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#_snippet_15

LANGUAGE: yaml
CODE:
```
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: user/app:latest
          cache-from: type=registry,ref=user/app:buildcache
          cache-to: type=registry,ref=user/app:buildcache,mode=max
```

----------------------------------------

TITLE: Building a Docker Image
DESCRIPTION: Builds a Docker image from a Dockerfile located in the current directory. The `.` specifies the build context, where the Dockerfile and other necessary files are located. The builder pulls the base image and executes the instructions in the Dockerfile.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker build .
```

----------------------------------------

TITLE: Prune dangling Docker images
DESCRIPTION: This command removes all dangling images, which are untagged images not referenced by any container. It prompts for confirmation before removing the images.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker image prune

WARNING! This will remove all dangling images.
Are you sure you want to continue? [y/N] y
```

----------------------------------------

TITLE: Creating a Docker volume with a plugin
DESCRIPTION: This command creates a Docker volume using a specified plugin. The log entries show the plugin being called to create the volume, ensuring the directory exists, and returning the path.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker volume create -d tiborvass/sample-volume-plugin samplevol
```

----------------------------------------

TITLE: Nginx Server Configuration with SSL
DESCRIPTION: This snippet shows the Nginx server configuration with SSL, including listening on port 443, setting the server name, specifying SSL certificate and key, and defining the root and index files for the location.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#_snippet_41

LANGUAGE: none
CODE:
```
server {
    listen                443 ssl;
    server_name           localhost;
    ssl_certificate       /run/secrets/site.crt;
    ssl_certificate_key   /run/secrets/site.key;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm index.php;
    }
}
```

----------------------------------------

TITLE: Configure Registry Mirrors in daemon.json
DESCRIPTION: This JSON snippet configures the Docker daemon to use a specified registry mirror.  The `registry-mirrors` key is set to an array containing the URL of the Docker mirror.  This configuration is persistent after Docker restarts.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/image-library/mirror.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "registry-mirrors": ["https://<my-docker-mirror-host>"]
}
```

----------------------------------------

TITLE: Checking slirp4netns version (Debian)
DESCRIPTION: Checks the installed version of slirp4netns to ensure it is greater than v0.4.0, which is required for rootless Docker when vpnkit is not installed.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#_snippet_3

LANGUAGE: Shell
CODE:
```
slirp4netns --version
```

----------------------------------------

TITLE: Starting Kafka Container
DESCRIPTION: This command starts a Kafka container using the apache/kafka image, mapping port 9092 to the host. This allows applications running on the host machine to connect to the Kafka cluster.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker run -d --name=kafka -p 9092:9092 apache/kafka
```

----------------------------------------

TITLE: Backing Up a Docker Volume to a Tar File
DESCRIPTION: This command launches a new container, mounts the volume from the `dbstore` container, mounts a local host directory as `/backup`, and tars the contents of the `/dbdata` volume to a `backup.tar` file inside the `/backup` directory. It uses the `ubuntu` image and the `tar` command.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_45

LANGUAGE: bash
CODE:
```
$ docker run --rm --volumes-from dbstore -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata
```

----------------------------------------

TITLE: Starting Application with Docker Compose
DESCRIPTION: This command starts the application defined in the 'compose.yml' file. The '-d' flag runs the containers in detached mode (in the background), and the '--build' flag builds any images that need to be built before starting the containers.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#_snippet_11

LANGUAGE: Shell
CODE:
```
$ docker compose up -d --build
```

----------------------------------------

TITLE: Running tests locally with Docker Compose
DESCRIPTION: This command uses Docker Compose to run .NET tests inside a container. It builds the necessary images, removes the container after execution, and executes the `dotnet test` command against the specified test project.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/run-tests.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker compose run --build --rm server dotnet test /source/tests
```

----------------------------------------

TITLE: Running a Container with a Bind Mount (-v)
DESCRIPTION: This command runs a container with a bind mount using the `-v` flag. It maps the current directory (`.`) on the host to the `/usr/local/apache2/htdocs/` directory within the container, allowing the container to serve the HTML files from the host.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/sharing-local-files.md#_snippet_7

LANGUAGE: console
CODE:
```
$ docker run -d --name my_site -p 8080:80 -v .:/usr/local/apache2/htdocs/ httpd:2.4
```

----------------------------------------

TITLE: Running Docker Init
DESCRIPTION: This command initializes Docker assets in the current directory. It prompts the user for information about the application, such as the platform, source directory, Java version, and port. The tool generates `.dockerignore`, `Dockerfile`, `compose.yaml`, and `README.Docker.md` files.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#_snippet_1

LANGUAGE: shell
CODE:
```
$ docker init
```

----------------------------------------

TITLE: Displaying Container Resource Usage Statistics
DESCRIPTION: Introduces the `docker compose stats` command to display a live stream of container resource usage statistics, providing insights into CPU, memory, and network utilization.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#_snippet_1

LANGUAGE: bash
CODE:
```
docker compose stats
```

----------------------------------------

TITLE: Allocating GPU Devices with Driver and Count - Docker Compose YAML
DESCRIPTION: This snippet demonstrates how to allocate specific GPU devices to a container using the `gpus` option in a Docker Compose file. It specifies the driver and the number of GPUs to allocate.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_51

LANGUAGE: yaml
CODE:
```
services:
  model:
    gpus: 
      - driver: 3dfx
        count: 2
```

----------------------------------------

TITLE: Start Docker Compose application
DESCRIPTION: Starts the application defined in the `compose.yaml` file using Docker Compose. The `--build` flag ensures that the images are built before starting the services.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/develop.md#_snippet_3

LANGUAGE: shell
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Defining a target in docker-bake.hcl
DESCRIPTION: This HCL configuration defines a target named 'myapp' with the context set to the current directory, the Dockerfile specified as 'Dockerfile', and the tag set to 'myapp:latest'.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/introduction.md#_snippet_1

LANGUAGE: hcl
CODE:
```
target "myapp" {
  context = "."
  dockerfile = "Dockerfile"
  tags = ["myapp:latest"]
}
```

----------------------------------------

TITLE: Compose file for Node.js Application
DESCRIPTION: This compose.yaml file defines a service named 'server' for the Node.js application. It specifies how to build the image from the Dockerfile, sets the environment to production, and maps port 3000 on the host to port 3000 in the container.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/containerize.md#_snippet_3

LANGUAGE: yaml
CODE:
```
services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: production
    ports:
      - 3000:3000
```

----------------------------------------

TITLE: Copy Go Module Files to Docker Image
DESCRIPTION: This command copies the `go.mod` and `go.sum` files from the host machine to the `/app` directory inside the Docker image. This is necessary to download the Go dependencies required for the project.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
COPY go.mod go.sum ./
```

----------------------------------------

TITLE: Configuring DNS server using --dns flag in Docker
DESCRIPTION: The `--dns` flag allows you to specify the IP address of a DNS server for a container. You can use multiple `--dns` flags to specify multiple DNS servers. The DNS requests are forwarded from the container's network namespace.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/_index.md#_snippet_5

LANGUAGE: Docker
CODE:
```
`--dns=<DNS_SERVER_IP>`
```

----------------------------------------

TITLE: Listing Locally Available Docker Images
DESCRIPTION: This command lists all locally available Docker images, providing key details such as repository name, tag, image ID, creation timestamp, and size.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/containerize.md#_snippet_9

LANGUAGE: Shell
CODE:
```
$ docker images
```

----------------------------------------

TITLE: Building a Docker Image
DESCRIPTION: This command builds a Docker image from a Dockerfile in the current directory and tags it with a specified name. The -t flag is used to tag the image with a name in the format <YOUR-USERNAME>/nginx-custom, which is required for pushing the image to Docker Hub.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/quickstart.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker build -t <YOUR-USERNAME>/nginx-custom .
```

----------------------------------------

TITLE: Example Docker Init Interaction
DESCRIPTION: This example demonstrates the interaction with the `docker init` command, showing the prompts and expected answers for a Java application. It includes overwriting existing Docker Compose files, selecting Java as the platform, specifying the source directory, Java version, and server port.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker init
Welcome to the Docker Init CLI!

This utility will walk you through creating the following files with sensible defaults for your project:
  - .dockerignore
  - Dockerfile
  - compose.yaml
  - README.Docker.md

Let's get started!

WARNING: The following Docker files already exist in this directory:
  - docker-compose.yml
? Do you want to overwrite them? Yes
? What application platform does your project use? Java
? What's the relative directory (with a leading .) for your app? ./src
? What version of Java do you want to use? 21
? What port does your server listen on? 8080
```

----------------------------------------

TITLE: Configuring DNS Servers in Docker Compose
DESCRIPTION: This snippet shows how to configure custom DNS servers for a container using the `dns` option in a Docker Compose file. It demonstrates how to specify a single DNS server or a list of DNS servers.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_22

LANGUAGE: yml
CODE:
```
dns: 8.8.8.8
```

LANGUAGE: yml
CODE:
```
dns:
  - 8.8.8.8
  - 9.9.9.9
```

----------------------------------------

TITLE: Installing the latest Docker packages
DESCRIPTION: This command installs the latest version of Docker Engine, CLI, containerd, docker-buildx-plugin, and docker-compose-plugin using apt-get.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/raspberry-pi-os.md#_snippet_2

LANGUAGE: console
CODE:
```
$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
```

----------------------------------------

TITLE: Create MySQL password secret
DESCRIPTION: Generates a random alphanumeric password for MySQL and stores it as a Docker secret named `mysql_password`. The password is created using `openssl` and piped to the `docker secret create` command.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_37

LANGUAGE: bash
CODE:
```
openssl rand -base64 20 | docker secret create mysql_password -
```

----------------------------------------

TITLE: Dockerfile with Development Stage
DESCRIPTION: This Dockerfile defines multiple stages, including a 'development' stage that copies extracted application files and sets up the JVM for debugging. It also defines a final stage for production.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#_snippet_4

LANGUAGE: dockerfile
CODE:
```
FROM eclipse-temurin:21-jdk-jammy as deps
WORKDIR /build
COPY --chmod=0755 mvnw mvnw
COPY .mvn/ .mvn/
RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/root/.m2 ./mvnw dependency:go-offline -DskipTests

FROM deps as package
WORKDIR /build
COPY ./src src/
RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/root/.m2 \
    ./mvnw package -DskipTests && \
    mv target/$(./mvnw help:evaluate -Dexpression=project.artifactId -q -DforceStdout)-$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout).jar target/app.jar

FROM package as extract
WORKDIR /build
RUN java -Djarmode=layertools -jar target/app.jar extract --destination target/extracted

FROM extract as development
WORKDIR /build
RUN cp -r /build/target/extracted/dependencies/. ./
RUN cp -r /build/target/extracted/spring-boot-loader/. ./
RUN cp -r /build/target/extracted/snapshot-dependencies/. ./
RUN cp -r /build/target/extracted/application/. ./
ENV JAVA_TOOL_OPTIONS -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000
CMD [ "java", "-Dspring.profiles.active=postgres", "org.springframework.boot.loader.launch.JarLauncher" ]

FROM eclipse-temurin:21-jre-jammy AS final
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser
USER appuser
COPY --from=extract build/target/extracted/dependencies/ ./
COPY --from=extract build/target/extracted/spring-boot-loader/ ./
COPY --from=extract build/target/extracted/snapshot-dependencies/ ./
COPY --from=extract build/target/extracted/application/ ./
EXPOSE 8080
ENTRYPOINT [ "java", "-Dspring.profiles.active=postgres", "org.springframework.boot.loader.launch.JarLauncher" ]
```

----------------------------------------

TITLE: Stopping and Removing a Docker Container
DESCRIPTION: These commands stop and then remove the Docker container named `db`. The data persists in the attached volume.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#_snippet_10

LANGUAGE: bash
CODE:
```
$ docker stop db
$ docker rm db
```

----------------------------------------

TITLE: Testing API endpoint with curl
DESCRIPTION: This command tests the API endpoint by sending an HTTP request to the localhost. It expects a JSON response indicating a successful connection.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#_snippet_31

LANGUAGE: console
CODE:
```
$ curl http://localhost/
```

----------------------------------------

TITLE: Consuming secrets in Dockerfile with custom target path
DESCRIPTION: This Dockerfile instruction demonstrates how to consume a secret and mount it to a custom path using the `target` option. It mounts the secret with the ID `aws` to the path `/root/.aws/credentials` inside the container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#_snippet_6

LANGUAGE: dockerfile
CODE:
```
RUN --mount=type=secret,id=aws,target=/root/.aws/credentials \
    aws s3 cp ...
```

----------------------------------------

TITLE: Run React tests in Docker container
DESCRIPTION: Executes the test suite inside a Docker container using Docker Compose. This command starts the `react-test` service, runs the `npm run test` script, and automatically removes the container after the tests complete.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/run-tests.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker compose run --rm react-test
```

----------------------------------------

TITLE: Using Apt cache mount in Dockerfile
DESCRIPTION: This example demonstrates how to use cache mounts with Apt to persist the Apt cache across builds. The `apt update` and `apt-get install` commands will use the specified cache directories, improving build times by reusing cached packages. The `sharing=locked` option ensures exclusive access to the cache.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#_snippet_9

LANGUAGE: Dockerfile
CODE:
```
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  apt update && apt-get --no-install-recommends install -y gcc
```

----------------------------------------

TITLE: Setting environment variables for version management
DESCRIPTION: This example demonstrates how to use the ENV instruction to set environment variables for version numbers. This makes it easier to update the version of software in the container by changing a single ENV instruction.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_19

LANGUAGE: dockerfile
CODE:
```
ENV PG_MAJOR=9.3
ENV PG_VERSION=9.3.4
RUN curl -SL https://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/postgres && …
ENV PATH=/usr/local/postgres-$PG_MAJOR/bin:$PATH
```

----------------------------------------

TITLE: Experimental Smart Recreate with Docker Compose
DESCRIPTION: This command demonstrates the experimental smart recreate feature in Docker Compose, which only recreates containers for services whose configuration has changed in the docker-compose.yml file. This can significantly speed up the `docker-compose up` process.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#_snippet_23

LANGUAGE: shell
CODE:
```
$ docker-compose up --x-smart-recreate
```

----------------------------------------

TITLE: Combining apt-get update and install
DESCRIPTION: This example demonstrates the recommended practice of combining `apt-get update` and `apt-get install` in a single `RUN` instruction to avoid caching issues. It updates the package list and installs several packages.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_11

LANGUAGE: dockerfile
CODE:
```
RUN apt-get update && apt-get install -y --no-install-recommends \
    package-bar \
    package-baz \
    package-foo
```

----------------------------------------

TITLE: Compose file with database service and volume
DESCRIPTION: This compose.yaml file defines a web service and a database service using Postgres. It configures environment variables, secrets, and a volume for persistent data storage for the database.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/develop.md#_snippet_0

LANGUAGE: yaml
CODE:
```
services:
  web:
    build: .
    command: bundle exec rails s -b '0.0.0.0'
    ports:
      - "3000:3000"
    depends_on:
      - db
    environment:
      - RAILS_ENV=test
    env_file: "webapp.env"
  db:
    image: postgres:latest
    secrets:
      - db-password
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
secrets:
  db-password:
    file: db/password.txt
```

----------------------------------------

TITLE: Creating a Custom Docker Network
DESCRIPTION: This command creates a custom Docker network named `my-net`. Custom networks allow containers to communicate with each other using container names as DNS hostnames.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_6

LANGUAGE: bash
CODE:
```
$ docker network create my-net
```

----------------------------------------

TITLE: Creating a Global Alpine Service
DESCRIPTION: This command creates a global service that runs alpine on every node in the swarm. The scheduler places a task for the global service on each available node and on any new nodes that become available.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#_snippet_32

LANGUAGE: console
CODE:
```
$ docker service create \
  --name myservice \
  --mode global \
  alpine top
```

----------------------------------------

TITLE: Run Multi-Platform Image and Print Architecture
DESCRIPTION: This command runs the previously built multi-platform image and prints the architecture by reading the `/arch` file within the container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker run --rm multi-platform cat /arch
```

----------------------------------------

TITLE: Configuring Docker Daemon Proxy via daemon.json
DESCRIPTION: Configure proxy settings for the Docker daemon by editing the `daemon.json` file. This includes specifying HTTP, HTTPS proxies, and hosts to exclude from proxying.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/proxy.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "proxies": {
    "http-proxy": "http://proxy.example.com:3128",
    "https-proxy": "https://proxy.example.com:3129",
    "no-proxy": "*.test.example.com,.example.org,127.0.0.0/8"
  }
}
```

----------------------------------------

TITLE: Starting application using Docker Compose
DESCRIPTION: This command starts the application defined in the compose.yaml file. It creates and starts all services, including pulling the Redis image and building the web service image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#_snippet_5

LANGUAGE: shell
CODE:
```
$ docker compose up

Creating network "composetest_default" with the default driver
Creating composetest_web_1 ...
Creating composetest_redis_1 ...
Creating composetest_web_1
Creating composetest_redis_1 ... done
Attaching to composetest_web_1, composetest_redis_1
web_1    |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
redis_1  | 1:C 17 Aug 22:11:10.480 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
redis_1  | 1:C 17 Aug 22:11:10.480 # Redis version=4.0.1, bits=64, commit=00000000, modified=0, pid=1, just started
redis_1  | 1:C 17 Aug 22:11:10.480 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
web_1    |  * Restarting with stat
redis_1  | 1:M 17 Aug 22:11:10.483 * Running mode=standalone, port=6379.
redis_1  | 1:M 17 Aug 22:11:10.483 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
web_1    |  * Debugger is active!
redis_1  | 1:M 17 Aug 22:11:10.483 # Server initialized
redis_1  | 1:M 17 Aug 22:11:10.483 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
web_1    |  * Debugger PIN: 330-787-903
redis_1  | 1:M 17 Aug 22:11:10.483 * Ready to accept connections
```

----------------------------------------

TITLE: Stopping Docker Compose
DESCRIPTION: This command stops and removes the containers, networks, and volumes that were created by `docker compose up`. It effectively shuts down the application defined in the docker-compose.yaml file.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/containerize.md#_snippet_10

LANGUAGE: console
CODE:
```
$ docker compose down
```

----------------------------------------

TITLE: Defining Service Dependencies with Short Syntax in Docker Compose
DESCRIPTION: This example demonstrates the short syntax for defining service dependencies in a Docker Compose file. The `depends_on` property is used to specify the service names of the dependencies. Compose creates and removes services in dependency order and guarantees dependency services have been started before starting a dependent service.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_18

LANGUAGE: yml
CODE:
```
services:
  web:
    build: .
    depends_on:
      - db
      - redis
  redis:
    image: redis
  db:
    image: postgres
```

----------------------------------------

TITLE: Adding the command to execute in compose.yaml
DESCRIPTION: Adds the `command` instruction to the `compose.yaml` file, specifying the shell command to execute when the container starts. This command installs dependencies and starts the development server.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/08_using_compose.md#_snippet_1

LANGUAGE: yaml
CODE:
```
services:
  app:
    image: node:18-alpine
    command: sh -c "yarn install && yarn run dev"
```

----------------------------------------

TITLE: Defining Simple Services with Docker Compose
DESCRIPTION: This example demonstrates how to define two simple services, set their images, map ports, and configure basic environment variables using Docker Compose. It defines a web service using the nginx:latest image and a db service using the postgres:13 image.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_0

LANGUAGE: yaml
CODE:
```
services:
  web:
    image: nginx:latest
    ports:
      - "8080:80"

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: example
      POSTGRES_DB: exampledb
```

----------------------------------------

TITLE: Running bash in an Ubuntu container with a bind mount (Mac/Linux)
DESCRIPTION: This command starts an interactive bash session in an Ubuntu container, creating a bind mount between the host's current working directory and the /src directory inside the container.  The `src` is the current working directory on your host machine (`getting-started-app`), and `target` is where that directory should appear inside the container (`/src`).
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#_snippet_2

LANGUAGE: bash
CODE:
```
docker run -it --mount type=bind,src="$(pwd)",target=/src ubuntu bash
```

----------------------------------------

TITLE: Specifying Target Stage in Docker Compose
DESCRIPTION: This example demonstrates how to specify the target stage to build from a multi-stage Dockerfile using the `target` property in a Docker Compose file.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#_snippet_39

LANGUAGE: yml
CODE:
```
build:
  context: .
  target: prod
```

----------------------------------------

TITLE: Dockerfile After Changes: Multi-Stage Build
DESCRIPTION: This Dockerfile uses a multi-stage build to create separate environments for production and development. It defines stages for installing production and development dependencies, a base image with PHP extensions, and final stages for development and production, copying dependencies and source code as needed.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#_snippet_9

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1

FROM composer:lts as prod-deps
WORKDIR /app
RUN --mount=type=bind,source=./composer.json,target=composer.json \
    --mount=type=bind,source=./composer.lock,target=composer.lock \
    --mount=type=cache,target=/tmp/cache \
    composer install --no-dev --no-interaction

FROM composer:lts as dev-deps
WORKDIR /app
RUN --mount=type=bind,source=./composer.json,target=composer.json \
    --mount=type=bind,source=./composer.lock,target=composer.lock \
    --mount=type=cache,target=/tmp/cache \
    composer install --no-interaction

FROM php:8.2-apache as base
RUN docker-php-ext-install pdo pdo_mysql
COPY ./src /var/www/html

FROM base as development
COPY ./tests /var/www/html/tests
RUN mv "$PHP_INI_DIR/php.ini-development" "$PHP_INI_DIR/php.ini"
COPY --from=dev-deps app/vendor/ /var/www/html/vendor

FROM base as final
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"
COPY --from=prod-deps app/vendor/ /var/www/html/vendor
USER www-data
```

----------------------------------------

TITLE: Using External Networks in Docker Compose
DESCRIPTION: This example demonstrates how to use an external network that is managed outside of the Compose application. Setting `external` to `true` tells Compose to use an existing network instead of creating one.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/networks.md#_snippet_10

LANGUAGE: yaml
CODE:
```
services:
  proxy:
    image: example/proxy
    networks:
      - outside
      - default
  app:
    image: example/app
    networks:
      - default

networks:
  outside:
    external: true
```

----------------------------------------

TITLE: Create a Docker Secret
DESCRIPTION: Creates a Docker secret named 'my_secret_data' from standard input. The secret's value is 'This is a secret'. The '-' argument indicates that the secret data is read from standard input.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_0

LANGUAGE: console
CODE:
```
$ printf "This is a secret" | docker secret create my_secret_data -
```

----------------------------------------

TITLE: Creating a Docker Service with Runtime Configuration
DESCRIPTION: This command creates a Docker service named 'helloworld' with a specified environment variable, working directory, and user. It sets the environment variable MYVAR to 'myvalue', the working directory to '/tmp', and the user to 'my_user'.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#_snippet_15

LANGUAGE: console
CODE:
```
$ docker service create --name helloworld \
  --env MYVAR=myvalue \
  --workdir /tmp \
  --user my_user \
  alpine ping docker.com
```

----------------------------------------

TITLE: Setting Buildx Configuration Directory - Console
DESCRIPTION: This snippet shows how to specify the directory to use for build configuration, state, and logs using the `BUILDX_CONFIG` environment variable. The example sets the configuration directory to '/usr/local/etc'.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#_snippet_21

LANGUAGE: console
CODE:
```
$ export BUILDX_CONFIG=/usr/local/etc
```

----------------------------------------

TITLE: Starting Application with Docker Compose
DESCRIPTION: This console command starts the application defined in the `compose.yaml` file using Docker Compose. The `--build` flag ensures that any necessary images are built before starting the services. This command is used to deploy and run the application with the configured database.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: GitHub Actions Workflow Configuration
DESCRIPTION: This YAML file defines a GitHub Actions workflow that automatically builds and pushes a Docker image to Docker Hub on every push to the `main` branch. It logs into Docker Hub, sets up Docker Buildx, and then builds and pushes the image with specified platforms and tags.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/r/configure-ci-cd.md#_snippet_2

LANGUAGE: YAML
CODE:
```
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
```

----------------------------------------

TITLE: Building a Docker Image
DESCRIPTION: This snippet demonstrates how to build a Docker image using the `docker build` command. The `-t` option specifies the name and tag of the image, and the `.` sets the build context to the current directory.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/dockerfile.md#_snippet_12

LANGUAGE: console
CODE:
```
$ docker build -t test:latest .
```

----------------------------------------

TITLE: Building the Docker image
DESCRIPTION: Builds a Docker image using the Dockerfile in the current directory and tags it as getting-started.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/02_our_app.md#_snippet_3

LANGUAGE: bash
CODE:
```
$ docker build -t getting-started .
```

----------------------------------------

TITLE: Creating an IPv6 network
DESCRIPTION: Creates a Docker network with IPv6 enabled. This allows containers connected to this network to communicate using IPv6 addresses.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/ipv6.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker network create --ipv6 ip6net
```

----------------------------------------

TITLE: Create a new Docker secret
DESCRIPTION: This command generates a random base64 encoded string and stores it as a Docker secret named `mysql_password_v2`. This secret will be used as the new MySQL password.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_46

LANGUAGE: bash
CODE:
```
openssl rand -base64 20 | docker secret create mysql_password_v2 -
```

----------------------------------------

TITLE: Running the .NET application with Docker Compose
DESCRIPTION: This command builds and starts the .NET application using Docker Compose. It reads the `compose.yaml` file to define the services, networks, and volumes required for the application. The `--build` flag ensures that the Docker image is built before starting the application.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/containerize.md#_snippet_2

LANGUAGE: shell
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Prune stopped Docker containers
DESCRIPTION: This command removes all stopped containers. It prompts for confirmation before removing the containers.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker container prune

WARNING! This will remove all stopped containers.
Are you sure you want to continue? [y/N] y
```

----------------------------------------

TITLE: Dockerfile for a Node.js application
DESCRIPTION: This Dockerfile sets up a Node.js application environment, copies the application files, installs dependencies, and defines the command to run the application. It uses a base image of Node.js 20 Alpine.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/using-the-build-cache.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
FROM node:20-alpine
WORKDIR /app
COPY . .
RUN yarn install --production
CMD ["node", "./src/index.js"]
```

----------------------------------------

TITLE: Build Multi-Platform Image (QEMU)
DESCRIPTION: This command builds a multi-platform Docker image for both `linux/amd64` and `linux/arm64` architectures using the Docker build command with the `--platform` flag.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker build --platform linux/amd64,linux/arm64 -t multi-platform .
```

----------------------------------------

TITLE: Dockerfile with test stage
DESCRIPTION: This Dockerfile defines a multi-stage build process that includes a dedicated test stage. The test stage installs development dependencies, copies the application code, and runs the tests using `npm run test`. The `RUN` instruction ensures that the tests are executed during the image build process, failing the build if the tests fail.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/run-tests.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1

ARG NODE_VERSION=18.0.0

FROM node:${NODE_VERSION}-alpine as base
WORKDIR /usr/src/app
EXPOSE 3000

FROM base as dev
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci --include=dev
USER node
COPY . .
CMD npm run dev

FROM base as prod
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev
USER node
COPY . .
CMD node src/index.js

FROM base as test
ENV NODE_ENV test
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci --include=dev
USER node
COPY . .
RUN npm run test
```

----------------------------------------

TITLE: Starting application with Docker Compose
DESCRIPTION: These shell commands are used to start the application using Docker Compose. The `docker compose up --build` command builds the images and starts the containers defined in the `compose.yaml` file. The `docker compose rm` command removes the containers.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#_snippet_3

LANGUAGE: shell
CODE:
```
$ docker compose up --build
```

LANGUAGE: shell
CODE:
```
$ docker compose rm
```

LANGUAGE: shell
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Service Aliases Example
DESCRIPTION: This snippet demonstrates how services can reach each other using aliases defined on different networks. The `frontend` service can reach the `backend` service at `backend` or `database` on the `back-tier` network, while the `monitoring` service can reach the same `backend` service at `backend` or `mysql` on the `admin` network.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_74

LANGUAGE: YAML
CODE:
```
services:
  frontend:
    image: example/webapp
    networks:
      - front-tier
      - back-tier

  monitoring:
    image: example/monitoring
    networks:
      - admin

  backend:
    image: example/backend
    networks:
      back-tier:
        aliases:
          - database
      admin:
        aliases:
          - mysql

networks:
  front-tier:
  back-tier:
  admin:
```

----------------------------------------

TITLE: Enable and Start Docker Engine Service
DESCRIPTION: This command enables the Docker Engine service to start automatically on system boot and starts the service immediately using systemctl. Alternatively, `sudo systemctl start docker` can be used to start the service without enabling automatic startup.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/fedora.md#_snippet_5

LANGUAGE: console
CODE:
```
$ sudo systemctl enable --now docker
```

----------------------------------------

TITLE: Configuring MariaDB in docker-compose.yaml
DESCRIPTION: This YAML snippet configures a MariaDB database service within a Docker Compose setup. It defines the service image, restart policy, user, secrets, volumes for data persistence, environment variables for database configuration, port exposure, and a health check to ensure the database is running correctly.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#_snippet_1

LANGUAGE: yaml
CODE:
```
services:
  server:
    build:
      context: .
    ports:
      - 9000:80
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password
    environment:
      - PASSWORD_FILE_PATH=/run/secrets/db-password
      - DB_HOST=db
      - DB_NAME=example
      - DB_USER=root
  db:
    image: mariadb
    restart: always
    user: root
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/mysql
    environment:
      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/db-password
      - MARIADB_DATABASE=example
    expose:
      - 3306
    healthcheck:
      test:
        [
          "CMD",
          "/usr/local/bin/healthcheck.sh",
          "--su-mysql",
          "--connect",
          "--innodb_initialized",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt
```

----------------------------------------

TITLE: Running Hello-World Container
DESCRIPTION: Verifies that Docker commands can be run without sudo.  Downloads and runs the 'hello-world' image, printing a test message.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/linux-postinstall.md#_snippet_3

LANGUAGE: bash
CODE:
```
$ docker run hello-world
```

----------------------------------------

TITLE: Dockerfile for Custom MySQL Image
DESCRIPTION: This Dockerfile uses the mysql:latest base image, sets the MYSQL_DATABASE environment variable, and copies custom scripts from the host's ./scripts/ directory to the container's /docker-entrypoint-initdb.d/ directory. Scripts in this directory are executed when the container starts for the first time, allowing for database initialization.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#_snippet_16

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1

# Use the base image mysql:latest
FROM mysql:latest

# Set environment variables
ENV MYSQL_DATABASE mydb

# Copy custom scripts or configuration files from your host to the container
COPY ./scripts/ /docker-entrypoint-initdb.d/
```

----------------------------------------

TITLE: Execute MySQL command to update password
DESCRIPTION: This command executes a `mysqladmin` command inside the MySQL container to update the password for the `wordpress` user. It reads the old and new passwords from the mounted secrets.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_49

LANGUAGE: bash
CODE:
```
docker container exec <CONTAINER_ID> \
        bash -c 'mysqladmin --user=wordpress --password="$(< /run/secrets/old_mysql_password)" password "$(< /run/secrets/mysql_password)"'
```

----------------------------------------

TITLE: Updating Kubeconfig and Storing in Backend Container using TypeScript
DESCRIPTION: This code snippet retrieves the kubeconfig file using `kubectl`, then sends it to a backend container for persistent storage. It uses `ddClient.extension.host?.cli.exec` to get the kubeconfig and `ddClient.extension.vm?.service?.post` to send it to the backend.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/guides/kubernetes.md#_snippet_3

LANGUAGE: typescript
CODE:
```
export const updateKubeconfig = async () => {
  const kubeConfig = await ddClient.extension.host?.cli.exec("kubectl", [
    "config",
    "view",
    "--raw",
    "--minify",
    "--context",
    "docker-desktop",
  ]);
  if (kubeConfig?.stderr) {
    console.log("error", kubeConfig?.stderr);
    return false;
  }

  // call backend container to store the kubeconfig retrieved into the container's memory or filesystem
  try {
    await ddClient.extension.vm?.service?.post("/store-kube-config", {
      data: kubeConfig?.stdout,
    });
  } catch (err) {
    console.log("error", JSON.stringify(err));
  }
};
```

----------------------------------------

TITLE: Initializing Docker assets for .NET application
DESCRIPTION: This command initializes Docker assets such as `.dockerignore`, `Dockerfile`, and `compose.yaml` for containerizing the .NET application. It uses the `docker init` command and prompts the user for information about the application platform, main project name, .NET version, and local port.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/containerize.md#_snippet_1

LANGUAGE: shell
CODE:
```
$ docker init
Welcome to the Docker Init CLI!

This utility will walk you through creating the following files with sensible defaults for your project:
  - .dockerignore
  - Dockerfile
  - compose.yaml
  - README.Docker.md

Let's get started!

? What application platform does your project use? ASP.NET Core
? What's the name of your solution's main project? myWebApp
? What version of .NET do you want to use? 8.0
? What local port do you want to use to access your server? 8080
```

----------------------------------------

TITLE: Building a Specific Stage with BuildKit Enabled
DESCRIPTION: Shows how to build a specific stage (stage2) of the Dockerfile using BuildKit. BuildKit optimizes the build by only processing the necessary stages (base and stage2), skipping stage1 due to the lack of dependencies.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-stage.md#_snippet_8

LANGUAGE: console
CODE:
```
$ DOCKER_BUILDKIT=1 docker build --no-cache -f Dockerfile --target stage2 .
[+] Building 0.4s (7/7) FINISHED                                                                    
 => [internal] load build definition from Dockerfile                                            0.0s
 => => transferring dockerfile: 36B                                                             0.0s
 => [internal] load .dockerignore                                                               0.0s
 => => transferring context: 2B                                                                 0.0s
 => [internal] load metadata for docker.io/library/ubuntu:latest                                0.0s
 => CACHED [base 1/2] FROM docker.io/library/ubuntu                                             0.0s
 => [base 2/2] RUN echo "base"                                                                  0.1s
 => [stage2 1/1] RUN echo "stage2"                                                              0.2s
 => exporting to image                                                                          0.0s
 => => exporting layers                                                                         0.0s
 => => writing image sha256:f55003b607cef37614f607f0728e6fd4d113a4bf7ef12210da338c716f2cfd15    0.0s
```

----------------------------------------

TITLE: Using ARG to set ENV default
DESCRIPTION: This example shows how to use an ARG variable to set a default value for an ENV variable. This allows passing arguments from the command line and persisting them in the final image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_125

LANGUAGE: dockerfile
CODE:
```
FROM ubuntu
ARG CONT_IMG_VER
ENV CONT_IMG_VER=${CONT_IMG_VER:-v1.0.0}
RUN echo $CONT_IMG_VER
```

----------------------------------------

TITLE: Remove Docker Images, Containers, and Volumes
DESCRIPTION: These commands remove all Docker images, containers, and volumes by deleting the /var/lib/docker and /var/lib/containerd directories. This action will permanently delete all Docker-related data.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/rhel.md#_snippet_10

LANGUAGE: bash
CODE:
```
sudo rm -rf /var/lib/docker
sudo rm -rf /var/lib/containerd
```

----------------------------------------

TITLE: Mounting Existing Notebooks - Windows (PowerShell)
DESCRIPTION: This command runs a JupyterLab container and mounts the current working directory on the host to `/home/jovyan/work` inside the container, allowing access to existing notebooks. It also maps port 8889 on the host to port 8888 on the container and sets an access token. This version is specifically for Windows PowerShell.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#_snippet_3

LANGUAGE: console
CODE:
```
docker run --rm -p 8889:8888 -v "$(pwd):/home/jovyan/work" quay.io/jupyter/base-notebook start-notebook.py --NotebookApp.token='my-token'
```

----------------------------------------

TITLE: Demoting a Manager Node to Worker in Docker Swarm
DESCRIPTION: This command demotes a manager node to a worker node in a Docker Swarm. It's crucial to maintain a quorum of manager nodes. Demoting a node can be useful when reconfiguring the swarm or reducing the number of managers.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/manage-nodes.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker node demote node-3 node-2

Manager node-3 demoted in the swarm.
Manager node-2 demoted in the swarm.
```

----------------------------------------

TITLE: Using variables across files
DESCRIPTION: This HCL file defines a variable BASE_LATEST that references the BASE_IMAGE variable defined in vars.hcl. It then uses this variable to define the context for the webapp target.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/variables.md#_snippet_12

LANGUAGE: hcl
CODE:
```
variable "BASE_LATEST" {
  default = "${BASE_IMAGE}:latest"
}

target "webapp" {
  contexts = {
    base = BASE_LATEST
  }
}
```

----------------------------------------

TITLE: Docker Run with --volume (Bind Mount)
DESCRIPTION: Shows the syntax for using the `-v` or `--volume` flag to bind mount a host directory into a container. The command specifies the host path, container path, and optional mount options separated by colons. The options include `ro` (read-only), SELinux labeling (`z`, `Z`), and bind propagation settings.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker run -v <host-path>:<container-path>[:opts]
```

----------------------------------------

TITLE: Docker Build with Multiple Hosts Authentication
DESCRIPTION: This command demonstrates how to set `GIT_AUTH_TOKEN` and `GIT_AUTH_HEADER` secrets on a per-host basis, allowing the use of different authentication parameters for different hostnames, such as GitLab and Gerrit.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#_snippet_14

LANGUAGE: console
CODE:
```
$ export GITLAB_TOKEN=$(cat gitlab-token.txt)
$ export GERRIT_TOKEN=$(cat gerrit-username-password.txt)
$ export GERRIT_SCHEME=basic
$ docker build \
  --secret id=GIT_AUTH_TOKEN.gitlab.com,env=GITLAB_TOKEN \
  --secret id=GIT_AUTH_TOKEN.gerrit.internal.example,env=GERRIT_TOKEN \
  --secret id=GIT_AUTH_HEADER.gerrit.internal.example,env=GERRIT_SCHEME \
  https://gitlab.com/example/todo-app.git
```

----------------------------------------

TITLE: Running bash in an Ubuntu container with a bind mount (PowerShell)
DESCRIPTION: This command starts an interactive bash session in an Ubuntu container, creating a bind mount between the host's current working directory and the /src directory inside the container. The `src` is the current working directory on your host machine (`getting-started-app`), and `target` is where that directory should appear inside the container (`/src`).
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#_snippet_5

LANGUAGE: powershell
CODE:
```
docker run -it --mount "type=bind,src=$($pwd),target=/src" ubuntu bash
```

----------------------------------------

TITLE: Compose YAML Configuration Example
DESCRIPTION: This YAML configuration defines a multi-container application with a frontend and backend service. It includes configurations for networks, volumes, secrets, and external configurations.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/intro/compose-application-model.md#_snippet_4

LANGUAGE: yml
CODE:
```
services:
  frontend:
    image: example/webapp
    ports:
      - "443:8043"
    networks:
      - front-tier
      - back-tier
    configs:
      - httpd-config
    secrets:
      - server-certificate

  backend:
    image: example/database
    volumes:
      - db-data:/etc/data
    networks:
      - back-tier

volumes:
  db-data:
    driver: flocker
    driver_opts:
      size: "10GiB"

configs:
  httpd-config:
    external: true

secrets:
  server-certificate:
    external: true

networks:
  # The presence of these objects is sufficient to define them
  front-tier: {}
  back-tier: {}
```

----------------------------------------

TITLE: Dockerfile for Rails with Thruster/Puma
DESCRIPTION: This Dockerfile sets up a Ruby on Rails application using Thruster and Puma as the application server. It creates a non-root user for security, sets the entrypoint, exposes port 80, and defines the command to start the server.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/containerize.md#_snippet_1

LANGUAGE: Dockerfile
CODE:
```
# Run and own only the runtime files as a non-root user for security
RUN groupadd --system --gid 1000 rails && \
    useradd rails --uid 1000 --gid 1000 --create-home --shell /bin/bash && \
    chown -R rails:rails db log storage tmp
USER 1000:1000

# Entrypoint prepares the database.
ENTRYPOINT ["/rails/bin/docker-entrypoint"]

# Start server via Thruster by default, this can be overwritten at runtime
EXPOSE 80
CMD ["./bin/thrust", "./bin/rails", "server"]
```

----------------------------------------

TITLE: Example .dockerignore file
DESCRIPTION: This .dockerignore file excludes the node_modules directory and all files/directories starting with 'tmp' from the build context, reducing the size of the context and potential cache invalidation.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#_snippet_2

LANGUAGE: Text
CODE:
```
node_modules
tmp*
```

----------------------------------------

TITLE: Running netcat in host network mode
DESCRIPTION: This command starts a netcat listener in a container using host networking.  The container listens on port 8000, which becomes directly accessible on the host's IP address.  The --net=host flag enables host networking.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/host.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker run --rm -it --net=host nicolaka/netshoot nc -lkv 0.0.0.0 8000
```

----------------------------------------

TITLE: Configuring Docker Compose for Spring Boot App
DESCRIPTION: This docker-compose.yaml file defines a service for a Spring Boot application. It specifies the build context, ports, and an example of how to define a PostgreSQL database dependency. It exposes port 8080 for the application.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#_snippet_5

LANGUAGE: YAML
CODE:
```
services:
  server:
    build:
      context: .
    ports:
      - 8080:8080
```

----------------------------------------

TITLE: Bringing Up Docker Compose Service
DESCRIPTION: This command builds the Docker image and starts the services defined in the Docker Compose file in detached mode. The --build flag ensures that the image is rebuilt if the Dockerfile or seed.sql file has been modified.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#_snippet_12

LANGUAGE: console
CODE:
```
$ docker compose up -d --build
```

----------------------------------------

TITLE: Setting Buildx Bake Git SSH - Console
DESCRIPTION: This snippet shows how to specify a list of SSH agent socket filepaths to forward to Bake for authenticating to a Git server when using a remote Bake definition in a private repository using the `BUILDX_BAKE_GIT_SSH` environment variable. The example sets two socket paths.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#_snippet_19

LANGUAGE: console
CODE:
```
$ export BUILDX_BAKE_GIT_SSH=/run/foo/listener.sock,~/.creds/ssh.sock
```

----------------------------------------

TITLE: Specifying Multiple Compose Files
DESCRIPTION: Demonstrates how to use multiple Compose files to define a service, with subsequent files overriding and adding to the configuration of previous files. This allows for modular and customizable service definitions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ docker compose -f compose.yaml -f compose.admin.yaml run backup_db
```

----------------------------------------

TITLE: Dockerfile for PHP Workspace
DESCRIPTION: This Dockerfile configures a workspace container with PHP 8.3, Composer, Node.js, and Xdebug. It installs necessary PHP extensions, configures Xdebug based on environment variables, sets up a non-root user, and installs Node.js using NVM.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/development-setup.md#_snippet_1

LANGUAGE: Dockerfile
CODE:
```
# docker/development/workspace/Dockerfile
# Use the official PHP CLI image as the base
FROM php:8.3-cli

# Set environment variables for user and group ID
ARG UID=1000
ARG GID=1000
ARG NODE_VERSION=22.0.0

# Install system dependencies and build libraries
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    unzip \
    libpq-dev \
    libonig-dev \
    libssl-dev \
    libxml2-dev \
    libcurl4-openssl-dev \
    libicu-dev \
    libzip-dev \
    && docker-php-ext-install -j$(nproc) \
    pdo_mysql \
    pdo_pgsql \
    pgsql \
    opcache \
    intl \
    zip \
    bcmath \
    soap \
    && pecl install redis xdebug \
    && docker-php-ext-enable redis xdebug\
    && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Use ARG to define environment variables passed from the Docker build command or Docker Compose.
ARG XDEBUG_ENABLED
ARG XDEBUG_MODE
ARG XDEBUG_HOST
ARG XDEBUG_IDE_KEY
ARG XDEBUG_LOG
ARG XDEBUG_LOG_LEVEL

# Configure Xdebug if enabled
RUN if [ "${XDEBUG_ENABLED}" = "true" ]; then \
    docker-php-ext-enable xdebug && \
    echo "xdebug.mode=${XDEBUG_MODE}" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.idekey=${XDEBUG_IDE_KEY}" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.log=${XDEBUG_LOG}" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.log_level=${XDEBUG_LOG_LEVEL}" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.client_host=${XDEBUG_HOST}" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini ; \
    echo "xdebug.start_with_request=yes" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini ; \
fi

# If the group already exists, use it; otherwise, create the 'www' group
RUN if getent group ${GID}; then \
      useradd -m -u ${UID} -g ${GID} -s /bin/bash www; \
    else \
      groupadd -g ${GID} www && \
      useradd -m -u ${UID} -g www -s /bin/bash www; \
    fi && \
    usermod -aG sudo www && \
    echo 'www ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Switch to the non-root user to install NVM and Node.js
USER www

# Install NVM (Node Version Manager) as the www user
RUN export NVM_DIR="$HOME/.nvm" && \
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash && \
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" && \
    nvm install ${NODE_VERSION} && \
    nvm alias default ${NODE_VERSION} && \
    nvm use default

# Ensure NVM is available for all future shells
RUN echo 'export NVM_DIR="$HOME/.nvm"' >> /home/www/.bashrc && \
    echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> /home/www/.bashrc && \
    echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' >> /home/www/.bashrc

# Set the working directory
WORKDIR /var/www

# Override the entrypoint to avoid the default php entrypoint
ENTRYPOINT []

# Default command to keep the container running
CMD ["bash"]

```

----------------------------------------

TITLE: Multi-Stage Dockerfile Example
DESCRIPTION: This Dockerfile demonstrates a multi-stage build process. The 'builder' stage uses a JDK to compile a Java application, and the 'final' stage uses a JRE to run the compiled application. This reduces the final image size by excluding build tools from the runtime environment.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/multi-stage-builds.md#_snippet_13

LANGUAGE: dockerfile
CODE:
```
FROM eclipse-temurin:21.0.2_13-jdk-jammy AS builder
WORKDIR /opt/app
COPY .mvn/ .mvn
COPY mvnw pom.xml ./
RUN ./mvnw dependency:go-offline
COPY ./src ./src
RUN ./mvnw clean install

FROM eclipse-temurin:21.0.2_13-jre-jammy AS final
WORKDIR /opt/app
EXPOSE 8080
COPY --from=builder /opt/app/target/*.jar /opt/app/*.jar
ENTRYPOINT ["java", "-jar", "/opt/app/*.jar"]
```

----------------------------------------

TITLE: Setting Environment Variables with .env File
DESCRIPTION: Sets environment variables for a Docker container using the `--env-file` option with the `docker run` command. This allows for setting multiple environment variables from a file, avoiding clutter on the command line. The `.env` file should be in the same directory where the command is executed.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#_snippet_2

LANGUAGE: bash
CODE:
```
$ docker run --env-file .env postgres env
```

----------------------------------------

TITLE: Redeploying a Service with Docker Compose
DESCRIPTION: These commands rebuild the image for a specified service (e.g., `web`) and then recreates the container for that service without recreating its dependencies. This is useful for deploying changes to a single service without affecting others.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/production.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ docker compose build web
$ docker compose up --no-deps -d web
```

----------------------------------------

TITLE: Using exec form of RUN with pipefail
DESCRIPTION: This example demonstrates using the exec form of the RUN instruction to explicitly choose a shell that supports the `pipefail` option, such as bash. This is useful when the default shell (e.g., dash) does not support `pipefail`.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_18

LANGUAGE: dockerfile
CODE:
```
RUN ["/bin/bash", "-c", "set -o pipefail && wget -O - https://some.site | wc -l > /number"]
```

----------------------------------------

TITLE: Dockerfile Example
DESCRIPTION: This is a sample Dockerfile for building a containerized version of the app. It defines the base image, working directory, dependencies, and command to run the application.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/gha.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
{{ $data.Content }}
```

----------------------------------------

TITLE: Configuring a Bind Mount in Docker Compose YAML
DESCRIPTION: This YAML configuration defines a Docker Compose service named 'frontend' that uses a bind mount. The 'volumes' section specifies a bind mount of type 'bind', mapping the host directory './static' to the container path '/opt/app/static'. This allows the container to access and modify files in the host directory.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#_snippet_20

LANGUAGE: yaml
CODE:
```
services:
  frontend:
    image: node:lts
    volumes:
      - type: bind
        source: ./static
        target: /opt/app/static
volumes:
  myapp:
```

----------------------------------------

TITLE: Starting Docker service and running hello-world
DESCRIPTION: Starts the Docker service and then runs the hello-world image to verify the installation. This is an alternative verification method after installing from deb packages.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/ubuntu.md#_snippet_7

LANGUAGE: bash
CODE:
```
sudo service docker start
sudo docker run hello-world
```

----------------------------------------

TITLE: Docker tmpfs Mount Syntax
DESCRIPTION: Illustrates the basic syntax for using the `--tmpfs` flag to mount a tmpfs volume in a Docker container.  The `mount-path` specifies where the tmpfs volume will be mounted within the container. The optional `opts` field allows for specifying mount options.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/tmpfs.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker run --tmpfs <mount-path>[:opts]
```

----------------------------------------

TITLE: Tagging a Docker Image
DESCRIPTION: This command creates a new tag for an existing Docker image. It takes the source image and the new tag as arguments. This does not create a new image, but rather an additional reference to the existing image.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#_snippet_14

LANGUAGE: console
CODE:
```
$ docker image tag docker-gs-ping:latest docker-gs-ping:v1.0
```

----------------------------------------

TITLE: Running Docker Container with Volume
DESCRIPTION: This command demonstrates how to run a Docker container with a volume mount. It uses the `-v` flag to specify the volume name, mount path, and options (read-only in this case).
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker run -v myvolume:/data:ro
```

----------------------------------------

TITLE: Running the .NET application in detached mode
DESCRIPTION: This command runs the .NET application in detached mode using Docker Compose. The `-d` flag runs the application in the background, allowing the user to continue using the terminal. The application can be accessed at http://localhost:8080.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/containerize.md#_snippet_3

LANGUAGE: shell
CODE:
```
$ docker compose up --build -d
```

----------------------------------------

TITLE: Set Git Remote URL
DESCRIPTION: This command sets the remote URL for your local Git repository to the newly created GitHub repository. Replace `your-username` and `your-repository` with your actual GitHub username and repository name.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/configure-ci-cd.md#_snippet_0

LANGUAGE: console
CODE:
```
$ git remote set-url origin https://github.com/your-username/your-repository.git
```

----------------------------------------

TITLE: Mounting a volume using --mount
DESCRIPTION: Mounts a Docker volume to a container using the `--mount` flag.  The `type` is set to `volume`, `src` specifies the volume name, and `dst` specifies the mount path inside the container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker run --mount type=volume,src=<volume-name>,dst=<mount-path>
```

----------------------------------------

TITLE: Initialize Docker Swarm
DESCRIPTION: This command initializes a new Docker Swarm or joins an existing one. It is a prerequisite for using Docker secrets and services.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_15

LANGUAGE: console
CODE:
```
> docker swarm init
```

----------------------------------------

TITLE: Building and Running the C++ Application with Docker Compose
DESCRIPTION: Builds the Docker image and starts the C++ application using Docker Compose. This command compiles the C++ code, creates the Docker image, and starts the container, making the application accessible at http://localhost:8080.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/containerize.md#_snippet_1

LANGUAGE: bash
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Adding Labels to a Node in Docker Swarm
DESCRIPTION: This command adds labels to a Docker Swarm node. The `--label-add` flag is used to specify the labels, which can be a simple key or a key-value pair. Multiple labels can be added in a single command by using the flag multiple times.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/manage-nodes.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker node update --label-add foo --label-add bar=baz node-1

node-1
```

----------------------------------------

TITLE: Installing Docker Engine packages on Ubuntu
DESCRIPTION: This command installs Docker Engine, the Docker CLI, containerd, the Buildx plugin, and the Compose plugin on Ubuntu. It ensures that all necessary components are updated to the latest versions.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/23.0.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
```

----------------------------------------

TITLE: Prune Unused Docker Resources
DESCRIPTION: This command removes all stopped containers, networks not used by at least one container, all dangling images, and unused build cache. It prompts for confirmation before proceeding.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#_snippet_9

LANGUAGE: bash
CODE:
```
$ docker system prune
```

----------------------------------------

TITLE: Running the Docker Container
DESCRIPTION: This command runs the Docker image as a container, configuring network settings, port mapping, and environment variables. It connects the container to the `postgresnet` network, maps port 3001 to 8000, and sets environment variables for database connection and logging.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker run \
  --rm -d \
  --network postgresnet \
  --name docker-develop-rust-container \
  -p 3001:8000 \
  -e PG_DBNAME=example \
  -e PG_HOST=db \
  -e PG_USER=postgres \
  -e PG_PASSWORD=mysecretpassword \
  -e ADDRESS=0.0.0.0:8000 \
  -e RUST_LOG=debug \
  rust-backend-image
```

----------------------------------------

TITLE: Update Dockerfile ENTRYPOINT for Postgres Profile
DESCRIPTION: Modifies the `Dockerfile`'s ENTRYPOINT instruction to pass the `spring.profiles.active=postgres` system property when starting the Java application. This activates the Postgres profile, ensuring the application connects to the configured Postgres database.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#_snippet_1

LANGUAGE: diff
CODE:
```
- ENTRYPOINT [ "java", "org.springframework.boot.loader.launch.JarLauncher" ]
+ ENTRYPOINT [ "java", "-Dspring.profiles.active=postgres", "org.springframework.boot.loader.launch.JarLauncher" ]
```

----------------------------------------

TITLE: Docker Build with GIT_AUTH_TOKEN Secret
DESCRIPTION: This command shows how to authenticate a Docker build with a private Git repository by passing a GitLab access token as a secret named `GIT_AUTH_TOKEN`. This allows the builder to access the private repository.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#_snippet_11

LANGUAGE: console
CODE:
```
$ GIT_AUTH_TOKEN=$(cat gitlab-token.txt) docker build \
  --secret id=GIT_AUTH_TOKEN \
  https://gitlab.com/example/todo-app.git
```

----------------------------------------

TITLE: Running the Application with Uvicorn
DESCRIPTION: This command uses uvicorn to run the FastAPI application defined in app.py, binding it to all interfaces (0.0.0.0) on port 8000. It's the primary command to start the application within the Docker container.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/containerize.md#_snippet_4

LANGUAGE: console
CODE:
```
CMD python3 -m uvicorn app:app --host=0.0.0.0 --port=8000
```

----------------------------------------

TITLE: Multi-Stage Dockerfile Definition
DESCRIPTION: Defines a multi-stage Dockerfile with three stages: base, stage1, and stage2. Each stage is based on the previous one, and executes a simple echo command.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-stage.md#_snippet_7

LANGUAGE: dockerfile
CODE:
```
FROM ubuntu AS base
RUN echo "base"

FROM base AS stage1
RUN echo "stage1"

FROM base AS stage2
RUN echo "stage2"
```

----------------------------------------

TITLE: Setting Default Docker TLS
DESCRIPTION: Creates the .docker directory, copies the CA, certificate, and key files into it, and sets the DOCKER_HOST and DOCKER_TLS_VERIFY environment variables to enable secure Docker connections by default.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#_snippet_19

LANGUAGE: console
CODE:
```
$ mkdir -pv ~/.docker
$ cp -v {ca,cert,key}.pem ~/.docker

$ export DOCKER_HOST=tcp://$HOST:2376 DOCKER_TLS_VERIFY=1
```

----------------------------------------

TITLE: Mounting Existing Notebooks - Mac/Linux
DESCRIPTION: This command runs a JupyterLab container and mounts the current working directory on the host to `/home/jovyan/work` inside the container, allowing access to existing notebooks. It also maps port 8889 on the host to port 8888 on the container and sets an access token.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#_snippet_1

LANGUAGE: console
CODE:
```
docker run --rm -p 8889:8888 -v "$(pwd):/home/jovyan/work" quay.io/jupyter/base-notebook start-notebook.py --NotebookApp.token='my-token'
```

----------------------------------------

TITLE: Defining a Docker Image with Dockerfile
DESCRIPTION: This Dockerfile defines the steps to build a Docker image for a Node.js application. It specifies the base image, working directory, copies the application code, installs dependencies, exposes a port, and defines the command to run the application.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/using-the-build-cache.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```
FROM node:20-alpine
WORKDIR /app
COPY . .
RUN yarn install --production
EXPOSE 3000
CMD ["node", "./src/index.js"]
```

----------------------------------------

TITLE: Adding Labels as a Map in Docker Compose
DESCRIPTION: Adds metadata to the resulting image using a map. This example shows how to add labels with descriptions, departments, and empty values.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#_snippet_21

LANGUAGE: yml
CODE:
```
build:
  context: .
  labels:
    com.example.description: "Accounting webapp"
    com.example.department: "Finance"
    com.example.label-with-empty-value: ""
```

----------------------------------------

TITLE: Listing Docker Images with CLI
DESCRIPTION: This command lists all Docker images available on the local machine. It displays the repository, tag, image ID, creation date, and size of each image.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#_snippet_13

LANGUAGE: console
CODE:
```
$ docker image ls
```

----------------------------------------

TITLE: Disabling Healthcheck - Docker Compose YAML
DESCRIPTION: This snippet shows how to disable a healthcheck, either one defined in the Dockerfile or a previously defined healthcheck in the Compose file, by setting `disable: true`.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_58

LANGUAGE: yaml
CODE:
```
healthcheck:
  disable: true
```

----------------------------------------

TITLE: Executing a build with Docker Buildx Bake
DESCRIPTION: Executes a build using Docker Buildx Bake based on the configuration defined in the `docker-bake.hcl` file. This command simplifies build configuration management by using a structured configuration file.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/bake/index.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker buildx bake
```

----------------------------------------

TITLE: Copy Requirements File in Dockerfile
DESCRIPTION: This instruction copies the `requirements.txt` file from the local machine into the Docker image's `/app` directory. This file lists Python dependencies required by the application, which will be installed in the next step.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#_snippet_9

LANGUAGE: dockerfile
CODE:
```
COPY requirements.txt /app
```

----------------------------------------

TITLE: Docker Run with --mount Example
DESCRIPTION: Illustrates a practical example of using the `--mount` flag to bind the current directory (`.`) on the host to the `/project` directory in the container. It also sets the mount to read-only (`ro`) and uses `rshared` bind propagation.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker run --mount type=bind,src=.,dst=/project,ro,bind-propagation=rshared
```

----------------------------------------

TITLE: Enabling Autolock on Existing Swarm (console)
DESCRIPTION: This command enables autolock on an existing Docker Swarm using `docker swarm update --autolock=true`. It outputs the unlock key, which must be stored securely.  This key is required to unlock the swarm managers after a restart.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm_manager_locking.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker swarm update --autolock=true

Swarm updated.
To unlock a swarm manager after it restarts, run the `docker swarm unlock`
command and provide the following key:

    SWMKEY-1-+MrE8NgAyKj5r3NcR4FiQMdgu+7W72urH0EZeSmP/0Y

Please remember to store this key in a password manager, since without it you
will not be able to restart the manager.
```

----------------------------------------

TITLE: Database Seeding Script
DESCRIPTION: This JavaScript code uses the `dotenv` package to load environment variables, connects to a PostgreSQL database using the `pg` library, and seeds the database with initial data. It defines a `seedData` function that drops and recreates a `todos` table, then inserts sample data.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
require('dotenv').config();  // Load environment variables from .env file
const { Pool } = require('pg');

// Create a new pool using environment variables
const pool = new Pool({
  user: process.env.POSTGRES_USER,
  host: process.env.POSTGRES_DB_HOST,
  database: process.env.POSTGRES_DB,
  port: process.env.POSTGRES_PORT,
  password: process.env.POSTGRES_PASSWORD,
});

const seedData = async () => {
  try {
     // Drop the table if it already exists (optional)
     await pool.query(`DROP TABLE IF EXISTS todos;`);

     // Create the table with the correct structure
     await pool.query(`
       CREATE TABLE todos (
         id SERIAL PRIMARY KEY,
         task VARCHAR(255) NOT NULL,
         completed BOOLEAN DEFAULT false
           );
     `   );

     // Insert seed data
     await pool.query(`
       INSERT INTO todos (task, completed) VALUES
       ('Watch netflix', false),
       ('Finish podcast', false),
       ('Pick up kid', false);
       `);
       console.log('Database seeded successfully!');
     } catch (err) {
       console.error('Error seeding the database', err);
     } finally {
       pool.end();
    }
  };

  // Call the seedData function to run the script
  seedData();
```

----------------------------------------

TITLE: Running Docker Compose
DESCRIPTION: This command starts the services defined in the `compose.yaml` file. It brings up the MySQL database and phpMyAdmin containers, allowing you to access phpMyAdmin in your browser.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#_snippet_19

LANGUAGE: docker
CODE:
```
docker compose up
```

----------------------------------------

TITLE: Ping Docker Container by IP Address
DESCRIPTION: This command tests network connectivity between Docker containers by pinging a specific container using its IP address.  It verifies that containers on the same network can communicate with each other.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#_snippet_7

LANGUAGE: Shell
CODE:
```
# ping -c 2 172.17.0.3
```

----------------------------------------

TITLE: Running Nginx Image with Docker CLI
DESCRIPTION: This command pulls the Nginx image from Docker Hub (if it's not already present locally) and runs it as a container. The -p 8080:80 option maps port 8080 on the host to port 80 on the container, allowing access to the Nginx server. The --rm flag ensures that the container is automatically removed when it is stopped.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/quickstart.md#_snippet_1

LANGUAGE: shell
CODE:
```
docker run -p 8080:80 --rm nginx
```

----------------------------------------

TITLE: Define a Build Target for Local Platform in docker-bake.hcl
DESCRIPTION: This snippet defines a build target named 'bin' in the docker-bake.hcl file. It sets the output attribute to a local filesystem path ('build/bin') and specifies the 'local' platform, ensuring the build targets the OS and architecture of the BuildKit host.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/bake/index.md#_snippet_16

LANGUAGE: hcl
CODE:
```
target "bin" {
  target = "bin"
  output = ["build/bin"]
  platforms = ["local"]
}
```

----------------------------------------

TITLE: Run hello-world image (PowerShell)
DESCRIPTION: This PowerShell command runs the hello-world:nanoserver image to verify the Docker installation. It uses the docker run command to download and run the specified image in a container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/binaries.md#_snippet_10

LANGUAGE: powershell
CODE:
```
PS C:\> &$Env:ProgramFiles\Docker\docker run hello-world:nanoserver
```

----------------------------------------

TITLE: Running a Docker Image in Detached Mode
DESCRIPTION: Runs a Docker image in detached mode, publishing port 8080. The container runs in the background, and the command returns the container ID.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#_snippet_3

LANGUAGE: bash
CODE:
```
docker run -d -p 8080:8080 docker-gs-ping
```

----------------------------------------

TITLE: Postgres ENTRYPOINT helper script
DESCRIPTION: This bash script is used as the ENTRYPOINT for the Postgres Official Image. It initializes the database if necessary and then executes the Postgres server or any other command passed to the container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_28

LANGUAGE: bash
CODE:
```
#!/bin/bash
set -e

if [ "$1" = 'postgres' ]; then
    chown -R postgres "$PGDATA"

    if [ -z "$(ls -A "$PGDATA")" ]; then
        gosu postgres initdb
    fi

    exec gosu postgres "$@"
fi

exec "$@"
```

----------------------------------------

TITLE: Docker Build with Basic Authentication
DESCRIPTION: This command demonstrates how to use Basic authentication with a username and password for a private Git repository by setting the `GIT_AUTH_HEADER` secret to `basic` in addition to the `GIT_AUTH_TOKEN`.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#_snippet_13

LANGUAGE: console
CODE:
```
$ export GIT_AUTH_TOKEN=$(cat gitlab-token.txt)
$ export GIT_AUTH_HEADER=basic
$ docker build \
  --secret id=GIT_AUTH_TOKEN \
  --secret id=GIT_AUTH_HEADER \
  https://gitlab.com/example/todo-app.git
```

----------------------------------------

TITLE: Install Dependencies
DESCRIPTION: Installs the application's dependencies using Yarn. The `--production` flag ensures that only production dependencies are installed, reducing the image size.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/writing-a-dockerfile.md#_snippet_4

LANGUAGE: dockerfile
CODE:
```
RUN yarn install --production
```

----------------------------------------

TITLE: Python Dependencies
DESCRIPTION: This file lists the Python dependencies required for the Flask application, which includes the Flask framework and the Redis client library.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#_snippet_2

LANGUAGE: text
CODE:
```
flask
redis
```

----------------------------------------

TITLE: Command with Shell - YAML
DESCRIPTION: Demonstrates how to run a command within a shell context to utilize shell-specific features like environment variable expansion.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_11

LANGUAGE: YAML
CODE:
```
command: /bin/sh -c 'echo "hello $$HOSTNAME"'
```

----------------------------------------

TITLE: Defining Extra Hosts (Short Syntax) - YAML
DESCRIPTION: This example demonstrates the short syntax for defining extra hosts in a Docker Compose file.  The values must set hostname and IP address for additional hosts in the form of `HOSTNAME=IP`.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_46

LANGUAGE: yaml
CODE:
```
extra_hosts:
  - "somehost=162.242.195.82"
  - "otherhost=50.31.209.229"
  - "myhostv6=::1"
```

----------------------------------------

TITLE: Update restart policy for all running containers
DESCRIPTION: This command ensures all running containers restart. It uses the `docker update` command with the `--restart unless-stopped` flag to set the new restart policy for all containers returned by `docker ps -q`.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/start-containers-automatically.md#_snippet_2

LANGUAGE: bash
CODE:
```
$ docker update --restart unless-stopped $(docker ps -q)
```

----------------------------------------

TITLE: Navigating to the Project Directory
DESCRIPTION: Changes the current directory to the newly cloned getting-started-todo-app directory. This step is necessary to execute subsequent Docker commands within the project context.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/introduction/build-and-push-first-image.md#_snippet_1

LANGUAGE: console
CODE:
```
$ cd getting-started-todo-app
```

----------------------------------------

TITLE: Inspecting WordPress Service Tasks
DESCRIPTION: This command shows the tasks associated with the 'wordpress' service, including their ID, name, image, node, desired state, current state, and any errors or ports.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_45

LANGUAGE: bash
CODE:
```
docker service ps wordpress
```

----------------------------------------

TITLE: Remove Docker Images, Containers, and Volumes
DESCRIPTION: These commands remove all Docker images, containers, and volumes by deleting the /var/lib/docker and /var/lib/containerd directories. This step is crucial for completely removing Docker-related data from the system.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#_snippet_9

LANGUAGE: console
CODE:
```
$ sudo rm -rf /var/lib/docker
```

LANGUAGE: console
CODE:
```
$ sudo rm -rf /var/lib/containerd
```

----------------------------------------

TITLE: Override target configurations from the command line
DESCRIPTION: This console command uses `docker buildx bake` with the `--set` flag to override the `mybuildarg` argument of the "app" target to "bar" and sets the platform to "linux/arm64".
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/overrides.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker buildx bake --set app.args.mybuildarg=bar --set app.platform=linux/arm64 app --print
```

----------------------------------------

TITLE: Applying Kubernetes Pod Configuration
DESCRIPTION: This command applies the Kubernetes pod configuration defined in the 'pod.yaml' file, creating the pod in the Kubernetes cluster.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/orchestration.md#_snippet_6

LANGUAGE: Shell
CODE:
```
$ kubectl apply -f pod.yaml
```

----------------------------------------

TITLE: Creating a Docker Compose File
DESCRIPTION: This Docker Compose file defines a service named 'server' for a Python application. It specifies how to build the service from a Dockerfile in the current directory and maps port 8001 on the host to port 8001 in the container.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#_snippet_4

LANGUAGE: yaml
CODE:
```
# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    ports:
      - 8001:8001
```

----------------------------------------

TITLE: Set Environment Variables in Dockerfile
DESCRIPTION: This instruction sets an environment variable within the Docker image. In this case, it sets the FLASK_APP variable to `hello`, which is used by the Flask framework to locate the application.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/dockerfile.md#_snippet_7

LANGUAGE: Dockerfile
CODE:
```
ENV FLASK_APP=hello
```

----------------------------------------

TITLE: Setting multiple proxy environment variables in systemd in rootless mode
DESCRIPTION: Configures both HTTP and HTTPS proxies for the Docker daemon in rootless mode by setting both HTTP_PROXY and HTTPS_PROXY environment variables in a systemd drop-in configuration file. This ensures that Docker uses the appropriate proxy server for both HTTP and HTTPS requests.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/proxy.md#_snippet_13

LANGUAGE: systemd
CODE:
```
[Service]
Environment="HTTP_PROXY=http://proxy.example.com:3128"
Environment="HTTPS_PROXY=https://proxy.example.com:3129"
```

----------------------------------------

TITLE: Complete Dockerfile
DESCRIPTION: A complete Dockerfile that sets up a Node.js application environment, copies the project files, installs dependencies, and defines the command to run the application.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/writing-a-dockerfile.md#_snippet_6

LANGUAGE: dockerfile
CODE:
```
FROM node:20-alpine
WORKDIR /app
COPY . .
RUN yarn install --production
CMD ["node", "./src/index.js"]
```

----------------------------------------

TITLE: Running Production Environment with Docker Compose
DESCRIPTION: This command builds and starts all services defined in the `compose.prod.yaml` file in detached mode. It provides a scalable and production-ready setup for a Laravel application.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/production-setup.md#_snippet_12

LANGUAGE: bash
CODE:
```
docker compose -f compose.prod.yaml up --build -d
```

----------------------------------------

TITLE: Running the application with Docker Compose
DESCRIPTION: This snippet shows how to use Docker Compose to build and run the application. The `docker compose up --build` command builds the Docker image and starts the containers defined in the `compose.yaml` file. This command is executed in the terminal.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/containerize.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Running Postgres image with a different tool (Bash)
DESCRIPTION: This command runs the Postgres image but overrides the default command with Bash, allowing interactive access to the container's shell.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_32

LANGUAGE: console
CODE:
```
$ docker run --rm -it postgres bash
```

----------------------------------------

TITLE: Running a Docker Container
DESCRIPTION: This command starts a Docker container in detached mode, mapping port 8080 on the host to port 80 on the container. It uses the docker/welcome-to-docker image.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-a-container.md#_snippet_0

LANGUAGE: Shell
CODE:
```
docker run -d -p 8080:80 docker/welcome-to-docker
```

----------------------------------------

TITLE: Running Tests with Docker Compose
DESCRIPTION: This snippet demonstrates how to use Docker Compose to create, run tests in, and destroy an isolated testing environment. It uses `docker compose up` to start the environment in detached mode, executes the tests, and then uses `docker compose down` to remove the environment.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/intro/features-uses.md#_snippet_0

LANGUAGE: shell
CODE:
```
$ docker compose up -d
$ ./run_tests
$ docker compose down
```

----------------------------------------

TITLE: Caching Go Packages in Dockerfile
DESCRIPTION: This example demonstrates how to cache Go packages using the `RUN --mount=type=cache` instruction in a Dockerfile. It mounts the `/root/.cache/go-build` directory as a cache, allowing subsequent builds to reuse cached Go packages. This improves build speed by avoiding redundant downloads and compilations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_41

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM golang
RUN --mount=type=cache,target=/root/.cache/go-build \
  go build ...
```

----------------------------------------

TITLE: Building Multi-Arch Images
DESCRIPTION: This command builds multi-architecture images for both amd64 and arm64 platforms using the specified Buildx builder. It tags the resulting image and pushes it to a container registry.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#_snippet_10

LANGUAGE: console
CODE:
```
$ docker buildx build --builder=kube --platform=linux/amd64,linux/arm64 -t <user>/<image> --push .
```

----------------------------------------

TITLE: Listing Kubernetes Deployments
DESCRIPTION: This command retrieves a list of deployments in the Kubernetes cluster, allowing you to verify that the application's deployments are running.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/deploy.md#_snippet_2

LANGUAGE: Shell
CODE:
```
kubectl get deployments
```

----------------------------------------

TITLE: Removing Docker Compose application with volumes
DESCRIPTION: This command removes the containers, network, and volumes defined in the docker-compose.yml file. The `--volumes` flag ensures that any persistent data volumes are also removed, which is not the default behavior.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-docker-compose.md#_snippet_4

LANGUAGE: console
CODE:
```
docker compose down --volumes
```

----------------------------------------

TITLE: Build updated Docker image
DESCRIPTION: This command builds a new Docker image named 'getting-started' using the Dockerfile in the current directory. It's used after modifying the application source code.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/03_updating_app.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker build -t getting-started .
```

----------------------------------------

TITLE: Basic Network Configuration in Docker Compose
DESCRIPTION: This example demonstrates how to create and connect services to multiple networks in a Docker Compose file. It defines two networks, `front-tier` and `back-tier`, and connects the `frontend` service to both.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/networks.md#_snippet_0

LANGUAGE: yaml
CODE:
```
services:
  frontend:
    image: example/webapp
    networks:
      - front-tier
      - back-tier

networks:
  front-tier:
  back-tier:
```

----------------------------------------

TITLE: Version Pinning with apt-get
DESCRIPTION: This example demonstrates version pinning, which forces the build to retrieve a specific package version regardless of the cache. It updates the package list and installs several packages, including a specific version of package-foo.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_14

LANGUAGE: dockerfile
CODE:
```
RUN apt-get update && apt-get install -y --no-install-recommends \
    package-bar \
    package-baz \
    package-foo=1.3.*
```

----------------------------------------

TITLE: Run Hello-World Docker Image
DESCRIPTION: This command downloads and runs the hello-world image in a Docker container. It verifies that Docker Engine is installed correctly and can run containers. Requires root privileges.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/rhel.md#_snippet_7

LANGUAGE: bash
CODE:
```
sudo docker run hello-world
```

----------------------------------------

TITLE: Defining Database Service and Volume in Docker Compose
DESCRIPTION: This snippet defines a PostgreSQL database service within a Docker Compose file. It configures the image, restart policy, user, secrets, volumes for data persistence, environment variables, exposed port, and health check. It also defines a volume and a secret.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/develop.md#_snippet_0

LANGUAGE: yaml
CODE:
```
services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: production
    ports:
      - 3000:3000

    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt
```

----------------------------------------

TITLE: Specifying Docker CLI Context
DESCRIPTION: Specifies the Docker CLI context using the `docker context` command. This allows switching between different Docker environments.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#_snippet_14

LANGUAGE: bash
CODE:
```
$ docker context use rootless
rootless
Current context is now "rootless"
$ docker run -d -p 8080:80 nginx
```

----------------------------------------

TITLE: Restart paused service update
DESCRIPTION: This command restarts a paused update for the 'redis' service. This is useful when an update has been paused due to a task failure and the issue has been resolved.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/rolling-update.md#_snippet_4

LANGUAGE: Shell
CODE:
```
docker service update redis
```

----------------------------------------

TITLE: Invalidate cache for specific build stage
DESCRIPTION: This console command shows how to use the `--no-cache-filter` option to invalidate the cache for a specific build stage. This allows you to force a re-execution of a specific `RUN` instruction without clearing the entire build cache.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/invalidation.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker build --no-cache-filter install .
```

----------------------------------------

TITLE: Running MySQL Container with Volume (CLI)
DESCRIPTION: This command runs a MySQL container named 'my-mysql', sets the root password and database name via environment variables, and attaches a volume named 'my-db-volume' to the '/var/lib/mysql' directory inside the container. The '-d' flag runs the container in detached mode.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#_snippet_8

LANGUAGE: bash
CODE:
```
$ docker run --name my-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -e MYSQL_DATABASE=mydb -v my-db-volume:/var/lib/mysql -d mysql:latest
```

----------------------------------------

TITLE: Kubernetes Deployment and Services YAML
DESCRIPTION: Defines Kubernetes deployments for the Rust application server and a PostgreSQL database, along with corresponding services to expose them. The server deployment includes an init container to wait for the database to be ready.  The server service uses NodePort to expose the application on the host.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/deploy.md#_snippet_0

LANGUAGE: YAML
CODE:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: server
  name: server
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      service: server
  strategy: {}
  template:
    metadata:
      labels:
        service: server
    spec:
      initContainers:
        - name: wait-for-db
          image: busybox:1.28
          command:
            [
              "sh",
              "-c",
              'until nc -zv db 5432; do echo "waiting for db"; sleep 2; done;',
            ]
      containers:
        - image: DOCKER_USERNAME/REPO_NAME
          name: server
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
              hostPort: 5000
              protocol: TCP
          env:
            - name: ADDRESS
              value: 0.0.0.0:8000
            - name: PG_DBNAME
              value: example
            - name: PG_HOST
              value: db
            - name: PG_PASSWORD
              value: mysecretpassword
            - name: PG_USER
              value: postgres
            - name: RUST_LOG
              value: debug
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: db
  name: db
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      service: db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        service: db
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              value: example
            - name: POSTGRES_PASSWORD
              value: mysecretpassword
            - name: POSTGRES_USER
              value: postgres
          image: postgres
          name: db
          ports:
            - containerPort: 5432
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: server
  name: server
  namespace: default
spec:
  type: NodePort
  ports:
    - name: "5000"
      port: 5000
      targetPort: 8000
      nodePort: 30001
  selector:
    service: server
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: db
  name: db
  namespace: default
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    service: db
status:
  loadBalancer: {}
```

----------------------------------------

TITLE: Copy Requirements File to Docker Image
DESCRIPTION: This instruction copies the requirements.txt file from the local machine to the /app directory in the Docker image. This file contains a list of Python dependencies required by the application, which will be installed in a later step.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#_snippet_9

LANGUAGE: dockerfile
CODE:
```
COPY requirements.txt /app
```

----------------------------------------

TITLE: Defining Restart Policies in Docker Compose
DESCRIPTION: This snippet demonstrates how to define restart policies for containers in a Docker Compose file. The `restart` option specifies the policy that the platform applies on container termination, such as `no`, `always`, `on-failure`, or `unless-stopped`. Each policy dictates when and how the container should be restarted.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_86

LANGUAGE: yml
CODE:
```
restart: "no"
restart: always
restart: on-failure
restart: on-failure:3
restart: unless-stopped
```

----------------------------------------

TITLE: GitHub Actions Workflow Configuration
DESCRIPTION: This YAML configuration defines a GitHub Actions workflow that automatically builds and pushes a Docker image to Docker Hub on every push to the `main` branch. It logs into Docker Hub, sets up Docker Buildx, and then builds and pushes the image for both `linux/amd64` and `linux/arm64` platforms.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/configure-ci-cd.md#_snippet_2

LANGUAGE: yaml
CODE:
```
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
```

----------------------------------------

TITLE: Overriding Buildx Builder Instance - Console
DESCRIPTION: This snippet demonstrates how to override the configured builder instance using the `BUILDX_BUILDER` environment variable. This is the same as using the `docker buildx --builder` CLI flag. The example sets the builder to 'my-builder'.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#_snippet_20

LANGUAGE: console
CODE:
```
$ export BUILDX_BUILDER=my-builder
```

----------------------------------------

TITLE: Initializing Docker Files
DESCRIPTION: This command initializes the Docker environment by creating essential files such as `.dockerignore`, `Dockerfile`, `compose.yaml`, and `README.Docker.md`. It prompts the user for project-specific details like application platform, Rust version, and server port.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker init
Welcome to the Docker Init CLI!

This utility will walk you through creating the following files with sensible defaults for your project:
  - .dockerignore
  - Dockerfile
  - compose.yaml
  - README.Docker.md

Let's get started!

? What application platform does your project use? Rust
? What version of Rust do you want to use? 1.70.0
? What port does your server listen on? 8000
```

----------------------------------------

TITLE: Restrict access to container to a range of IPs using iptables
DESCRIPTION: This iptables rule drops packets from IP addresses outside the range of 192.0.2.1 to 192.0.2.3. It uses the `iprange` module and requires the `ext_if` variable to be set to the external interface of the host.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/packet-filtering-firewalls.md#_snippet_4

LANGUAGE: console
CODE:
```
$ iptables -I DOCKER-USER -m iprange -i ext_if ! --src-range 192.0.2.1-192.0.2.3 -j DROP
```

----------------------------------------

TITLE: Starting Docker service and running hello-world
DESCRIPTION: This snippet starts the Docker service and then runs the hello-world image to verify the installation after installing from deb packages.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#_snippet_7

LANGUAGE: bash
CODE:
```
$ sudo service docker start
$ sudo docker run hello-world
```

----------------------------------------

TITLE: Pulling Cache Locally with Docker Buildx
DESCRIPTION: This command demonstrates how to pull a build cache from a registry using the `docker buildx build` command with the `--cache-from` option. This allows local builds to reuse cached layers, speeding up the build process.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#_snippet_16

LANGUAGE: console
CODE:
```
$ docker buildx build --cache-from type=registry,ref=user/app:buildcache .
```

----------------------------------------

TITLE: Creating Nginx Service with Secrets and Symlink
DESCRIPTION: This command creates a Docker service named 'nginx' that uses the 'nginx:latest' image. It mounts the 'site.key', 'site.crt', and 'site.conf' secrets, publishes port 3000 to port 443, and creates a symbolic link to the 'site.conf' secret in the Nginx configuration directory. It then starts Nginx.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_30

LANGUAGE: bash
CODE:
```
docker service create \
     --name nginx \
     --secret site.key \
     --secret site.crt \
     --secret site.conf \
     --publish published=3000,target=443 \
     nginx:latest \
     sh -c "ln -s /run/secrets/site.conf /etc/nginx/conf.d/site.conf && exec nginx -g 'daemon off;'"
```

----------------------------------------

TITLE: Commit and Push Changes to GitHub
DESCRIPTION: These commands stage all changes, commit them with a message, and push the commit to the `main` branch of the remote GitHub repository. The `-u origin main` option sets the upstream branch for future pushes.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/configure-ci-cd.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ git add -A
$ git commit -m "my commit"
$ git push -u origin main
```

----------------------------------------

TITLE: HTML Template for Docker Config
DESCRIPTION: Defines an HTML template that uses the golang template engine to inject environment variables and service information. The `env` function retrieves the value of the HELLO environment variable, and `.Service.Name` accesses the service name.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#_snippet_20

LANGUAGE: html
CODE:
```
<html lang="en">
  <head><title>Hello Docker</title></head>
  <body>
    <p>Hello {{ env "HELLO" }}! I'm service {{ .Service.Name }}.</p>
  </body>
</html>
```

----------------------------------------

TITLE: Dockerfile with ARG and ENV
DESCRIPTION: This Dockerfile demonstrates how to use ARG to define a build-time variable and then use it to set an environment variable. This allows overriding the environment variable's value during the build process using `--build-arg`.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#_snippet_4

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1

FROM node:20
ARG NODE_ENV=production
ENV NODE_ENV=$NODE_ENV
WORKDIR /app
COPY package*.json ./
RUN npm ci && npm cache clean --force
COPY . .
CMD ["node", "app.js"]
```

----------------------------------------

TITLE: Building a Docker Image
DESCRIPTION: This command builds a Docker image from a Dockerfile in the current directory and tags it with the name `docker-gs-ping`. The `.` specifies the current directory as the build context.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#_snippet_12

LANGUAGE: console
CODE:
```
$ docker build --tag docker-gs-ping .
```

----------------------------------------

TITLE: Configuring Syslog Driver in daemon.json (JSON)
DESCRIPTION: This JSON snippet configures the Docker daemon to use the syslog logging driver and sets the syslog server address to udp://1.2.3.4:1111.  This configuration is placed in /etc/docker/daemon.json (Linux) or C:\ProgramData\docker\config\daemon.json (Windows). Docker must be restarted for changes to take effect.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/syslog.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "log-driver": "syslog",
  "log-opts": {
    "syslog-address": "udp://1.2.3.4:1111"
  }
}
```

----------------------------------------

TITLE: Docker Compose File for OpenTelemetry Setup (YAML)
DESCRIPTION: This Docker Compose file defines services for Prometheus and an OpenTelemetry collector. Prometheus is configured to scrape metrics from the collector, and the collector receives telemetry data from the Docker CLI. This setup allows you to capture and visualize Docker CLI metrics.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/otel.md#_snippet_1

LANGUAGE: yaml
CODE:
```
name: cli-otel
services:
  prometheus:
    image: prom/prometheus
    command:
      - "--config.file=/etc/prometheus/prom.yml"
    ports:
      # Publish the Prometheus frontend on localhost:9091
      - 9091:9090
    restart: always
    volumes:
      # Store Prometheus data in a volume:
      - prom_data:/prometheus
      # Mount the prom.yml config file
      - ./prom.yml:/etc/prometheus/prom.yml
  otelcol:
    image: otel/opentelemetry-collector
    restart: always
    depends_on:
      - prometheus
    ports:
      - 4317:4317
    volumes:
      # Mount the otelcol.yml config file
      - ./otelcol.yml:/etc/otelcol/config.yaml

volumes:
  prom_data:
```

----------------------------------------

TITLE: Define Ollama service with GPU support in docker-compose.yaml
DESCRIPTION: This snippet defines the Ollama service within a `docker-compose.yaml` file, configured to utilize GPU resources. It specifies the image, container name, port mappings, and deployment settings for GPU access. This configuration is suitable for Linux and Windows 11 environments with CUDA-supported GPUs.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/rag-ollama/develop.md#_snippet_2

LANGUAGE: yaml
CODE:
```
ollama:
  image: ollama/ollama
  container_name: ollama
  ports:
    - "8000:8000"
  deploy:
    resources:
      reservations:
        devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]
```

----------------------------------------

TITLE: Dockerfile example with multi-stage builds and SBOM scanning
DESCRIPTION: This Dockerfile demonstrates a multi-stage build process for creating a static website using Hugo. It sets the BUILDKIT_SBOM_SCAN_STAGE argument to true in the hugo stage to ensure that the final SBOM includes information about Alpine Linux and Hugo.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/sbom.md#_snippet_7

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM alpine as hugo
ARG BUILDKIT_SBOM_SCAN_STAGE=true
WORKDIR /src
COPY <<config.yml ./
title: My Hugo website
config.yml
RUN apk add --upgrade hugo && hugo

FROM scratch
COPY --from=hugo /src/public /
```

----------------------------------------

TITLE: Accept traffic based on original destination IP and port using conntrack
DESCRIPTION: This command inserts a rule into the DOCKER-USER chain to accept TCP traffic based on the original destination IP address (198.51.100.2) and port (80) using the conntrack module. This allows filtering based on the original request details before DNAT.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/packet-filtering-firewalls.md#_snippet_1

LANGUAGE: console
CODE:
```
$ sudo iptables -I DOCKER-USER -p tcp -m conntrack --ctorigdst 198.51.100.2 --ctorigdstport 80 -j ACCEPT
```

----------------------------------------

TITLE: Build and Push Docker Image
DESCRIPTION: This configuration builds a Docker image and pushes it to a registry. It uses the docker/build-push-action@v6 GitHub Action. The push parameter ensures images are only pushed when the event is not a pull request. Tags and annotations use outputs from the metadata action.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/gha.md#_snippet_4

LANGUAGE: yaml
CODE:
```
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
```

----------------------------------------

TITLE: Run JupyterLab Container with Volume
DESCRIPTION: This command starts a JupyterLab container with a Docker volume mounted to persist notebooks. The volume is named `jupyter-data` and is mounted at `/home/jovyan/work` inside the container. The container exposes port 8889 and requires a token for access.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker run --rm -p 8889:8888 -v jupyter-data:/home/jovyan/work quay.io/jupyter/base-notebook start-notebook.py --NotebookApp.token='my-token'
```

----------------------------------------

TITLE: Creating a Docker Network
DESCRIPTION: This command creates a Docker network named `sample-app`. This network allows the containers to communicate with each other.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker network create sample-app
```

----------------------------------------

TITLE: Nginx: Creating Symbolic Links for Logs in Dockerfile
DESCRIPTION: This snippet shows how the official nginx image creates symbolic links from the application's log files to `/dev/stdout` and `/dev/stderr` within a Dockerfile. This redirects the application's log output to the container's standard output and standard error streams, making them accessible via `docker logs`.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/_index.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
RUN ln -sf /dev/stdout /var/log/nginx/access.log \
  && ln -sf /dev/stderr /var/log/nginx/error.log
```

----------------------------------------

TITLE: Install Python Dependencies in Dockerfile
DESCRIPTION: This instruction uses `pip` to install Python packages listed in `requirements.txt`. The `--no-cache-dir` option disables caching to reduce the Docker image size.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#_snippet_10

LANGUAGE: dockerfile
CODE:
```
RUN pip install --no-cache-dir -r requirements.txt
```

----------------------------------------

TITLE: Run a Docker container with a read-only volume using `--mount`
DESCRIPTION: This command starts an nginx container with the 'nginx-vol' volume mounted as read-only to the /usr/share/nginx/html directory. The 'readonly' option ensures that the container cannot write to the volume.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_24

LANGUAGE: console
CODE:
```
$ docker run -d \
  --name=nginxtest \
  --mount source=nginx-vol,destination=/usr/share/nginx/html,readonly \
  nginx:latest
```

----------------------------------------

TITLE: Compose file configuration with Compose Watch
DESCRIPTION: Configures the `compose.yaml` file to use Compose Watch for automatic synchronization of file changes to the container. It defines a `web` service with a `watch` configuration that syncs the project directory to the `/code` directory inside the container. It also defines a `redis` service using a pre-built image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#_snippet_7

LANGUAGE: yaml
CODE:
```
services:
  web:
    build: .
    ports:
      - "8000:5000"
    develop:
      watch:
        - action: sync
          path: .
          target: /code
  redis:
    image: "redis:alpine"
```

----------------------------------------

TITLE: Run Application in Background with Docker Compose
DESCRIPTION: This command uses Docker Compose to build and run the application in detached mode (background). The -d option runs the application in the background, allowing the terminal to be used for other tasks.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#_snippet_9

LANGUAGE: Shell
CODE:
```
$ docker compose up --build -d
```

----------------------------------------

TITLE: Create Docker Secrets for TLS Key and Certificate
DESCRIPTION: These commands create Docker secrets named 'site.key' and 'site.crt' from the corresponding files. Docker secrets provide a secure way to manage sensitive data like TLS keys and certificates within a Docker Swarm environment.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#_snippet_32

LANGUAGE: bash
CODE:
```
docker secret create site.key site.key
```

LANGUAGE: bash
CODE:
```
docker secret create site.crt site.crt
```

----------------------------------------

TITLE: Setting Labels on a Service in Compose
DESCRIPTION: This snippet shows how to set labels on a service in a Docker Compose file. Labels are metadata that can be used to provide additional information about the service. These labels are set on the service itself, not on the containers.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#_snippet_1

LANGUAGE: YAML
CODE:
```
services:
  frontend:
    image: example/webapp
    deploy:
      labels:
        com.example.description: "This label will appear on the web service"
```

----------------------------------------

TITLE: Verify Nginx Service with curl
DESCRIPTION: This command uses curl to verify that the Nginx service is operational and serving content over HTTPS. It specifies a custom CA certificate to trust the self-signed certificate used by the service.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#_snippet_38

LANGUAGE: bash
CODE:
```
curl --cacert root-ca.crt https://0.0.0.0:3000
```

----------------------------------------

TITLE: Perform Named Entity Recognition
DESCRIPTION: The nlp model processes the user-input text, creating a Doc object which contains various NLP attributes, including identified entities. The code then iterates over the entities found in the text and prints the entity text and its type (like PERSON, ORG, or GPE).
SOURCE: https://github.com/docker/docs/blob/main/content/guides/named-entity-recognition.md#_snippet_6

LANGUAGE: python
CODE:
```
doc = nlp(input_text)

for ent in doc.ents:
   print(f"Entity: {ent.text}, Type: {ent.label_}")
```

----------------------------------------

TITLE: Build from directory with Dockerfile
DESCRIPTION: This example shows how to specify a relative path to a directory containing a Dockerfile as the build context.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#_snippet_1

LANGUAGE: yaml
CODE:
```
services:
  webapp:
    build: ./dir
```

----------------------------------------

TITLE: Compose file with development and database services
DESCRIPTION: This Compose file defines services for a .NET application and a PostgreSQL database. It includes configurations for building the application, setting up environment variables, managing secrets, and defining health checks. Compose Watch is configured for automatic rebuilding during development.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/develop.md#_snippet_13

LANGUAGE: YAML
CODE:
```
services:
  server:
    build:
      context: .
      target: development
    ports:
      - 8080:8080
    depends_on:
      db:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: .
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt
```

----------------------------------------

TITLE: Initializing a Docker Swarm
DESCRIPTION: This command initializes a new Docker swarm on the current node, making it a manager node. It configures the swarm with default settings, including a self-signed root CA and tokens for worker and manager nodes.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-mode.md#_snippet_0

LANGUAGE: Docker
CODE:
```
docker swarm init
```

----------------------------------------

TITLE: Database Password File Content
DESCRIPTION: This text snippet shows the content of the `password.txt` file, which stores the password for the PostgreSQL database. This file is referenced in the `compose.yaml` file as a secret, allowing the database to authenticate without exposing the password directly in the configuration.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#_snippet_8

LANGUAGE: text
CODE:
```
mysecretpassword
```

----------------------------------------

TITLE: Creating a service with placement constraints
DESCRIPTION: This command creates a Docker service named 'my-nginx' with 5 replicas. It uses a placement constraint to ensure that the service only runs on nodes with the label 'region' set to 'east'.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#_snippet_33

LANGUAGE: Shell
CODE:
```
docker service create \
  --name my-nginx \
  --replicas 5 \
  --constraint node.labels.region==east \
  nginx
```

----------------------------------------

TITLE: Setting Kernel Parameters (sysctls) in Docker Compose
DESCRIPTION: Defines kernel parameters to set in the container, using either an array or a map.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_94

LANGUAGE: yml
CODE:
```
sysctls:
  net.core.somaxconn: 1024
  net.ipv4.tcp_syncookies: 0
```

----------------------------------------

TITLE: Configuring Secrets in Docker Compose
DESCRIPTION: This Docker Compose configuration sets up a WordPress site with a MySQL database, utilizing Docker Secrets to manage database passwords. It defines services for the database and WordPress, specifying environment variables that point to secret files mounted by Docker.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_54

LANGUAGE: yaml
CODE:
```
services:
   db:
     image: mysql:latest
     volumes:
       - db_data:/var/lib/mysql
     environment:
       MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD_FILE: /run/secrets/db_password
     secrets:
       - db_root_password
       - db_password

   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - "8000:80"
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD_FILE: /run/secrets/db_password
     secrets:
       - db_password


secrets:
   db_password:
     file: db_password.txt
   db_root_password:
     file: db_root_password.txt

volumes:
    db_data:
```

----------------------------------------

TITLE: Run database migrations
DESCRIPTION: This command executes database migrations within the running web container. It uses the `rake db:migrate` task to update the database schema.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/develop.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker exec -it docker-ruby-on-rails-web-1 rake db:migrate RAILS_ENV=test
```

----------------------------------------

TITLE: Defining Docker volumes for data persistence
DESCRIPTION: Docker volumes are used to persist data in both development and production environments. In the `compose.*.yaml` file, volumes like `postgres-data-*` are defined to store PostgreSQL data, ensuring data retention even if the container restarts. Named volumes can be defined for other services requiring data persistence.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/common-questions.md#_snippet_1

LANGUAGE: yaml
CODE:
```
postgres-data-*
```

----------------------------------------

TITLE: Apply Kubernetes Pod Configuration
DESCRIPTION: Applies the Kubernetes pod configuration defined in the `pod.yaml` file using the `kubectl apply` command. This command creates the pod within the Kubernetes cluster.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/orchestration.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ kubectl apply -f pod.yaml
```

----------------------------------------

TITLE: Mounting Volumes from Other Services/Containers in Docker Compose
DESCRIPTION: This YAML snippet demonstrates how to mount volumes from another service or container using the `volumes_from` directive. It shows examples with and without specifying read-only (`ro`) or read-write (`rw`) access. It also illustrates how to mount volumes from a container not managed by Compose using the `container:` prefix.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_102

LANGUAGE: yaml
CODE:
```
volumes_from:
  - service_name
  - service_name:ro
  - container:container_name
  - container:container_name:rw
```

----------------------------------------

TITLE: Multi-Stage Dockerfile with Named Stages
DESCRIPTION: This Dockerfile improves upon the previous example by naming the build stages. The first stage is named 'build', and the COPY instruction uses this name to reference the stage, making the Dockerfile more robust to changes in instruction order.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-stage.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM golang:{{% param "example_go_version" %}} AS build
WORKDIR /src
COPY <<EOF /src/main.go
package main

import "fmt"

func main() {
  fmt.Println("hello, world")
}
EOF
RUN go build -o /bin/hello ./main.go

FROM scratch
COPY --from=build /bin/hello /bin/hello
CMD ["/bin/hello"]
```

----------------------------------------

TITLE: Exporting OCI Media Type Cache
DESCRIPTION: This command builds a Docker image and pushes it to a registry, exporting the cache using OCI media types. This allows for interoperability with OCI-compliant registries and tools.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/_index.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker buildx build --push -t <registry>/<image> \
  --cache-to type=registry,ref=<registry>/<cache-image>,oci-mediatypes=true \
  --cache-from type=registry,ref=<registry>/<cache-image> .
```

----------------------------------------

TITLE: Dockerfile for PHP-FPM Development with Xdebug
DESCRIPTION: This Dockerfile extends the production PHP-FPM image to include Xdebug for debugging and configures user permissions for local development. It installs Xdebug, sets up user and group permissions, and configures the entrypoint script.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/development-setup.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
# Builds a dev-only layer on top of the production image
FROM production AS development

# Use ARGs to define environment variables passed from the Docker build command or Docker Compose.
ARG XDEBUG_ENABLED=true
ARG XDEBUG_MODE=develop,coverage,debug,profile
ARG XDEBUG_HOST=host.docker.internal
ARG XDEBUG_IDE_KEY=DOCKER
ARG XDEBUG_LOG=/dev/stdout
ARG XDEBUG_LOG_LEVEL=0

USER root

# Configure Xdebug if enabled
RUN if [ "${XDEBUG_ENABLED}" = "true" ]; then \
    pecl install xdebug && \
    docker-php-ext-enable xdebug && \
    echo "xdebug.mode=${XDEBUG_MODE}" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.idekey=${XDEBUG_IDE_KEY}" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.log=${XDEBUG_LOG}" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.log_level=${XDEBUG_LOG_LEVEL}" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.client_host=${XDEBUG_HOST}" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini ; \
    echo "xdebug.start_with_request=yes" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini ; \
fi

# Add ARGs for syncing permissions
ARG UID=1000
ARG GID=1000

# Create a new user with the specified UID and GID, reusing an existing group if GID exists
RUN if getent group ${GID}; then \
      group_name=$(getent group ${GID} | cut -d: -f1); \
      useradd -m -u ${UID} -g ${GID} -s /bin/bash www; \
    else \
      groupadd -g ${GID} www && \
      useradd -m -u ${UID} -g www -s /bin/bash www; \
      group_name=www; \
    fi

# Dynamically update php-fpm to use the new user and group
RUN sed -i "s/user = www-data/user = www/g" /usr/local/etc/php-fpm.d/www.conf && \
    sed -i "s/group = www-data/group = $group_name/g" /usr/local/etc/php-fpm.d/www.conf


# Set the working directory
WORKDIR /var/www

# Copy the entrypoint script
COPY ./docker/development/php-fpm/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Switch back to the non-privileged user to run the application
USER www-data

# Change the default command to run the entrypoint script
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Expose port 9000 and start php-fpm server
EXPOSE 9000
CMD ["php-fpm"]
```

----------------------------------------

TITLE: Creating a new file inside the mounted directory
DESCRIPTION: This command creates a new file named myfile.txt inside the /src directory in the container, which will also appear in the host's getting-started-app directory due to the bind mount.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#_snippet_10

LANGUAGE: bash
CODE:
```
touch myfile.txt
```

LANGUAGE: bash
CODE:
```
ls
```

----------------------------------------

TITLE: Copying from an External Image
DESCRIPTION: This Dockerfile instruction copies the nginx.conf file from the nginx:latest image into the current image. This allows you to reuse configurations or other artifacts from existing images.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-stage.md#_snippet_5

LANGUAGE: dockerfile
CODE:
```
COPY --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf
```

----------------------------------------

TITLE: Registry Cache Configuration with GitHub Actions
DESCRIPTION: This workflow demonstrates how to configure registry cache for Docker builds within a GitHub Actions workflow. It logs into Docker Hub, sets up Docker Buildx, and then builds and pushes a Docker image, utilizing registry cache for faster subsequent builds. This example uses `max` cache mode by pushing the image and the cache separately using the registry cache exporter with the `cache-to` option.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/cache.md#_snippet_1

LANGUAGE: yaml
CODE:
```
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: user/app:latest
          cache-from: type=registry,ref=user/app:buildcache
          cache-to: type=registry,ref=user/app:buildcache,mode=max
```

----------------------------------------

TITLE: Docker Compose Configuration for Development
DESCRIPTION: This docker-compose.yaml configures the 'server' service to build from the 'development' stage of the Dockerfile and exposes ports 8080 and 8000. It also defines a 'db' service using a postgres image.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#_snippet_5

LANGUAGE: yaml
CODE:
```
services:
  server:
    build:
      context: .
      target: development
    ports:
      - 8080:8080
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_URL=jdbc:postgresql://db:5432/petclinic
  db:
    image: postgres
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=petclinic
      - POSTGRES_USER=petclinic
      - POSTGRES_PASSWORD=petclinic
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "petclinic"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
```

----------------------------------------

TITLE: Enabling Docker Service on Boot
DESCRIPTION: Configures the Docker service to start automatically on system boot using systemd.  Ensures Docker is running after a reboot.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/linux-postinstall.md#_snippet_6

LANGUAGE: bash
CODE:
```
$ sudo systemctl enable docker.service
```

----------------------------------------

TITLE: Create a Redis Service with Secret Access
DESCRIPTION: Creates a Redis service named 'redis' and grants it access to the 'my_secret_data' secret. The service uses the 'redis:alpine' image. By default, the secret is mounted at /run/secrets/<secret_name> inside the container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker service  create --name redis --secret my_secret_data redis:alpine
```

----------------------------------------

TITLE: Running a Docker Image with Port Publishing
DESCRIPTION: Runs a Docker image and publishes port 8080 from the container to port 8080 on the host. This allows access to the application from the host machine.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#_snippet_2

LANGUAGE: bash
CODE:
```
docker run --publish 8080:8080 docker-gs-ping
```

----------------------------------------

TITLE: Deploy application to Kubernetes
DESCRIPTION: Deploys the application to Kubernetes using the `kubectl apply` command. This command creates the Deployment and Service defined in the YAML file.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/php/deploy.md#_snippet_1

LANGUAGE: console
CODE:
```
$ kubectl apply -f docker-php-kubernetes.yaml
```

----------------------------------------

TITLE: Building Docker image from Git repository
DESCRIPTION: This command demonstrates how to build a Docker image directly from a Git repository. The builder clones the repository and uses it as the build context.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#_snippet_7

LANGUAGE: console
CODE:
```
$ docker build https://github.com/user/myrepo.git
```

----------------------------------------

TITLE: Start Container with Volume Driver and Options
DESCRIPTION: This example shows how to start a Docker container and create a volume using a volume driver, all within the `docker run` command. It uses the `--mount` flag to specify the volume driver and its options.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_32

LANGUAGE: console
CODE:
```
$ docker run -d \
  --name rclone-container \
  --mount type=volume,volume-driver=rclone,src=rclonevolume,target=/app,volume-opt=type=sftp,volume-opt=path=remote, volume-opt=sftp-host=1.2.3.4,volume-opt=sftp-user=user,volume-opt=-o "sftp-password=$(cat file_containing_password_for_remote_host)" \
  nginx:latest
```

----------------------------------------

TITLE: Building Docker Image for Basic NLP Application
DESCRIPTION: This command builds a Docker image named 'basic-nlp' from the Dockerfile in the current directory. The `-t` flag assigns the name, and the `.` specifies the build context as the current directory, which is sent to the Docker daemon.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#_snippet_15

LANGUAGE: docker
CODE:
```
docker build -t basic-nlp .
```

----------------------------------------

TITLE: Using Here Documents in RUN Instruction
DESCRIPTION: This example shows how to use a here document to execute multiple commands within a RUN instruction without using pipeline operators. It updates the package list and installs several packages.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_10

LANGUAGE: dockerfile
CODE:
```
RUN <<EOF
apt-get update
apt-get install -y --no-install-recommends \
    package-bar \
    package-baz \
    package-foo
EOF
```

----------------------------------------

TITLE: Run Docker image with port publishing
DESCRIPTION: Runs the `docker-rust-image` and publishes port 8000 of the container to port 3001 on the host. This allows external access to the application running inside the container.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/run-containers.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker run --publish 3001:8000 docker-rust-image
```

----------------------------------------

TITLE: Base Dockerfile for building a Go application
DESCRIPTION: This Dockerfile builds a Go application. It uses a multi-stage build, first building the application using the `golang:alpine` image, and then copying the built binary to a minimal `alpine` image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#_snippet_14

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM golang:alpine AS build
WORKDIR /app
ADD https://github.com/dvdksn/buildme.git#eb6279e0ad8a10003718656c6867539bd9426ad8 .
RUN go build -o server .

FROM alpine
COPY --from=build /app/server /server
ENTRYPOINT ["/server"]
```

----------------------------------------

TITLE: Docker CLI Login with Registry Address
DESCRIPTION: This example demonstrates the correct way to use the `docker login` command with a registry address. It highlights a known issue where including a repository/image name in the registry address can lead to authentication problems. The recommended usage is to specify only the registry hostname and optionally a port.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#_snippet_4

LANGUAGE: docker
CODE:
```
docker login [registry address]
```

----------------------------------------

TITLE: Update compose.yaml for React tests
DESCRIPTION: Adds a new service named `react-test` to `compose.yaml` to run the test suite in an isolated containerized environment. It reuses the `Dockerfile.dev` and overrides the default command to run tests with `npm run test`.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/run-tests.md#_snippet_3

LANGUAGE: yaml
CODE:
```
services:
  react-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    develop:
      watch:
        - action: sync
          path: .
          target: /app

  react-prod:
    build:
      context: .
      dockerfile: Dockerfile
    image: docker-reactjs-sample
    ports:
      - "8080:8080"

  react-test:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: ["npm", "run", "test"]
```

----------------------------------------

TITLE: Dockerfile with Pre-defined Build Arguments
DESCRIPTION: This Dockerfile shows how to use pre-defined build arguments like `BUILDPLATFORM` and `TARGETOS` for multi-platform builds. It demonstrates declaring `TARGETOS` to inherit it into a stage and using it to set the `GOOS` environment variable for cross-compilation.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#_snippet_9

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1

# Pre-defined build arguments are available in the global scope
FROM --platform=$BUILDPLATFORM golang
# To inherit them to a stage, declare them with ARG
ARG TARGETOS
RUN GOOS=$TARGETOS go build -o ./exe .
```

----------------------------------------

TITLE: Listing Docker Images
DESCRIPTION: This command lists all Docker images available on the system, displaying their repository, tag, image ID, creation date, and size. It requires Docker to be installed and running.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-an-image.md#_snippet_2

LANGUAGE: console
CODE:
```
docker image ls
```

----------------------------------------

TITLE: Run Bun App in Detached Mode
DESCRIPTION: Runs the Bun application in detached mode using Docker Compose. The `-d` flag runs the container in the background, freeing up the terminal.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/containerize.md#_snippet_3

LANGUAGE: bash
CODE:
```
$ docker compose up --build -d
```

----------------------------------------

TITLE: Listing Docker services
DESCRIPTION: This command lists the services running in a Docker Swarm. It shows the service ID, name, mode, number of replicas, image, and ports.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/swarm-deploy.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ docker service ls
```

----------------------------------------

TITLE: Specify Base Image in Dockerfile
DESCRIPTION: This command sets the foundation for the Docker image build using a lightweight version of Python 3.8. Using a slim image reduces the overall size of the Docker image, leading to quicker downloads and less surface area for security vulnerabilities.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#_snippet_13

LANGUAGE: dockerfile
CODE:
```
FROM python:3.8-slim
```

----------------------------------------

TITLE: Verifying MySQL Table Data in Docker Container Output
DESCRIPTION: This is the expected output from the SQL query executed inside the Docker container. It shows the structure of the table, including the column names and a sample value, confirming that the table exists and contains data.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#_snippet_15

LANGUAGE: SQL
CODE:
```
column_name
value
```

----------------------------------------

TITLE: Base image instruction for Dockerfile
DESCRIPTION: This Dockerfile instruction specifies the base image to use for building the container image. Subsequent instructions will be executed within this base image environment.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```

```

----------------------------------------

TITLE: Running Docker Compose
DESCRIPTION: This command builds and starts the services defined in the docker-compose.yaml file. The `--build` flag ensures that the Docker image is built before starting the containers.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/containerize.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Creating a Macvlan Network in 802.1Q Trunk Bridge Mode
DESCRIPTION: This command creates a Macvlan network in 802.1Q trunk bridge mode.  Docker interprets the parent interface name (e.g., `eth0.50`) as a sub-interface and creates it automatically. This allows for more granular control over routing and filtering.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/macvlan.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker network create -d macvlan \
    --subnet=192.168.50.0/24 \
    --gateway=192.168.50.1 \
    -o parent=eth0.50 macvlan50
```

----------------------------------------

TITLE: Mount Secrets in Dockerfile (Dockerfile)
DESCRIPTION: This example demonstrates how to mount secrets defined in the HCL file within a Dockerfile using the `--mount` flag. It mounts the `aws` secret to `/root/.aws/credentials` and the `KUBECONFIG` secret as an environment variable.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_45

LANGUAGE: dockerfile
CODE:
```
RUN --mount=type=secret,id=aws,target=/root/.aws/credentials \
    aws cloudfront create-invalidation ...
RUN --mount=type=secret,id=KUBECONFIG,env=KUBECONFIG \
    helm upgrade --install
```

----------------------------------------

TITLE: GitHub Actions Workflow Configuration
DESCRIPTION: This YAML configuration defines a GitHub Actions workflow that triggers on pushes to the `main` branch. It logs into Docker Hub, sets up Docker Buildx, builds and tests the Docker image, and then builds and pushes the final image to Docker Hub with specified platforms and tags. The workflow uses secrets and variables defined in the GitHub repository settings for authentication.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/configure-ci-cd.md#_snippet_2

LANGUAGE: YAML
CODE:
```
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test
        uses: docker/build-push-action@v6
        with:
          target: test
          load: true

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          target: final
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
```

----------------------------------------

TITLE: Initializing Docker Environment with Docker Init
DESCRIPTION: This command initializes a Docker environment in the current directory using Docker Init. It automates the creation of essential Docker files such as .dockerignore, Dockerfile, compose.yaml, and README.Docker.md, streamlining the setup process for containerizing applications.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker init
Welcome to the Docker Init CLI!

This utility will walk you through creating the following files with sensible defaults for your project:
  - .dockerignore
  - Dockerfile
  - compose.yaml
  - README.Docker.md

Let's get started!

? What application platform does your project use? Python
? What version of Python do you want to use? 3.11.4
? What port do you want your app to listen on? 8001
? What is the command to run your app? python3 -m uvicorn app:app --host=0.0.0.0 --port=8001
```

----------------------------------------

TITLE: Running Compose Watch from the command line
DESCRIPTION: Demonstrates how to run the application with Compose Watch using the `docker compose watch` command. This command builds and launches the app, enabling file watch mode for automatic updates.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker compose watch
[+] Running 2/2
 ✔ Container docs-redis-1 Created                                                                                                                                                                                                        0.0s
 ✔ Container docs-web-1    Recreated                                                                                                                                                                                                      0.1s
Attaching to redis-1, web-1
         ⦿ watch enabled
...
```

----------------------------------------

TITLE: Configuring Ports in Docker Compose (Short Syntax)
DESCRIPTION: This snippet demonstrates the short syntax for configuring port mappings in a Docker Compose file. The short syntax uses a colon-separated string to define the host IP, host port, and container port. Examples include mapping single ports, port ranges, and specifying protocols.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_81

LANGUAGE: yml
CODE:
```
ports:
  - "3000"
  - "3000-3005"
  - "8000:8000"
  - "9090-9091:8080-8081"
  - "49100:22"
  - "8000-9000:80"
  - "127.0.0.1:8001:8001"
  - "127.0.0.1:5000-5010:5000-5010"  
  - "::1:6000:6000"   
  - "[::1]:6001:6001" 
  - "6060:6060/udp"    
```

----------------------------------------

TITLE: Mounting secret with same name as environment variable using CLI
DESCRIPTION: This command demonstrates how to mount a secret using the environment variable name as the secret ID. The value of the `API_TOKEN` variable is mounted to `/run/secrets/API_TOKEN` in the build container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker build --secret id=API_TOKEN .
```

----------------------------------------

TITLE: Generating Docker Bash completion script
DESCRIPTION: Generate the Bash completion script using the `docker completion` command and save it to the appropriate directory for Bash completion scripts. This allows Bash to provide tab completion for Docker commands and options.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/completion.md#_snippet_3

LANGUAGE: console
CODE:
```
$ mkdir -p ~/.local/share/bash-completion/completions
$ docker completion bash > ~/.local/share/bash-completion/completions/docker
```

----------------------------------------

TITLE: Annotate Image Manifest
DESCRIPTION: Adds the annotation `foo=bar` to the image manifest during the Docker build process.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/annotations.md#_snippet_4

LANGUAGE: Console
CODE:
```
$ docker build --annotation "manifest:foo=bar" .
```

----------------------------------------

TITLE: Using Python cache mount in Dockerfile
DESCRIPTION: This example shows how to use a cache mount with pip to cache package downloads. The `pip install` command will use the specified cache directory, improving build times by reusing cached packages.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#_snippet_10

LANGUAGE: Dockerfile
CODE:
```
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install -r requirements.txt
```

----------------------------------------

TITLE: Specifying Bake definition from remote Git repository
DESCRIPTION: This command specifies which Bake definition to use from a remote Git repository using the `--file` or `-f` flag.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/remote-definition.md#_snippet_5

LANGUAGE: console
CODE:
```
docker buildx bake -f bake.hcl "https://github.com/crazy-max/buildx.git#remote-with-local"
```

----------------------------------------

TITLE: Dockerfile example to retrieve Git information during build
DESCRIPTION: This Dockerfile shows how to access Git information during the build process by keeping the .git directory. It uses a mount to access the source code and then executes a command to retrieve the Git revision.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#_snippet_10

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM alpine
WORKDIR /src
RUN --mount=target=. \
  make REVISION=$(git rev-parse HEAD) build
```

----------------------------------------

TITLE: Verifying User Existence
DESCRIPTION: This command verifies the existence of a user and retrieves their user ID (UID), group ID (GID), and group memberships. It's used to confirm that the user exists before configuring user namespace remapping.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/userns-remap.md#_snippet_0

LANGUAGE: console
CODE:
```
$ id testuser

uid=1001(testuser) gid=1001(testuser) groups=1001(testuser)
```

----------------------------------------

TITLE: Stop Application with Docker Compose
DESCRIPTION: This command stops and removes the containers, networks, and volumes created by the docker-compose.yaml file. It effectively shuts down the application.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#_snippet_10

LANGUAGE: Shell
CODE:
```
$ docker compose down
```

----------------------------------------

TITLE: Run Docker Compose Watch
DESCRIPTION: This command starts Docker Compose Watch, which monitors the application's source files for changes and automatically updates the running containers. It requires a `compose.yaml` file with the `develop` section configured.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/develop.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker compose watch
```

----------------------------------------

TITLE: Initializing Docker Swarm with Default Address Pool
DESCRIPTION: This command initializes a Docker Swarm with a specified default address pool. The `--default-addr-pool` option defines the IP address range in CIDR notation from which Docker allocates subnet addresses for overlay networks. This is useful when the default `10.0.0.0/8` range conflicts with existing networks.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-mode.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker swarm init --default-addr-pool <IP range in CIDR> [--default-addr-pool <IP range in CIDR> --default-addr-pool-mask-length <CIDR value>]
```

----------------------------------------

TITLE: Enabling BuildKit in Docker Daemon Configuration
DESCRIPTION: This JSON configuration enables BuildKit by default in the Docker daemon.  It requires editing the /etc/docker/daemon.json file and restarting the Docker daemon for the changes to take effect.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/_index.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "features": {
    "buildkit": true
  }
}
```

----------------------------------------

TITLE: GitHub Actions workflow for building and pushing multi-platform images
DESCRIPTION: This workflow builds multi-platform Docker images and pushes them to both Docker Hub and GitHub Container Registry (GHCR). It uses the docker/login-action, docker/setup-qemu-action, docker/setup-buildx-action, and docker/build-push-action GitHub Actions.  It assumes that DOCKERHUB_USERNAME, DOCKERHUB_TOKEN, and GITHUB_TOKEN secrets are defined.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/copy-image-registries.md#_snippet_0

LANGUAGE: YAML
CODE:
```
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            user/app:latest
            user/app:1.0.0
```

----------------------------------------

TITLE: Mount Volume Subdirectory
DESCRIPTION: This example demonstrates how to create a Docker volume, create subdirectories within it, and mount those subdirectories to different containers. It ensures that each container writes logs to its own subdirectory within the shared volume.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_28

LANGUAGE: console
CODE:
```
$ docker volume create logs
$ docker run --rm \
  --mount src=logs,dst=/logs \
  alpine mkdir -p /logs/app1 /logs/app2
$ docker run -d \
  --name=app1 \
  --mount src=logs,dst=/var/log/app1,volume-subpath=app1 \
  app1:latest
$ docker run -d \
  --name=app2 \
  --mount src=logs,dst=/var/log/app2,volume-subpath=app2 \
  app2:latest
```

----------------------------------------

TITLE: Build with named context from local directory
DESCRIPTION: This command shows how to build a Docker image with a named context sourced from a local directory. It uses the `--build-context` flag to specify the path to the directory for the 'config' context.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#_snippet_32

LANGUAGE: console
CODE:
```
$ docker build --build-context config=./configs/prod .
```

----------------------------------------

TITLE: Setting up Docker Compose with the latest version
DESCRIPTION: This snippet demonstrates how to set up Docker Compose using the `docker/setup-compose-action` action, ensuring the latest version is installed. This is important for compatibility with the GitHub Cache service API v2.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/cache.md#_snippet_4

LANGUAGE: yaml
CODE:
```
- name: Set up Docker Compose
  uses: docker/setup-compose-action@v1
  with:
   version: latest
```

----------------------------------------

TITLE: Setting Experimental BuildKit Source Policy - Console
DESCRIPTION: This snippet demonstrates how to specify a BuildKit source policy file for creating reproducible builds with pinned dependencies using the `EXPERIMENTAL_BUILDKIT_SOURCE_POLICY` environment variable. The example sets the policy file to './policy.json'.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#_snippet_15

LANGUAGE: console
CODE:
```
$ export EXPERIMENTAL_BUILDKIT_SOURCE_POLICY=./policy.json
```

----------------------------------------

TITLE: Creating the Docker Group
DESCRIPTION: Creates a 'docker' group to allow users to run Docker commands without sudo. This is a prerequisite for managing Docker as a non-root user.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/linux-postinstall.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ sudo groupadd docker
```

----------------------------------------

TITLE: Configuring Database Service in Compose YAML
DESCRIPTION: This YAML snippet configures a database service (PostgreSQL) within a Docker Compose setup. It defines the service, sets environment variables for database access, configures a volume for persistent data storage, and specifies a health check to ensure the database is ready before the application starts. It also defines secrets for managing the database password.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#_snippet_7

LANGUAGE: yaml
CODE:
```
services:
  server:
    build:
      context: .
    ports:
      - 8001:8001
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt
```

----------------------------------------

TITLE: Defining Docker Compose Service
DESCRIPTION: This Docker Compose file defines a PostgreSQL service named 'db'. It builds the image from the Dockerfile in the current context, sets environment variables for the database user, password, and database name, maps port 5432, and defines a volume for persistent data storage.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#_snippet_11

LANGUAGE: YAML
CODE:
```
services:
  db:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: my_postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: sampledb
    ports:
      - "5432:5432"
    volumes:
      - data_sql:/var/lib/postgresql/data   # Persistent data storage

volumes:
  data_sql:
```

----------------------------------------

TITLE: Setting and Unsetting Environment Variables in Dockerfile
DESCRIPTION: This Dockerfile demonstrates how environment variables can be unintentionally persisted across layers. The ADMIN_USER variable is set and then unset, but the value remains in the image due to layer caching.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_20

LANGUAGE: dockerfile
CODE:
```
FROM alpine
ENV ADMIN_USER="mark"
RUN echo $ADMIN_USER > ./mark
RUN unset ADMIN_USER
```

----------------------------------------

TITLE: Running a Container with a Volume Mount
DESCRIPTION: This command runs a Docker container and mounts the `log-data` volume to the `/logs` directory inside the container. Any data written to `/logs` will be persisted in the volume.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#_snippet_1

LANGUAGE: bash
CODE:
```
$ docker run -d -p 80:80 -v log-data:/logs docker/welcome-to-docker
```

----------------------------------------

TITLE: Update Docker Hub description using GitHub Actions
DESCRIPTION: This workflow defines a CI pipeline that builds and pushes a Docker image to Docker Hub and updates the repository description. It uses actions for logging into Docker Hub, setting up QEMU and Buildx, building and pushing the image, and updating the repository description using the peter-evans/dockerhub-description action. The workflow is triggered on push events.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/update-dockerhub-desc.md#_snippet_0

LANGUAGE: YAML
CODE:
```
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: user/app:latest

      - name: Update repo description
        uses: peter-evans/dockerhub-description@e98e4d1628a5f3be2be7c231e50981aee98723ae # v4.0.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: user/app
```

----------------------------------------

TITLE: API Service Configuration with Host and Path Routing
DESCRIPTION: This configuration defines the API service using Docker Compose and configures Traefik routing for it. It specifies the build context, volume mounts for the API code, and Traefik labels to route requests with the host `localhost` and path prefix `/api` to this service. The `hl_lines` directive highlights the lines defining the Traefik routing rule.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#_snippet_6

LANGUAGE: yaml
CODE:
```
services:
  # …
  api:
    build: ./dev/api
    volumes:
      - "./api:/var/www/html/api"
    labels:
      traefik.http.routers.api.rule: "Host(`localhost`) && PathPrefix(`/api`)"
```

----------------------------------------

TITLE: Running the Application with Environment Variables
DESCRIPTION: This command runs the Docker container, mapping port 8080 of the container to port 80 of the host. It sets environment variables for database access, including the username, password, host, port, and database name. The application connects to the CockroachDB instance using these variables.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#_snippet_16

LANGUAGE: console
CODE:
```
$ docker run -it --rm -d \
  --network mynet \
  --name rest-server \
  -p 80:8080 \
  -e PGUSER=totoro \
  -e PGPASSWORD=myfriend \
  -e PGHOST=db \
  -e PGPORT=26257 \
  -e PGDATABASE=mydb \
  docker-gs-ping-roach
```

----------------------------------------

TITLE: Allowed: Multi-Stage Build with Target Architecture (Dockerfile)
DESCRIPTION: This example demonstrates the correct usage of the FROM instruction in a multi-stage build, where different stages are built for different architectures. The stage names include the architecture to indicate platform-specific instructions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-platform-flag-const-disallowed.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```
FROM --platform=linux/amd64 alpine AS build_amd64
...

FROM --platform=linux/arm64 alpine AS build_arm64
...

FROM build_${TARGETARCH} AS build
...
```

----------------------------------------

TITLE: Creating a Service and Attaching to Overlay Network
DESCRIPTION: This command creates a Docker service named `my-web` with 3 replicas and attaches it to an existing overlay network named `my-network`. The `--network` flag specifies the network to attach the service to. The service uses the `nginx` image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker service create \
  --replicas 3 \
  --name my-web \
  --network my-network \
  nginx
```

----------------------------------------

TITLE: Unsetting Environment Variables Correctly in Dockerfile
DESCRIPTION: This Dockerfile demonstrates the correct way to unset an environment variable within a single RUN command to prevent it from persisting in subsequent layers. It uses shell commands to set, use, and unset the variable in one layer.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_22

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM alpine
RUN export ADMIN_USER="mark" \
    && echo $ADMIN_USER > ./mark \
    && unset ADMIN_USER
CMD sh
```

----------------------------------------

TITLE: Run a Model with a One-Time Prompt
DESCRIPTION: This command runs a specified AI model with a provided prompt and returns the model's response. Replace `ai/smollm2` with the model you want to run and `"Hi"` with your prompt.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/ai/model-runner.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker model run ai/smollm2 "Hi"
```

----------------------------------------

TITLE: Run Prometheus in a Docker container
DESCRIPTION: Runs a Prometheus container, mounting the Prometheus configuration file and exposing port 9090.  The --add-host flag is used to expose the host's internal IP to the Prometheus container, allowing it to access the Docker daemon's metrics endpoint.  The container uses the prom/prometheus image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/prometheus.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ docker run --name my-prometheus \
    --mount type=bind,source=/tmp/prometheus.yml,destination=/etc/prometheus/prometheus.yml \
    -p 9090:9090 \
    --add-host host.docker.internal=host-gateway \
    prom/prometheus
```

----------------------------------------

TITLE: Running a Docker container in detached (background) mode
DESCRIPTION: This command runs a container in the background using the `-d` flag. The container will start and continue running without occupying the terminal.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_3

LANGUAGE: Shell
CODE:
```
$ docker run -d <IMAGE>
```

----------------------------------------

TITLE: Creating a Docker Container with a Volume
DESCRIPTION: This command creates a new Docker container named `dbstore` with a volume mounted at `/dbdata`. The container is based on the `ubuntu` image and executes `/bin/bash`.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_44

LANGUAGE: bash
CODE:
```
$ docker run -v /dbdata --name dbstore ubuntu /bin/bash
```

----------------------------------------

TITLE: Setting Docker Build Cloud as Default Builder
DESCRIPTION: This command sets Docker Build Cloud as the default builder for the `docker buildx build` command. This eliminates the need to specify the `--builder` flag for subsequent builds. The `--global` flag sets the builder for all projects.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/usage.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker buildx use cloud-<ORG>-<BUILDER_NAME> --global
```

----------------------------------------

TITLE: Creating Data in MySQL Database (GUI Terminal)
DESCRIPTION: This command uses the `mysql` tool in the container to create a table named `mytable` with a column named `column_name`, and finally inserts a value of value`.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#_snippet_13

LANGUAGE: bash
CODE:
```
# mysql -u root -pmy-secret-pw -e "CREATE TABLE IF NOT EXISTS mydb.mytable (column_name VARCHAR(255)); INSERT INTO mydb.mytable (column_name) VALUES ('value');"
```

----------------------------------------

TITLE: Creating a Docker Volume
DESCRIPTION: This command creates a Docker volume named 'roach'. Docker volumes are used for persisting data generated by and used by Docker containers.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#_snippet_0

LANGUAGE: docker
CODE:
```
$ docker volume create roach
```

----------------------------------------

TITLE: Rolling back a Docker service manually
DESCRIPTION: This command rolls back a Docker service to its previous configuration using the `--rollback` flag and sets the update delay to 0 seconds. This ensures that the rollback happens immediately without any delay between tasks. The service name is specified as `my_web`.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#_snippet_38

LANGUAGE: bash
CODE:
```
$ docker service update \
  --rollback \
  --update-delay 0s
  my_web
```

----------------------------------------

TITLE: Docker Compose Configuration for Go, Prometheus, and Grafana
DESCRIPTION: This Docker Compose file defines services for a Go application, Prometheus, and Grafana, connecting them through a shared network. It configures ports, volumes, health checks, and environment variables for each service, enabling monitoring of the Go application.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/compose.md#_snippet_0

LANGUAGE: yaml
CODE:
```
services:
  api:
    container_name: go-api
    build:
      context: .
      dockerfile: Dockerfile
    image: go-api:latest
    ports:
      - 8000:8000
    networks:
      - go-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    develop:
      watch:
        - path: .
          action: rebuild
      
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.55.0
    volumes:
      - ./Docker/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - go-network
  
  grafana:
    container_name: grafana
    image: grafana/grafana:11.3.0
    volumes:
      - ./Docker/grafana.yml:/etc/grafana/provisioning/datasources/datasource.yaml
      - grafana-data:/var/lib/grafana
    ports:
      - 3000:3000
    networks:
      - go-network
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password

volumes:
  grafana-data:

networks:
  go-network:
    driver: bridge
```

----------------------------------------

TITLE: Dockerfile for a Golang Application
DESCRIPTION: This Dockerfile uses a multi-stage build to create a small and efficient Docker image for a Golang application. It uses the official Golang image for building and Alpine Linux for the final image. It sets environment variables, copies dependencies, builds the application, and exposes port 8000.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/containerize.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
# Use the official Golang image as the base
FROM golang:1.24-alpine AS builder

# Set environment variables
ENV CGO_ENABLED=0 \
    GOOS=linux \
    GOARCH=amd64

# Set working directory inside the container
WORKDIR /build

# Copy go.mod and go.sum files for dependency installation
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy the entire application source
COPY . .

# Build the Go binary
RUN go build -o /app .

# Final lightweight stage
FROM alpine:3.17 AS final

# Copy the compiled binary from the builder stage
COPY --from=builder /app /bin/app

# Expose the application's port
EXPOSE 8000

# Run the application
CMD ["bin/app"]
```

----------------------------------------

TITLE: Bringing Up LocalStack with Docker Compose
DESCRIPTION: Starts LocalStack and a MongoDB database using Docker Compose. The compose file specifies the services needed for the local AWS environment.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker compose -f compose-native.yml up -d
```

----------------------------------------

TITLE: Updating the Dockerfile for Rust App
DESCRIPTION: This Dockerfile defines the steps to build and run a Rust application. It uses multi-stage builds to compile the application in one stage and then copies the executable to a minimal runtime image. It also sets up a non-privileged user for security and exposes port 8000.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#_snippet_6

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/reference/dockerfile/

################################################################################
# Create a stage for building the application.

ARG RUST_VERSION=1.70.0
ARG APP_NAME=react-rust-postgres
FROM rust:${RUST_VERSION}-slim-bullseye AS build
ARG APP_NAME
WORKDIR /app

# Build the application.
# Leverage a cache mount to /usr/local/cargo/registry/
# for downloaded dependencies and a cache mount to /app/target/ for
# compiled dependencies which will speed up subsequent builds.
# Leverage a bind mount to the src directory to avoid having to copy the
# source code into the container. Once built, copy the executable to an
# output directory before the cache mounted /app/target is unmounted.
RUN --mount=type=bind,source=src,target=src \
    --mount=type=bind,source=Cargo.toml,target=Cargo.toml \
    --mount=type=bind,source=Cargo.lock,target=Cargo.lock \
    --mount=type=cache,target=/app/target/ \
    --mount=type=cache,target=/usr/local/cargo/registry/ \
    --mount=type=bind,source=migrations,target=migrations \
    <<EOF
set -e
cargo build --locked --release
cp ./target/release/$APP_NAME /bin/server
EOF

################################################################################
# Create a new stage for running the application that contains the minimal
# runtime dependencies for the application. This often uses a different base
# image from the build stage where the necessary files are copied from the build
# stage.
#
# The example below uses the debian bullseye image as the foundation for    running the app.
# By specifying the "bullseye-slim" tag, it will also use whatever happens to    be the
# most recent version of that tag when you build your Dockerfile. If
# reproducibility is important, consider using a digest
# (e.g.,    debian@sha256:ac707220fbd7b67fc19b112cee8170b41a9e97f703f588b2cdbbcdcecdd8af57).
FROM debian:bullseye-slim AS final

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/develop/develop-images/dockerfile_best-practices/   #user
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser
USER appuser

# Copy the executable from the "build" stage.
COPY --from=build /bin/server /bin/

# Expose the port that the application listens on.
EXPOSE 8000

# What the container should run when it is started.
CMD ["/bin/server"]
```

----------------------------------------

TITLE: Copy Custom Nginx Configuration - Dockerfile
DESCRIPTION: Replaces the default Nginx configuration with a custom configuration optimized for serving a Laravel application. This ensures that Nginx is properly configured to handle Laravel's routing and asset serving requirements.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/production-setup.md#_snippet_7

LANGUAGE: Dockerfile
CODE:
```
COPY ./docker/nginx/nginx.conf /etc/nginx/nginx.conf
```

----------------------------------------

TITLE: Configuring Docker Compose with Secrets and Dependencies (YAML)
DESCRIPTION: This YAML snippet configures a Docker Compose file to define services for a Node.js server and a PostgreSQL database. It sets up environment variables, secrets for secure password management, volumes for data persistence, and dependencies to ensure the database is running before the server starts.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/develop.md#_snippet_2

LANGUAGE: YAML
CODE:
```
# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: production
      POSTGRES_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
      POSTGRES_DB: example
    ports:
      - 3000:3000

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.

    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt
```

----------------------------------------

TITLE: Setting environment variables using env_file attribute
DESCRIPTION: Specifies the `webapp.env` file to be used for setting environment variables for the `webapp` service. The `env_file` attribute allows loading environment variables from a separate file.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/environment-variables/set-environment-variables.md#_snippet_4

LANGUAGE: yaml
CODE:
```
services:
  webapp:
    env_file: "webapp.env"
```

----------------------------------------

TITLE: Add OCI Annotation to Image
DESCRIPTION: This command demonstrates how to add an OCI annotation to a container image using the `annotation` parameter. The annotation name is specified using dot notation.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/oci-docker.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker buildx build \
    --output "type=<type>,name=<registry>/<image>,annotation.org.opencontainers.image.title=<title>" .
```

----------------------------------------

TITLE: Loading a custom AppArmor profile
DESCRIPTION: This command loads a custom AppArmor profile into AppArmor. It uses the `apparmor_parser` command with the `-r` (replace) and `-W` (warn) options to load the profile from the specified path.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/apparmor.md#_snippet_1

LANGUAGE: bash
CODE:
```
$ apparmor_parser -r -W /path/to/your_profile
```

----------------------------------------

TITLE: Updating Service Image with docker service update
DESCRIPTION: The `docker service update` command with the `--image` flag updates the service tasks to use a new digest of the image. The swarm manager queries Docker Hub or a private registry for the digest the tag currently points to.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#_snippet_22

LANGUAGE: Docker CLI
CODE:
```
service update --image <image_name>:<tag>
```

----------------------------------------

TITLE: Multi-Stage Dockerfile Build with Node.js and Nginx
DESCRIPTION: This Dockerfile uses a multi-stage build to create an optimized image. The first stage builds a Node.js application, and the second stage serves the built application using Nginx. It copies package.json and yarn.lock before the source code to leverage Docker's layer caching.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/09_image_best.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
FROM node:lts AS build
WORKDIR /app
COPY package* yarn.lock ./
RUN yarn install
COPY public ./public
COPY src ./src
RUN yarn run build

FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html
```

----------------------------------------

TITLE: Specify Base Image in Dockerfile
DESCRIPTION: This instruction sets the base image for the Docker build. It uses a lightweight version of Python 3.8, optimized for size and speed, reducing the overall image size and potential security vulnerabilities.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/named-entity-recognition.md#_snippet_8

LANGUAGE: dockerfile
CODE:
```
FROM python:3.8-slim
```

----------------------------------------

TITLE: Initializing Echo Web Server
DESCRIPTION: This code initializes an Echo web server, sets up middleware for logging and recovery, initializes the database connection, defines HTTP route handlers for '/', '/ping', and '/send', and starts the server on the specified port.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#_snippet_10

LANGUAGE: go
CODE:
```
func main() {

	e := echo.New()

	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	db, err := initStore()
	if err != nil {
		log.Fatalf("failed to initialize the store: %s", err)
	}
	defer db.Close()

	e.GET("/", func(c echo.Context) error {
		return rootHandler(db, c)
	})

	e.GET("/ping", func(c echo.Context) error {
		return c.JSON(http.StatusOK, struct{ Status string }{Status: "OK"})
	})

	e.POST("/send", func(c echo.Context) error {
		return sendHandler(db, c)
	})

	httpPort := os.Getenv("HTTP_PORT")
	if httpPort == "" {
		httpPort = "8080"
	}

	e.Logger.Fatal(e.Start(":" + httpPort))
}
```

----------------------------------------

TITLE: Inspecting Docker Container Mounts
DESCRIPTION: This command inspects a Docker container and displays the mount configuration, including the volume type, source, destination, and read/write permissions.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_11

LANGUAGE: json
CODE:
```
{
    "Type": "volume",
    "Name": "myvol2",
    "Source": "/var/lib/docker/volumes/myvol2/_data",
    "Destination": "/app",
    "Driver": "local",
    "Mode": "",
    "RW": true,
    "Propagation": ""
}
```

----------------------------------------

TITLE: Creating a Custom Ingress Network
DESCRIPTION: This command creates a new overlay network with the `--ingress` flag, customizing options such as subnet, gateway, and MTU. This is useful when the default ingress network configuration conflicts with existing networks or when specific network settings are required.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#_snippet_7

LANGUAGE: docker
CODE:
```
$ docker network create \
  --driver overlay \
  --ingress \
  --subnet=10.11.0.0/16 \
  --gateway=10.11.0.2 \
  --opt com.docker.network.driver.mtu=1200 \
  my-ingress
```

----------------------------------------

TITLE: Push Docker images to Docker Hub
DESCRIPTION: The docker push command pushes locally built images to the Docker Hub registry. The repository visibility can be set to private if the image includes sensitive content.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/settings-and-maintenance/backup-and-restore.md#_snippet_1

LANGUAGE: Shell
CODE:
```
docker push
```

----------------------------------------

TITLE: Run Docker Container with Volume Mount
DESCRIPTION: Runs a Docker container named 'getting-started' with a volume mount. The volume 'todo-db' is mounted to the '/etc/todos' directory inside the container, persisting data created in that directory.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/05_persisting_data.md#_snippet_3

LANGUAGE: bash
CODE:
```
$ docker run -dp 127.0.0.1:3000:3000 --mount type=volume,src=todo-db,target=/etc/todos getting-started
```

----------------------------------------

TITLE: Creating a User-Defined Bridge Network in Docker
DESCRIPTION: This command creates a new user-defined bridge network named 'my-net'. User-defined networks provide better isolation and DNS resolution compared to the default bridge network.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker network create my-net
```

----------------------------------------

TITLE: Building Docker images with Docker Compose
DESCRIPTION: This command builds Docker images defined in the compose.yaml file and then starts the containers. It simplifies the process of building and running multi-container applications by defining build contexts and Dockerfiles for each service.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/docker-compose/common-questions.md#_snippet_1

LANGUAGE: docker
CODE:
```
docker compose up --build
```

----------------------------------------

TITLE: Setting the Notary Server URL
DESCRIPTION: This command sets the environment variable `DOCKER_CONTENT_TRUST_SERVER` to specify the URL for the Notary server. This is necessary for self-hosted environments or 3rd party registries where the Notary server URL differs from the registry URL.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#_snippet_0

LANGUAGE: console
CODE:
```
$ export DOCKER_CONTENT_TRUST_SERVER=https://<URL>:<PORT>
```

----------------------------------------

TITLE: Defining Custom Networks in Docker Compose
DESCRIPTION: This example demonstrates how to define two custom networks, `frontend` and `backend`, and connect services to them. The `proxy` service is isolated from the `db` service, as they do not share a network. Only `app` can communicate with both.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/networking.md#_snippet_2

LANGUAGE: yaml
CODE:
```
services:
  proxy:
    build: ./proxy
    networks:
      - frontend
  app:
    build: ./app
    networks:
      - frontend
      - backend
  db:
    image: postgres
    networks:
      - backend

networks:
  frontend:
    # Specify driver options
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"
  backend:
    # Use a custom driver
    driver: custom-driver
```

----------------------------------------

TITLE: List running Docker containers
DESCRIPTION: This command lists all running Docker containers, displaying information such as container ID, image, command, creation time, status, port mappings, and names. It helps to verify that the container is running as expected.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/02_our_app.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker ps
```

----------------------------------------

TITLE: Setting ulimits in Docker Compose
DESCRIPTION: Overrides the default ulimits for a container, specified as an integer for a single limit or as a mapping for soft/hard limits.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_98

LANGUAGE: yml
CODE:
```
ulimits:
  nproc: 65535
  nofile:
    soft: 20000
    hard: 40000
```

----------------------------------------

TITLE: Configuring Service Profiles in Docker Compose
DESCRIPTION: This snippet demonstrates how to configure service profiles in a Docker Compose file, allowing you to enable services only when a specific profile is activated.  Services without a profile are always started, while those with a profile are only started if the profile is active.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_84

LANGUAGE: YAML
CODE:
```
services:
  frontend:
    image: frontend
    profiles: ["frontend"]

  phpmyadmin:
    image: phpmyadmin
    depends_on:
      - db
    profiles:
      - debug
```

----------------------------------------

TITLE: Prune Docker networks with filter
DESCRIPTION: This command removes networks older than 24 hours. The `--filter` flag limits the scope to networks created before the specified time.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker network prune --filter "until=24h"
```

----------------------------------------

TITLE: Define Default Command
DESCRIPTION: Specifies the default command to run when the container starts. This example starts a Node.js application using `node ./src/index.js`.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/writing-a-dockerfile.md#_snippet_5

LANGUAGE: dockerfile
CODE:
```
CMD ["node", "./src/index.js"]
```

----------------------------------------

TITLE: Caching apt Packages in Dockerfile
DESCRIPTION: This example demonstrates how to cache apt packages using the `RUN --mount=type=cache` instruction in a Dockerfile. It mounts `/var/cache/apt` and `/var/lib/apt` directories as caches with `sharing=locked` to prevent concurrent access. This ensures that apt has exclusive access to its data, preventing conflicts during parallel builds.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_42

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM ubuntu
RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  apt update && apt-get --no-install-recommends install -y gcc
```

----------------------------------------

TITLE: Defining Build Arguments as a Mapping in Docker Compose
DESCRIPTION: This snippet demonstrates how to define build arguments for a Docker image build using a mapping format in a Docker Compose file.  The arguments are passed to the Dockerfile during the build process.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#_snippet_6

LANGUAGE: YAML
CODE:
```
build:
  context: .
  args:
    GIT_COMMIT: cdc3b19
```

----------------------------------------

TITLE: Build with Bake
DESCRIPTION: This command executes the build process using Docker Buildx Bake, utilizing the build configuration defined in the Compose file and any Bake files.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#_snippet_7

LANGUAGE: console
CODE:
```
$ docker buildx bake
```

----------------------------------------

TITLE: Updating Traefik Docker Compose Configuration
DESCRIPTION: This Docker Compose configuration updates the Traefik service to mount the configuration file and use the file provider. The `command` is updated to include the `--providers.file.filename` flag, pointing to the location of the configuration file within the container. This allows Traefik to read the routing rules defined in the YAML file.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#_snippet_9

LANGUAGE: yaml
CODE:
```
services:
  proxy:
    image: traefik:v3.1.2
    command: --providers.docker --providers.file.filename=/config/traefik-config.yaml --api.insecure
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dev/traefik-config.yaml:/config/traefik-config.yaml
```

----------------------------------------

TITLE: Setting PIDs Limit in Docker Compose
DESCRIPTION: This snippet shows how to set a container's PIDs limit in a Docker Compose file. The `pids_limit` attribute tunes the number of PIDs a container can use. Setting it to -1 means unlimited PIDs.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_79

LANGUAGE: yml
CODE:
```
pids_limit: 10
```

----------------------------------------

TITLE: Defining the app service in compose.yaml
DESCRIPTION: Defines the base service configuration in the `compose.yaml` file, specifying the image to use for the application service. This is the initial step in configuring the application within Docker Compose.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/08_using_compose.md#_snippet_0

LANGUAGE: yaml
CODE:
```
services:
  app:
    image: node:18-alpine
```

----------------------------------------

TITLE: Building Docker Image with Proxy Environment Variables
DESCRIPTION: This command demonstrates how to build a Docker image and check for proxy environment variables during the build process. It uses a Dockerfile inline to print the environment variables that match the `_PROXY` pattern.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/proxy.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker build \
  --no-cache \
  --progress=plain \
  - <<EOF
FROM alpine
RUN env | grep -i _PROXY
EOF
```

----------------------------------------

TITLE: Defining Image Names in Compose
DESCRIPTION: Specifies the image names for the 'vote', 'result', and 'worker' services in the Docker Compose file. This allows you to tag the images with a specific username or repository name when building them.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#_snippet_4

LANGUAGE: yaml
CODE:
```
services:
  vote:
    image: username/vote
    build:
      context: ./vote
      target: dev
    #...

  result:
    image: username/result
    build:
      context: ./result
    #...

  worker:
    image: username/worker
    build:
      context: ./worker
    #...
```

----------------------------------------

TITLE: Running a container with a read-only bind mount using --mount
DESCRIPTION: This command runs a Docker container named `devtest` in detached mode, creating an interactive terminal. It uses the `--mount` flag to bind-mount the `target` directory from the host (current working directory) to the `/app` directory inside the container, but in read-only mode. The container is based on the `nginx:latest` image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#_snippet_14

LANGUAGE: docker
CODE:
```
docker run -d \
  -it \
  --name devtest \
  --mount type=bind,source="$(pwd)"/target,target=/app,readonly \
  nginx:latest
```

----------------------------------------

TITLE: Running a Containerized React.js Application in Detached Mode
DESCRIPTION: This command runs the React.js application in detached mode, allowing it to run in the background. The application remains accessible at http://localhost:8080.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/containerize.md#_snippet_11

LANGUAGE: Shell
CODE:
```
$ docker compose up --build -d
```

----------------------------------------

TITLE: Testing Language Translation Application in Docker
DESCRIPTION: This shows how to interact with the running container to test the language translation application. It demonstrates entering text and receiving the translated output.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#_snippet_17

LANGUAGE: text
CODE:
```
Enter the text for translation (type 'exit' to end): Hello, how are you doing?
Original Text: Hello, how are you doing?
Translated Text: Bonjour comment allez-vous?
```

----------------------------------------

TITLE: Defining Services with Ports in Compose
DESCRIPTION: This example shows a basic `compose.yaml` file defining two services, `web` and `db`, with exposed ports. The `web` service is built from the current directory, and the `db` service uses the `postgres` image. Ports are mapped for external access.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/networking.md#_snippet_0

LANGUAGE: yaml
CODE:
```
services:
  web:
    build: .
    ports:
      - "8000:8000"
  db:
    image: postgres
    ports:
      - "8001:5432"
```

----------------------------------------

TITLE: Starting the Application with Docker Compose
DESCRIPTION: This command starts the application using Docker Compose, building the images if necessary.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#_snippet_6

LANGUAGE: bash
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Verifying Kubernetes Deployments
DESCRIPTION: This command retrieves a list of deployments in the Kubernetes cluster. It verifies that the application's deployments (`db` and `server`) are running and available.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/deploy.md#_snippet_2

LANGUAGE: console
CODE:
```
$ kubectl get deployments
```

----------------------------------------

TITLE: Copy Application Code and Set Permissions
DESCRIPTION: This snippet copies the application code from the build stage, sets the working directory, ensures correct permissions for the www-data user, and switches to the non-privileged user to run the application.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/production-setup.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
# Copy the application code and dependencies from the build stage
COPY --from=builder /var/www /var/www

# Set working directory
WORKDIR /var/www

# Ensure correct permissions
RUN chown -R www-data:www-data /var/www

# Switch to the non-privileged user to run the application
USER www-data
```

----------------------------------------

TITLE: Adding Host Configuration from Environment Variables in Go
DESCRIPTION: This snippet adds a new option-setter to the Go API client, specifically `WithHostFromEnv()`, to allow the Docker host to be configured from environment variables. This simplifies deployment and configuration management, especially in environments where the host address is dynamically assigned.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/23.0.md#_snippet_10

LANGUAGE: Go
CODE:
```
WithHostFromEnv()
```

----------------------------------------

TITLE: Getting Docker Daemon Process ID on Windows Server
DESCRIPTION: This PowerShell command retrieves the process ID (PID) of the Docker daemon (dockerd) on Windows Server. This PID is needed to send signals to the daemon for debugging purposes.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/logs.md#_snippet_4

LANGUAGE: powershell
CODE:
```
Get-Process dockerd
```

----------------------------------------

TITLE: Run Docker Compose with build
DESCRIPTION: This command runs the application using Docker Compose, building the images if necessary.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/develop.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Service Dependencies with Healthchecks in docker-compose.yml (Version 2.1+)
DESCRIPTION: Configures service dependencies using the depends_on parameter, ensuring that dependent services wait for a positive healthcheck before starting. This example shows how service 'web' depends on 'db' and waits for it to be healthy.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#_snippet_7

LANGUAGE: YAML
CODE:
```
version: "2.1"
services:
  web:
    image: nginx:latest
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:latest
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
```

----------------------------------------

TITLE: Extracting Dockerfile Content from Provenance using Docker Buildx Imagetools
DESCRIPTION: This command extracts the full source code of the Dockerfile used to build the image from provenance generated with `mode=max`. It uses a Go template to iterate through the source infos, filters for the 'Dockerfile', and extracts its data, which is then base64 decoded.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/slsa-provenance.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker buildx imagetools inspect <namespace>/<image>:<version> \
    --format '{{ range (index .Provenance.SLSA.metadata "https://mobyproject.org/buildkit@v1#metadata").source.infos }}{{ if eq .filename "Dockerfile" }}{{ .data }}{{ end }}{{ end }}' | base64 -d
```

----------------------------------------

TITLE: Defining a Development Target in Docker Bake (HCL)
DESCRIPTION: This snippet defines a target named `app-dev` that builds a Docker image for a development environment. It sets build arguments, tags, and labels for the image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/inheritance.md#_snippet_0

LANGUAGE: hcl
CODE:
```
target "app-dev" {
  args = {
    GO_VERSION = "{{% param example_go_version %}}"
  }
  tags = ["docker.io/username/myapp:dev"]
  labels = {
    "org.opencontainers.image.source" = "https://github.com/username/myapp"
    "org.opencontainers.image.author" = "moby.whale@example.com"
  }
}
```

----------------------------------------

TITLE: Setting Replicas for a Service in Compose
DESCRIPTION: This snippet illustrates how to set the number of replicas for a replicated service in a Docker Compose file. Replicas specifies the number of containers that should be running at any given time.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#_snippet_5

LANGUAGE: YAML
CODE:
```
services:
  frontend:
    image: example/webapp
    deploy:
      mode: replicated
      replicas: 6
```

----------------------------------------

TITLE: Cloning a Git Repository
DESCRIPTION: This command clones a specified Git repository to the local machine. It's the first step in obtaining the sample application for the Docker development environment setup. The repository contains the necessary application code and initial configurations.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#_snippet_0

LANGUAGE: console
CODE:
```
$ git clone https://github.com/estebanx64/python-docker-dev-example
```

----------------------------------------

TITLE: Pinning Buildx Version in GitHub Actions
DESCRIPTION: This snippet demonstrates how to pin a specific version of Buildx using the `version` input in the `docker/setup-buildx-action`. This ensures that a consistent version of Buildx is used across different runs of the workflow. The version is set to v0.10.0 in this example.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/configure-builder.md#_snippet_0

LANGUAGE: yaml
CODE:
```
- name: Set up Docker Buildx
  uses: docker/setup-buildx-action@v3
  with:
    version: v0.10.0
```

----------------------------------------

TITLE: Adding Additional Groups to a Container - Docker Compose YAML
DESCRIPTION: This snippet demonstrates how to add additional groups to a container using the `group_add` option in a Docker Compose file. This allows the user inside the container to be a member of specified groups.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_53

LANGUAGE: yaml
CODE:
```
services:
  myservice:
    image: alpine
    group_add:
      - mail
```

----------------------------------------

TITLE: Create Development Dockerfile for React App
DESCRIPTION: Sets up a lightweight development environment for a React application using a specified Node.js version. It copies package files, installs dependencies, copies the source code, exposes port 5173, and sets the default command to run the development server.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/develop.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
# =========================================
# Stage 1: Develop the React.js Application
# =========================================
ARG NODE_VERSION=22.14.0-alpine

# Use a lightweight Node.js image for development
FROM node:${NODE_VERSION} AS dev

# Set the working directory inside the container
WORKDIR /app

# Copy package-related files first to leverage Docker's caching mechanism
COPY --link package.json package-lock.json ./

# Install project dependencies
RUN --mount=type=cache,target=/root/.npm npm install

# Copy the rest of the application source code into the container
COPY --link . .

# Expose the port used by the Vite development server
EXPOSE 5173

# Use a default command, can be overridden in Docker compose.yml file
CMD ["npm", "run", "dev"]
```

----------------------------------------

TITLE: Set Base Image in Dockerfile
DESCRIPTION: This instruction sets the base image for the Dockerfile. All subsequent instructions are executed within this base image environment. The example uses Ubuntu 22.04 as the base image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/dockerfile.md#_snippet_3

LANGUAGE: Dockerfile
CODE:
```
FROM ubuntu:22.04
```

----------------------------------------

TITLE: Dockerfile ARG Scoping Example
DESCRIPTION: This Dockerfile demonstrates that build arguments declared in the global scope are not automatically available in subsequent stages. The `NAME` argument is defined globally but not accessible within the `alpine` stage.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#_snippet_6

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1

# The following build argument is declared in the global scope:
ARG NAME="joe"

FROM alpine
# The following instruction doesn't have access to the $NAME build argument
# because the argument was defined in the global scope, not for this stage.
RUN echo "hello ${NAME}!"
```

----------------------------------------

TITLE: Update Docker Compose YAML with Database Service
DESCRIPTION: Updates the `docker-compose.yaml` file to define a database service using Postgres, persist data using volumes, and configure environment variables for database connection. It includes setting up health checks and overriding default database URL.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#_snippet_0

LANGUAGE: yaml
CODE:
```
services:
  server:
    build:
      context: .
    ports:
      - 8080:8080
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_URL=jdbc:postgresql://db:5432/petclinic
  db:
    image: postgres
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=petclinic
      - POSTGRES_USER=petclinic
      - POSTGRES_PASSWORD=petclinic
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "petclinic"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
```

----------------------------------------

TITLE: Deploy application to Kubernetes
DESCRIPTION: This command deploys the application to Kubernetes using the configuration file `bb.yaml`. It creates the Kubernetes objects defined in the file.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/kube-deploy.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ kubectl apply -f bb.yaml
```

----------------------------------------

TITLE: Configuring local logging driver in daemon.json
DESCRIPTION: This JSON snippet configures the Docker daemon to use the `local` logging driver and sets the `max-size` option to 10MB. This configuration is applied to newly created containers after restarting Docker. The `daemon.json` file is located in `/etc/docker/` on Linux hosts or `C:\ProgramData\docker\config\daemon.json` on Windows Server.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/local.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "log-driver": "local",
  "log-opts": {
    "max-size": "10m"
  }
}
```

----------------------------------------

TITLE: Creating a Bind Mount with Docker Run
DESCRIPTION: This command creates a bind mount between a host directory and a container directory using the `--mount` flag. The `type` is set to `bind`, `source` specifies the host path, and `target` specifies the container path.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_11

LANGUAGE: console
CODE:
```
$ docker run -it --mount type=bind,source=[PATH],target=[PATH] busybox
```

----------------------------------------

TITLE: Invoking a Build with Docker Buildx Bake
DESCRIPTION: This command executes the default group defined in the Bake file, building the frontend and backend targets concurrently. It requires Docker Buildx to be installed and configured.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/_index.md#_snippet_1

LANGUAGE: Console
CODE:
```
$ docker buildx bake
```

----------------------------------------

TITLE: Running CockroachDB in a Docker Container
DESCRIPTION: This command runs CockroachDB in a Docker container, attaching it to the 'roach' volume and the 'mynet' network. It also maps ports 26257 and 8080 for database access and the admin UI, respectively.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#_snippet_4

LANGUAGE: docker
CODE:
```
$ docker run -d \
  --name roach \
  --hostname db \
  --network mynet \
  -p 26257:26257 \
  -p 8080:8080 \
  -v roach:/cockroach/cockroach-data \
  cockroachdb/cockroach:latest-v20.1 start-single-node \
  --insecure
```

----------------------------------------

TITLE: Using Custom SSH Key with ID in Docker Compose
DESCRIPTION: This example demonstrates how to use a custom SSH key with a specific ID during a Docker image build. It defines the path to the SSH key using the `ssh` property.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#_snippet_34

LANGUAGE: yaml
CODE:
```
build:
  context: .
  ssh:
    - myproject=~/.ssh/myproject.pem
```

----------------------------------------

TITLE: Defining Cache Export Locations in Docker Compose
DESCRIPTION: This snippet shows how to define a list of export locations to be used to share build cache with future builds in a Docker Compose file. It includes examples using registry and local cache types.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#_snippet_12

LANGUAGE: YAML
CODE:
```
build:
  context: .
  cache_to:
   - user/app:cache
   - type=local,dest=path/to/cache
```

----------------------------------------

TITLE: Searching Docker Images using CLI
DESCRIPTION: This command searches for Docker images on Docker Hub using the specified image name. It returns a list of matching images with their descriptions, stars, and whether they are official images.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-an-image.md#_snippet_0

LANGUAGE: console
CODE:
```
docker search docker/welcome-to-docker
```

----------------------------------------

TITLE: Installing Docker packages from deb files
DESCRIPTION: Installs Docker Engine, CLI, containerd, docker-buildx-plugin, and docker-compose-plugin from downloaded .deb packages using dpkg.  The paths to the .deb files must be specified.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/ubuntu.md#_snippet_6

LANGUAGE: bash
CODE:
```
sudo dpkg -i ./containerd.io_<version>_<arch>.deb \
  ./docker-ce_<version>_<arch>.deb \
  ./docker-ce-cli_<version>_<arch>.deb \
  ./docker-buildx-plugin_<version>_<arch>.deb \
  ./docker-compose-plugin_<version>_<arch>.deb
```

----------------------------------------

TITLE: Enabling Docker Content Trust
DESCRIPTION: This command sets the DOCKER_CONTENT_TRUST environment variable to 1, enabling Docker Content Trust. This ensures that only signed images from trusted sources are used.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_sandbox.md#_snippet_7

LANGUAGE: Shell
CODE:
```
export DOCKER_CONTENT_TRUST=1
```

----------------------------------------

TITLE: Incorrect apt-get Usage with Added Package
DESCRIPTION: This example builds upon the previous anti-pattern, showing how adding a package to the `apt-get install` instruction without updating the cache can lead to outdated packages being installed. It attempts to install curl and nginx after a cached update.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_13

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1

FROM ubuntu:22.04
RUN apt-get update
RUN apt-get install -y --no-install-recommends curl nginx
```

----------------------------------------

TITLE: Alternative Shell Form for CMD Instruction in Dockerfile
DESCRIPTION: This snippet shows an alternative "shell form" of the `CMD` instruction in a Dockerfile. It starts the Flask development server, but has subtle differences in how it handles signals compared to the "exec form".
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/dockerfile.md#_snippet_11

LANGUAGE: dockerfile
CODE:
```
CMD flask run --host 0.0.0.0 --port 8000
```

----------------------------------------

TITLE: Listing available GPUs
DESCRIPTION: This command uses `nvidia-smi` to list the available GPUs on the system, providing information such as name, temperature, and memory usage.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/gpu-support.md#_snippet_2

LANGUAGE: console
CODE:
```
$ nvidia-smi   
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 450.80.02    Driver Version: 450.80.02    CUDA Version: 11.0     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  Tesla T4            On   | 00000000:00:1B.0 Off |                    0 |
| N/A   72C    P8    12W /  70W |      0MiB / 15109MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   1  Tesla T4            On   | 00000000:00:1C.0 Off |                    0 |
| N/A   67C    P8    11W /  70W |      0MiB / 15109MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   2  Tesla T4            On   | 00000000:00:1D.0 Off |                    0 |
| N/A   74C    P8    12W /  70W |      0MiB / 15109MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   3  Tesla T4            On   | 00000000:00:1E.0 Off |                    0 |
| N/A   62C    P8    11W /  70W |      0MiB / 15109MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
```

----------------------------------------

TITLE: Setting SOURCE_DATE_EPOCH to Git Commit Timestamp with Build Push Action
DESCRIPTION: This example demonstrates how to set the SOURCE_DATE_EPOCH environment variable to the Git commit timestamp in a GitHub Actions workflow using docker/build-push-action. It retrieves the timestamp using git log and sets it as an environment variable. This ensures that the timestamps in the image metadata reflect the Git commit time, contributing to reproducible builds. It requires the docker/setup-buildx-action to be set up.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/reproducible-builds.md#_snippet_2

LANGUAGE: yaml
CODE:
```
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get Git commit timestamps
        run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

      - name: Build
        uses: docker/build-push-action@v6
        with:
          tags: user/app:latest
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}
```

----------------------------------------

TITLE: Running a container with a bind mount using --mount
DESCRIPTION: This command runs a Docker container named `devtest` in detached mode, creating an interactive terminal. It uses the `--mount` flag to bind-mount the `target` directory from the host (current working directory) to the `/app` directory inside the container. The container is based on the `nginx:latest` image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#_snippet_7

LANGUAGE: docker
CODE:
```
docker run -d \
  -it \
  --name devtest \
  --mount type=bind,source="$(pwd)"/target,target=/app \
  nginx:latest
```

----------------------------------------

TITLE: Stopping the PHP Application with Docker Compose
DESCRIPTION: Stops the running PHP application using Docker Compose. This command shuts down all containers defined in the `compose.yaml` file. It's the standard way to stop a Compose-managed application.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/php/containerize.md#_snippet_4

LANGUAGE: shell
CODE:
```
$ docker compose down
```

----------------------------------------

TITLE: Pushing a Docker Image to Docker Hub
DESCRIPTION: Pushes a Docker image to Docker Hub. Replace `DOCKER_USERNAME` with your Docker Hub username. This makes the image available for others to use.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/introduction/build-and-push-first-image.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker push <DOCKER_USERNAME>/getting-started-todo-app
```

----------------------------------------

TITLE: Disconnecting a Container from a Docker Network
DESCRIPTION: This command disconnects a running container named 'my-nginx' from the network named 'my-net', isolating it from other containers on that network.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker network disconnect my-net my-nginx
```

----------------------------------------

TITLE: Running phpMyAdmin Container on a Docker Network
DESCRIPTION: This command runs a phpMyAdmin container named 'my-phpmyadmin' on the 'my-network' network. It maps port 8080 on the host to port 80 on the container and sets the PMA_HOST environment variable to the name of the MySQL container.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#_snippet_7

LANGUAGE: bash
CODE:
```
docker run --name my-phpmyadmin -d --network my-network -p 8080:80 -e PMA_HOST=my-mysql phpmyadmin
```

----------------------------------------

TITLE: Running a Docker container with an image digest
DESCRIPTION: This command runs a container from the `alpine` image using a specific SHA256 digest.  Using the digest ensures that a specific version of the image is used, regardless of tags.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ docker run alpine@sha256:9cacb71397b640eca97488cf08582ae4e4068513101088e9f96c9814bfda95e0 date
```

----------------------------------------

TITLE: Generate Site Certificate and Sign with Site Key
DESCRIPTION: This command generates a site certificate and signs it with the site key. It creates a CSR for the site and uses the site key to sign it.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_24

LANGUAGE: console
CODE:
```
$ openssl req -new -key "site.key" -out "site.csr" -sha256 \
              -subj '/C=US/ST=CA/L=San Francisco/O=Docker/CN=localhost'
```

----------------------------------------

TITLE: Running s3cmd image with specific parameters
DESCRIPTION: This command demonstrates how to run the s3cmd image with specific parameters to execute a command, such as listing the contents of an S3 bucket.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_27

LANGUAGE: console
CODE:
```
$ docker run s3cmd ls s3://mybucket
```

----------------------------------------

TITLE: Admin Settings Configuration Example
DESCRIPTION: This example demonstrates how to use the `--admin-settings` flag in conjunction with the `--allowed-org` flag to configure Docker Desktop settings, specifically enabling enhanced container isolation. This configuration is stored in the `admin-settings.json` file.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/windows-install.md#_snippet_5

LANGUAGE: none
CODE:
```
--allowed-org=<org name> --admin-settings="{'configurationFileVersion': 2, 'enhancedContainerIsolation': {'value': true, 'locked': false}}"
```

----------------------------------------

TITLE: Exposing Ports with EXPOSE Instruction in Dockerfile
DESCRIPTION: The EXPOSE instruction informs Docker which ports the container listens on at runtime. It can specify TCP or UDP, with TCP being the default.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_59

LANGUAGE: dockerfile
CODE:
```
EXPOSE <port> [<port>/<protocol>...]
```

----------------------------------------

TITLE: Inspect Docker container mounts
DESCRIPTION: This command inspects the 'nginxtest' container and displays detailed information about its configuration, including the mounts. The output shows the volume's type, name, source, destination, driver, and read-write (RW) status.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_26

LANGUAGE: console
CODE:
```
$ docker inspect nginxtest
```

----------------------------------------

TITLE: Bind Mount with Docker Run
DESCRIPTION: This command demonstrates how to create a bind mount when running a Docker container. It mounts the current directory on the host to /path/in/container inside the container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#_snippet_4

LANGUAGE: docker
CODE:
```
docker run --mount=type=bind,src=.,dst=/path/in/container image-name
```

----------------------------------------

TITLE: Update WordPress service with new password secret
DESCRIPTION: This command updates the WordPress service to use the new MySQL password secret (`mysql_password_v2`). It removes the old `mysql_password` secret and adds the new secret, mapping it to `/run/secrets/wp_db_password`.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_51

LANGUAGE: bash
CODE:
```
docker service update \
         --secret-rm mysql_password \
         --secret-add source=mysql_password_v2,target=wp_db_password \
         wordpress
```

----------------------------------------

TITLE: Run container with unless-stopped restart policy
DESCRIPTION: This command starts a Redis container and configures it to always restart, unless the container is explicitly stopped, or the daemon restarts. It uses the `docker run` command with the `-d` flag to run the container in detached mode and the `--restart unless-stopped` flag to set the restart policy.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/start-containers-automatically.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ docker run -d --restart unless-stopped redis
```

----------------------------------------

TITLE: Dockerfile ARG Example
DESCRIPTION: This snippet shows an example Dockerfile that uses the ARG instruction to define a build argument named GIT_COMMIT. The value of this argument can be set in the Compose file.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#_snippet_15

LANGUAGE: Dockerfile
CODE:
```
ARG GIT_COMMIT
RUN echo "Based on commit: $GIT_COMMIT"
```

----------------------------------------

TITLE: Docker Compose configuration for Rails
DESCRIPTION: This compose.yaml file defines the service for the Rails application. It specifies the build context, environment variables (RAILS_MASTER_KEY), and port mapping (3000:80).
SOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/containerize.md#_snippet_5

LANGUAGE: YAML
CODE:
```
services:
  web:
    build: .
    environment:
      - RAILS_MASTER_KEY
    ports:
      - "3000:80"
```

----------------------------------------

TITLE: Running Nginx container with host network
DESCRIPTION: This command starts an Nginx container in detached mode using the host network. The `--rm` flag ensures the container is removed upon exit, and `--network host` configures the container to share the host's network namespace.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/host.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker run --rm -d --network host --name my_nginx nginx
```

----------------------------------------

TITLE: Setting BuildKit Progress Output - Console
DESCRIPTION: This snippet demonstrates how to set the type of BuildKit progress output using the `BUILDKIT_PROGRESS` environment variable. Valid values include 'auto', 'plain', 'tty', 'quiet', and 'rawjson'. The example sets the progress output to 'plain'.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#_snippet_13

LANGUAGE: console
CODE:
```
$ export BUILDKIT_PROGRESS=plain
```

----------------------------------------

TITLE: Mounting a volume using --volume
DESCRIPTION: Mounts a Docker volume to a container using the `--volume` flag.  The volume name and mount path are specified, separated by a colon.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker run --volume <volume-name>:<mount-path>
```

----------------------------------------

TITLE: Configuring Docker Compose for R App with Database
DESCRIPTION: This YAML configuration defines the services for the R Shiny application and a PostgreSQL database, including environment variables, secrets, volumes, and health checks. It sets up the necessary environment for the R application to connect to the database.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/r/develop.md#_snippet_2

LANGUAGE: yaml
CODE:
```
services:
  shiny-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 3838:3838
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt
```

----------------------------------------

TITLE: Updating a Docker Service Command
DESCRIPTION: This command updates an existing Docker service named 'helloworld' to run a new command. It uses the '--args' flag to specify the new command, which in this case is 'ping docker.com'.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#_snippet_16

LANGUAGE: console
CODE:
```
$ docker service update --args "ping docker.com" helloworld
```

----------------------------------------

TITLE: Running a Command with Manual Port Mapping
DESCRIPTION: This command starts the `web` service and executes `python manage.py shell` with manually specified port mappings. The `--publish` or `-p` options allow for custom port mappings, similar to `docker run`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker compose run --publish 8080:80 -p 2022:22 -p 127.0.0.1:2021:21 web python manage.py shell
```

----------------------------------------

TITLE: Building Go Application with SSH Mount in Dockerfile
DESCRIPTION: This Dockerfile instruction builds a Go application using an SSH mount. It mounts the current directory, Go module cache, and root cache to enable access to private repositories during the build process.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/secrets.md#_snippet_6

LANGUAGE: Dockerfile
CODE:
```
FROM vendor AS build
RUN --mount=type=bind,target=. \
    --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache \
    go build ...
```

----------------------------------------

TITLE: Listing Docker Volumes
DESCRIPTION: This command lists all Docker volumes available on the system, showing their driver and name.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_6

LANGUAGE: console
CODE:
```
$ docker volume ls

local               my-vol
```

----------------------------------------

TITLE: Initializing Docker Swarm with Advertise Address
DESCRIPTION: This command initializes a Docker Swarm with a specified advertise address. The `--advertise-addr` option is crucial for manager nodes to communicate with other nodes in the swarm, especially in environments with multiple IP addresses or cloud setups with internal and external addresses. Replace `<MANAGER-IP>` with the actual IP address.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-mode.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker swarm init --advertise-addr <MANAGER-IP>
```

----------------------------------------

TITLE: Building Docker Extension Image
DESCRIPTION: This command builds a Docker image for the extension using the Dockerfile in the current directory. It tags the image with a name and version.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/backend-extension-tutorial.md#_snippet_5

LANGUAGE: bash
CODE:
```
docker build --tag=awesome-inc/my-extension:latest .
```

----------------------------------------

TITLE: Running a Command with Service Ports
DESCRIPTION: This command starts the `web` service and executes `python manage.py shell` while also creating and mapping the service's defined ports to the host. The `--service-ports` flag ensures that the service's ports are exposed.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_7

LANGUAGE: console
CODE:
```
$ docker compose run --service-ports web python manage.py shell
```

----------------------------------------

TITLE: Create a Docker Volume
DESCRIPTION: Creates a Docker volume named 'todo-db' using the docker volume create command. This volume can then be mounted to a container to persist data.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/05_persisting_data.md#_snippet_2

LANGUAGE: bash
CODE:
```
$ docker volume create todo-db
```

----------------------------------------

TITLE: Testing the Application with curl
DESCRIPTION: This command uses `curl` to send an HTTP request to the application running on localhost port 8001, verifying that the application is accessible and responding.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#_snippet_16

LANGUAGE: console
CODE:
```
$ curl http://localhost:8001
Hello, Docker!
```

----------------------------------------

TITLE: Overriding environment variables from the command line
DESCRIPTION: This command shows how to override specific environment variables from the command line when starting containers using the `-e` option. This allows for dynamic configuration without modifying the .env file.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/environment-variables/variable-interpolation.md#_snippet_11

LANGUAGE: shell
CODE:
```
$ docker compose --env-file .env.dev up -e DATABASE_URL=mysql://new_user:new_password@new_db:3306/new_database
```

----------------------------------------

TITLE: Setting environment variables using array syntax - YAML
DESCRIPTION: Defines environment variables using an array of strings, where each string is in the format `VARIABLE=VALUE`. Variables without a value are resolved by Compose.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_34

LANGUAGE: YAML
CODE:
```
environment:
  - RACK_ENV=development
  - SHOW=true
  - USER_INPUT
```

----------------------------------------

TITLE: Push Image to Registry with Tag and Push Options
DESCRIPTION: This command pushes a built image to a container registry using the `--tag` and `--push` options. Buildx uses the `image` exporter and sets the `push` parameter under the hood.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/_index.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker buildx build --tag <registry>/<image> --push .
```

----------------------------------------

TITLE: Removing a Docker Image Tag
DESCRIPTION: Removes a specific tag from a Docker image. This doesn't remove the image itself if other tags reference it. The `rmi` command untags the image.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/build-images.md#_snippet_6

LANGUAGE: docker
CODE:
```
$ docker rmi docker-rust-image:v1.0.0
```

----------------------------------------

TITLE: Using Environment Variables with WORKDIR in Dockerfile
DESCRIPTION: This Dockerfile snippet demonstrates how to use environment variables with the WORKDIR instruction. The environment variables must be explicitly set in the Dockerfile using the ENV instruction.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_118

LANGUAGE: dockerfile
CODE:
```
ENV DIRPATH=/path
WORKDIR $DIRPATH/$DIRNAME
RUN pwd
```

----------------------------------------

TITLE: Remove Docker Secret
DESCRIPTION: Attempts to remove the 'my_secret_data' secret using `docker secret rm`. This command fails because the secret is currently in use by the 'redis' service.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker secret rm my_secret_data
```

----------------------------------------

TITLE: Executing a Host Binary with ddClient
DESCRIPTION: Executes the `kubectl -h` command on the host using `ddClient.extension.host.cli.exec`. This requires the `kubectl` binary to be included as part of the extension. It returns a promise that resolves when the command completes.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/backend.md#_snippet_5

LANGUAGE: typescript
CODE:
```
await ddClient.extension.host.cli.exec("kubectl", ["-h"]);
```

----------------------------------------

TITLE: Environment Variables Setup
DESCRIPTION: Defines environment variables required for database connection, including user, host, database name, port, and password. These variables are used by the JavaScript code to connect to the PostgreSQL database.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#_snippet_15

LANGUAGE: plaintext
CODE:
```
POSTGRES_USER=postgres
POSTGRES_DB_HOST=localhost
POSTGRES_DB=sampledb
POSTGRES_PASSWORD=mysecretpassword
POSTGRES_PORT=5432
```

----------------------------------------

TITLE: Setting up Docker's apt repository
DESCRIPTION: This snippet sets up the Docker apt repository by adding the official GPG key and the repository URL to the system's apt sources. It updates the package list to include the new repository.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#_snippet_1

LANGUAGE: bash
CODE:
```
# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL {{% param "download-url-base" %}}/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] {{% param "download-url-base" %}} \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
```

----------------------------------------

TITLE: Defining Network Links between Services in Docker Compose
DESCRIPTION: This snippet shows how to define network links between services using the `links` attribute.  This allows containers in one service to reach containers in another service.  Links also express implicit dependency between services.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_65

LANGUAGE: yml
CODE:
```
web:
  links:
    - db
    - db:database
    - redis
```

----------------------------------------

TITLE: Publishing messages to Kafka using the console producer
DESCRIPTION: This command uses the Kafka console producer to publish messages to the demo topic. It connects to the Kafka broker running on localhost:9092.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker exec -ti kafka /opt/kafka/bin/kafka-console-producer.sh --bootstrap-server :9092 --topic demo
```

----------------------------------------

TITLE: Setting Dockerfile Syntax with Image Reference
DESCRIPTION: This code snippet shows how to specify a Dockerfile frontend using the `syntax` directive. The first line of the Dockerfile sets the image to be used for building the Dockerfile. This allows BuildKit to dynamically load the frontend from the specified container image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/frontend.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
# syntax=[remote image reference]
```

----------------------------------------

TITLE: Deploying with a production Compose file
DESCRIPTION: This command deploys the application using the base Compose file and the production override file. The `-d` flag runs the application in detached mode.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#_snippet_13

LANGUAGE: console
CODE:
```
$ docker compose -f compose.yaml -f compose.prod.yaml up -d
```

----------------------------------------

TITLE: Displaying All Container Information as JSON
DESCRIPTION: This example demonstrates how to use the `json` function within the `docker container ls` command to display all container information as a JSON string. It requires no specific dependencies and outputs the JSON representation of the container information.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/formatting.md#_snippet_10

LANGUAGE: console
CODE:
```
$ docker container ls --format='{{json .}}'
```

----------------------------------------

TITLE: Push Extension using Makefile
DESCRIPTION: This command, executed in the terminal, uses the Makefile to build the extension against both `linux/amd64` and `linux/arm64` platforms, and then pushes the resulting images to Docker Hub. It assumes that the Makefile contains a `push-extension` target, typically generated by `docker extension init`.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/extensions/multi-arch.md#_snippet_0

LANGUAGE: console
CODE:
```
$ make push-extension
```

----------------------------------------

TITLE: Running Docker Container with Network and Sysctl Configuration
DESCRIPTION: This example demonstrates how to run a Docker container with a specific network and sysctl configuration. It uses the `docker run` command with the `--network` and `--sysctl` options to configure the network and sysctl settings for the container. Note that direct sysctl settings for `eth0` are no longer supported and must be configured using network endpoint options.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/28.md#_snippet_36

LANGUAGE: bash
CODE:
```
docker run --network name=mynet,driver-opt=com.docker.network.endpoint.sysctls=net.ipv4.conf.IFNAME.log_martians=1 ...
```

----------------------------------------

TITLE: ARG instruction with default values
DESCRIPTION: This example shows how to define ARG variables with default values. If no value is provided during the build, the default value will be used.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_120

LANGUAGE: dockerfile
CODE:
```
FROM busybox
ARG user1=someuser
ARG buildno=1
# ...
```

----------------------------------------

TITLE: Building a C program with Dockerfile
DESCRIPTION: This Dockerfile sets up an Ubuntu environment, installs build tools, copies source code, and builds a C program. It demonstrates how each instruction creates a layer in the Docker image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/_index.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM ubuntu:latest

RUN apt-get update && apt-get install -y build-essentials
COPY main.c Makefile /src/
WORKDIR /src/
RUN make build
```

----------------------------------------

TITLE: List running Docker containers
DESCRIPTION: This command lists all running Docker containers, displaying their IDs, names, and other relevant information. It's used to identify the container to be stopped and removed.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/03_updating_app.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker ps
```

----------------------------------------

TITLE: Multi-Stage Dockerfile for Go Application
DESCRIPTION: This Dockerfile demonstrates a multi-stage build process. The first stage builds a Go application, and the second stage copies the built binary into a minimal scratch image. This results in a small production image containing only the executable.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-stage.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM golang:{{% param "example_go_version" %}}
WORKDIR /src
COPY <<EOF ./main.go
package main

import "fmt"

func main() {
  fmt.Println("hello, world")
}
EOF
RUN go build -o /bin/hello ./main.go

FROM scratch
COPY --from=0 /bin/hello /bin/hello
CMD ["/bin/hello"]
```

----------------------------------------

TITLE: Starting a Kafka instance using Docker
DESCRIPTION: This command starts a Kafka instance using Docker, mapping port 9092 on the host to port 9092 in the container. This allows applications running on the host to connect to the Kafka instance.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker run -d --name=kafka -p 9092:9092 apache/kafka
```

----------------------------------------

TITLE: Building a Docker Image
DESCRIPTION: This command builds a Docker image from a Dockerfile in the current directory, tagging it as 'basic-nlp'. The build context (current directory) is sent to the Docker daemon.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/sentiment-analysis.md#_snippet_15

LANGUAGE: console
CODE:
```
$ docker build -t basic-nlp .
```

----------------------------------------

TITLE: Initializing Docker Assets for PHP Application
DESCRIPTION: Uses `docker init` to generate Dockerfile, compose.yaml, and .dockerignore files tailored for a PHP application with Apache. This command automates the setup of essential Docker configuration files, streamlining the containerization process. It requires answering prompts about the application's platform, PHP version, source directory, and port.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/php/containerize.md#_snippet_1

LANGUAGE: shell
CODE:
```
$ docker init
Welcome to the Docker Init CLI!

This utility will walk you through creating the following files with sensible defaults for your project:
  - .dockerignore
  - Dockerfile
  - compose.yaml
  - README.Docker.md

Let's get started!

? What application platform does your project use? PHP with Apache
? What version of PHP do you want to use? 8.2
? What's the relative directory (with a leading .) for your app? ./src
? What local port do you want to use to access your server? 9000
```

----------------------------------------

TITLE: Running a Docker container with an interactive shell
DESCRIPTION: This command runs a container in interactive mode, starting a shell (`sh`) within the container. The `-i` and `-t` flags allocate a pseudo-TTY and keep STDIN open, allowing interaction with the shell.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ docker run -it IMAGE sh
```

----------------------------------------

TITLE: Dockerfile for Development
DESCRIPTION: Replaces the contents of the Dockerfile with a new Dockerfile that sets up the image to start the application so that you can connect a debugger to the running Java process.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```

```

----------------------------------------

TITLE: Flask Hello World Application
DESCRIPTION: This Python code defines a simple "Hello World" application using the Flask framework. It creates a Flask app instance and defines a route that returns the "Hello World!" message.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/dockerfile.md#_snippet_0

LANGUAGE: Python
CODE:
```
from flask import Flask
app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello World!"
```

----------------------------------------

TITLE: Configuring Docker Daemon Environment Variables with Regex
DESCRIPTION: This snippet demonstrates how to configure the Docker daemon to accept logging-related environment variables using a regular expression. The `env-regex` option matches environment variables against the provided regex.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/syslog.md#_snippet_13

LANGUAGE: Docker
CODE:
```
--log-opt env-regex=^(os\|customer)
```

----------------------------------------

TITLE: Defining a target with advanced options in docker-bake.hcl
DESCRIPTION: This HCL configuration defines a target named 'myapp' with advanced options such as build arguments, disabling cache, and specifying target platforms.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/introduction.md#_snippet_4

LANGUAGE: hcl
CODE:
```
target "myapp" {
  context = "."
  dockerfile = "Dockerfile"
  tags = ["myapp:latest"]
  args = {
    foo = "bar"
  }
  no-cache = true
  platforms = ["linux/amd64", "linux/arm64"]
}
```

----------------------------------------

TITLE: Building Cache with Max Mode
DESCRIPTION: This command builds a Docker image and pushes it to a registry, using the `registry` cache backend with `mode=max`. The `mode=max` option caches all layers, including intermediate steps, potentially increasing cache hits at the cost of larger cache size.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/_index.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker buildx build --push -t <registry>/<image> \
  --cache-to type=registry,ref=<registry>/<cache-image>,mode=max \
  --cache-from type=registry,ref=<registry>/<cache-image> .
```

----------------------------------------

TITLE: Publish a service port
DESCRIPTION: Publishes a port for a service, making it accessible through the swarm's routing mesh. The `published` parameter specifies the port on the host, and `target` specifies the port inside the container. This command creates a new service with the specified port mapping.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/ingress.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ docker service create \
  --name <SERVICE-NAME> \
  --publish published=<PUBLISHED-PORT>,target=<CONTAINER-PORT> \
  <IMAGE>
```

----------------------------------------

TITLE: Enabling Debug Mode in daemon.json
DESCRIPTION: This JSON snippet shows how to enable debug mode for the Docker daemon by setting the `debug` key to `true` in the `daemon.json` configuration file. This configuration increases the verbosity of the logs, providing more detailed information for debugging purposes.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/logs.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "debug": true
}
```

----------------------------------------

TITLE: Example .dockerignore file content
DESCRIPTION: This is an example of a .dockerignore file, which excludes node_modules and bar directories from the build context.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#_snippet_21

LANGUAGE: text
CODE:
```
# .dockerignore
node_modules
bar
```

----------------------------------------

TITLE: Accept established connections using conntrack
DESCRIPTION: This command inserts a rule into the DOCKER-USER chain to accept TCP traffic that is part of an established or related connection. It uses the conntrack module to track connection states.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/packet-filtering-firewalls.md#_snippet_0

LANGUAGE: console
CODE:
```
$ sudo iptables -I DOCKER-USER -p tcp -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
```

----------------------------------------

TITLE: Adding Labels to a Volume in Docker Compose (Array)
DESCRIPTION: This example demonstrates how to add metadata to a volume using labels in array format. Labels can be used to store arbitrary key-value pairs that describe the volume. It's recommended to use reverse-DNS notation to prevent conflicts with labels used by other software. Compose sets `com.docker.compose.project` and `com.docker.compose.volume` labels automatically.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/volumes.md#_snippet_5

LANGUAGE: YAML
CODE:
```
volumes:
  db-data:
    labels:
      - "com.example.description=Database volume"
      - "com.example.department=IT/Ops"
      - "com.example.label-with-empty-value"
```

----------------------------------------

TITLE: Installing Docker from deb packages
DESCRIPTION: This snippet installs Docker Engine, Docker CLI, containerd.io, docker-buildx-plugin and docker-compose-plugin from downloaded .deb packages using dpkg.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#_snippet_6

LANGUAGE: bash
CODE:
```
$ sudo dpkg -i ./containerd.io_<version>_<arch>.deb \
  ./docker-ce_<version>_<arch>.deb \
  ./docker-ce-cli_<version>_<arch>.deb \
  ./docker-buildx-plugin_<version>_<arch>.deb \
  ./docker-compose-plugin_<version>_<arch>.deb
```

----------------------------------------

TITLE: Optimized Dockerfile with separate COPY commands
DESCRIPTION: This Dockerfile separates the copying of package management files and project source code to optimize caching. Dependencies are installed in an earlier layer, avoiding rebuilds when project files change.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#_snippet_1

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM node
WORKDIR /app
COPY package.json yarn.lock .    # Copy package management files
RUN npm install                  # Install dependencies
COPY . .                         # Copy over project files
RUN npm build                    # Run build
```

----------------------------------------

TITLE: Listing Docker Images
DESCRIPTION: This command lists the Docker images available on your local machine. It displays the repository, tag, image ID, creation date, and size of each image.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#_snippet_7

LANGUAGE: shell
CODE:
```
$ docker image ls
```

----------------------------------------

TITLE: Creating a Docker Container Builder with Custom Configuration
DESCRIPTION: This command creates a new Docker container builder named 'mybuilder' that utilizes the specified BuildKit configuration file. The builder is set as the current builder and bootstrapped for immediate use.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/configure.md#_snippet_1

LANGUAGE: Shell
CODE:
```
docker buildx create --use --bootstrap \
  --name mybuilder \
  --driver docker-container \
  --config /etc/buildkitd.toml
```

----------------------------------------

TITLE: Installing Docker Rootless Mode
DESCRIPTION: This script sets up the Docker daemon to run in rootless mode. It creates a systemd service, configures environment variables, and enables the service to start on system startup. It requires the `dockerd-rootless-setuptool.sh` script to be present.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#_snippet_5

LANGUAGE: console
CODE:
```
$ dockerd-rootless-setuptool.sh install
```

----------------------------------------

TITLE: Creating MySQL Service with Docker
DESCRIPTION: This command creates a MySQL service named 'mysql' with one replica, using a private network, volume mount for data persistence, and secrets for managing passwords. It also sets environment variables for database configuration.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_41

LANGUAGE: bash
CODE:
```
docker service create \
           --name mysql \
           --replicas 1 \
           --network mysql_private \
           --mount type=volume,source=mydata,destination=/var/lib/mysql \
           --secret source=mysql_root_password,target=mysql_root_password \
           --secret source=mysql_password,target=mysql_password \
           -e MYSQL_ROOT_PASSWORD_FILE="/run/secrets/mysql_root_password" \
           -e MYSQL_PASSWORD_FILE="/run/secrets/mysql_password" \
           -e MYSQL_USER="wordpress" \
           -e MYSQL_DATABASE="wordpress" \
           mysql:latest
```

----------------------------------------

TITLE: Defining External Links - YAML
DESCRIPTION: This example shows how to define external links in a Docker Compose file. External links allow service containers to connect to services running outside of the Compose application.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_45

LANGUAGE: yaml
CODE:
```
external_links:
  - redis
  - database:mysql
  - database:postgresql
```

----------------------------------------

TITLE: Limiting CPU Usage with CPUs Flag
DESCRIPTION: This example demonstrates how to limit a container's CPU usage using the `--cpus` flag. The container is limited to 50% of a single CPU core.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_38

LANGUAGE: console
CODE:
```
$ docker run -it --cpus=0.5 ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Restarting Docker Daemon with Systemd
DESCRIPTION: Restarts the Docker daemon as a user service using systemd. This is needed after changing configuration.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#_snippet_20

LANGUAGE: bash
CODE:
```
$ systemctl --user restart docker
```

----------------------------------------

TITLE: Setting awslogs group using docker run
DESCRIPTION: This command demonstrates how to specify the log group for the `awslogs` driver using the `--log-opt` flag with `docker run`.  The log group must exist unless `awslogs-create-group` is set to true.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/awslogs.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker run --log-driver=awslogs --log-opt awslogs-region=us-east-1 --log-opt awslogs-group=myLogGroup ...
```

----------------------------------------

TITLE: Pulling a Docker Image from a Private Registry
DESCRIPTION: This command attempts to pull a Docker image from a private registry. If content trust is enabled and the image is not signed, it will result in an error.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_sandbox.md#_snippet_9

LANGUAGE: Docker
CODE:
```
docker pull sandboxregistry:5000/test/trusttest
```

----------------------------------------

TITLE: Setting a variable in .env file
DESCRIPTION: This example demonstrates how to define a variable in a `.env` file and reference it in a `compose.yaml` file. The `TAG` variable is set to `v1.5` in the `.env` file, and the `compose.yaml` file uses it to specify the image tag for the `web` service.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/environment-variables/variable-interpolation.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ cat .env
TAG=v1.5
```

----------------------------------------

TITLE: Installing a specific Docker version
DESCRIPTION: This snippet installs a specific version of Docker Engine, Docker CLI, containerd.io, docker-buildx-plugin and docker-compose-plugin using apt-get, specifying the version string.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#_snippet_4

LANGUAGE: bash
CODE:
```
$ VERSION_STRING=5:{{% param "docker_ce_version" %}}-1~debian.12~bookworm
$ sudo apt-get install docker-ce=$VERSION_STRING docker-ce-cli=$VERSION_STRING containerd.io docker-buildx-plugin docker-compose-plugin
```

----------------------------------------

TITLE: Remove Docker Secret (Final)
DESCRIPTION: Removes the 'my_secret_data' secret using `docker secret rm`. This command succeeds because the secret is no longer in use by any services.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_13

LANGUAGE: console
CODE:
```
$ docker secret rm my_secret_data
```

----------------------------------------

TITLE: Defining ports in compose.yaml
DESCRIPTION: Defines the port mapping in the `compose.yaml` file, mapping the host port 3000 to the container port 3000. This allows accessing the application from the host machine.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/08_using_compose.md#_snippet_2

LANGUAGE: yaml
CODE:
```
services:
  app:
    image: node:18-alpine
    command: sh -c "yarn install && yarn run dev"
    ports:
      - 127.0.0.1:3000:3000
```

----------------------------------------

TITLE: Dex Configuration File
DESCRIPTION: Defines Dex's settings, including the issuer URL, storage type, web settings, static clients, and static passwords. This configuration is essential for setting up Dex as a mock OAuth server.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/dex.md#_snippet_2

LANGUAGE: yaml
CODE:
```
# config.yaml
issuer: http://localhost:5556/dex
storage:
  type: memory
web:
  http: 0.0.0.0:5556
staticClients:
  - id: example-app
    redirectURIs:
      - 'http://localhost:5555/callback'
    name: 'Example App'
    secret: ZXhhbXBsZS1hcHAtc2VjcmV0
enablePasswordDB: true
staticPasswords:
  - email: "admin@example.com"
    hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
    username: "admin"
    userID: "1234"
```

----------------------------------------

TITLE: Specify Base Docker Image
DESCRIPTION: This instruction sets the base image for the Docker build. It uses a lightweight version of Python 3.8, optimized for size and speed, reducing the overall image size and potential security vulnerabilities.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/sentiment-analysis.md#_snippet_7

LANGUAGE: dockerfile
CODE:
```
FROM python:3.8-slim
```

----------------------------------------

TITLE: Running a container with a bind mount using -v
DESCRIPTION: This command runs a Docker container named `devtest` in detached mode, creating an interactive terminal. It uses the `-v` flag to bind-mount the `target` directory from the host (current working directory) to the `/app` directory inside the container. The container is based on the `nginx:latest` image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#_snippet_8

LANGUAGE: docker
CODE:
```
docker run -d \
  -it \
  --name devtest \
  -v "$(pwd)"/target:/app \
  nginx:latest
```

----------------------------------------

TITLE: Attaching to and Pinging Containers
DESCRIPTION: This snippet demonstrates attaching to a container (alpine4) and then pinging other containers (alpine1, alpine2, alpine3, and alpine4) to test network connectivity within the Docker environment. It also shows how to ping a container using its IP address when name resolution fails.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#_snippet_21

LANGUAGE: console
CODE:
```
$ docker container attach alpine4

# ping -c 2 alpine1

PING alpine1 (172.18.0.2): 56 data bytes
64 bytes from 172.18.0.2: seq=0 ttl=64 time=0.074 ms
64 bytes from 172.18.0.2: seq=1 ttl=64 time=0.082 ms

--- alpine1 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max = 0.074/0.078/0.082 ms

# ping -c 2 alpine2

PING alpine2 (172.18.0.3): 56 data bytes
64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.075 ms
64 bytes from 172.18.0.3: seq=1 ttl=64 time=0.080 ms

--- alpine2 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max = 0.075/0.077/0.080 ms

# ping -c 2 alpine3
ping: bad address 'alpine3'

# ping -c 2 172.17.0.2

PING 172.17.0.2 (172.17.0.2): 56 data bytes
64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.089 ms
64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.075 ms

--- 172.17.0.2 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max = 0.075/0.082/0.089 ms

# ping -c 2 alpine4

PING alpine4 (172.18.0.4): 56 data bytes
64 bytes from 172.18.0.4: seq=0 ttl=64 time=0.033 ms
64 bytes from 172.18.0.4: seq=1 ttl=64 time=0.064 ms

--- alpine4 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max = 0.033/0.048/0.064 ms
```

----------------------------------------

TITLE: Listing Running Docker Containers
DESCRIPTION: This command lists all currently running Docker containers, displaying information such as container ID, image, command, status, exposed ports, and container name. It is analogous to the `ps` command in Linux for viewing processes.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#_snippet_4

LANGUAGE: Console
CODE:
```
$ docker ps

CONTAINER ID   IMAGE            COMMAND             CREATED          STATUS          PORTS                    NAMES
d75e61fcad1e   docker-gs-ping   "/docker-gs-ping"   41 seconds ago   Up 40 seconds   0.0.0.0:8080->8080/tcp   inspiring_ishizaka
```

----------------------------------------

TITLE: Kubernetes YAML Configuration
DESCRIPTION: Defines a Kubernetes Deployment and Service for a Node.js application. The Deployment manages a single replica of the application, while the Service exposes the application on port 30001, routing traffic to port 3000 inside the pod. Replace `DOCKER_USERNAME/REPO_NAME` with your Docker username and repository name.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/deploy.md#_snippet_0

LANGUAGE: yaml
CODE:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-nodejs-demo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      todo: web
  template:
    metadata:
      labels:
        todo: web
    spec:
      containers:
        - name: todo-site
          image: DOCKER_USERNAME/REPO_NAME
          imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: todo-entrypoint
  namespace: default
spec:
  type: NodePort
  selector:
    todo: web
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30001
```

----------------------------------------

TITLE: Listing available Docker versions
DESCRIPTION: Lists the available versions of docker-ce in the apt repository using apt-cache and awk.  This is useful for identifying specific versions to install.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/ubuntu.md#_snippet_3

LANGUAGE: bash
CODE:
```
apt-cache madison docker-ce | awk '{ print $3 }'
```

----------------------------------------

TITLE: Enabling IPv6 by default on custom bridge networks via command line
DESCRIPTION: This command demonstrates how to enable IPv6 by default on all custom bridge networks using the `dockerd` command-line interface. This is an alternative to configuring it in the `daemon.json` file.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#_snippet_11

LANGUAGE: bash
CODE:
```
dockerd --default-network-opt=bridge=com.docker.network.enable_ipv6=true
```

----------------------------------------

TITLE: ENTRYPOINT exec form example
DESCRIPTION: Shows the exec form of the `ENTRYPOINT` instruction in a Dockerfile. This is the preferred form for defining an entry point.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_103

LANGUAGE: dockerfile
CODE:
```
ENTRYPOINT ["executable", "param1", "param2"]
```

----------------------------------------

TITLE: Configuring Docker Compose Watch for API Service
DESCRIPTION: This YAML configuration snippet demonstrates how to set up Docker Compose Watch for the `api` service.  It specifies that changes to files in the current directory (`.`) should trigger a rebuild of the service, enabling hot reloading during development. The `develop` section defines the watch configuration, including the path to monitor and the action to take upon changes.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/develop.md#_snippet_1

LANGUAGE: yaml
CODE:
```
services:
  api:
    container_name: go-api
    build:
      context: .
      dockerfile: Dockerfile
    image: go-api:latest
    ports:
      - 8000:8000
    networks:
      - go-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    develop:
      watch:
        - path: .
          action: rebuild
```

----------------------------------------

TITLE: Run a Docker container and populate a volume using `-v`
DESCRIPTION: This command starts an nginx container and populates the new volume 'nginx-vol' with the contents of the container's /usr/share/nginx/html directory. This directory contains Nginx's default HTML content. The volume is mounted to the /usr/share/nginx/html directory within the container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_20

LANGUAGE: console
CODE:
```
$ docker run -d \
  --name=nginxtest \
  -v nginx-vol:/usr/share/nginx/html \
  nginx:latest
```

----------------------------------------

TITLE: Running a container and publishing its port using the Docker CLI
DESCRIPTION: This command starts a new container and publishes its port using the Docker CLI. The first `8080` refers to the host port and the second `80` refers to the container port.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/publishing-ports.md#_snippet_5

LANGUAGE: Bash
CODE:
```
$ docker run -d -p 8080:80 docker/welcome-to-docker
```

----------------------------------------

TITLE: Customize Build Group in docker-bake.hcl
DESCRIPTION: This HCL configuration defines a default build group that includes only the 'vote', 'result', and 'worker' targets, excluding the 'seed' target. This allows for a customized build process that focuses on production images.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#_snippet_9

LANGUAGE: hcl
CODE:
```
group "default" {
  targets = ["vote", "result", "worker"]
}
```

----------------------------------------

TITLE: Pulling Docker Images with Tags
DESCRIPTION: This command downloads all images and tags associated with a specified image repository from Docker Hub. It's a prerequisite for account deactivation if you want to preserve your images.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/accounts/deactivate-user-account.md#_snippet_0

LANGUAGE: docker
CODE:
```
docker pull -a <image>:<tag>
```

----------------------------------------

TITLE: Listing Running Docker Containers
DESCRIPTION: This command lists all the running Docker containers. It provides information about the containers, such as their names, IDs, and the ports they are exposing.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/compose.md#_snippet_4

LANGUAGE: Shell
CODE:
```
$ docker ps
```

----------------------------------------

TITLE: Extending services with overrides
DESCRIPTION: This example shows how to extend a service from another file and override specific configurations locally. The `web` service extends `webapp` from `common-services.yml` and overrides the `environment` and `cpu_shares`.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/extends.md#_snippet_4

LANGUAGE: yaml
CODE:
```
services:
  web:
    extends:
      file: common-services.yml
      service: webapp
    environment:
      - DEBUG=1
    cpu_shares: 5

  important_web:
    extends: web
    cpu_shares: 10
```

----------------------------------------

TITLE: Output of docker buildx bake with add function
DESCRIPTION: This JSON output shows the result of running `docker buildx bake --print webapp` with the HCL configuration that uses the `add` function. The `buildno` argument in the `webapp` target is set to the result of the addition, which is 124.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/funcs.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "group": {
    "default": {
      "targets": ["webapp"]
    }
  },
  "target": {
    "webapp": {
      "context": ".",
      "dockerfile": "Dockerfile",
      "args": {
        "buildno": "124"
      }
    }
  }
}
```

----------------------------------------

TITLE: Installing Docker Engine from .deb packages
DESCRIPTION: This command installs Docker Engine, CLI, containerd, docker-buildx-plugin, and docker-compose-plugin from downloaded .deb packages using dpkg.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/raspberry-pi-os.md#_snippet_6

LANGUAGE: console
CODE:
```
$ sudo dpkg -i ./containerd.io_<version>_<arch>.deb \
  ./docker-ce_<version>_<arch>.deb \
  ./docker-ce-cli_<version>_<arch>.deb \
  ./docker-buildx-plugin_<version>_<arch>.deb \
  ./docker-compose-plugin_<version>_<arch>.deb
```

----------------------------------------

TITLE: GitHub Actions Workflow with Docker Build and Push
DESCRIPTION: This workflow demonstrates building and pushing a Docker image to Docker Hub using GitHub Actions. It includes steps for logging in to Docker Hub, setting up Docker Buildx, and building/pushing the image with caching enabled using the GitHub Actions cache.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/cache.md#_snippet_2

LANGUAGE: yaml
CODE:
```
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: user/app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
```

----------------------------------------

TITLE: Setting BuildKit Host - Console
DESCRIPTION: This snippet shows how to specify the address of a BuildKit daemon to use as a remote builder using the `BUILDKIT_HOST` environment variable. This is equivalent to using the address as a positional argument to `docker buildx create`. The example sets the host to a TCP address.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#_snippet_12

LANGUAGE: console
CODE:
```
$ export BUILDKIT_HOST=tcp://localhost:1234
$ docker buildx create --name=remote --driver=remote
```

----------------------------------------

TITLE: Building with Tarball Context
DESCRIPTION: This command shows how to use a tarball as the build context. The tarball is piped to the `docker build` command, and the builder uses the contents of the tarball as the filesystem context.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#_snippet_5

LANGUAGE: console
CODE:
```
$ tar czf foo.tar.gz *
$ docker build - < foo.tar.gz
```

----------------------------------------

TITLE: Setting Proxy with Docker Build and Run Commands
DESCRIPTION: These commands demonstrate how to set proxy configurations using the `--build-arg` flag for `docker build` and the `--env` flag for `docker run`. This allows specifying proxy settings directly on the command line without modifying the Docker client configuration.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/proxy.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker build --build-arg HTTP_PROXY="http://proxy.example.com:3128" .
$ docker run --env HTTP_PROXY="http://proxy.example.com:3128" redis
```

----------------------------------------

TITLE: Pinning base image version
DESCRIPTION: This snippet demonstrates how to specify a base image version in a Dockerfile. It uses the `FROM` instruction to set the base image to Alpine version 3.19. Pinning the base image version ensures consistent builds by using a specific version of the image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_4

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM alpine:3.19
```

----------------------------------------

TITLE: SQL Script to Create a Table
DESCRIPTION: This SQL script creates a table named myothertable in the mydb database if it doesn't already exist, and inserts a row with the value 'other_value' into the column_name column. This script is used to initialize the database when the custom MySQL image is run.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#_snippet_17

LANGUAGE: SQL
CODE:
```
CREATE TABLE IF NOT EXISTS mydb.myothertable (
  column_name VARCHAR(255)
);

INSERT INTO mydb.myothertable (column_name) VALUES ('other_value');
```

----------------------------------------

TITLE: Handling Send Route
DESCRIPTION: This function handles POST requests to the '/send' route. It binds the JSON payload from the request body to a `Message` struct, then inserts the message value into the database within a transaction. It uses `crdb.ExecuteTx` for transaction management.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#_snippet_14

LANGUAGE: go
CODE:
```
func sendHandler(db *sql.DB, c echo.Context) error {

	m := &Message{}

	if err := c.Bind(m); err != nil {
		return c.JSON(http.StatusInternalServerError, err)
	}

	err := crdb.ExecuteTx(context.Background(), db, nil,
		func(tx *sql.Tx) error {
			_, err := tx.Exec(
				"INSERT INTO message (value) VALUES ($1) ON CONFLICT (value) DO UPDATE SET value = excluded.value",
				m.Value,
			)
			if err != nil {
				return c.JSON(http.StatusInternalServerError, err)
			}
			return nil
		})

	if err != nil {
		return c.JSON(http.StatusInternalServerError, err)
	}

	return c.JSON(http.StatusOK, m)
}
```

----------------------------------------

TITLE: Draining a Docker Swarm Node
DESCRIPTION: This command updates a Docker Swarm node's availability to 'drain', preventing new tasks from being scheduled on it and reassigning existing tasks to other available worker nodes. This is useful for isolating manager nodes or performing maintenance without disrupting services. Replace <NODE> with the actual node ID or name.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/admin_guide.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker node update --availability drain <NODE>
```

----------------------------------------

TITLE: Build and Run Bun App with Docker Compose
DESCRIPTION: Uses Docker Compose to build and run the Bun application defined in the Dockerfile. The `--build` flag ensures that the image is built before running the container. This command starts the application in the foreground.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/containerize.md#_snippet_2

LANGUAGE: bash
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Configuring Network Driver Options in Docker Compose
DESCRIPTION: This example demonstrates how to configure driver-specific options for a network. The `driver_opts` attribute allows passing key-value pairs to the driver.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/networks.md#_snippet_6

LANGUAGE: yaml
CODE:
```
networks:
  frontend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"
```

----------------------------------------

TITLE: Commit and Push Changes to GitHub
DESCRIPTION: These commands stage all changes, commit them with a message, and push the commit to the main branch of the remote GitHub repository. The `-u origin main` option sets the upstream branch for future pushes.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/configure-ci-cd.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ git add -A
$ git commit -m "my commit"
$ git push -u origin main
```

----------------------------------------

TITLE: Listing service tasks
DESCRIPTION: Lists the tasks of a service to assess the current balance of the service across nodes.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/admin_guide.md#_snippet_10

LANGUAGE: Docker CLI
CODE:
```
docker service ps <servicename>
```

----------------------------------------

TITLE: Accessing a host service from a container
DESCRIPTION: This command uses netcat within a container (started with host networking) to connect to a web server running on port 80 of the host.  It demonstrates accessing host services from a container using host networking.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/host.md#_snippet_3

LANGUAGE: console
CODE:
```
$ nc localhost 80
```

----------------------------------------

TITLE: Running the application stack with Docker Compose
DESCRIPTION: This command starts the application stack defined in the `compose.yaml` file using Docker Compose. The `-d` flag runs the containers in detached mode, allowing them to run in the background.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/08_using_compose.md#_snippet_11

LANGUAGE: console
CODE:
```
$ docker compose up -d
```

----------------------------------------

TITLE: Configuring Max-Level Provenance in GitHub Actions (YAML)
DESCRIPTION: This workflow configures max-level provenance attestations when building and pushing a Docker image using GitHub Actions. It sets up Docker Buildx, extracts metadata, and uses the docker/build-push-action to build and push the image with provenance mode set to max. Secrets are used for Docker Hub authentication.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/attestations.md#_snippet_0

LANGUAGE: YAML
CODE:
```
name: ci

on:
  push:

env:
  IMAGE_NAME: user/app

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          push: true
          provenance: mode=max
          tags: ${{ steps.meta.outputs.tags }}
```

----------------------------------------

TITLE: Setting Pull Policy for Images in Docker Compose
DESCRIPTION: This snippet illustrates how to set the `pull_policy` for an image in a Docker Compose file, which determines when Compose pulls the image from the registry. The example shows setting the policy to `every_12h`, which checks for updates every 12 hours.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_85

LANGUAGE: YAML
CODE:
```
services:
  test:
    image: nginx
    pull_policy: every_12h
```

----------------------------------------

TITLE: Start Container with Fluentd Logging Driver
DESCRIPTION: This command starts a Docker container using the Fluentd logging driver.  It configures the container to send its logs to a Fluentd instance.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/fluentd.md#_snippet_6

LANGUAGE: console
CODE:
```
$ docker run --log-driver=fluentd your/application
```

----------------------------------------

TITLE: Configure Docker daemon metrics endpoint
DESCRIPTION: Configures the Docker daemon to expose Prometheus-compatible metrics on port 9323 via the loopback interface.  The metrics-addr parameter specifies the address where Prometheus can scrape metrics.  Restarting Docker is required for the changes to take effect.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/prometheus.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "metrics-addr": "127.0.0.1:9323"
}
```

----------------------------------------

TITLE: Compose Develop Sync+Exec Example
DESCRIPTION: This example demonstrates how to use the `develop` section with the `watch` attribute and the `sync+exec` action to sync configuration files and then execute a command inside the container to reload the service without interruption. It defines the command to be run inside the container once it has started, specifying the command to reload the application.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/develop.md#_snippet_1

LANGUAGE: yaml
CODE:
```
services:
  frontend:
    image: ...
    develop:
      watch: 
        # sync content then run command to reload service without interruption
        - path: ./etc/config
          action: sync+exec
          target: /etc/config/
          exec:
            command: app reload
```

----------------------------------------

TITLE: Running bash in an Ubuntu container with a bind mount (Command Prompt)
DESCRIPTION: This command starts an interactive bash session in an Ubuntu container, creating a bind mount between the host's current working directory and the /src directory inside the container. The `src` is the current working directory on your host machine (`getting-started-app`), and `target` is where that directory should appear inside the container (`/src`).
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#_snippet_3

LANGUAGE: bash
CODE:
```
docker run -it --mount "type=bind,src=%cd%,target=/src" ubuntu bash
```

----------------------------------------

TITLE: Specifying Image - Docker Compose YAML
DESCRIPTION: This snippet demonstrates how to specify the image to use for a service in a Docker Compose file. It shows various formats for specifying the image, including with a tag, digest, and registry.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_59

LANGUAGE: yaml
CODE:
```
image: redis
```

LANGUAGE: yaml
CODE:
```
image: redis:5
```

LANGUAGE: yaml
CODE:
```
image: redis@sha256:0ed5d5928d4737458944eb604cc8509e245c3e19d02ad83935398bc4b991aac7
```

LANGUAGE: yaml
CODE:
```
image: library/redis
```

LANGUAGE: yaml
CODE:
```
image: docker.io/library/redis
```

LANGUAGE: yaml
CODE:
```
image: my_private.registry:5000/redis
```

----------------------------------------

TITLE: Set Working Directory in Dockerfile
DESCRIPTION: This instruction defines the working directory inside the Docker container where subsequent commands will be executed. It ensures that all file operations and commands are performed within the specified directory.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/multi-stage-builds.md#_snippet_3

LANGUAGE: Dockerfile
CODE:
```
WORKDIR /app
```

----------------------------------------

TITLE: Configure Docker Compose for Production and Development
DESCRIPTION: Defines two services in a Docker Compose file: `react-prod` for serving a static production app using Nginx, and `react-dev` for running the React development server with live reload. It uses Compose Watch to trigger file syncing for development.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/develop.md#_snippet_1

LANGUAGE: yaml
CODE:
```
services:
  react-prod:
    build:
      context: .
      dockerfile: Dockerfile
    image: docker-reactjs-sample
    ports:
      - "8080:8080"

  react-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    develop:
      watch:
        - action: sync
          path: .
          target: /app
```

----------------------------------------

TITLE: Build Multi-Platform Image (Docker Build Cloud)
DESCRIPTION: This command builds a multi-platform Docker image for `linux/amd64` and `linux/arm64` architectures using Docker Build Cloud. It specifies a cloud builder and an output directory for the resulting binaries.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#_snippet_11

LANGUAGE: console
CODE:
```
$ docker build \
   --builder <cloud-builder> \
   --platform linux/amd64,linux/arm64 \
   --output ./bin .
```

----------------------------------------

TITLE: Cloning the Sample Application
DESCRIPTION: This command clones the sample Node.js application from GitHub. It requires Git to be installed and accessible from the command line. The application is cloned into a directory named `docker-nodejs-sample`.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/containerize.md#_snippet_0

LANGUAGE: console
CODE:
```
$ git clone https://github.com/docker/docker-nodejs-sample && cd docker-nodejs-sample
```

----------------------------------------

TITLE: Firewall rule for firewalld
DESCRIPTION: Adds rules to firewalld to allow incoming and outgoing connections on a specified interface.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/remote-access.md#_snippet_5

LANGUAGE: XML
CODE:
```
<direct>
  [ <rule ipv="ipv6" table="filter" chain="FORWARD_direct" priority="0"> -i zt0 -j ACCEPT </rule> ]
  [ <rule ipv="ipv6" table="filter" chain="FORWARD_direct" priority="0"> -o zt0 -j ACCEPT </rule> ]
</direct>
```

----------------------------------------

TITLE: Listing Local Container Images
DESCRIPTION: Retrieves a list of local Docker images. Options can be provided to filter the images based on criteria like dangling status.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/Docker.md#_snippet_3

LANGUAGE: typescript
CODE:
```
const images = await ddClient.docker.listImages();
```

----------------------------------------

TITLE: Running a MySQL Container on a Docker Network
DESCRIPTION: This command runs a MySQL container named 'my-mysql' on the 'my-network' network. It sets the root password and database name using environment variables.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#_snippet_6

LANGUAGE: bash
CODE:
```
docker run --name my-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -e MYSQL_DATABASE=mydb --network my-network -d mysql:latest
```

----------------------------------------

TITLE: Starting the Application with Docker Compose
DESCRIPTION: This command starts the application using Docker Compose, building the images if necessary. The `--build` flag ensures that the images are rebuilt with the latest changes.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#_snippet_11

LANGUAGE: Shell
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Configure Docker Client Proxy Settings
DESCRIPTION: Configures proxy settings for the Docker client using a JSON configuration file. This file specifies HTTP, HTTPS, and no-proxy settings. These settings are applied to new containers and builds.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/proxy.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
 "proxies": {
   "default": {
     "httpProxy": "http://proxy.example.com:3128",
     "httpsProxy": "https://proxy.example.com:3129",
     "noProxy": "*.test.example.com,.example.org,127.0.0.0/8"
   }
 }
}
```

----------------------------------------

TITLE: Setting SOURCE_DATE_EPOCH to Unix Epoch in GitHub Actions
DESCRIPTION: This example demonstrates how to set the SOURCE_DATE_EPOCH environment variable to 0 (Unix epoch) in a GitHub Actions workflow using docker/build-push-action. This ensures that the timestamps in the image metadata reflect the specified Unix time, contributing to reproducible builds. It requires the docker/setup-buildx-action to be set up.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/reproducible-builds.md#_snippet_0

LANGUAGE: yaml
CODE:
```
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        uses: docker/build-push-action@v6
        with:
          tags: user/app:latest
        env:
          SOURCE_DATE_EPOCH: 0
```

----------------------------------------

TITLE: Running Docker Compose Up
DESCRIPTION: This command starts the application defined in the compose.yaml file, including the newly added phpMyAdmin service. The `--build` flag ensures that any necessary images are built before starting the services.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Configure RootlessKit Networking with slirp4netns
DESCRIPTION: This example shows how to configure Docker in rootless mode to use the `slirp4netns` network and port driver. This can be useful for enabling source IP propagation. It involves creating an override configuration file for the `docker.service` systemd unit.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#_snippet_44

LANGUAGE: systemd
CODE:
```
[Service]
Environment="DOCKERD_ROOTLESS_ROOTLESSKIT_NET=slirp4netns"
Environment="DOCKERD_ROOTLESS_ROOTLESSKIT_PORT_DRIVER=slirp4netns"
```

----------------------------------------

TITLE: Set Working Directory in Dockerfile
DESCRIPTION: This instruction sets the working directory inside the Docker image to `/app`. Subsequent commands like `COPY` and `RUN` will be executed in this directory, organizing application-related files.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#_snippet_8

LANGUAGE: dockerfile
CODE:
```
WORKDIR /app
```

----------------------------------------

TITLE: Build Go Application in Docker Image
DESCRIPTION: This command compiles the Go application inside the Docker image. It disables CGO, sets the target operating system to Linux, and specifies the output binary as `/docker-gs-ping`.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#_snippet_8

LANGUAGE: Dockerfile
CODE:
```
RUN CGO_ENABLED=0 GOOS=linux go build -o /docker-gs-ping
```

----------------------------------------

TITLE: Connecting a Container to a User-Defined Bridge in Docker
DESCRIPTION: This command creates a new Nginx container named 'my-nginx' and connects it to the 'my-net' network. It also publishes port 80 on the container to port 8080 on the Docker host, allowing external access.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker create --name my-nginx \
  --network my-net \
  --publish 8080:80 \
  nginx:latest
```

----------------------------------------

TITLE: Removing a Docker Service
DESCRIPTION: This command removes the 'redis' service.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#_snippet_11

LANGUAGE: console
CODE:
```
$ docker service rm redis
```

----------------------------------------

TITLE: Removing a Docker Container
DESCRIPTION: This command removes a Docker container by name. The `--force` option ensures the container is stopped before removal. This is used to clean up the application's container.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#_snippet_18

LANGUAGE: console
CODE:
```
$ docker container rm --force rest-server
```

----------------------------------------

TITLE: Creating a Customized Overlay Network in Docker
DESCRIPTION: This command creates an overlay network named `my-network` with a specified subnet (`10.0.9.0/24`) and gateway (`10.0.9.99`). This allows for manual configuration of the network's IP address range and gateway, overriding the default automatic configuration.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker network create \
  --driver overlay \
  --subnet 10.0.9.0/24 \
  --gateway 10.0.9.99 \
  my-network
```

----------------------------------------

TITLE: Setting SOURCE_DATE_EPOCH to Unix Epoch with Bake Action
DESCRIPTION: This example demonstrates how to set the SOURCE_DATE_EPOCH environment variable to 0 (Unix epoch) in a GitHub Actions workflow using docker/bake-action. This ensures that the timestamps in the image metadata reflect the specified Unix time, contributing to reproducible builds. It requires the docker/setup-buildx-action to be set up.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/reproducible-builds.md#_snippet_1

LANGUAGE: yaml
CODE:
```
name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        uses: docker/bake-action@v6
        env:
          SOURCE_DATE_EPOCH: 0
```

----------------------------------------

TITLE: Removing Config Access from a Service
DESCRIPTION: This command updates the 'redis' service to remove access to the 'my-config' config. The --config-rm option is used to remove the config from the service's configuration.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker service update --config-rm my-config redis
```

----------------------------------------

TITLE: Creating Data in MySQL Database (CLI)
DESCRIPTION: This command uses 'docker exec' to run the 'mysql' client inside the 'my-mysql' container. It connects as the root user with the specified password and executes an SQL statement to create a table named 'mytable' in the 'mydb' database, and inserts a value into it.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#_snippet_9

LANGUAGE: bash
CODE:
```
$ docker exec my-mysql mysql -u root -pmy-secret-pw -e "CREATE TABLE IF NOT EXISTS mydb.mytable (column_name VARCHAR(255)); INSERT INTO mydb.mytable (column_name) VALUES ('value');"
```

----------------------------------------

TITLE: GitHub Actions: Authenticate to Docker Hub
DESCRIPTION: This step authenticates with Docker Hub using the provided username and password, allowing the workflow to push the built image to the registry. It uses the Docker credentials configured in the repository settings.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/gha.md#_snippet_3

LANGUAGE: YAML
CODE:
```
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
```

----------------------------------------

TITLE: Example API response
DESCRIPTION: This is an example of the expected JSON response from the API endpoint. It confirms that the application is running and accessible.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#_snippet_32

LANGUAGE: json
CODE:
```
Hello, Docker! (0)
```

----------------------------------------

TITLE: Load spaCy Language Model
DESCRIPTION: The `spacy.load` function loads a language model. The `en_core_web_sm` model is a small English language model suitable for various NLP tasks, including tokenization, part-of-speech tagging, and named entity recognition.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/named-entity-recognition.md#_snippet_1

LANGUAGE: python
CODE:
```
nlp = spacy.load("en_core_web_sm")
```

----------------------------------------

TITLE: Switching back to the default Docker context
DESCRIPTION: This command switches the Docker CLI back to the default (local) Docker daemon.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker context use default
default
Current context is now "default"
```

----------------------------------------

TITLE: Starting Docker service and running hello-world
DESCRIPTION: This command starts the Docker service and then runs the hello-world image to verify the installation.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/raspberry-pi-os.md#_snippet_7

LANGUAGE: console
CODE:
```
$ sudo service docker start
$ sudo docker run hello-world
```

----------------------------------------

TITLE: Combining Docker Filters (OR)
DESCRIPTION: This example combines multiple `--filter` flags to show images that match either `alpine:latest` or `busybox`. This demonstrates a logical OR operation.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/filter.md#_snippet_2

LANGUAGE: Docker CLI
CODE:
```
$ docker images
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
ubuntu       20.04     33a5cc25d22c   2 hours ago   101MB
ubuntu       18.04     152dc042452c   2 hours ago   88.1MB
alpine       3.16      a8cbb8c69ee7   2 hours ago   8.67MB
alpine       latest    7144f7bab3d4   2 hours ago   11.7MB
busybox      uclibc    3e516f71d880   2 hours ago   2.4MB
busybox      glibc     7338d0c72c65   2 hours ago   6.09MB
$ docker images --filter reference=alpine:latest --filter=reference=busybox
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
alpine       latest    7144f7bab3d4   2 hours ago   11.7MB
busybox      uclibc    3e516f71d880   2 hours ago   2.4MB
busybox      glibc     7338d0c72c65   2 hours ago   6.09MB
```

----------------------------------------

TITLE: Checking unprivileged_userns_clone Value
DESCRIPTION: This command checks the value of `/proc/sys/kernel/unprivileged_userns_clone`. A value of 0 can cause errors when starting the Docker daemon in rootless mode.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#_snippet_28

LANGUAGE: bash
CODE:
```
$ cat /proc/sys/kernel/unprivileged_userns_clone
```

----------------------------------------

TITLE: GitLab CI Script for Docker Scout CVE Analysis and Comparison
DESCRIPTION: This script determines the Docker image tag based on the Git branch. If the commit is on the default branch, it generates a CVE report using Docker Scout. Otherwise, it compares the image with the latest image from the default branch, failing the pipeline if new critical or high CVEs are detected. Finally, it pushes the Docker image to the registry.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/ci/gitlab.md#_snippet_1

LANGUAGE: yaml
CODE:
```
script:
  - |
    if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
      tag=""
      echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
    else
      tag=":$CI_COMMIT_REF_SLUG"
      echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
    fi
  - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
  - |
    if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
      # Get a CVE report for the built image and fail the pipeline when critical or high CVEs are detected
      docker scout cves "$CI_REGISTRY_IMAGE${tag}" --exit-code --only-severity critical,high    
    else
      # Compare image from branch with latest image from the default branch and fail if new critical or high CVEs are detected
      docker scout compare "$CI_REGISTRY_IMAGE${tag}" --to "$CI_REGISTRY_IMAGE:latest" --exit-code --only-severity critical,high --ignore-unchanged
    fi

  - docker push "$CI_REGISTRY_IMAGE${tag}"
```

----------------------------------------

TITLE: Insert Record into Postgres Database
DESCRIPTION: This SQL command inserts a new record into the 'Students' table of the 'example' database. It specifies the values for the 'LastName', 'FirstMidName', and 'EnrollmentDate' columns, while using DEFAULT for the 'ID' column to auto-increment.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/develop.md#_snippet_6

LANGUAGE: console
CODE:
```
example=# INSERT INTO "Students" ("ID", "LastName", "FirstMidName", "EnrollmentDate") VALUES (DEFAULT, 'Whale', 'Moby', '2013-03-20');
```

----------------------------------------

TITLE: Verify Port Mapping (CLI)
DESCRIPTION: This command lists the running Docker containers and their port mappings. It is used to verify that the port mapping was successful.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker ps
```

----------------------------------------

TITLE: Downloading Go Modules with SSH Mount in Dockerfile
DESCRIPTION: This Dockerfile instruction downloads Go modules using an SSH mount. It mounts the current directory, Go module cache, and SSH agent socket to enable access to private repositories during the download process.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/secrets.md#_snippet_5

LANGUAGE: Dockerfile
CODE:
```
RUN --mount=type=bind,target=. \
    --mount=type=cache,target=/go/pkg/mod \
    --mount=type=ssh \
    go mod download -x
```

----------------------------------------

TITLE: Running a container with a restart policy
DESCRIPTION: This command runs a container from the 'startstop' image with a restart policy of 'always'. The container will automatically restart if it exits. The CLI will exit when the container's initial process exits.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/start-containers-automatically.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker run --restart always startstop
Starting...
1
2
3
4
5
Exiting...
$
```

----------------------------------------

TITLE: Running Docker Compose in detached mode
DESCRIPTION: This command starts the containers defined in the Docker Compose file in detached mode. The --build flag ensures that images are built before starting the containers, and the -d flag runs them in the background.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#_snippet_33

LANGUAGE: console
CODE:
```
$ docker compose up --build -d
```

----------------------------------------

TITLE: Dockerfile for Deno Application
DESCRIPTION: This Dockerfile sets up a Deno environment for running a Deno application. It uses the official `denoland/deno:latest` image as the base, sets the working directory, copies the server code, sets permissions, exposes port 8000, and defines the command to run the Deno server with network access.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/containerize.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
# Use the official Deno image
FROM denoland/deno:latest

# Set the working directory
WORKDIR /app

# Copy server code into the container
COPY server.ts .

# Set permissions (optional but recommended for security)
USER deno

# Expose port 8000
EXPOSE 8000

# Run the Deno server
CMD ["run", "--allow-net", "server.ts"]
```

----------------------------------------

TITLE: Filter CVEs listed in the CISA KEV catalog (CLI)
DESCRIPTION: This command shows how to filter and display only the CVEs listed in the CISA Known Exploited Vulnerabilities (KEV) catalog using the Docker Scout CLI. The IMAGE parameter specifies the target Docker image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/release-notes/cli.md#_snippet_6

LANGUAGE: Console
CODE:
```
$ docker scout cves [IMAGE] --only-cisa-kev
```

----------------------------------------

TITLE: Splitting Image Name by Separator in Docker Inspect
DESCRIPTION: This example demonstrates how to use the `split` function within the `docker inspect` command to split the image name into a list of strings, using a specified separator. It requires a container name as input and outputs the list of strings.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/formatting.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker inspect --format '{{split .Image ":"}}' container
```

----------------------------------------

TITLE: Create Nginx Service with Secrets and Config
DESCRIPTION: This command creates a Docker service named 'nginx' that uses the specified secrets and config. It publishes port 443 to port 3000 on the host, and sets the file mode to 0440, restricting access to the owner and group.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#_snippet_35

LANGUAGE: bash
CODE:
```
docker service create \
     --name nginx \
     --secret site.key \
     --secret site.crt \
     --config source=site.conf,target=/etc/nginx/conf.d/site.conf,mode=0440 \
     --publish published=3000,target=443 \
     nginx:latest \
     sh -c "exec nginx -g 'daemon off;'"
```

----------------------------------------

TITLE: Dockerfile Development Stage Definition
DESCRIPTION: Defines a multi-stage Dockerfile to create a development environment. It uses a golang base image for building and an alpine image for the final runtime environment, copying the built server executable.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/dev-environments/set-up.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM golang:1.16-alpine AS build
WORKDIR /go/src/github.com/org/repo
COPY . .
RUN go build -o server .
FROM build AS development
RUN apk update \
    && apk add git
CMD ["go", "run", "main.go"]
FROM alpine:3.12
EXPOSE 8000
COPY --from=build /go/src/github.com/org/repo/server /server
CMD ["/server"]
```

----------------------------------------

TITLE: Adding Capabilities - YAML
DESCRIPTION: Specifies additional container capabilities as strings.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_7

LANGUAGE: YAML
CODE:
```
cap_add:
  - ALL
```

----------------------------------------

TITLE: Using External Volume with Custom Name in Docker Compose
DESCRIPTION: This example shows how to combine the `external` and `name` attributes to use an existing volume with a custom name. The `external: true` setting tells Compose to look for an existing volume, and the `name` attribute specifies the actual name of the volume on the platform. This allows you to decouple the internal name used in the Compose file from the actual volume name on the platform.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/volumes.md#_snippet_8

LANGUAGE: YAML
CODE:
```
volumes:
  db-data:
    external: true
    name: actual-name-of-volume
```

----------------------------------------

TITLE: GitHub Actions workflow for building and pushing Docker images
DESCRIPTION: This GitHub Actions workflow builds and pushes Docker images. It uses the docker/build-push-action to build the image and automatically runs build checks, displaying the results in the diff view of pull requests.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/checks.md#_snippet_1

LANGUAGE: yaml
CODE:
```
name: Build and push Docker images
on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Build and push
        uses: docker/build-push-action@v6.6.0
```

----------------------------------------

TITLE: Pruning Docker Containers with Multiple Negated Label Filters (AND)
DESCRIPTION: This example prunes all Docker containers except those labeled with both `foo` and `bar`. It demonstrates that multiple negated filters create a logical AND constraint.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/filter.md#_snippet_4

LANGUAGE: Docker CLI
CODE:
```
$ docker container prune --filter "label!=foo" --filter "label!=bar"
```

----------------------------------------

TITLE: Multi-Stage Dockerfile
DESCRIPTION: This Dockerfile demonstrates a multi-stage build process. It uses a golang image to build a Go application, then copies the resulting binary to a smaller base image. This reduces the final image size and improves security by excluding unnecessary build tools.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#_snippet_16

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1

# Build the application from source
FROM golang:1.19 AS build-stage

WORKDIR /app

COPY go.mod go.sum ./
RUN go mod download

COPY *.go ./

RUN CGO_ENABLED=0 GOOS=linux go build -o /docker-gs-ping

# Run the tests in the container
FROM build-stage AS run-test-stage
RUN go test -v ./...
```

----------------------------------------

TITLE: Kubernetes Deployment and Services YAML
DESCRIPTION: Defines a Kubernetes deployment for a Go application and a PostgreSQL database, along with corresponding services to expose them. The Go application deployment includes an init container to wait for the database to be available before starting the application container.  It also defines environment variables for database connection details.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/deploy.md#_snippet_0

LANGUAGE: YAML
CODE:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: server
  name: server
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      service: server
  strategy: {}
  template:
    metadata:
      labels:
        service: server
    spec:
      initContainers:
        - name: wait-for-db
          image: busybox:1.28
          command:
            [
              "sh",
              "-c",
              'until nc -zv db 5432; do echo "waiting for db"; sleep 2; done;',
            ]
      containers:
        - env:
            - name: PGDATABASE
              value: mydb
            - name: PGPASSWORD
              value: whatever
            - name: PGHOST
              value: db
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: postgres
          image: DOCKER_USERNAME/REPO_NAME
          name: server
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              hostPort: 8080
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: db
  name: db
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      service: db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        service: db
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              value: mydb
            - name: POSTGRES_PASSWORD
              value: whatever
            - name: POSTGRES_USER
              value: postgres
          image: postgres
          name: db
          ports:
            - containerPort: 5432
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: server
  name: server
  namespace: default
spec:
  type: NodePort
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
      nodePort: 30001
  selector:
    service: server
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: db
  name: db
  namespace: default
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    service: db
status:
  loadBalancer: {}
```

----------------------------------------

TITLE: Setting Environment Variables with Docker Run
DESCRIPTION: Sets an environment variable inside the container using the `-e` option in `docker run`.  The environment variable `foo` is set to the value `bar` within the container. The `env` command displays the environment variables.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#_snippet_1

LANGUAGE: bash
CODE:
```
$ docker run -e foo=bar postgres env
```

----------------------------------------

TITLE: Inspecting the Docker Bridge Network
DESCRIPTION: This command inspects the `bridge` network, providing detailed information about its configuration, including the IP address of the gateway, subnet, and the connected containers with their respective IP addresses and MAC addresses. The output is in JSON format.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker network inspect bridge
```

----------------------------------------

TITLE: Configuring data-root in daemon.json
DESCRIPTION: This JSON snippet configures the `data-root` directory for Docker, specifying a location outside of NFS. This is a workaround for issues when `~/.local/share/docker` is located on NFS.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#_snippet_33

LANGUAGE: json
CODE:
```
{"data-root":"/somewhere-out-of-nfs"}
```

----------------------------------------

TITLE: Running Apache in Foreground with ENTRYPOINT (Dockerfile)
DESCRIPTION: This Dockerfile configures Apache to run in the foreground as PID 1 using the `ENTRYPOINT` instruction. It installs Apache, exposes ports 80 and 443, and defines volumes for web content, logs, and configuration.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_107

LANGUAGE: dockerfile
CODE:
```
FROM debian:stable
RUN apt-get update && apt-get install -y --force-yes apache2
EXPOSE 80 443
VOLUME ["/var/www", "/var/log/apache2", "/etc/apache2"]
ENTRYPOINT ["/usr/sbin/apache2ctl", "-D", "FOREGROUND"]
```

----------------------------------------

TITLE: Creating an IPv6 network with subnet
DESCRIPTION: Creates a Docker network with IPv6 enabled and specifies a subnet for the network. This allows for more control over the IP address range used by the network.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/ipv6.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker network create --ipv6 --subnet 2001:db8::/64 ip6net
```

----------------------------------------

TITLE: Drain a Docker Swarm Node
DESCRIPTION: This command updates the availability of a specified node to `drain`, preventing it from receiving new tasks and triggering the reassignment of existing tasks to other active nodes. Replace `<NODE-ID>` with the actual node ID or hostname.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/drain-node.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker node update --availability drain worker1

worker1
```

----------------------------------------

TITLE: Creating a Custom Network
DESCRIPTION: Illustrates how to create a custom Docker network named `foonet`. This network can then be used by the `docker-container` builder to isolate the build environment. Requires Docker to be installed.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/docker-container.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker network create foonet
```

----------------------------------------

TITLE: Deploying Application to Kubernetes
DESCRIPTION: This command deploys the application to a Kubernetes cluster using the configuration defined in the `docker-dotnet-kubernetes.yaml` file. It creates Kubernetes objects such as deployments and services.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/deploy.md#_snippet_1

LANGUAGE: console
CODE:
```
$ kubectl apply -f docker-dotnet-kubernetes.yaml
```

----------------------------------------

TITLE: Creating a Docker Network with IPv6 Support
DESCRIPTION: This command creates a new Docker network named 'my-net' with IPv6 enabled, specifying a subnet of '2001:db8:1234::/64'.  The `--ipv6` flag enables IPv6, and `--subnet` defines the IPv6 subnet.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker network create --ipv6 --subnet 2001:db8:1234::/64 my-net
```

----------------------------------------

TITLE: Listing Docker Services
DESCRIPTION: This command lists the Docker services that are running, showing their ID, name, mode, number of replicas, and image. It's useful for verifying that the Nginx service is running.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_32

LANGUAGE: bash
CODE:
```
docker service ls
```

----------------------------------------

TITLE: Dockerfile Before Changes
DESCRIPTION: This Dockerfile defines a single-stage build for a PHP application using Composer to install production dependencies and then copies the application source code. It sets up the PHP environment and user permissions for the application.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#_snippet_8

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1

FROM composer:lts as deps
WORKDIR /app
RUN --mount=type=bind,source=composer.json,target=composer.json \
    --mount=type=bind,source=composer.lock,target=composer.lock \
    --mount=type=cache,target=/tmp/cache \
    composer install --no-dev --no-interaction

FROM php:8.2-apache as final
RUN docker-php-ext-install pdo pdo_mysql
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"
COPY --from=deps app/vendor/ /var/www/html/vendor
COPY ./src /var/www/html
USER www-data
```

----------------------------------------

TITLE: Starting Docker Daemon with User Namespace Remapping
DESCRIPTION: This command starts the Docker daemon with user namespace remapping enabled, mapping the user and group 'testuser' inside the container to the same user and group on the host. This provides an extra layer of security by isolating the container's user namespace from the host's.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/userns-remap.md#_snippet_2

LANGUAGE: console
CODE:
```
$ dockerd --userns-remap="testuser:testuser"
```

----------------------------------------

TITLE: Dockerfile ADD with Private Git Repository
DESCRIPTION: This Dockerfile demonstrates how to use the `ADD` instruction to fetch a private Git repository during the build process. It requires the `GIT_AUTH_TOKEN` secret to be properly configured.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#_snippet_12

LANGUAGE: dockerfile
CODE:
```
FROM alpine
ADD https://gitlab.com/example/todo-app.git /src
```

----------------------------------------

TITLE: Healthcheck Configuration in docker-compose.yml (Version 2.1+)
DESCRIPTION: Defines a healthcheck for a service in a docker-compose.yml file. The healthcheck parameter allows configuration of tests to determine the health of a container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#_snippet_6

LANGUAGE: YAML
CODE:
```
version: "2.1"
services:
  web:
    image: nginx:latest
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
```

----------------------------------------

TITLE: Creating Project Directory
DESCRIPTION: These commands create a directory named 'composetest' and navigate into it. This directory will hold all the files necessary for the Docker Compose project.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#_snippet_0

LANGUAGE: console
CODE:
```
$ mkdir composetest
$ cd composetest
```

----------------------------------------

TITLE: Build Docker Image with SBOM Attestation (Bash)
DESCRIPTION: This command builds a Docker image named 'hello:sbom' with SBOM attestation enabled using BuildKit. The '--sbom=true' flag instructs BuildKit to generate and attach an SBOM to the image during the build process.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/security.md#_snippet_5

LANGUAGE: bash
CODE:
```
$ docker buildx build --sbom=true -t hello:sbom .
```

----------------------------------------

TITLE: Configure ZFS Filesystem for Docker Daemon
DESCRIPTION: This command configures the Docker daemon to use a specific ZFS filesystem for storing Docker images and containers. The `--storage-opt` flag is used to specify the ZFS filesystem name.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_10

LANGUAGE: console
CODE:
```
$ sudo dockerd -s zfs --storage-opt zfs.fsname=zroot/docker
```

----------------------------------------

TITLE: Viewing Container Logs with Docker Compose Logs
DESCRIPTION: This command allows you to monitor the output of your running containers and debug issues. It displays the logs from all the services defined in the `compose.yaml` file.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/intro/compose-application-model.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker compose logs
```

----------------------------------------

TITLE: Building Docker image from private Git repository using token
DESCRIPTION: This command demonstrates how to build a Docker image from a private Git repository using token-based authentication. The --secret flag is used to pass the Git authentication token.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#_snippet_13

LANGUAGE: console
CODE:
```
$ GIT_AUTH_TOKEN=<token> docker buildx build \
  --secret id=GIT_AUTH_TOKEN \
  https://github.com/user/private.git
```

----------------------------------------

TITLE: Removing the Container After Running
DESCRIPTION: This example shows how to automatically remove the container after the command has finished executing using the `--rm` flag. This overrides any restart policies defined in the service configuration.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_5

LANGUAGE: bash
CODE:
```
$ docker compose run --rm web python manage.py db upgrade
```

----------------------------------------

TITLE: Creating a Redis Service with Config Access
DESCRIPTION: This command creates a Redis service named 'redis' and grants it access to the 'my-config' config. The service uses the redis:alpine image. By default, the config is accessible within the container at /my-config.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker service create --name redis --config my-config redis:alpine
```

----------------------------------------

TITLE: Configuring Docker Daemon as Prometheus Target
DESCRIPTION: This YAML configuration sets up a Prometheus job to scrape metrics from a Docker daemon.  It defines the job name and the target address where the Docker daemon's metrics endpoint is exposed. Replace <PORT> with the actual port number.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/prometheus.md#_snippet_4

LANGUAGE: yaml
CODE:
```
- job_name: docker
  static_configs:
    - targets: ["docker.daemon.example:<PORT>"]
```

----------------------------------------

TITLE: Passing secret and build argument during Docker build
DESCRIPTION: This console command shows how to pass a secret and a build argument during a Docker build. The `TOKEN` secret is passed using the `--secret` option, and the `CACHEBUST` argument is passed using the `--build-arg` option.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/invalidation.md#_snippet_3

LANGUAGE: console
CODE:
```
$ TOKEN="tkn_pat123456" docker build --secret id=TOKEN --build-arg CACHEBUST=1 .
```

----------------------------------------

TITLE: Build an image using the Kubernetes Buildx builder
DESCRIPTION: Builds a Docker image using the specified Kubernetes Buildx builder ('kube'). The '--builder' flag specifies which builder to use. Replace <registry> and <image> with your Docker username and image name, respectively. The '--push' flag pushes the built image to the specified registry.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#_snippet_16

LANGUAGE: bash
CODE:
```
docker buildx build \
  --builder=kube \
  -t <registry>/<image> \
  --push .
```

----------------------------------------

TITLE: Building Multi-Platform Images
DESCRIPTION: This command builds a multi-platform image using Docker Build Cloud. The `--platform` flag specifies the target platforms, `--tag` tags the image, and `--push` pushes the image to the registry.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/usage.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker buildx build --builder cloud-<ORG>-<BUILDER_NAME> \
  --platform linux/amd64,linux/arm64 \
  --tag <IMAGE> \
  --push .
```

----------------------------------------

TITLE: Update package index and install Docker Compose plugin on RPM-based distributions
DESCRIPTION: Updates the package index and installs the latest version of the Docker Compose plugin using yum on RPM-based distributions like CentOS, Fedora, and RHEL. Requires sudo privileges.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/linux.md#_snippet_1

LANGUAGE: bash
CODE:
```
$ sudo yum update
$ sudo yum install docker-compose-plugin
```

----------------------------------------

TITLE: Configuring Compose Watch in docker-compose.yaml
DESCRIPTION: This YAML configuration adds Compose Watch instructions to the `docker-compose.yaml` file. It specifies that the `server` service should be rebuilt when changes are detected in the current directory (`.`).
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#_snippet_10

LANGUAGE: yaml
CODE:
```
services:
  server:
    build:
      context: .
      target: development
    ports:
      - 8080:8080
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_URL=jdbc:postgresql://db:5432/petclinic
    develop:
      watch:
        - action: rebuild
          path: .
  db:
    image: postgres
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=petclinic
      - POSTGRES_USER=petclinic
      - POSTGRES_PASSWORD=petclinic
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "petclinic"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
```

----------------------------------------

TITLE: Starting the Node.js application in development mode
DESCRIPTION: This command starts the Node.js application using yarn dev. This command sets the NODE_ENV environment variable to development and uses nodemon to watch for file changes and automatically restart the application when changes are detected.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#_snippet_8

LANGUAGE: console
CODE:
```
$ yarn dev
```

----------------------------------------

TITLE: Defining Device Cgroup Rules in Docker Compose
DESCRIPTION: This snippet shows how to define device cgroup rules for a container using the `device_cgroup_rules` option in a Docker Compose file. This allows fine-grained control over device access within the container.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_20

LANGUAGE: yml
CODE:
```
device_cgroup_rules:
  - 'c 1:3 mr'
  - 'a 7:* rmw'
```

----------------------------------------

TITLE: Restricting Memory Node Usage with Cpuset Mems
DESCRIPTION: This example demonstrates how to restrict a container's memory usage to specific memory nodes using `--cpuset-mems`. The container is restricted to using memory from memory nodes 1 and 3.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_41

LANGUAGE: console
CODE:
```
$ docker run -it --cpuset-mems="1,3" ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Initializing a Docker Swarm
DESCRIPTION: This command initializes a new Docker Swarm on the specified manager node. The `--advertise-addr` flag configures the manager node to publish its address, allowing other nodes to access the manager at the specified IP address. The output provides commands to join new nodes as managers or workers.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/create-swarm.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker swarm init --advertise-addr <MANAGER-IP>
```

LANGUAGE: console
CODE:
```
$ docker swarm init --advertise-addr 192.168.99.100
Swarm initialized: current node (dxn1zf6l61qsb1josjja83ngz) is now a manager.

To add a worker to this swarm, run the following command:
	docker swarm join \
	--token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \
	192.168.99.100:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
```

----------------------------------------

TITLE: Using Long Syntax for Secrets in Docker Compose
DESCRIPTION: This snippet demonstrates the long syntax for defining secrets in a Docker Compose file, providing more granularity in how the secret is created within the service's containers. It includes options for `source`, `target`, `uid`, `gid`, and `mode` to configure the secret's properties within the container.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_89

LANGUAGE: yml
CODE:
```
services:
  frontend:
    image: example/webapp
    secrets:
      - source: server-certificate
        target: server.cert
        uid: "103"
        gid: "103"
        mode: "0o440"
secrets:
  server-certificate:
    file: ./server.cert
```

----------------------------------------

TITLE: List Nodes in a Docker Swarm
DESCRIPTION: This command lists all nodes in the Docker Swarm, displaying their ID, hostname, status, availability, and manager status. It must be executed from a manager node.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/manage-nodes.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker node ls

ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
46aqrk4e473hjbt745z53cr3t    node-5    Ready   Active        Reachable
61pi3d91s0w3b90ijw3deeb2q    node-4    Ready   Active        Reachable
a5b2m3oghd48m8eu391pefq5u    node-3    Ready   Active
e7p8btxeu3ioshyuj6lxiv6g0    node-2    Ready   Active
ehkv3bcimagdese79dn78otj5 *  node-1    Ready   Active        Leader
```

----------------------------------------

TITLE: Disabling Networking During Build in Docker Compose
DESCRIPTION: Disables networking during build by setting the network to none.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#_snippet_25

LANGUAGE: yaml
CODE:
```
build:
  context: .
  network: none
```

----------------------------------------

TITLE: Base Dockerfile for Multi-Platform Build
DESCRIPTION: This Dockerfile sets up a base image using a multi-stage build. It uses a Go builder image to perform actions based on build arguments and then copies the result to a minimal Alpine Linux image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#_snippet_6

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM --platform=$BUILDPLATFORM golang:alpine AS build
ARG TARGETPLATFORM
ARG BUILDPLATFORM
RUN echo "I am running on $BUILDPLATFORM, building for $TARGETPLATFORM" > /log
FROM alpine
COPY --from=build /log /log
```

----------------------------------------

TITLE: Docker tmpfs Mount with Options
DESCRIPTION: This command demonstrates how to mount a tmpfs volume with specified options such as noexec, size, and mode using the --tmpfs flag.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/tmpfs.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker run --tmpfs /data:noexec,size=1024,mode=1777
```

----------------------------------------

TITLE: Example .env file - Bash
DESCRIPTION: Example of an `.env` file with comments and variable assignments. Demonstrates the syntax for setting environment variables.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_32

LANGUAGE: Bash
CODE:
```
# Set Rails/Rack environment
RACK_ENV=development
VAR="quoted"
```

----------------------------------------

TITLE: Configuring Network Connection Priority in Docker Compose
DESCRIPTION: This snippet demonstrates how to configure the connection priority for a service's networks in Docker Compose. The `priority` attribute determines the order in which Compose connects the service's containers to its networks. In this example, `app_net_1` has the highest priority (1000), followed by `app_net_3` (100), and then `app_net_2` (default 0).
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_78

LANGUAGE: yaml
CODE:
```
services:
  app:
    image: busybox
    command: top
    networks:
      app_net_1:
        priority: 1000
      app_net_2:

      app_net_3:
        priority: 100
networks:
  app_net_1:
  app_net_2:
  app_net_3:
```

----------------------------------------

TITLE: Verifying Docker Engine Installation
DESCRIPTION: This command downloads the `hello-world` image and runs it in a container to verify that Docker Engine is installed correctly. When the container runs, it prints a confirmation message and exits.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/centos.md#_snippet_6

LANGUAGE: console
CODE:
```
$ sudo docker run hello-world
```

----------------------------------------

TITLE: Traefik Proxy Service Configuration
DESCRIPTION: This configuration sets up the Traefik proxy service using Docker Compose. It specifies the Traefik image, command-line arguments to enable Docker provider, port mappings for HTTP traffic, and volume mounts to access the Docker socket. This allows Traefik to dynamically discover and configure routes for other containers.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#_snippet_4

LANGUAGE: yaml
CODE:
```
services:
  proxy:
    image: traefik:v3.1.2
    command: --providers.docker
    ports:
      - 80:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
```

----------------------------------------

TITLE: Remove Docker Service
DESCRIPTION: Removes the specified service from the Docker Swarm. This command initiates the removal process, and the swarm manager handles the cleanup of associated tasks.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/delete-service.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker service rm helloworld

helloworld
```

----------------------------------------

TITLE: Starting the Application with Docker Compose
DESCRIPTION: This command starts the application defined in the `compose.yaml` file. The `-d` flag runs the application in detached mode (in the background), and the `--build` flag builds any necessary images before starting the containers.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-docker-compose.md#_snippet_2

LANGUAGE: Shell
CODE:
```
docker compose up -d --build
```

----------------------------------------

TITLE: Deploy application to Kubernetes
DESCRIPTION: Deploys the application to Kubernetes using the `kubectl apply` command. This command creates the Kubernetes objects defined in the `docker-r-kubernetes.yaml` file.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/r/deploy.md#_snippet_1

LANGUAGE: shell
CODE:
```
$ kubectl apply -f docker-r-kubernetes.yaml
```

----------------------------------------

TITLE: Verifying Environment Variable Persistence
DESCRIPTION: This console command verifies that the ADMIN_USER environment variable is still set even after being unset in a previous layer of the Dockerfile.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_21

LANGUAGE: console
CODE:
```
$ docker run --rm test sh -c 'echo $ADMIN_USER'

mark
```

----------------------------------------

TITLE: Run Llama2 Model with Ollama and GPU Acceleration
DESCRIPTION: This command pulls the Ollama image and runs the Llama2 LLM with GPU acceleration. It maps the port and creates a volume.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gpu.md#_snippet_1

LANGUAGE: Console
CODE:
```
$ docker run --gpus=all -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama
```

----------------------------------------

TITLE: Adding phpMyAdmin service to compose.yaml
DESCRIPTION: This snippet adds a phpMyAdmin service to the compose.yaml file, allowing interaction with the database through a web interface. It defines the image, ports, dependencies, and environment variables required for phpMyAdmin to connect to the database service.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#_snippet_4

LANGUAGE: yaml
CODE:
```
services:
  server:
    build:
      context: .
    ports:
      - 9000:80
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db-password
    environment:
      - PASSWORD_FILE_PATH=/run/secrets/db-password
      - DB_HOST=db
      - DB_NAME=example
      - DB_USER=root
  db:
    image: mariadb
    restart: always
    user: root
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/mysql
    environment:
      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/db-password
      - MARIADB_DATABASE=example
    expose:
      - 3306
    healthcheck:
      test:
        [
          "CMD",
          "/usr/local/bin/healthcheck.sh",
          "--su-mysql",
          "--connect",
          "--innodb_initialized",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
  phpmyadmin:
    image: phpmyadmin
    ports:
      - 8080:80
    depends_on:
      - db
    environment:
      - PMA_HOST=db
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt
```

----------------------------------------

TITLE: Viewing Docker image history
DESCRIPTION: This command displays the history of the 'sample-app' image, showing the layers and their respective commands. It helps understand how the image was built and the changes introduced in each layer.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/understanding-image-layers.md#_snippet_11

LANGUAGE: console
CODE:
```
$ docker image history sample-app
```

----------------------------------------

TITLE: Enabling Live Restore in daemon.json (JSON)
DESCRIPTION: This JSON configuration enables the `live-restore` option in the Docker daemon, ensuring containers remain running even if the daemon becomes unavailable. This configuration should be added to the `/etc/docker/daemon.json` file on Linux or through the Docker Desktop settings on Mac/Windows. After modifying the file, the Docker daemon needs to be reloaded or restarted for the changes to take effect.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/live-restore.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "live-restore": true
}
```

----------------------------------------

TITLE: Placement Constraints in Compose
DESCRIPTION: This snippet demonstrates how to specify placement constraints for a service in a Docker Compose file. Constraints define required properties that the platform's node must fulfill to run the service container.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#_snippet_3

LANGUAGE: YAML
CODE:
```
deploy:
  placement:
    constraints:
      - disktype=ssd
```

----------------------------------------

TITLE: Verifying IPv6 connection
DESCRIPTION: Uses curl to verify the IPv6 connection to a container by connecting to port 80 on the IPv6 loopback address.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/ipv6.md#_snippet_4

LANGUAGE: console
CODE:
```
$ curl http://[::1]:80
```

----------------------------------------

TITLE: Install Python Dependencies in Dockerfile
DESCRIPTION: This command uses pip to install the Python packages listed in requirements.txt. The --no-cache-dir option disables caching to reduce the size of the Docker image.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/named-entity-recognition.md#_snippet_11

LANGUAGE: dockerfile
CODE:
```
RUN pip install --no-cache-dir -r requirements.txt
```

----------------------------------------

TITLE: Mounting Docker Socket in Docker Compose
DESCRIPTION: This snippet demonstrates how to mount the Docker socket from the Docker Desktop VM into an extension container using a Docker Compose file. It mounts `/var/run/docker.sock.raw` from the VM to `/var/run/docker.sock` inside the container, allowing the backend to interact with the Docker Engine. This avoids permission issues that can occur when mounting the host's Docker socket directly.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/guides/use-docker-socket-from-backend.md#_snippet_0

LANGUAGE: yaml
CODE:
```
services:
  myExtension:
    image: ${DESKTOP_PLUGIN_IMAGE}
    volumes:
      - /var/run/docker.sock.raw:/var/run/docker.sock
```

----------------------------------------

TITLE: Configuring default address pools with IPv6
DESCRIPTION: Configures the Docker daemon's default address pools to include an IPv6 pool for dynamic address allocation. This allows Docker to automatically assign IPv6 addresses to containers.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/ipv6.md#_snippet_8

LANGUAGE: json
CODE:
```
{
  "default-address-pools": [
    { "base": "172.17.0.0/16", "size": 16 },
    { "base": "172.18.0.0/16", "size": 16 },
    { "base": "172.19.0.0/16", "size": 16 },
    { "base": "172.20.0.0/14", "size": 16 },
    { "base": "172.24.0.0/14", "size": 16 },
    { "base": "172.28.0.0/14", "size": 16 },
    { "base": "192.168.0.0/16", "size": 20 },
    { "base": "2001:db8::/56", "size": 64 }
  ]
}
```

----------------------------------------

TITLE: Dockerfile Check Directive - Skip Checks and Error
DESCRIPTION: This Dockerfile combines the `skip` and `error` options of the `check` directive. It skips specific checks and treats any remaining warnings as errors.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_20

LANGUAGE: dockerfile
CODE:
```
# check=skip=JSONArgsRecommended;error=true
```

----------------------------------------

TITLE: Removing a Key from Docker Trust Store using Notary
DESCRIPTION: This command removes a specific key from the local Docker trust store, identified by its Key ID. It requires confirmation before deleting the key.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#_snippet_23

LANGUAGE: console
CODE:
```
$ notary key remove 1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1
   
   Are you sure you want to remove 1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1 (role jeff) from /home/ubuntu/.docker/trust/private?  (yes/no)  y
   
   Deleted 1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1 (role jeff) from /home/ubuntu/.docker/trust/private.
```

----------------------------------------

TITLE: Customized Bake Build Configuration Output
DESCRIPTION: This JSON output shows the customized build configuration, where the `default` group only includes the 'vote', 'result', and 'worker' targets. The build configuration for each target (context, tags, etc.) is picked up from the `compose.yaml` file, while the group is defined by the `docker-bake.hcl` file.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#_snippet_11

LANGUAGE: json
CODE:
```
{
  "group": {
    "default": {
      "targets": ["vote", "result", "worker"]
    }
  },
  "target": {
    "result": {
      "context": "result",
      "dockerfile": "Dockerfile",
      "tags": ["username/result"]
    },
    "vote": {
      "context": "vote",
      "dockerfile": "Dockerfile",
      "tags": ["username/vote"],
      "target": "dev"
    },
    "worker": {
      "context": "worker",
      "dockerfile": "Dockerfile",
      "tags": ["username/worker"]
    }
  }
}
```

----------------------------------------

TITLE: Creating a Replicated Nginx Service
DESCRIPTION: This command creates a service named `my_web` that runs three replicas of the Nginx image. It publishes port 8080 on the host, routing traffic to port 80 on the containers. This allows accessing the Nginx service through any node in the swarm on port 8080.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#_snippet_24

LANGUAGE: Shell
CODE:
```
$ docker service create --name my_web \
                        --replicas 3 \
                        --publish published=8080,target=80 \
                        nginx
```

----------------------------------------

TITLE: Set Default Command for Docker Container
DESCRIPTION: This command specifies the command to run when the Docker container starts. In this case, it executes the `/docker-gs-ping` binary, which is the compiled Go application.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#_snippet_9

LANGUAGE: Dockerfile
CODE:
```
CMD ["/docker-gs-ping"]
```

----------------------------------------

TITLE: Configuring Registry Cache with Docker Buildx
DESCRIPTION: This command demonstrates how to configure the registry cache with Docker Buildx using the `--cache-to` and `--cache-from` flags. It specifies the registry, image name, and cache image reference. Additional parameters can be passed to customize the cache behavior.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/registry.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker buildx build --push -t <registry>/<image> \
  --cache-to type=registry,ref=<registry>/<cache-image>[,parameters...] \
  --cache-from type=registry,ref=<registry>/<cache-image> .
```

----------------------------------------

TITLE: Running a container with the rclone volume
DESCRIPTION: Starts a container using the 'busybox' image and mounts the 'rclonevolume' volume to the `/data` directory inside the container. It then lists the contents of the `/data` directory, which corresponds to the `/remote` directory on the remote host.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_4

LANGUAGE: Shell
CODE:
```
$ docker run --rm -v rclonevolume:/data busybox ls /data

<content of /remote on machine 1.2.3.4>
```

----------------------------------------

TITLE: Stop and disable dnsmasq service
DESCRIPTION: These commands stop and disable the `dnsmasq` service on RHEL, CentOS, or Fedora systems. Stopping the service immediately disables `dnsmasq`, while disabling it prevents it from starting automatically on boot.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#_snippet_13

LANGUAGE: console
CODE:
```
$ sudo systemctl stop dnsmasq
$ sudo systemctl disable dnsmasq
```

----------------------------------------

TITLE: Docker Compose Configuration
DESCRIPTION: Defines the services, networks, and volumes for the application using Docker Compose. It specifies dependencies, build context, container names, ports, environment variables, and restart policies for the application and database services.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#_snippet_26

LANGUAGE: yaml
CODE:
```
version: "3.8"

services:
  docker-gs-ping-roach:
    depends_on:
      - roach
    build:
      context: .
    container_name: rest-server
    hostname: rest-server
    networks:
      - mynet
    ports:
      - 80:8080
    environment:
      - PGUSER=${PGUSER:-totoro}
      - PGPASSWORD=${PGPASSWORD:?database password not set}
      - PGHOST=${PGHOST:-db}
      - PGPORT=${PGPORT:-26257}
      - PGDATABASE=${PGDATABASE:-mydb}
    deploy:
      restart_policy:
        condition: on-failure
  roach:
    image: cockroachdb/cockroach:latest-v20.1
    container_name: roach
    hostname: db
    networks:
      - mynet
    ports:
      - 26257:26257
      - 8080:8080
    volumes:
      - roach:/cockroach/cockroach-data
    command: start-single-node --insecure

volumes:
  roach:

networks:
  mynet:
    driver: bridge
```

----------------------------------------

TITLE: Listing Kubernetes Contexts using kubectl
DESCRIPTION: This command lists the available Kubernetes contexts, allowing you to see which Kubernetes clusters kubectl is configured to interact with. This is useful for ensuring kubectl is pointing to the Docker Desktop Kubernetes cluster.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/kubernetes.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ kubectl config get-contexts
```

----------------------------------------

TITLE: Apply executable permissions to the Docker Compose binary (user)
DESCRIPTION: Applies executable permissions to the Docker Compose binary installed in the user's .docker/cli-plugins directory. This allows the user to execute the docker compose command.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/linux.md#_snippet_4

LANGUAGE: bash
CODE:
```
$ chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
```

----------------------------------------

TITLE: Dockerfile for PHP-CLI (Production)
DESCRIPTION: This Dockerfile creates a PHP-CLI container for running Artisan commands and other CLI tasks. It includes two stages: a builder stage for installing dependencies and a production stage for running the application.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/production-setup.md#_snippet_5

LANGUAGE: dockerfile
CODE:
```
# Stage 1: Build environment and Composer dependencies
FROM php:8.3-cli AS builder

# Install system dependencies and PHP extensions required for Laravel + MySQL/PostgreSQL support
# Some dependencies are required for PHP extensions only in the build stage
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    unzip \
    libpq-dev \
    libonig-dev \
    libssl-dev \
    libxml2-dev \
    libcurl4-openssl-dev \
    libicu-dev \
    libzip-dev \
    && docker-php-ext-install -j$(nproc) \
    pdo_mysql \
    pdo_pgsql \
    pgsql \
    opcache \
    intl \
    zip \
    bcmath \
    soap \
    && pecl install redis \
    && docker-php-ext-enable redis \
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set the working directory inside the container
WORKDIR /var/www

# Copy the entire Laravel application code into the container
COPY . /var/www

# Install Composer and dependencies
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \
    && composer install --no-dev --optimize-autoloader --no-interaction --no-progress --prefer-dist

# Stage 2: Production environment
FROM php:8.3-cli

# Install client libraries required for php extensions in runtime
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq-dev \
    libicu-dev \
    libzip-dev \
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy PHP extensions and libraries from the builder stage
COPY --from=builder /usr/local/lib/php/extensions/ /usr/local/lib/php/extensions/
COPY --from=builder /usr/local/etc/php/conf.d/ /usr/local/etc/php/conf.d/
COPY --from=builder /usr/local/bin/docker-php-ext-* /usr/local/bin/

# Use the default production configuration for PHP runtime arguments
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"

# Copy the application code and dependencies from the build stage
COPY --from=builder /var/www /var/www

# Set working directory
WORKDIR /var/www

# Ensure correct permissions
RUN chown -R www-data:www-data /var/www

# Switch to the non-privileged user to run the application
USER www-data

# Default command: Provide a bash shell to allow running any command
CMD ["bash"]
```

----------------------------------------

TITLE: Pinging External Host from Docker Containers
DESCRIPTION: This snippet demonstrates how to ping an external host (google.com) from within different Docker containers (alpine4, alpine3, and alpine1) to verify internet connectivity. It also shows how to detach from a container using the CTRL+p CTRL+q sequence and attach to another container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#_snippet_22

LANGUAGE: console
CODE:
```
# ping -c 2 google.com

PING google.com (172.217.3.174): 56 data bytes
64 bytes from 172.217.3.174: seq=0 ttl=41 time=9.778 ms
64 bytes from 172.217.3.174: seq=1 ttl=41 time=9.634 ms

--- google.com ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max = 9.634/9.706/9.778 ms

CTRL+p CTRL+q

$ docker container attach alpine3

# ping -c 2 google.com

PING google.com (172.217.3.174): 56 data bytes
64 bytes from 172.217.3.174: seq=0 ttl=41 time=9.706 ms
64 bytes from 172.217.3.174: seq=1 ttl=41 time=9.851 ms

--- google.com ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max = 9.706/9.778/9.851 ms

CTRL+p CTRL+q

$ docker container attach alpine1

# ping -c 2 google.com

PING google.com (172.217.3.174): 56 data bytes
64 bytes from 172.217.3.174: seq=0 ttl=41 time=9.606 ms
64 bytes from 172.217.3.174: seq=1 ttl=41 time=9.603 ms

--- google.com ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max = 9.603/9.604/9.606 ms

CTRL+p CTRL+q
```

----------------------------------------

TITLE: Run Docker Compose to start the application
DESCRIPTION: This command uses Docker Compose to build and start the application containers defined in the compose.yaml file. The `--build` flag ensures that the Docker image is compiled before starting the containers.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#_snippet_13

LANGUAGE: console
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Adding Annotations to Docker Images with Bake
DESCRIPTION: Demonstrates how to add annotations to Docker images using the `annotations` attribute in a Bake target. Annotations can be applied to image manifests or indexes.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_12

LANGUAGE: hcl
CODE:
```
target "default" {
  output = [{ type = "image", name = "foo" }]
  annotations = ["org.opencontainers.image.authors=dvdksn"]
}
```

----------------------------------------

TITLE: Building and Pushing a Wasm Image
DESCRIPTION: This command uses Docker Buildx to build a Wasm image for the `wasi/wasm` platform and then pushes it to a Docker registry. It requires Buildx to be configured and enabled.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/wasm.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker buildx build --platform wasi/wasm -t username/hello-world .
...
=> exporting to image                                                                             0.0s
=> => exporting layers                                                                            0.0s
=> => exporting manifest sha256:2ca02b5be86607511da8dc688234a5a00ab4d58294ab9f6beaba48ab3ba8de56  0.0s
=> => exporting config sha256:a45b465c3b6760a1a9fd2eda9112bc7e3169c9722bf9e77cf8c20b37295f954b    0.0s
=> => naming to docker.io/username/hello-world:latest                                            0.0s
=> => unpacking to docker.io/username/hello-world:latest                                         0.0s
$ docker push username/hello-world
```

----------------------------------------

TITLE: Dockerfile with integrated .NET tests
DESCRIPTION: This Dockerfile is configured to build a .NET application and run tests during the build process. It uses multi-stage builds to separate the build and test environment from the final runtime image. The `dotnet test` command is executed within the build stage to ensure tests pass before creating the final image.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/run-tests.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1

FROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS build
ARG TARGETARCH
COPY . /source
WORKDIR /source/src
RUN --mount=type=cache,id=nuget,target=/root/.nuget/packages \
    dotnet publish -a ${TARGETARCH/amd64/x64} --use-current-runtime --self-contained false -o /app
RUN dotnet test /source/tests

FROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS development
COPY . /source
WORKDIR /source/src
CMD dotnet run --no-launch-profile

FROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine AS final
WORKDIR /app
COPY --from=build /app .
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser
USER appuser
ENTRYPOINT ["dotnet", "myWebApp.dll"]
```

----------------------------------------

TITLE: Join swarm as manager
DESCRIPTION: Joins a Docker Engine as a manager node to an existing swarm. Requires the manager join token and the manager's address.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/join-nodes.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker swarm join \
  --token SWMTKN-1-61ztec5kyafptydic6jfc1i33t37flcl4nuipzcusor96k7kby-5vy9t8u35tuqm7vh67lrz9xp6 \
  192.168.99.100:2377
```

----------------------------------------

TITLE: Excluding Files with .dockerignore
DESCRIPTION: This .dockerignore file specifies files and directories that should be excluded from the Docker image. This helps to reduce the image size and improve build times.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#_snippet_6

LANGUAGE: Text
CODE:
```
# Include any files or directories that you don't want to be copied to your
# container here (e.g., local build artifacts, temporary files, etc.).
#
# For more help, visit the .dockerignore file reference guide at
```

----------------------------------------

TITLE: Creating a Docker Service
DESCRIPTION: This command creates a simple Docker service named 'demo' using the 'alpine:latest' image. The service runs the 'ping 8.8.8.8' command, which sends ICMP echo requests to Google's public DNS server. This verifies basic network connectivity from within the container.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/orchestration.md#_snippet_16

LANGUAGE: powershell
CODE:
```
$ docker service create --name demo alpine:latest ping 8.8.8.8
```

----------------------------------------

TITLE: Building and Running the PHP Application with Docker Compose
DESCRIPTION: Builds and starts the PHP application using Docker Compose. The `--build` flag ensures that the Docker image is built before the application is started. This command is essential for deploying the containerized application.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/php/containerize.md#_snippet_2

LANGUAGE: shell
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Build Final Docker Image
DESCRIPTION: Builds the final Docker image from the Dockerfile. The -t flag tags the image with a name and version, and the -f flag specifies the Dockerfile to use.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker build -t acme/my-final-image:1.0 -f Dockerfile .
```

----------------------------------------

TITLE: Run Docker Compose to Build and Start Application
DESCRIPTION: Executes the `docker compose up --build` command to build the application image and start the defined services, including the application server and the Postgres database. The `--build` flag ensures that the image is rebuilt if there are any changes to the Dockerfile.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker compose up --build
```

----------------------------------------

TITLE: Import NLTK Libraries for Sentiment Analysis (Python)
DESCRIPTION: This code imports the necessary libraries from the Natural Language Toolkit (NLTK) for sentiment analysis. It imports nltk for general NLP tasks, SentimentIntensityAnalyzer for sentiment scoring, and ssl for handling secure connections.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/sentiment-analysis.md#_snippet_1

LANGUAGE: python
CODE:
```
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
import ssl
```

----------------------------------------

TITLE: Connect to Docker Build Cloud Builder
DESCRIPTION: This snippet creates and connects to a Docker Build Cloud builder, setting it as the default builder. It uses the `docker buildx create` command with the `--use` flag to switch to the newly created builder and the `--driver cloud` flag to specify the Build Cloud driver.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/ci.md#_snippet_15

LANGUAGE: bash
CODE:
```
docker buildx create --use --driver cloud "<ORG>/default"
```

----------------------------------------

TITLE: Stage, commit, and push local repository to GitHub
DESCRIPTION: These commands stage all changes, commit them with a message, and push the commit to the `main` branch of the remote GitHub repository. This uploads the local code to GitHub, triggering the CI/CD workflow.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/configure-ci-cd.md#_snippet_1

LANGUAGE: console
CODE:
```
$ git add -A
$ git commit -m "my commit"
$ git push -u origin main
```

----------------------------------------

TITLE: Build with Multiple Registry Caches
DESCRIPTION: This command demonstrates how to import cache from multiple locations using the registry cache backend. It imports cache from both the current branch and the main branch, improving build speed by leveraging existing cached layers.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/_index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker buildx build --push -t <registry>/<image> \
  --cache-to type=registry,ref=<registry>/<cache-image>:<branch> \
  --cache-from type=registry,ref=<registry>/<cache-image>:<branch> \
  --cache-from type=registry,ref=<registry>/<cache-image>:main .
```

----------------------------------------

TITLE: Defining Annotations as an Array
DESCRIPTION: This example shows how to define annotations for a container using an array in the Compose file. Annotations provide a way to attach metadata to the container.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_3

LANGUAGE: yaml
CODE:
```
annotations:
  - com.example.foo=bar
```

----------------------------------------

TITLE: Run MySQL Container with Port Mapping (CLI)
DESCRIPTION: This command runs a MySQL container, mapping port 3307 on the host to port 3306 in the container. It also sets the root password and database name using environment variables. The container runs in detached mode.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker run -p 3307:3306 --name my-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -e MYSQL_DATABASE=mydb -d mysql:latest
```

----------------------------------------

TITLE: Adding CA Certificates to Docker Image
DESCRIPTION: Adds CA certificates to a Docker image during the build process. This ensures that containers started from the image trust the specified certificates, which is important for applications requiring seamless access to internal APIs, databases, or other services during production. It uses apt-get to install ca-certificates, copies the certificate, and updates the certificates.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/ca-certs.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
# Install the ca-certificate package
RUN apt-get update && apt-get install -y ca-certificates
# Copy the CA certificate from the context to the build container
COPY your_certificate.crt /usr/local/share/ca-certificates/
# Update the CA certificates in the container
RUN update-ca-certificates
```

----------------------------------------

TITLE: Starting Docker Compose Watch
DESCRIPTION: This command starts Docker Compose Watch, which monitors the file system for changes and automatically rebuilds or restarts services based on the `develop` configuration in the `compose.yml` file. It enables a hot reloading development experience.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/develop.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker compose watch
```

----------------------------------------

TITLE: Running a Docker Image
DESCRIPTION: This snippet shows the command to run the Docker image built in the previous step. The `--rm` flag removes the container after it exits.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/base-images.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker run --rm hello
```

----------------------------------------

TITLE: Testing Nginx Service with curl
DESCRIPTION: This command uses `curl` to test the Nginx service running on the swarm. It connects to port 8080 on `localhost`, which should be one of the swarm nodes, and retrieves the default Nginx welcome page. The HTML output is then displayed, confirming that the service is accessible.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#_snippet_25

LANGUAGE: Shell
CODE:
```
$ curl localhost:8080

<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
...truncated...
</html>
```

----------------------------------------

TITLE: Dockerfile for multi-stage C++ build
DESCRIPTION: This Dockerfile defines a multi-stage build process for a C++ application. It uses one stage to compile the code with build tools and another minimal stage to run the compiled binary, reducing the final image size.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/multistage.md#_snippet_2

LANGUAGE: Dockerfile
CODE:
```
# Stage 1: Build stage
FROM ubuntu:latest AS build

# Install build-essential for compiling C++ code
RUN apt-get update && apt-get install -y build-essential

# Set the working directory
WORKDIR /app

# Copy the source code into the container
COPY hello.cpp .

# Compile the C++ code statically to ensure it doesn't depend on runtime libraries
RUN g++ -o hello hello.cpp -static

# Stage 2: Runtime stage
FROM scratch

# Copy the static binary from the build stage
COPY --from=build /app/hello /hello

# Command to run the binary
CMD ["/hello"]
```

----------------------------------------

TITLE: Docker tmpfs Mount Syntax with --mount
DESCRIPTION: Illustrates the basic syntax for using the `--mount` flag with `type=tmpfs` to mount a tmpfs volume in a Docker container. The `dst` parameter specifies the container path where the tmpfs volume will be mounted, and additional key-value pairs can be used to configure mount options.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/tmpfs.md#_snippet_6

LANGUAGE: console
CODE:
```
$ docker run --mount type=tmpfs,dst=<mount-path>[,<key>=<value>...]
```

----------------------------------------

TITLE: Building Docker image with empty context using Unix pipe
DESCRIPTION: This command builds a Docker image using a Dockerfile provided through stdin using a Unix pipe. This method is suitable when the Dockerfile doesn't depend on any local files.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#_snippet_16

LANGUAGE: console
CODE:
```
$ docker build - < Dockerfile
```

----------------------------------------

TITLE: Setting CPU Profile for Buildx
DESCRIPTION: This environment variable specifies the location where Buildx generates a `pprof` CPU profile. It is primarily used for Buildx development to analyze performance.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#_snippet_22

LANGUAGE: console
CODE:
```
$ export BUILDX_CPU_PROFILE=buildx_cpu.prof
```

----------------------------------------

TITLE: Dockerfile for Simple Multi-Platform Build
DESCRIPTION: This Dockerfile creates a simple Alpine Linux-based image and writes the architecture information to a file named `/arch` using the `uname -m` command.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#_snippet_7

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM alpine
RUN uname -m > /arch
```

----------------------------------------

TITLE: Docker Build with SSH Flag
DESCRIPTION: This command shows how to pass an SSH socket to the build process using the `--ssh` flag. This allows the Dockerfile to access the SSH agent for cloning private repositories.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker buildx build --ssh default .
```

----------------------------------------

TITLE: CircleCI Configuration for Docker Build Cloud
DESCRIPTION: This CircleCI configuration defines jobs for building and pushing multi-platform Docker images and building images for caching. It uses an Ubuntu machine image and sets up Docker login and Buildx.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/ci.md#_snippet_2

LANGUAGE: yaml
CODE:
```
version: 2.1

jobs:
  # Build multi-platform image and push to a registry
  build_push:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout

      - run: |
          mkdir -vp ~/.docker/cli-plugins/
          ARCH=amd64
          BUILDX_URL=$(curl -s https://raw.githubusercontent.com/docker/actions-toolkit/main/.github/buildx-lab-releases.json | jq -r ".latest.assets[] | select(endswith(\"linux-$ARCH\"))")
          curl --silent -L --output ~/.docker/cli-plugins/docker-buildx $BUILDX_URL
          chmod a+x ~/.docker/cli-plugins/docker-buildx

      - run: echo "$DOCKER_PAT" | docker login --username $DOCKER_USER --password-stdin
      - run: docker buildx create --use --driver cloud "<ORG>/default"

      - run: |
          docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --push \
          --tag "<IMAGE>" .

  # Build an image and discard the result
  build_cache:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout

      - run: |
          mkdir -vp ~/.docker/cli-plugins/
          ARCH=amd64
          BUILDX_URL=$(curl -s https://raw.githubusercontent.com/docker/actions-toolkit/main/.github/buildx-lab-releases.json | jq -r ".latest.assets[] | select(endswith(\"linux-$ARCH\"))")
          curl --silent -L --output ~/.docker/cli-plugins/docker-buildx $BUILDX_URL
          chmod a+x ~/.docker/cli-plugins/docker-buildx

      - run: echo "$DOCKER_PAT" | docker login --username $DOCKER_USER --password-stdin
      - run: docker buildx create --use --driver cloud "<ORG>/default"

      - run: |
          docker buildx build \
          --tag temp \
          --output type=cacheonly \
          .

workflows:
  pull_request:
    jobs:
      - build_cache
  release:
    jobs:
      - build_push
```

----------------------------------------

TITLE: Listing Active Docker Containers
DESCRIPTION: This command lists all active Docker containers, providing details such as container ID, image name, command, creation time, status, ports, and names. It helps verify that the React.js application container is running and exposing port 8080.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/containerize.md#_snippet_12

LANGUAGE: Shell
CODE:
```
$ docker ps
```

----------------------------------------

TITLE: Removing Nginx Service, Secrets, and Configs
DESCRIPTION: This snippet demonstrates how to remove the Nginx service, secrets, and config after running the example. It uses the `docker service rm`, `docker secret rm`, and `docker config rm` commands.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#_snippet_40

LANGUAGE: console
CODE:
```
$ docker service rm nginx

$ docker secret rm site.crt site.key

$ docker config rm site.conf
```

----------------------------------------

TITLE: Installing Python SDK for Docker Engine using pip
DESCRIPTION: This command installs the Docker Engine Python SDK using pip, the Python package installer. This is the recommended method for installing the Python SDK.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/_index.md#_snippet_1

LANGUAGE: console
CODE:
```
pip install docker
```

----------------------------------------

TITLE: Create a Custom Docker Network
DESCRIPTION: This command creates a new Docker network named 'mynetwork'.  Containers connected to this network can communicate with each other by name.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#_snippet_6

LANGUAGE: docker
CODE:
```
$ docker network create mynetwork
```

----------------------------------------

TITLE: Set remote origin URL with Git
DESCRIPTION: This command sets the remote origin URL for your local Git repository to the specified GitHub repository. Replace `your-username` and `your-repository` with your actual GitHub username and repository name.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/configure-ci-cd.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ git remote set-url origin https://github.com/your-username/your-repository.git
```

----------------------------------------

TITLE: Connecting container to network with custom IP address
DESCRIPTION: This command connects an existing container to a network and assigns it a custom IP address using the `--ip` option. This allows specifying a specific IP address for the container within the network.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#_snippet_68

LANGUAGE: Docker
CODE:
```
docker network connect --ip <ip_address> <network> <container>
```

----------------------------------------

TITLE: Running Emulated HID Device Example
DESCRIPTION: Runs the emulated Human Interface Device (HID) device example using cargo. This command starts the USB/IP server, which emulates a USB keyboard.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/usbip.md#_snippet_1

LANGUAGE: console
CODE:
```
$ env RUST_LOG=info cargo run --example hid_keyboard
```

----------------------------------------

TITLE: Compose YAML Configuration: Target Development Stage
DESCRIPTION: This YAML snippet configures a Docker Compose service to target the 'development' stage defined in the Dockerfile. This ensures that the development environment, including development dependencies, is used when building the container.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#_snippet_10

LANGUAGE: YAML
CODE:
```
services:
  server:
    build:
      context: .
      target: development
      # ...
```

----------------------------------------

TITLE: Enabling BuildKit via Environment Variable
DESCRIPTION: This command sets the DOCKER_BUILDKIT environment variable to 1, enabling BuildKit for a single docker build command. This allows users to test BuildKit without making it the default builder.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/_index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ DOCKER_BUILDKIT=1 docker build .
```

----------------------------------------

TITLE: Query node reachability as manager using Docker CLI
DESCRIPTION: This command queries the reachability status of a Docker node as a manager using the `docker node inspect` command and formats the output to show only the `Reachability` field from the `ManagerStatus`.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/admin_guide.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker node inspect manager1 --format "{{ .ManagerStatus.Reachability }}"
```

----------------------------------------

TITLE: Setting Stop Timeout for Containers
DESCRIPTION: This update introduces the `--stop-timeout` flag, which allows specifying the timeout value (in seconds) for individual containers to stop. This provides more granular control over the shutdown process for each container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#_snippet_9

LANGUAGE: Docker
CODE:
```
docker stop --stop-timeout <seconds> <container>
```

----------------------------------------

TITLE: Setting a Custom Container Name in Docker Compose
DESCRIPTION: This example shows how to specify a custom container name for a service in a Docker Compose file using the `container_name` property. This allows for easier identification and management of the container. Compose does not scale a service beyond one container if the Compose file specifies a `container_name`.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_14

LANGUAGE: yml
CODE:
```
container_name: my-web-container
```

----------------------------------------

TITLE: Backing up Docker trust keys
DESCRIPTION: This command creates a compressed archive of the Docker trust keys located in the `~/.docker/trust/private` directory. The `umask` commands ensure that the archive is created with restricted permissions, and then resets the umask to the default.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_key_mng.md#_snippet_0

LANGUAGE: console
CODE:
```
$ umask 077; tar -zcvf private_keys_backup.tar.gz ~/.docker/trust/private; umask 022
```

----------------------------------------

TITLE: Define GitHub Actions Workflow
DESCRIPTION: This YAML file defines a GitHub Actions workflow that builds and pushes a Docker image to Docker Hub when code is pushed to the main branch. It includes steps to log in to Docker Hub, set up Docker Buildx, and build and push the image using the specified Docker username and repository name.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/configure-github-actions.md#_snippet_0

LANGUAGE: YAML
CODE:
```
name: Build and push Docker image

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
```

----------------------------------------

TITLE: Create MySQL root password secret
DESCRIPTION: Generates a random alphanumeric password for the MySQL `root` user and stores it as a Docker secret named `mysql_root_password`. This secret is used to bootstrap the MySQL service.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_38

LANGUAGE: bash
CODE:
```
openssl rand -base64 20 | docker secret create mysql_root_password -
```

----------------------------------------

TITLE: Defining Build Targets with HCL in docker-bake.hcl
DESCRIPTION: This HCL configuration defines a default group containing frontend and backend targets. Each target specifies its context, Dockerfile, build arguments, and tags. The GO_VERSION argument in the backend target uses a parameter.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/_index.md#_snippet_0

LANGUAGE: HCL
CODE:
```
group "default" {
  targets = ["frontend", "backend"]
}

target "frontend" {
  context = "./frontend"
  dockerfile = "frontend.Dockerfile"
  args = {
    NODE_VERSION = "22"
  }
  tags = ["myapp/frontend:latest"]
}

target "backend" {
  context = "./backend"
  dockerfile = "backend.Dockerfile"
  args = {
    GO_VERSION = "{{% param \"example_go_version\" %}}"
  }
  tags = ["myapp/backend:latest"]
}
```

----------------------------------------

TITLE: Logging in to the Docker Registry
DESCRIPTION: These commands demonstrate logging in to the Docker registry and then adding a signer to a repository using `docker trust`.  Logging in is required when authentication is enabled for the Notary server or when using DTR.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker login registry.example.com/user/repo
Username: admin
Password:

Login Succeeded

$ docker trust signer add --key cert.pem jeff registry.example.com/user/repo
Adding signer "jeff" to registry.example.com/user/repo...
Initializing signed repository for registry.example.com/user/repo...
Successfully initialized "registry.example.com/user/repo"
Successfully added signer: jeff to registry.example.com/user/repo
```

----------------------------------------

TITLE: List Secrets Directory in Container
DESCRIPTION: Lists the contents of the `/run/secrets` directory inside the 'redis' container using `docker container exec`. This verifies that the secret is mounted in the container's filesystem.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker container exec $(docker ps --filter name=redis -q) ls -l /run/secrets
```

----------------------------------------

TITLE: Evaluate Expressions with Variables
DESCRIPTION: Prints the evaluated values of the v1 and v2 build arguments from the docker-bake.hcl file using the `docker buildx bake --print app` command.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/expressions.md#_snippet_7

LANGUAGE: console
CODE:
```
$ docker buildx bake --print app
```

----------------------------------------

TITLE: RUN Command with Line Continuation
DESCRIPTION: This example demonstrates using the shell form of the RUN instruction with the escape character (backslash) to continue a single instruction onto the next line.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_32

LANGUAGE: dockerfile
CODE:
```
RUN source $HOME/.bashrc && \
echo $HOME
```

----------------------------------------

TITLE: Output of docker buildx bake with variable in function
DESCRIPTION: This JSON output shows the result of running `docker buildx bake --print webapp` with the HCL configuration that uses a global variable inside the `tag` function. The `tags` property in the `webapp` target is set to the result of the function call, which includes the value of the `REPO` variable.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/funcs.md#_snippet_5

LANGUAGE: json
CODE:
```
{
  "group": {
    "default": {
      "targets": ["webapp"]
    }
  },
  "target": {
    "webapp": {
      "context": ".",
      "dockerfile": "Dockerfile",
      "tags": ["user/repo:v1"]
    }
  }
}
```

----------------------------------------

TITLE: Start Docker Compose Services (Bash)
DESCRIPTION: This command starts the Docker Compose services defined in the `compose.yaml` file. This will start the OpenTelemetry collector and Prometheus services.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/otel.md#_snippet_4

LANGUAGE: bash
CODE:
```
docker compose up
```

----------------------------------------

TITLE: Initializing a Docker swarm with separate data path
DESCRIPTION: This command initializes a Docker swarm with separate addresses for advertising and data traffic. It assumes that the Docker host has two network interfaces: 10.0.0.1 for control traffic and 192.168.0.1 for service traffic. The swarm is initialized using the specified advertise and data path addresses.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker swarm init --advertise-addr 10.0.0.1 --data-path-addr 192.168.0.1
```

----------------------------------------

TITLE: Shell Script for Multi-Arch Docker Build
DESCRIPTION: This shell script builds a multi-architecture Docker image using Docker Buildx. It downloads and configures Buildx, logs into Docker, creates a Buildx builder, builds a cache-only image, and then builds and pushes the image for both linux/amd64 and linux/arm64 platforms. It requires the DOCKER_PAT and DOCKER_USER environment variables to be set.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/ci.md#_snippet_10

LANGUAGE: bash
CODE:
```
#!/bin/bash

# Get download link for latest buildx binary. Set $ARCH to the CPU architecture (e.g. amd64, arm64)
ARCH=amd64
BUILDX_URL=$(curl -s https://raw.githubusercontent.com/docker/actions-toolkit/main/.github/buildx-lab-releases.json | jq -r ".latest.assets[] | select(endswith(\"linux-$ARCH\"))")

# Download docker buildx with Build Cloud support
mkdir -vp ~/.docker/cli-plugins/
curl --silent -L --output ~/.docker/cli-plugins/docker-buildx $BUILDX_URL
chmod a+x ~/.docker/cli-plugins/docker-buildx

# Login to Docker Hub. For security reasons $DOCKER_PAT should be a Personal Access Token. See https://docs.docker.com/build-cloud/ci/#creating-access-tokens
echo "$DOCKER_PAT" | docker login --username $DOCKER_USER --password-stdin

# Connect to your builder and set it as the default builder
docker buildx create --use --driver cloud "<ORG>/default"

# Cache-only image build
docker buildx build \
    --tag temp \
    --output type=cacheonly \
    .

# Build, tag, and push a multi-arch docker image
docker buildx build \
    --platform linux/amd64,linux/arm64 \
    --push \
    --tag "<IMAGE>" \
    .
```

----------------------------------------

TITLE: Generate SBOM using Docker Scout CLI (Bash)
DESCRIPTION: This command attempts to generate an SBOM for the 'hello' Docker image using the Docker Scout CLI plugin. It specifies the 'list' format for the output and is expected to return the same result as the Docker SBOM command.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/security.md#_snippet_3

LANGUAGE: bash
CODE:
```
$ docker scout sbom --format=list hello
```

----------------------------------------

TITLE: Creating a Docker Build Cloud builder
DESCRIPTION: These commands create and use a builder in Docker Build Cloud, specifying the organization and builder name. It then builds and pushes a multi-platform image to a registry.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker buildx create --driver cloud <ORG>/<BUILDER_NAME>
cloud-<ORG>-<BUILDER_NAME>
$ docker build \
  --builder cloud-<ORG>-<BUILDER_NAME> \
  --platform linux/amd64,linux/arm64,linux/arm/v7 \
  --tag <IMAGE_NAME> \
  --push .
```

----------------------------------------

TITLE: Installing Zscaler Root Certificate in Docker Image
DESCRIPTION: This Dockerfile snippet copies the Zscaler root certificate into the container's trust store and updates the certificate authority database. This allows the container to trust the Zscaler proxy and avoid SSL errors during network operations. It assumes the certificate file `zscaler-root-ca.crt` is in the same directory as the Dockerfile.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/zscaler/index.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
FROM debian:bookworm
COPY zscaler-root-ca.crt /usr/local/share/ca-certificates/zscaler-root-ca.crt
RUN apt-get update && \
    apt-get install -y ca-certificates && \
    update-ca-certificates
```

----------------------------------------

TITLE: Find MySQL container ID
DESCRIPTION: This command finds the ID of the running MySQL container using a filter on the container name. The `-q` flag ensures that only the container ID is returned.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_48

LANGUAGE: bash
CODE:
```
docker ps --filter name=mysql -q
```

----------------------------------------

TITLE: Building Docker image with COPY instruction failing
DESCRIPTION: This command demonstrates building a Docker image where the COPY instruction fails because the build context is empty, and the specified file (main.c) cannot be found.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#_snippet_20

LANGUAGE: console
CODE:
```
$ ls
main.c
$ docker build -<<< $'FROM scratch\nCOPY main.c .'
```

----------------------------------------

TITLE: Starting the Docker Compose Stack
DESCRIPTION: Starts the Docker Compose stack defined in the project directory. This command builds and runs the WireMock container, setting up the mock API endpoint.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#_snippet_2

LANGUAGE: shell
CODE:
```
$ docker compose up -d
```

----------------------------------------

TITLE: Limit Container Resources (Memory and CPU)
DESCRIPTION: This command runs a Postgres container with resource limits. It restricts the container to using 512MB of memory and 0.5 CPU cores.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#_snippet_9

LANGUAGE: docker
CODE:
```
$ docker run -d -e POSTGRES_PASSWORD=secret --memory="512m" --cpus=".5" postgres
```

----------------------------------------

TITLE: Listing Kubernetes Contexts with kubectl in TypeScript
DESCRIPTION: This code snippet uses `ddClient.extension.host?.cli.exec` to execute a `kubectl` command that retrieves and lists the available Kubernetes contexts in JSON format.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/guides/kubernetes.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const output = await ddClient.extension.host?.cli.exec("kubectl", [
  "config",
  "view",
  "-o",
  "jsonpath='{.contexts}'",
]);
```

----------------------------------------

TITLE: Tagging an existing image
DESCRIPTION: This command adds another tag to an existing Docker image using the `docker image tag` command. It takes the source image name and the new image name with tag as arguments.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#_snippet_3

LANGUAGE: console
CODE:
```
docker image tag my-username/my-image another-username/another-image:v1
```

----------------------------------------

TITLE: Push Image to Registry with Registry Exporter
DESCRIPTION: This command pushes a built image to a container registry using the `registry` exporter with the `--output` option. It sets the type to `registry` and provides a name for the image.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/_index.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker buildx build \
  --output type=registry,name=<registry>/<image> .
```

----------------------------------------

TITLE: Creating a Service with Update Configuration
DESCRIPTION: This command creates a Docker service named `my_web` with 10 replicas. It configures the update behavior to update a maximum of 2 replicas at a time, with a 10-second delay between updates. The failure action is set to `continue`, meaning the update will proceed even if some tasks fail.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#_snippet_37

LANGUAGE: console
CODE:
```
$ docker service create \
  --replicas 10 \
  --name my_web \
  --update-delay 10s \
  --update-parallelism 2 \
  --update-failure-action continue \
  alpine
```

----------------------------------------

TITLE: Defining Prometheus Metrics and Custom Registry in Go
DESCRIPTION: This code defines Prometheus counter metrics for tracking HTTP request totals and errors. It also creates a custom Prometheus registry to avoid default Go metrics. The metrics are registered with the custom registry in the init function.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/application.md#_snippet_1

LANGUAGE: go
CODE:
```
import (
	"strconv"

	"github.com/gin-gonic/gin"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
)

// Define metrics
var (
	HttpRequestTotal = prometheus.NewCounterVec(prometheus.CounterOpts{
		Name: "api_http_request_total",
		Help: "Total number of requests processed by the API",
	}, []string{"path", "status"})

	HttpRequestErrorTotal = prometheus.NewCounterVec(prometheus.CounterOpts{
		Name: "api_http_request_error_total",
		Help: "Total number of errors returned by the API",
	}, []string{"path", "status"})
)

// Custom registry (without default Go metrics)
var customRegistry = prometheus.NewRegistry()

// Register metrics with custom registry
func init() {
	customRegistry.MustRegister(HttpRequestTotal, HttpRequestErrorTotal)
}
```

----------------------------------------

TITLE: Start container with environment variable and label
DESCRIPTION: This command starts a container with an environment variable `os=ubuntu` and a label `production_status=testing`. These are added to the container's logs if the logging driver supports it.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/configure.md#_snippet_6

LANGUAGE: console
CODE:
```
$ docker run -dit --label production_status=testing -e os=ubuntu alpine sh
```

----------------------------------------

TITLE: Creating a user and group in Dockerfile
DESCRIPTION: This example shows how to create a new user and group within a Dockerfile. This is useful for running services with non-root privileges.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_33

LANGUAGE: dockerfile
CODE:
```
RUN groupadd -r postgres && useradd --no-log-init -r -g postgres postgres
```

----------------------------------------

TITLE: Using Secondary Source Directory - Dockerfile
DESCRIPTION: Defines a Dockerfile that copies files from a context named 'src' to the current directory. This requires a corresponding entry in the docker-bake.hcl file to define the 'src' context.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/contexts.md#_snippet_2

LANGUAGE: Dockerfile
CODE:
```
FROM golang
COPY --from=src . .
```

----------------------------------------

TITLE: Initializing Dockerfile for Rust project
DESCRIPTION: Runs `docker init` to create a Dockerfile, .dockerignore, compose.yaml, and README.Docker.md for a Rust project. The user is prompted for the application platform, Rust version, and port.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/build-images.md#_snippet_1

LANGUAGE: shell
CODE:
```
$ docker init
Welcome to the Docker Init CLI!

This utility will walk you through creating the following files with sensible defaults for your project:
  - .dockerignore
  - Dockerfile
  - compose.yaml
  - README.Docker.md

Let's get started!

? What application platform does your project use? Rust
? What version of Rust do you want to use? 1.70.0
? What port does your server listen on? 8000
```

----------------------------------------

TITLE: Testing the NLP Application
DESCRIPTION: This shows the expected input and output when testing the named entity recognition application within the Docker container. It demonstrates how the application identifies entities and their types from the input text.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/named-entity-recognition.md#_snippet_18

LANGUAGE: Text
CODE:
```
Enter the text for entity recognition (type 'exit' to end): Apple Inc. is planning to open a new store in San Francisco. Tim Cook is the CEO of Apple.

Entity: Apple Inc., Type: ORG
Entity: San Francisco, Type: GPE
Entity: Tim Cook, Type: PERSON
Entity: Apple, Type: ORG
```

----------------------------------------

TITLE: Running s3cmd image to show help
DESCRIPTION: This command shows how to run the s3cmd image and display the help message using the default flags defined in the CMD instruction.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#_snippet_26

LANGUAGE: console
CODE:
```
$ docker run s3cmd
```

----------------------------------------

TITLE: Running a MySQL container with Docker
DESCRIPTION: This command runs a MySQL container in detached mode, configuring network settings, volume mapping, environment variables for the root password and database name, and specifying the MySQL 8.0 image.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/08_using_compose.md#_snippet_6

LANGUAGE: console
CODE:
```
$ docker run -d \
  --network todo-app --network-alias mysql \
  -v todo-mysql-data:/var/lib/mysql \
  -e MYSQL_ROOT_PASSWORD=secret \
  -e MYSQL_DATABASE=todos \
  mysql:8.0
```

----------------------------------------

TITLE: Passing environment variable from shell to container
DESCRIPTION: Passes the `DEBUG` environment variable from the shell environment directly to the container. The container will use the value of `DEBUG` defined in the shell where Compose is run.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/environment-variables/set-environment-variables.md#_snippet_2

LANGUAGE: yaml
CODE:
```
web:
  environment:
    - DEBUG
```

----------------------------------------

TITLE: Dockerfile using SSH mounts
DESCRIPTION: This Dockerfile demonstrates how to use an SSH mount to fetch Go modules from a private GitHub repository. It sets up SSH keys and configures Git to use the SSH protocol.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/secrets.md#_snippet_4

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1

ARG GO_VERSION="{{% param example_go_version %}}"

FROM golang:${GO_VERSION}-alpine AS base
ENV CGO_ENABLED=0
ENV GOPRIVATE="github.com/foo/*"
RUN apk add --no-cache file git rsync openssh-client
RUN mkdir -p -m 0700 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts
WORKDIR /src

FROM base AS vendor
# this step configure git and checks the ssh key is loaded
RUN --mount=type=ssh <<EOT
  set -e
  echo "Setting Git SSH protocol"
  git config --global url."git@github.com:".insteadOf "https://github.com/"
  (
    set +e
    ssh -T git@github.com
    if [ ! "$?" = "1" ]; then
      echo "No GitHub SSH key loaded exiting..."
      exit 1
    fi
  )
EOT
```

----------------------------------------

TITLE: Initializing Docker Configuration Files
DESCRIPTION: This command initializes Docker configuration files for containerizing the application. It generates a Dockerfile, .dockerignore, compose.yaml, and README.Docker.md to help with the containerization process.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/reactjs/containerize.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker init
```

----------------------------------------

TITLE: Grouping Targets
DESCRIPTION: This HCL snippet demonstrates how to group targets together using the `group` block. This allows building multiple targets with a single command.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/targets.md#_snippet_5

LANGUAGE: hcl
CODE:
```
group "all" {
  targets = ["webapp", "api", "tests"]
}

target "webapp" {
  dockerfile = "webapp.Dockerfile"
  tags = ["docker.io/username/webapp:latest"]
  context = "https://github.com/username/webapp"
}

target "api" {
  dockerfile = "api.Dockerfile"
  tags = ["docker.io/username/api:latest"]
  context = "https://github.com/username/api"
}

target "tests" {
  dockerfile = "tests.Dockerfile"
  contexts = {
    webapp = "target:webapp",
    api = "target:api",
  }
  output = ["type=local,dest=build/tests"]
  context = "."
}
```

----------------------------------------

TITLE: Display Warning Toast Notification in Docker Desktop
DESCRIPTION: This code snippet demonstrates how to display a warning toast notification in Docker Desktop using the `ddClient.desktopUI.toast.warning` method. The `msg` parameter takes a string that will be displayed to the user.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/dashboard.md#_snippet_1

LANGUAGE: typescript
CODE:
```
ddClient.desktopUI.toast.warning("message");
```

----------------------------------------

TITLE: Building a Docker Image using Docker
DESCRIPTION: This command builds a Docker image from a Dockerfile in the current directory. It uses the Dockerfile to create a container image that can be run to deploy the application.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/using-the-build-cache.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker build .
```

----------------------------------------

TITLE: Building Docker image with SSH key
DESCRIPTION: Builds a Docker image while mounting the SSH agent socket using the `--ssh` flag. This allows the ADD instruction to access private Git repositories via SSH.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_79

LANGUAGE: bash
CODE:
```
$ docker build --ssh default .
```

----------------------------------------

TITLE: Python Dockerfile Example
DESCRIPTION: This Dockerfile sets up a Python environment, copies application files, installs dependencies, and defines the command to run the application. It is a basic example for containerizing a Python application using Docker.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/python.md#_snippet_0

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.9-slim-buster

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["python", "./main.py"]
```

----------------------------------------

TITLE: Produce Messages to Kafka Topic
DESCRIPTION: This command uses the kafka-console-producer.sh script to publish messages to a specified Kafka topic. It connects to the Kafka cluster using the bootstrap server address and allows the user to enter messages via the console.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker exec -ti kafka /opt/kafka/bin/kafka-console-producer.sh --bootstrap-server :9092 --topic demo
```

----------------------------------------

TITLE: Adding Additional Build Contexts to a Docker Target
DESCRIPTION: Demonstrates how to add additional build contexts using the `contexts` attribute. This example shows how to pin an image version.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_20

LANGUAGE: hcl
CODE:
```
# docker-bake.hcl
target "app" {
    contexts = {
        alpine = "docker-image://alpine:3.13"
    }
}
```

LANGUAGE: dockerfile
CODE:
```
# Dockerfile
FROM alpine
RUN echo "Hello world"
```

----------------------------------------

TITLE: GitHub Actions Workflow Configuration
DESCRIPTION: This YAML configuration defines a GitHub Actions workflow that triggers on pushes to the `main` branch. It logs into Docker Hub, sets up Docker Buildx, and builds and pushes a Docker image to Docker Hub with multi-platform support (linux/amd64, linux/arm64).
SOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/configure-ci-cd.md#_snippet_2

LANGUAGE: YAML
CODE:
```
name: ci

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
```

----------------------------------------

TITLE: Setting Database Environment Variables in Docker Compose
DESCRIPTION: This snippet adds environment variables to the `server` service definition in the `compose.yaml` file. These variables specify the database host, user, password file, and database name, enabling the application to connect to the PostgreSQL database.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/develop.md#_snippet_1

LANGUAGE: yaml
CODE:
```
services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: production
      POSTGRES_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
      POSTGRES_DB: example
    ports:
      - 3000:3000

    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
```

----------------------------------------

TITLE: Applying Common Service Configuration with Extensions
DESCRIPTION: This example shows how to define an extension `x-function` with common service configurations like labels, dependencies, networks, and deployment constraints, and then apply it to multiple services.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/extension.md#_snippet_3

LANGUAGE: yaml
CODE:
```
x-function: &function
 labels:
   function: "true"
 depends_on:
   - gateway
 networks:
   - functions
 deploy:
   placement:
     constraints:
       - 'node.platform.os == linux'
services:
 # Node.js gives OS info about the node (Host)
 nodeinfo:
   <<: *function
   image: functions/nodeinfo:latest
   environment:
     no_proxy: "gateway"
     https_proxy: $https_proxy
 # Uses `cat` to echo back response, fastest function to execute.
 echoit:
   <<: *function
   image: functions/alpine:health
   environment:
     fprocess: "cat"
     no_proxy: "gateway"
     https_proxy: $https_proxy
```

----------------------------------------

TITLE: Extending Services in Docker Compose (YAML)
DESCRIPTION: Shares common configurations among different files or projects.  It allows defining a common set of service options in one place and referring to it from anywhere. The `extends` value must be a mapping defined with a required `service` and an optional `file` key.
SOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#_snippet_36

LANGUAGE: YAML
CODE:
```
extends:
  file: common.yml
  service: webapp
```

----------------------------------------

TITLE: Installing the latest Docker packages
DESCRIPTION: Installs the latest versions of Docker Engine, CLI, containerd, docker-buildx-plugin, and docker-compose-plugin using apt-get.  This command assumes the Docker apt repository has been set up.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/ubuntu.md#_snippet_2

LANGUAGE: bash
CODE:
```
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
```

----------------------------------------

TITLE: Displaying Image Layers with Docker History
DESCRIPTION: This command displays the layers of a Docker image, showing the commands used to create each layer, their sizes, and creation timestamps. It helps in understanding the image structure and identifying large layers.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/09_image_best.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker image history getting-started
```

----------------------------------------

TITLE: Display CVEs using Docker Scout
DESCRIPTION: The `docker scout cves` command displays CVEs found in a specified Docker image, directory, or archive.  It requires the Docker Scout CLI to be installed and configured. The IMAGE|DIRECTORY|ARCHIVE argument specifies the target to be scanned for vulnerabilities.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_0

LANGUAGE: Shell
CODE:
```
docker scout cves [OPTIONS] [IMAGE|DIRECTORY|ARCHIVE]
```

----------------------------------------

TITLE: Removing Unused Docker Volumes
DESCRIPTION: This command removes all unused Docker volumes, freeing up disk space. It prompts for confirmation before removing the volumes.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_49

LANGUAGE: bash
CODE:
```
$ docker volume prune
```

----------------------------------------

TITLE: Assigning profiles to services in Compose file
DESCRIPTION: This YAML snippet demonstrates how to assign profiles to services using the `profiles` attribute in a Docker Compose file. Services `frontend` and `phpmyadmin` are assigned to the `frontend` and `debug` profiles, respectively. Services without a `profiles` attribute, like `backend` and `db`, are always enabled.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/profiles.md#_snippet_0

LANGUAGE: yaml
CODE:
```
services:
  frontend:
    image: frontend
    profiles: [frontend]

  phpmyadmin:
    image: phpmyadmin
    depends_on: [db]
    profiles: [debug]

  backend:
    image: backend

  db:
    image: mysql
```

----------------------------------------

TITLE: Listing files in the mounted source directory
DESCRIPTION: This command lists the files and directories in the /src directory inside the container, which reflects the contents of the host's getting-started-app directory due to the bind mount.
SOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#_snippet_9

LANGUAGE: bash
CODE:
```
ls
```

----------------------------------------

TITLE: Dockerfile for Go Project with Build Cache
DESCRIPTION: This Dockerfile defines a multi-stage build for a Go project, utilizing BuildKit's cache mount feature to cache Go dependencies and build artifacts. It sets the GOMODCACHE environment variable and uses the --mount flag to specify the cache target.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/cache.md#_snippet_6

LANGUAGE: Dockerfile
CODE:
```
FROM golang:1.21.1-alpine as base-build

WORKDIR /build
RUN go env -w GOMODCACHE=/root/.cache/go-build

COPY go.mod go.sum ./
RUN --mount=type=cache,target=/root/.cache/go-build go mod download

COPY ./src ./
RUN --mount=type=cache,target=/root/.cache/go-build go build -o /bin/app /build/src
...
```

----------------------------------------

TITLE: Publishing Service Ports using Routing Mesh
DESCRIPTION: The `--publish <PUBLISHED-PORT>:<SERVICE-PORT>` flag publishes a service's ports externally to the swarm. The swarm makes the service accessible at the published port on every swarm node, and the routing mesh routes external connections to a task.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#_snippet_23

LANGUAGE: Docker CLI
CODE:
```
--publish <PUBLISHED-PORT>:<SERVICE-PORT>
```

----------------------------------------

TITLE: Isolating external effects during package installation
DESCRIPTION: This example demonstrates how to isolate external effects during package installation using the `--network=none` option with the RUN instruction. It ensures that `pip` can only install packages provided in the tarfile, which can be controlled by an earlier build stage.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_47

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM python:3.6
ADD mypackage.tgz wheels/
RUN --network=none pip install --find-links wheels mypackage
```

----------------------------------------

TITLE: Running Docker Container with Volume using -v
DESCRIPTION: This command runs a Docker container named `devtest` with a volume mount using the `-v` flag. It specifies the volume name (`myvol2`) and the target mount path (`/app`) inside the container.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_10

LANGUAGE: console
CODE:
```
$ docker run -d \
  --name devtest \
  -v myvol2:/app \
  nginx:latest
```

----------------------------------------

TITLE: Prometheus Configuration (YAML)
DESCRIPTION: This YAML file configures Prometheus to scrape the OpenTelemetry collector endpoint. It defines a scrape job named `otel-collector` that targets the collector at `otelcol:8889`.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/otel.md#_snippet_3

LANGUAGE: yaml
CODE:
```
# Configure Prometheus to scrape the OpenTelemetry collector endpoint
scrape_configs:
  - job_name: "otel-collector"
    scrape_interval: 1s
    static_configs:
      - targets: ["otelcol:8889"]
```

----------------------------------------

TITLE: Navigating to the API directory
DESCRIPTION: Navigates to the API directory.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#_snippet_12

LANGUAGE: console
CODE:
```
cd api
```

----------------------------------------

TITLE: Setting Fluentd Logging Driver for a Container
DESCRIPTION: This example shows how to set the logging driver to `fluentd` for a specific container using the `docker run` command. It requires a running Fluentd daemon. The container will attempt to connect to the Fluentd daemon at the default address or the address specified by `fluentd-address`.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/fluentd.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker run --log-driver=fluentd ...
```

----------------------------------------

TITLE: Running fdisk with device access
DESCRIPTION: This set of commands demonstrates how to use the `--device` flag to grant a container access to a block device (`/dev/xvdc`) and how to control the permissions (read, write, mknod) using the `:rwm` options. The example uses `fdisk` to interact with the device. It requires the `ubuntu` image and the `fdisk` utility to be present in the container.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_53

LANGUAGE: console
CODE:
```
$ docker run --device=/dev/sda:/dev/xvdc --rm -it ubuntu fdisk  /dev/xvdc

Command (m for help): q
```

LANGUAGE: console
CODE:
```
$ docker run --device=/dev/sda:/dev/xvdc:r --rm -it ubuntu fdisk  /dev/xvdc
You will not be able to write the partition table.

Command (m for help): q
```

LANGUAGE: console
CODE:
```
$ docker run --device=/dev/sda:/dev/xvdc:w --rm -it ubuntu fdisk  /dev/xvdc
    crash....
```

LANGUAGE: console
CODE:
```
$ docker run --device=/dev/sda:/dev/xvdc:m --rm -it ubuntu fdisk  /dev/xvdc
fdisk: unable to open /dev/xvdc: Operation not permitted
```

----------------------------------------

TITLE: Configuring .dockerignore File
DESCRIPTION: This .dockerignore file specifies patterns for excluding files and directories from the Docker build context. It prevents unnecessary files like build artifacts, temporary files, and version control directories from being included in the Docker image, reducing its size and build time.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#_snippet_5

LANGUAGE: Text
CODE:
```
# Include any files or directories that you don't want to be copied to your
# container here (e.g., local build artifacts, temporary files, etc.).
#
# For more help, visit the .dockerignore file reference guide at
# https://docs.docker.com/go/build-context-dockerignore/

**/.DS_Store
**/__pycache__
**/.venv
**/.classpath
**/.dockerignore
**/.env
**/.git
**/.gitignore
**/.project
**/.settings
**/.toolstarget
**/.vs
**/.vscode
**/*.*proj.user
**/*.dbmdl
**/*.jfm
**/bin
**/charts
**/docker-compose*
**/compose.y*ml
**/Dockerfile*
**/node_modules
**/npm-debug.log
**/obj
**/secrets.dev.yaml
**/values.dev.yaml
LICENSE
README.md
```

----------------------------------------

TITLE: Compose: Concatenating multi-value options
DESCRIPTION: Shows how Docker Compose concatenates values for multi-value options like `expose`.  The `expose` directives from both the original and local services are combined into a single list.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#_snippet_5

LANGUAGE: yaml
CODE:
```
services:
  myservice:
    # ...
    expose:
      - "3000"
```

LANGUAGE: yaml
CODE:
```
services:
  myservice:
    # ...
    expose:
      - "4000"
      - "5000"
```

LANGUAGE: yaml
CODE:
```
services:
  myservice:
    # ...
    expose:
      - "3000"
      - "4000"
      - "5000"
```

----------------------------------------

TITLE: Verifying SSL Connection with OpenSSL
DESCRIPTION: This command uses OpenSSL to connect to a localhost server on port 3000, verifying the SSL certificate against a provided CA certificate. It displays detailed information about the SSL connection, including the certificate chain, server certificate, and cipher used.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#_snippet_35

LANGUAGE: console
CODE:
```
$ openssl s_client -connect localhost:3000 -CAfile root-ca.crt

CONNECTED(00000003)
depth=1 /C=US/ST=CA/L=San Francisco/O=Docker/CN=Swarm Secret Example CA
verify return:1
depth=0 /C=US/ST=CA/L=San Francisco/O=Docker/CN=localhost
verify return:1
---
Certificate chain
 0 s:/C=US/ST=CA/L=San Francisco/O=Docker/CN=localhost
   i:/C=US/ST=CA/L=San Francisco/O=Docker/CN=Swarm Secret Example CA
---
Server certificate
-----BEGIN CERTIFICATE-----
…
-----END CERTIFICATE-----
subject=/C=US/ST=CA/L=San Francisco/O=Docker/CN=localhost
issuer=/C=US/ST=CA/L=San Francisco/O=Docker/CN=Swarm Secret Example CA
---
No client certificate CA names sent
---
SSL handshake has read 1663 bytes and written 712 bytes
---
New, TLSv1/SSLv3, Cipher is AES256-SHA
Server public key is 4096 bit
Secure Renegotiation IS supported
Compression: NONE
Expansion: NONE
SSL-Session:
	Protocol  : TLSv1
	Cipher    : AES256-SHA
	Session-ID: A1A8BF35549C5715648A12FD7B7E3D861539316B03440187D9DA6C2E48822853
	Session-ID-ctx:
	Master-Key: F39D1B12274BA16D3A906F390A61438221E381952E9E1E05D3DD784F0135FB81353DA38C6D5C021CB926E844DFC49FC4
	Key-Arg   : None
	Start Time: 1481685096
	Timeout   : 300 (sec)
	Verify return code: 0 (ok)
```

----------------------------------------

TITLE: Docker Compose External Volume Definition
DESCRIPTION: This Docker Compose configuration defines a service (`frontend`) that uses an external volume (`myapp`). The `external: true` setting indicates that the volume is managed outside of Compose.
SOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#_snippet_15

LANGUAGE: yaml
CODE:
```
services:
  frontend:
    image: node:lts
    volumes:
      - myapp:/home/node/app
volumes:
  myapp:
    external: true
```

----------------------------------------

TITLE: List Kubernetes deployments
DESCRIPTION: This command lists all the deployments in the Kubernetes cluster. It is used to verify that the application deployment was successful.
SOURCE: https://github.com/docker/docs/blob/main/content/guides/kube-deploy.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ kubectl get deployments
```