TITLE: Adding HTML and Body Tags to Next.js Root Layout (TypeScript)
DESCRIPTION: This snippet demonstrates the correct way to define the `<html>` and `<body>` tags within a Next.js Root Layout component. It shows how to wrap the `children` prop with these essential HTML tags, which is crucial for resolving the 'Missing Root Layout tags' error and ensuring proper page structure and rendering in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-root-layout-tags.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <body>
        {children}
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Running Next.js Development Server with npm
DESCRIPTION: This command initiates the Next.js development server using npm. It compiles the application and serves it locally, usually at `http://localhost:3000`, providing a development environment with hot module replacement.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-makeswift/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Running Next.js Development Server with Yarn
DESCRIPTION: This command executes the `dev` script defined in `package.json` using Yarn, starting the Next.js development server. It provides the same functionality as `npm run dev` but uses Yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
yarn dev
```

----------------------------------------

TITLE: Migrating getStaticProps and getServerSideProps to App Router with Fetch API
DESCRIPTION: This snippet demonstrates how to replace `getStaticProps` and `getServerSideProps` from the `pages` directory with the new `fetch()` API in the `app` directory. It shows examples for static data fetching (cached indefinitely), dynamic data fetching (no caching), and revalidated data fetching (cached for a specific duration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_22

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  // This request should be cached until manually invalidated.
  // Similar to `getStaticProps`.
  // `force-cache` is the default and can be omitted.
  const staticData = await fetch(`https://...`, { cache: 'force-cache' })

  // This request should be refetched on every request.
  // Similar to `getServerSideProps`.
  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })

  // This request should be cached with a lifetime of 10 seconds.
  // Similar to `getStaticProps` with the `revalidate` option.
  const revalidatedData = await fetch(`https://...`, {
    next: { revalidate: 10 },
  })

  return <div>...</div>
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  // This request should be cached until manually invalidated.
  // Similar to `getStaticProps`.
  // `force-cache` is the default and can be omitted.
  const staticData = await fetch(`https://...`, { cache: 'force-cache' })

  // This request should be refetched on every request.
  // Similar to `getServerSideProps`.
  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })

  // This request should be cached with a lifetime of 10 seconds.
  // Similar to `getStaticProps` with the `revalidate` option.
  const revalidatedData = await fetch(`https://...`, {
    next: { revalidate: 10 },
  })

  return <div>...</div>
}
```

----------------------------------------

TITLE: Authenticating User Server Action - TSX/JSX
DESCRIPTION: Extends the `createUser` server function to include authentication logic. It requires an authentication token, uses an `authenticate` helper function from a library, and throws an error if the user is unauthorized before creating the user in the database, highlighting security considerations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use server'\n\nimport { db } from '@/lib/db' // Your database client\nimport { authenticate } from '@/lib/auth' // Your authentication library\n\nexport async function createUser(\n  data: { name: string; email: string },\n  token: string\n) {\n  const user = authenticate(token)\n  if (!user) {\n    throw new Error('Unauthorized')\n  }\n  const newUser = await db.user.create({ data })\n  return newUser\n}
```

LANGUAGE: jsx
CODE:
```
'use server'\n\nimport { db } from '@/lib/db' // Your database client\nimport { authenticate } from '@/lib/auth' // Your authentication library\n\nexport async function createUser(data, token) {\n  const user = authenticate(token)\n  if (!user) {\n    throw new Error('Unauthorized')\n  }\n  const newUser = await db.user.create({ data })\n  return newUser\n}
```

----------------------------------------

TITLE: Generating Open Graph Image with External Data (TypeScript)
DESCRIPTION: This snippet demonstrates how to create an Open Graph image dynamically in Next.js by fetching post data from an external API using `fetch` and displaying the post title. It utilizes the `params` object to extract the `slug` for the API call, and sets metadata like `alt`, `size`, and `contentType` for the image.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_20

LANGUAGE: TypeScript
CODE:
```
import { ImageResponse } from 'next/og'

export const alt = 'About Acme'
export const size = {
  width: 1200,
  height: 630,
}
export const contentType = 'image/png'

export default async function Image({ params }: { params: { slug: string } }) {
  const post = await fetch(`https://.../posts/${params.slug}`).then((res) =>
    res.json()
  )

  return new ImageResponse(
    (
      <div
        style={{
          fontSize: 48,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {post.title}
      </div>
    ),
    {
      ...size,
    }
  )
}
```

----------------------------------------

TITLE: Refactoring Synchronous `params` and `searchParams` Access in Next.js 15 (After)
DESCRIPTION: This snippet demonstrates the corrected asynchronous access pattern for `params` and `searchParams` required in Next.js 15. The component is now `async`, and `params` and `searchParams` are `await`ed before their values are destructured, ensuring compatibility with the new Promise-based API. The `app/page.js` example shows that the `export * from` pattern remains valid as long as the exported component correctly handles the asynchronous values.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-params.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
export default async function ComponentThatWillBeExportedAsPage({ params, searchParams }) {
  const { slug } = await params;
  const { page } = await searchParams
  return <RenderList slug={slug} page={page}>
}
```

LANGUAGE: jsx
CODE:
```
export * from '.../some-file'
```

----------------------------------------

TITLE: Using revalidatePath in a Server Action - Next.js - TypeScript
DESCRIPTION: This example shows how to integrate `revalidatePath` within a Next.js Server Action. After an asynchronous operation like `submitForm()`, `revalidatePath('/')` is called to ensure the cache for the root path is invalidated, reflecting any data changes made by the action.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#_snippet_5

LANGUAGE: ts
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'

export default async function submit() {
  await submitForm()
  revalidatePath('/')
}
```

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: These commands initiate the Next.js development server, making the application accessible locally at `http://localhost:3000`. They demonstrate how to execute the `dev` script using various popular JavaScript package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm dev
```

LANGUAGE: bash
CODE:
```
bun dev
```

----------------------------------------

TITLE: Creating a Server Component Page with Data Fetching (TypeScript)
DESCRIPTION: Defines a Server Component page that imports and renders a Client Component. It demonstrates the new data fetching API by asynchronously fetching posts directly within the Server Component and passing the data as props to the Client Component. This replaces `getServerSideProps` or `getStaticProps`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
// Import your Client Component
import HomePage from './home-page'

async function getPosts() {
  const res = await fetch('https://...')
  const posts = await res.json()
  return posts
}

export default async function Page() {
  // Fetch data directly in a Server Component
  const recentPosts = await getPosts()
  // Forward fetched data to your Client Component
  return <HomePage recentPosts={recentPosts} />
}
```

----------------------------------------

TITLE: Revalidating Path Cache in Server Actions (Next.js)
DESCRIPTION: This code illustrates how to revalidate the Next.js Cache for a specific path (`/posts`) within a Server Action using the `revalidatePath` API. This ensures that subsequent requests to `/posts` will fetch fresh data, invalidating any previously cached content. It's typically used after data mutations like creating a new post.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_12

LANGUAGE: ts
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'

export async function createPost() {
  try {
    // ...
  } catch (error) {
    // ...
  }

  revalidatePath('/posts')
}
```

LANGUAGE: js
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'

export async function createPost() {
  try {
    // ...
  } catch (error) {
    // ...
  }

  revalidatePath('/posts')
}
```

----------------------------------------

TITLE: Fetching Data in Server Component (JSX)
DESCRIPTION: Demonstrates how to use the extended `fetch` function within an `async` Server Component written in JSX to fetch data from an external API and render it.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/fetch.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  let data = await fetch('https://api.vercel.app/blog')
  let posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Resolving Math.random() Prerendering Issue with `connection` and `Suspense` in Next.js (After Fix)
DESCRIPTION: This solution refactors the `Page` component to use `Suspense` and the `connection` function from `next/server`. By wrapping the `DynamicProductsView` in `Suspense` and calling `await connection()` within `DynamicProductsView` before `Math.random()`, Next.js is informed that this part of the component should not be prerendered, ensuring `Math.random()` executes on each request and provides unique values.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-random.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { connection } from 'next/server'

async function ProductsSkeleton() {
  ...
}

export default async function Page() {
  const products = await getCachedProducts();
  return <Suspense fallback={<ProductsSkeleton />}>
    <DynamicProductsView products={products} />
  </Suspense>
}

async function DynamicProductsView() {
  await connection();
  const randomSeed = Math.random()
  const randomizedProducts = randomize(products, randomSeed)
  return <ProductsView products={randomizedProducts} />
}
```

----------------------------------------

TITLE: Starting Next.js Development Server - Bash
DESCRIPTION: This snippet provides commands to start the Next.js development server using various package managers. Running one of these commands launches the application locally, typically accessible at http://localhost:3000, enabling real-time page updates during development.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-empty/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Defining Multiple Fonts as CSS Variables in Next.js Layout (App Router)
DESCRIPTION: This snippet shows how to initialize multiple Google Fonts (Inter, Roboto Mono) with `variable` properties in the Next.js App Router's `RootLayout`. These variables are then applied to the `html` element's `className`, making the fonts accessible as CSS variables for styling throughout the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#_snippet_29

LANGUAGE: TSX
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'
import styles from './global.css'

const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
  display: 'swap',
})

const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  variable: '--font-roboto-mono',
  display: 'swap',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={`${inter.variable} ${roboto_mono.variable}`}>
      <body>
        <h1>My App</h1>
        <div>{children}</div>
      </body>
    </html>
  )
}
```

LANGUAGE: JSX
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'

const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
  display: 'swap',
})

const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  variable: '--font-roboto-mono',
  display: 'swap',
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={`${inter.variable} ${roboto_mono.variable}`}>
      <body>
        <h1>My App</h1>
        <div>{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Integrating Dynamic User Component with Suspense (JavaScript)
DESCRIPTION: This snippet demonstrates how to integrate a dynamic component (`User`) into a page that uses Partial Prerendering. By wrapping the `User` component with `Suspense`, the static parts of the page are prerendered, while the dynamic `User` component is streamed, improving initial load performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-partial-prerendering.mdx#_snippet_8

LANGUAGE: JSX
CODE:
```
import { Suspense } from 'react'
import { User, AvatarSkeleton } from './user'

export const experimental_ppr = true

export default function Page() {
  return (
    <section>
      <h1>This will be prerendered</h1>
      <Suspense fallback={<AvatarSkeleton />}>
        <User />
      </Suspense>
    </section>
  )
}
```

----------------------------------------

TITLE: Passing Data from Server to Client Components via Props
DESCRIPTION: This snippet illustrates how data fetched on the server can be passed down to a Client Component using standard React props. The `Page` Server Component fetches `post.likes` and passes it directly to the `LikeButton` Client Component, which then uses this data for its client-side functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-server-and-client-components.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'

export default async function Page({ params }: { params: { id: string } }) {
  const post = await getPost(params.id)

  return <LikeButton likes={post.likes} />
}
```

LANGUAGE: JavaScript
CODE:
```
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'

export default async function Page({ params }) {
  const post = await getPost(params.id)

  return <LikeButton likes={post.likes} />
}
```

LANGUAGE: TypeScript
CODE:
```
'use client'

export default function LikeButton({ likes }: { likes: number }) {
  // ...
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

export default function LikeButton({ likes }) {
  // ...
}
```

----------------------------------------

TITLE: Defining a Dashboard Layout Component in Next.js
DESCRIPTION: This snippet demonstrates how to define a layout component for a specific route segment, such as a dashboard. It accepts a `children` prop, which will be populated with the nested route segments, and wraps them within a `<section>` element. This pattern allows for shared UI across multiple pages within a specific part of the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <section>{children}</section>
}
```

LANGUAGE: javascript
CODE:
```
export default function DashboardLayout({ children }) {
  return <section>{children}</section>
}
```

----------------------------------------

TITLE: Caching ORM/Database Queries with `unstable_cache` in Next.js App Router
DESCRIPTION: Illustrates using `unstable_cache` to cache data retrieved from an ORM or database in the Next.js App Router. It defines a `getCachedPosts` function that wraps a database query, applies a `posts` tag, and sets a revalidation time, allowing for on-demand invalidation via `revalidateTag`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { unstable_cache } from 'next/cache'
import { db, posts } from '@/lib/db'

const getCachedPosts = unstable_cache(
  async () => {
    return await db.select().from(posts)
  },
  ['posts'],
  { revalidate: 3600, tags: ['posts'] }
)

export default async function Page() {
  const posts = getCachedPosts()
  // ...
}
```

LANGUAGE: jsx
CODE:
```
import { unstable_cache } from 'next/cache'
import { db, posts } from '@/lib/db'

const getCachedPosts = unstable_cache(
  async () => {
    return await db.select().from(posts)
  },
  ['posts'],
  { revalidate: 3600, tags: ['posts'] }
)

export default async function Page() {
  const posts = getCachedPosts()
  // ...
}
```

----------------------------------------

TITLE: Applying Title Template in Next.js Layout (TSX)
DESCRIPTION: This snippet demonstrates how to use `title.template` in a Next.js layout to add a prefix or suffix to titles defined in child route segments. A `default` title is required when using a template.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: {
    template: '%s | Acme',
    default: 'Acme', // a default is required when creating a template
  },
}
```

----------------------------------------

TITLE: Revalidating Cache Tag in Server Action - TypeScript
DESCRIPTION: This TypeScript Server Action demonstrates how to use `revalidateTag` to invalidate the 'posts' cache tag. After an asynchronous operation like `addPost()`, calling `revalidateTag('posts')` ensures that any cached data associated with the 'posts' tag will be revalidated on the next visit to a relevant path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidateTag.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('posts')
}
```

----------------------------------------

TITLE: Basic Usage of create-next-app CLI (Bash)
DESCRIPTION: This command provides the fundamental syntax for `create-next-app`, allowing users to quickly scaffold a new Next.js project. It accepts an optional `project-name` and various `options` to customize the initial setup, serving as the entry point for creating Next.js applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/create-next-app.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest [project-name] [options]
```

----------------------------------------

TITLE: Revalidating Cache Tag in Server Action - JavaScript
DESCRIPTION: This JavaScript Server Action demonstrates how to use `revalidateTag` to invalidate the 'posts' cache tag. After an asynchronous operation like `addPost()`, calling `revalidateTag('posts')` ensures that any cached data associated with the 'posts' tag will be revalidated on the next visit to a relevant path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidateTag.mdx#_snippet_3

LANGUAGE: js
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('posts')
}
```

----------------------------------------

TITLE: Extracting Path Parameters with URLPattern in Next.js Middleware (TypeScript)
DESCRIPTION: This snippet provides a fix for the deprecated `request.page` by using the `URLPattern` API to parse path parameters (`locale` and `slug`) from the request URL. It defines a `params` helper function to abstract the URL pattern matching and then uses the extracted parameters for redirection, achieving similar functionality without relying on deprecated features.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-request-page.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { NextRequest, NextResponse } from 'next/server'

const PATTERNS = [
  [
    new URLPattern({ pathname: '/:locale/:slug' }),
    ({ pathname }) => pathname.groups,
  ],
]

const params = (url) => {
  const input = url.split('?')[0]
  let result = {}

  for (const [pattern, handler] of PATTERNS) {
    const patternResult = pattern.exec(input)
    if (patternResult !== null && 'pathname' in patternResult) {
      result = handler(patternResult)
      break
    }
  }
  return result
}

export function middleware(request: NextRequest) {
  const { locale, slug } = params(request.url)

  if (locale && slug) {
    const { search, protocol, host } = request.nextUrl
    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)
    return NextResponse.redirect(url)
  }
}
```

----------------------------------------

TITLE: Defining Basic Root Layout in Next.js App Router
DESCRIPTION: This snippet defines the basic structure of a root layout component in a Next.js App Router application. It's a React Server Component that receives `children` as a prop, representing the content of nested pages or layouts. Initially, it returns a placeholder, indicating where the main HTML structure will be placed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return '...'
}
```

LANGUAGE: JavaScript
CODE:
```
export default function RootLayout({ children }) {
  return '...'
}
```

----------------------------------------

TITLE: Handling Form Submissions with Server Actions and FormData (Next.js)
DESCRIPTION: This snippet demonstrates how to create a Server Action function (`createInvoice`) that automatically receives the `FormData` object from an HTML form submission. It shows how to extract individual field values using `formData.get()` and how to assign the Server Action to the form's `action` attribute. This pattern is used for processing form data directly on the server.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default function Page() {
  async function createInvoice(formData: FormData) {
    'use server'

    const rawFormData = {
      customerId: formData.get('customerId'),
      amount: formData.get('amount'),
      status: formData.get('status')
    }

    // mutate data
    // revalidate the cache
  }

  return <form action={createInvoice}>...</form>
}
```

LANGUAGE: JavaScript
CODE:
```
export default function Page() {
  async function createInvoice(formData) {
    'use server'

    const rawFormData = {
      customerId: formData.get('customerId'),
      amount: formData.get('amount'),
      status: formData.get('status')
    }

    // mutate data
    // revalidate the cache
  }

  return <form action={createInvoice}>...</form>
}
```

----------------------------------------

TITLE: Protecting Server-Only Code with `server-only` in Next.js
DESCRIPTION: This updated getData function imports the server-only package as its first line. This ensures that any attempt to import this module into a Client Component will result in a build-time error, effectively preventing sensitive server-only code, like API keys, from being inadvertently bundled for the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-server-and-client-components.mdx#_snippet_13

LANGUAGE: JavaScript
CODE:
```
import 'server-only'

export async function getData() {
  const res = await fetch('https://external-service.com/data', {
    headers: {
      authorization: process.env.API_KEY,
    },
  })

  return res.json()
}
```

----------------------------------------

TITLE: Updating Post Server Action (Inline) - TSX/JSX
DESCRIPTION: Demonstrates using `'use server'` inline within an asynchronous function (`updatePost`) defined inside a Next.js Server Component page. This server function handles form data, saves the post, and then revalidates the page path using `revalidatePath` from `next/cache`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { EditPost } from './edit-post'\nimport { revalidatePath } from 'next/cache'\n\nexport default async function PostPage({ params }: { params: { id: string } }) {\n  const post = await getPost(params.id)\n\n  async function updatePost(formData: FormData) {\n    'use server'\n    await savePost(params.id, formData)\n    revalidatePath(`/posts/${params.id}`)\n  }\n\n  return <EditPost updatePostAction={updatePost} post={post} />\n}
```

LANGUAGE: jsx
CODE:
```
import { EditPost } from './edit-post'\nimport { revalidatePath } from 'next/cache'\n\nexport default async function PostPage({ params }) {\n  const post = await getPost(params.id)\n\n  async function updatePost(formData) {\n    'use server'\n    await savePost(params.id, formData)\n    revalidatePath(`/posts/${params.id}`)\n  }\n\n  return <EditPost updatePostAction={updatePost} post={post} />\n}
```

----------------------------------------

TITLE: Defining a Basic Next.js Server Action
DESCRIPTION: This snippet shows the basic structure for defining a Server Action in Next.js. The 'use server' directive marks the function to be executed on the server. This action can then be imported and called directly from client or server components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
'use server'

export async function create() {}
```

LANGUAGE: js
CODE:
```
'use server'

export async function create() {}
```

----------------------------------------

TITLE: Initializing a Next.js Project Automatically with create-next-app
DESCRIPTION: This command initiates the automatic setup of a new Next.js application using the `create-next-app` CLI tool. It prompts the user for project details like name, TypeScript, ESLint, Tailwind CSS, `src/` directory usage, App Router, Turbopack, and import aliases, then creates the project folder and installs dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest
```

----------------------------------------

TITLE: Running Next.js Development Server Locally
DESCRIPTION: These commands install the project dependencies using npm and then start the Next.js development server. This allows the application to be accessed locally, typically at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fauna/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Migrating Next.js Cookies API to Async (TypeScript)
DESCRIPTION: This snippet demonstrates the recommended asynchronous usage of the `cookies` API in Next.js 15. The `cookies()` function now returns a Promise, requiring `await` to access the cookie store.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import { cookies } from 'next/headers'

// Before
const cookieStore = cookies()
const token = cookieStore.get('token')

// After
const cookieStore = await cookies()
const token = cookieStore.get('token')
```

----------------------------------------

TITLE: Generating Dynamic Metadata with `generateMetadata` Function in Next.js (TypeScript)
DESCRIPTION: This snippet illustrates how to generate dynamic metadata using an asynchronous `generateMetadata` function in a `page.tsx` file. It accepts `params` and `searchParams` to read route information and `parent` to access and extend metadata from parent segments. This is ideal for metadata that depends on external data or dynamic route segments, requiring `Metadata` and `ResolvingMetadata` types from 'next'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import type { Metadata, ResolvingMetadata } from 'next'

type Props = {
  params: Promise<{ id: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}

export async function generateMetadata(
  { params, searchParams }: Props,
  parent: ResolvingMetadata
): Promise<Metadata> {
  // read route params
  const { id } = await params

  // fetch data
  const product = await fetch(`https://.../${id}`).then((res) => res.json())

  // optionally access and extend (rather than replace) parent metadata
  const previousImages = (await parent).openGraph?.images || []

  return {
    title: product.title,
    openGraph: {
      images: ['/some-specific-page-image.jpg', ...previousImages],
    },
  }
}

export default function Page({ params, searchParams }: Props) {}
```

----------------------------------------

TITLE: Storing Session Secret Key in .env (Bash)
DESCRIPTION: This snippet demonstrates how to store the generated session secret key as an environment variable named `SESSION_SECRET` in a `.env` file. This practice keeps sensitive information out of source control and allows for easy configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_14

LANGUAGE: Bash
CODE:
```
SESSION_SECRET=your_secret_key
```

----------------------------------------

TITLE: Using next/image Component in Next.js
DESCRIPTION: Demonstrates the recommended way to display images in Next.js using the `<Image />` component from `next/image`. This component automatically handles image optimization, improving performance. It requires `src`, `alt`, `width`, and `height` props.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-img-element.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

function Home() {
  return (
    <Image
      src="https://example.com/hero.jpg"
      alt="Landscape picture"
      width={800}
      height={500}
    />
  )
}

export default Home
```

----------------------------------------

TITLE: Fetching Data with End-to-End Type Safety in Next.js App Router (TypeScript)
DESCRIPTION: This snippet demonstrates how to fetch data asynchronously within a Next.js App Router component (`app/page.tsx`) while maintaining end-to-end type safety. It shows a `getData` function that fetches from an API and returns the JSON response, which is then consumed by the `Page` component. The key benefit is that the return value is not serialized, allowing complex types like `Date`, `Map`, and `Set` to be passed directly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
async function getData() {
  const res = await fetch('https://api.example.com/...')
  // The return value is *not* serialized
  // You can return Date, Map, Set, etc.
  return res.json()
}

export default async function Page() {
  const name = await getData()

  return '...'
}
```

----------------------------------------

TITLE: Optimizing Bundle Size with Client Component Boundaries
DESCRIPTION: This example demonstrates how to strategically place the `'use client'` directive to minimize client-side JavaScript bundles. It shows a `Search` component marked as a Client Component for interactivity, while the parent `Layout` component remains a Server Component, importing the `Search` component without needing to be a client component itself. This approach ensures only interactive parts are bundled for the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-server-and-client-components.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
'use client'

export default function Search() {
  // ...
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

export default function Search() {
  // ...
}
```

LANGUAGE: TypeScript
CODE:
```
// Client Component
import Search from './search'
// Server Component
import Logo from './logo'

// Layout is a Server Component by default
export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <>
      <nav>
        <Logo />
        <Search />
      </nav>
      <main>{children}</main>
    </>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
// Client Component
import Search from './search'
// Server Component
import Logo from './logo'

// Layout is a Server Component by default
export default function Layout({ children }) {
  return (
    <>
      <nav>
        <Logo />
        <Search />
      </nav>
      <main>{children}</main>
    </>
  )
}
```

----------------------------------------

TITLE: Implementing Sequential Data Fetching with React Suspense in Next.js
DESCRIPTION: This example demonstrates sequential data fetching where the `Playlists` component fetches data only after the `Page` component has retrieved artist information, as `Playlists` depends on the `artistID`. It also shows how to use React's `<Suspense>` component to provide a fallback UI, improving user experience by enabling streaming while data is being fetched.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-fetching-data.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ username: string }>
}) {
  const { username } = await params
  // Get artist information
  const artist = await getArtist(username)

  return (
    <>
      <h1>{artist.name}</h1>
      {/* Show fallback UI while the Playlists component is loading */}
      <Suspense fallback={<div>Loading...</div>}>
        {/* Pass the artist ID to the Playlists component */}
        <Playlists artistID={artist.id} />
      </Suspense>
    </>
  )
}

async function Playlists({ artistID }: { artistID: string }) {
  // Use the artist ID to fetch playlists
  const playlists = await getArtistPlaylists(artistID)

  return (
    <ul>
      {playlists.map((playlist) => (
        <li key={playlist.id}>{playlist.name}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { username } = await params
  // Get artist information
  const artist = await getArtist(username)

  return (
    <>
      <h1>{artist.name}</h1>
      {/* Show fallback UI while the Playlists component is loading */}
      <Suspense fallback={<div>Loading...</div>}>
        {/* Pass the artist ID to the Playlists component */}
        <Playlists artistID={artist.id} />
      </Suspense>
    </>
  )
}

async function Playlists({ artistID }) {
  // Use the artist ID to fetch playlists
  const playlists = await getArtistPlaylists(artistID)

  return (
    <ul>
      {playlists.map((playlist) => (
        <li key={playlist.id}>{playlist.name}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Displaying Server Function Errors with useActionState in Next.js (React)
DESCRIPTION: This React client component demonstrates how to use the `useActionState` hook to manage the state and actions of a form. It passes the `createPost` server action and an initial state to the hook, then uses the returned `state` to conditionally display error messages to the user. It takes no explicit props but relies on the `createPost` action for its functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/11-error-handling.mdx#_snippet_1

LANGUAGE: TSX
CODE:
```
'use client'

import { useActionState } from 'react'
import { createPost } from '@/app/actions'

const initialState = {
  message: '',
}

export function Form() {
  const [state, formAction, pending] = useActionState(createPost, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="title">Title</label>
      <input type="text" id="title" name="title" required />
      <label htmlFor="content">Content</label>
      <textarea id="content" name="content" required />
      {state?.message && <p aria-live="polite">{state.message}</p>}
      <button disabled={pending}>Create Post</button>
    </form>
  )
}
```

LANGUAGE: JSX
CODE:
```
'use client'

import { useActionState } from 'react'
import { createPost } from '@/app/actions'

const initialState = {
  message: '',
}

export function Form() {
  const [state, formAction, pending] = useActionState(createPost, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="title">Title</label>
      <input type="text" id="title" name="title" required />
      <label htmlFor="content">Content</label>
      <textarea id="content" name="content" required />
      {state?.message && <p aria-live="polite">{state.message}</p>}
      <button disabled={pending}>Create Post</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Creating Root Layout for Next.js App Router (TypeScript)
DESCRIPTION: This TypeScript React component defines the mandatory root layout for applications using the Next.js App Router. It wraps the entire application, requiring `<html>` and `<body>` tags, and receives `children` as a prop to render nested routes and components within the layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Calling Server Action from Client Component (TypeScript)
DESCRIPTION: This Client Component imports and calls a Server Action defined in a separate module. The 'use client' directive marks this component as a Client Component, enabling interactive client-side functionality while still leveraging server-side mutations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
'use client'

import { create } from './actions'

export function Button() {
  return <button onClick={() => create()}>Create</button>
}
```

----------------------------------------

TITLE: Basic Navigation with Next.js Link Component
DESCRIPTION: This snippet demonstrates the fundamental usage of the `next/link` component for client-side navigation. It imports `Link` and renders it with a simple string `href` prop, directing the user to the `/dashboard` route upon clicking. This approach enables fast, pre-fetched transitions without full page reloads.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Home() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Home() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

----------------------------------------

TITLE: Implementing Optimistic Updates with useOptimistic in TypeScript
DESCRIPTION: This example shows how to use the `useOptimistic` hook to immediately update the UI with a new message before the server action (`send`) completes. This provides a more responsive user experience by assuming the action will succeed and updating the UI instantly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_15

LANGUAGE: TypeScript
CODE:
```
'use client'

import { useOptimistic } from 'react'
import { send } from './actions'

type Message = {
  message: string
}

export function Thread({ messages }: { messages: Message[] }) {
  const [optimisticMessages, addOptimisticMessage] = useOptimistic<
    Message[],
    string
  >(messages, (state, newMessage) => [...state, { message: newMessage }])

  const formAction = async (formData: FormData) => {
    const message = formData.get('message') as string
    addOptimisticMessage(message)
    await send(message)
  }

  return (
    <div>
      {optimisticMessages.map((m, i) => (
        <div key={i}>{m.message}</div>
      ))}
      <form action={formAction}>
        <input type="text" name="message" />
        <button type="submit">Send</button>
      </form>
    </div>
  )
}
```

----------------------------------------

TITLE: Composing Server and Client Components (Initial Example)
DESCRIPTION: This example demonstrates how a Next.js Server Component (`Page`) fetches data and passes it as props to a Client Component (`LikeButton`). The `Page` component runs on the server, handling data fetching, while the `LikeButton` is a client component responsible for interactivity, declared with `'use client'` to indicate its client-side execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-server-and-client-components.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'

export default async function Page({ params }: { params: { id: string } }) {
  const post = await getPost(params.id)

  return (
    <div>
      <main>
        <h1>{post.title}</h1>
        {/* ... */}
        <LikeButton likes={post.likes} />
      </main>
    </div>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'

export default async function Page({ params }) {
  const post = await getPost(params.id)

  return (
    <div>
      <main>
        <h1>{post.title}</h1>
        {/* ... */}
        <LikeButton likes={post.likes} />
      </main>
    </div>
  )
}
```

LANGUAGE: TypeScript
CODE:
```
'use client'

import { useState } from 'react'

export default function LikeButton({ likes }: { likes: number }) {
  // ...
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import { useState } from 'react'

export default function LikeButton({ likes }) {
  // ...
}
```

----------------------------------------

TITLE: Creating Root Layout for Next.js App Router (JavaScript)
DESCRIPTION: This JavaScript React component defines the mandatory root layout for applications using the Next.js App Router. It wraps the entire application, requiring `<html>` and `<body>` tags, and receives `children` as a prop to render nested routes and components within the layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Implementing Server-Side Form Validation with Zod in Next.js (TypeScript)
DESCRIPTION: This snippet demonstrates server-side form validation using the Zod library within a Next.js Server Action. It defines a schema for an email field and uses `safeParse` to validate incoming `FormData`. If validation fails, it returns an object containing field-specific errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
'use server'

import { z } from 'zod'

const schema = z.object({
  email: z.string({
    invalid_type_error: 'Invalid Email',
  }),
})

export default async function createUser(formData: FormData) {
  const validatedFields = schema.safeParse({
    email: formData.get('email'),
  })

  // Return early if the form data is invalid
  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Mutate data
}
```

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: This command starts the Next.js development server, which watches for code changes and automatically reloads the application. It's the primary command for active development.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#_snippet_5

LANGUAGE: bash
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Defining Root Layout and Metadata in Next.js (TypeScript)
DESCRIPTION: This snippet defines the root layout for a Next.js application using TypeScript, including the `Metadata` object for SEO and web shareability. It sets up the basic HTML structure with a `div` for children, serving as the main entry point for the application's UI.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'My App',
  description: 'My App is a...', 
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Importing and Using Google Fonts in App Router (TypeScript)
DESCRIPTION: This snippet demonstrates how to import and use the `Inter` Google Font in a Next.js App Router `layout.tsx` file. It initializes the font with `latin` subsets and `swap` display strategy, then applies it globally to the `<html>` element using `inter.className`. This optimizes font loading by self-hosting and preventing layout shifts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { Inter } from 'next/font/google'

// If loading a variable font, you don't need to specify the font weight
const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Accessing Dynamic Route Parameters in Next.js Open Graph Image (TypeScript)
DESCRIPTION: This snippet demonstrates how to access dynamic route parameters (`params`) within the default export function of an `opengraph-image.tsx` file. The `params` object contains route segments from the root down to the image file's location, allowing for dynamic image generation based on URL segments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
export default function Image({ params }: { params: { slug: string } }) {
  // ...
}
```

----------------------------------------

TITLE: Migrating Synchronous Page Components to use `use` Hook (TSX)
DESCRIPTION: This snippet illustrates the change in synchronous page components where `params` and `searchParams` are now Promise-wrapped and must be accessed using the `use` React hook instead of direct destructuring. This ensures proper handling of asynchronous data in server components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
'use client'

// Before
type Params = { slug: string }
type SearchParams = { [key: string]: string | string[] | undefined }

export default function Page({
  params,
  searchParams,
}: {
  params: Params
  searchParams: SearchParams
}) {
  const { slug } = params
  const { query } = searchParams
}
```

LANGUAGE: tsx
CODE:
```
import { use } from 'react'

// After
type Params = Promise<{ slug: string }>
type SearchParams = Promise<{ [key: string]: string | string[] | undefined }>

export default function Page(props: {
  params: Params
  searchParams: SearchParams
}) {
  const params = use(props.params)
  const searchParams = use(props.searchParams)
  const slug = params.slug
  const query = searchParams.query
}
```

----------------------------------------

TITLE: Defining Inline Server Action in Server Component (JavaScript)
DESCRIPTION: This snippet demonstrates how to define an inline Server Action within a Next.js Server Component by placing the 'use server' directive inside an async function. This pattern is suitable for actions that are specific to a single component and do not need to be reused elsewhere.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export default function Page() {
  // Server Action
  async function create() {
    'use server'
    // Mutate data
  }

  return '...'
}
```

----------------------------------------

TITLE: Copying Local Environment Variables File (Bash)
DESCRIPTION: This Bash command duplicates the `.env.local.example` file to `.env.local`. The `.env.local` file is crucial for storing sensitive environment variables like API keys and is automatically ignored by Git, ensuring secure configuration for the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Configuring Link Component for Rewritten Paths (App Router, JSX)
DESCRIPTION: This React component, designed for the Next.js App Router, uses the `Link` component to navigate to the dashboard. It dynamically sets the `href` prop based on user authentication status (using a custom `useIsAuthed` hook) while maintaining the `as="/dashboard"` prop to ensure correct prefetching for the middleware-rewritten route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_31

LANGUAGE: JSX
CODE:
```
'use client'

import Link from 'next/link'
import useIsAuthed from './hooks/useIsAuthed' // Your auth hook

export default function Page() {
  const isAuthed = useIsAuthed()
  const path = isAuthed ? '/auth/dashboard' : '/public/dashboard'
  return (
    <Link as="/dashboard" href={path}>
      Dashboard
    </Link>
  )
}
```

----------------------------------------

TITLE: Implementing a Dynamic Blog Post Page with Data Fetching in Next.js
DESCRIPTION: This snippet demonstrates a dynamic route segment ('[slug]') for individual blog posts. The 'BlogPostPage' component receives 'params' containing the 'slug', uses it to fetch specific post data via 'getPost(slug)', and then renders the post's title and content. This allows generating multiple pages from a single file based on data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
export default function BlogPostPage({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  const post = await getPost(slug)

  return (
    <div>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </div>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
export default function BlogPostPage({ params }) {
  const { slug } = await params
  const post = await getPost(slug)

  return (
    <div>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating a Basic GET Route Handler in Next.js
DESCRIPTION: This snippet demonstrates how to create a basic GET route handler in Next.js using the Web Response API. It defines an asynchronous function that returns a JSON response with a 'Hello World' message. This handler can be used to serve simple API endpoints.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
export async function GET() {
  return Response.json({ message: 'Hello World' })
}
```

LANGUAGE: javascript
CODE:
```
export async function GET() {
  return Response.json({ message: 'Hello World' })
}
```

----------------------------------------

TITLE: Defining a Dynamic Route Segment in Next.js (TypeScript)
DESCRIPTION: This TypeScript example demonstrates how to define a dynamic route segment using `[slug]` in the file path (e.g., `app/blog/[slug]/page.tsx`). The `params` prop, typed as `Promise<{ slug: string }>`, is destructured to asynchronously access the dynamic `slug` value, enabling the page to render content based on the URL segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/dynamic-routes.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  return <div>My Post: {slug}</div>
}
```

----------------------------------------

TITLE: Configuring Various Metadata Fields in Next.js (JSX)
DESCRIPTION: This snippet illustrates how to define a comprehensive set of metadata fields within the `metadata` object in Next.js. It includes `generator`, `applicationName`, `referrer`, `keywords`, `authors`, `creator`, `publisher`, and `formatDetection` for fine-grained control over page information and SEO.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_17

LANGUAGE: jsx
CODE:
```
export const metadata = {
  generator: 'Next.js',
  applicationName: 'Next.js',
  referrer: 'origin-when-cross-origin',
  keywords: ['Next.js', 'React', 'JavaScript'],
  authors: [{ name: 'Seb' }, { name: 'Josh', url: 'https://nextjs.org' }],
  creator: 'Jiachi Liu',
  publisher: 'Sebastian Markbåge',
  formatDetection: {
    email: false,
    address: false,
    telephone: false,
  },
}
```

----------------------------------------

TITLE: Configuring Route Segment Options for Next.js Route Handler (JavaScript)
DESCRIPTION: This snippet illustrates how to apply route segment configuration options to a Next.js Route Handler. It exports constants like `dynamic`, `dynamicParams`, `revalidate`, `fetchCache`, `runtime`, and `preferredRegion` to control caching behavior, data fetching, and deployment environment for the specific route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_25

LANGUAGE: js
CODE:
```
export const dynamic = 'auto'
export const dynamicParams = true
export const revalidate = false
export const fetchCache = 'auto'
export const runtime = 'nodejs'
export const preferredRegion = 'auto'
```

----------------------------------------

TITLE: Defining Static Metadata in Next.js
DESCRIPTION: These snippets demonstrate how to define static metadata by exporting a `Metadata` object from a static `layout.tsx`/`layout.js` or `page.tsx`/`page.js` file in Next.js. It sets the page title and description, which Next.js uses to generate the relevant `<head>` tags for SEO and web shareability.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/13-metadata-and-og-images.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'My Blog',
  description: '...'
}

export default function Page() {}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'My Blog',
  description: '...'
}

export default function Page() {}
```

----------------------------------------

TITLE: Parallel Data Fetching with Promise.all in Next.js (TypeScript)
DESCRIPTION: This snippet illustrates how to perform parallel data fetching in a Next.js page using `Promise.all`. By initiating `getArtist` and `getAlbums` concurrently and then awaiting their resolution together, it avoids sequential blocking, improving performance. Note that `Promise.all` will fail if any of the wrapped promises reject.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-fetching-data.mdx#_snippet_12

LANGUAGE: TypeScript
CODE:
```
import Albums from './albums'

async function getArtist(username: string) {
  const res = await fetch(`https://api.example.com/artist/${username}`)
  return res.json()
}

async function getAlbums(username: string) {
  const res = await fetch(`https://api.example.com/artist/${username}/albums`)
  return res.json()
}

export default async function Page({
  params,
}: {
  params: Promise<{ username: string }>
}) {
  const { username } = await params
  const artistData = getArtist(username)
  const albumsData = getAlbums(username)

  // Initiate both requests in parallel
  const [artist, albums] = await Promise.all([artistData, albumsData])

  return (
    <>
      <h1>{artist.name}</h1>
      <Albums list={albums} />
    </>
  )
}
```

----------------------------------------

TITLE: Invoking useSearchParams Hook
DESCRIPTION: This snippet illustrates the basic invocation of the `useSearchParams` hook. It highlights that the hook does not accept any parameters and returns a read-only `URLSearchParams` object, which can then be used to access URL query string values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
const searchParams = useSearchParams()
```

----------------------------------------

TITLE: Correct Next.js Link Usage: Including Children - JSX
DESCRIPTION: This snippet illustrates the correct implementation of the next/link component in Next.js by including a child element. It provides two valid methods: directly passing text as a child, or wrapping an <a> tag as a child when legacyBehavior is enabled. This resolves the 'no children' error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/link-no-children.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <>
      <Link href="/about">To About</Link>
      // or
      <Link href="/about" legacyBehavior>
        <a>To About</a>
      </Link>
    </>
  )
}
```

----------------------------------------

TITLE: Creating a Reusable Layout Component in Next.js
DESCRIPTION: This snippet defines a reusable `Layout` React component in `components/layout.js`. It imports `Navbar` and `Footer` components and renders them around its `children` prop, providing a consistent structural wrapper for multiple pages. This component is designed to be wrapped around page content to ensure a shared UI.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Navbar from './navbar'
import Footer from './footer'

export default function Layout({ children }) {
  return (
    <>
      <Navbar />
      <main>{children}</main>
      <Footer />
    </>
  )
}
```

----------------------------------------

TITLE: Migrating Next.js Link Component Usage
DESCRIPTION: This snippet illustrates the change in the `<Link>` component's usage between Next.js 12 and 13. In Next.js 13, the `<a>` tag is automatically rendered by `<Link>`, removing the need for it as a direct child. This simplifies linking and allows props to be forwarded directly to the underlying `<a>` tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

// Next.js 12: `<a>` has to be nested otherwise it's excluded
<Link href="/about">
  <a>About</a>
</Link>

// Next.js 13: `<Link>` always renders `<a>` under the hood
<Link href="/about">
  About
</Link>
```

----------------------------------------

TITLE: Implementing Conditional Routing in Next.js Middleware (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to implement conditional routing logic within Next.js Middleware using `NextResponse.rewrite`. It checks the incoming request's pathname and, if it starts with `/about` or `/dashboard`, rewrites the URL to a different path, effectively serving different content based on the original request.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  if (request.nextUrl.pathname.startsWith('/about')) {
    return NextResponse.rewrite(new URL('/about-2', request.url))
  }

  if (request.nextUrl.pathname.startsWith('/dashboard')) {
    return NextResponse.rewrite(new URL('/dashboard/user', request.url))
  }
}
```

----------------------------------------

TITLE: Server-Side Form Validation Action (JavaScript)
DESCRIPTION: This Server Action, `signup`, validates incoming form data against the `SignupFormSchema` using Zod's `safeParse` method. If validation fails, it returns an object containing flattened field errors, preventing unnecessary calls to the authentication provider or database. This JavaScript version provides the core validation logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { SignupFormSchema } from '@/app/lib/definitions'

export async function signup(state, formData) {
  // Validate form fields
  const validatedFields = SignupFormSchema.safeParse({
    name: formData.get('name'),
    email: formData.get('email'),
    password: formData.get('password'),
  })

  // If any form fields are invalid, return early
  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Call the provider or db to create a user...
}
```

----------------------------------------

TITLE: Configuring Page Metadata in Next.js Layouts
DESCRIPTION: This snippet demonstrates how to define static page metadata, such as the title, using the `metadata` object in a Next.js root layout. This approach automatically handles advanced requirements like streaming and de-duplicating `<head>` elements, preventing manual `<head>` tag additions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Next.js',
}

export default function Layout({ children }: { children: React.ReactNode }) {
  return '...'
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Next.js',
}

export default function Layout({ children }) {
  return '...'
}
```

----------------------------------------

TITLE: Invoking Server Actions with onClick Event Handler in Next.js
DESCRIPTION: This example demonstrates how to invoke a Next.js Server Action (`incrementLike`) using an `onClick` event handler on a button. It uses React's `useState` hook to manage and display the updated like count after the server action completes. This pattern is useful for actions not directly tied to form submissions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
'use client'

import { incrementLike } from './actions'
import { useState } from 'react'

export default function LikeButton({ initialLikes }: { initialLikes: number }) {
  const [likes, setLikes] = useState(initialLikes)

  return (
    <>
      <p>Total Likes: {likes}</p>
      <button
        onClick={async () => {
          const updatedLikes = await incrementLike()
          setLikes(updatedLikes)
        }}
      >
        Like
      </button>
    </>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import { incrementLike } from './actions'
import { useState } from 'react'

export default function LikeButton({ initialLikes }) {
  const [likes, setLikes] = useState(initialLikes)

  return (
    <>
      <p>Total Likes: {likes}</p>
      <button
        onClick={async () => {
          const updatedLikes = await incrementLike()
          setLikes(updatedLikes)
        }}
      >
        Like
      </button>
    </>
  )
}
```

----------------------------------------

TITLE: Displaying Validation Errors with `useActionState` in Client Component (TypeScript)
DESCRIPTION: This Client Component demonstrates how to use React's `useActionState` hook to manage form state and display validation errors returned from a Server Action. It initializes the state, binds the `formAction` to the form, and conditionally renders error messages based on the `state` object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

const initialState = {
  message: '',
}

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="email">Email</label>
      <input type="text" id="email" name="email" required />
      {/* ... */}
      <p aria-live="polite">{state?.message}</p>
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: This snippet provides various commands to start the Next.js development server using different package managers. It allows developers to run the application locally for testing and development purposes, typically accessible at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-api/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm dev
```

LANGUAGE: bash
CODE:
```
bun dev
```

----------------------------------------

TITLE: Receiving Server Action as Prop in Client Component (TypeScript)
DESCRIPTION: This Client Component receives a Server Action as a prop named 'updateItemAction'. It then uses this action directly in a <form> element's 'action' attribute, demonstrating how forms can directly invoke Server Actions for data mutations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
'use client'

export default function ClientComponent({
  updateItemAction,
}: {
  updateItemAction: (formData: FormData) => void
}) {
  return <form action={updateItemAction}>{/* ... */}</form>
}
```

----------------------------------------

TITLE: Implementing Streaming with React Suspense in Next.js
DESCRIPTION: This example demonstrates how to use React's `Suspense` component in a Next.js application to enable streaming server rendering and selective hydration. By wrapping components that perform asynchronous actions (e.g., data fetching) with `Suspense`, a fallback UI is displayed while the data loads, allowing parts of the page to render progressively and become interactive sooner.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/06-loading-ui-and-streaming.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { Suspense } from 'react'
import { PostFeed, Weather } from './Components'

export default function Posts() {
  return (
    <section>
      <Suspense fallback={<p>Loading feed...</p>}>
        <PostFeed />
      </Suspense>
      <Suspense fallback={<p>Loading weather...</p>}>
        <Weather />
      </Suspense>
    </section>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import { Suspense } from 'react'
import { PostFeed, Weather } from './Components'

export default function Posts() {
  return (
    <section>
      <Suspense fallback={<p>Loading feed...</p>}>
        <PostFeed />
      </Suspense>
      <Suspense fallback={<p>Loading weather...</p>}>
        <Weather />
      </Suspense>
    </section>
  )
}
```

----------------------------------------

TITLE: Defining `generateMetadata` with Segment Props (TSX)
DESCRIPTION: Shows how to pass `params` and `searchParams` as props to the `generateMetadata` function, enabling dynamic metadata generation based on URL segments or query parameters. This allows for context-aware metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_70

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

type Props = {
  params: Promise<{ id: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}

export function generateMetadata({ params, searchParams }: Props): Metadata {
  return {
    title: 'Next.js',
  }
}

export default function Page({ params, searchParams }: Props) {}
```

----------------------------------------

TITLE: Configuring Metadata with Next.js Metadata API - Next.js (TypeScript)
DESCRIPTION: This snippet demonstrates configuring page metadata using Next.js's `metadata` object API. It exports a `metadata` constant from `app/layout.tsx` to define `title` and `description`, allowing Next.js to manage these tags automatically and improving SEO. Dependencies include React, Next.js, and its `Metadata` type.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'React App',
  description: 'Web site created with Next.js.',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Defining Module-Level Server Action for Client Components (TypeScript)
DESCRIPTION: This snippet defines a Server Action at the module level by placing the 'use server' directive at the top of the file. This allows all exported functions within the file to be marked as Server Actions, making them reusable in both Client and Server Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
'use server'

export async function create() {}
```

----------------------------------------

TITLE: Fetching Data in a Server Component - TypeScript
DESCRIPTION: This example shows how to perform server-side data fetching directly within an `async` Server Component. It fetches blog posts from an API and renders them, leveraging the ability of Server Components to use `async`/`await`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Implementing ISR with App Router in Next.js
DESCRIPTION: This snippet demonstrates Incremental Static Regeneration using the Next.js App Router. It defines `revalidate` to update cached pages every 60 seconds, `generateStaticParams` to pre-render known blog post IDs at build time, and `dynamicParams` to control behavior for unknown paths. The `Page` component fetches and displays individual post content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Post {
  id: string
  title: string
  content: string
}

// Next.js will invalidate the cache when a
// request comes in, at most once every 60 seconds.
export const revalidate = 60

// We'll prerender only the params from `generateStaticParams` at build time.
// If a request comes in for a path that hasn't been generated,
// Next.js will server-render the page on-demand.
export const dynamicParams = true // or false, to 404 on unknown paths

export async function generateStaticParams() {
  const posts: Post[] = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  return posts.map((post) => ({
    id: String(post.id),
  }))
}

export default async function Page({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const post: Post = await fetch(`https://api.vercel.app/blog/${id}`).then(
    (res) => res.json()
  )
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
// Next.js will invalidate the cache when a
// request comes in, at most once every 60 seconds.
export const revalidate = 60

// We'll prerender only the params from `generateStaticParams` at build time.
// If a request comes in for a path that hasn't been generated,
// Next.js will server-render the page on-demand.
export const dynamicParams = true // or false, to 404 on unknown paths

export async function generateStaticParams() {
  const posts = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  return posts.map((post) => ({
    id: String(post.id),
  }))
}

export default async function Page({ params }) {
  const { id } = await params
  const post = await fetch(`https://api.vercel.app/blog/${id}`).then(
    (res) => res.json()
  )
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Defining `generateMetadata` as an Async Function (TSX)
DESCRIPTION: Illustrates how to define the `generateMetadata` function as an asynchronous function, returning a `Promise<Metadata>`. This allows for fetching data or performing other asynchronous operations before generating metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_69

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export async function generateMetadata(): Promise<Metadata> {
  return {
    title: 'Next.js',
  }
}
```

----------------------------------------

TITLE: Invoking Server Functions via Event Handlers (TSX)
DESCRIPTION: This client component demonstrates how to call a server function (incrementLike) from an event handler (e.g., onClick). It uses React's useState hook to manage and update the UI state (likes) based on the result returned by the server function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-updating-data.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
'use client'

import { incrementLike } from './actions'
import { useState } from 'react'

export default function LikeButton({ initialLikes }: { initialLikes: number }) {
  const [likes, setLikes] = useState(initialLikes)

  return (
    <>
      <p>Total Likes: {likes}</p>
      <button
        onClick={async () => {
          const updatedLikes = await incrementLike()
          setLikes(updatedLikes)
        }}
      >
        Like
      </button>
    </>
  )
}
```

----------------------------------------

TITLE: Defining a GET Route Handler in TypeScript
DESCRIPTION: This snippet demonstrates the basic convention for defining a GET request handler in a `route.ts` file within the Next.js `app` directory. It uses the Web Request API to handle incoming requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
export async function GET(request: Request) {}
```

----------------------------------------

TITLE: Securing Next.js Server Action with Role-Based Authorization
DESCRIPTION: This snippet demonstrates how to implement an authorization check within a Next.js Server Action. It verifies the user's session and role, returning `null` early if the user is not an 'admin', thereby preventing unauthorized mutations and ensuring only privileged users can execute the action.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_40

LANGUAGE: ts
CODE:
```
'use server'
import { verifySession } from '@/app/lib/dal'

export async function serverAction(formData: FormData) {
  const session = await verifySession()
  const userRole = session?.user?.role

  // Return early if user is not authorized to perform the action
  if (userRole !== 'admin') {
    return null
  }

  // Proceed with the action for authorized users
}
```

LANGUAGE: js
CODE:
```
'use server'
import { verifySession } from '@/app/lib/dal'

export async function serverAction() {
  const session = await verifySession()
  const userRole = session.user.role

  // Return early if user is not authorized to perform the action
  if (userRole !== 'admin') {
    return null
  }

  // Proceed with the action for authorized users
}
```

----------------------------------------

TITLE: Rendering Basic Not Found UI in Next.js
DESCRIPTION: This snippet demonstrates how to create a basic 'Not Found' page in Next.js using `not-found.js` or `not-found.tsx`. It renders a simple message and a link to return home when the `notFound()` function is thrown or an unmatched URL is accessed. This component does not accept any props.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/not-found.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

export default function NotFound() {
  return (
    <div>
      <h2>Not Found</h2>
      <p>Could not find requested resource</p>
      <Link href="/">Return Home</Link>
    </div>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default function NotFound() {
  return (
    <div>
      <h2>Not Found</h2>
      <p>Could not find requested resource</p>
      <Link href="/">Return Home</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Calling revalidateTag in Next.js Server Actions
DESCRIPTION: This snippet demonstrates the usage of `revalidateTag` within a Next.js Server Action or Route Handler. After a data mutation (e.g., updating a user), calling `revalidateTag('user')` invalidates all cached entries previously tagged with 'user'. This forces Next.js to refetch or re-render components that depend on this data, ensuring users see the most up-to-date information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
import { revalidateTag } from 'next/cache'

export async function updateUser(id: string) {
  // Mutate data
  revalidateTag('user')
}
```

LANGUAGE: javascript
CODE:
```
import { revalidateTag } from 'next/cache'

export async function updateUser(id) {
  // Mutate data
  revalidateTag('user')
}
```

----------------------------------------

TITLE: Defining Inline Server Action in Server Component (TypeScript)
DESCRIPTION: This snippet demonstrates how to define an inline Server Action within a Next.js Server Component by placing the 'use server' directive inside an async function. This pattern is suitable for actions that are specific to a single component and do not need to be reused elsewhere.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default function Page() {
  // Server Action
  async function create() {
    'use server'
    // Mutate data
  }

  return '...'
}
```

----------------------------------------

TITLE: Redirecting with Modified URL Parameters using NextResponse in TypeScript
DESCRIPTION: This snippet demonstrates how to dynamically construct and modify a URL before performing a redirect with `NextResponse.redirect()`. It uses `request.nextUrl.pathname` to capture the original path and append it as a 'from' search parameter to a new login URL, useful for post-login redirection.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'

// Given an incoming request...
const loginUrl = new URL('/login', request.url)
// Add ?from=/incoming-url to the /login URL
loginUrl.searchParams.set('from', request.nextUrl.pathname)
// And redirect to the new URL
return NextResponse.redirect(loginUrl)
```

----------------------------------------

TITLE: Securing Next.js API Route with Authentication and Authorization (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to secure a Next.js API Route by implementing both authentication and authorization checks. It first verifies if a user session exists, returning a 401 if not, and then checks if the authenticated user possesses the required 'admin' role before allowing access to the route's core logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_45

LANGUAGE: ts
CODE:
```
import { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const session = await getSession(req)

  // Check if the user is authenticated
  if (!session) {
    res.status(401).json({
      error: 'User is not authenticated',
    })
    return
  }

  // Check if the user has the 'admin' role
  if (session.user.role !== 'admin') {
    res.status(401).json({
      error: 'Unauthorized access: User does not have admin privileges.',
    })
    return
  }

  // Proceed with the route for authorized users
  // ... implementation of the API Route
}
```

----------------------------------------

TITLE: Accessing Environment Variables in Route Handlers (App Router)
DESCRIPTION: This JavaScript snippet demonstrates how to access environment variables, defined in .env files, within a Route Handler in a Next.js App Router application. The variables are available via process.env for server-side operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_3

LANGUAGE: js
CODE:
```
export async function GET() {
  const db = await myDB.connect({
    host: process.env.DB_HOST,
    username: process.env.DB_USER,
    password: process.env.DB_PASS,
  })
  // ...
}
```

----------------------------------------

TITLE: Revalidating All Data - Next.js Cache - TypeScript
DESCRIPTION: This snippet demonstrates how to revalidate all cached data by calling `revalidatePath` with the root path ('/') and the 'layout' type. This action purges the Client-side Router Cache and revalidates the Data Cache for the entire application on the next page visit.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
import { revalidatePath } from 'next/cache'

revalidatePath('/', 'layout')
```

----------------------------------------

TITLE: Defining Initial Next.js Root Layout (Empty Body)
DESCRIPTION: This snippet defines the basic structure of a Next.js root layout component, accepting `children` as a prop. It serves as the initial placeholder before populating with HTML content, demonstrating the required function signature for a root layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return '...'
}
```

LANGUAGE: jsx
CODE:
```
export default function RootLayout({ children }) {
  return '...'
}
```

----------------------------------------

TITLE: Statically Rendering All Paths at Build Time in Next.js
DESCRIPTION: This snippet demonstrates how to use `generateStaticParams` to fetch data from an external API and generate all possible dynamic paths at build time. By mapping the fetched posts to an array of `slug` objects, Next.js ensures that every blog post page is pre-rendered, optimizing for performance and SEO.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}
```

LANGUAGE: JavaScript
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}
```

----------------------------------------

TITLE: Importing Client Components with next/dynamic in Next.js
DESCRIPTION: This snippet demonstrates how to use `next/dynamic` to lazy load Client Components in a Next.js application. It shows three patterns: immediate loading into a separate bundle, conditional loading based on a state variable, and client-side only loading by setting `ssr: false`. It requires `useState` from React for conditional rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
'use client'

import { useState } from 'react'
import dynamic from 'next/dynamic'

// Client Components:
const ComponentA = dynamic(() => import('../components/A'))
const ComponentB = dynamic(() => import('../components/B'))
const ComponentC = dynamic(() => import('../components/C'), { ssr: false })

export default function ClientComponentExample() {
  const [showMore, setShowMore] = useState(false)

  return (
    <div>
      {/* Load immediately, but in a separate client bundle */}
      <ComponentA />

      {/* Load on demand, only when/if the condition is met */}
      {showMore && <ComponentB />}
      <button onClick={() => setShowMore(!showMore)}>Toggle</button>

      {/* Load only on the client side */}
      <ComponentC />
    </div>
  )
}
```

----------------------------------------

TITLE: Configuring metadataBase for URL Resolution in Next.js (JSX)
DESCRIPTION: This snippet shows how to set `metadataBase` in Next.js, which provides a base URL prefix for metadata fields requiring fully qualified URLs. It also demonstrates how `alternates` (canonical and languages) and `openGraph` images can use relative paths that are resolved against `metadataBase`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_19

LANGUAGE: jsx
CODE:
```
export const metadata = {
  metadataBase: new URL('https://acme.com'),
  alternates: {
    canonical: '/',
    languages: {
      'en-US': '/en-US',
      'de-DE': '/de-DE',
    },
  },
  openGraph: {
    images: '/og-image.png',
  },
}
```

----------------------------------------

TITLE: Implementing Error Boundary with Logging in Next.js (TSX)
DESCRIPTION: This Client Component defines an error boundary for Next.js applications, catching runtime errors and displaying a fallback UI. It uses `useEffect` to log the error to a reporting service and provides a 'Try again' button that utilizes the `reset` function to attempt re-rendering the affected segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/error.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client' // Error boundaries must be Client Components

import { useEffect } from 'react'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}
```

----------------------------------------

TITLE: Reading Streamed Data with React `use` Hook in Client Component
DESCRIPTION: This Client Component uses React's `use` hook to read a promise passed as a prop from a Server Component. It resolves the promise to access the `posts` data, which is then mapped to render a list of post titles. This pattern facilitates streaming data from server to client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-fetching-data.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
'use client'
import { use } from 'react'

export default function Posts({
  posts,
}: {
  posts: Promise<{ id: string; title: string }[]>
}) {
  const allPosts = use(posts)

  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'
import { use } from 'react'

export default function Posts({ posts }) {
  const posts = use(posts)

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Correctly Calling `cookies()` in Next.js Page Component
DESCRIPTION: This snippet demonstrates the correct way to call the `cookies()` function within a Next.js Page component. It highlights that `cookies()` must be accessed inside the `Page` function, which executes within the request scope, to prevent errors related to dynamic API calls made outside of a valid request context.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-dynamic-api-wrong-context.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  return ...
}
```

----------------------------------------

TITLE: Inheriting Nested Metadata in Next.js Page (JSX)
DESCRIPTION: This snippet in `app/about/page.js` demonstrates metadata inheritance. While the `title` is explicitly set and overwrites the parent, the `openGraph` fields are fully inherited from `app/layout.js` because `app/about/page.js` does not define its own `openGraph` object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_87

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'About',
}

// Output:
// <title>About</title>
// <meta property="og:title" content="Acme" />
// <meta property="og:description" content="Acme is a..." />
```

----------------------------------------

TITLE: Signup Form with Client-Side Error Display (TSX)
DESCRIPTION: This React component, `SignupForm`, uses the `useActionState` hook to manage form submission and display server-side validation errors. It binds the form's `action` to the `signup` Server Action and conditionally renders error messages for name, email, and password fields based on the `state` returned by the action. The submit button is disabled while the form is `pending`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_6

LANGUAGE: TSX
CODE:
```
'use client'

import { signup } from '@/app/actions/auth'
import { useActionState } from 'react'

export default function SignupForm() {
  const [state, action, pending] = useActionState(signup, undefined)

  return (
    <form action={action}>
      <div>
        <label htmlFor="name">Name</label>
        <input id="name" name="name" placeholder="Name" />
      </div>
      {state?.errors?.name && <p>{state.errors.name}</p>}

      <div>
        <label htmlFor="email">Email</label>
        <input id="email" name="email" placeholder="Email" />
      </div>
      {state?.errors?.email && <p>{state.errors.email}</p>}

      <div>
        <label htmlFor="password">Password</label>
        <input id="password" name="password" type="password" />
      </div>
      {state?.errors?.password && (
        <div>
          <p>Password must:</p>
          <ul>
            {state.errors.password.map((error) => (
              <li key={error}>- {error}</li>
            ))}
          </ul>
        </div>
      )}
      <button disabled={pending} type="submit">
        Sign Up
      </button>
    </form>
  )
}
```

----------------------------------------

TITLE: Reading URL Query Parameters with useSearchParams
DESCRIPTION: This Client Component demonstrates how to use the `useSearchParams` hook from `next/navigation` to read a specific query parameter ('search') from the current URL. It imports the hook and then uses `searchParams.get('search')` to retrieve the value, displaying it in the UI. This hook is only supported in Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n\n  const search = searchParams.get('search')\n\n  // URL -> `/dashboard?search=my-project`\n  // `search` -> 'my-project'\n  return <>Search: {search}</>\n}
```

LANGUAGE: jsx
CODE:
```
'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n\n  const search = searchParams.get('search')\n\n  // URL -> `/dashboard?search=my-project`\n  // `search` -> 'my-project'\n  return <>Search: {search}</>\n}
```

----------------------------------------

TITLE: Creating Database Sessions with Next.js App Router (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a new session in a database and store its encrypted ID in a cookie using the Next.js App Router. It involves inserting session data into the database, encrypting the session ID, and setting an httpOnly cookie for secure storage and optimistic authentication checks. Requires `next/headers`, a database client (`@/app/lib/db`), and an encryption utility (`@/app/lib/session`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_27

LANGUAGE: TypeScript
CODE:
```
import cookies from 'next/headers'
import { db } from '@/app/lib/db'
import { encrypt } from '@/app/lib/session'

export async function createSession(id: number) {
  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)

  // 1. Create a session in the database
  const data = await db
    .insert(sessions)
    .values({
      userId: id,
      expiresAt,
    })
    // Return the session ID
    .returning({ id: sessions.id })

  const sessionId = data[0].id

  // 2. Encrypt the session ID
  const session = await encrypt({ sessionId, expiresAt })

  // 3. Store the session in cookies for optimistic auth checks
  const cookieStore = await cookies()
  cookieStore.set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expiresAt,
    sameSite: 'lax',
    path: '/',
  })
}
```

----------------------------------------

TITLE: Creating a Gracefully Degrading Error Boundary in Next.js with JavaScript
DESCRIPTION: This JavaScript snippet provides the equivalent implementation of `GracefullyDegradingErrorBoundary` for Next.js. It's a Client Component designed to capture the current HTML before a client-side rendering error. Upon error, it re-renders the preserved HTML using `dangerouslySetInnerHTML` and displays a persistent error message, ensuring a graceful degradation of the user interface.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/error.mdx#_snippet_7

LANGUAGE: JavaScript
CODE:
```
'use client'

import React, { Component, createRef } from 'react'

class GracefullyDegradingErrorBoundary extends Component {
  constructor(props) {
    super(props)
    this.state = { hasError: false }
    this.contentRef = createRef()
  }

  static getDerivedStateFromError(_) {
    return { hasError: true }
  }

  componentDidCatch(error, errorInfo) {
    if (this.props.onError) {
      this.props.onError(error, errorInfo)
    }
  }

  render() {
    if (this.state.hasError) {
      // Render the current HTML content without hydration
      return (
        <>
          <div
            ref={this.contentRef}
            suppressHydrationWarning
            dangerouslySetInnerHTML={{
              __html: this.contentRef.current?.innerHTML || '',
            }}
          />
          <div className="fixed bottom-0 left-0 right-0 bg-red-600 text-white py-4 px-6 text-center">
            <p className="font-semibold">
              An error occurred during page rendering
            </p>
          </div>
        </>
      )
    }

    return <div ref={this.contentRef}>{this.props.children}</div>
  }
}

export default GracefullyDegradingErrorBoundary
```

----------------------------------------

TITLE: Defining a Client Component for UI Slot (Modal) in Next.js
DESCRIPTION: This Client Component, marked with 'use client', defines a generic Modal that accepts children as a prop. This pattern creates a "slot" where server-rendered UI can be visually nested within a client-side component, allowing the client component to manage interactivity while displaying server-fetched content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-server-and-client-components.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
'use client'

export default function Modal({ children }: { children: React.ReactNode }) {
  return <div>{children}</div>
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

export default function Modal({ children }) {
  return <div>{children}</div>
}
```

----------------------------------------

TITLE: Creating Home Page for Next.js App Router (TypeScript)
DESCRIPTION: This TypeScript React component defines the home page for the Next.js App Router, rendered when a user visits the root URL (`/`). It serves as the entry point for the application's main content, demonstrating a simple 'Hello, Next.js!' heading.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Running Next.js in Development Mode (Bash)
DESCRIPTION: These commands are used to install project dependencies and start the Next.js application in development mode. `npm install` or `yarn install` fetches required packages, while `npm run dev` or `yarn dev` compiles the application and launches it, typically on `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev

# or

yarn install
yarn dev
```

----------------------------------------

TITLE: Synchronous Token Retrieval Utility (Before Next.js 15)
DESCRIPTION: This snippet shows a synchronous `getToken` utility function that directly calls `cookies().get('token')`. In Next.js 15, `cookies()` returns a Promise, causing an error if not awaited, especially when `dynamicIO` is enabled.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
// This function is sync and the codemod won't make it async
// because it doesn't know about every callsite that uses it.
export function getToken() {
  // @next-codemod-error ...
  return cookies().get('token')
}
```

----------------------------------------

TITLE: Configuring Next.js for Standalone Docker Output
DESCRIPTION: This JavaScript configuration snippet for `next.config.js` sets the `output` property to 'standalone'. This optimizes the Next.js build process to produce a self-contained application, making it suitable for deployment within a Docker image without requiring `node_modules`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker/README.md#_snippet_5

LANGUAGE: js
CODE:
```
// next.config.js\nmodule.exports = {\n  // ... rest of the configuration.\n  output: "standalone"\n};
```

----------------------------------------

TITLE: Time-based Revalidation for Blog Posts in Next.js App Router (JavaScript)
DESCRIPTION: This snippet demonstrates how to implement time-based revalidation for a Next.js page in the App Router using JavaScript. By setting `export const revalidate = 3600`, the page's cache will be invalidated and regenerated in the background every hour on the next visit, ensuring updated blog posts are displayed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
export const revalidate = 3600 // invalidate every hour

export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <main>
      <h1>Blog Posts</h1>
      <ul>
        {posts.map((post) => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </main>
  )
}
```

----------------------------------------

TITLE: Signaling Dynamic Rendering with DynamicMarker (After)
DESCRIPTION: This snippet shows the recommended approach to handle dynamic metadata. It introduces a `DynamicMarker` component that uses `await connection()` to explicitly signal Next.js that the page requires dynamic rendering, while allowing the main `Page` component's static content to be prerendered. The `generateMetadata` still accesses cookies but the dynamic signal is separated.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-metadata.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { Suspense } from 'react'
import { cookies } from 'next/headers'
import { connection } from 'next/server'

export async function generateMetadata() {
  const token = (await cookies()).get('token')
  const response = await fetch(..., { headers: { Authorization: token } })
  return {
    title: getTitle(response),
  }
}

async function DynamicMarker() {
  // This component renders nothing, but it will always
  // be dynamic because it waits for an actual connection.
  const Connection = async () => {
    await connection()
    return null
  }
  return (
    <Suspense>
      <Connection />
    </Suspense>
  )
}

export default function Page() {
  return (
    <>
      <article>This article is completely static</article>
      {/* Rendering this DynamicMarker component tells Next.js that
          this Page has some dynamic content. */}
      <DynamicMarker />
    </>
  )
}
```

----------------------------------------

TITLE: Loading Scripts Before Interaction (App Router) - JavaScript
DESCRIPTION: This snippet demonstrates loading a script using the `beforeInteractive` strategy within the Next.js App Router. Scripts with this strategy are injected into the initial HTML from the server, downloaded before any Next.js module, and executed in the order they are placed. They are typically placed in `app/layout.js` for critical site-wide scripts like bot detectors or cookie consent managers, and their execution does not block page hydration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import Script from 'next/script'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        {children}
        <Script
          src="https://example.com/script.js"
          strategy="beforeInteractive"
        />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Reading Runtime Environment Variables in Next.js App Router (JavaScript)
DESCRIPTION: This snippet illustrates how to safely access environment variables on the server during dynamic rendering within the Next.js App Router. Utilizing `connection()` or other Dynamic APIs (e.g., `cookies`, `headers`) forces dynamic rendering, ensuring that `process.env.MY_VALUE` is evaluated at runtime. This approach supports promoting a single Docker image across various environments with distinct variable configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { connection } from 'next/server'

export default async function Component() {
  await connection()
  // cookies, headers, and other Dynamic APIs
  // will also opt into dynamic rendering, meaning
  // this env variable is evaluated at runtime
  const value = process.env.MY_VALUE
  // ...
}
```

----------------------------------------

TITLE: Invoking Next.js CLI via npx (Bash)
DESCRIPTION: This command demonstrates the basic syntax for executing Next.js CLI commands using `npx`. `npx` allows running Node.js package executables without explicitly installing them globally. Users replace `[command]` with a specific Next.js operation (e.g., `dev`, `build`) and `[options]` with any relevant flags for that command.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/06-cli/next.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx next [command] [options]
```

----------------------------------------

TITLE: Basic Usage of Next.js Image Component
DESCRIPTION: This snippet demonstrates the basic import and usage of the Next.js `<Image>` component. It shows how to import `Image` from `next/image` and render it within a React component, requiring `src` and `alt` properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return <Image src="" alt="" />
}
```

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return <Image src="" alt="" />
}
```

----------------------------------------

TITLE: Tagging Fetched Data for On-demand Revalidation in Next.js App Router
DESCRIPTION: Demonstrates how to tag data fetched using the native `fetch` API in a Next.js App Router component. The `next: { tags: ['posts'] }` option associates a cache tag with the fetched data, enabling targeted revalidation later using `revalidateTag`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog', {
    next: { tags: ['posts'] },
  })
  const posts = await data.json()
  // ...
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog', {
    next: { tags: ['posts'] },
  })
  const posts = await data.json()
  // ...
}
```

----------------------------------------

TITLE: Setting CORS Headers for GET Requests in Next.js Route Handler (TypeScript)
DESCRIPTION: This snippet demonstrates how to configure Cross-Origin Resource Sharing (CORS) headers for a GET request in a Next.js Route Handler. It uses the standard Web API `Response` object to set `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, and `Access-Control-Allow-Headers` to enable cross-origin requests. This allows clients from any origin to make GET, POST, PUT, DELETE, and OPTIONS requests with specified headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_18

LANGUAGE: ts
CODE:
```
export async function GET(request: Request) {
  return new Response('Hello, Next.js!', {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  })
}
```

----------------------------------------

TITLE: Handling Pending State with useActionState in JavaScript
DESCRIPTION: This snippet demonstrates how to use the `useActionState` hook to manage the pending state of a form submission. It disables the submit button while the `createUser` action is being executed, providing visual feedback to the user.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_10

LANGUAGE: JavaScript
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      {/* Other form elements */}
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Defining a Dynamic Route Segment in Next.js (JavaScript)
DESCRIPTION: This JavaScript example demonstrates how to define a dynamic route segment using `[slug]` in the file path (e.g., `app/blog/[slug]/page.js`). The `params` prop is destructured to asynchronously access the dynamic `slug` value, enabling the page to render content based on the URL segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/dynamic-routes.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
export default async function Page({ params }) {
  const { slug } = await params
  return <div>My Post: {slug}</div>
}
```

----------------------------------------

TITLE: Configuring Next.js Development Scripts in package.json
DESCRIPTION: This JSON snippet defines standard scripts within the `package.json` file, crucial for managing a Next.js project. It includes `dev` for starting the development server, `build` for creating a production-ready application, `start` for running the production server, and `lint` for executing ESLint checks.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  }
}
```

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: These commands initiate the development server for a Next.js application using various popular package managers. Running any of these commands will start the server, typically accessible at `http://localhost:3000`, enabling live page updates during development.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Initializing Next.js Project with an Example (CLI)
DESCRIPTION: This snippet demonstrates how to initialize a Next.js project using a specific example from the official Next.js examples collection. The `--example` flag allows users to bootstrap their application with pre-configured setups, such as `route-handlers`, accelerating development by providing a functional starting point.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npx create-next-app --example route-handlers
```

----------------------------------------

TITLE: Installing Project Dependencies using Yarn
DESCRIPTION: This command installs all required project dependencies listed in `package.json` using Yarn. It serves the same purpose as `npm install`, ensuring that all libraries and frameworks, including Knex, are properly installed and ready for the application's execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
yarn
```

----------------------------------------

TITLE: Using Next.js Image Component in app/page.js (JSX)
DESCRIPTION: This snippet demonstrates the basic usage of the `next/image` component in a Next.js application. It imports the `Image` component and renders an image with specified source, width, height, and alt text, enabling automatic image optimization features provided by Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="/profile.png"
      width={500}
      height={500}
      alt="Picture of the author"
    />
  )
}
```

----------------------------------------

TITLE: Implementing Streaming with Vercel AI SDK in Next.js
DESCRIPTION: This code demonstrates how to create a streaming text response from a Large Language Model (LLM) using the Vercel AI SDK in a Next.js Route Handler. It takes messages from the request body, streams a response from an OpenAI model, and returns it as a `StreamingTextResponse`. Dependencies include `@ai-sdk/openai` and `ai`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_14

LANGUAGE: TypeScript
CODE:
```
import { openai } from '@ai-sdk/openai'
import { StreamingTextResponse, streamText } from 'ai'

export async function POST(req: Request) {
  const { messages } = await req.json()
  const result = await streamText({
    model: openai('gpt-4-turbo'),
    messages,
  })

  return new StreamingTextResponse(result.toAIStream())
}
```

LANGUAGE: JavaScript
CODE:
```
import { openai } from '@ai-sdk/openai'
import { StreamingTextResponse, streamText } from 'ai'

export async function POST(req) {
  const { messages } = await req.json()
  const result = await streamText({
    model: openai('gpt-4-turbo'),
    messages,
  })

  return new StreamingTextResponse(result.toAIStream())
}
```

----------------------------------------

TITLE: Configuring Open Graph Metadata with Media in Next.js (JSX)
DESCRIPTION: This snippet demonstrates how to configure comprehensive Open Graph metadata for a Next.js application, including title, description, URL, site name, images (with dimensions and alt text), videos, audio, locale, and type. It's defined within the `metadata` export in `layout.js` or `page.js`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_23

LANGUAGE: jsx
CODE:
```
export const metadata = {
  openGraph: {
    title: 'Next.js',
    description: 'The React Framework for the Web',
    url: 'https://nextjs.org',
    siteName: 'Next.js',
    images: [
      {
        url: 'https://nextjs.org/og.png', // Must be an absolute URL
        width: 800,
        height: 600,
      },
      {
        url: 'https://nextjs.org/og-alt.png', // Must be an absolute URL
        width: 1800,
        height: 1600,
        alt: 'My custom alt',
      },
    ],
    videos: [
      {
        url: 'https://nextjs.org/video.mp4', // Must be an absolute URL
        width: 800,
        height: 600,
      },
    ],
    audio: [
      {
        url: 'https://nextjs.org/audio.mp3', // Must be an absolute URL
      },
    ],
    locale: 'en_US',
    type: 'website',
  },
}
```

----------------------------------------

TITLE: Defining Module-Level Server Action for Client Components (JavaScript)
DESCRIPTION: This snippet defines a Server Action at the module level by placing the 'use server' directive at the top of the file. This allows all exported functions within the file to be marked as Server Actions, making them reusable in both Client and Server Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
'use server'

export async function create() {}
```

----------------------------------------

TITLE: Defining Server Functions in a Separate File
DESCRIPTION: This snippet demonstrates how to define Server Functions in a dedicated file (e.g., `app/lib/actions.ts` or `.js`) by placing the `'use server'` directive at the top of each asynchronous function. These functions, `createPost` and `deletePost`, are intended for updating data and revalidating the cache on the server.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-updating-data.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export async function createPost(formData: FormData) {
  'use server'
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}

export async function deletePost(formData: FormData) {
  'use server'
  const id = formData.get('id')

  // Update data
  // Revalidate cache
}
```

LANGUAGE: JavaScript
CODE:
```
export async function createPost(formData) {
  'use server'
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}

export async function deletePost(formData) {
  'use server'
  const id = formData.get('id')

  // Update data
  // Revalidate cache
}
```

----------------------------------------

TITLE: Handling Authentication in Middleware (Recommended) - TypeScript
DESCRIPTION: This snippet illustrates the *new*, recommended way to handle authentication in Next.js Middleware. Instead of returning a direct response, it redirects unauthorized users to a `/login` page, preserving the original path in a search parameter. This aligns with the updated Middleware behavior in Next.js v12.2+.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/returning-response-body-in-middleware.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { isAuthValid } from './lib/auth'

export function middleware(request: NextRequest) {
  // Example function to validate auth
  if (isAuthValid(request)) {
    return NextResponse.next()
  }

  request.nextUrl.searchParams.set('from', request.nextUrl.pathname)
  request.nextUrl.pathname = '/login'

  return NextResponse.redirect(request.nextUrl)
}
```

----------------------------------------

TITLE: Authorizing Server Actions with `forbidden` for Data Mutations
DESCRIPTION: This example demonstrates how to use `forbidden` within a Next.js Server Action (`app/actions/update-role.ts` or `app/actions/update-role.js`) to enforce role-based authorization for sensitive data mutations. Only users with the 'admin' role are permitted to proceed with the `updateRole` operation; otherwise, `forbidden()` is invoked.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateRole(formData: FormData) {
  const session = await verifySession()

  // Ensure only admins can update roles
  if (session.role !== 'admin') {
    forbidden()
  }

  // Perform the role update for authorized users
  // ...
}
```

LANGUAGE: JavaScript
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateRole(formData) {
  const session = await verifySession()

  // Ensure only admins can update roles
  if (session.role !== 'admin') {
    forbidden()
  }

  // Perform the role update for authorized users
  // ...
}
```

----------------------------------------

TITLE: Defining a Basic Next.js Page Component
DESCRIPTION: This snippet demonstrates how to define a basic `page` component in Next.js, which is the entry point for a route's UI. It shows the default export of a React component that receives `params` and `searchParams` as props, allowing access to dynamic route segments and URL query parameters. Pages are Server Components by default.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Page({
  params,
  searchParams,
}: {
  params: Promise<{ slug: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  return <h1>My Page</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page({ params, searchParams }) {
  return <h1>My Page</h1>
}
```

----------------------------------------

TITLE: Inlining Server Functions in Server Components
DESCRIPTION: This example shows how to define a Server Function directly within a Next.js Server Component (e.g., `app/page.tsx` or `.js`). The `'use server'` directive is placed inside the `createPost` asynchronous function, making it an inlined Server Action that can be invoked from the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-updating-data.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export default function Page() {
  // Server Action
  async function createPost(formData: FormData) {
    'use server'
    // ...
  }

  return <></>
}
```

LANGUAGE: JavaScript
CODE:
```
export default function Page() {
  // Server Action
  async function createPost(formData) {
    'use server'
    // ...
  }

  return <></>
}
```

----------------------------------------

TITLE: Revalidating Cache Tag in Server Actions (Next.js)
DESCRIPTION: This snippet demonstrates how to invalidate cached data associated with a specific tag (`posts`) within a Next.js Server Action using the `revalidateTag` API. This is useful for fine-grained cache control, allowing specific data fetches to be revalidated without affecting the entire path. It's commonly used after operations that modify data tagged for caching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_13

LANGUAGE: ts
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export async function createPost() {
  try {
    // ...
  } catch (error) {
    // ...
  }

  revalidateTag('posts')
}
```

LANGUAGE: js
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export async function createPost() {
  try {
    // ...
  } catch (error) {
    // ...
  }

  revalidateTag('posts')
}
```

----------------------------------------

TITLE: Programmatic Navigation with useRouter (TSX)
DESCRIPTION: Demonstrates how to use the `useRouter` hook from `next/navigation` in a Client Component written in TypeScript/TSX to programmatically navigate to a different route (`/dashboard`) when a button is clicked using the `router.push()` method. Requires the `'use client'` directive.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-router.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/dashboard')}>
      Dashboard
    </button>
  )
}
```

----------------------------------------

TITLE: Dynamic Redirects using Edge Config in Next.js Middleware
DESCRIPTION: This middleware snippet shows how to implement dynamic redirects by fetching redirect rules from a data store like Vercel's Edge Config. It retrieves redirect data based on the incoming request's pathname and performs a redirect with the appropriate status code (307 or 308) if a match is found.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/redirecting.mdx#_snippet_10

LANGUAGE: typescript
CODE:
```
import { NextResponse, NextRequest } from 'next/server'
import { get } from '@vercel/edge-config'

type RedirectEntry = {
  destination: string
  permanent: boolean
}

export async function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname
  const redirectData = await get(pathname)

  if (redirectData && typeof redirectData === 'string') {
    const redirectEntry: RedirectEntry = JSON.parse(redirectData)
    const statusCode = redirectEntry.permanent ? 308 : 307
    return NextResponse.redirect(redirectEntry.destination, statusCode)
  }

  // No redirect found, continue without redirecting
  return NextResponse.next()
}
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'
import { get } from '@vercel/edge-config'

export async function middleware(request) {
  const pathname = request.nextUrl.pathname
  const redirectData = await get(pathname)

  if (redirectData) {
    const redirectEntry = JSON.parse(redirectData)
    const statusCode = redirectEntry.permanent ? 308 : 307
    return NextResponse.redirect(redirectEntry.destination, statusCode)
  }

  // No redirect found, continue without redirecting
  return NextResponse.next()
}
```

----------------------------------------

TITLE: Defining a Root Layout in Next.js
DESCRIPTION: This snippet illustrates how to define a root layout in a Next.js application. Layouts share UI across multiple pages, preserve state, and do not rerender on navigation. The component accepts a `children` prop, which represents the page or nested layout to be rendered within it, and must include <html> and <body> tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        {/* Layout UI */}
        {/* Place children where you want to render a page or nested layout */}
        <main>{children}</main>
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default function DashboardLayout({ children }) {
  return (
    <html lang="en">
      <body>
        {/* Layout UI */}
        {/* Place children where you want to render a page or nested layout */}
        <main>{children}</main>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Demonstrating Correct Async Context Usage with Next.js Cookies (JSX)
DESCRIPTION: This snippet shows the correct approach to using `cookies()` from `next/headers` when dealing with asynchronous operations like `setTimeout`. By calling `cookies().getAll()` *before* the `setTimeout` and passing the retrieved `cookieData` into the promise, the dynamic function is invoked within its proper async context, preventing a `DynamicServerError`. This ensures the page can be statically generated or dynamically rendered as intended.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/dynamic-server-error.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
import { cookies } from 'next/headers'

async function getCookieData() {
  const cookieData = cookies().getAll()
  return new Promise((resolve) =>
    setTimeout(() => {
      resolve(cookieData)
    }, 1000)
  )
}

export default async function Page() {
  const cookieData = await getCookieData()
  return <div>Hello World</div>
}
```

----------------------------------------

TITLE: Implementing Two-Tier Authorization in Next.js Route Handler
DESCRIPTION: This snippet illustrates a Route Handler with a two-tier security check. It first verifies the user's session for authentication and then checks if the authenticated user possesses the 'admin' role for authorization, returning appropriate HTTP status codes (401 or 403) for unauthorized access.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_41

LANGUAGE: ts
CODE:
```
import { verifySession } from '@/app/lib/dal'

export async function GET() {
  // User authentication and role verification
  const session = await verifySession()

  // Check if the user is authenticated
  if (!session) {
    // User is not authenticated
    return new Response(null, { status: 401 })
  }

  // Check if the user has the 'admin' role
  if (session.user.role !== 'admin') {
    // User is authenticated but does not have the right permissions
    return new Response(null, { status: 403 })
  }

  // Continue for authorized users
}
```

LANGUAGE: js
CODE:
```
import { verifySession } from '@/app/lib/dal'

export async function GET() {
  // User authentication and role verification
  const session = await verifySession()

  // Check if the user is authenticated
  if (!session) {
    // User is not authenticated
    return new Response(null, { status: 401 })
  }

  // Check if the user has the 'admin' role
  if (session.user.role !== 'admin') {
    // User is authenticated but does not have the right permissions
    return new Response(null, { status: 403 })
  }

  // Continue for authorized users
}
```

----------------------------------------

TITLE: Implementing Optimistic Updates with useOptimistic in JavaScript
DESCRIPTION: This example shows how to use the `useOptimistic` hook to immediately update the UI with a new message before the server action (`send`) completes. This provides a more responsive user experience by assuming the action will succeed and updating the UI instantly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_16

LANGUAGE: JavaScript
CODE:
```
'use client'

import { useOptimistic } from 'react'
import { send } from './actions'

export function Thread({ messages }) {
  const [optimisticMessages, addOptimisticMessage] = useOptimistic(
    messages,
    (state, newMessage) => [...state, { message: newMessage }]
  )

  const formAction = async (formData) => {
    const message = formData.get('message')
    addOptimisticMessage(message)
    await send(message)
  }

  return (
    <div>
      {optimisticMessages.map((m) => (
        <div>{m.message}</div>
      ))}
      <form action={formAction}>
        <input type="text" name="message" />
        <button type="submit">Send</button>
      </form>
    </div>
  )
}
```

----------------------------------------

TITLE: Submitting Forms with Next.js Server Actions (Client Component)
DESCRIPTION: This snippet demonstrates how to create a form in a Next.js client component that triggers a server action upon submission. It uses the `action` prop of the `next/form` component to invoke the `createPost` server action, enabling server-side data mutations directly from the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
import Form from 'next/form'
import { createPost } from '@/posts/actions'

export default function Page() {
  return (
    <Form action={createPost}>
      <input name="title" />
      {/* ... */}
      <button type="submit">Create Post</button>
    </Form>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Form from 'next/form'
import { createPost } from '@/posts/actions'

export default function Page() {
  return (
    <Form action={createPost}>
      <input name="title" />
      {/* ... */}
      <button type="submit">Create Post</button>
    </Form>
  )
}
```

----------------------------------------

TITLE: Defining Root Layout with Children Prop (JavaScript)
DESCRIPTION: This snippet defines the default root layout for a Next.js application using JavaScript. It accepts a `children` prop, which will be populated with nested layouts or pages, and renders the basic HTML structure including `<html>` and `<body>` tags. This layout applies to all routes within the `app` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
export default function RootLayout({
  // Layouts must accept a children prop.
  // This will be populated with nested layouts or pages
  children,
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Defining a GET Route Handler in JavaScript
DESCRIPTION: This snippet demonstrates the basic convention for defining a GET request handler in a `route.js` file within the Next.js `app` directory. It uses the Web Request API to handle incoming requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
export async function GET(request) {}
```

----------------------------------------

TITLE: On-demand Revalidation with `revalidatePath` in Next.js Server Actions (TypeScript)
DESCRIPTION: This Server Action demonstrates on-demand cache invalidation using `revalidatePath` in Next.js. When `createPost` is called (e.g., after adding a new post), `revalidatePath('/posts')` clears the cache for the `/posts` route, prompting the Server Component to fetch fresh data on the next request.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'

export async function createPost() {
  // Invalidate the /posts route in the cache
  revalidatePath('/posts')
}
```

----------------------------------------

TITLE: Implementing Next.js Middleware with Redirect (TypeScript)
DESCRIPTION: This TypeScript middleware function redirects incoming requests to '/home'. It utilizes `NextResponse.redirect` and `NextRequest` from `next/server` to perform the redirection. The `config.matcher` property ensures this middleware only applies to paths that start with '/about/', providing targeted control over its execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request: NextRequest) {
  return NextResponse.redirect(new URL('/home', request.url))
}

// See "Matching Paths" below to learn more
export const config = {
  matcher: '/about/:path*',
}
```

----------------------------------------

TITLE: Displaying Validation Errors with `useActionState` in Client Component (JavaScript)
DESCRIPTION: This Client Component demonstrates how to use React's `useActionState` hook to manage form state and display validation errors returned from a Server Action. It initializes the state, binds the `formAction` to the form, and conditionally renders error messages based on the `state` object. This is the JavaScript equivalent.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_8

LANGUAGE: JavaScript
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

const initialState = {
  message: '',
}

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="email">Email</label>
      <input type="text" id="email" name="email" required />
      {/* ... */}
      <p aria-live="polite">{state?.message}</p>
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Navigating with Link Component in Next.js (TSX/JSX)
DESCRIPTION: This snippet demonstrates the basic usage of the `Link` component from `next/link` for client-side navigation in Next.js. It renders an anchor tag that, when clicked, navigates to the `/dashboard` route. This is the primary and recommended way for declarative navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

----------------------------------------

TITLE: Upgrading Next.js Dependencies to Version 14 (Bash)
DESCRIPTION: Provides commands to upgrade Next.js, React, React DOM, and `eslint-config-next` to their version 14 compatible releases. These commands should be run in your project's terminal using your preferred package manager (npm, yarn, pnpm, or bun). Ensure `@types/react` and `@types/react-dom` are also updated if using TypeScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-14.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm i next@next-14 react@18 react-dom@18 && npm i eslint-config-next@next-14 -D
```

LANGUAGE: bash
CODE:
```
yarn add next@next-14 react@18 react-dom@18 && yarn add eslint-config-next@next-14 -D
```

LANGUAGE: bash
CODE:
```
pnpm i next@next-14 react@18 react-dom@18 && pnpm i eslint-config-next@next-14 -D
```

LANGUAGE: bash
CODE:
```
bun add next@next-14 react@18 react-dom@18 && bun add eslint-config-next@next-14 -D
```

----------------------------------------

TITLE: Configuring Next.js Scripts in package.json (JSON)
DESCRIPTION: This JSON snippet defines the essential `scripts` for a Next.js application within its `package.json` file. It includes commands for running the development server (`dev`), building the application for production (`build`), and starting the production server (`start`). These scripts are fundamental for managing the application's lifecycle and are required for Node.js server deployments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/14-deploying.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  }
}
```

----------------------------------------

TITLE: Creating Post with Temporary Redirect in Next.js
DESCRIPTION: This snippet demonstrates how to use the `redirect` function in a Next.js Server Action to navigate the user to a new post page after a successful database operation. It also uses `revalidatePath` to update cached data, ensuring the client sees the latest content. The `redirect` function issues a temporary (307/303) redirect.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/redirecting.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id: string) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}
```

LANGUAGE: javascript
CODE:
```
'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}
```

----------------------------------------

TITLE: Setting CORS Headers for GET Requests in Next.js Route Handler (JavaScript)
DESCRIPTION: This snippet demonstrates how to configure Cross-Origin Resource Sharing (CORS) headers for a GET request in a Next.js Route Handler. It uses the standard Web API `Response` object to set `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, and `Access-Control-Allow-Headers` to enable cross-origin requests. This allows clients from any origin to make GET, POST, PUT, DELETE, and OPTIONS requests with specified headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_19

LANGUAGE: js
CODE:
```
export async function GET(request) {
  return new Response('Hello, Next.js!', {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  })
}
```

----------------------------------------

TITLE: Creating a Nested Blog Layout in Next.js
DESCRIPTION: This snippet defines a layout component for the '/blog' route, demonstrating how to nest layouts in Next.js. It accepts 'children' as a prop, which will render the content of child routes (e.g., 'app/blog/page.js' or 'app/blog/[slug]/page.js') within a <section> element, applying a consistent wrapper for the blog section.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
export default function BlogLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <section>{children}</section>
}
```

LANGUAGE: JavaScript
CODE:
```
export default function BlogLayout({ children }) {
  return <section>{children}</section>
}
```

----------------------------------------

TITLE: Applying the 'use cache' Directive in Next.js (TSX)
DESCRIPTION: This example demonstrates how to apply the `'use cache'` directive at different scopes: at the top of a file to cache all exports, at the top of a React component function, and at the top of a regular async function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
// File level
'use cache'

export default async function Page() {
  // ...
}

// Component level
export async function MyComponent() {
  'use cache'
  return <></>
}

// Function level
export async function getData() {
  'use cache'
  const data = await fetch('/api/data')
  return data
}
```

----------------------------------------

TITLE: Implementing Authentication in Next.js Server Actions (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to enforce authentication within a Server Action. It checks if a user is signed in using an `auth` utility and throws an error if no user is found, ensuring that only authorized users can perform the action.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_18

LANGUAGE: tsx
CODE:
```
'use server'

import { auth } from './lib'

export function addItem() {
  const { user } = auth()
  if (!user) {
    throw new Error('You must be signed in to perform this action')
  }

  // ...
}
```

----------------------------------------

TITLE: Creating a Server Component Page with Data Fetching (JavaScript)
DESCRIPTION: Defines a Server Component page that imports and renders a Client Component. It showcases the new data fetching API by asynchronously fetching posts directly within the Server Component and passing the data as props to the Client Component. This replaces traditional data fetching methods from the `pages` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_20

LANGUAGE: jsx
CODE:
```
// Import your Client Component
import HomePage from './home-page'

async function getPosts() {
  const res = await fetch('https://...')
  const posts = await res.json()
  return posts
}

export default async function Page() {
  // Fetch data directly in a Server Component
  const recentPosts = await getPosts()
  // Forward fetched data to your Client Component
  return <HomePage recentPosts={recentPosts} />
}
```

----------------------------------------

TITLE: Using useEffect for Client-Only Rendering in Next.js
DESCRIPTION: This snippet demonstrates how to use the `useEffect` hook to ensure certain content or logic runs only on the client-side after hydration. It prevents hydration mismatches by conditionally rendering content based on an `isClient` state, which is set to `true` inside `useEffect`, making browser APIs available without issues.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-hydration-error.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { useState, useEffect } from 'react'

export default function App() {
  const [isClient, setIsClient] = useState(false)

  useEffect(() => {
    setIsClient(true)
  }, [])

  return <h1>{isClient ? 'This is never prerendered' : 'Prerendered'}</h1>
}
```

----------------------------------------

TITLE: Starting Next.js Development Server with npm, yarn, pnpm, or bun
DESCRIPTION: This snippet provides various commands to start the Next.js development server. It allows developers to choose their preferred package manager (npm, yarn, pnpm, or bun) to run the `dev` script, which typically launches the application on `http://localhost:3000`. This is the first step to begin local development and see the application in action.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Adding Metadata to Root Layout (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to define static metadata for the root layout. The `metadata` object allows setting SEO-related properties like `title` and `description` for the entire application, which Next.js uses to manage `<head>` HTML elements.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Home',
  description: 'Welcome to Next.js',
}
```

----------------------------------------

TITLE: Revalidating Cache After Server Action (JavaScript)
DESCRIPTION: This server function demonstrates how to revalidate the Next.js cache after a data update. By calling 'revalidatePath('/posts')', it ensures that the specified path's data is refetched on subsequent requests, displaying the most up-to-date information to the user.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-updating-data.mdx#_snippet_13

LANGUAGE: js
CODE:
```
import { revalidatePath } from 'next/cache'

export async function createPost(formData) {
  'use server'
  // Update data
  // ...
  revalidatePath('/posts')
}
```

----------------------------------------

TITLE: Configuring CORS Headers in Next.js Middleware
DESCRIPTION: This snippet demonstrates how to implement Cross-Origin Resource Sharing (CORS) in Next.js Middleware. It handles both simple and preflighted (OPTIONS) requests by checking allowed origins and setting appropriate `Access-Control` headers. It requires `NextRequest` and `NextResponse` from `next/server`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_12

LANGUAGE: TypeScript
CODE:
```
import { NextRequest, NextResponse } from 'next/server'

const allowedOrigins = ['https://acme.com', 'https://my-app.org']

const corsOptions = {
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
}

export function middleware(request: NextRequest) {
  // Check the origin from the request
  const origin = request.headers.get('origin') ?? ''
  const isAllowedOrigin = allowedOrigins.includes(origin)

  // Handle preflighted requests
  const isPreflight = request.method === 'OPTIONS'

  if (isPreflight) {
    const preflightHeaders = {
      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),
      ...corsOptions,
    }
    return NextResponse.json({}, { headers: preflightHeaders })
  }

  // Handle simple requests
  const response = NextResponse.next()

  if (isAllowedOrigin) {
    response.headers.set('Access-Control-Allow-Origin', origin)
  }

  Object.entries(corsOptions).forEach(([key, value]) => {
    response.headers.set(key, value)
  })

  return response
}

export const config = {
  matcher: '/api/:path*',
}
```

LANGUAGE: JavaScript
CODE:
```
import { NextResponse } from 'next/server'

const allowedOrigins = ['https://acme.com', 'https://my-app.org']

const corsOptions = {
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
}

export function middleware(request) {
  // Check the origin from the request
  const origin = request.headers.get('origin') ?? ''
  const isAllowedOrigin = allowedOrigins.includes(origin)

  // Handle preflighted requests
  const isPreflight = request.method === 'OPTIONS'

  if (isPreflight) {
    const preflightHeaders = {
      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),
      ...corsOptions,
    }
    return NextResponse.json({}, { headers: preflightHeaders })
  }

  // Handle simple requests
  const response = NextResponse.next()

  if (isAllowedOrigin) {
    response.headers.set('Access-Control-Allow-Origin', origin)
  }

  Object.entries(corsOptions).forEach(([key, value]) => {
    response.headers.set(key, value)
  })

  return response
}

export const config = {
  matcher: '/api/:path*',
}
```

----------------------------------------

TITLE: Defining Root Layout with Navigation Blocker in Next.js (JSX)
DESCRIPTION: This snippet defines the RootLayout component in app/layout.js, which serves as the top-level layout for a Next.js application. It wraps the children prop with NavigationBlockerProvider, ensuring that navigation attempts are intercepted and handled, typically to prompt users about unsaved changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_39

LANGUAGE: JSX
CODE:
```
import { NavigationBlockerProvider } from './contexts/navigation-blocker'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <NavigationBlockerProvider>{children}</NavigationBlockerProvider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Required Root Layout Structure in Next.js
DESCRIPTION: This snippet reiterates the essential structure of the root layout in Next.js, emphasizing the requirement to define `<html>` and `<body>` tags. This global layout serves as the foundation for the entire application's UI and is crucial for proper rendering and metadata handling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html>
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: javascript
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Running Next.js in Development Mode (Bash)
DESCRIPTION: These commands install project dependencies (`npm install` or `yarn install`) and then start the Next.js development server (`npm run dev` or `yarn dev`), making the application accessible locally at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev

# or

yarn install
yarn dev
```

----------------------------------------

TITLE: Setting Request and Response Headers in Next.js Middleware (JavaScript)
DESCRIPTION: This snippet illustrates how to modify both incoming request headers and outgoing response headers within a Next.js middleware function. It shows cloning existing request headers and setting new ones via `NextResponse.next()` and directly on the `response.headers` object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_11

LANGUAGE: JavaScript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  // Clone the request headers and set a new header `x-hello-from-middleware1`
  const requestHeaders = new Headers(request.headers)
  requestHeaders.set('x-hello-from-middleware1', 'hello')

  // You can also set request headers in NextResponse.next
  const response = NextResponse.next({
    request: {
      // New request headers
      headers: requestHeaders,
    },
  })

  // Set a new response header `x-hello-from-middleware2`
  response.headers.set('x-hello-from-middleware2', 'hello')
  return response
}
```

----------------------------------------

TITLE: Updating searchParams in Next.js Client Components
DESCRIPTION: This example demonstrates how to update URL searchParams within a Next.js Client Component using both the useRouter hook and the Link component. It includes a useCallback helper, createQueryString, to safely merge new key-value pairs with existing search parameters, ensuring the URL is correctly updated upon navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
'use client'\n\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // Get a new searchParams string by merging the current\n  // searchParams with a provided key/value pair\n  const createQueryString = useCallback(\n    (name: string, value: string) => {\n      const params = new URLSearchParams(searchParams.toString())\n      params.set(name, value)\n\n      return params.toString()\n    },\n    [searchParams]\n  )\n\n  return (\n    <>\n      <p>Sort By</p>\n\n      {/* using useRouter */}\n      <button\n        onClick={() => {\n          // <pathname>?sort=asc\n          router.push(pathname + '?' + createQueryString('sort', 'asc'))\n        }}\n      >\n        ASC\n      </button>\n\n      {/* using <Link> */}\n      <Link\n        href={\n          // <pathname>?sort=desc\n          pathname + '?' + createQueryString('sort', 'desc')\n        }\n      >\n        DESC\n      </Link>\n    </>\n  )\n}
```

LANGUAGE: JavaScript
CODE:
```
'use client'\n\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // Get a new searchParams string by merging the current\n  // searchParams with a provided key/value pair\n  const createQueryString = useCallback(\n    (name, value) => {\n      const params = new URLSearchParams(searchParams)\n      params.set(name, value)\n\n      return params.toString()\n    },\n    [searchParams]\n  )\n\n  return (\n    <>\n      <p>Sort By</p>\n\n      {/* using useRouter */}\n      <button\n        onClick={() => {\n          // <pathname>?sort=asc\n          router.push(pathname + '?' + createQueryString('sort', 'asc'))\n        }}\n      >\n        ASC\n      </button>\n\n      {/* using <Link> */}\n      <Link\n        href={\n          // <pathname>?sort=desc\n          pathname + '?' + createQueryString('sort', 'desc')\n        }\n      >\n        DESC\n      </Link>\n    </>\n  )\n}
```

----------------------------------------

TITLE: Conditional Redirect with NextResponse.redirect in Next.js Middleware
DESCRIPTION: This middleware snippet demonstrates how to conditionally redirect users based on an authentication check. If the user is not authenticated, they are redirected to the `/login` page using `NextResponse.redirect`. The `config.matcher` ensures this middleware only runs for paths under `/dashboard`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/redirecting.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
import { NextResponse, NextRequest } from 'next/server'
import { authenticate } from 'auth-provider'

export function middleware(request: NextRequest) {
  const isAuthenticated = authenticate(request)

  // If the user is authenticated, continue as normal
  if (isAuthenticated) {
    return NextResponse.next()
  }

  // Redirect to login page if not authenticated
  return NextResponse.redirect(new URL('/login', request.url))
}

export const config = {
  matcher: '/dashboard/:path*',
}
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'
import { authenticate } from 'auth-provider'

export function middleware(request) {
  const isAuthenticated = authenticate(request)

  // If the user is authenticated, continue as normal
  if (isAuthenticated) {
    return NextResponse.next()
  }

  // Redirect to login page if not authenticated
  return NextResponse.redirect(new URL('/login', request.url))
}

export const config = {
  matcher: '/dashboard/:path*',
}
```

----------------------------------------

TITLE: Creating a Next.js App with npm
DESCRIPTION: This command uses `npx` to bootstrap a new Next.js application named 'with-cookies-next-app' based on the 'with-cookies-next' example. It's the standard way to initialize Next.js projects using npm, ensuring you use the latest version of `create-next-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cookies-next/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-cookies-next with-cookies-next-app
```

----------------------------------------

TITLE: Defining Root Layout with Children Prop (TypeScript)
DESCRIPTION: This snippet defines the default root layout for a Next.js application using TypeScript. It accepts a `children` prop, which will be populated with nested layouts or pages, and renders the basic HTML structure including `<html>` and `<body>` tags. This layout applies to all routes within the `app` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  // Layouts must accept a children prop.
  // This will be populated with nested layouts or pages
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Revalidating Cache After Server Action (TypeScript)
DESCRIPTION: This server function demonstrates how to revalidate the Next.js cache after a data update. By calling 'revalidatePath('/posts')', it ensures that the specified path's data is refetched on subsequent requests, displaying the most up-to-date information to the user.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-updating-data.mdx#_snippet_12

LANGUAGE: ts
CODE:
```
import { revalidatePath } from 'next/cache'

export async function createPost(formData: FormData) {
  'use server'
  // Update data
  // ...

  revalidatePath('/posts')
}
```

----------------------------------------

TITLE: Implementing Basic Search with Next.js Form Component
DESCRIPTION: This snippet demonstrates the basic usage of the Next.js `<Form>` component to handle search queries. When the form is submitted, the input value is appended to the URL as a search parameter (e.g., `/search?query=abc`), leveraging client-side navigation for a smooth user experience. This approach reduces boilerplate for URL search param updates.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Form from 'next/form'

export default function Page() {
  return (
    <Form action="/search">
      {/* On submission, the input value will be appended to
          the URL, e.g. /search?query=abc */}
      <input name="query" />
      <button type="submit">Submit</button>
    </Form>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Form from 'next/form'

export default function Search() {
  return (
    <Form action="/search">
      {/* On submission, the input value will be appended to
          the URL, e.g. /search?query=abc */}
      <input name="query" />
      <button type="submit">Submit</button>
    </Form>
  )
}
```

----------------------------------------

TITLE: Integrating Session Creation in Next.js Server Action (TypeScript)
DESCRIPTION: This TypeScript Server Action `signup` demonstrates how to integrate the `createSession` function after user authentication. It creates a user session using the `user.id` and then redirects the user to the `/profile` page using Next.js's `redirect()` API, typically after form validation and database insertion.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_20

LANGUAGE: TypeScript
CODE:
```
import { createSession } from '@/app/lib/session'

export async function signup(state: FormState, formData: FormData) {
  // Previous steps:
  // 1. Validate form fields
  // 2. Prepare data for insertion into database
  // 3. Insert the user into the database or call an Library API

  // Current steps:
  // 4. Create user session
  await createSession(user.id)
  // 5. Redirect user
  redirect('/profile')
}
```

----------------------------------------

TITLE: Copying Environment Variables File in Next.js
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`. This is a common practice in Next.js projects to set up local environment variables, ensuring that sensitive information or configuration specific to the local development environment is not committed to version control. The `.env.local` file will be ignored by Git.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-tag-manager/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Copying Environment Variable Example File (Bash)
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`. The `.env.local` file is used to store local environment variables and is typically ignored by Git to prevent sensitive information from being committed to version control.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Copying Environment Variables File (Bash)
DESCRIPTION: This command copies the example environment variables file (`.env.local.example`) to `.env.local`. The `.env.local` file is used to store sensitive configuration details like API keys and URLs, and it is typically ignored by Git to prevent accidental exposure. This step is crucial for configuring the application with service credentials.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-with-comment/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Importing Next.js Image Component - JavaScript
DESCRIPTION: This snippet imports the `Image` component from the `next/image` module, making it available for use in any Next.js page or component. It is a necessary prerequisite for leveraging Next.js's built-in image optimization features.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/mdx/app/image/page.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import Image from 'next/image'
```

----------------------------------------

TITLE: Using Wrapped Third-Party Client Component in a Server Component in Next.js
DESCRIPTION: This Server Component (Page) imports and renders the Carousel component, which is now a Client Component due to the wrapper created in the previous step. This demonstrates how to successfully integrate third-party client-only libraries into a Server Component tree by explicitly marking them as client-side.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-server-and-client-components.mdx#_snippet_10

LANGUAGE: TypeScript
CODE:
```
import Carousel from './carousel'

export default function Page() {
  return (
    <div>
      <p>View pictures</p>
      {/*  Works, since Carousel is a Client Component */}
      <Carousel />
    </div>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Carousel from './carousel'

export default function Page() {
  return (
    <div>
      <p>View pictures</p>
      {/*  Works, since Carousel is a Client Component */}
      <Carousel />
    </div>
  )
}
```

----------------------------------------

TITLE: Configuring Multiple Weights and Styles for Google Font
DESCRIPTION: This snippet demonstrates how to configure a Google Font (`Roboto`) to load multiple weights (`400`, `700`) and styles (`normal`, `italic`) using `next/font/google`. It specifies `latin` subsets and `swap` display. This allows for greater typographic flexibility by importing various font variations with a single configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#_snippet_21

LANGUAGE: jsx
CODE:
```
const roboto = Roboto({
  weight: ['400', '700'],
  style: ['normal', 'italic'],
  subsets: ['latin'],
  display: 'swap',
})
```

----------------------------------------

TITLE: Managing Cookies in Next.js Middleware (TypeScript)
DESCRIPTION: This snippet demonstrates how to read, check for existence, delete, and set cookies on both incoming `NextRequest` and outgoing `NextResponse` objects within a Next.js middleware function. It utilizes the `RequestCookies` and `ResponseCookies` APIs provided by Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_8

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // Assume a "Cookie:nextjs=fast" header to be present on the incoming request
  // Getting cookies from the request using the `RequestCookies` API
  let cookie = request.cookies.get('nextjs')
  console.log(cookie) // => { name: 'nextjs', value: 'fast', Path: '/' }
  const allCookies = request.cookies.getAll()
  console.log(allCookies) // => [{ name: 'nextjs', value: 'fast' }]

  request.cookies.has('nextjs') // => true
  request.cookies.delete('nextjs')
  request.cookies.has('nextjs') // => false

  // Setting cookies on the response using the `ResponseCookies` API
  const response = NextResponse.next()
  response.cookies.set('vercel', 'fast')
  response.cookies.set({
    name: 'vercel',
    value: 'fast',
    path: '/',
  })
  cookie = response.cookies.get('vercel')
  console.log(cookie) // => { name: 'vercel', value: 'fast', Path: '/' }
  // The outgoing response will have a `Set-Cookie:vercel=fast;path=/` header.

  return response
}
```

----------------------------------------

TITLE: Fetching Data with `fetch` API in Next.js Server Components
DESCRIPTION: This snippet demonstrates how to fetch data using the native `fetch` API within a Next.js Server Component. The component is an `async` function that awaits the `fetch` call to an external API, processes the JSON response, and renders a list of posts. This approach is suitable for server-side data fetching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-fetching-data.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Implementing Logout with Session Deletion and Redirect in Next.js (App Router)
DESCRIPTION: The `logout` asynchronous function orchestrates the user logout process. It first calls `deleteSession()` to clear the active session cookie, then redirects the user to the `/login` page using `redirect()`. This action ensures a clean session termination and guides the user to the authentication entry point.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_25

LANGUAGE: TypeScript
CODE:
```
import { cookies } from 'next/headers'
import { deleteSession } from '@/app/lib/session'

export async function logout() {
  await deleteSession()
  redirect('/login')
}
```

LANGUAGE: JavaScript
CODE:
```
import { cookies } from 'next/headers'
import { deleteSession } from '@/app/lib/session'

export async function logout() {
  await deleteSession()
  redirect('/login')
}
```

----------------------------------------

TITLE: Installing Dependencies and Running Development Server
DESCRIPTION: Installs project dependencies and starts the Next.js development server, allowing local testing of the application. This snippet provides options for npm, yarn, and pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev

# or

yarn install
yarn dev

# or

pnpm install
pnpm dev
```

----------------------------------------

TITLE: Installing Tailwind CSS Packages with npm
DESCRIPTION: This command installs Tailwind CSS, @tailwindcss/postcss, and postcss as development dependencies in your Next.js project. These packages are essential for compiling and processing Tailwind's utility classes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install -D tailwindcss @tailwindcss/postcss postcss
```

----------------------------------------

TITLE: Encrypting and Decrypting Sessions with Jose in Next.js (TypeScript)
DESCRIPTION: This snippet provides functions to encrypt and decrypt session payloads using the Jose library. It ensures server-side execution with `server-only` and uses `HS256` for signing and verification. The `encrypt` function signs a payload with a 7-day expiration, while `decrypt` verifies a session string, returning the payload or logging an error on failure. It requires `SESSION_SECRET` from environment variables and a `SessionPayload` type definition.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_16

LANGUAGE: tsx
CODE:
```
import 'server-only'
import { SignJWT, jwtVerify } from 'jose'
import { SessionPayload } from '@/app/lib/definitions'

const secretKey = process.env.SESSION_SECRET
const encodedKey = new TextEncoder().encode(secretKey)

export async function encrypt(payload: SessionPayload) {
  return new SignJWT(payload)
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setExpirationTime('7d')
    .sign(encodedKey)
}

export async function decrypt(session: string | undefined = '') {
  try {
    const { payload } = await jwtVerify(session, encodedKey, {
      algorithms: ['HS256'],
    })
    return payload
  } catch (error) {
    console.log('Failed to verify session')
  }
}
```

----------------------------------------

TITLE: Implementing Authentication Redirects with Next.js Middleware
DESCRIPTION: This middleware function handles user authentication and redirects based on session status. It defines protected and public routes, decrypts the user session from a cookie, and redirects unauthenticated users to the login page or authenticated users from public routes to the dashboard. It avoids database lookups for performance, relying solely on cookie-based session checks.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_31

LANGUAGE: TypeScript
CODE:
```
import { NextRequest, NextResponse } from 'next/server'
import { decrypt } from '@/app/lib/session'
import { cookies } from 'next/headers'

// 1. Specify protected and public routes
const protectedRoutes = ['/dashboard']
const publicRoutes = ['/login', '/signup', '/']

export default async function middleware(req: NextRequest) {
  // 2. Check if the current route is protected or public
  const path = req.nextUrl.pathname
  const isProtectedRoute = protectedRoutes.includes(path)
  const isPublicRoute = publicRoutes.includes(path)

  // 3. Decrypt the session from the cookie
  const cookie = (await cookies()).get('session')?.value
  const session = await decrypt(cookie)

  // 4. Redirect to /login if the user is not authenticated
  if (isProtectedRoute && !session?.userId) {
    return NextResponse.redirect(new URL('/login', req.nextUrl))
  }

  // 5. Redirect to /dashboard if the user is authenticated
  if (
    isPublicRoute &&
    session?.userId &&
    !req.nextUrl.pathname.startsWith('/dashboard')
  ) {
    return NextResponse.redirect(new URL('/dashboard', req.nextUrl))
  }

  return NextResponse.next()
}

// Routes Middleware should not run on
export const config = {
  matcher: ['/((?!api|_next/static|_next/image|.*\\.png$).*)']
}
```

LANGUAGE: JavaScript
CODE:
```
import { NextResponse } from 'next/server'
import { decrypt } from '@/app/lib/session'
import { cookies } from 'next/headers'

// 1. Specify protected and public routes
const protectedRoutes = ['/dashboard']
const publicRoutes = ['/login', '/signup', '/']

export default async function middleware(req) {
  // 2. Check if the current route is protected or public
  const path = req.nextUrl.pathname
  const isProtectedRoute = protectedRoutes.includes(path)
  const isPublicRoute = publicRoutes.includes(path)

  // 3. Decrypt the session from the cookie
  const cookie = (await cookies()).get('session')?.value
  const session = await decrypt(cookie)

  // 5. Redirect to /login if the user is not authenticated
  if (isProtectedRoute && !session?.userId) {
    return NextResponse.redirect(new URL('/login', req.nextUrl))
  }

  // 6. Redirect to /dashboard if the user is authenticated
  if (
    isPublicRoute &&
    session?.userId &&
    !req.nextUrl.pathname.startsWith('/dashboard')
  ) {
    return NextResponse.redirect(new URL('/dashboard', req.nextUrl))
  }

  return NextResponse.next()
}

// Routes Middleware should not run on
export const config = {
  matcher: ['/((?!api|_next/static|_next/image|.*\\.png$).*)']
}
```

----------------------------------------

TITLE: Correct `next/link` Usage for Next.js Internal Navigation
DESCRIPTION: This snippet demonstrates the recommended way to navigate to internal Next.js pages using the `Link` component from `next/link`. Importing and wrapping the anchor element with `Link` enables client-side route transitions, providing a smooth single-page application experience.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-html-link-for-pages.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

function Home() {
  return (
    <div>
      <Link href="/about">About Us</Link>
    </div>
  )
}

export default Home
```

----------------------------------------

TITLE: Protecting Server Actions with Unauthorized Function
DESCRIPTION: This example shows how to use the `unauthorized` function within a Next.js Server Action to secure data mutations. Before proceeding with any database operations, the `updateProfile` action verifies the user's session. If the user is not authenticated, `unauthorized()` is called, preventing unauthorized data modifications and rendering a 401 error.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateProfile(data: FormData) {
  const session = await verifySession()

  // If the user is not authenticated, return a 401
  if (!session) {
    unauthorized()
  }

  // Proceed with mutation
  // ...
}
```

LANGUAGE: JavaScript
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateProfile(data) {
  const session = await verifySession()

  // If the user is not authenticated, return a 401
  if (!session) {
    unauthorized()
  }

  // Proceed with mutation
  // ...
}
```

----------------------------------------

TITLE: Creating a Client Component with State (Counter)
DESCRIPTION: This snippet illustrates how to define a Client Component by adding the `'use client'` directive at the top of the file. It shows a simple counter component that uses React's `useState` hook to manage its internal state and an `onClick` event handler for interactivity, demonstrating typical client-side functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-server-and-client-components.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>{count} likes</p>
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>{count} likes</p>
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  )
}
```

----------------------------------------

TITLE: Navigating with Link Component in Next.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to use the `Link` component from `next/link` to navigate between pages in a Next.js application. It generates a list of blog posts, with each post title linking to its respective detail page using client-side navigation and prefetching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'

export default async function Post({ post }) {
  const posts = await getPosts()

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.slug}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Defining a Server Action for User Signup in Next.js
DESCRIPTION: This snippet defines an asynchronous Next.js Server Action named `signup`. It is intended to process the `FormData` submitted from a signup form. Server Actions execute securely on the server, making them suitable for handling authentication logic like user registration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export async function signup(formData: FormData) {}
```

LANGUAGE: JavaScript
CODE:
```
export async function signup(formData) {}
```

----------------------------------------

TITLE: Basic Usage of unstable_noStore in a Server Component (JSX)
DESCRIPTION: This snippet demonstrates the fundamental application of `unstable_noStore` (aliased as `noStore`) within an `async` Next.js Server Component. Calling `noStore()` ensures that the component's rendering is not statically cached, forcing dynamic execution. This is typically used when a component's data or output must always be fresh and not served from a static cache.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_noStore.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { unstable_noStore as noStore } from 'next/cache';

export default async function ServerComponent() {
  noStore();
  const result = await db.query(...);
  ...
}
```

----------------------------------------

TITLE: Building a Navigation Bar with Custom Link
DESCRIPTION: This snippet demonstrates a simple navigation component that utilizes the `CustomLink` component. By using `CustomLink` instead of the standard `next/link`, all navigation within this component will automatically incorporate the defined navigation blocking logic, ensuring consistency across the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_37

LANGUAGE: TypeScript
CODE:
```
'use client'

import { CustomLink as Link } from './custom-link'

export default function Nav() {
  return (
    <nav>
      <Link href="/">Home</Link>
      <Link href="/about">About</Link>
    </nav>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import { CustomLink as Link } from './custom-link'

export default function Nav() {
  return (
    <nav>
      <Link href="/">Home</Link>
      <Link href="/about">About</Link>
    </nav>
  )
}
```

----------------------------------------

TITLE: Configuring SWR Fallback in Next.js Layout (TSX)
DESCRIPTION: Demonstrates how to configure SWR with server-provided fallback data in a Next.js Root Layout Server Component using TypeScript. The `getUser()` function is called on the server, and its result is provided as fallback data to SWR.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { SWRConfig } from 'swr';
import { getUser } from './user'; // some server-side function

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <SWRConfig
      value={{
        fallback: {
          // We do NOT await getUser() here
          // Only components that read this data will suspend
          '/api/user': getUser(),
        },
      }}
    >
      {children}
    </SWRConfig>
  );
}
```

----------------------------------------

TITLE: Migrated Dashboard Layout (Client Component)
DESCRIPTION: This snippet demonstrates migrating the `DashboardLayout` to a Client Component in the `app` directory. The `'use client'` directive marks it as a client-side component, allowing it to retain interactive behavior previously found in `pages` directory layouts. It still accepts `children` to render nested content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_11

LANGUAGE: jsx
CODE:
```
'use client' // this directive should be at top of the file, before any imports.

// This is a Client Component
export default function DashboardLayout({ children }) {
  return (
    <div>
      <h2>My Dashboard</h2>
      {children}
    </div>
  )
}
```

----------------------------------------

TITLE: Rendering Blog Layout with Dynamic Navigation (Next.js)
DESCRIPTION: Defines an asynchronous React component for the blog layout. It fetches a list of featured posts using `getPosts` and renders a `NavLink` for each post, allowing users to navigate to individual blog entries. This demonstrates combining server-side data fetching with client-side navigation components within a layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#_snippet_13

LANGUAGE: typescript
CODE:
```
import { NavLink } from './nav-link'
import getPosts from './get-posts'

export default async function Layout({
  children,
}: {
  children: React.ReactNode
}) {
  const featuredPosts = await getPosts()
  return (
    <div>
      {featuredPosts.map((post) => (
        <div key={post.id}>
          <NavLink slug={post.slug}>{post.title}</NavLink>
        </div>
      ))}
      <div>{children}</div>
    </div>
  )
}
```

LANGUAGE: javascript
CODE:
```
import { NavLink } from './nav-link'
import getPosts from './get-posts'

export default async function Layout({ children }) {
  const featuredPosts = await getPosts()
  return (
    <div>
      {featuredPosts.map((post) => (
        <div key={post.id}>
          <NavLink slug={post.slug}>{post.title}</NavLink>
        </div>
      ))}
      <div>{children}</div>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating a User Login Form (JSX)
DESCRIPTION: This JSX snippet defines a simple HTML form for user login, capturing email and password inputs. Upon submission, it triggers a `handleSubmit` function, typically sending a POST request to an authentication API endpoint.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_11

LANGUAGE: JSX
CODE:
```
<form onSubmit={handleSubmit}>
  <input type="email" name="email" placeholder="Email" required />
  <input type="password" name="password" placeholder="Password" required />
  <button type="submit">Login</button>
</form>
```

----------------------------------------

TITLE: Correctly Calling `headers()` in Next.js Route Handler
DESCRIPTION: This snippet illustrates the proper usage of the `headers()` function within a Next.js Route Handler. It emphasizes that `headers()` should be called inside an asynchronous function like `GET`, `POST`, etc., ensuring it operates within the request scope and prevents 'Dynamic API called outside request' errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-dynamic-api-wrong-context.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { headers } from 'next/headers'

export async function GET() {
  const headersList = await headers()
  return ...
}
```

----------------------------------------

TITLE: Tagging unstable_cache Functions for revalidateTag in Next.js
DESCRIPTION: This example illustrates how to apply a cache tag to a function wrapped with `unstable_cache`. The `tags: ['user']` option within the `unstable_cache` configuration ensures that the cached output of `getUserById` is associated with the 'user' tag. This setup enables targeted revalidation of this cached data using `revalidateTag('user')` when the underlying data changes, maintaining data consistency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
export const getUserById = unstable_cache(
  async (id: string) => {
    return db.query.users.findFirst({ where: eq(users.id, id) })
  },
  ['user'], // Needed if variables are not passed as parameters
  {
    tags: ['user'],
  }
)
```

LANGUAGE: javascript
CODE:
```
export const getUserById = unstable_cache(
  async (id) => {
    return db.query.users.findFirst({ where: eq(users.id, id) })
  },
  ['user'], // Needed if variables are not passed as parameters
  {
    tags: ['user'],
  }
)
```

----------------------------------------

TITLE: Accessing Dynamic Route Parameters in Next.js Layouts
DESCRIPTION: This snippet shows how to access dynamic route parameters within a layout component. The `params` prop is a promise that resolves to an object containing the dynamic segments from the URL. It requires `async/await` to extract the values, enabling layouts to adapt based on URL parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
export default async function Layout({
  params,
}: {
  params: Promise<{ team: string }>
}) {
  const { team } = await params
}
```

LANGUAGE: javascript
CODE:
```
export default async function Layout({ params }) {
  const { team } = await params
}
```

----------------------------------------

TITLE: Implementing Error Recovery with Reset Function in Next.js (TSX)
DESCRIPTION: This Client Component demonstrates how to use the `reset` function provided to an `error.js` boundary to allow users to attempt recovery from a temporary error. Clicking the 'Try again' button triggers a re-render of the error boundary's contents, potentially resolving the issue.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/error.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use client' // Error boundaries must be Client Components

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <div>
      <h2>Something went wrong!</h2>
      <button onClick={() => reset()}>Try again</button>
    </div>
  )
}
```

----------------------------------------

TITLE: Revalidating Cache Tag in Route Handler - JavaScript
DESCRIPTION: This JavaScript Route Handler illustrates how to dynamically revalidate a cache tag based on a query parameter. It imports `revalidateTag`, extracts the `tag` from the request's search parameters, calls `revalidateTag` with it, and returns a JSON response indicating successful revalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidateTag.mdx#_snippet_5

LANGUAGE: js
CODE:
```
import { revalidateTag } from 'next/cache'

export async function GET(request) {
  const tag = request.nextUrl.searchParams.get('tag')
  revalidateTag(tag)
  return Response.json({ revalidated: true, now: Date.now() })
}
```

----------------------------------------

TITLE: Receiving Server Action as Prop in Client Component (JavaScript)
DESCRIPTION: This Client Component receives a Server Action as a prop named 'updateItemAction'. It then uses this action directly in a <form> element's 'action' attribute, demonstrating how forms can directly invoke Server Actions for data mutations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_8

LANGUAGE: JavaScript
CODE:
```
'use client'

export default function ClientComponent({ updateItemAction }) {
  return <form action={updateItemAction}>{/* ... */}</form>
}
```

----------------------------------------

TITLE: Applying Custom CSS Styles with Style Prop (JSX)
DESCRIPTION: This snippet demonstrates how to apply custom CSS styles to the underlying `<img>` element using the `style` prop of the `next/image` component. It defines an inline style object for properties like `borderRadius`, `border`, `width`, and `height`, emphasizing the importance of setting `height: 'auto'` when `width` is custom to preserve aspect ratio.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#_snippet_10

LANGUAGE: JSX
CODE:
```
const imageStyle = {
  borderRadius: '50%',
  border: '1px solid #fff',
  width: '100px',
  height: 'auto'
}

export default function ProfileImage() {
  return <Image src="..." style={imageStyle} />
}
```

----------------------------------------

TITLE: Using Localization Dictionary in Next.js Page Component (JSX)
DESCRIPTION: This JavaScript snippet demonstrates how to fetch and utilize the localized dictionary within a Next.js App Router page component. It retrieves the current locale from `params`, loads the corresponding dictionary using `getDictionary`, and then accesses translated strings for display.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/internationalization.mdx#_snippet_9

LANGUAGE: JSX
CODE:
```
import { getDictionary } from './dictionaries'

export default async function Page({ params }) {
  const { lang } = await params
  const dict = await getDictionary(lang) // en
  return <button>{dict.products.cart}</button> // Add to Cart
}
```

----------------------------------------

TITLE: Adding Cache Tags to Fetch Requests - TypeScript/JavaScript
DESCRIPTION: This example illustrates how to associate cache tags with data fetched using the `fetch` API. By including the `next: { tags: [...] }` option, developers can assign one or more string tags to the fetched data, enabling targeted revalidation later with `revalidateTag`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidateTag.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
fetch(url, { next: { tags: [...] } });
```

----------------------------------------

TITLE: Copying Environment Variable Example File (Bash)
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`. The `.env.local` file is used to store sensitive environment variables for the Next.js application, such as API keys and project IDs, and is ignored by Git to prevent accidental exposure.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Copying Environment Variables Example File
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`. The `.env.local` file is used to store sensitive environment variables like database URI and credentials, and it is ignored by Git to prevent accidental exposure.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Migrating Next.js Draft Mode API to Async (TypeScript)
DESCRIPTION: This snippet shows the recommended asynchronous usage of the `draftMode` API in Next.js 15. The `draftMode()` function now returns a Promise, requiring `await` to destructure its properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
import { draftMode } from 'next/headers'

// Before
const { isEnabled } = draftMode()

// After
const { isEnabled } = await draftMode()
```

----------------------------------------

TITLE: Implementing Server-Side Form Validation with Zod in Next.js (JavaScript)
DESCRIPTION: This snippet demonstrates server-side form validation using the Zod library within a Next.js Server Action. It defines a schema for an email field and uses `safeParse` to validate incoming `FormData`. If validation fails, it returns an object containing field-specific errors. This is the JavaScript equivalent of the TypeScript example.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
'use server'

import { z } from 'zod'

const schema = z.object({
  email: z.string({
    invalid_type_error: 'Invalid Email',
  }),
})

export default async function createsUser(formData) {
  const validatedFields = schema.safeParse({
    email: formData.get('email'),
  })

  // Return early if the form data is invalid
  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Mutate data
}
```

----------------------------------------

TITLE: Rendering Product JSON-LD in Next.js Page (TypeScript)
DESCRIPTION: This snippet demonstrates how to render product-specific JSON-LD structured data within a Next.js `page.tsx` component. It fetches product details, constructs a Schema.org `Product` object, and embeds it as a `<script type="application/ld+json">` tag, sanitizing `<` characters to prevent XSS.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/json-ld.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page({ params }) {
  const { id } = await params
  const product = await getProduct(id)

  const jsonLd = {
    '@context': 'https://schema.org',
    '@type': 'Product',
    name: product.name,
    image: product.image,
    description: product.description,
  }

  return (
    <section>
      {/* Add JSON-LD to your page */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(jsonLd).replace(/</g, '\\u003c'),
        }}
      />
      {/* ... */}
    </section>
  )
}
```

----------------------------------------

TITLE: Fetching Data with Server-Only Environment Variable in Next.js
DESCRIPTION: This function demonstrates fetching data from an external service using an API_KEY from process.env. Without proper protection, this server-only environment variable could accidentally be exposed to the client if the module is imported into a Client Component, leading to environment poisoning.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-server-and-client-components.mdx#_snippet_11

LANGUAGE: TypeScript
CODE:
```
export async function getData() {
  const res = await fetch('https://external-service.com/data', {
    headers: {
      authorization: process.env.API_KEY,
    },
  })

  return res.json()
}
```

LANGUAGE: JavaScript
CODE:
```
export async function getData() {
  const res = await fetch('https://external-service.com/data', {
    headers: {
      authorization: process.env.API_KEY,
    },
  })

  return res.json()
}
```

----------------------------------------

TITLE: Upgrading Next.js with Codemod (Bash)
DESCRIPTION: This command uses the Next.js codemod tool to automatically upgrade your Next.js application to the latest version. It simplifies the migration process by applying necessary code transformations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx @next/codemod@canary upgrade latest
```

----------------------------------------

TITLE: Integrating Client-Side Navigation Links into Next.js Layouts
DESCRIPTION: This snippet demonstrates how to import and render the `NavLinks` client component within a Next.js root layout. This allows the layout to include interactive navigation that uses client-side hooks like `usePathname` while maintaining the server-rendered nature of the layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#_snippet_16

LANGUAGE: tsx
CODE:
```
import { NavLinks } from '@/app/ui/nav-links'

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <NavLinks />
        <main>{children}</main>
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { NavLinks } from '@/app/ui/nav-links'

export default function Layout({ children }) {
  return (
    <html lang="en">
      <body>
        <NavLinks />
        <main>{children}</main>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Preloading Item Data in Next.js Page (TypeScript)
DESCRIPTION: This snippet demonstrates how to preload data for an `<Item>` component within a Next.js `Page` component using TypeScript. It defines a `preload` function that eagerly initiates data fetching for an item by calling `getItem(id)`, ensuring the data is available by the time `<Item>` renders. The `Page` component also performs another asynchronous task (`checkIsAvailable`) before conditionally rendering the `Item`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-fetching-data.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
import { getItem } from '@/lib/data'

export default async function Page({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  // starting loading item data
  preload(id)
  // perform another asynchronous task
  const isAvailable = await checkIsAvailable()

  return isAvailable ? <Item id={id} /> : null
}

export const preload = (id: string) => {
  // void evaluates the given expression and returns undefined
  // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/void
  void getItem(id)
}
export async function Item({ id }: { id: string }) {
  const result = await getItem(id)
  // ...
}
```

----------------------------------------

TITLE: Incorrect Client-Side Usage of Node.js Module in React
DESCRIPTION: This snippet demonstrates an incorrect attempt to use a Node.js-specific module (ioredis) directly within a React component's `useEffect` hook. This will result in a 'Module Not Found' error when the code runs in the browser, as Node.js modules are not available client-side.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/module-not-found.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
// Redis is a Node.js specific library that can't run in the browser
// Trying to use it in code that runs on both Node.js and the browser will result in a module not found error for modules that ioredis relies on
// If you run into such an error it's recommended to move the code to `getStaticProps` or `getServerSideProps` as those methods guarantee that the code is only run in Node.js.
import redis from '../lib/redis'
import { useEffect, useState } from 'react'

export default function Home() {
  const [message, setMessage] = useState()
  useEffect(() => {
    redis.get('message').then((result) => {
      setMessage(result)
    })
  }, [])
  return <h1>{message}</h1>
}
```

----------------------------------------

TITLE: Accessing Runtime Environment Variables in App Router (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to access runtime environment variables within the Next.js App Router. By using dynamic APIs like `connection()` (or `cookies`, `headers`), the component opts into dynamic rendering, ensuring that `process.env.MY_VALUE` is evaluated at runtime on the server.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_13

LANGUAGE: TypeScript
CODE:
```
import { connection } from 'next/server'

export default async function Component() {
  await connection()
  // cookies, headers, and other Dynamic APIs
  // will also opt into dynamic rendering, meaning
  // this env variable is evaluated at runtime
  const value = process.env.MY_VALUE
  // ...
}
```

----------------------------------------

TITLE: Enabling Caching for `GET` Route Handlers (JS)
DESCRIPTION: This example shows how to enable caching for `GET` methods in Route Handlers, which are no longer cached by default in Next.js 15. By setting `export const dynamic = 'force-static'`, the Route Handler's `GET` function will be cached.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_22

LANGUAGE: js
CODE:
```
export const dynamic = 'force-static'

export async function GET() {}
```

----------------------------------------

TITLE: Detecting User Device Type in Next.js Middleware
DESCRIPTION: This snippet demonstrates how to use the `userAgent` helper in Next.js middleware to extract device information from the incoming request. It specifically identifies the device type (e.g., 'mobile', 'tablet', 'desktop') and sets it as a URL search parameter, allowing for dynamic content based on the user's device. It requires `NextRequest`, `NextResponse`, and `userAgent` from `next/server`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/userAgent.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { NextRequest, NextResponse, userAgent } from 'next/server'

export function middleware(request: NextRequest) {
  const url = request.nextUrl
  const { device } = userAgent(request)

  // device.type can be: 'mobile', 'tablet', 'console', 'smarttv',
  // 'wearable', 'embedded', or undefined (for desktop browsers)
  const viewport = device.type || 'desktop'

  url.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(url)
}
```

LANGUAGE: JavaScript
CODE:
```
import { NextResponse, userAgent } from 'next/server'

export function middleware(request) {
  const url = request.nextUrl
  const { device } = userAgent(request)

  // device.type can be: 'mobile', 'tablet', 'console', 'smarttv',
  // 'wearable', 'embedded', or undefined (for desktop browsers)
  const viewport = device.type || 'desktop'

  url.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(url)
}
```

----------------------------------------

TITLE: Calling revalidatePath in Next.js Server Actions
DESCRIPTION: This example illustrates how to use `revalidatePath` within a Next.js Server Action or Route Handler. After a data mutation, calling `revalidatePath('/profile')` invalidates the cache for the specified route. This prompts Next.js to re-render the `/profile` page on subsequent requests, ensuring that any data displayed on that page is fresh and reflects the latest changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
import { revalidatePath } from 'next/cache'

export async function updateUser(id: string) {
  // Mutate data
  revalidatePath('/profile')
}
```

LANGUAGE: javascript
CODE:
```
import { revalidatePath } from 'next/cache'

export async function updateUser(id) {
  // Mutate data
  revalidatePath('/profile')
}
```

----------------------------------------

TITLE: Generating Static Routes for Locales in Next.js Layout (TSX)
DESCRIPTION: This TypeScript snippet shows how to use `generateStaticParams` in a Next.js App Router root layout to pre-render static routes for a defined set of locales (e.g., 'en-US', 'de'). This optimizes performance by generating pages at build time for each specified locale.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/internationalization.mdx#_snippet_10

LANGUAGE: TSX
CODE:
```
export async function generateStaticParams() {
  return [{ lang: 'en-US' }, { lang: 'de' }]
}

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode
  params: Promise<{ lang: 'en-US' | 'de' }>
}>) {
  return (
    <html lang={(await params).lang}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Applying a Global Font in Next.js Layout (App Router)
DESCRIPTION: This snippet illustrates how to import a globally intended font (Inter) from a utility file (`./fonts`) and apply its `className` to the `html` element within the `RootLayout` component of a Next.js App Router application. This ensures the font is preloaded and applied across the entire application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#_snippet_27

LANGUAGE: TSX
CODE:
```
import { inter } from './fonts'

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" className={inter.className}>
      <body>
        <div>{children}</div>
      </body>
    </html>
  )
}
```

LANGUAGE: JSX
CODE:
```
import { inter } from './fonts'

export default function Layout({ children }) {
  return (
    <html lang="en" className={inter.className}>
      <body>
        <div>{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Loading Google Analytics for All Routes in Next.js
DESCRIPTION: This snippet demonstrates how to integrate Google Analytics 4 across all pages of a Next.js application. It provides examples for both the App Router (TypeScript and JavaScript) by placing the `GoogleAnalytics` component in the root layout, and for the Pages Router by placing it in the custom `_app` file. The `gaId` prop is required to specify your Google Analytics Measurement ID.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function MyApp({ Component, pageProps }) {
  return (
    <>
      <Component {...pageProps} />
      <GoogleAnalytics gaId="G-XYZ" />
    </>
  )
}
```

----------------------------------------

TITLE: Starting Next.js Development Server (Bash)
DESCRIPTION: This snippet provides various commands to start the Next.js development server. It lists common package managers like npm, yarn, pnpm, and bun, allowing developers to choose their preferred method to run the application locally.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-empty/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Generating Metadata and Page Content with Memoized Data in JavaScript
DESCRIPTION: This snippet shows how to use the memoized `getPost` function to fetch blog post data for both `generateMetadata` and the default page component. By calling `getPost` in both functions, the data is fetched only once due to memoization, optimizing performance for pages requiring the same data for SEO and content display.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/13-metadata-and-og-images.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
import { getPost } from '@/app/lib/data'

export async function generateMetadata({ params }) {
  const post = await getPost(params.slug)
  return {
    title: post.title,
    description: post.description,
  }
}

export default async function Page({ params }) {
  const post = await getPost(params.slug)
  return <div>{post.title}</div>
}
```

----------------------------------------

TITLE: Using permanentRedirect in a Next.js Server Component
DESCRIPTION: This example illustrates the usage of the `permanentRedirect` function within a Next.js Server Component (`page.js`). It demonstrates a common pattern where a permanent redirect is triggered if a required resource (e.g., team data) is not found, directing the user to an alternative path like `/login`. The function's execution terminates the current rendering process by throwing a `NEXT_REDIRECT` error.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/permanentRedirect.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
import { permanentRedirect } from 'next/navigation'

async function fetchTeam(id) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({ params }) {
  const { id } = await params
  const team = await fetchTeam(id)
  if (!team) {
    permanentRedirect('/login')
  }

  // ...
}
```

----------------------------------------

TITLE: Memoizing Fetch Requests in Next.js with JavaScript
DESCRIPTION: This JavaScript snippet illustrates Next.js's automatic memoization of `fetch` requests. The `getItem` function, when invoked multiple times with identical URL and options within a single React render pass, executes the network call only once, serving cached data for subsequent calls to optimize performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
async function getItem() {
  // The `fetch` function is automatically memoized and the result
  // is cached
  const res = await fetch('https://.../item/1')
  return res.json()
}

// This function is called twice, but only executed the first time
const item = await getItem() // cache MISS

// The second call could be anywhere in your route
const item = await getItem() // cache HIT
```

----------------------------------------

TITLE: Displaying Content Using Dynamic Route Parameters (`params`) in Next.js Page
DESCRIPTION: This example shows how to dynamically display content on a Next.js page by utilizing the `params` prop. It asynchronously extracts the `slug` parameter from the URL and renders it directly within the page's heading, demonstrating a common pattern for fetching or displaying data based on dynamic routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  return <h1>Blog Post: {slug}</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { slug } = await params
  return <h1>Blog Post: {slug}</h1>
}
```

----------------------------------------

TITLE: Passing Server Action as Prop to Client Component (JSX)
DESCRIPTION: This snippet demonstrates how a Server Action can be passed as a prop to a Client Component. Next.js handles the serialization of the Server Action across the client-server boundary, allowing the Client Component to invoke it.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_6

LANGUAGE: JavaScript
CODE:
```
<ClientComponent updateItemAction={updateItem} />
```

----------------------------------------

TITLE: Redirecting User After Server Action Completion (Next.js)
DESCRIPTION: This code shows how to redirect a user to a new route (`/post/${id}`) after a Server Action completes, using the `redirect` API from `next/navigation`. It's crucial to call `redirect` outside of any `try/catch` blocks. The example also combines this with `revalidateTag` to ensure related cached data is updated before redirection.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_14

LANGUAGE: ts
CODE:
```
'use server'

import { redirect } from 'next/navigation'
import { revalidateTag } from 'next/cache'

export async function createPost(id: string) {
  try {
    // ...
  } catch (error) {
    // ...
  }

  revalidateTag('posts') // Update cached posts
  redirect(`/post/${id}`) // Navigate to the new post page
}
```

LANGUAGE: js
CODE:
```
'use server'

import { redirect } from 'next/navigation'
import { revalidateTag } from 'next/cache'

export async function createPost(id) {
  try {
    // ...
  } catch (error) {
    // ...
  }

  revalidateTag('posts') // Update cached posts
  redirect(`/post/${id}`) // Navigate to the new post page
}
```

----------------------------------------

TITLE: Server Action for Redirection
DESCRIPTION: Defines a Server Action that uses the `redirect` function. This action is designed to be called from a Client Component, typically via a form submission, to perform a server-side redirect based on input data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function navigate(data: FormData) {
  redirect(`/posts/${data.get('id')}`)
}
```

LANGUAGE: js
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function navigate(data) {
  redirect(`/posts/${data.get('id')}`)
}
```

----------------------------------------

TITLE: Accessing Dynamic Route Parameters (`params`) in Next.js Page
DESCRIPTION: This example illustrates how to access the `params` prop within a Next.js `page` component. The `params` prop is a promise that resolves to an object containing dynamic route segments. It requires `async/await` to destructure and retrieve the parameter values, such as `slug`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { slug } = await params
}
```

----------------------------------------

TITLE: Defining Google and Local Fonts in Next.js
DESCRIPTION: This snippet defines various Google Fonts (Inter, Lora, Source_Sans_3 with specific weights) and a custom local font (GreatVibes) within a `fonts.ts` or `fonts.js` file. It centralizes font declarations to prevent redundant loading and exports them for reuse across the application. Dependencies include `next/font/google` and `next/font/local`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#_snippet_48

LANGUAGE: ts
CODE:
```
import { Inter, Lora, Source_Sans_3 } from 'next/font/google'
import localFont from 'next/font/local'

// define your variable fonts
const inter = Inter()
const lora = Lora()
// define 2 weights of a non-variable font
const sourceCodePro400 = Source_Sans_3({ weight: '400' })
const sourceCodePro700 = Source_Sans_3({ weight: '700' })
// define a custom local font where GreatVibes-Regular.ttf is stored in the styles folder
const greatVibes = localFont({ src: './GreatVibes-Regular.ttf' })

export { inter, lora, sourceCodePro400, sourceCodePro700, greatVibes }
```

LANGUAGE: js
CODE:
```
import { Inter, Lora, Source_Sans_3 } from 'next/font/google'
import localFont from 'next/font/local'

// define your variable fonts
const inter = Inter()
const lora = Lora()
// define 2 weights of a non-variable font
const sourceCodePro400 = Source_Sans_3({ weight: '400' })
const sourceCodePro700 = Source_Sans_3({ weight: '700' })
// define a custom local font where GreatVibes-Regular.ttf is stored in the styles folder
const greatVibes = localFont({ src: './GreatVibes-Regular.ttf' })

export { inter, lora, sourceCodePro400, sourceCodePro700, greatVibes }
```

----------------------------------------

TITLE: Defining Zod Schema for Signup Form (TypeScript)
DESCRIPTION: This snippet defines a Zod schema, `SignupFormSchema`, for validating user registration fields (name, email, password). It includes validation rules for minimum length, email format, and password complexity, along with custom error messages. It also exports a `FormState` type to define the structure of validation errors returned from server actions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { z } from 'zod'

export const SignupFormSchema = z.object({
  name: z
    .string()
    .min(2, { message: 'Name must be at least 2 characters long.' })
    .trim(),
  email: z.string().email({ message: 'Please enter a valid email.' }).trim(),
  password: z
    .string()
    .min(8, { message: 'Be at least 8 characters long' })
    .regex(/[a-zA-Z]/, { message: 'Contain at least one letter.' })
    .regex(/[0-9]/, { message: 'Contain at least one number.' })
    .regex(/[^a-zA-Z0-9]/, {
      message: 'Contain at least one special character.',
    })
    .trim(),
})

export type FormState =
  | {
      errors?: {
        name?: string[]
        email?: string[]
        password?: string[]
      }
      message?: string
    }
  | undefined
```

----------------------------------------

TITLE: Revalidating a Page Path - Next.js Cache - TypeScript
DESCRIPTION: This snippet illustrates revalidating a dynamic page path, such as `/blog/[slug]`, using the 'page' type. This invalidates any URL matching the provided page file, including those within route groups, but does not affect pages nested deeper than the specified path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
import { revalidatePath } from 'next/cache'
revalidatePath('/blog/[slug]', 'page')
// or with route groups
revalidatePath('/(main)/blog/[slug]', 'page')
```

----------------------------------------

TITLE: Running Next.js App in Development Mode (npm)
DESCRIPTION: These commands first install all project dependencies using `npm install` and then start the Next.js development server with `npm run dev`. Once running, the application will be accessible locally at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-elasticsearch/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Basic Call to useParams Hook (TypeScript)
DESCRIPTION: This snippet shows the fundamental usage of the `useParams` hook. It highlights that the hook is called without any arguments and returns an object containing the route's dynamic parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-params.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
const params = useParams()
```

----------------------------------------

TITLE: Using unstable_noStore as a Fetch Option Replacement (JSX)
DESCRIPTION: This example illustrates how `unstable_noStore` (aliased as `noStore`) can serve as a direct replacement for `fetch` options like `cache: 'no-store'` or `next: { revalidate: 0 }`. By invoking `noStore()` in an `async` Server Component, it achieves dynamic rendering and prevents static caching, offering a convenient alternative when `fetch` options are not applicable or desired for ensuring data freshness.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_noStore.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { unstable_noStore as noStore } from 'next/cache';

export default async function ServerComponent() {
  noStore();
  const result = await db.query(...);
  ...
}
```

----------------------------------------

TITLE: Accessing URL Query Parameters in Next.js Route Handlers
DESCRIPTION: This snippet demonstrates how to retrieve URL query parameters within a Next.js Route Handler. It uses the `NextRequest` object's `nextUrl.searchParams` property to access the URLSearchParams interface, allowing extraction of individual query values using `get()`. The expected input is a `NextRequest` object, and the output is the value of the specified query parameter.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_13

LANGUAGE: TypeScript
CODE:
```
import { type NextRequest } from 'next/server'

export function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams
  const query = searchParams.get('query')
  // query is "hello" for /api/search?query=hello
}
```

LANGUAGE: JavaScript
CODE:
```
export function GET(request) {
  const searchParams = request.nextUrl.searchParams
  const query = searchParams.get('query')
  // query is "hello" for /api/search?query=hello
}
```

----------------------------------------

TITLE: Receiving Webhook Payloads in Next.js Route Handler (JavaScript)
DESCRIPTION: This snippet shows how to create a Next.js Route Handler to receive and process webhook payloads via a POST request. It reads the incoming request body as text using `request.text()` and includes basic error handling. Unlike API Routes in the Pages Router, `bodyParser` is not required for this functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_21

LANGUAGE: js
CODE:
```
export async function POST(request) {
  try {
    const text = await request.text()
    // Process the webhook payload
  } catch (error) {
    return new Response(`Webhook error: ${error.message}`, {
      status: 400,
    })
  }

  return new Response('Success!', {
    status: 200,
  })
}
```

----------------------------------------

TITLE: Updated Next.js Middleware API Usage (TypeScript)
DESCRIPTION: This code illustrates the current and recommended API signature for Next.js Middleware, where the `middleware` function receives a `request` object. It directly returns a `NextResponse` with a 403 status for a specific path, providing the correct and modern way to handle responses.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-new-signature.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  if (request.nextUrl.pathname === '/blocked') {
    return new NextResponse(null, {
      status: 403,
    })
  }
}
```

----------------------------------------

TITLE: Performing Server-Side Redirects in Next.js Route Handlers
DESCRIPTION: This example demonstrates how to perform a server-side redirect within a Next.js Route Handler using the `redirect` function from `next/navigation`. When this handler is accessed, it will redirect the client to the specified URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_11

LANGUAGE: TypeScript
CODE:
```
import { redirect } from 'next/navigation'

export async function GET(request: Request) {
  redirect('https://nextjs.org/')
}
```

LANGUAGE: JavaScript
CODE:
```
import { redirect } from 'next/navigation'

export async function GET(request) {
  redirect('https://nextjs.org/')
}
```

----------------------------------------

TITLE: Configuring Tailwind CSS Font Variables in Global CSS
DESCRIPTION: This CSS snippet demonstrates how to map custom CSS variables, defined by `next/font`, to Tailwind CSS's default font families (`--font-sans`, `--font-mono`). This configuration, typically placed in a global CSS file, allows Tailwind utility classes like `font-sans` to correctly apply the specified Next.js fonts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#_snippet_38

LANGUAGE: css
CODE:
```
@import "tailwindcss";

@theme inline {
  --font-sans: var(--font-inter);
  --font-mono: var(--font-roboto-mono);
}
```

----------------------------------------

TITLE: Generating Static Params for Dynamic Blog Slugs (Next.js)
DESCRIPTION: This snippet demonstrates how to use `generateStaticParams` to pre-render dynamic blog post pages. It fetches a list of posts from an API and returns an array of `slug` parameters, allowing Next.js to statically generate a page for each post at build time. The `Page` component then receives these pre-generated `params`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
// Return a list of `params` to populate the [slug] dynamic segment
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  // ...
}
```

LANGUAGE: jsx
CODE:
```
// Return a list of `params` to populate the [slug] dynamic segment
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
export default async function Page({ params }) {
  const { slug } = await params
  // ...
}
```

----------------------------------------

TITLE: Modifying Server Action Signature for `useActionState` (JavaScript)
DESCRIPTION: This snippet shows how to modify a Next.js Server Action's signature to accept an `initialState` parameter as its first argument. This is required when integrating the Server Action with React's `useActionState` hook for displaying validation errors or messages in Client Components. This is the JavaScript equivalent.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_6

LANGUAGE: JavaScript
CODE:
```
'use server'

import { z } from 'zod'

// ...

export async function createUser(initialState, formData) {
  const validatedFields = schema.safeParse({
    email: formData.get('email'),
  })
  // ...
}
```

----------------------------------------

TITLE: Using useSWR in Next.js Client Component (JSX)
DESCRIPTION: Shows how to use the `useSWR` hook in a Next.js Client Component written in JSX. This component can consume data provided via the SWR fallback from a parent Server Component or fetch data client-side using the provided fetcher.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
'use client';

import useSWR from 'swr';

export function Profile() {
  const fetcher = (url) => fetch(url).then((res) => res.json());
  // The same SWR pattern you already know
  const { data, error } = useSWR('/api/user', fetcher);

  return '...';
}
```

----------------------------------------

TITLE: Revalidating Cache Tag in Route Handler - TypeScript
DESCRIPTION: This TypeScript Route Handler illustrates how to dynamically revalidate a cache tag based on a query parameter. It imports `revalidateTag` and `NextRequest`, extracts the `tag` from the request's search parameters, calls `revalidateTag` with it, and returns a JSON response indicating successful revalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidateTag.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
import type { NextRequest } from 'next/server'
import { revalidateTag } from 'next/cache'

export async function GET(request: NextRequest) {
  const tag = request.nextUrl.searchParams.get('tag')
  revalidateTag(tag)
  return Response.json({ revalidated: true, now: Date.now() })
}
```

----------------------------------------

TITLE: Incrementing View Count with useEffect and Server Actions (React/Next.js)
DESCRIPTION: This snippet demonstrates how to use React's `useEffect` hook to invoke a Next.js Server Action (`incrementViews`) when a component mounts. It utilizes `useState` to manage the view count and `useTransition` to handle pending states, providing user feedback. The `incrementViews` action is called within `startTransition` to update the view count asynchronously.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
'use client'

import { incrementViews } from './actions'
import { useState, useEffect, useTransition } from 'react'

export default function ViewCount({ initialViews }: { initialViews: number }) {
  const [views, setViews] = useState(initialViews)
  const [isPending, startTransition] = useTransition()

  useEffect(() => {
    startTransition(async () => {
      const updatedViews = await incrementViews()
      setViews(updatedViews)
    })
  }, [])

  // You can use `isPending` to give users feedback
  return <p>Total Views: {views}</p>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { incrementViews } from './actions'
import { useState, useEffect, useTransition } from 'react'

export default function ViewCount({ initialViews }) {
  const [views, setViews] = useState(initialViews)
  const [isPending, startTransition] = useTransition()

  useEffect(() => {
    starTransition(async () => {
      const updatedViews = await incrementViews()
      setViews(updatedViews)
    })
  }, [])

  // You can use `isPending` to give users feedback
  return <p>Total Views: {views}</p>
}
```

----------------------------------------

TITLE: Generating All Static Paths with generateStaticParams in Next.js JSX
DESCRIPTION: This snippet demonstrates how to use `generateStaticParams` to pre-render all possible dynamic routes at build time. It fetches a list of posts and maps them to an array of `slug` objects, ensuring all paths are cached in the Full Route Cache.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_11

LANGUAGE: jsx
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}
```

----------------------------------------

TITLE: Returning Direct Responses from Next.js Middleware
DESCRIPTION: This example illustrates how to directly return an HTTP response from Next.js Middleware, effectively short-circuiting the request. It checks for authentication using an external `isAuthenticated` function and returns a 401 Unauthorized JSON response if authentication fails. This feature is available since Next.js v13.1.0.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_13

LANGUAGE: TypeScript
CODE:
```
import type { NextRequest } from 'next/server'
import { isAuthenticated } from '@lib/auth'

// Limit the middleware to paths starting with `/api/`
export const config = {
  matcher: '/api/:function*',
}

export function middleware(request: NextRequest) {
  // Call our authentication function to check the request
  if (!isAuthenticated(request)) {
    // Respond with JSON indicating an error message
    return Response.json(
      { success: false, message: 'authentication failed' },
      { status: 401 }
    )
  }
}
```

LANGUAGE: JavaScript
CODE:
```
import { isAuthenticated } from '@lib/auth'

// Limit the middleware to paths starting with `/api/`
export const config = {
  matcher: '/api/:function*',
}

export function middleware(request) {
  // Call our authentication function to check the request
  if (!isAuthenticated(request)) {
    // Respond with JSON indicating an error message
    return Response.json(
      { success: false, message: 'authentication failed' },
      { status: 401 }
    )
  }
}
```

----------------------------------------

TITLE: Statically Rendering a Subset of Paths at Build Time in Next.js
DESCRIPTION: This example shows how to use `generateStaticParams` to pre-render only a subset of dynamic paths at build time. By slicing the fetched data, only the first 10 posts are generated statically, while other paths will be rendered on demand when first visited at runtime.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  // Render the first 10 posts at build time
  return posts.slice(0, 10).map((post) => ({
    slug: post.slug,
  }))
}
```

LANGUAGE: JavaScript
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  // Render the first 10 posts at build time
  return posts.slice(0, 10).map((post) => ({
    slug: post.slug,
  }))
}
```

----------------------------------------

TITLE: Reading JSON Request Body in Next.js Route Handlers
DESCRIPTION: This snippet demonstrates how to parse a JSON request body in a Next.js Route Handler using the standard Web API `request.json()` method. The `POST` handler asynchronously reads the incoming request's JSON content and then returns it as a JSON response. The expected input is a `Request` object with a JSON body, and the output is a JSON response containing the parsed data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_16

LANGUAGE: TypeScript
CODE:
```
export async function POST(request: Request) {
  const res = await request.json()
  return Response.json({ res })
}
```

LANGUAGE: JavaScript
CODE:
```
export async function POST(request) {
  const res = await request.json()
  return Response.json({ res })
}
```

----------------------------------------

TITLE: Configuring Dynamic Rendering with `dynamic` (JavaScript)
DESCRIPTION: This configuration option, exported from a layout, page, or route file, controls the rendering and caching behavior of the route. It dictates whether the route should be rendered statically at build time, dynamically at request time, or enforce specific caching strategies for data fetches. The available options are 'auto', 'force-dynamic', 'error', and 'force-static', each with distinct implications for data freshness and performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
export const dynamic = 'auto'
// 'auto' | 'force-dynamic' | 'error' | 'force-static'
```

----------------------------------------

TITLE: Defining the Global Root Layout in Next.js
DESCRIPTION: This example illustrates the definition of the top-most root layout for a Next.js application. This layout is mandatory and is responsible for defining the `<html>` and `<body>` tags, along with any other globally shared UI elements. The `children` prop represents the content of the nested route segments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: javascript
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Applying Tailwind CSS Classes in Next.js (JavaScript)
DESCRIPTION: This snippet illustrates the direct application of Tailwind CSS utility classes within a Next.js functional component written in JavaScript. It styles an <h1> element with text-3xl for font size, font-bold for weight, and underline for text decoration, demonstrating basic styling integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_11

LANGUAGE: JavaScript
CODE:
```
export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Server-Side Form Validation Action (TypeScript)
DESCRIPTION: This Server Action, `signup`, validates incoming form data against the `SignupFormSchema` using Zod's `safeParse` method. If validation fails, it returns an object containing flattened field errors, preventing unnecessary calls to the authentication provider or database. The `FormState` type is used for type safety.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { SignupFormSchema, FormState } from '@/app/lib/definitions'

export async function signup(state: FormState, formData: FormData) {
  // Validate form fields
  const validatedFields = SignupFormSchema.safeParse({
    name: formData.get('name'),
    email: formData.get('email'),
    password: formData.get('password'),
  })

  // If any form fields are invalid, return early
  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Call the provider or db to create a user...
}
```

----------------------------------------

TITLE: Correctly Passing Cookies Value to Cached Function - After
DESCRIPTION: This snippet shows the corrected approach where the `cookies()` function is called outside the `"use cache"` function (`getExampleData`). The `isLoggedIn` value is then passed as an argument, making it part of the cache key and allowing `getExampleData` to be effectively cached.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-request-in-use-cache.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
import { cookies } from 'next/headers'

async function getExampleData(isLoggedIn) {
  "use cache"
  ...
}

export default async function Page() {
  const isLoggedIn = (await cookies()).has('token')
  const data = await getExampleData(isLoggedIn)
  return ...
}
```

----------------------------------------

TITLE: Incorrect `<a>` Usage for Next.js Internal Navigation
DESCRIPTION: This snippet illustrates the incorrect practice of using a standard `<a>` HTML element to navigate to an internal Next.js page. This approach causes a full-page refresh, hindering the single-page application experience that Next.js aims to provide.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-html-link-for-pages.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
function Home() {
  return (
    <div>
      <a href="/about">About Us</a>
    </div>
  )
}
```

----------------------------------------

TITLE: Programmatic Navigation with useRouter (JSX)
DESCRIPTION: Demonstrates how to use the `useRouter` hook from `next/navigation` in a Client Component written in JavaScript/JSX to programmatically navigate to a different route (`/dashboard`) when a button is clicked using the `router.push()` method. Requires the `'use client'` directive and is the JavaScript equivalent of the TSX example.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-router.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/dashboard')}>
      Dashboard
    </button>
  )
}
```

----------------------------------------

TITLE: Signup Form with Client-Side Error Display (JSX)
DESCRIPTION: This React component, `SignupForm`, uses the `useActionState` hook to manage form submission and display server-side validation errors. It binds the form's `action` to the `signup` Server Action and conditionally renders error messages for the name field based on the `state` returned by the action. This snippet shows the basic structure in JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_7

LANGUAGE: JSX
CODE:
```
'use client'

import { signup } from '@/app/actions/auth'
import { useActionState } from 'react'

export default function SignupForm() {
  const [state, action, pending] = useActionState(signup, undefined)

  return (
    <form action={action}>
      <div>
        <label htmlFor="name">Name</label>
        <input id="name" name="name" placeholder="Name" />
      </div>
      {state?.errors?.name && <p>{state.errors.name}</p>}


```

----------------------------------------

TITLE: Redirecting User with router.push and useEffect - Next.js JSX
DESCRIPTION: This example demonstrates redirecting a user to a login page using `router.push` within a `useEffect` hook. It checks user authentication status and, if the user is not logged in and not loading, programmatically navigates them to `/login`, useful for authentication flows.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
import { useEffect } from 'react'
import { useRouter } from 'next/router'

// Here you would fetch and return the user
const useUser = () => ({ user: null, loading: false })

export default function Page() {
  const { user, loading } = useUser()
  const router = useRouter()

  useEffect(() => {
    if (!(user || loading)) {
      router.push('/login')
    }
  }, [user, loading])

  return <p>Redirecting...</p>
}
```

----------------------------------------

TITLE: Fetching Users Server Action (File Level) - TSX/JSX
DESCRIPTION: Illustrates another server-side function (`fetchUsers`) defined in a file marked with `'use server'`. This function retrieves all users from the database using a database client (`db`). It's used later in the document to show client-side invocation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
'use server'\nimport { db } from '@/lib/db' // Your database client\n\nexport async function fetchUsers() {\n  const users = await db.user.findMany()\n  return users\n}
```

LANGUAGE: jsx
CODE:
```
'use server'\nimport { db } from '@/lib/db' // Your database client\n\nexport async function fetchUsers() {\n  const users = await db.user.findMany()\n  return users\n}
```

----------------------------------------

TITLE: Fetching GraphQL Data with Apollo Client in TypeScript
DESCRIPTION: This snippet demonstrates how to fetch GraphQL data using the `useQuery` hook from `@apollo/client` within a TypeScript React component. It leverages `ViewerDocument`, which is typically generated by GraphQL Code Generator, to ensure strong type safety for the fetched `viewer` object, providing rich IDE autocompletion and compile-time validation. The component then renders a property of the typed data.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript-graphql/README.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useQuery } from "@apollo/client";
import { ViewerDocument } from "lib/graphql-operations";

const News = () => {
  // Typed already️⚡️
  const {
    data: { viewer },
  } = useQuery(ViewerDocument);

  return <div>{viewer.name}</div>;
};
```

----------------------------------------

TITLE: Defining Metadata with Built-in SEO in App Directory (JavaScript)
DESCRIPTION: This snippet shows how to define page metadata, such as the title, using the new built-in SEO support in the Next.js `app` directory. It exports a `metadata` object to configure the page's head elements, replacing the need for `next/head`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_16

LANGUAGE: JavaScript
CODE:
```
export const metadata = {
  title: 'My Page Title',
}

export default function Page() {
  return '...'
}
```

----------------------------------------

TITLE: Generating a Session Secret Key (Bash)
DESCRIPTION: This Bash command uses `openssl` to generate a cryptographically secure, 32-character base64 encoded random string. This string is intended to be used as a secret key for signing sessions, enhancing security.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_13

LANGUAGE: Bash
CODE:
```
openssl rand -base64 32
```

----------------------------------------

TITLE: Controlling Rewrite Order with beforeFiles, afterFiles, and fallback (JavaScript)
DESCRIPTION: This advanced configuration allows fine-grained control over when rewrites are applied relative to other Next.js routing phases. `beforeFiles` rewrites are checked before static files, `afterFiles` are checked after static files but before dynamic routes, and `fallback` rewrites are applied as a last resort before the 404 page. This provides flexibility for overriding pages or handling external fallbacks.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async rewrites() {
    return {
      beforeFiles: [
        // These rewrites are checked after headers/redirects
        // and before all files including _next/public files which
        // allows overriding page files
        {
          source: '/some-page',
          destination: '/somewhere-else',
          has: [{ type: 'query', key: 'overrideMe' }],
        },
      ],
      afterFiles: [
        // These rewrites are checked after pages/public files
        // are checked but before dynamic routes
        {
          source: '/non-existent',
          destination: '/somewhere-else',
        },
      ],
      fallback: [
        // These rewrites are checked after both pages/public files
        // and dynamic routes are checked
        {
          source: '/:path*',
          destination: `https://my-old-site.com/:path*`,
        },
      ],
    }
  },
}
```

----------------------------------------

TITLE: Importing Image Component in Next.js (JSX)
DESCRIPTION: This snippet imports the `Image` component from `next/image`, making it available for use in the current file. It is a prerequisite for using Next.js optimized image handling features.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/photos.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
import Image from "next/image";
```

----------------------------------------

TITLE: Using Next.js Cookies API Synchronously (TypeScript)
DESCRIPTION: This snippet shows a temporary workaround to use the `cookies` API synchronously in Next.js 15, primarily for migration purposes. It involves casting the result to `UnsafeUnwrappedCookies` and will log a warning in development.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { cookies, type UnsafeUnwrappedCookies } from 'next/headers'

// Before
const cookieStore = cookies()
const token = cookieStore.get('token')

// After
const cookieStore = cookies() as unknown as UnsafeUnwrappedCookies
// will log a warning in dev
const token = cookieStore.get('token')
```

----------------------------------------

TITLE: Migrating from `@next/font` to `next/font` (JS)
DESCRIPTION: This snippet illustrates the migration from the deprecated `@next/font` package to the built-in `next/font` module. The change involves updating the import path for font modules, simplifying font usage within Next.js applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_23

LANGUAGE: js
CODE:
```
// Before
import { Inter } from '@next/font/google'
```

LANGUAGE: js
CODE:
```
// After
import { Inter } from 'next/font/google'
```

----------------------------------------

TITLE: Marking React Class Component as Client Component (After)
DESCRIPTION: Alternatively, this snippet demonstrates how to fix the error by keeping the Class Component but explicitly marking the file as a Client Component using the `'use client'` directive at the top. This allows the Class Component to be rendered.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/class-component-in-server-component.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
'use client'

export default class Page extends React.Component {
  render() {
    return <p>Hello world</p>
  }
}
```

----------------------------------------

TITLE: Revalidating a Specific Path in Next.js (JSX)
DESCRIPTION: This snippet demonstrates the use of `revalidatePath` to manually revalidate data and re-render route segments below a specified path (e.g., '/'). This operation purges both the Data Cache and the Full Route Cache, ensuring that the specified route and its children are refreshed with the latest data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_10

LANGUAGE: JSX
CODE:
```
revalidatePath('/')
```

----------------------------------------

TITLE: Generating Open Graph Image with Local Assets (TypeScript)
DESCRIPTION: This snippet illustrates how to generate an Open Graph image in Next.js by embedding a local image asset. It uses Node.js `fs/promises` to read the image file from the file system and converts it to an `ArrayBuffer` for use in the `src` attribute of an `<img>` tag within the `ImageResponse`. The local asset should be placed relative to the project root.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_22

LANGUAGE: TypeScript
CODE:
```
import { ImageResponse } from 'next/og'
import { join } from 'node:path'
import { readFile } from 'node:fs/promises'

export default async function Image() {
  const logoData = await readFile(join(process.cwd(), 'logo.png'))
  const logoSrc = Uint8Array.from(logoData).buffer

  return new ImageResponse(
    (
      <div
        style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        <img src={logoSrc} height="100" />
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Handling Dynamic Route Segments in Next.js Route Handlers
DESCRIPTION: This snippet illustrates how to capture dynamic route segments in a Next.js Route Handler. The `params` object, passed as an argument to the `GET` function, contains the values of the dynamic segments (e.g., `slug`), allowing the handler to respond based on the URL path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_12

LANGUAGE: TypeScript
CODE:
```
export async function GET(
  request: Request,
  { params }: { params: Promise<{ slug: string }> }
) {
  const { slug } = await params // 'a', 'b', or 'c'
}
```

LANGUAGE: JavaScript
CODE:
```
export async function GET(request, { params }) {
  const { slug } = await params // 'a', 'b', or 'c'
}
```

----------------------------------------

TITLE: Implementing Conditional Routing in Next.js Middleware (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates conditional routing within Next.js Middleware, similar to its TypeScript counterpart. It uses `NextResponse.rewrite` to dynamically change the requested URL based on the `pathname` of the incoming request, redirecting `/about` to `/about-2` and `/dashboard` to `/dashboard/user`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  if (request.nextUrl.pathname.startsWith('/about')) {
    return NextResponse.rewrite(new URL('/about-2', request.url))
  }

  if (request.nextUrl.pathname.startsWith('/dashboard')) {
    return NextResponse.rewrite(new URL('/dashboard/user', request.url))
  }
}
```

----------------------------------------

TITLE: Statically Generating Routes with `generateStaticParams` in Next.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to use the `generateStaticParams` function in a Next.js App Router page to define dynamic route segments at build time. It fetches a list of posts and returns an array of objects, where each object's `slug` property corresponds to a dynamic route parameter. Required dependencies include `fetch` for data retrieval.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/dynamic-routes.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}
```

----------------------------------------

TITLE: Overwriting Root and Nested Metadata in Next.js Page (JSX)
DESCRIPTION: This snippet in `app/blog/page.js` demonstrates how page-level metadata overwrites layout-level metadata. It shows that defining `openGraph` at the page level completely replaces the parent's `openGraph` object, even if some nested fields are omitted.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_82

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Blog',
  openGraph: {
    title: 'Blog',
  },
}

// Output:
// <title>Blog</title>
// <meta property="og:title" content="Blog" />
```

----------------------------------------

TITLE: Rendering an Image Component in JSX
DESCRIPTION: This snippet demonstrates the usage of the Next.js `Image` component to display an image. It specifies fixed dimensions, layout, source, alt text for accessibility, and a CSS class for styling. The `src` prop expects an imported image module like `Tutorials`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/stories/Configure.mdx#_snippet_3

LANGUAGE: JSX
CODE:
```
<Image
        width={33}
        height={32}
        layout="fixed"
        src={Tutorials}
        alt="A book"
        className="sb-explore-image"
      />
```

----------------------------------------

TITLE: Nesting Server Components within Client Component Slots in Next.js
DESCRIPTION: This Server Component (Page) demonstrates how to pass a Server Component (<Cart>) as the child of a Client Component (<Modal>). This allows server-rendered UI to be visually nested within client-rendered UI, with the Server Component being fully rendered on the server before the client component is hydrated.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-server-and-client-components.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
import Modal from './ui/modal'
import Cart from './ui/cart'

export default function Page() {
  return (
    <Modal>
      <Cart />
    </Modal>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Modal from './ui/modal'
import Cart from './ui/cart'

export default function Page() {
  return (
    <Modal>
      <Cart />
    </Modal>
  )
}
```

----------------------------------------

TITLE: Creating Route Handlers for GET Requests in App Router (JavaScript, Next.js)
DESCRIPTION: This snippet shows the basic structure for a Route Handler in the `app` directory using JavaScript. It exports an asynchronous `GET` function that takes a `Request` object. Route Handlers are used to create custom request handlers for routes, replacing traditional API Routes in the `app` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_37

LANGUAGE: JS
CODE:
```
export async function GET(request) {}
```

----------------------------------------

TITLE: Memoizing Data Requests with React cache in JavaScript
DESCRIPTION: This snippet demonstrates the use of the React `cache` function to memoize an asynchronous data fetching operation, similar to the TypeScript example. It ensures that calls to `getItem` with the same `id` only execute the database query once, improving performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_16

LANGUAGE: js
CODE:
```
import { cache } from 'react'
import db from '@/lib/db'

export const getItem = cache(async (id) => {
  const item = await db.item.findUnique({ id })
  return item
})
```

----------------------------------------

TITLE: Importing and Using Google Fonts in App Router (JavaScript)
DESCRIPTION: This snippet shows how to import and use the `Inter` Google Font in a Next.js App Router `layout.js` file. It initializes the font with `latin` subsets and `swap` display strategy, then applies it globally to the `<html>` element using `inter.className`. This optimizes font loading by self-hosting and preventing layout shifts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { Inter } from 'next/font/google'

// If loading a variable font, you don't need to specify the font weight
const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Passing Server Actions via Props in Next.js (Server Side)
DESCRIPTION: Illustrates how to define a Server Action (`performUpdate`) in a Server Component and pass it as a prop (`performUpdate`) through a cacheable component (`CachedComponent`) to a Client Component (`ClientComponent`) without invoking the action within the cached component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import ClientComponent from './ClientComponent'

export default async function Page() {
  const performUpdate = async () => {
    'use server'
    // Perform some server-side update
    await db.update(...)
  }

  return <CacheComponent performUpdate={performUpdate} />
}

async function CachedComponent({
  performUpdate,
}: {
  performUpdate: () => Promise<void>
}) {
  'use cache'
  // Do not call performUpdate here
  return <ClientComponent action={performUpdate} />
}
```

LANGUAGE: jsx
CODE:
```
import ClientComponent from './ClientComponent'

export default async function Page() {
  const performUpdate = async () => {
    'use server'
    // Perform some server-side update
    await db.update(...)
  }

  return <CacheComponent performUpdate={performUpdate} />
}

async function CachedComponent({ performUpdate }) {
  'use cache'
  // Do not call performUpdate here
  return <ClientComponent action={performUpdate} />
}
```

----------------------------------------

TITLE: Reading FormData Request Body in Next.js Route Handlers
DESCRIPTION: This example shows how to read `FormData` from an incoming request in a Next.js Route Handler using `request.formData()`. It extracts specific fields like 'name' and 'email' from the form data. The expected input is a `Request` object with a `FormData` body, and the output is a JSON response containing the extracted form fields. It also notes that `formData` values are strings and suggests `zod-form-data` for validation and type conversion.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_17

LANGUAGE: TypeScript
CODE:
```
export async function POST(request: Request) {
  const formData = await request.formData()
  const name = formData.get('name')
  const email = formData.get('email')
  return Response.json({ name, email })
}
```

LANGUAGE: JavaScript
CODE:
```
export async function POST(request) {
  const formData = await request.formData()
  const name = formData.get('name')
  const email = formData.get('email')
  return Response.json({ name, email })
}
```

----------------------------------------

TITLE: Defining Static Metadata with `metadata` Object in Next.js (TypeScript)
DESCRIPTION: This snippet demonstrates how to define static metadata by exporting a `Metadata` object from a `layout.tsx` or `page.tsx` file. This method is suitable for metadata that does not change based on dynamic information, improving SEO and web shareability. It requires importing the `Metadata` type from 'next'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: '...',
  description: '...',
}

export default function Page() {}
```

----------------------------------------

TITLE: Integrating Session Creation in Next.js Server Action (JavaScript)
DESCRIPTION: This JavaScript Server Action `signup` demonstrates how to integrate the `createSession` function after user authentication. It creates a user session using the `user.id` and then redirects the user to the `/profile` page using Next.js's `redirect()` API, typically after form validation and database insertion.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_21

LANGUAGE: JavaScript
CODE:
```
import { createSession } from '@/app/lib/session'

export async function signup(state, formData) {
  // Previous steps:
  // 1. Validate form fields
  // 2. Prepare data for insertion into database
  // 3. Insert the user into the database or call an Library API

  // Current steps:
  // 4. Create user session
  await createSession(user.id)
  // 5. Redirect user
  redirect('/profile')
}
```

----------------------------------------

TITLE: Configuring Metadata with Next.js Metadata API - Next.js (JavaScript)
DESCRIPTION: This snippet demonstrates configuring page metadata using Next.js's `metadata` object API. It exports a `metadata` constant from `app/layout.js` to define `title` and `description`, allowing Next.js to manage these tags automatically and improving SEO. Dependencies include React and Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'React App',
  description: 'Web site created with Next.js.',
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Defining GET Handler for API Route - JavaScript
DESCRIPTION: Defines and exports an asynchronous function named `GET`. In Next.js, exporting functions matching HTTP methods (like GET, POST, etc.) creates API route handlers. This function receives the request object `req` and returns a JSON response containing the pathname extracted from the request's URL using `req.nextUrl.pathname`. It relies on the imported `NextResponse` class to format the JSON output.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
export const GET = (req)=>{
    return NextResponse.json({
        pathname: req.nextUrl.pathname
    });
};
```

----------------------------------------

TITLE: Configuring Fetch Revalidation Period in Next.js (JSX)
DESCRIPTION: This snippet demonstrates how to set a revalidation period for an individual `fetch` request using the `next.revalidate` option. This ensures that the data fetched will be revalidated from the cache at most after the specified number of seconds (e.g., 3600 seconds for 1 hour), leading to fresh data and server-side re-rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_7

LANGUAGE: JSX
CODE:
```
fetch(`https://...`, { next: { revalidate: 3600 } })
```

----------------------------------------

TITLE: Implementing Incremental Static Regeneration with `fetch` in App Router (Next.js)
DESCRIPTION: This example shows how to use the `fetch()` API with the `next: { revalidate: 60 }` option in the `app` directory to cache data for 60 seconds. The `getPosts` function fetches data, and the `PostList` component then renders the fetched posts. This approach enables data revalidation similar to ISR but directly within `fetch` calls.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_35

LANGUAGE: JSX
CODE:
```
// `app` directory

async function getPosts() {
  const res = await fetch(`https://.../posts`, { next: { revalidate: 60 } })
  const data = await res.json()

  return data.posts
}

export default async function PostList() {
  const posts = await getPosts()

  return posts.map((post) => <div>{post.name}</div>)
}
```

----------------------------------------

TITLE: Implementing Post Creation and Redirection with Next.js Server Actions
DESCRIPTION: This server action (`createPost`) handles the logic for creating a new post. It's marked with `'use server'` to indicate it runs on the server. After the post is created, it uses the `redirect` function from `next/navigation` to navigate the user to the newly created post's page, ensuring a seamless user experience post-mutation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
'use server'
import { redirect } from 'next/navigation'

export async function createPost(formData: FormData) {
  // Create a new post
  // ...

  // Redirect to the new post
  redirect(`/posts/${data.id}`)
}
```

LANGUAGE: JavaScript
CODE:
```
'use server'
import { redirect } from 'next/navigation'

export async function createPost(formData) {
  // Create a new post
  // ...

  // Redirect to the new post
  redirect(`/posts/${data.id}`)
}
```

----------------------------------------

TITLE: Displaying Pending State with useActionState (JSX)
DESCRIPTION: This client component uses React's useActionState hook to manage the state of a server action (createPost) and display a loading indicator. The 'pending' boolean returned by the hook allows the UI to show a LoadingSpinner while the action is in progress.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-updating-data.mdx#_snippet_11

LANGUAGE: jsx
CODE:
```
'use client'

import { useActionState } from 'react'
import { createPost } from '@/app/actions'
import { LoadingSpinner } from '@/app/ui/loading-spinner'

export function Button() {
  const [state, action, pending] = useActionState(createPost, false)

  return (
    <button onClick={async () => action()}>
      {pending ? <LoadingSpinner /> : 'Create Post'}
    </button>
  )
}
```

----------------------------------------

TITLE: Accessing Search Params in Next.js Client Component
DESCRIPTION: This example illustrates how to access URL query parameters within a Next.js Client Component. The `useSearchParams` hook from `next/navigation` is utilized, as Client Components re-render on navigation, ensuring access to the latest search parameters, unlike static layouts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function Search() {
  const searchParams = useSearchParams()

  const search = searchParams.get('search')

  return '...'
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function Search() {
  const searchParams = useSearchParams()

  const search = searchParams.get('search')

  return '...'
}
```

----------------------------------------

TITLE: Deduplicating Data Requests with React `cache`
DESCRIPTION: This snippet shows how to use React's `cache` function to deduplicate database queries. By wrapping the `getPost` function, subsequent calls with the same `id` during a render pass will reuse the cached result, preventing redundant database access and optimizing performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-fetching-data.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
import { cache } from 'react'
import { db, posts, eq } from '@/lib/db'

export const getPost = cache(async (id: string) => {
  const post = await db.query.posts.findFirst({
    where: eq(posts.id, parseInt(id)),
  })
})
```

LANGUAGE: JavaScript
CODE:
```
import { cache } from 'react'
import { db, posts, eq } from '@/lib/db'
import { notFound } from 'next/navigation'

export const getPost = cache(async (id) => {
  const post = await db.query.posts.findFirst({
    where: eq(posts.id, parseInt(id)),
  })
})
```

----------------------------------------

TITLE: Handling Next.js Custom Metrics with reportWebVitals Function (JavaScript)
DESCRIPTION: This function demonstrates how to receive and process different web vital metrics, including Next.js custom metrics like hydration and render times, using a switch statement to handle each metric type separately.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
export function reportWebVitals(metric) {
  switch (metric.name) {
    case 'Next.js-hydration':
      // handle hydration results
      break
    case 'Next.js-route-change-to-render':
      // handle route-change to render results
      break
    case 'Next.js-render':
      // handle render results
      break
    default:
      break
  }
}
```

----------------------------------------

TITLE: Wrapping useSearchParams Component with Suspense (Next.js)
DESCRIPTION: This page component illustrates how to wrap a component that uses `useSearchParams` (like `SearchBar`) within a React `Suspense` boundary. This pattern ensures that only the dynamic part of the page is client-side rendered, preventing the entire page from being deopted during static rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/deopted-into-client-rendering.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react'
import SearchBar from './search-bar'

// This component passed as fallback to the Suspense boundary
// will be rendered in place of the search bar in the initial HTML.
// When the value is available during React hydration the fallback
// will be replaced with the `<SearchBar>` component.
function SearchBarFallback() {
  return <>placeholder</>
}

export default function Page() {
  return (
    <>
      <nav>
        <Suspense fallback={<SearchBarFallback />}>
          <SearchBar />
        </Suspense>
      </nav>
      <h1>Dashboard</h1>
    </>
  )
}
```

----------------------------------------

TITLE: Using React.use() for Next.js Dynamic API in Client Component
DESCRIPTION: This code shows how to access the `params` prop asynchronously in a Next.js Client Component. Since Client Components are synchronous, you must use the `React.use()` hook to unwrap the Promise returned by the dynamic API.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
'use client'
import * as React from 'react'

function Page({ params }) {
  // asynchronous access of `params.id`.
  const { id } = React.use(params)
  return <p>ID: {id}</p>
}
```

----------------------------------------

TITLE: Tagging Fetch Requests for revalidateTag in Next.js
DESCRIPTION: This snippet demonstrates how to associate a cache tag with data fetched using the `fetch` API in Next.js. By including the `next: { tags: ['user'] }` option, the fetched data is marked with the 'user' tag, allowing `revalidateTag('user')` to invalidate this specific cache entry later. This is crucial for ensuring that subsequent requests for this data retrieve the latest version after a mutation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
export async function getUserById(id: string) {
  const data = await fetch(`https://...`, {
    next: {
      tags: ['user'],
    },
  })
}
```

LANGUAGE: javascript
CODE:
```
export async function getUserById(id) {
  const data = await fetch(`https://...`, {
    next: {
      tags: ['user'],
    },
  })
}
```

----------------------------------------

TITLE: Non-interactive Next.js Project Initialization Options (CLI)
DESCRIPTION: This snippet displays the full list of command-line options available for `create-next-app`, enabling non-interactive project setup. It details various flags for configuring TypeScript, JavaScript, Tailwind CSS, ESLint, App Router, source directory, Turbopack, import aliases, package managers, examples, and other setup preferences, allowing for automated or scripted project creation.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
Usage: create-next-app [project-directory] [options]

Options:
  -V, --version                        output the version number
  --ts, --typescript

    Initialize as a TypeScript project. (default)

  --js, --javascript

    Initialize as a JavaScript project.

  --tailwind

    Initialize with Tailwind CSS config. (default)

  --eslint

    Initialize with ESLint config.

  --app

    Initialize as an App Router project.

  --src-dir

    Initialize inside a `src/` directory.

  --turbopack

    Enable Turbopack by default for development.

  --import-alias <alias-to-configure>

    Specify import alias to use (default "@/*").

  --empty

    Initialize an empty project.

  --use-npm

    Explicitly tell the CLI to bootstrap the application using npm

  --use-pnpm

    Explicitly tell the CLI to bootstrap the application using pnpm

  --use-yarn

    Explicitly tell the CLI to bootstrap the application using Yarn

  --use-bun

    Explicitly tell the CLI to bootstrap the application using Bun

  -e, --example [name]|[github-url]

    An example to bootstrap the app with. You can use an example name
    from the official Next.js repo or a GitHub URL. The URL can use
    any branch and/or subdirectory

  --example-path <path-to-example>

    In a rare case, your GitHub URL might contain a branch name with
    a slash (e.g. bug/fix-1) and the path to the example (e.g. foo/bar).
    In this case, you must specify the path to the example separately:
    --example-path foo/bar

  --reset-preferences

    Explicitly tell the CLI to reset any stored preferences

  --skip-install

    Explicitly tell the CLI to skip installing packages

  --disable-git

    Explicitly tell the CLI to skip initializing a git repository.

  --yes

    Use previous preferences or defaults for all options that were not
    explicitly specified, without prompting.

  -h, --help                           display help for command
```

----------------------------------------

TITLE: Configuring Next.js Metadata with JSDoc (JavaScript)
DESCRIPTION: This snippet demonstrates how to define page metadata in Next.js using a `metadata` object, enhanced with JSDoc for type safety. It sets the page title, which Next.js automatically renders in the `<head>` of the document. This approach ensures proper type checking for metadata properties and is applicable to `layout.js` or `page.js` files.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_72

LANGUAGE: js
CODE:
```
/** @type {import("next").Metadata} */
export const metadata = {
  title: 'Next.js',
}
```

----------------------------------------

TITLE: Nesting SubmitButton Component in a Form (TypeScript)
DESCRIPTION: This snippet demonstrates how to integrate the `SubmitButton` component, which uses `useFormStatus`, directly into a form. The `SubmitButton` automatically inherits the pending state from the `form` element it is nested within, simplifying UI state management.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_13

LANGUAGE: TypeScript
CODE:
```
import { SubmitButton } from './button'
import { createUser } from '@/app/actions'

export function Signup() {
  return (
    <form action={createUser}>
      {/* Other form elements */}
      <SubmitButton />
    </form>
  )
}
```

----------------------------------------

TITLE: Defining Root Layout and Metadata in Next.js (JavaScript)
DESCRIPTION: This snippet defines the root layout for a Next.js application using JavaScript/JSX, including the `metadata` object for SEO purposes. It establishes the fundamental HTML structure, wrapping the application's content within a `div` element.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_8

LANGUAGE: javascript
CODE:
```
export const metadata = {
  title: 'My App',
  description: 'My App is a...', 
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Creating a Submit Button with useFormStatus in TypeScript
DESCRIPTION: This component uses the `useFormStatus` hook to access the pending state of the parent form. It disables the button when the form's action is in progress, providing a clear indication to the user that the submission is ongoing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_11

LANGUAGE: TypeScript
CODE:
```
'use client'

import { useFormStatus } from 'react-dom'

export function SubmitButton() {
  const { pending } = useFormStatus()

  return (
    <button disabled={pending} type="submit">
      Sign Up
    </button>
  )
}
```

----------------------------------------

TITLE: Managing Cookies in Next.js Server Actions (JavaScript)
DESCRIPTION: This JavaScript example showcases how to perform cookie operations within a Next.js Server Action. It covers fetching the `cookieStore` instance and then using it to retrieve, set, and delete cookies, mirroring the functionality of the TypeScript version.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_16

LANGUAGE: js
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function exampleAction() {
  // Get cookie
  const cookieStore = await cookies()

  // Get cookie
  cookieStore.get('name')?.value

  // Set cookie
  cookieStore.set('name', 'Delba')

  // Delete cookie
  cookieStore.delete('name')
}
```

----------------------------------------

TITLE: Loading Google Analytics for All Routes with `@next/third-parties`
DESCRIPTION: This snippet demonstrates how to integrate Google Analytics 4 (GA4) across all routes of a Next.js application by including the `GoogleAnalytics` component from `@next/third-parties/google` in the root layout. It requires passing your GA4 measurement ID (`gaId`) to the component. By default, the script fetches after hydration, optimizing performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-script-for-ga.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}
```

----------------------------------------

TITLE: Using useEffect in Client Component (Correct)
DESCRIPTION: This snippet demonstrates the corrected approach. By adding the `'use client'` directive at the top of the file, the component is marked as a Client Component, allowing the safe and correct usage of client-side hooks like `useEffect`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-client-hook-in-server-component.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'

import { useEffect } from 'react'

export default function Example() {
  useEffect(() => {
    console.log('in useEffect')
  })
  return <p>Hello world</p>
}
```

----------------------------------------

TITLE: Creating a Submit Button with useFormStatus in JavaScript
DESCRIPTION: This component uses the `useFormStatus` hook to access the pending state of the parent form. It disables the button when the form's action is in progress, providing a clear indication to the user that the submission is ongoing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_12

LANGUAGE: JavaScript
CODE:
```
'use client'

import { useFormStatus } from 'react-dom'

export function SubmitButton() {
  const { pending } = useFormStatus()

  return (
    <button disabled={pending} type="submit">
      Sign Up
    </button>
  )
}
```

----------------------------------------

TITLE: Parallel Data Fetching with Promise.all in Next.js (JavaScript)
DESCRIPTION: This snippet demonstrates parallel data fetching in a Next.js page using `Promise.all`. By calling `getArtist` and `getAlbums` without `await` and then resolving them together, it prevents sequential blocking, enhancing performance. It's important to note that if any promise within `Promise.all` rejects, the entire operation will fail.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-fetching-data.mdx#_snippet_13

LANGUAGE: JavaScript
CODE:
```
import Albums from './albums'

async function getArtist(username) {
  const res = await fetch(`https://api.example.com/artist/${username}`)
  return res.json()
}

async function getAlbums(username) {
  const res = await fetch(`https://api.example.com/artist/${username}/albums`)
  return res.json()
}

export default async function Page({ params }) {
  const { username } = await params
  const artistData = getArtist(username)
  const albumsData = getAlbums(username)

  // Initiate both requests in parallel
  const [artist, albums] = await Promise.all([artistData, albumsData])

  return (
    <>
      <h1>{artist.name}</h1>
      <Albums list={albums} />
    </>
  )
}
```

----------------------------------------

TITLE: Forwarding Authorization Header in Next.js
DESCRIPTION: Shows how to retrieve the 'authorization' header from the incoming request using `headers` and then forward it in a subsequent fetch request from a Server Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/headers.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { headers } from 'next/headers'

export default async function Page() {
  const authorization = (await headers()).get('authorization')
  const res = await fetch('...', {
    headers: { authorization }, // Forward the authorization header
  })
  const user = await res.json()

  return <h1>{user.name}</h1>
}
```

----------------------------------------

TITLE: Nesting SubmitButton Component in a Form (JavaScript)
DESCRIPTION: This snippet demonstrates how to integrate the `SubmitButton` component, which uses `useFormStatus`, directly into a form. The `SubmitButton` automatically inherits the pending state from the `form` element it is nested within, simplifying UI state management.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_14

LANGUAGE: JavaScript
CODE:
```
import { SubmitButton } from './button'
import { createUser } from '@/app/actions'

export function Signup() {
  return (
    <form action={createUser}>
      {/* Other form elements */}
      <SubmitButton />
    </form>
  )
}
```

----------------------------------------

TITLE: Defining a Next.js Link Loading Indicator Component
DESCRIPTION: This component utilizes the `useLinkStatus` hook from `next/link` to conditionally render a loading spinner. It checks the `pending` state returned by the hook, displaying a `div` with `role='status'` and `aria-label='Loading'` when navigation is in progress, and `null` otherwise. This provides visual feedback to the user during route transitions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-link-status.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
'use client'\n\nimport { useLinkStatus } from 'next/link'\n\nexport default function LoadingIndicator() {\n  const { pending } = useLinkStatus()\n  return pending ? (\n    <div role="status" aria-label="Loading" className="spinner" />\n  ) : null\n}
```

LANGUAGE: JavaScript
CODE:
```
'use client'\n\nimport { useLinkStatus } from 'next/link'\n\nexport default function LoadingIndicator() {\n  const { pending } = useLinkStatus()\n  return pending ? (\n    <div role="status" aria-label="Loading" className="spinner" />\n  ) : null\n}
```

----------------------------------------

TITLE: Generating Metadata and Page Content with Memoized Data in TypeScript
DESCRIPTION: This snippet shows how to use the memoized `getPost` function to fetch blog post data for both `generateMetadata` and the default page component. By calling `getPost` in both functions, the data is fetched only once due to memoization, optimizing performance for pages requiring the same data for SEO and content display.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/13-metadata-and-og-images.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
import { getPost } from '@/app/lib/data'

export async function generateMetadata({
  params,
}: {
  params: { slug: string }
}) {
  const post = await getPost(params.slug)
  return {
    title: post.title,
    description: post.description,
  }
}

export default async function Page({ params }: { params: { slug: string } }) {
  const post = await getPost(params.slug)
  return <div>{post.title}</div>
}
```

----------------------------------------

TITLE: Defining Next.js Middleware in TypeScript
DESCRIPTION: This snippet demonstrates the correct way to define a middleware function in Next.js using TypeScript. It imports `NextFetchEvent` and `NextRequest` types from `next/server`, emphasizing that `next/server` should only be used within `middleware.{js,ts}` files. The `middleware` function processes an incoming request and returns a `Response`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-server-import-in-page.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextFetchEvent, NextRequest } from 'next/server'

export function middleware(req: NextRequest, ev: NextFetchEvent) {
  return new Response('Hello, world!')
}
```

----------------------------------------

TITLE: Implementing Granular Streaming with Suspense in Next.js (TypeScript)
DESCRIPTION: This Next.js page component demonstrates granular content streaming using React's `<Suspense>` boundary. Content outside the `<Suspense>` (e.g., header) is immediately sent to the client, while the `BlogList` component inside the boundary is streamed in, displaying a `BlogListSkeleton` as a fallback. This allows parts of the page to become interactive sooner, improving user experience for data-intensive sections and requires the `dynamicIO` config option to be enabled.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-fetching-data.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react'
import BlogList from '@/components/BlogList'
import BlogListSkeleton from '@/components/BlogListSkeleton'

export default function BlogPage() {
  return (
    <div>
      {/* This content will be sent to the client immediately */}
      <header>
        <h1>Welcome to the Blog</h1>
        <p>Read the latest posts below.</p>
      </header>
      <main>
        {/* Any content wrapped in a <Suspense> boundary will be streamed */}
        <Suspense fallback={<BlogListSkeleton />}>
          <BlogList />
        </Suspense>
      </main>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating a Basic Search Form in Next.js
DESCRIPTION: This snippet demonstrates how to create a basic search form using `next/form` that navigates to a specified search results page (`/search`) upon submission. The `query` input field's value will be encoded as a search parameter in the URL. This form is typically placed on the main application page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import Form from 'next/form'

export default function Page() {
  return (
    <Form action="/search">
      <input name="query" />
      <button type="submit">Submit</button>
    </Form>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Form from 'next/form'

export default function Page() {
  return (
    <Form action="/search">
      <input name="query" />
      <button type="submit">Submit</button>
    </Form>
  )
}
```

----------------------------------------

TITLE: Calling Server Action from Client Component (JavaScript)
DESCRIPTION: This Client Component imports and calls a Server Action defined in a separate module. The 'use client' directive marks this component as a Client Component, enabling interactive client-side functionality while still leveraging server-side mutations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
'use client'

import { create } from './actions'

export function Button() {
  return <button onClick={() => create()}>Create</button>
}
```

----------------------------------------

TITLE: Caching Data Fetching with React Cache (JavaScript)
DESCRIPTION: This JavaScript utility snippet illustrates how to implement a reusable and cached data fetching function using React's `cache` API and the `server-only` package. The `getItem` function is wrapped with `cache` to memoize its results on the server, optimizing data retrieval. It also includes a `preload` function for eagerly triggering the cached `getItem` call.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-fetching-data.mdx#_snippet_17

LANGUAGE: js
CODE:
```
import { cache } from 'react'
import 'server-only'
import { getItem } from '@/lib/data'

export const preload = (id) => {
  void getItem(id)
}

export const getItem = cache(async (id) => {
  // ...
})
```

----------------------------------------

TITLE: Securing GET Route Handler with unauthorized in Next.js (JavaScript)
DESCRIPTION: This JavaScript snippet illustrates how to secure a GET Route Handler. It checks for an active user session using `verifySession`. If the user is not authenticated, `unauthorized()` is invoked, which results in a 401 response and the rendering of the `unauthorized.tsx` component, effectively blocking unauthenticated access.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export async function GET() {
  const session = await verifySession()

  // If the user is not authenticated, return a 401 and render unauthorized.tsx
  if (!session) {
    unauthorized()
  }

  // Fetch data
  // ...
}
```

----------------------------------------

TITLE: Handling Form Data with Server Functions (TypeScript)
DESCRIPTION: This server-side function, marked with ''use server'', demonstrates how to receive and extract data from a FormData object submitted via an HTML form. It retrieves 'title' and 'content' fields, which can then be used to update a database or perform other server-side operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-updating-data.mdx#_snippet_6

LANGUAGE: ts
CODE:
```
'use server'

export async function createPost(formData: FormData) {
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}
```

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: This command starts the Next.js development server, enabling hot-reloading and other development features. It is typically run in the root directory of the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#_snippet_5

LANGUAGE: Bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Configuring Dynamic Rendering with `dynamic` (TypeScript)
DESCRIPTION: This configuration option, exported from a layout, page, or route file, controls the rendering and caching behavior of the route. It dictates whether the route should be rendered statically at build time, dynamically at request time, or enforce specific caching strategies for data fetches. The available options are 'auto', 'force-dynamic', 'error', and 'force-static', each with distinct implications for data freshness and performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export const dynamic = 'auto'
// 'auto' | 'force-dynamic' | 'error' | 'force-static'
```

----------------------------------------

TITLE: Loading Google Analytics for a Single Route in Next.js
DESCRIPTION: This snippet illustrates how to include Google Analytics 4 on a specific page within a Next.js application. It shows examples for both the App Router and Pages Router, where the `GoogleAnalytics` component is directly placed in the respective page file. This method is suitable when analytics tracking is only required for particular routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function Page() {
  return <GoogleAnalytics gaId="G-XYZ" />
}
```

LANGUAGE: jsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function Page() {
  return <GoogleAnalytics gaId="G-XYZ" />
}
```

----------------------------------------

TITLE: Generating Dynamic Open Graph Images with External Data in Next.js
DESCRIPTION: This snippet demonstrates how to dynamically generate multiple Open Graph images for a Next.js route using `generateImageMetadata` and a default `Image` component. It fetches image metadata and content based on route parameters (`params.id`) from external utility functions (`getOGImages`, `getCaptionForImage`), allowing for custom image sizes, alt text, and content type. The `generateImageMetadata` function returns an array of image properties, while the `Image` component renders the actual image content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-image-metadata.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { ImageResponse } from 'next/og'
import { getCaptionForImage, getOGImages } from '@/app/utils/images'

export async function generateImageMetadata({
  params,
}: {
  params: { id: string }
}) {
  const images = await getOGImages(params.id)

  return images.map((image, idx) => ({
    id: idx,
    size: { width: 1200, height: 600 },
    alt: image.text,
    contentType: 'image/png',
  }))
}

export default async function Image({
  params,
  id,
}: {
  params: { id: string }
  id: number
}) {
  const productId = (await params).id
  const imageId = id
  const text = await getCaptionForImage(productId, imageId)

  return new ImageResponse(
    (
      <div
        style={
          {
            // ...
          }
        }
      >
        {text}
      </div>
    )
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import { ImageResponse } from 'next/og'
import { getCaptionForImage, getOGImages } from '@/app/utils/images'

export async function generateImageMetadata({ params }) {
  const images = await getOGImages(params.id)

  return images.map((image, idx) => ({
    id: idx,
    size: { width: 1200, height: 600 },
    alt: image.text,
    contentType: 'image/png',
  }))
}

export default async function Image({ params, id }) {
  const productId = (await params).id
  const imageId = id
  const text = await getCaptionForImage(productId, imageId)

  return new ImageResponse(
    (
      <div
        style={
          {
            // ...
          }
        }
      >
        {text}
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Generating Open Graph Image with ImageResponse in TypeScript
DESCRIPTION: This snippet demonstrates how to create a dynamic Open Graph image using the `ImageResponse` API from `next/og` within a Next.js `opengraph-image.tsx` route. It includes loading a custom font, defining image metadata (alt text, dimensions, content type), and rendering JSX elements into an image. The image is generated at build time and cached by default.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { ImageResponse } from 'next/og'
import { readFile } from 'node:fs/promises'
import { join } from 'node:path'

// Image metadata
export const alt = 'About Acme'
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

// Image generation
export default async function Image() {
  // Font loading, process.cwd() is Next.js project directory
  const interSemiBold = await readFile(
    join(process.cwd(), 'assets/Inter-SemiBold.ttf')
  )

  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        About Acme
      </div>
    ),
    // ImageResponse options
    {
      // For convenience, we can re-use the exported opengraph-image
      // size config to also set the ImageResponse's width and height.
      ...size,
      fonts: [
        {
          name: 'Inter',
          data: interSemiBold,
          style: 'normal',
          weight: 400,
        },
      ],
    }
  )
}
```

----------------------------------------

TITLE: Migrating Next.js Page Params & SearchParams to Async (TypeScript)
DESCRIPTION: This snippet shows how to update `params` and `searchParams` in Next.js `page.js` to be asynchronous in Next.js 15. Both props are now Promises, requiring `await` to access their properties in `generateMetadata` and the default export function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_15

LANGUAGE: typescript
CODE:
```
// Before
type Params = { slug: string }
type SearchParams = { [key: string]: string | string[] | undefined }

export function generateMetadata({
  params,
  searchParams,
}: {
  params: Params
  searchParams: SearchParams
}) {
  const { slug } = params
  const { query } = searchParams
}

export default async function Page({
  params,
  searchParams,
}: {
  params: Params
  searchParams: SearchParams
}) {
  const { slug } = params
  const { query } = searchParams
}

// After
type Params = Promise<{ slug: string }>
type SearchParams = Promise<{ [key: string]: string | string[] | undefined }>

export async function generateMetadata(props: {
  params: Params
  searchParams: SearchParams
}) {
  const params = await props.params
  const searchParams = await props.searchParams
  const slug = params.slug
  const query = searchParams.query
}

export default async function Page(props: {
  params: Params
  searchParams: SearchParams
}) {
  const params = await props.params
  const searchParams = await props.searchParams
  const slug = params.slug
  const query = searchParams.query
}
```

----------------------------------------

TITLE: Using redirect in Client Component (Direct)
DESCRIPTION: Demonstrates how to use the `redirect` function directly within a Client Component based on a path condition. Note that on initial page load during SSR, this will perform a server-side redirect.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/redirect.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'

import { redirect, usePathname } from 'next/navigation'

export function ClientRedirect() {
  const pathname = usePathname()

  if (pathname.startsWith('/admin') && !pathname.includes('/login')) {
    redirect('/admin/login')
  }

  return <div>Login Page</div>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { redirect, usePathname } from 'next/navigation'

export function ClientRedirect() {
  const pathname = usePathname()

  if (pathname.startsWith('/admin') && !pathname.includes('/login')) {
    redirect('/admin/login')
  }

  return <div>Login Page</div>
}
```

----------------------------------------

TITLE: Basic Web Vitals Reporting in App Router
DESCRIPTION: Illustrates how to create a client component (`web-vitals.js`) using `useReportWebVitals` and import it into the root layout (`layout.js`) to enable basic Web Vitals reporting in the App Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
'use client'

import { useReportWebVitals } from 'next/web-vitals'

export function WebVitals() {
  useReportWebVitals((metric) => {
    console.log(metric)
  })
}
```

LANGUAGE: jsx
CODE:
```
import { WebVitals } from './_components/web-vitals'

export default function Layout({ children }) {
  return (
    <html>
      <body>
        <WebVitals />
        {children}
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Defining a Basic Next.js Page Component (JavaScript)
DESCRIPTION: This snippet defines a simple React component named `About` and exports it as the default. When placed in the `pages` directory (e.g., `pages/about.js`), Next.js automatically associates it with the `/about` route. This page is pre-rendered using Static Generation without requiring external data.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function About() {
  return <div>About</div>
}

export default About
```

----------------------------------------

TITLE: Integrating Blog Nav Links into a Next.js Layout (TypeScript)
DESCRIPTION: This server-side Next.js layout component imports and renders the `BlogNavLink` client component. It fetches featured posts asynchronously using `getFeaturedPosts` and maps them to `BlogNavLink` instances, displaying a list of links alongside the main content. This demonstrates how client components can be used within server components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-selected-layout-segment.mdx#_snippet_4

LANGUAGE: TSX
CODE:
```
// Import the Client Component into a parent Layout (Server Component)\nimport { BlogNavLink } from './blog-nav-link'\nimport getFeaturedPosts from './get-featured-posts'\n\nexport default async function Layout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const featuredPosts = await getFeaturedPosts()\n  return (\n    <div\n>      {featuredPosts.map((post) => (\n        <div key={post.id}>\n          <BlogNavLink slug={post.slug}>{post.title}</BlogNavLink>\n        </div>\n      ))}\n      <div\n>{children}</div\n>    </div\n>  )\n}
```

----------------------------------------

TITLE: Define NextResponse Class - Next.js - JS
DESCRIPTION: Defines the `NextResponse` class, inheriting from the standard Web `Response`. It provides Next.js-specific features including custom cookie management via a proxied `ResponseCookies` instance, integration with `NextURL` for response URLs, access to internal state via a `Symbol`, and static helper methods (`json`, `redirect`, `rewrite`, `next`) to easily create common response types for use in Next.js middleware.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_14

LANGUAGE: javascript
CODE:
```
export class NextResponse extends Response {
    constructor(body, init = {}){
        super(body, init);
        const headers = this.headers;
        const cookies = new ResponseCookies(headers);
        const cookiesProxy = new Proxy(cookies, {
            get (target, prop, receiver) {
                switch(prop){
                    case 'delete':
                    case 'set':
                        {
                            return (...args)=>{
                                const result = Reflect.apply(target[prop], target, args);
                                const newHeaders = new Headers(headers);
                                if (result instanceof ResponseCookies) {
                                    headers.set('x-middleware-set-cookie', result.getAll().map((cookie)=>stringifyCookie(cookie)).join(','));
                                }
                                handleMiddlewareField(init, newHeaders);
                                return result;
                            };
                        }
                    default:
                        return ReflectAdapter.get(target, prop, receiver);
                }
            }
        });
        this[INTERNALS] = {
            cookies: cookiesProxy,
            url: init.url ? new NextURL(init.url, {
                headers: toNodeOutgoingHttpHeaders(headers),
                nextConfig: init.nextConfig
            }) : undefined
        };
    }
    [Symbol.for('edge-runtime.inspect.custom')]() {
        return {
            cookies: this.cookies,
            url: this.url,
            body: this.body,
            bodyUsed: this.bodyUsed,
            headers: Object.fromEntries(this.headers),
            ok: this.ok,
            redirected: this.redirected,
            status: this.status,
            statusText: this.statusText,
            type: this.type
        };
    }
    get cookies() {
        return this[INTERNALS].cookies;
    }
    static json(body, init) {
        const response = Response.json(body, init);
        return new NextResponse(response.body, response);
    }
    static redirect(url, init) {
        const status = typeof init === 'number' ? init : (init == null ? void 0 : init.status) ?? 307;
        if (!REDIRECTS.has(status)) {
            throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
        }
        const initObj = typeof init === 'object' ? init : {};
        const headers = new Headers(initObj == null ? void 0 : initObj.headers);
        headers.set('Location', validateURL(url));
        return new NextResponse(null, {
            ...initObj,
            headers,
            status
        });
    }
    static rewrite(destination, init) {
        const headers = new Headers(init == null ? void 0 : init.headers);
        headers.set('x-middleware-rewrite', validateURL(destination));
        handleMiddlewareField(init, headers);
        return new NextResponse(null, {
            ...init,
            headers
        });
    }
    static next(init) {
        const headers = new Headers(init == null ? void 0 : init.headers);
        headers.set('x-middleware-next', '1');
        handleMiddlewareField(init, headers);
        return new NextResponse(null, {
            ...init,
            headers
        });
    }
}
```

----------------------------------------

TITLE: Handling Form Data with Server Functions (JavaScript)
DESCRIPTION: This server-side function, marked with ''use server'', demonstrates how to receive and extract data from a FormData object submitted via an HTML form. It retrieves 'title' and 'content' fields, which can then be used to update a database or perform other server-side operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-updating-data.mdx#_snippet_7

LANGUAGE: js
CODE:
```
'use server'

export async function createPost(formData) {
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}
```

----------------------------------------

TITLE: Managing Cookies in Next.js Server Actions (TypeScript)
DESCRIPTION: This snippet demonstrates how to interact with cookies within a Next.js Server Action using the `next/headers` `cookies` API. It illustrates operations for retrieving a cookie's value, setting a new cookie with a specified name and value, and deleting an existing cookie.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_15

LANGUAGE: ts
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function exampleAction() {
  const cookieStore = await cookies()

  // Get cookie
  cookieStore.get('name')?.value

  // Set cookie
  cookieStore.set('name', 'Delba')

  // Delete cookie
  cookieStore.delete('name')
}
```

----------------------------------------

TITLE: Integrating Client-Side Context Provider in Server Component Layout in Next.js
DESCRIPTION: This Server Component (RootLayout) imports and renders the ThemeProvider Client Component, wrapping its children. This pattern allows all subsequent Client Components within the application to consume the provided context, demonstrating how to bridge server-rendered layouts with client-side context.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-server-and-client-components.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
import ThemeProvider from './theme-provider'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html>
      <body>
        <ThemeProvider>{children}</ThemeProvider>
      </body>
    </html>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import ThemeProvider from './theme-provider'

export default function RootLayout({ children }) {
  return (
    <html>
      <body>
        <ThemeProvider>{children}</ThemeProvider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Redirecting After Data Update in Next.js Server Functions
DESCRIPTION: This snippet demonstrates how to redirect a user to a new page (`/posts`) after an asynchronous operation, such as updating data, within a Next.js Server Function. It utilizes the `redirect` function from `next/navigation` to perform the navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-updating-data.mdx#_snippet_14

LANGUAGE: TypeScript
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function createPost(formData: FormData) {
  // Update data
  // ...

  redirect('/posts')
}
```

LANGUAGE: JavaScript
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function createPost(formData) {
  // Update data
  // ...

  redirect('/posts')
}
```

----------------------------------------

TITLE: Listening for Navigation Events (JSX)
DESCRIPTION: Shows how to create a Client Component (`NavigationEvents`) that utilizes `useEffect`, `usePathname`, and `useSearchParams` from `next/navigation` to detect changes in the current URL (pathname or search parameters) and perform an action, such as logging the new URL. This pattern replaces the `router.events` functionality found in the Pages Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-router.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
'use client'

import { useEffect } from 'react'
import { usePathname, useSearchParams } from 'next/navigation'

export function NavigationEvents() {
  const pathname = usePathname()
  const searchParams = useSearchParams()

  useEffect(() => {
    const url = `${pathname}?${searchParams}`
    console.log(url)
    // You can now use the current URL
    // ...
  }, [pathname, searchParams])

  return '...'
}
```

----------------------------------------

TITLE: Asynchronous Utility Function Refactor (Next.js 15)
DESCRIPTION: This snippet demonstrates how a utility function (misnamed as `Page` in the example, but intended to be `getToken`) should be refactored to be `async` and `await` the `cookies()` Promise before accessing its properties, resolving the synchronous access error in Next.js 15.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
export async function Page() {
  return (await cookies()).get(token)
}
```

----------------------------------------

TITLE: Parsing User Agent with userAgent in Next.js Middleware
DESCRIPTION: This snippet provides the corrected approach for parsing the user agent in Next.js middleware. It imports the `userAgent` function from `next/server`, passes the `NextRequest` object to it, and then safely accesses device information to determine the viewport, resolving the `req.ua` deprecation error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-user-agent.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { NextRequest, NextResponse, userAgent } from 'next/server'

export function middleware(request: NextRequest) {
  const url = request.nextUrl
  const { device } = userAgent(request)
  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'
  url.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(url)
}
```

----------------------------------------

TITLE: Basic Configuration with next.config.js (CommonJS)
DESCRIPTION: This snippet demonstrates the standard way to configure Next.js using `next.config.js` with CommonJS modules. It exports a `nextConfig` object where various configuration options can be defined. This file is processed by the Next.js server and build phases.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/index.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
// @ts-check

/** @type {import('next').NextConfig} */
const nextConfig = {
  /* config options here */
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Implementing Error Boundary with Logging in Next.js (JSX)
DESCRIPTION: This Client Component defines an error boundary for Next.js applications, catching runtime errors and displaying a fallback UI. It uses `useEffect` to log the error to a reporting service and provides a 'Try again' button that utilizes the `reset` function to attempt re-rendering the affected segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/error.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
'use client' // Error boundaries must be Client Components

import { useEffect } from 'react'

export default function Error({ error, reset }) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}
```

----------------------------------------

TITLE: Overriding Next.js Fetch Caching Behavior (TypeScript)
DESCRIPTION: This advanced option allows overriding the default `cache` behavior for all `fetch` requests within a Next.js layout or page. It provides granular control over whether `fetch` requests are cached or not, offering options like `'auto'` (default heuristic), `'force-cache'` (always cache), or `'force-no-store'` (never cache), among others. This helps manage data fetching strategies and optimize rendering performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
export const fetchCache = 'auto'
// 'auto' | 'default-cache' | 'only-cache'
// 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store'
```

----------------------------------------

TITLE: Generating Open Graph Image with External Data (JavaScript)
DESCRIPTION: This snippet demonstrates how to create an Open Graph image dynamically in Next.js by fetching post data from an external API using `fetch` and displaying the post title. It utilizes the `params` object to extract the `slug` for the API call, and sets metadata like `alt`, `size`, and `contentType` for the image.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_21

LANGUAGE: JavaScript
CODE:
```
import { ImageResponse } from 'next/og'

export const alt = 'About Acme'
export const size = {
  width: 1200,
  height: 630,
}
export const contentType = 'image/png'

export default async function Image({ params }) {
  const post = await fetch(`https://.../posts/${params.slug}`).then((res) =>
    res.json()
  )

  return new ImageResponse(
    (
      <div
        style={{
          fontSize: 48,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {post.title}
      </div>
    ),
    {
      ...size,
    }
  )
}
```

----------------------------------------

TITLE: Using `useSearchParams` in Next.js App Directory in JSX
DESCRIPTION: This snippet shows the simplified usage of `useSearchParams` from `next/navigation` when a component is exclusively used within the Next.js `app` directory. In this context, the `next/compat/router` is no longer needed, and `searchParams` are immediately available, streamlining the code.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_21

LANGUAGE: jsx
CODE:
```
import { useSearchParams } from 'next/navigation'
const MyComponent = () => {
  const searchParams = useSearchParams()
  // As this component is only used in `app/`, the compat router can be removed.
  const search = searchParams.get('search')
  // ...
}
```

----------------------------------------

TITLE: Securing GET Route Handler with unauthorized in Next.js (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to protect a GET Route Handler. It verifies the user's session using `verifySession` and, if no session exists, calls `unauthorized()` to return a 401 status and render the `unauthorized.tsx` component, ensuring only authenticated users can access the endpoint.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { NextRequest, NextResponse } from 'next/server'
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export async function GET(req: NextRequest): Promise<NextResponse> {
  // Verify the user's session
  const session = await verifySession()

  // If no session exists, return a 401 and render unauthorized.tsx
  if (!session) {
    unauthorized()
  }

  // Fetch data
  // ...
}
```

----------------------------------------

TITLE: Controlling Dynamic Segment Generation with `dynamicParams` (JavaScript)
DESCRIPTION: This configuration option, exported from a layout or page file, determines the behavior when a dynamic segment is visited that was not pre-generated by `generateStaticParams`. Setting it to `true` allows on-demand generation of such segments, while `false` results in a 404 error. This option replaces the `fallback` behavior from the `pages` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
export const dynamicParams = true // true | false,
```

----------------------------------------

TITLE: Installing Project Dependencies using pnpm
DESCRIPTION: This command installs all required project dependencies listed in `package.json` using pnpm. Similar to npm and Yarn, it ensures that all necessary libraries and frameworks, including Knex, are installed and available for the application to function correctly.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Passing Dynamic Search Params to a Component (TypeScript)
DESCRIPTION: This snippet shows how a page component can receive `searchParams` and pass them as a prop to a child component. The page itself remains prerendered, and the dynamic rendering is deferred to the child component where `searchParams` are accessed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-partial-prerendering.mdx#_snippet_9

LANGUAGE: TSX
CODE:
```
import { Table, TableSkeleton } from './table'
import { Suspense } from 'react'

export default function Page({
  searchParams,
}: {
  searchParams: Promise<{ sort: string }>
}) {
  return (
    <section>
      <h1>This will be prerendered</h1>
      <Suspense fallback={<TableSkeleton />}>
        <Table searchParams={searchParams} />
      </Suspense>
    </section>
  )
}
```

----------------------------------------

TITLE: Controlling Dynamic Segment Generation with `dynamicParams` (TypeScript)
DESCRIPTION: This configuration option, exported from a layout or page file, determines the behavior when a dynamic segment is visited that was not pre-generated by `generateStaticParams`. Setting it to `true` allows on-demand generation of such segments, while `false` results in a 404 error. This option replaces the `fallback` behavior from the `pages` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
export const dynamicParams = true // true | false,
```

----------------------------------------

TITLE: Using Next.js Navigation Hooks in Client Components (App Directory)
DESCRIPTION: This snippet demonstrates how to import and use the new `useRouter`, `usePathname`, and `useSearchParams` hooks from `next/navigation` within a Next.js Client Component. These hooks are specifically designed for the `app` directory and enable programmatic navigation, access to the current path, and retrieval of URL search parameters. It requires the `'use client'` directive at the top of the file to mark it as a Client Component, as these hooks are not supported in Server Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_21

LANGUAGE: tsx
CODE:
```
'use client'\n\nimport { useRouter, usePathname, useSearchParams } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // ...\n}
```

LANGUAGE: jsx
CODE:
```
'use client'\n\nimport { useRouter, usePathname, useSearchParams } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // ...\n}
```

----------------------------------------

TITLE: Configuring `remotePatterns` for Remote Images in Next.js
DESCRIPTION: This snippet illustrates how to configure `remotePatterns` in `next.config.js` to securely allow optimization of remote images. This configuration enables specifying detailed URL patterns, including protocol, hostname, port, and pathname, to restrict image sources and enhance application security.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#_snippet_51

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 's3.amazonaws.com',
        port: '',
        pathname: '/my-bucket/**',
        search: ''
      }
    ]
  }
}
```

----------------------------------------

TITLE: Reading searchParams and params in Next.js Client Components
DESCRIPTION: This example illustrates how to read `searchParams` and `params` within a Client Component in Next.js. Since Client Components cannot be `async`, React's `use` hook is employed to unwrap the Promises returned by `params` and `searchParams`, enabling access to dynamic route segments and URL query parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
'use client'\n\nimport { use } from 'react'\n\nexport default function Page({
  params,
  searchParams,
}: {
  params: Promise<{ slug: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const { slug } = use(params)
  const { query } = use(searchParams)
}
```

LANGUAGE: js
CODE:
```
'use client'\n\nimport { use } from 'react'\n\nexport default function Page({ params, searchParams }) {
  const { slug } = use(params)
  const { query } = use(searchParams)
}
```

----------------------------------------

TITLE: Handling Pending State with useActionState in TypeScript
DESCRIPTION: This snippet demonstrates how to use the `useActionState` hook to manage the pending state of a form submission. It disables the submit button while the `createUser` action is being executed, providing visual feedback to the user.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      {/* Other form elements */}
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Implementing Global Error Boundaries in Next.js
DESCRIPTION: This snippet shows how to create a global error boundary using `global-error.js` in the root `app` directory. This component catches errors that bubble up past all nested error boundaries and must define its own `<html>` and `<body>` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/11-error-handling.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
'use client' // Error boundaries must be Client Components

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
'use client' // Error boundaries must be Client Components

export default function GlobalError({ error, reset }) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Closing Modal with Next.js Link Component
DESCRIPTION: This snippet illustrates how to close a modal by navigating away using the Next.js `Link` component. When the link is clicked, it navigates to the specified `href`, which should correspond to a route that no longer renders the modal's parallel slot, effectively closing it.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/parallel-routes.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'\n\nexport function Modal({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <Link href="/">Close modal</Link>\n      <div>{children}</div>\n    </>\n  )\n}
```

LANGUAGE: JavaScript
CODE:
```
import Link from 'next/link'\n\nexport function Modal({ children }) {\n  return (\n    <>\n      <Link href="/">Close modal</Link>\n      <div>{children}</div>\n    </>\n  )\n}
```

----------------------------------------

TITLE: Handling Credential Authentication API Route (Next.js)
DESCRIPTION: This API route handles user authentication by receiving email and password from the request body. It uses the `signIn` function from `@/auth` to authenticate credentials and responds with success or appropriate error messages for invalid credentials or server issues.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_12

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'
import { signIn } from '@/auth'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    const { email, password } = req.body
    await signIn('credentials', { email, password })

    res.status(200).json({ success: true })
  } catch (error) {
    if (error.type === 'CredentialsSignin') {
      res.status(401).json({ error: 'Invalid credentials.' })
    } else {
      res.status(500).json({ error: 'Something went wrong.' })
    }
  }
}
```

LANGUAGE: JavaScript
CODE:
```
import { signIn } from '@/auth'

export default async function handler(req, res) {
  try {
    const { email, password } = req.body
    await signIn('credentials', { email, password })

    res.status(200).json({ success: true })
  } catch (error) {
    if (error.type === 'CredentialsSignin') {
      res.status(401).json({ error: 'Invalid credentials.' })
    } else {
      res.status(500).json({ error: 'Something went wrong.' })
    }
  }
}
```

----------------------------------------

TITLE: Generating Dynamic Links with Next.js Link Component
DESCRIPTION: This snippet illustrates how to create links to dynamic segments in Next.js using the `<Link>` component and JavaScript template literals. It demonstrates mapping over a list of posts to generate individual links with unique slugs, commonly used for blog posts or product pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

interface Post {
  id: number
  title: string
  slug: string
}

export default function PostList({ posts }: { posts: Post[] }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function PostList({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Reading and Setting Headers in Next.js Route Handlers using next/headers
DESCRIPTION: This example demonstrates how to read incoming HTTP headers using the `headers` function from `next/headers` and set outgoing headers in a Next.js Route Handler. The `GET` function retrieves the 'referer' header and then includes it in the response, showcasing header manipulation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
import { headers } from 'next/headers'

export async function GET(request: Request) {
  const headersList = await headers()
  const referer = headersList.get('referer')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { referer: referer },
  })
}
```

LANGUAGE: JavaScript
CODE:
```
import { headers } from 'next/headers'

export async function GET(request) {
  const headersList = await headers()
  const referer = headersList.get('referer')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { referer: referer },
  })
}
```

----------------------------------------

TITLE: Passing Dynamic Search Params to a Component (JavaScript)
DESCRIPTION: This snippet shows how a page component can receive `searchParams` and pass them as a prop to a child component. The page itself remains prerendered, and the dynamic rendering is deferred to the child component where `searchParams` are accessed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-partial-prerendering.mdx#_snippet_10

LANGUAGE: JSX
CODE:
```
import { Table, TableSkeleton } from './table'
import { Suspense } from 'react'

export default function Page({ searchParams }) {
  return (
    <section>
      <h1>This will be prerendered</h1>
      <Suspense fallback={<TableSkeleton />}>
        <Table searchParams={searchParams} />
      </Suspense>
    </section>
  )
}
```

----------------------------------------

TITLE: Implementing Nested Error Boundaries in Next.js
DESCRIPTION: This code demonstrates creating a client-side error boundary using the `error.js` file convention. It catches uncaught exceptions in its child components, logs the error, and provides a 'Try again' button to attempt re-rendering the segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/11-error-handling.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
'use client' // Error boundaries must be Client Components

import { useEffect } from 'react'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
'use client' // Error boundaries must be Client Components

import { useEffect } from 'react'

export default function Error({ error, reset }) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}
```

----------------------------------------

TITLE: Memoizing Data Fetching with React `cache` in JavaScript
DESCRIPTION: This snippet demonstrates how to memoize a data fetching function (`getPost`) using React's `cache` to prevent duplicate requests. It fetches a post by slug from the database, ensuring the query executes only once even if called multiple times. This is crucial for optimizing data access when the same data is needed for both page content and metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/13-metadata-and-og-images.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
import { cache } from 'react'
import { db } from '@/app/lib/db'

// getPost will be used twice, but execute only once
export const getPost = cache(async (slug) => {
  const res = await db.query.posts.findFirst({ where: eq(posts.slug, slug) })
  return res
})
```

----------------------------------------

TITLE: Configuring Security Headers in Next.js
DESCRIPTION: This configuration in `next.config.js` defines security headers for a Next.js application. It applies global headers like `X-Content-Type-Options`, `X-Frame-Options`, and `Referrer-Policy` to all routes, and specific headers for the service worker (`/sw.js`) to ensure correct interpretation, prevent caching, and enforce a strict Content Security Policy.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_11

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin',
          }
        ]
      },
      {
        source: '/sw.js',
        headers: [
          {
            key: 'Content-Type',
            value: 'application/javascript; charset=utf-8',
          },
          {
            key: 'Cache-Control',
            value: 'no-cache, no-store, must-revalidate',
          },
          {
            key: 'Content-Security-Policy',
            value: "default-src 'self'; script-src 'self'",
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Using revalidatePath in a Route Handler - Next.js - JavaScript
DESCRIPTION: This Route Handler demonstrates how to dynamically revalidate a path based on a query parameter. It retrieves the 'path' from the request URL and calls `revalidatePath` if a path is provided, returning a JSON response indicating success or a missing path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#_snippet_7

LANGUAGE: js
CODE:
```
import { revalidatePath } from 'next/cache'

export async function GET(request) {
  const path = request.nextUrl.searchParams.get('path')

  if (path) {
    revalidatePath(path)
    return Response.json({ revalidated: true, now: Date.now() })
  }

  return Response.json({
    revalidated: false,
    now: Date.now(),
    message: 'Missing path to revalidate',
  })
}
```

----------------------------------------

TITLE: Creating Active Navigation Links with usePathname in Next.js Client Components
DESCRIPTION: This code defines a client component `NavLinks` (or `Links` in JS) that uses the `usePathname` hook from `next/navigation` to dynamically apply an 'active' class to `Link` components based on the current URL path. This allows for visual indication of the active navigation item.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#_snippet_15

LANGUAGE: tsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'
import Link from 'next/link'

export function NavLinks() {
  const pathname = usePathname()

  return (
    <nav>
      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href="/">
        Home
      </Link>

      <Link
        className={`link ${pathname === '/about' ? 'active' : ''}`}
        href="/about"
      >
        About
      </Link>
    </nav>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'
import Link from 'next/link'

export function Links() {
  const pathname = usePathname()

  return (
    <nav>
      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href="/">
        Home
      </Link>

      <Link
        className={`link ${pathname === '/about' ? 'active' : ''}`}
        href="/about"
      >
        About
      </Link>
    </nav>
  )
}
```

----------------------------------------

TITLE: Caching a GET Route Handler in TypeScript
DESCRIPTION: This example shows how to enable caching for a GET Route Handler by setting `export const dynamic = 'force-static'`. The handler fetches data from an external API and returns it as JSON, demonstrating how to make a static data fetch within a cached route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
export const dynamic = 'force-static'

export async function GET() {
  const res = await fetch('https://data.mongodb-api.com/...', {
    headers: {
      'Content-Type': 'application/json',
      'API-Key': process.env.DATA_API_KEY,
    },
  })
  const data = await res.json()

  return Response.json({ data })
}
```

----------------------------------------

TITLE: Awaiting Next.js Dynamic API in Server Component
DESCRIPTION: This snippet demonstrates the correct way to access the `params` prop asynchronously in a Next.js Server Component. The function must be marked `async`, and the dynamic API (`params`) must be `await`ed before accessing its properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
async function Page({ params }) {
  // asynchronous access of `params.id`.
  const { id } = await params
  return <p>ID: {id}</p>
}
```

----------------------------------------

TITLE: Forcing Dynamic Rendering for a Page in Next.js App Router
DESCRIPTION: This page component explicitly sets `export const dynamic = 'force-dynamic'` to ensure the route is dynamically rendered. This configuration makes `useSearchParams` available on the server during the initial render of any client components within this page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
import SearchBar from './search-bar'

export const dynamic = 'force-dynamic'

export default function Page() {
  return (
    <>
      <nav>
        <SearchBar />
      </nav>
      <h1>Dashboard</h1>
    </>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import SearchBar from './search-bar'

export const dynamic = 'force-dynamic'

export default function Page() {
  return (
    <>
      <nav>
        <SearchBar />
      </nav>
      <h1>Dashboard</h1>
    </>
  )
}
```

----------------------------------------

TITLE: Remove <a> Tags From Link Components
DESCRIPTION: Remove `<a>` tags inside Link Components, or add a `legacyBehavior` prop to Links that cannot be auto-fixed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#_snippet_25

LANGUAGE: Terminal
CODE:
```
npx @next/codemod@latest new-link .
```

----------------------------------------

TITLE: Rewriting Routes with Next.js Middleware (TypeScript)
DESCRIPTION: This TypeScript middleware function checks for an authentication token in the request cookies. If present, it rewrites the '/dashboard' path to '/auth/dashboard'; otherwise, it rewrites it to '/public/dashboard'. This ensures users are directed to the appropriate dashboard view based on their authentication status, preventing unnecessary fetches.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_28

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request: Request) {
  const nextUrl = request.nextUrl
  if (nextUrl.pathname === '/dashboard') {
    if (request.cookies.authToken) {
      return NextResponse.rewrite(new URL('/auth/dashboard', request.url))
    } else {
      return NextResponse.rewrite(new URL('/public/dashboard', request.url))
    }
  }
}
```

----------------------------------------

TITLE: Calling Server Function from Client Component - TSX/JSX
DESCRIPTION: Shows a React client component (`MyButton`) that imports a server function (`fetchUsers`) defined elsewhere. The function is invoked from a client-side event handler (`onClick`) on a button, demonstrating how server actions can be triggered from client components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-server.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'\nimport { fetchUsers } from '../actions'\n\nexport default function MyButton() {\n  return <button onClick={() => fetchUsers()}>Fetch Users</button>\n}
```

LANGUAGE: jsx
CODE:
```
'use client'\nimport { fetchUsers } from '../actions'\n\nexport default function MyButton() {\n  return <button onClick={() => fetchUsers()}>Fetch Users</button>\n}
```

----------------------------------------

TITLE: Accessing Session Data in Client Component (JSX)
DESCRIPTION: This client component ('use client') illustrates how to consume session data using useSession from an authentication library. It fetches the userId from the session and then uses it to make a client-side data request, typically for displaying user-specific information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_44

LANGUAGE: jsx
CODE:
```
'use client';

import { useSession } from "auth-lib";

export default function Profile() {
  const { userId } = useSession();
  const { data } = useSWR(`/api/user/${userId}`, fetcher)

  return (
    // ...
  );
}
```

----------------------------------------

TITLE: Implementing User Data Fetching with Authentication Check in DAL
DESCRIPTION: This snippet defines the `getUser` function within the Data Access Layer (DAL), demonstrating how to perform a session verification and return `null` if the session is invalid. This ensures that authentication checks are consistently applied whenever user data is accessed, preventing unauthorized data retrieval.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_39

LANGUAGE: ts
CODE:
```
export const getUser = cache(async () => {
  const session = await verifySession()
  if (!session) return null

  // Get user ID from session and fetch data
})
```

LANGUAGE: js
CODE:
```
export const getUser = cache(async () => {
  const session = await verifySession()
  if (!session) return null

  // Get user ID from session and fetch data
})
```

----------------------------------------

TITLE: Creating a Search Button with Instant Feedback using `useFormStatus` (React)
DESCRIPTION: This snippet creates a reusable client-side `SearchButton` component that leverages React's `useFormStatus` hook to display an instant loading state ('Searching...') when the parent form is pending submission. It provides immediate visual feedback to the user without waiting for the full page load, enhancing the user experience.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'
import { useFormStatus } from 'react-dom'

export default function SearchButton() {
  const status = useFormStatus()
  return (
    <button type="submit">{status.pending ? 'Searching...' : 'Search'}</button>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'
import { useFormStatus } from 'react-dom'

export default function SearchButton() {
  const status = useFormStatus()
  return (
    <button type="submit">{status.pending ? 'Searching...' : 'Search'}</button>
  )
}
```

----------------------------------------

TITLE: Applying Google Font to Root Layout in Next.js (Geist)
DESCRIPTION: This snippet demonstrates how to import a Google Font using `next/font/google`, initialize it with specified subsets, and apply its generated class name to the `<html>` element in the Root Layout. This ensures the font is applied globally across the Next.js application, leveraging `next/font` for automatic optimization and self-hosting.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-fonts.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { Geist } from 'next/font/google'

const geist = Geist({
  subsets: ['latin'],
})

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" className={geist.className}>
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Geist } from 'next/font/google'

const geist = Geist({
  subsets: ['latin'],
})

export default function Layout({ children }) {
  return (
    <html className={geist.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Fetching Data with getServerSideProps for Server-side Rendering (JavaScript)
DESCRIPTION: This snippet demonstrates `getServerSideProps`, an `async` function that runs on every request to the server. It fetches frequently updated data from an external API. The fetched `data` is then passed as `props` to the `Page` component, enabling the page to be pre-rendered with the most current information for each user request.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
function Page({ data }) {
  // Render data...
}

// This gets called on every request
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  // Pass data to the page via props
  return { props: { data } }
}

export default Page
```

----------------------------------------

TITLE: Importing and Using CSS Modules (JSX)
DESCRIPTION: Shows how to import a CSS Module file (e.g., extra.module.css) into a React component. The imported styles object is then used to apply scoped CSS classes to elements via the className prop, preventing style conflicts and avoiding manual link tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-css-tags.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import styles from './extra.module.css'

export class Home {
  render() {
    return (
      <div>
        <button type="button" className={styles.active}>
          Open
        </button>
      </div>
    )
  }
}
```

----------------------------------------

TITLE: Generating Category Static Params for Next.js Layout
DESCRIPTION: This snippet demonstrates `generateStaticParams` in a Next.js layout to pre-render dynamic `[category]` segments. It fetches product data and maps it to an array of objects, each containing a `category` slug for static path generation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_11

LANGUAGE: TypeScript
CODE:
```
// Generate segments for [category]
export async function generateStaticParams() {
  const products = await fetch('https://.../products').then((res) => res.json())

  return products.map((product) => ({
    category: product.category.slug,
  }))
}

export default function Layout({
  params,
}: {
  params: Promise<{ category: string }>
}) {
  // ...
}
```

LANGUAGE: JavaScript
CODE:
```
// Generate segments for [category]
export async function generateStaticParams() {
  const products = await fetch('https://.../products').then((res) => res.json())

  return products.map((product) => ({
    category: product.category.slug,
  }))
}

export default function Layout({ params }) {
  // ...
}
```

----------------------------------------

TITLE: Configuring ESLint with TypeScript and Core Web Vitals in Next.js (Flat Config)
DESCRIPTION: This configuration extends the base Next.js ESLint setup to include TypeScript-specific rules via `next/typescript`, in addition to the `next/core-web-vitals` rules. It leverages the flat config format (eslint.config.mjs) and is based on `@typescript-eslint/recommended`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
import { FlatCompat } from '@eslint/eslintrc'

const compat = new FlatCompat({
  // import.meta.dirname is available after Node.js v20.11.0
  baseDirectory: import.meta.dirname,
})

const eslintConfig = [
  ...compat.config({
    extends: ['next/core-web-vitals', 'next/typescript'],
  }),
]

export default eslintConfig
```

----------------------------------------

TITLE: Importing Global CSS in Next.js App Router Root Layout (TypeScript)
DESCRIPTION: This TypeScript React component defines the root layout for a Next.js App Router application. It imports `global.css`, ensuring that the defined global styles are applied to every route. The layout wraps the application's children within an HTML structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-css.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
// These styles apply to every route in the application
import './global.css'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Defining Next.js Configuration in `next.config.js` (JavaScript)
DESCRIPTION: This snippet demonstrates the basic structure for defining the Next.js configuration in `next.config.js`. It shows how to export the `nextConfig` object, which can include various configuration options, and highlights the use of JSDoc for type hinting to ensure correctness.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-next-config.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
/**
 * @type {import('next').NextConfig}
 */
const nextConfig = {
  /* config options here */
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Defining Page Loading UI with loading.tsx in Next.js
DESCRIPTION: This component defines the loading UI for a Next.js route segment. When placed as `loading.tsx` in a folder, it automatically wraps the corresponding `page.js` and its children in a `<Suspense>` boundary, displaying this fallback while the main page content is rendered. This improves perceived performance by showing immediate feedback to the user and requires the `dynamicIO` config option to be enabled.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-fetching-data.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
export default function Loading() {
  // Define the Loading UI here
  return <div>Loading...</div>
}
```

----------------------------------------

TITLE: Setting X-Content-Type-Options Header
DESCRIPTION: This snippet shows how to set the `X-Content-Type-Options` header to `nosniff`. This prevents browsers from 'sniffing' or guessing the content type of a response if the `Content-Type` header is not explicitly set, thereby mitigating MIME-sniffing attacks and potential XSS exploits, especially for user-uploaded files.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_18

LANGUAGE: JavaScript
CODE:
```
{
  key: 'X-Content-Type-Options',
  value: 'nosniff'
}
```

----------------------------------------

TITLE: Using Remote Images with Next.js Image Component
DESCRIPTION: This snippet demonstrates how to use the Next.js `<Image>` component with remote image URLs. Unlike local images, `width` and `height` props must be manually provided for remote images to ensure correct aspect ratio and prevent layout shifts. Remote image domains must also be configured in `next.config.js` for security.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="https://s3.amazonaws.com/my-bucket/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="https://s3.amazonaws.com/my-bucket/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

----------------------------------------

TITLE: Displaying Pending State with useActionState (TSX)
DESCRIPTION: This client component uses React's useActionState hook to manage the state of a server action (createPost) and display a loading indicator. The 'pending' boolean returned by the hook allows the UI to show a LoadingSpinner while the action is in progress.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-updating-data.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
'use client'

import { useActionState } from 'react'
import { createPost } from '@/app/actions'
import { LoadingSpinner } from '@/app/ui/loading-spinner'

export function Button() {
  const [state, action, pending] = useActionState(createPost, false)

  return (
    <button onClick={async () => action()}>
      {pending ? <LoadingSpinner /> : 'Create Post'}
    </button>
  )
}
```

----------------------------------------

TITLE: Creating Styled Components Global Registry for Server-Side Rendering (JavaScript)
DESCRIPTION: This component creates a global registry for styled-components to collect CSS rules during server-side rendering. It uses `useState` for lazy initialization of `ServerStyleSheet` and `useServerInsertedHTML` to inject collected styles into the `<head>` of the HTML, ensuring styles are available before content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/css-in-js.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
'use client'

import React, { useState } from 'react'
import { useServerInsertedHTML } from 'next/navigation'
import { ServerStyleSheet, StyleSheetManager } from 'styled-components'

export default function StyledComponentsRegistry({ children }) {
  // Only create stylesheet once with lazy initial state
  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state
  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())

  useServerInsertedHTML(() => {
    const styles = styledComponentsStyleSheet.getStyleElement()
    styledComponentsStyleSheet.instance.clearTag()
    return <>{styles}</>
  })

  if (typeof window !== 'undefined') return <>{children}</>

  return (
    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>
      {children}
    </StyleSheetManager>
  )
}
```

----------------------------------------

TITLE: Defining Server Actions to Accept Bound Arguments (Next.js)
DESCRIPTION: This snippet shows the server-side definition of a Server Action (`updateUser`) that is designed to receive additional arguments passed via `Function.prototype.bind` from the client. The first argument (`userId`) is the bound value, followed by the standard `FormData` object, demonstrating how the server function's signature must match the arguments passed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
'use server'

export async function updateUser(userId: string, formData: FormData) {}
```

LANGUAGE: JavaScript
CODE:
```
'use server'

export async function updateUser(userId, formData) {}
```

----------------------------------------

TITLE: Implementing Path Parameter Redirects in Next.js
DESCRIPTION: This snippet demonstrates how to use path parameters in Next.js redirects. The `:slug` parameter in the `source` path `/old-blog/:slug` captures a segment of the URL, which can then be reused in the `destination` path `/news/:slug`. This allows for dynamic redirection of paths like `/old-blog/hello-world` to `/news/hello-world`, maintaining the specific slug.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async redirects() {
    return [
      {
        source: '/old-blog/:slug',
        destination: '/news/:slug', // Matched parameters can be used in the destination
        permanent: true,
      },
    ]
  },
}
```

----------------------------------------

TITLE: Reading Cookies from NextRequest in Next.js Route Handlers
DESCRIPTION: This snippet illustrates how to access cookies directly from the `request` object, specifically using the `NextRequest` type, within a Next.js Route Handler. It provides an alternative method to read incoming cookies without using the `cookies` function from `next/headers`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_8

LANGUAGE: TypeScript
CODE:
```
import { type NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const token = request.cookies.get('token')
}
```

LANGUAGE: JavaScript
CODE:
```
export async function GET(request) {
  const token = request.cookies.get('token')
}
```

----------------------------------------

TITLE: Configuring ESLint with Core Web Vitals in Next.js (Flat Config)
DESCRIPTION: This snippet shows how to configure ESLint in Next.js using the flat config format (eslint.config.mjs) to include the `next/core-web-vitals` rule set. This set promotes best practices for Core Web Vitals by elevating relevant warnings to errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/03-eslint.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
import { FlatCompat } from '@eslint/eslintrc'

const compat = new FlatCompat({
  // import.meta.dirname is available after Node.js v20.11.0
  baseDirectory: import.meta.dirname,
})

const eslintConfig = [
  ...compat.config({
    extends: ['next/core-web-vitals'],
  }),
]

export default eslintConfig
```

----------------------------------------

TITLE: Enabling Typed Routes in Next.js Configuration (JavaScript)
DESCRIPTION: This snippet demonstrates how to enable the experimental `typedRoutes` feature in Next.js by modifying the `next.config.js` file. Setting `typedRoutes: true` within the `experimental` object allows for statically typed links, enhancing type safety in navigation. This feature requires the App Router and TypeScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/typedRoutes.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    typedRoutes: true,
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Correct Multi-match Usage in Next.js Route (After Fix)
DESCRIPTION: This snippet illustrates the correct configuration for a Next.js custom route, resolving the 'Invalid Multi-match' error. By including the `*` with the multi-match parameter `/:path*` in both the `source` and the `destination`, the route correctly captures and forwards the dynamic path segments.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-multi-match.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
{
  source: '/:path*',
  destination: '/another/:path*'
}
```

----------------------------------------

TITLE: Creating Next.js Entrypoint Page with Static Params (TypeScript)
DESCRIPTION: This snippet defines the initial `page.tsx` for a Next.js application, acting as the entry point for an optional catch-all route. It imports global CSS and uses `generateStaticParams` to pre-render only the index route, indicating a Single Page Application setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_9

LANGUAGE: typescript
CODE:
```
import '../../index.css'

export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return '...' // We'll update this
}
```

----------------------------------------

TITLE: Caching Route with Nested Components using use cache - Next.js
DESCRIPTION: Shows that components imported into a page file that uses 'use cache' will inherit the caching behavior. Includes an example of fetching data within a nested asynchronous component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-cache.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use cache'

async function Users() {
  const users = await fetch('/api/users')
  // loop through users
}

export default function Page() {
  return (
    <main>
      <Users />
    </main>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use cache'

async function Users() {
  const users = await fetch('/api/users')
  // loop through users
}

export default function Page() {
  return (
    <main>
      <Users />
    </main>
  )
}
```

----------------------------------------

TITLE: Opting Out of Prefetching with `prefetch={false}` in Next.js Link
DESCRIPTION: This snippet demonstrates how to explicitly disable prefetching for a specific `<Link>` component by setting `prefetch={false}`. This is useful for optimizing performance by preventing unnecessary prefetching of rarely visited pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/prefetch-true-deprecated.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
<Link prefetch={false}>
```

----------------------------------------

TITLE: Configuring width, initialScale, maximumScale, and userScalable (TSX)
DESCRIPTION: This code snippet demonstrates configuring width, initialScale, maximumScale, and userScalable properties in the viewport using TypeScript. It exports a viewport object with these properties set.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import type { Viewport } from 'next'

export const viewport: Viewport = {
  width: 'device-width',
  initialScale: 1,
  maximumScale: 1,
  userScalable: false,
  // Also supported but less commonly used
  // interactiveWidget: 'resizes-visual',
}
```

----------------------------------------

TITLE: Deleting Session Cookie in Next.js (App Router)
DESCRIPTION: This asynchronous function, `deleteSession`, removes the 'session' cookie from the server-side cookie store. It leverages `next/headers` to access and manipulate cookies, ensuring server-only execution. This utility is crucial for logout flows, effectively invalidating the user's session.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_24

LANGUAGE: TypeScript
CODE:
```
import 'server-only'
import { cookies } from 'next/headers'

export async function deleteSession() {
  const cookieStore = await cookies()
  cookieStore.delete('session')
}
```

LANGUAGE: JavaScript
CODE:
```
import 'server-only'
import { cookies } from 'next/headers'

export async function deleteSession() {
  const cookieStore = await cookies()
  cookieStore.delete('session')
}
```

----------------------------------------

TITLE: Configuring Alternate URLs in Next.js Metadata
DESCRIPTION: This snippet demonstrates how to define alternate URLs for canonical, language-specific, media-specific, and type-specific versions of a page using the `alternates` property in Next.js metadata. It helps search engines understand different versions of the content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_43

LANGUAGE: JavaScript
CODE:
```
export const metadata = {
  alternates: {
    canonical: 'https://nextjs.org',
    languages: {
      'en-US': 'https://nextjs.org/en-US',
      'de-DE': 'https://nextjs.org/de-DE',
    },
    media: {
      'only screen and (max-width: 600px)': 'https://nextjs.org/mobile',
    },
    types: {
      'application/rss+xml': 'https://nextjs.org/rss',
    },
  },
}
```

----------------------------------------

TITLE: Generating Viewport with Segment Props in TypeScript
DESCRIPTION: This snippet shows how to define a `generateViewport` function with segment props in a Next.js application using TypeScript. The function receives `params` and `searchParams` as props and returns a viewport object with the `themeColor` property set to 'black'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#_snippet_18

LANGUAGE: TypeScript
CODE:
```
import type { Viewport } from 'next'

type Props = {
  params: Promise<{ id: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}

export function generateViewport({ params, searchParams }: Props): Viewport {
  return {
    themeColor: 'black',
  }
}

export default function Page({ params, searchParams }: Props) {}
```

----------------------------------------

TITLE: Configuring Link Component for Rewritten Paths (Pages Router, JSX)
DESCRIPTION: This React component, designed for the Next.js Pages Router, uses the `Link` component to navigate to the dashboard. It dynamically sets the `href` prop based on user authentication status (using a custom `useIsAuthed` hook) while maintaining the `as="/dashboard"` prop to ensure correct prefetching for the middleware-rewritten route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_33

LANGUAGE: JSX
CODE:
```
'use client'

import Link from 'next/link'
import useIsAuthed from './hooks/useIsAuthed' // Your auth hook

export default function Home() {
  const isAuthed = useIsAuthed()
  const path = isAuthed ? '/auth/dashboard' : '/public/dashboard'
  return (
    <Link as="/dashboard" href={path}>
      Dashboard
    </Link>
  )
}
```

----------------------------------------

TITLE: Using Statically Typed Next.js Links with `href` Casting
DESCRIPTION: This example illustrates the usage of `next/link` with statically typed routes enabled. It shows how TypeScript provides feedback for valid and invalid `href` values, including dynamic segments. For non-literal string `href` values, it demonstrates the necessity of manually casting them with `as Route` to maintain type safety.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#_snippet_4

LANGUAGE: TSX
CODE:
```
import type { Route } from 'next';
import Link from 'next/link'

// No TypeScript errors if href is a valid route
<Link href="/about" />
<Link href="/blog/nextjs" />
<Link href={`/blog/${slug}`} />
<Link href={('/blog' + slug) as Route} />

// TypeScript errors if href is not a valid route
<Link href="/aboot" />
```

----------------------------------------

TITLE: Implementing Context Provider for Authentication in Next.js App Router (TSX)
DESCRIPTION: This snippet demonstrates how to integrate a ContextProvider from an authentication library into the RootLayout of a Next.js App Router application. It wraps the entire application (children) to provide session data, though it's important to note that Server Components rendered first will not have access to this client-side context.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_42

LANGUAGE: tsx
CODE:
```
import { ContextProvider } from 'auth-lib'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <ContextProvider>{children}</ContextProvider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Handling Non-Serializable Props in Client Components
DESCRIPTION: Illustrates a limitation when using 'use client': props passed to Client Components must be serializable. Shows an example where passing a function (onClick) directly as a prop is not allowed because functions are not serializable.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-client.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
'use client'\n\nexport default function Counter({\n  onClick /* ❌ Function is not serializable */,\n}) {\n  return (\n    <div>\n      <button onClick={onClick}>Increment</button>\n    </div>\n  )\n}
```

LANGUAGE: jsx
CODE:
```
'use client'\n\nexport default function Counter({\n  onClick /* ❌ Function is not serializable */,\n}) {\n  return (\n    <div>\n      <button onClick={onClick}>Increment</button>\n    </div>\n  )\n}
```

----------------------------------------

TITLE: Installing Dependencies and Running Development Server with Yarn
DESCRIPTION: These commands first install all project dependencies using Yarn, then start the Next.js development server. This provides an alternative to npm for managing dependencies and running the application locally.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-userbase/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Using Direct Path for href in Next.js (After)
DESCRIPTION: This snippet illustrates the correct way to use `next/link` in the Next.js App Router by providing a direct, static path for the `href`. Dynamic parts of the URL should be resolved to their actual values before being passed to `href`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/app-dir-dynamic-href.mdx#_snippet_2

LANGUAGE: JSX
CODE:
```
<Link href="/route/1">link</Link>
```

----------------------------------------

TITLE: Creating a React Context Provider for Promises
DESCRIPTION: Defines a React Context and Provider component (`UserProvider`) that accepts a Promise as a prop and makes it available to descendant Client Components via a custom hook (`useUser`). Includes TypeScript types.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_1

LANGUAGE: TS
CODE:
```
'use client';

import { createContext, useContext, ReactNode } from 'react';

type User = any;
type UserContextType = {
  userPromise: Promise<User | null>;
};

const UserContext = createContext<UserContextType | null>(null);

export function useUser(): UserContextType {
  let context = useContext(UserContext);
  if (context === null) {
    throw new Error('useUser must be used within a UserProvider');
  }
  return context;
}

export function UserProvider({
  children,
  userPromise
}: {
  children: ReactNode;
  userPromise: Promise<User | null>;
}) {
  return (
    <UserContext.Provider value={{ userPromise }}>
      {children}
    </UserContext.Provider>
  );
}
```

LANGUAGE: JS
CODE:
```
'use client'

import { createContext, useContext, ReactNode } from 'react'

const UserContext = createContext(null)

export function useUser() {
  let context = useContext(UserContext)
  if (context === null) {
    throw new Error('useUser must be used within a UserProvider')
  }
  return context
}

export function UserProvider({ children, userPromise }) {
  return (
    <UserContext.Provider value={{ userPromise }}>
      {children}
    </UserContext.Provider>
  )
}
```

----------------------------------------

TITLE: Handling Expected Errors in Next.js Server Functions (TypeScript/JavaScript)
DESCRIPTION: This snippet defines a server action `createPost` that handles form data submission. It performs a POST request to an API and returns an error message object if the response is not `ok`, modeling expected errors as return values rather than throwing exceptions. It requires `FormData` as input and returns an object with a `message` property on failure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/11-error-handling.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
'use server'

export async function createPost(prevState: any, formData: FormData) {
  const title = formData.get('title')
  const content = formData.get('content')

  const res = await fetch('https://api.vercel.app/posts', {
    method: 'POST',
    body: { title, content },
  })
  const json = await res.json()

  if (!res.ok) {
    return { message: 'Failed to create post' }
  }
}
```

LANGUAGE: JavaScript
CODE:
```
'use server'

export async function createPost(prevState, formData) {
  const title = formData.get('title')
  const content = formData.get('content')

  const res = await fetch('https://api.vercel.app/posts', {
    method: 'POST',
    body: { title, content },
  })
  const json = await res.json()

  if (!res.ok) {
    return { message: 'Failed to create post' }
  }
}
```

----------------------------------------

TITLE: Sending Web Vitals to Google Analytics (JS)
DESCRIPTION: Shows how to integrate `useReportWebVitals` with Google Analytics (using `window.gtag`) to send Web Vitals data, formatting the value for CLS and including the unique metric ID as an event label.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-report-web-vitals.mdx#_snippet_4

LANGUAGE: js
CODE:
```
useReportWebVitals(metric => {
  // Use `window.gtag` if you initialized Google Analytics as this example:
  // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics
  window.gtag('event', metric.name, {
    value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value), // values must be integers
    event_label: metric.id, // id unique to current page load
    non_interaction: true, // avoids affecting bounce rate.
  });
}
```

----------------------------------------

TITLE: Using Templated Title in Next.js Child Page (TSX)
DESCRIPTION: This snippet shows how a child page's title is combined with the `title.template` defined in its parent layout. The `%s` placeholder is replaced by the child's title, resulting in a templated output.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'About',
}

// Output: <title>About | Acme</title>
```

----------------------------------------

TITLE: Opting into Fetch Caching with force-cache (JSX)
DESCRIPTION: This snippet shows how to explicitly enable caching for an individual `fetch` request in Next.js by setting the `cache` option to `force-cache`. This ensures that the data is cached and served from the cache on subsequent requests until revalidated.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_6

LANGUAGE: JSX
CODE:
```
fetch(`https://...`, { cache: 'force-cache' })
```

----------------------------------------

TITLE: Configuring Image Preload Priority in Next.js
DESCRIPTION: The `priority` boolean prop for the Next.js `Image` component indicates if the image should be preloaded, disabling lazy loading. Set to `true` for above-the-fold or Largest Contentful Paint (LCP) images to improve initial page loading performance. Default is `false`, enabling lazy loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#_snippet_11

LANGUAGE: JSX
CODE:
```
<Image priority={false} />
```

----------------------------------------

TITLE: Enabling Incremental PPR in Next.js Configuration (JavaScript)
DESCRIPTION: This snippet demonstrates how to enable incremental Partial Prerendering (PPR) in a Next.js application by setting the `ppr` experimental option to `'incremental'` in `next.config.js`. This global configuration allows specific routes to opt into PPR.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-partial-prerendering.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    ppr: 'incremental',
  },
}
```

----------------------------------------

TITLE: Defining HTTP Method Handlers in Next.js Route Files
DESCRIPTION: This example illustrates how to define various HTTP method handlers (GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS) within a Next.js route file. Each function takes an optional `request` object, allowing for custom logic based on the incoming request. Next.js automatically handles the `OPTIONS` method if not explicitly defined.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
export async function GET(request: Request) {}

export async function HEAD(request: Request) {}

export async function POST(request: Request) {}

export async function PUT(request: Request) {}

export async function DELETE(request: Request) {}

export async function PATCH(request: Request) {}

// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and set the appropriate Response `Allow` header depending on the other methods defined in the Route Handler.
export async function OPTIONS(request: Request) {}
```

LANGUAGE: javascript
CODE:
```
export async function GET(request) {}

export async function HEAD(request) {}

export async function POST(request) {}

export async function PUT(request) {}

export async function DELETE(request) {}

export async function PATCH(request) {}

// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and set the appropriate Response `Allow` header depending on the other methods defined in the Route Handler.
export async function OPTIONS(request) {}
```

----------------------------------------

TITLE: Migrating Route Handlers to Await `params` (TSX)
DESCRIPTION: This snippet shows the modification required for Route Handlers in TypeScript, where the `segmentData.params` object is now a Promise and must be `await`ed before its properties can be accessed. This ensures proper handling of asynchronous route segment data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
// Before
type Params = { slug: string }

export async function GET(request: Request, segmentData: { params: Params }) {
  const params = segmentData.params
  const slug = params.slug
}
```

LANGUAGE: tsx
CODE:
```
// After
type Params = Promise<{ slug: string }>

export async function GET(request: Request, segmentData: { params: Params }) {
  const params = await segmentData.params
  const slug = params.slug
}
```

----------------------------------------

TITLE: Tainting a Unique Value with experimental_taintUniqueValue
DESCRIPTION: This snippet shows how to use `experimental_taintUniqueValue` to prevent a specific sensitive value, like an API key, from being exposed to the client. The `getSystemConfig` function fetches configuration details and then taints `config.SERVICE_API_KEY`, ensuring that this particular value cannot cross the Server-Client boundary, even if it's part of a larger object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/taint.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { experimental_taintUniqueValue } from 'react'

function getSystemConfig(): SystemConfig {
  const config = await config.getConfigDetails()

  experimental_taintUniqueValue(
    'Do not pass configuration tokens to the client',
    config,
    config.SERVICE_API_KEY
  )

  return config
}
```

LANGUAGE: JavaScript
CODE:
```
import { experimental_taintUniqueValue } from 'react'

function getSystemConfig() {
  const config = await config.getConfigDetails()

  experimental_taintUniqueValue(
    'Do not pass configuration tokens to the client',
    config,
    config.SERVICE_API_KEY
  )

  return config
}
```

----------------------------------------

TITLE: Conditional Redirects with Header, Cookie, Query, and Host Matching in Next.js
DESCRIPTION: This comprehensive snippet demonstrates how to apply conditional redirects in Next.js using `has` and `missing` fields. Redirects can be triggered or prevented based on the presence or value of specific HTTP headers, cookies, query parameters, or the request host. It also shows how to capture values from matched fields using named capture groups in regex for use in the destination path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async redirects() {
    return [
      // if the header `x-redirect-me` is present,
      // this redirect will be applied
      {
        source: '/:path((?!another-page$).*)',
        has: [
          {
            type: 'header',
            key: 'x-redirect-me',
          },
        ],
        permanent: false,
        destination: '/another-page',
      },
      // if the header `x-dont-redirect` is present,
      // this redirect will NOT be applied
      {
        source: '/:path((?!another-page$).*)',
        missing: [
          {
            type: 'header',
            key: 'x-do-not-redirect',
          },
        ],
        permanent: false,
        destination: '/another-page',
      },
      // if the source, query, and cookie are matched,
      // this redirect will be applied
      {
        source: '/specific/:path*',
        has: [
          {
            type: 'query',
            key: 'page',
            // the page value will not be available in the
            // destination since value is provided and doesn't
            // use a named capture group e.g. (?<page>home)
            value: 'home',
          },
          {
            type: 'cookie',
            key: 'authorized',
            value: 'true',
          },
        ],
        permanent: false,
        destination: '/another/:path*',
      },
      // if the header `x-authorized` is present and
      // contains a matching value, this redirect will be applied
      {
        source: '/',
        has: [
          {
            type: 'header',
            key: 'x-authorized',
            value: '(?<authorized>yes|true)',
          },
        ],
        permanent: false,
        destination: '/home?authorized=:authorized',
      },
      // if the host is `example.com`,
      // this redirect will be applied
      {
        source: '/:path((?!another-page$).*)',
        has: [
          {
            type: 'host',
            value: 'example.com',
          },
        ],
        permanent: false,
        destination: '/another-page',
      },
    ]
  },
}
```

----------------------------------------

TITLE: Updating URL Search Params with pushState in Next.js
DESCRIPTION: This component demonstrates how to update URL search parameters using `window.history.pushState` in a Next.js client component. It allows adding a new entry to the browser's history stack, enabling users to navigate back. The `updateSorting` function modifies the 'sort' parameter and updates the URL without a full page reload, integrating with `useSearchParams`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function SortProducts() {
  const searchParams = useSearchParams()

  function updateSorting(sortOrder: string) {
    const params = new URLSearchParams(searchParams.toString())
    params.set('sort', sortOrder)
    window.history.pushState(null, '', `?${params.toString()}`)
  }

  return (
    <>
      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>
      <button onClick={() => updateSorting('desc')}>Sort Descending</button>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function SortProducts() {
  const searchParams = useSearchParams()

  function updateSorting(sortOrder) {
    const params = new URLSearchParams(searchParams.toString())
    params.set('sort', sortOrder)
    window.history.pushState(null, '', `?${params.toString()}`)
  }

  return (
    <>
      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>
      <button onClick={() => updateSorting('desc')}>Sort Descending</button>
    </>
  )
}
```

----------------------------------------

TITLE: Invoking Server Functions from Client Components
DESCRIPTION: This example demonstrates how a Client Component (e.g., `app/ui/button.tsx` or `.js`) can invoke a Server Function. The `createPost` Server Function, defined in a separate file with `'use server'`, is imported and then passed to the `formAction` prop of a `<button>`, allowing client-side interaction to trigger a server-side operation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-updating-data.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
'use client'

import { createPost } from '@/app/actions'

export function Button() {
  return <button formAction={createPost}>Create</button>
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import { createPost } from '@/app/actions'

export function Button() {
  return <button formAction={createPost}>Create</button>
}
```

----------------------------------------

TITLE: Calling a Next.js Server Action from a Client Component
DESCRIPTION: This example illustrates how to invoke a Server Action (create) directly from a client component (Button). The Server Action is imported like a regular function and called within an event handler, removing the need for manual API route creation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
'use client'

import { create } from './actions'

export function Button() {
  return <button onClick={() => create()}>Create</button>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { create } from './actions'

export function Button() {
  return <button onClick={() => create()}>Create</button>
}
```

----------------------------------------

TITLE: Basic Client-Side Navigation with Next.js Link Component
DESCRIPTION: This snippet demonstrates how to use the `Link` component from `next/link` to perform client-side route transitions. It shows multiple `Link` components mapping to different static page paths, enabling seamless navigation within a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

function Home() {
  return (
    <ul>
      <li>
        <Link href="/">Home</Link>
      </li>
      <li>
        <Link href="/about">About Us</Link>
      </li>
      <li>
        <Link href="/blog/hello-world">Blog Post</Link>
      </li>
    </ul>
  )
}

export default Home
```

----------------------------------------

TITLE: Page Component Using Synchronous Token Retrieval (Before Next.js 15)
DESCRIPTION: This `Page` component imports and calls the synchronous `getToken` function. In Next.js 15, if `getToken` is not refactored to be async, this will lead to an error due to the `cookies()` function returning a Promise.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { getToken } from '.../token-utils'

export default function Page() {
  const token = getToken();
  validateToken(token)
  return ...
}
```

----------------------------------------

TITLE: Setting Up Contentful Webhook for Next.js On-Demand Revalidation
DESCRIPTION: This URL is configured as a webhook endpoint in Contentful to trigger on-demand revalidation in a deployed Next.js application. When content is published or updated in Contentful, this endpoint is called, prompting Next.js to revalidate the affected pages, ensuring fresh content without a full redeployment. The `<YOUR_VERCEL_DEPLOYMENT_URL>` placeholder must be replaced with the actual deployment URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#_snippet_9

LANGUAGE: HTTP
CODE:
```
https://<YOUR_VERCEL_DEPLOYMENT_URL>/api/revalidate
```

----------------------------------------

TITLE: Encrypting and Decrypting Sessions with Jose in Next.js (JavaScript)
DESCRIPTION: This snippet provides functions to encrypt and decrypt session payloads using the Jose library. It ensures server-side execution with `server-only` and uses `HS256` for signing and verification. The `encrypt` function signs a payload with a 7-day expiration, while `decrypt` verifies a session string, returning the payload or logging an error on failure. It requires `SESSION_SECRET` from environment variables.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_17

LANGUAGE: jsx
CODE:
```
import 'server-only'
import { SignJWT, jwtVerify } from 'jose'

const secretKey = process.env.SESSION_SECRET
const encodedKey = new TextEncoder().encode(secretKey)

export async function encrypt(payload) {
  return new SignJWT(payload)
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setExpirationTime('7d')
    .sign(encodedKey)
}

export async function decrypt(session) {
  try {
    const { payload } = await jwtVerify(session, encodedKey, {
      algorithms: ['HS256'],
    })
    return payload
  } catch (error) {
    console.log('Failed to verify session')
  }
}
```

----------------------------------------

TITLE: Integrating Dynamic User Component with Suspense (TypeScript)
DESCRIPTION: This snippet demonstrates how to integrate a dynamic component (`User`) into a page that uses Partial Prerendering. By wrapping the `User` component with `Suspense`, the static parts of the page are prerendered, while the dynamic `User` component is streamed, improving initial load performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-partial-prerendering.mdx#_snippet_7

LANGUAGE: TSX
CODE:
```
import { Suspense } from 'react'
import { User, AvatarSkeleton } from './user'

export const experimental_ppr = true

export default function Page() {
  return (
    <section>
      <h1>This will be prerendered</h1>
      <Suspense fallback={<AvatarSkeleton />}>
        <User />
      </Suspense>
    </section>
  )
}
```

----------------------------------------

TITLE: Reading Current Time for Caching with 'use cache' in Next.js (After)
DESCRIPTION: This snippet demonstrates the correct way to read the current time for cacheable content in Next.js by moving `new Date().toString()` inside a function marked with `"use cache"`. This ensures the timestamp is captured when the cache entry is created, clarifying the intent for Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time.mdx#_snippet_3

LANGUAGE: JSX
CODE:
```
async function InformationTable() {
  "use cache"
  const data = await fetch(...)
  return (
    <>
      <section>
        <h1>Latest Info...</h1>
        <table>{renderData(data)}</table>
      </section>
      Last Refresh: {new Date().toString()}
    </>
  )
}

export default async function Page() {
  return (
    <main>
      <InformationTable />
    </main>
  )
}
```

----------------------------------------

TITLE: Defining Basic Next.js Middleware with Redirect and Matcher (TSX/JS)
DESCRIPTION: This snippet demonstrates how to define a basic Next.js middleware function that redirects incoming requests using `NextResponse.redirect`. It also shows how to use the `config` object with a `matcher` property to specify the paths where the middleware should execute.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/middleware.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { NextResponse, NextRequest } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request: NextRequest) {
  return NextResponse.redirect(new URL('/home', request.url))
}

export const config = {
  matcher: '/about/:path*',
}
```

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request) {
  return NextResponse.redirect(new URL('/home', request.url))
}

export const config = {
  matcher: '/about/:path*',
}
```

----------------------------------------

TITLE: Implementing Resource Hints with ReactDOM (TypeScript)
DESCRIPTION: This TypeScript snippet shows how to use new `ReactDOM` methods (`preload`, `preconnect`, `prefetchDNS`) to insert resource hints into the document's `<head>`. These methods allow for advanced preloading optimizations, improving page load performance by hinting to the browser about likely needed external resources. The `'use client'` directive indicates this component runs on the client side.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_73

LANGUAGE: tsx
CODE:
```
'use client'

import ReactDOM from 'react-dom'

export function PreloadResources() {
  ReactDOM.preload('...', { as: '...' })
  ReactDOM.preconnect('...', { crossOrigin: '...' })
  ReactDOM.prefetchDNS('...')

  return '...'
}
```

----------------------------------------

TITLE: Incremental Adoption with Fallback Rewrites in Next.js
DESCRIPTION: This configuration sets up a fallback rewrite mechanism in Next.js. After all internal Next.js routes are checked, any unmatched requests will be proxied to a specified external endpoint. This simplifies migrating pages to Next.js by avoiding constant rewrite configuration changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_12

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async rewrites() {
    return {
      fallback: [
        {
          source: '/:path*',
          destination: `https://custom-routes-proxying-endpoint.vercel.app/:path*`,
        },
      ],
    }
  },
}
```

----------------------------------------

TITLE: Accessing URL Search Parameters (`searchParams`) in Next.js Page
DESCRIPTION: This snippet demonstrates how to retrieve URL search parameters using the `searchParams` prop in a Next.js `page` component. `searchParams` is a promise that resolves to an object mapping query keys to their values. Accessing it requires `async/await` and will opt the page into dynamic rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/page.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
export default async function Page({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const filters = (await searchParams).filters
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ searchParams }) {
  const filters = (await searchParams).filters
}
```

----------------------------------------

TITLE: Revalidating `fetch` Data with Time-Based Option
DESCRIPTION: This example shows how to revalidate data fetched using `fetch` after a specified duration. By setting `next: { revalidate: 3600 }`, the data will be revalidated after 3600 seconds (1 hour), ensuring data freshness.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://...', { next: { revalidate: 3600 } })
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://...', { next: { revalidate: 3600 } })
}
```

----------------------------------------

TITLE: Wrapping Third-Party Client-Only Components for Server Component Use in Next.js
DESCRIPTION: This Client Component acts as a simple wrapper for a third-party component (Carousel) that lacks the 'use client' directive but relies on client-only features. By adding 'use client' to this wrapper, the third-party component can now be safely imported and used within Server Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-server-and-client-components.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
'use client'

import { Carousel } from 'acme-carousel'

export default Carousel
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import { Carousel } from 'acme-carousel'

export default Carousel
```

----------------------------------------

TITLE: Disabling Server-Side Rendering for Browser-Only Components in Next.js
DESCRIPTION: This snippet demonstrates how to use `next/dynamic` with `ssr: false` to prevent components that rely on browser-specific APIs (e.g., `window`, `document`) from being rendered on the server. This technique avoids prerendering errors by ensuring such components are only executed client-side.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/prerender-error.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const DynamicComponentWithNoSSR = dynamic(
  () => import('../components/BrowserOnlyComponent'),
  { ssr: false }
)

export default function Page() {
  return (
    <div>
      <h1>My page</h1>
      <DynamicComponentWithNoSSR />
    </div>
  )
}
```

----------------------------------------

TITLE: Fetching Dynamic Page Content with getStaticProps and Params (JavaScript)
DESCRIPTION: This snippet shows how `getStaticProps` works in conjunction with `getStaticPaths` for dynamic routes. It receives `params` (containing the dynamic route segment like `id`) and uses it to fetch specific data for the current page from an external API. The fetched data is then passed as props to the page component for pre-rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/02-static-site-generation.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
export default function Post({ post }) {
  // Render post...
}

export async function getStaticPaths() {
  // ...
}

// This also gets called at build time
export async function getStaticProps({ params }) {
  // params contains the post `id`.
  // If the route is like /posts/1, then params.id is 1
  const res = await fetch(`https://.../posts/${params.id}`)
  const post = await res.json()

  // Pass post data to the page via props
  return { props: { post } }
}
```

----------------------------------------

TITLE: Accessing Dynamic Route Parameters in Next.js Open Graph Image (JavaScript)
DESCRIPTION: This snippet demonstrates how to access dynamic route parameters (`params`) within the default export function of an `opengraph-image.js` file. The `params` object contains route segments from the root down to the image file's location, allowing for dynamic image generation based on URL segments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_10

LANGUAGE: jsx
CODE:
```
export default function Image({ params }) {
  // ...
}
```

----------------------------------------

TITLE: Configuring Wildcard Path Redirects in Next.js
DESCRIPTION: This snippet illustrates how to implement wildcard path matching in Next.js redirects. By appending `*` to a path parameter (e.g., `:slug*`), the redirect can match and capture multiple nested path segments. This enables redirection of paths like `/blog/a/b/c/d` to `/news/a/b/c/d`, making it suitable for redirecting entire sub-trees of a URL structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async redirects() {
    return [
      {
        source: '/blog/:slug*',
        destination: '/news/:slug*', // Matched parameters can be used in the destination
        permanent: true,
      },
    ]
  },
}
```

----------------------------------------

TITLE: Adding Custom Loading Component with `next/dynamic` (Next.js App Router)
DESCRIPTION: This example shows how to use `next/dynamic` to asynchronously load a component (`WithCustomLoading`) and display a custom loading indicator (`<p>Loading...</p>`) while the component is being fetched in a Next.js App Router application. This improves user experience by providing immediate feedback.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
'use client'

import dynamic from 'next/dynamic'

const WithCustomLoading = dynamic(
  () => import('../components/WithCustomLoading'),
  {
    loading: () => <p>Loading...</p>,
  }
)

export default function Page() {
  return (
    <div>
      {/* The loading component will be rendered while  <WithCustomLoading/> is loading */}
      <WithCustomLoading />
    </div>
  )
}
```

----------------------------------------

TITLE: Invalidating Cache with revalidateTag in Next.js Server Action
DESCRIPTION: This server action demonstrates how to use `revalidateTag` to purge cached data associated with the `'my-data'` tag after an operation like adding a post, ensuring the client receives fresh data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#_snippet_2

LANGUAGE: TSX
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('my-data')
}
```

LANGUAGE: JSX
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('my-data')
}
```

----------------------------------------

TITLE: Incorrectly Accessing Cookies in Cached Function - Before
DESCRIPTION: This snippet demonstrates the incorrect way to access `cookies()` within a function marked with `"use cache"`. Calling `cookies()` directly inside `getExampleData` causes the cache to be invalidated on every request, defeating the purpose of caching.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-request-in-use-cache.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
import { cookies } from 'next/headers'

async function getExampleData() {
  "use cache"
  const isLoggedIn = (await cookies()).has('token')
  ...
}

export default async function Page() {
  const data = await getExampleData()
  return ...
}
```

----------------------------------------

TITLE: Using revalidatePath in a Route Handler - Next.js - TypeScript
DESCRIPTION: This Route Handler demonstrates how to dynamically revalidate a path based on a query parameter. It retrieves the 'path' from the request URL and calls `revalidatePath` if a path is provided, returning a JSON response indicating success or a missing path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#_snippet_6

LANGUAGE: ts
CODE:
```
import { revalidatePath } from 'next/cache'
import type { NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const path = request.nextUrl.searchParams.get('path')

  if (path) {
    revalidatePath(path)
    return Response.json({ revalidated: true, now: Date.now() })
  }

  return Response.json({
    revalidated: false,
    now: Date.now(),
    message: 'Missing path to revalidate',
  })
}
```

----------------------------------------

TITLE: Accessing Pathname in Next.js Client Component
DESCRIPTION: This code demonstrates how to retrieve the current URL pathname within a Next.js Client Component. The `usePathname` hook from `next/navigation` is used, providing up-to-date path information for dynamic UI elements like breadcrumbs, as Client Components re-render on navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'

// Simplified breadcrumbs logic
export default function Breadcrumbs() {
  const pathname = usePathname()
  const segments = pathname.split('/')

  return (
    <nav>
      {segments.map((segment, index) => (
        <span key={index}>
          {' > '}
          {segment}
        </span>
      ))}
    </nav>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'

// Simplified breadcrumbs logic
export default function Breadcrumbs() {
  const pathname = usePathname()
  const segments = pathname.split('/')

  return (
    <nav>
      {segments.map((segment, index) => (
        <span key={index}>
          {' > '}
          {segment}
        </span>
      ))}
    </nav>
  )
}
```

----------------------------------------

TITLE: Using Google Font with Specific Weight in Next.js (Roboto)
DESCRIPTION: This example illustrates how to import a non-variable Google Font like Roboto using `next/font/google` and explicitly specify its `weight` property, along with `subsets`. This is crucial for fonts that are not variable, ensuring the correct font variant is loaded and applied to the Root Layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-fonts.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Roboto } from 'next/font/google'

const roboto = Roboto({
  weight: '400',
  subsets: ['latin'],
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={roboto.className}>
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Roboto } from 'next/font/google'

const roboto = Roboto({
  weight: '400',
  subsets: ['latin'],
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={roboto.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Accessing Data Before - Next.js JSX (No Cache/Suspense)
DESCRIPTION: Shows a component accessing asynchronous data (`db.query`) directly without caching or a parent Suspense boundary, which triggers the error when `dynamicIO` is enabled.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-missing-suspense.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
async function getRecentArticles() {
  return db.query(...)
}

export default async function Page() {
  const articles = await getRecentArticles(token);
  return <ArticleList articles={articles}>
}
```

----------------------------------------

TITLE: Generated Localized Sitemap XML
DESCRIPTION: This XML snippet illustrates the structure of a localized sitemap generated by Next.js. It uses the `xhtml:link` element with `rel="alternate"` and `hreflang` attributes to specify alternative language versions for each URL, which is essential for proper international SEO and content discovery by search engines.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#_snippet_7

LANGUAGE: XML
CODE:
```
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xhtml="http://www.w3.org/1999/xhtml">
  <url>
    <loc>https://acme.com</loc>
    <xhtml:link
      rel="alternate"
      hreflang="es"
      href="https://acme.com/es"/>
    <xhtml:link
      rel="alternate"
      hreflang="de"
      href="https://acme.com/de"/>
    <lastmod>2023-04-06T15:02:24.021Z</lastmod>
  </url>
  <url>
    <loc>https://acme.com/about</loc>
    <xhtml:link
      rel="alternate"
      hreflang="es"
      href="https://acme.com/es/about"/>
    <xhtml:link
      rel="alternate"
      hreflang="de"
      href="https://acme.com/de/about"/>
    <lastmod>2023-04-06T15:02:24.021Z</lastmod>
  </url>
  <url>
    <loc>https://acme.com/blog</loc>
    <xhtml:link
      rel="alternate"
      hreflang="es"
      href="https://acme.com/es/blog"/>
    <xhtml:link
      rel="alternate"
      hreflang="de"
      href="https://acme.com/de/blog"/>
    <lastmod>2023-04-06T15:02:24.021Z</lastmod>
  </url>
</urlset>
```

----------------------------------------

TITLE: Incorrectly Passing Dynamic Import Options in Next.js (Before)
DESCRIPTION: This snippet illustrates the incorrect method of passing options to `next/dynamic`. The options object is defined as a separate variable and then passed, which results in an 'Invalid options type' error because `next/dynamic` expects an object literal directly.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-dynamic-options-type.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const options = { loading: () => <p>...</p>, ssr: false }
const DynamicComponent = dynamic(() => import('../components/hello'), options)
```

----------------------------------------

TITLE: Overriding Default Document Component in Next.js (JSX)
DESCRIPTION: This snippet demonstrates the correct way to override the default `Document` component in Next.js within `pages/_document.js`. It shows how to import `Document`, `Html`, `Head`, `Main`, and `NextScript` from `next/document` to properly structure the document and modify the global `<head>` section, preventing unexpected issues caused by importing `next/head`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-head-import-in-document.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Document, { Html, Head, Main, NextScript } from 'next/document'

class MyDocument extends Document {
  static async getInitialProps(ctx) {
    //...
  }

  render() {
    return (
      <Html>
        <Head></Head>
      </Html>
    )
  }
}

export default MyDocument
```

----------------------------------------

TITLE: Incompatible `href` and `as` in Next.js Link Component (JSX)
DESCRIPTION: This snippet demonstrates an incorrect usage of the `next/link` component where a relative `href` (`/invalid`) is combined with an external `as` value (`mailto:john@example.com`). This configuration leads to an error because the `as` prop must also be relative if `href` is relative, or `href` should directly contain the external URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-relative-url-external-as.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page(props) {
  return (
    <>
      <Link href="/invalid" as="mailto:john@example.com">
        <a>Invalid link</a>
      </Link>
    </>
  )
}
```

----------------------------------------

TITLE: Accessing Request Data with headers/cookies in Next.js App (JSX)
DESCRIPTION: Illustrates using the `headers` and `cookies` functions from `next/headers` within Server Components in the `app` directory to access request data. These functions are read-only and can be used directly or within data fetching functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_27

LANGUAGE: JSX
CODE:
```
// `app` directory
import { cookies, headers } from 'next/headers'

async function getData() {
  const authHeader = (await headers()).get('authorization')

  return '...'
}

export default async function Page() {
  // You can use `cookies` or `headers` inside Server Components
  // directly or in your data fetching function
  const theme = (await cookies()).get('theme')
  const data = await getData()
  return '...'
}
```

----------------------------------------

TITLE: Generating Dynamic Open Graph Image with ImageResponse (TypeScript)
DESCRIPTION: This snippet demonstrates how to generate a dynamic Open Graph image for a blog post using `ImageResponse` in Next.js. It defines image metadata (width, height, content type) and asynchronously fetches post data to display the post title within the generated image. It uses JSX and CSS for styling the image content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/13-metadata-and-og-images.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
import { ImageResponse } from 'next/og'
import { getPost } from '@/app/lib/data'

// Image metadata
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

// Image generation
export default async function Image({ params }: { params: { slug: string } }) {
  const post = await getPost(params.slug)

  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {post.title}
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Updating Username with Permanent Redirect in Next.js
DESCRIPTION: This snippet illustrates the use of `permanentRedirect` in a Next.js Server Action to permanently redirect a user to a new profile URL after a username change. It also uses `revalidateTag` to invalidate cached data related to the username, ensuring consistency. This function issues a permanent (308) redirect.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/redirecting.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
'use server'\n\nimport { permanentRedirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function updateUsername(username: string, formData: FormData) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidateTag('username') // Update all references to the username\n  permanentRedirect(`/profile/${username}`) // Navigate to the new user profile\n}
```

LANGUAGE: javascript
CODE:
```
'use server'\n\nimport { permanentRedirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function updateUsername(username, formData) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidateTag('username') // Update all references to the username\n  permanentRedirect(`/profile/${username}`) // Navigate to the new user profile\n}
```

----------------------------------------

TITLE: Implementing Data Transfer Object (DTO) in JavaScript
DESCRIPTION: This snippet demonstrates how to implement a Data Transfer Object (DTO) in JavaScript to control which user data fields are exposed to the client. It includes authorization logic (canSeeUsername, canSeePhoneNumber) to conditionally return sensitive information based on the viewer's permissions, ensuring only necessary and authorized data is transferred.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_35

LANGUAGE: js
CODE:
```
import 'server-only'
import { getUser } from '@/app/lib/dal'

function canSeeUsername(viewer) {
  return true
}

function canSeePhoneNumber(viewer, team) {
  return viewer.isAdmin || team === viewer.team
}

export async function getProfileDTO(slug) {
  const data = await db.query.users.findMany({
    where: eq(users.slug, slug),
    // Return specific columns here
  })
  const user = data[0]

  const currentUser = await getUser(user.id)

  // Or return only what's specific to the query here
  return {
    username: canSeeUsername(currentUser) ? user.username : null,
    phonenumber: canSeePhoneNumber(currentUser, user.team)
      ? user.phonenumber
      : null,
  }
}
```

----------------------------------------

TITLE: Dynamically Importing Named Exports with `next/dynamic` (Next.js App Router)
DESCRIPTION: This snippet illustrates how to dynamically import a named export (`Hello`) from another module (`../components/hello`) using `next/dynamic` in a Next.js App Router component. The `.then((mod) => mod.Hello)` syntax is used to access the specific named export from the imported module.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const ClientComponent = dynamic(() =>
  import('../components/hello').then((mod) => mod.Hello)
)
```

----------------------------------------

TITLE: Accessing Dynamic Route Parameters in Next.js Server Components
DESCRIPTION: This snippet illustrates how to access and use dynamic route parameters (`params`) within an `async` Next.js server component (layout). The `params` prop, which is a promise, is awaited to extract route segments like `team`, enabling the component to display content specific to that parameter.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
export default async function DashboardLayout({
  children,
  params,
}: {
  children: React.ReactNode
  params: Promise<{ team: string }>
}) {
  const { team } = await params

  return (
    <section>
      <header>
        <h1>Welcome to {team}'s Dashboard</h1>
      </header>
      <main>{children}</main>
    </section>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function DashboardLayout({ children, params }) {
  const { team } = await params

  return (
    <section>
      <header>
        <h1>Welcome to {team}'s Dashboard</h1>
      </header>
      <main>{children}</main>
    </section>
  )
}
```

----------------------------------------

TITLE: Reading Nonce in App Router with headers()
DESCRIPTION: Shows how to access the `x-nonce` request header in an App Router Server Component using the `headers()` function from `next/headers` and pass the nonce to the `next/script` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { headers } from 'next/headers'
import Script from 'next/script'

export default async function Page() {
  const nonce = (await headers()).get('x-nonce')

  return (
    <Script
      src="https://www.googletagmanager.com/gtag/js"
      strategy="afterInteractive"
      nonce={nonce}
    />
  )
}
```

LANGUAGE: jsx
CODE:
```
import { headers } from 'next/headers'
import Script from 'next/script'

export default async function Page() {
  const nonce = (await headers()).get('x-nonce')

  return (
    <Script
      src="https://www.googletagmanager.com/gtag/js"
      strategy="afterInteractive"
      nonce={nonce}
    />
  )
}
```

----------------------------------------

TITLE: Routing requests using middleware
DESCRIPTION: This code snippet demonstrates how to use middleware to route requests based on a dynamic condition, such as a feature flag. It checks if the pathname is `/your-path` and if the `myFeatureFlag` is enabled. If both conditions are true, it rewrites the request to the domain specified in `rewriteDomain`, preserving the original pathname and search parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
export async function middleware(request) {
  const { pathname, search } = req.nextUrl;
  if (pathname === '/your-path' && myFeatureFlag.isEnabled()) {
    return NextResponse.rewrite(`${rewriteDomain}${pathname}${search});
  }
}
```

----------------------------------------

TITLE: Implementing Server-Side Form Validation with Zod (JavaScript)
DESCRIPTION: This JavaScript snippet extends a Next.js API Route to include server-side form validation using the Zod library. It defines a Zod schema to validate the request body. The `schema.parse(req.body)` call will throw an error if validation fails, ensuring data integrity before further processing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/forms.mdx#_snippet_5

LANGUAGE: js
CODE:
```
import { z } from 'zod'

const schema = z.object({
  // ...
})

export default async function handler(req, res) {
  const parsed = schema.parse(req.body)
  // ...
}
```

----------------------------------------

TITLE: Fetching and Rendering Remote MDX with App Router (TypeScript)
DESCRIPTION: This snippet demonstrates how to fetch remote MDX content and render it using `MDXRemote` from `next-mdx-remote-client/rsc` within the Next.js App Router. It performs an asynchronous fetch request to retrieve markdown text, which is then passed to the `MDXRemote` component for rendering. This approach is suitable for dynamic content from external sources like CMS or databases.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_36

LANGUAGE: TypeScript
CODE:
```
import { MDXRemote } from 'next-mdx-remote-client/rsc'

export default async function RemoteMdxPage() {
  // MDX text - can be from a database, CMS, fetch, anywhere...
  const res = await fetch('https://...')
  const markdown = await res.text()
  return <MDXRemote source={markdown} />
}
```

----------------------------------------

TITLE: Retrieving Redirects in Next.js App Router (JavaScript)
DESCRIPTION: This JavaScript code fragment demonstrates the core logic for fetching a redirect entry from a `redirects.json` file within a Next.js App Router Route Handler. It checks if the `redirect` exists and returns a `NextResponse` with the redirect data or a 400 status if not found. This snippet assumes `pathname` is already defined and available from the request context.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/redirecting.mdx#_snippet_15

LANGUAGE: JavaScript
CODE:
```
  // Get the redirect entry from the redirects.json file
  const redirect = redirects[pathname]

  // Account for bloom filter false positives
  if (!redirect) {
    return new Response('No redirect', { status: 400 })
  }

  // Return the redirect entry
  return NextResponse.json(redirect)
}
```

----------------------------------------

TITLE: Enabling Dynamic Route for generateViewport (After Suspense)
DESCRIPTION: This snippet shows the fix for accessing Request data in `generateViewport`. By wrapping the document body with a `<Suspense>` boundary in `app/layout.tsx`, the route is explicitly marked as entirely dynamic, allowing `generateViewport` to safely access `cookies()` without error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-viewport.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
import { Suspense } from 'react'
import { cookies } from 'next/headers'

export async function generateViewport() {
  const cookieJar = await cookies()
  return {
    themeColor: cookieJar.get('theme-color'),
  }
}

export default function RootLayout({ children }) {
  return (
    <Suspense>
      <html>
        <body>{children}</body>
      </html>
    </Suspense>
  )
}
```

----------------------------------------

TITLE: Reading Runtime Environment Variables in Next.js App Router (TypeScript)
DESCRIPTION: This snippet demonstrates how to safely read environment variables on the server during dynamic rendering within the Next.js App Router. By using `connection()` or other Dynamic APIs (like `cookies`, `headers`), the page opts into dynamic rendering, ensuring that `process.env.MY_VALUE` is evaluated at runtime rather than build time. This allows for a singular Docker image to be promoted across environments with different variable values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/self-hosting.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { connection } from 'next/server'

export default async function Component() {
  await connection()
  // cookies, headers, and other Dynamic APIs
  // will also opt into dynamic rendering, meaning
  // this env variable is evaluated at runtime
  const value = process.env.MY_VALUE
  // ...
}
```

----------------------------------------

TITLE: Rewriting (Proxying) a URL with NextResponse in TypeScript
DESCRIPTION: This snippet illustrates how to use `NextResponse.rewrite()` to internally proxy a request to a different URL without changing the URL displayed in the browser. This is useful for URL masking or internal routing, where the client remains unaware of the underlying resource location.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#_snippet_8

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'

// Incoming request: /about, browser shows /about
// Rewritten request: /proxy, browser shows /about
return NextResponse.rewrite(new URL('/proxy', request.url))
```

----------------------------------------

TITLE: Passing Data Promise in Next.js Root Layout
DESCRIPTION: Demonstrates how to fetch data (getUser) in the root layout on the server and pass the resulting Promise to a Context Provider without awaiting it. This allows Next.js to start fetching early.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_0

LANGUAGE: TSX
CODE:
```
import { UserProvider } from './user-provider'
import { getUser } from './user' // some server-side function

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  let userPromise = getUser() // do NOT await

  return (
    <html lang="en">
      <body>
        <UserProvider userPromise={userPromise}>{children}</UserProvider>
      </body>
    </html>
  )
}
```

LANGUAGE: JSX
CODE:
```
import { UserProvider } from './user-provider'
import { getUser } from './user' // some server-side function

export default function RootLayout({ children }) {
  let userPromise = getUser() // do NOT await

  return (
    <html lang="en">
      <body>
        <UserProvider userPromise={userPromise}>{children}</UserProvider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Defining onRequestError Parameters in Next.js
DESCRIPTION: This snippet defines the TypeScript types for the `error`, `request`, and `context` parameters passed to the `onRequestError` function. It details the structure of each parameter, including error digest, request path, method, headers, router kind, route path, route type, render source, revalidation reason, and render type, providing comprehensive context for error handling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
export function onRequestError(
  error: { digest: string } & Error,
  request: {
    path: string // resource path, e.g. /blog?name=foo
    method: string // request method. e.g. GET, POST, etc
    headers: { [key: string]: string }
  },
  context: {
    routerKind: 'Pages Router' | 'App Router' // the router type
    routePath: string // the route file path, e.g. /app/blog/[dynamic]
    routeType: 'render' | 'route' | 'action' | 'middleware' // the context in which the error occurred
    renderSource:
      | 'react-server-components'
      | 'react-server-components-payload'
      | 'server-rendering'
    revalidateReason: 'on-demand' | 'stale' | undefined // undefined is a normal request without revalidation
    renderType: 'dynamic' | 'dynamic-resume' // 'dynamic-resume' for PPR
  }
): void | Promise<void>
```

----------------------------------------

TITLE: Gumlet Image Loader Function - JavaScript
DESCRIPTION: Provides a custom loader function for integrating Next.js Image with Gumlet. It constructs the Gumlet URL by setting format, width, and quality parameters based on the provided arguments. Requires the image source, desired width, and optional quality.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/images.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
// Docs: https://docs.gumlet.com/reference/image-transform-size
export default function gumletLoader({ src, width, quality }) {
  const url = new URL(`https://example.com${src}`)
  url.searchParams.set('format', 'auto')
  url.searchParams.set('w', width.toString())
  url.searchParams.set('q', (quality || 75).toString())
  return url.href
}
```

----------------------------------------

TITLE: Defining Next.js Layout with User Data Fetching
DESCRIPTION: This snippet defines a Next.js asynchronous layout component that fetches user data using `getUser()`. It demonstrates how a layout can retrieve user information, deferring the actual authentication check to the data access layer to ensure checks are performed consistently regardless of navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_38

LANGUAGE: tsx
CODE:
```
export default async function Layout({
  children,
}: {
  children: React.ReactNode;
}) {
  const user = await getUser();

  return (
    // ...
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Layout({ children }) {
  const user = await getUser();

  return (
    // ...
  )
}
```

----------------------------------------

TITLE: Opting-in Components with 'use memo' Directive
DESCRIPTION: This snippet demonstrates how to use the `'use memo'` directive at the top of a React component or hook. When the React Compiler is configured in 'annotation' mode, this directive explicitly opts the component into compiler optimization, allowing for selective performance improvements.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/reactCompiler.mdx#_snippet_3

LANGUAGE: ts
CODE:
```
export default function Page() {
  'use memo'
  // ...
}
```

LANGUAGE: js
CODE:
```
export default function Page() {
  'use memo'
  // ...
}
```

----------------------------------------

TITLE: Generating Product Static Params with Parent Category in Next.js
DESCRIPTION: This snippet illustrates how a child route's `generateStaticParams` uses `params` from its parent segment to fetch specific products. It generates static paths for individual `[product]` segments, showcasing top-down parameter generation for nested dynamic routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_12

LANGUAGE: TypeScript
CODE:
```
// Generate segments for [product] using the `params` passed from
// the parent segment's `generateStaticParams` function
export async function generateStaticParams({
  params: { category },
}: {
  params: { category: string }
}) {
  const products = await fetch(
    `https://.../products?category=${category}`
  ).then((res) => res.json())

  return products.map((product) => ({
    product: product.id,
  }))
}

export default function Page({
  params,
}: {
  params: Promise<{ category: string; product: string }>
}) {
  // ...
}
```

LANGUAGE: JavaScript
CODE:
```
// Generate segments for [product] using the `params` passed from
// the parent segment's `generateStaticParams` function
export async function generateStaticParams({ params: { category } }) {
  const products = await fetch(
    `https://.../products?category=${category}`
  ).then((res) => res.json())

  return products.map((product) => ({
    product: product.id,
  }))
}

export default function Page({ params }) {
  // ...
}
```

----------------------------------------

TITLE: Enabling dynamicIO in Next.js Configuration
DESCRIPTION: This configuration snippet enables the `dynamicIO` experimental flag in `next.config.js` or `next.config.ts`, which is a prerequisite for using the `cacheTag` function for on-demand cache invalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheTag.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    dynamicIO: true,
  },
}

export default nextConfig
```

LANGUAGE: JavaScript
CODE:
```
const nextConfig = {
  experimental: {
    dynamicIO: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Implementing React Error Boundary in Next.js (JSX)
DESCRIPTION: This React class component serves as an Error Boundary to gracefully catch JavaScript errors that occur during rendering in a Next.js application. It renders a fallback UI when an error is detected and provides a mechanism to log error information, preventing the entire page from crashing. It requires React as a dependency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/06-configuring/12-error-handling.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props)

    // Define a state variable to track whether is an error or not
    this.state = { hasError: false }
  }
  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI

    return { hasError: true }
  }
  componentDidCatch(error, errorInfo) {
    // You can use your own error logging service here
    console.log({ error, errorInfo })
  }
  render() {
    // Check if the error is thrown
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return (
        <div>
          <h2>Oops, there is an error!</h2>
          <button
            type="button"
            onClick={() => this.setState({ hasError: false })}
          >
            Try again?
          </button>
        </div>
      )
    }

    // Return children components in case of no error

    return this.props.children
  }
}

export default ErrorBoundary
```

----------------------------------------

TITLE: Importing Reactive Time Client Component in Next.js Server Component (After - Server)
DESCRIPTION: This snippet demonstrates how a Next.js Server Component (`Page`) imports and renders the `Timestamp` Client Component. This pattern allows for reactive client-side functionality, like displaying a dynamic timestamp, within a server-rendered page.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time.mdx#_snippet_6

LANGUAGE: JSX
CODE:
```
import { Timestamp } from './client-components'

export default async function Page() {
  return (
    <main>
      ...
      <Timestamp />
    </main>
  )
}
```

----------------------------------------

TITLE: Adding Metadata to Root Layout (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to define static metadata for the root layout using the `Metadata` type from `next`. The `metadata` object allows setting SEO-related properties like `title` and `description` for the entire application, which Next.js uses to manage `<head>` HTML elements.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Home',
  description: 'Welcome to Next.js',
}
```

----------------------------------------

TITLE: Importing Dashboard Layout into Server Layout (After Migration)
DESCRIPTION: This snippet shows how to import the migrated `DashboardLayout` (now a Client Component) into a new `layout.js` file within the `app` directory. This `layout.js` acts as a Server Component, wrapping the `children` with the `DashboardLayout`, effectively replacing the `getLayout` pattern with native nested layouts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_12

LANGUAGE: jsx
CODE:
```
import DashboardLayout from './DashboardLayout'

// This is a Server Component
export default function Layout({ children }) {
  return <DashboardLayout>{children}</DashboardLayout>
}
```

----------------------------------------

TITLE: Accessing Dynamic Route Parameters in default.js
DESCRIPTION: This snippet demonstrates how to access dynamic route parameters within a `default.js` component in Next.js. The `params` prop is an optional promise that resolves to an object containing dynamic route parameters from the root segment down to the slot's subpages. Developers must use `async/await` or React's `use` hook to access these values, enabling the component to render content based on the current URL's dynamic segments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/default.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Default({
  params,
}: {
  params: Promise<{ artist: string }>
}) {
  const { artist } = await params
}
```

LANGUAGE: jsx
CODE:
```
export default async function Default({ params }) {
  const { artist } = await params
}
```

----------------------------------------

TITLE: Importing Font with CSS Variable for Next.js - JSX
DESCRIPTION: This JavaScript React snippet demonstrates importing a Google Font via `next/font/google` and assigning it to a CSS variable. It also imports a CSS module, `component.module.css`, which will utilize this variable. The `variable` option in the font loader configuration allows the font to be referenced globally as a CSS custom property.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#_snippet_44

LANGUAGE: jsx
CODE:
```
import { Inter } from 'next/font/google'
import styles from '../styles/component.module.css'

const inter = Inter({
  variable: '--font-inter',
})
```

----------------------------------------

TITLE: Handling Base Path in Next.js Redirects Configuration
DESCRIPTION: This snippet illustrates how Next.js redirects interact with the `basePath` configuration. When `basePath` is set (e.g., `/docs`), both `source` and `destination` paths are automatically prefixed with it. For external redirects or cases where the `basePath` should not be applied, `basePath: false` can be explicitly set within a redirect object, preventing the automatic prefixing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/redirects.mdx#_snippet_6

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  basePath: '/docs',

  async redirects() {
    return [
      {
        source: '/with-basePath', // automatically becomes /docs/with-basePath
        destination: '/another', // automatically becomes /docs/another
        permanent: false,
      },
      {
        // does not add /docs since basePath: false is set
        source: '/without-basePath',
        destination: 'https://example.com',
        basePath: false,
        permanent: false,
      },
    ]
  },
}
```

----------------------------------------

TITLE: Creating an Index Page in Next.js
DESCRIPTION: This snippet demonstrates how to create a basic index page (/) in a Next.js application using file-system based routing. It exports a simple React component that renders an <h1> tag. This file, page.tsx or page.js, defines the UI for a specific route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Page() {
  return <h1>Hello Next.js!</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return <h1>Hello Next.js!</h1>
}
```

----------------------------------------

TITLE: Creating Next.js Home Page (App Router, TSX)
DESCRIPTION: This Next.js component defines the home page (`/`) for an application using the App Router. It displays a 'Home' heading and includes a `Link` component to navigate to the `/about` page, demonstrating basic page routing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Configuring PostCSS for Tailwind CSS in Next.js
DESCRIPTION: Create a `postcss.config.mjs` file in your project root to configure PostCSS. This configuration adds the `@tailwindcss/postcss` plugin, which is necessary for Tailwind CSS to process your styles correctly within the Next.js build pipeline.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type {import('tailwindcss').Config} */
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
}
```

----------------------------------------

TITLE: Setting Default State for Auth Parallel Route Slot
DESCRIPTION: This snippet defines the `default.tsx` (or `default.js`) file within the `@auth` parallel route slot. Returning `null` ensures that the modal is not rendered when the `@auth` slot is not actively displaying intercepted content, preventing empty modal displays.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/parallel-routes.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
export default function Default() {
  return null
}
```

LANGUAGE: JavaScript
CODE:
```
export default function Default() {
  return null
}
```

----------------------------------------

TITLE: Configuring Server External Packages in Next.js
DESCRIPTION: This snippet demonstrates how to configure `next.config.js` to prevent a specific package from being bundled by Next.js when used in Server Components or Route Handlers. The `serverExternalPackages` array should contain the names of packages to be excluded from bundling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/package-bundling.mdx#_snippet_7

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  serverExternalPackages: ['package-name'],
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Saving Form Field Changes with onChange and Server Actions in Next.js
DESCRIPTION: This snippet illustrates how to use a Server Action (`saveDraft`) to persist changes from a form field (`textarea`) as they are typed, triggered by the `onChange` event. It also shows a form submission using `action={publishPost}`. The description notes the importance of debouncing for actions fired in quick succession.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_10

LANGUAGE: TypeScript
CODE:
```
'use client'

import { publishPost, saveDraft } from './actions'

export default function EditPost() {
  return (
    <form action={publishPost}>
      <textarea
        name="content"
        onChange={async (e) => {
          await saveDraft(e.target.value)
        }}
      />
      <button type="submit">Publish</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Adding Nonce and CSP Header with Next.js Middleware
DESCRIPTION: Explains how to generate a unique nonce and construct a Content Security Policy (CSP) header within a Next.js middleware function. It sets the nonce and CSP header on both the incoming request headers (for potential downstream use) and the outgoing response headers. Requires `next/server`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextRequest, NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const nonce = Buffer.from(crypto.randomUUID()).toString('base64')
  const cspHeader = `
    default-src 'self';
    script-src 'self' 'nonce-${nonce}' 'strict-dynamic';
    style-src 'self' 'nonce-${nonce}';
    img-src 'self' blob: data:;
    font-src 'self';
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
    upgrade-insecure-requests;
`
  // Replace newline characters and spaces
  const contentSecurityPolicyHeaderValue = cspHeader
    .replace(/\s{2,}/g, ' ')
    .trim()

  const requestHeaders = new Headers(request.headers)
  requestHeaders.set('x-nonce', nonce)

  requestHeaders.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )

  const response = NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  })
  response.headers.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )

  return response
}
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  const nonce = Buffer.from(crypto.randomUUID()).toString('base64')
  const cspHeader = `
    default-src 'self';
    script-src 'self' 'nonce-${nonce}' 'strict-dynamic';
    style-src 'self' 'nonce-${nonce}';
    img-src 'self' blob: data:;
    font-src 'self';
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
    upgrade-insecure-requests;
`
  // Replace newline characters and spaces
  const contentSecurityPolicyHeaderValue = cspHeader
    .replace(/\s{2,}/g, ' ')
    .trim()

  const requestHeaders = new Headers(request.headers)
  requestHeaders.set('x-nonce', nonce)
  requestHeaders.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )

  const response = NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  })
  response.headers.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )

  return response
}
```

----------------------------------------

TITLE: Invoking Server Functions via Event Handlers (JSX)
DESCRIPTION: This client component demonstrates how to call a server function (incrementLike) from an event handler (e.g., onClick). It uses React's useState hook to manage and update the UI state (likes) based on the result returned by the server function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-updating-data.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
'use client'

import { incrementLike } from './actions'
import { useState } from 'react'

export default function LikeButton({ initialLikes }) {
  const [likes, setLikes] = useState(initialLikes)

  return (
    <>
      <p>Total Likes: {likes}</p>
      <button
        onClick={async () => {
          const updatedLikes = await incrementLike()
          setLikes(updatedLikes)
        }}
      >
        Like
      </button>
    </>
  )
}
```

----------------------------------------

TITLE: Adding Custom Elements to Head with Next.js Head Component (JSX)
DESCRIPTION: This snippet demonstrates the basic usage of the `next/head` component in a Next.js application. It shows how to import `Head` and use it within a functional component to append custom elements, such as a `<title>` tag, to the HTML `<head>` section of the page. This allows for dynamic control over page metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/head.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
import Head from 'next/head'

function IndexPage() {
  return (
    <div>
      <Head>
        <title>My page title</title>
      </Head>
      <p>Hello world!</p>
    </div>
  )
}

export default IndexPage
```

----------------------------------------

TITLE: HTML Output for Twitter App Card
DESCRIPTION: This HTML snippet displays the `<meta>` tags generated in the `<head>` section for a Next.js application configured with a `twitter` "app" card. It includes specific tags for app names, IDs, and URLs across various mobile platforms, facilitating direct app interaction from Twitter.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_38

LANGUAGE: html
CODE:
```
<meta name="twitter:site:id" content="1467726470533754880" />
<meta name="twitter:creator" content="@nextjs" />
<meta name="twitter:creator:id" content="1467726470533754880" />
<meta name="twitter:title" content="Next.js" />
<meta name="twitter:description" content="The React Framework for the Web" />
<meta name="twitter:card" content="app" />
<meta name="twitter:image" content="https://nextjs.org/og.png" />
<meta name="twitter:image:alt" content="Next.js Logo" />
<meta name="twitter:app:name:iphone" content="twitter_app" />
<meta name="twitter:app:id:iphone" content="twitter_app://iphone" />
<meta name="twitter:app:id:ipad" content="twitter_app://ipad" />
<meta name="twitter:app:id:googleplay" content="twitter_app://googleplay" />
<meta name="twitter:app:url:iphone" content="https://iphone_url" />
<meta name="twitter:app:url:ipad" content="https://ipad_url" />
<meta name="twitter:app:name:ipad" content="twitter_app" />
<meta name="twitter:app:name:googleplay" content="twitter_app" />
```

----------------------------------------

TITLE: Accessing Session Data in Client Component (TSX)
DESCRIPTION: This client component ('use client') illustrates how to consume session data using useSession from an authentication library. It fetches the userId from the session and then uses it to make a client-side data request, typically for displaying user-specific information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_43

LANGUAGE: tsx
CODE:
```
'use client';

import { useSession } from "auth-lib";

export default function Profile() {
  const { userId } = useSession();
  const { data } = useSWR(`/api/user/${userId}`, fetcher)

  return (
    // ...
  );
}
```

----------------------------------------

TITLE: Implementing Full HTML Root Layout in Next.js App Router
DESCRIPTION: This snippet demonstrates how to populate the Next.js root layout with a full HTML structure, similar to a `public/index.html` file in a Create React App. It includes `<html>`, `<head>`, and `<body>` tags, along with meta information, a favicon link, and a title. The `children` prop is rendered inside a `div` with `id="root"`, replacing the original CRA `body div#root`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <head>
        <meta charSet="UTF-8" />
        <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <title>React App</title>
        <meta name="description" content="Web site created..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <title>React App</title>
        <meta name="description" content="Web site created..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Loading Application Scripts in Root Layout (App Router)
DESCRIPTION: Shows how to add a third-party script to the root layout in the Next.js App Router using `next/script`. This script will load and execute when any route in the application is accessed, ensuring it loads only once.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import Script from 'next/script'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
      <Script src="https://example.com/script.js" />
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
      <Script src="https://example.com/script.js" />
    </html>
  )
}
```

----------------------------------------

TITLE: Applying Title Template in Next.js Layout (JSX)
DESCRIPTION: This snippet demonstrates how to use `title.template` in a Next.js layout to add a prefix or suffix to titles defined in child route segments. A `default` title is required when using a template.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: {
    template: '%s | Acme',
    default: 'Acme', // a default is required when creating a template
  },
}
```

----------------------------------------

TITLE: Verifying User Session with DAL in Next.js
DESCRIPTION: This function verifies the user's session by retrieving and decrypting the session cookie. If the session is invalid or lacks a `userId`, the user is redirected to the login page. It uses React's `cache` API to memoize the result, preventing redundant checks during a render pass.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_32

LANGUAGE: TypeScript
CODE:
```
import 'server-only'

import { cookies } from 'next/headers'
import { decrypt } from '@/app/lib/session'

export const verifySession = cache(async () => {
  const cookie = (await cookies()).get('session')?.value
  const session = await decrypt(cookie)

  if (!session?.userId) {
    redirect('/login')
  }

  return { isAuth: true, userId: session.userId }
})
```

LANGUAGE: JavaScript
CODE:
```
import 'server-only'

import { cookies } from 'next/headers'
import { decrypt } from '@/app/lib/session'

export const verifySession = cache(async () => {
  const cookie = (await cookies()).get('session')?.value
  const session = await decrypt(cookie)

  if (!session.userId) {
    redirect('/login')
  }

  return { isAuth: true, userId: session.userId }
})
```

----------------------------------------

TITLE: Loading Third-Party Scripts with Next.js Script Component
DESCRIPTION: This snippet demonstrates the recommended way to load third-party JavaScript in a Next.js application using the `next/script` component. It prevents synchronous script loading, which can block the main thread and degrade performance. The `Script` component handles script optimization automatically.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-sync-scripts.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

function Home() {
  return (
    <div class="container">
      <Script src="https://third-party-script.js"></Script>
      <div>Home Page</div>
    </div>
  )
}

export default Home
```

----------------------------------------

TITLE: Migrating Server-Side Rendering to App Router with Server Components
DESCRIPTION: This snippet demonstrates how to achieve server-side rendering similar to `getServerSideProps` in the `app` directory using `async` Server Components and the `fetch()` API with `cache: 'no-store'`. This approach colocates data fetching within the component, reducing client-side JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_24

LANGUAGE: tsx
CODE:
```
// `app` directory

// This function can be named anything
async function getProjects() {
  const res = await fetch(`https://...`, { cache: 'no-store' })
  const projects = await res.json()

  return projects
}

export default async function Dashboard() {
  const projects = await getProjects()

  return (
    <ul>
      {projects.map((project) => (
        <li key={project.id}>{project.name}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
// `app` directory

// This function can be named anything
async function getProjects() {
  const res = await fetch(`https://...`, { cache: 'no-store' })
  const projects = await res.json()

  return projects
}

export default async function Dashboard() {
  const projects = await getProjects()

  return (
    <ul>
      {projects.map((project) => (
        <li key={project.id}>{project.name}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Accessing Request Data with headers/cookies in Next.js App (TSX)
DESCRIPTION: Illustrates using the `headers` and `cookies` functions from `next/headers` within Server Components in the `app` directory to access request data. These functions are read-only and can be used directly or within data fetching functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_26

LANGUAGE: TSX
CODE:
```
// `app` directory
import { cookies, headers } from 'next/headers'

async function getData() {
  const authHeader = (await headers()).get('authorization')

  return '...'
}

export default async function Page() {
  // You can use `cookies` or `headers` inside Server Components
  // directly or in your data fetching function
  const theme = (await cookies()).get('theme')
  const data = await getData()
  return '...'
}
```

----------------------------------------

TITLE: Submitting Forms with Server Actions in React (TSX)
DESCRIPTION: This component demonstrates how to use a Server Function (e.g., createPost) as the 'action' prop of an HTML <form> element in a React component. When the form is submitted, the 'createPost' function will automatically receive the FormData object, allowing server-side processing of the form inputs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-updating-data.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { createPost } from '@/app/actions'

export function Form() {
  return (
    <form action={createPost}>
      <input type="text" name="title" />
      <input type="text" name="content" />
      <button type="submit">Create</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Creating User Session in Next.js (TypeScript)
DESCRIPTION: This TypeScript function `createSession` sets an HttpOnly, Secure, SameSite=lax cookie for user sessions in a Next.js application. It takes a `userId`, encrypts the session data, and sets an expiration date for the cookie, ensuring server-side only access and secure transmission.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_18

LANGUAGE: TypeScript
CODE:
```
import 'server-only'
import { cookies } from 'next/headers'

export async function createSession(userId: string) {
  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
  const session = await encrypt({ userId, expiresAt })
  const cookieStore = await cookies()

  cookieStore.set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expiresAt,
    sameSite: 'lax',
    path: '/',
  })
}
```

----------------------------------------

TITLE: Creating Database Sessions with Next.js App Router (JavaScript)
DESCRIPTION: This snippet demonstrates how to create a new session in a database and store its encrypted ID in a cookie using the Next.js App Router. It involves inserting session data into the database, encrypting the session ID, and setting an httpOnly cookie for secure storage and optimistic authentication checks. Requires `next/headers`, a database client (`@/app/lib/db`), and an encryption utility (`@/app/lib/session`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_28

LANGUAGE: JavaScript
CODE:
```
import cookies from 'next/headers'
import { db } from '@/app/lib/db'
import { encrypt } from '@/app/lib/session'

export async function createSession(id) {
  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)

  // 1. Create a session in the database
  const data = await db
    .insert(sessions)
    .values({
      userId: id,
      expiresAt,
    })
    // Return the session ID
    .returning({ id: sessions.id })

  const sessionId = data[0].id

  // 2. Encrypt the session ID
  const session = await encrypt({ sessionId, expiresAt })

  // 3. Store the session in cookies for optimistic auth checks
  const cookieStore = await cookies()
  cookieStore.set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expiresAt,
    sameSite: 'lax',
    path: '/',
  })
}
```

----------------------------------------

TITLE: Configuring CORS Headers in Next.js
DESCRIPTION: This `next.config.js` snippet demonstrates how to configure Cross-Origin Resource Sharing (CORS) headers for API routes. It sets `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, and `Access-Control-Allow-Headers` to control which origins can access resources and what HTTP methods and headers are permitted, enhancing security for API endpoints.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_13

LANGUAGE: JavaScript
CODE:
```
async headers() {
    return [
      {
        source: "/api/:path*",
        headers: [
          {
            key: "Access-Control-Allow-Origin",
            value: "*", // Set your origin
          },
          {
            key: "Access-Control-Allow-Methods",
            value: "GET, POST, PUT, DELETE, OPTIONS",
          },
          {
            key: "Access-Control-Allow-Headers",
            value: "Content-Type, Authorization",
          },
        ],
      },
    ];
  },
```

----------------------------------------

TITLE: Using Local Images with Next.js Image Component
DESCRIPTION: This snippet illustrates how to use the Next.js `<Image>` component with local images stored in the `public` directory. Next.js automatically provides `width`, `height`, and `blurDataURL` for local images, preventing layout shifts. An optional `placeholder="blur"` prop can be used for a blur-up effect during loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-images.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="/profile.png"
      alt="Picture of the author"
      // width={500} automatically provided
      // height={500} automatically provided
      // blurDataURL="data:..." automatically provided
      // placeholder="blur" // Optional blur-up while loading
    />
  )
}
```

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="/profile.png"
      alt="Picture of the author"
      // width={500} automatically provided
      // height={500} automatically provided
      // blurDataURL="data:..." automatically provided
      // placeholder="blur" // Optional blur-up while loading
    />
  )
}
```

----------------------------------------

TITLE: Accessing Dynamic Route Parameters with useParams (JavaScript)
DESCRIPTION: This example illustrates the use of the `useParams` hook in a Next.js Client Component to retrieve dynamic route parameters from the current URL. It demonstrates how the `params` object reflects the values from dynamic segments like `/shop/[tag]/[item]`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-params.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
'use client'

import { useParams } from 'next/navigation'

export default function ExampleClientComponent() {
  const params = useParams()

  // Route -> /shop/[tag]/[item]
  // URL -> /shop/shoes/nike-air-max-97
  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }
  console.log(params)

  return '...'
}
```

----------------------------------------

TITLE: Creating an Active Blog Nav Link Component (TypeScript)
DESCRIPTION: This client-side React component uses `next/link` and `next/navigation`'s `useSelectedLayoutSegment` hook to create a navigation link. It dynamically applies 'bold' font weight if its `slug` prop matches the currently selected layout segment, indicating an active link. It requires `slug` and `children` props.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-selected-layout-segment.mdx#_snippet_2

LANGUAGE: TSX
CODE:
```
'use client'\n\nimport Link from 'next/link'\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\n// This *client* component will be imported into a blog layout\nexport default function BlogNavLink({\n  slug,\n  children,\n}: {\n  slug: string\n  children: React.ReactNode\n}) {\n  // Navigating to `/blog/hello-world` will return 'hello-world'\n  // for the selected layout segment\n  const segment = useSelectedLayoutSegment()\n  const isActive = slug === segment\n\n  return (\n    <Link\n      href={`/blog/${slug}`}\n      // Change style depending on whether the link is active\n      style={{ fontWeight: isActive ? 'bold' : 'normal' }}\n    >\n      {children}\n    </Link>\n  )\n}
```

----------------------------------------

TITLE: Setting Image Quality with Quality Prop (JSX)
DESCRIPTION: This example shows how to set the `quality` prop for the `next/image` component. The value, an integer between 1 and 100, controls the compression quality of the optimized image, balancing file size and visual fidelity.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#_snippet_9

LANGUAGE: JSX
CODE:
```
// Default quality is 75
<Image quality={75} />
```

----------------------------------------

TITLE: Integrating Search Component in Next.js Layout
DESCRIPTION: This snippet shows how a Next.js layout can incorporate a Client Component that accesses dynamic query parameters. By rendering the `Search` Client Component within the layout, the layout can indirectly display information dependent on search parameters, even though the layout itself does not re-render.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import Search from '@/app/ui/search'

export default function Layout({ children }) {
  return (
    <>
      <Search />
      {children}
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Search from '@/app/ui/search'

export default function Layout({ children }) {
  return (
    <>
      <Search />
      {children}
    </>
  )
}
```

----------------------------------------

TITLE: Using Localization Dictionary in Next.js Page Component (TSX)
DESCRIPTION: This TypeScript snippet demonstrates how to fetch and utilize the localized dictionary within a Next.js App Router page component. It retrieves the current locale from `params`, loads the corresponding dictionary using `getDictionary`, and then accesses translated strings for display.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/internationalization.mdx#_snippet_8

LANGUAGE: TSX
CODE:
```
import { getDictionary } from './dictionaries'

export default async function Page({
  params,
}: {
  params: Promise<{ lang: 'en' | 'nl' }>
}) {
  const { lang } = await params
  const dict = await getDictionary(lang) // en
  return <button>{dict.products.cart}</button> // Add to Cart
}
```

----------------------------------------

TITLE: Nesting Client Components within Server Components
DESCRIPTION: Shows how to combine Server and Client Components by importing and rendering a Client Component (Counter) within a Server Component (Page). This composition allows leveraging the benefits of both rendering environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/01-directives/use-client.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import Header from './header'\nimport Counter from './counter' // This is a Client Component\n\nexport default function Page() {\n  return (\n    <div>\n      <Header />\n      <Counter />\n    </div>\n  )\n}
```

LANGUAGE: jsx
CODE:
```
import Header from './header'\nimport Counter from './counter' // This is a Client Component\n\nexport default function Page() {\n  return (\n    <div>\n      <Header />\n      <Counter />\n    </div>\n  )\n}
```

----------------------------------------

TITLE: Generating Multiple Image Metadata and Rendering Dynamic Icons (Next.js)
DESCRIPTION: This example illustrates how `generateImageMetadata` returns an array of image metadata objects, each with a unique `id`. The `id` is then passed as a prop to the default exported component (e.g., `Icon`), enabling the component to render different image versions based on the metadata. `ImageResponse` is used to create dynamic images for Open Graph or other metadata purposes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-image-metadata.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import { ImageResponse } from 'next/og'

export function generateImageMetadata() {
  return [
    {
      contentType: 'image/png',
      size: { width: 48, height: 48 },
      id: 'small',
    },
    {
      contentType: 'image/png',
      size: { width: 72, height: 72 },
      id: 'medium',
    },
  ]
}

export default function Icon({ id }: { id: string }) {
  return new ImageResponse(
    (
      <div
        style={{
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: 88,
          background: '#000',
          color: '#fafafa',
        }}
      >
        Icon {id}
      </div>
    )
  )
}
```

LANGUAGE: javascript
CODE:
```
import { ImageResponse } from 'next/og'

export function generateImageMetadata() {
  return [
    {
      contentType: 'image/png',
      size: { width: 48, height: 48 },
      id: 'small',
    },
    {
      contentType: 'image/png',
      size: { width: 72, height: 72 },
      id: 'medium',
    },
  ]
}

export default function Icon({ id }) {
  return new ImageResponse(
    (
      <div
        style={{
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: 88,
          background: '#000',
          color: '#fafafa',
        }}
      >
        Icon {id}
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Reading Cookies in a Server Component
DESCRIPTION: This snippet demonstrates how to read cookies within a Next.js Server Component using the `cookies` function from `next/headers`. It shows how to import the function, get the cookie store, and retrieve a specific cookie by name.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}
```

LANGUAGE: js
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}
```

----------------------------------------

TITLE: Using Closures with Next.js Server Actions for Data Snapshots (TypeScript)
DESCRIPTION: This TypeScript React component illustrates how a Server Action defined within a component forms a closure, allowing it to access variables from its outer scope, such as `publishVersion`. This captures a snapshot of data at render time, which is then automatically encrypted by Next.js when sent to the client and back to the server.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const publishVersion = await getLatestVersion();

  async function publish() {
    "use server";
    if (publishVersion !== await getLatestVersion()) {
      throw new Error('The version has changed since pressing publish');
    }
    ...
  }

  return (
    <form>
      <button formAction={publish}>Publish</button>
    </form>
  );
}
```

----------------------------------------

TITLE: Fetching Data in Server Component (TSX)
DESCRIPTION: Demonstrates how to use the extended `fetch` function within an `async` Server Component written in TSX to fetch data from an external API and render it.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/fetch.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  let data = await fetch('https://api.vercel.app/blog')
  let posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Caching `generateMetadata()` data with `'use cache'` in Next.js (After)
DESCRIPTION: This snippet shows the corrected approach where the data lookup within `generateMetadata()` is explicitly marked as cacheable using `'use cache'`. By doing so, Next.js can include the metadata in the prerender for the route, aligning its data requirements with the rest of the static page content and resolving the 'Cannot access Request information or uncached data' error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-metadata.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { cms } from './cms'

export async function generateMetadata() {
  // By marking this function as cacheable, Next.js
  // can now include it in the prerender for this route.
  'use cache'
  const { title } = await cms.getPageData('/.../page')
  return {
    title,
  }
}

async function getPageText() {
  'use cache'
  const { text } = await cms.getPageData('/.../page')
  return text
}

export default async function Page() {
  // This text is cached so the main content of this route
  // is prerenderable.
  const text = await getPageText()
  return <article>{text}</article>
}
```

----------------------------------------

TITLE: Securing Next.js API Route with Authentication and Authorization (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to secure a Next.js API Route by implementing both authentication and authorization checks. It first verifies if a user session exists, returning a 401 if not, and then checks if the authenticated user possesses the required 'admin' role before allowing access to the route's core logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_46

LANGUAGE: js
CODE:
```
export default async function handler(req, res) {
  const session = await getSession(req)

  // Check if the user is authenticated
  if (!session) {
    res.status(401).json({
      error: 'User is not authenticated',
    })
    return
  }

  // Check if the user has the 'admin' role
  if (session.user.role !== 'admin') {
    res.status(401).json({
      error: 'Unauthorized access: User does not have admin privileges.',
    })
    return
  }

  // Proceed with the route for authorized users
  // ... implementation of the API Route
}
```

----------------------------------------

TITLE: Generating Static Params for Multiple Dynamic Segments (Next.js JSX)
DESCRIPTION: This snippet provides a JavaScript example for generating static parameters for a route with multiple dynamic segments, such as `[category]` and `[product]`. The `generateStaticParams` function fetches product data and transforms it into an array of parameter objects, each defining values for the dynamic segments. This approach allows Next.js to pre-render specific combinations of categories and products.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-static-params.mdx#_snippet_10

LANGUAGE: jsx
CODE:
```
// Generate segments for both [category] and [product]
export async function generateStaticParams() {
  const products = await fetch('https://.../products').then((res) => res.json())

  return products.map((product) => ({
    category: product.category.slug,
    product: product.id,
  }))
}

export default function Page({ params }) {
  // ...
}
```

----------------------------------------

TITLE: revalidatePath Function Signature - Next.js - TypeScript
DESCRIPTION: This snippet defines the TypeScript signature for the `revalidatePath` function. It accepts a `path` string to identify the data to revalidate and an optional `type` parameter ('page' or 'layout') to specify the revalidation scope, particularly for dynamic segments. The function does not return any value.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/revalidatePath.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
revalidatePath(path: string, type?: 'page' | 'layout'): void;
```

----------------------------------------

TITLE: Using Next.js Layout Params Synchronously (TypeScript)
DESCRIPTION: This snippet shows how to use `params` synchronously in Next.js 15 layouts using the `use` hook from React. This allows for a synchronous component structure while still handling the asynchronous `params` prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_13

LANGUAGE: typescript
CODE:
```
// Before
type Params = { slug: string }

export default function Layout({
  children,
  params,
}: {
  children: React.ReactNode
  params: Params
}) {
  const { slug } = params
}

// After
import { use } from 'react'

type Params = Promise<{ slug: string }>

export default function Layout(props: {
  children: React.ReactNode
  params: Params
}) {
  const params = use(props.params)
  const slug = params.slug
}
```

----------------------------------------

TITLE: Implementing Role-Based Access Control in Next.js Server Components (JavaScript)
DESCRIPTION: This snippet shows how to perform an authentication check within a Next.js Server Component using JavaScript to conditionally render UI based on the user's role. It leverages a verifySession function from a Data Access Layer (DAL) to retrieve the user's role and redirects unauthorized users to a login page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_37

LANGUAGE: jsx
CODE:
```
import { verifySession } from '@/app/lib/dal'

export default function Dashboard() {
  const session = await verifySession()
  const userRole = session.role // Assuming 'role' is part of the session object

  if (userRole === 'admin') {
    return <AdminDashboard />
  } else if (userRole === 'user') {
    return <UserDashboard />
  } else {
    redirect('/login')
  }
}
```

----------------------------------------

TITLE: Loading Variable Google Font in Next.js App Router
DESCRIPTION: This snippet demonstrates how to load a variable Google Font (`Inter`) using `next/font/google` in a Next.js App Router `layout.tsx`/`layout.js` file. It initializes the font with `latin` subsets and `swap` display, then applies it globally to the `<html>` element via `className`. This approach automatically handles font optimization without requiring explicit weight specification.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
import { Inter } from 'next/font/google'

// If loading a variable font, you don't need to specify the font weight
const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Inter } from 'next/font/google'

// If loading a variable font, you don't need to specify the font weight
const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Generating Static Routes for Locales in Next.js Layout (JSX)
DESCRIPTION: This JavaScript snippet shows how to use `generateStaticParams` in a Next.js App Router root layout to pre-render static routes for a defined set of locales (e.g., 'en-US', 'de'). This optimizes performance by generating pages at build time for each specified locale.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/internationalization.mdx#_snippet_11

LANGUAGE: JSX
CODE:
```
export async function generateStaticParams() {
  return [{ lang: 'en-US' }, { lang: 'de' }]
}

export default async function RootLayout({ children, params }) {
  return (
    <html lang={(await params).lang}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Sequential Data Fetching in Next.js Page (TypeScript)
DESCRIPTION: This snippet demonstrates sequential data fetching within a Next.js page component. The `getAlbums` request is blocked and will only start after `getArtist` has fully resolved, leading to a waterfall effect. This approach can be inefficient for multiple independent data requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-fetching-data.mdx#_snippet_11

LANGUAGE: TypeScript
CODE:
```
import { getArtist, getAlbums } from '@/app/lib/data'

export default async function Page({ params }) {
  // These requests will be sequential
  const { username } = await params
  const artist = await getArtist(username)
  const albums = await getAlbums(username)
  return <div>{artist.name}</div>
}
```

----------------------------------------

TITLE: Configuring Basic Rewrites in Next.js (JavaScript)
DESCRIPTION: This snippet demonstrates the fundamental way to set up a rewrite in Next.js. It maps an incoming request path, `/about`, to a different internal destination path, `/`, effectively proxying the content without changing the URL displayed to the user. This configuration is placed within the `rewrites` async function in `next.config.js`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  async rewrites() {
    return [
      {
        source: '/about',
        destination: '/',
      },
    ]
  },
}
```

----------------------------------------

TITLE: Defining Metadata with Built-in SEO in App Directory (TypeScript)
DESCRIPTION: This snippet shows how to define page metadata, such as the title, using the new built-in SEO support in the Next.js `app` directory. It exports a `metadata` object of type `Metadata` to configure the page's head elements, replacing the need for `next/head`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_15

LANGUAGE: TypeScript
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'My Page Title',
}

export default function Page() {
  return '...'
}
```

----------------------------------------

TITLE: Enabling Partial Prerendering for a Page in Next.js
DESCRIPTION: This code snippet illustrates how to opt a specific page or layout into Partial Prerendering by exporting `experimental_ppr = true`. It also shows the use of React's `Suspense` to wrap dynamic components, allowing the static parts of the page to be prerendered while the dynamic content is streamed. This enables a hybrid static and dynamic rendering approach for improved performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/ppr.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { Suspense } from "react"
import { StaticComponent, DynamicComponent, Fallback } from "@/app/ui"

export const experimental_ppr = true

export default function Page() {
  return {
     <>
      <StaticComponent />
      <Suspense fallback={<Fallback />}>
        <DynamicComponent />
      </Suspense>
     </>
  };
}
```

LANGUAGE: JavaScript
CODE:
```
import { Suspense } from "react"
import { StaticComponent, DynamicComponent, Fallback } from "@/app/ui"

export const experimental_ppr = true

export default function Page() {
  return {
     <>
      <StaticComponent />
      <Suspense fallback={<Fallback />}>
        <DynamicComponent />
      </Suspense>
     </>
  };
}
```

----------------------------------------

TITLE: Configuring Robots Metadata for SEO in Next.js (TSX)
DESCRIPTION: This snippet demonstrates how to configure `robots` metadata in Next.js using TypeScript, specifying directives for search engine crawlers like `index`, `follow`, and `nocache`. It also includes specific `googleBot` settings for image preview, video preview, and snippet length, defined within the `metadata` export in `layout.tsx` or `page.tsx`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_27

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  robots: {
    index: true,
    follow: true,
    nocache: false,
    googleBot: {
      index: true,
      follow: true,
      noimageindex: false,
      'max-video-preview': -1,
      'max-image-preview': 'large',
      'max-snippet': -1,
    },
  },
}
```

----------------------------------------

TITLE: Configuring Next.js for Standalone Output (JavaScript)
DESCRIPTION: This configuration snippet enables the 'standalone' output mode in Next.js. When enabled, Next.js will create a `.next/standalone` folder containing only the necessary files for a production deployment, including select `node_modules`, allowing the application to run without installing all dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/output.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  output: 'standalone',
}
```

----------------------------------------

TITLE: Updating Next.js to Latest Version
DESCRIPTION: This command updates the Next.js framework to its latest stable version using npm. It is a prerequisite for utilizing new features introduced in Next.js 13.4 or greater, such as the `app` directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
npm install next@latest
```

----------------------------------------

TITLE: Configuring Incremental Partial Prerendering in Next.js
DESCRIPTION: This configuration snippet demonstrates how to enable incremental Partial Prerendering (PPR) across a Next.js application. By setting `experimental.ppr` to 'incremental' in `next.config.js`, the application is configured to leverage PPR for routes that explicitly opt-in. This is a global setting that applies to the entire Next.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/ppr.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    ppr: 'incremental',
  },
}

export default nextConfig
```

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    ppr: 'incremental',
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Generating Open Graph Image with ImageResponse in JavaScript
DESCRIPTION: This snippet illustrates how to generate an Open Graph image using the `ImageResponse` API from `next/og` in a Next.js `opengraph-image.js` route. It demonstrates the process of loading a font, exporting image metadata (alt, size, contentType), and rendering JSX to produce the image. This approach allows for dynamic image generation based on page content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
import { ImageResponse } from 'next/og'
import { readFile } from 'node:fs/promises'
import { join } from 'node:path'

// Image metadata
export const alt = 'About Acme'
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

// Image generation
export default async function Image() {
  // Font loading, process.cwd() is Next.js project directory
  const interSemiBold = await readFile(
    join(process.cwd(), 'assets/Inter-SemiBold.ttf')
  )

  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        About Acme
      </div>
    ),
    // ImageResponse options
    {
      // For convenience, we can re-use the exported opengraph-image
      // size config to also set the ImageResponse's width and height.
      ...size,
      fonts: [
        {
          name: 'Inter',
          data: interSemiBold,
          style: 'normal',
          weight: 400,
        },
      ],
    }
  )
}
```

----------------------------------------

TITLE: Generating Open Graph Image with ImageResponse (app/opengraph-image.tsx)
DESCRIPTION: Shows how to use `ImageResponse` in a `opengraph-image.tsx` file to generate Open Graph images, either at build time or dynamically. It defines metadata like `alt`, `size`, and `contentType`, and then exports an `Image` function that returns a new `ImageResponse` with a JSX element and size options.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/image-response.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { ImageResponse } from 'next/og'

// Image metadata
export const alt = 'My site'
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

// Image generation
export default async function Image() {
  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        My site
      </div>
    ),
    // ImageResponse options
    {
      // For convenience, we can re-use the exported opengraph-image
      // size config to also set the ImageResponse's width and height.
      ...size,
    }
  )
}
```

----------------------------------------

TITLE: Configuring Route Segment Options for Next.js Route Handler (TypeScript)
DESCRIPTION: This snippet illustrates how to apply route segment configuration options to a Next.js Route Handler. It exports constants like `dynamic`, `dynamicParams`, `revalidate`, `fetchCache`, `runtime`, and `preferredRegion` to control caching behavior, data fetching, and deployment environment for the specific route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_24

LANGUAGE: ts
CODE:
```
export const dynamic = 'auto'
export const dynamicParams = true
export const revalidate = false
export const fetchCache = 'auto'
export const runtime = 'nodejs'
export const preferredRegion = 'auto'
```

----------------------------------------

TITLE: Integrating Google Fonts with Tailwind CSS in App Router (TypeScript)
DESCRIPTION: This snippet demonstrates how to use Google Fonts (`Inter`, `Roboto_Mono`) with Tailwind CSS in a Next.js App Router layout. It imports fonts from `next/font/google`, defines them with `variable` names, and applies these CSS variables to the `<html>` tag, enabling their use in Tailwind classes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#_snippet_35

LANGUAGE: tsx
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
})

const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto-mono',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html
      lang="en"
      className={`${inter.variable} ${roboto_mono.variable} antialiased`}
    >
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Updating Next.js and React Dependencies in package.json (Diff)
DESCRIPTION: This snippet shows the necessary changes in `package.json` to upgrade Next.js, React, and React-DOM to their respective React 19 compatible versions. It also includes `pnpm` overrides for `@types/react` and `@types/react-dom` to ensure correct type resolution for React 19.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-codemod/bin/__testfixtures__/next-14-installed/README.md#_snippet_0

LANGUAGE: diff
CODE:
```
diff --git a/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json b/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json
index 5ec4c37f0b..131f5b9f4a 100644
--- a/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json
+++ b/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json
@@ -4,10 +4,16 @@
     "dev": "next dev"
   },
   "dependencies": {
-    "next": "14.3.0-canary.44",
-    "react": "18.2.0",
-    "react-dom": "18.2.0",
-    "@types/react": "^18.2.0",
-    "@types/react-dom": "^18.2.0"
+    "next": "15.0.4-canary.43",
+    "react": "19.0.0",
+    "react-dom": "19.0.0",
+    "@types/react": "19.0.0",
+    "@types/react-dom": "19.0.0"
+  },
+  "pnpm": {
+    "overrides": {
+      "@types/react": "19.0.0",
+      "@types/react-dom": "19.0.0"
+    }
   }
 }
```

----------------------------------------

TITLE: Caching Data Fetching with React Cache (TypeScript)
DESCRIPTION: This TypeScript utility snippet demonstrates how to create a reusable and cached data fetching function using React's `cache` API and the `server-only` package. The `getItem` function is wrapped with `cache` to ensure its results are memoized on the server, preventing redundant fetches. A `preload` function is also provided to eagerly initiate the cached `getItem` call.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-fetching-data.mdx#_snippet_16

LANGUAGE: ts
CODE:
```
import { cache } from 'react'
import 'server-only'
import { getItem } from '@/lib/data'

export const preload = (id: string) => {
  void getItem(id)
}

export const getItem = cache(async (id: string) => {
  // ...
})
```

----------------------------------------

TITLE: Implementing Form with Navigation Blocker Context
DESCRIPTION: This React form component integrates with the `useNavigationBlocker` hook to control the navigation blocking state. It sets `isBlocked` to `true` when the form content changes (indicating unsaved changes) and resets `isBlocked` to `false` when the form is submitted, allowing navigation to proceed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_35

LANGUAGE: TypeScript
CODE:
```
'use client'

import { useNavigationBlocker } from '../contexts/navigation-blocker'

export default function Form() {
  const { setIsBlocked } = useNavigationBlocker()

  return (
    <form
      onSubmit={(e) => {
        e.preventDefault()
        setIsBlocked(false)
      }}
      onChange={() => setIsBlocked(true)}
    >
      <input type="text" name="name" />
      <button type="submit">Save</button>
    </form>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import { useNavigationBlocker } from '../contexts/navigation-blocker'

export default function Form() {
  const { setIsBlocked } = useNavigationBlocker()

  return (
    <form
      onSubmit={(e) => {
        e.preventDefault()
        setIsBlocked(false)
      }}
      onChange={() => setIsBlocked(true)}
    >
      <input type="text" name="name" />
      <button type="submit">Save</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Handling Unauthorized Access in a Next.js Server Component
DESCRIPTION: This example demonstrates how to use the `unauthorized` function within a Next.js Server Component to protect a dashboard page. It checks for an active user session using `verifySession` and, if no session is found, invokes `unauthorized()` to render a 401 error page. This ensures only authenticated users can access the dashboard content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unauthorized.mdx#_snippet_1

LANGUAGE: TSX
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export default async function DashboardPage() {
  const session = await verifySession()

  if (!session) {
    unauthorized()
  }

  // Render the dashboard for authenticated users
  return (
    <main>
      <h1>Welcome to the Dashboard</h1>
      <p>Hi, {session.user.name}.</p>
    </main>
  )
}
```

LANGUAGE: JSX
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export default async function DashboardPage() {
  const session = await verifySession()

  if (!session) {
    unauthorized()
  }

  // Render the dashboard for authenticated users
  return (
    <main>
      <h1>Welcome to the Dashboard</h1>
      <p>Hi, {session.user.name}.</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Handling Data Fetching Errors in Next.js Server Components (React)
DESCRIPTION: This Server Component demonstrates how to handle errors during data fetching. It performs an asynchronous `fetch` request and checks the `res.ok` property. If the response is not successful, it conditionally renders a simple error message directly within the component. This approach allows for immediate feedback to the user without requiring client-side JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/11-error-handling.mdx#_snippet_2

LANGUAGE: TSX
CODE:
```
export default async function Page() {
  const res = await fetch(`https://...`)
  const data = await res.json()

  if (!res.ok) {
    return 'There was an error.'
  }

  return '...'
}
```

LANGUAGE: JSX
CODE:
```
export default async function Page() {
  const res = await fetch(`https://...`)
  const data = await res.json()

  if (!res.ok) {
    return 'There was an error.'
  }

  return '...'
}
```

----------------------------------------

TITLE: Getting Specific Cookies with NextRequest in TypeScript
DESCRIPTION: This snippet illustrates how to retrieve all cookies with a specific name from the `NextRequest` object using the `getAll` method. It returns an array of cookie objects, each containing `name`, `value`, and `Path` properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-request.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
request.cookies.getAll('experiments')
```

----------------------------------------

TITLE: Displaying Static Images in Next.js with JSX
DESCRIPTION: This JSX code demonstrates how to display static images served from the `public` directory in a Next.js application. It utilizes the `next/image` component to render an image, dynamically constructing the `src` path based on an `id` prop. The `AvatarOfMe` function provides an example of how to use the `Avatar` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/public-folder.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export function Avatar({ id, alt }) {
  return <Image src={`/avatars/${id}.png`} alt={alt} width="64" height="64" />
}

export function AvatarOfMe() {
  return <Avatar id="me" alt="A portrait of me" />
}
```

----------------------------------------

TITLE: Static Data Fetching with fetch in Next.js App
DESCRIPTION: Demonstrates data fetching in the `app` directory using the native `fetch()` API. By default, `fetch()` requests are cached (`cache: 'force-cache'`), similar to `getStaticProps`, making it suitable for static data generation in Server Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_29

LANGUAGE: JSX
CODE:
```
// `app` directory

// This function can be named anything
async function getProjects() {
  const res = await fetch(`https://...`)
  const projects = await res.json()

  return projects
}

export default async function Index() {
  const projects = await getProjects()

  return projects.map((project) => <div>{project.name}</div>)
}
```

----------------------------------------

TITLE: Defining Static Metadata with `metadata` Object in Next.js (JavaScript)
DESCRIPTION: This snippet shows how to define static metadata by exporting a plain JavaScript object named `metadata` from a `layout.js` or `page.js` file. This approach is used for fixed metadata values that do not require dynamic computation, contributing to better search engine optimization.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: '...',
  description: '...',
}

export default function Page() {}
```

----------------------------------------

TITLE: Managing Cookies in Next.js Route Handlers
DESCRIPTION: This snippet demonstrates how to interact with cookies within a Next.js route handler using the `cookies` utility from `next/headers`. It shows how to retrieve, set, and delete cookies from the incoming request or outgoing response. This functionality is crucial for session management and personalized user experiences.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
import { cookies } from 'next/headers'

export async function GET(request: NextRequest) {
  const cookieStore = await cookies()

  const a = cookieStore.get('a')
  const b = cookieStore.set('b', '1')
  const c = cookieStore.delete('c')
}
```

LANGUAGE: javascript
CODE:
```
import { cookies } from 'next/headers'

export async function GET(request) {
  const cookieStore = await cookies()

  const a = cookieStore.get('a')
  const b = cookieStore.set('b', '1')
  const c = cookieStore.delete('c')
}
```

----------------------------------------

TITLE: Memoizing Data Requests with React cache in TypeScript
DESCRIPTION: This snippet shows how to use the React `cache` function to memoize the return value of an asynchronous function, specifically for database queries. This prevents redundant executions for the same input `id`, optimizing data retrieval for non-`fetch` APIs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_15

LANGUAGE: ts
CODE:
```
import { cache } from 'react'
import db from '@/lib/db'

export const getItem = cache(async (id: string) => {
  const item = await db.item.findUnique({ id })
  return item
})
```

----------------------------------------

TITLE: Integrating Google Fonts with Tailwind CSS in App Router (JavaScript)
DESCRIPTION: This snippet demonstrates how to use Google Fonts (`Inter`, `Roboto_Mono`) with Tailwind CSS in a Next.js App Router layout. It imports fonts from `next/font/google`, defines them with `variable` names, and applies these CSS variables to the `<html>` tag, enabling their use in Tailwind classes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#_snippet_36

LANGUAGE: jsx
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
})

const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto-mono',
})

export default function RootLayout({ children }) {
  return (
    <html
      lang="en"
      className={`${inter.variable} ${roboto_mono.variable} antialiased`}
    >
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Limiting Execution Duration for Next.js Server Logic (TypeScript)
DESCRIPTION: Sets a maximum execution duration in seconds for server-side logic, such as page rendering or API routes. By default, Next.js does not limit execution. This setting requires Next.js 13.4.10 or higher and can also affect the default timeout of Server Actions when set at the page level.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
export const maxDuration = 5
```

----------------------------------------

TITLE: Creating an Active Blog Nav Link Component (JavaScript)
DESCRIPTION: This client-side React component uses `next/link` and `next/navigation`'s `useSelectedLayoutSegment` hook to create a navigation link. It dynamically applies 'bold' font weight if its `slug` prop matches the currently selected layout segment, indicating an active link. It requires `slug` and `children` props.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-selected-layout-segment.mdx#_snippet_3

LANGUAGE: JSX
CODE:
```
'use client'\n\nimport Link from 'next/link'\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\n// This *client* component will be imported into a blog layout\nexport default function BlogNavLink({ slug, children }) {\n  // Navigating to `/blog/hello-world` will return 'hello-world'\n  // for the selected layout segment\n  const segment = useSelectedLayoutSegment()\n  const isActive = slug === segment\n\n  return (\n    <Link\n      href={`/blog/${slug}`}\n      // Change style depending on whether the link is active\n      style={{ fontWeight: isActive ? 'bold' : 'normal' }}\n    >\n      {children}\n    </Link>\n  )\n}
```

----------------------------------------

TITLE: Implementing Dashboard Layout with Data Fetching (Next.js)
DESCRIPTION: Defines an asynchronous React component for the dashboard layout. It fetches user data using `getUser` and passes the user's name to a `UserName` component within the navigation. This demonstrates server-side data fetching directly within a layout component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#_snippet_10

LANGUAGE: typescript
CODE:
```
import { getUser } from '@/app/lib/data'
import { UserName } from '@/app/ui/user-name'

export default async function Layout({ children }) {
  const user = await getUser('1')

  return (
    <>
      <nav>
        {/* ... */}
        <UserName user={user.name} />
      </nav>
      {children}
    </>
  )
}
```

LANGUAGE: javascript
CODE:
```
import { getUser } from '@/app/lib/data'
import { UserName } from '@/app/ui/user-name'

export default async function Layout({ children }) {
  const user = await getUser('1')

  return (
    <>
      <nav>
        {/* ... */}
        <UserName user={user.name} />
      </nav>
      {children}
    </>
  )
}
```

----------------------------------------

TITLE: Generating a Sitemap Programmatically with Next.js
DESCRIPTION: This example shows how to programmatically generate a sitemap in Next.js using `sitemap.ts` or `sitemap.js`. It exports a default function that returns an array of `MetadataRoute.Sitemap` objects, each representing a URL with properties like `url`, `lastModified`, `changeFrequency`, and `priority`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/sitemap.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import type { MetadataRoute } from 'next'

export default function sitemap(): MetadataRoute.Sitemap {
  return [
    {
      url: 'https://acme.com',
      lastModified: new Date(),
      changeFrequency: 'yearly',
      priority: 1,
    },
    {
      url: 'https://acme.com/about',
      lastModified: new Date(),
      changeFrequency: 'monthly',
      priority: 0.8,
    },
    {
      url: 'https://acme.com/blog',
      lastModified: new Date(),
      changeFrequency: 'weekly',
      priority: 0.5,
    },
  ]
}
```

LANGUAGE: JavaScript
CODE:
```
export default function sitemap() {
  return [
    {
      url: 'https://acme.com',
      lastModified: new Date(),
      changeFrequency: 'yearly',
      priority: 1,
    },
    {
      url: 'https://acme.com/about',
      lastModified: new Date(),
      changeFrequency: 'monthly',
      priority: 0.8,
    },
    {
      url: 'https://acme.com/blog',
      lastModified: new Date(),
      changeFrequency: 'weekly',
      priority: 0.5,
    },
  ]
}
```

----------------------------------------

TITLE: Configuring Time-based Revalidation with Next.js Fetch (JavaScript)
DESCRIPTION: This snippet demonstrates how to configure time-based revalidation for data fetched using Next.js's extended `fetch` API. By setting `next.revalidate` to `3600` seconds (1 hour), the cached data will be revalidated in the background after this period, ensuring data freshness while serving stale data immediately. This is useful for data that changes infrequently.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
// Revalidate at most every hour
fetch('https://...', { next: { revalidate: 3600 } })
```

----------------------------------------

TITLE: Creating a Gracefully Degrading Error Boundary in Next.js with TypeScript
DESCRIPTION: This TypeScript snippet defines a `GracefullyDegradingErrorBoundary` component for Next.js, designed to capture and preserve the current HTML content before a client-side rendering error. If an error occurs, it re-renders the captured HTML using `dangerouslySetInnerHTML` and displays a persistent notification, providing a smoother user experience by showing the last known good UI.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/error.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
'use client'

import React, { Component, ErrorInfo, ReactNode } from 'react'

interface ErrorBoundaryProps {
  children: ReactNode
  onError?: (error: Error, errorInfo: ErrorInfo) => void
}

interface ErrorBoundaryState {
  hasError: boolean
}

export class GracefullyDegradingErrorBoundary extends Component<
  ErrorBoundaryProps,
  ErrorBoundaryState
> {
  private contentRef: React.RefObject<HTMLDivElement>

  constructor(props: ErrorBoundaryProps) {
    super(props)
    this.state = { hasError: false }
    this.contentRef = React.createRef()
  }

  static getDerivedStateFromError(_: Error): ErrorBoundaryState {
    return { hasError: true }
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    if (this.props.onError) {
      this.props.onError(error, errorInfo)
    }
  }

  render() {
    if (this.state.hasError) {
      // Render the current HTML content without hydration
      return (
        <>
          <div
            ref={this.contentRef}
            suppressHydrationWarning
            dangerouslySetInnerHTML={{
              __html: this.contentRef.current?.innerHTML || '',
            }}
          />
          <div className="fixed bottom-0 left-0 right-0 bg-red-600 text-white py-4 px-6 text-center">
            <p className="font-semibold">
              An error occurred during page rendering
            </p>
          </div>
        </>
      )
    }

    return <div ref={this.contentRef}>{this.props.children}</div>
  }
}

export default GracefullyDegradingErrorBoundary
```

----------------------------------------

TITLE: Defining Loading UI Component in TSX
DESCRIPTION: This snippet shows a basic implementation of a `loading.tsx` file in Next.js. It exports a default React component named `Loading` which renders a simple 'Loading...' message. This component is automatically displayed while the content of the route segment is being fetched or rendered, leveraging React Suspense.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/loading.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Loading() {
  // Or a custom loading skeleton component
  return <p>Loading...</p>
}
```

----------------------------------------

TITLE: Fetching Data for Streaming in Next.js Server Component
DESCRIPTION: This snippet demonstrates how to fetch data in a Next.js Server Component without awaiting the promise, and then pass it as a prop to a Client Component. It uses `Suspense` to show a fallback UI while the data is being resolved, enabling server-to-client data streaming.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-fetching-data.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import Posts from '@/app/ui/posts
import { Suspense } from 'react'

export default function Page() {
  // Don't await the data fetching function
  const posts = getPosts()

  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Posts posts={posts} />
    </Suspense>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import Posts from '@/app/ui/posts
import { Suspense } from 'react'

export default function Page() {
  // Don't await the data fetching function
  const posts = getPosts()

  return (
    <Suspense fallback={<div>Loading...</div>}>
      <Posts posts={posts} />
    </Suspense>
  )
}
```

----------------------------------------

TITLE: Generating Static Params in Next.js App Directory with generateStaticParams
DESCRIPTION: This code illustrates the `generateStaticParams` function in the Next.js `app` directory, which replaces `getStaticPaths`. It returns an array of segment objects to define pre-rendered routes and fetches post data asynchronously using `getPost` before rendering the `PostLayout` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_31

LANGUAGE: JSX
CODE:
```
// `app` directory
import PostLayout from '@/components/post-layout'

export async function generateStaticParams() {
  return [{ id: '1' }, { id: '2' }]
}

async function getPost(params) {
  const res = await fetch(`https://.../posts/${(await params).id}`)
  const post = await res.json()

  return post
}

export default async function Post({ params }) {
  const post = await getPost(params)

  return <PostLayout post={post} />
}
```

----------------------------------------

TITLE: Using Single Local Font in Next.js
DESCRIPTION: This snippet demonstrates how to use a local font file with `next/font/local`. It involves importing the `localFont` function and specifying the `src` path to your font file, typically located in the `public` folder. The font's class name is then applied to the `<html>` element in the Root Layout for application-wide usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-fonts.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import localFont from 'next/font/local'

const myFont = localFont({
  src: './my-font.woff2',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={myFont.className}>
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import localFont from 'next/font/local'

const myFont = localFont({
  src: './my-font.woff2',
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={myFont.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Fetching User Data in Next.js (TypeScript)
DESCRIPTION: Defines an asynchronous function `getUser` to fetch user data from an external API. It takes a user ID as a string and returns the parsed JSON response. Next.js automatically dedupes `fetch` requests, optimizing performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/layout.mdx#_snippet_9

LANGUAGE: typescript
CODE:
```
export async function getUser(id: string) {
  const res = await fetch(`https://.../users/${id}`)
  return res.json()
}
```

----------------------------------------

TITLE: Using Closures with Next.js Server Actions for Data Snapshots (JavaScript)
DESCRIPTION: This JavaScript React component demonstrates the use of closures in Next.js Server Actions. An inline Server Action `publish` accesses `publishVersion` from its parent scope, capturing data at render time. Next.js encrypts these closed-over variables to prevent sensitive data exposure during client-server communication.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_20

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const publishVersion = await getLatestVersion();

  async function publish() {
    "use server";
    if (publishVersion !== await getLatestVersion()) {
      throw new Error('The version has changed since pressing publish');
    }
    ...
  }

  return (
    <form>
      <button formAction={publish}>Publish</button>
    </form>
  );
}
```

----------------------------------------

TITLE: Expanding Image to Parent with Fill Prop (JavaScript)
DESCRIPTION: This example uses the `fill` boolean prop to make the image expand and fill its parent element. The parent element must have a `position` style of `relative`, `fixed`, or `absolute` for this prop to work correctly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
<Image src="/profile.png" fill={true} />
```

----------------------------------------

TITLE: Implementing Internationalized Routing with Next.js Middleware in JavaScript
DESCRIPTION: This Next.js Middleware snippet redirects incoming requests to include a locale prefix if one is not already present in the URL. It checks if the pathname contains a supported locale and, if not, prepends the determined preferred locale to the URL before redirecting.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/internationalization.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { NextResponse } from "next/server";

let locales = ['en-US', 'nl-NL', 'nl']

// Get the preferred locale, similar to the above or using a library
function getLocale(request) { ... }

export function middleware(request) {
  // Check if there is any supported locale in the pathname
  const { pathname } = request.nextUrl
  const pathnameHasLocale = locales.some(
    (locale) => pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`
  )

  if (pathnameHasLocale) return

  // Redirect if there is no locale
  const locale = getLocale(request)
  request.nextUrl.pathname = `/${locale}${pathname}`
  // e.g. incoming request is /products
  // The new URL is now /en-US/products
  return NextResponse.redirect(request.nextUrl)
}

export const config = {
  matcher: [
    // Skip all internal paths (_next)
    '/((?!_next).*)',
    // Optional: only run on root (/) URL
    // '/'
  ],
}
```

----------------------------------------

TITLE: Test Next.js Page component (App Router)
DESCRIPTION: Tests the `<Page />` component to ensure it renders a heading element. It uses `@testing-library/react` to render the component and `@testing-library/jest-dom` to assert that the heading is present in the document.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_19

LANGUAGE: jsx
CODE:
```
import '@testing-library/jest-dom'
import { render, screen } from '@testing-library/react'
import Page from '../app/page'

describe('Page', () => {
  it('renders a heading', () => {
    render(<Page />)

    const heading = screen.getByRole('heading', { level: 1 })

    expect(heading).toBeInTheDocument()
  })
})
```

----------------------------------------

TITLE: Defining English Localization Dictionary in JSON
DESCRIPTION: This JSON snippet provides an example of a dictionary file for English translations. It maps a key (`products.cart`) to its corresponding localized string ("Add to Cart"), which can be used to display content based on the selected locale.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/internationalization.mdx#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  "products": {
    "cart": "Add to Cart"
  }
}
```

----------------------------------------

TITLE: Creating Loading UI with loading.tsx in Next.js (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to define a loading UI component within the `app/dashboard/loading.tsx` file. This component serves as an instant fallback, displayed while the main content of the route segment is being loaded. It can include any UI, such as a skeleton or spinner, to improve user experience.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/06-loading-ui-and-streaming.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Loading() {
  // You can add any UI inside Loading, including a Skeleton.
  return <LoadingSkeleton />
}
```

----------------------------------------

TITLE: Configuring `unstable_cache` with Revalidation Options
DESCRIPTION: This snippet extends the `unstable_cache` usage by adding a third argument, an options object. It demonstrates how to specify `tags` for granular cache revalidation and a `revalidate` duration for time-based revalidation, allowing more control over cache freshness.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
const getCachedUser = unstable_cache(
  async () => {
    return getUserById(userId)
  },
  [userId],
  {
    tags: ['user'],
    revalidate: 3600,
  }
)
```

LANGUAGE: jsx
CODE:
```
const getCachedUser = unstable_cache(
  async () => {
    return getUserById(userId)
  },
  [userId],
  {
    tags: ['user'],
    revalidate: 3600,
  }
)
```

----------------------------------------

TITLE: Importing Global CSS in Next.js App Router Root Layout (JavaScript)
DESCRIPTION: This JavaScript React component defines the root layout for a Next.js App Router application. It imports `global.css`, ensuring that the defined global styles are applied to every route. The layout wraps the application's children within an HTML structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-css.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
// These styles apply to every route in the application
import './global.css'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Accessing Request Object in Next.js Route Handlers
DESCRIPTION: This snippet demonstrates how to access and utilize the `request` object within a Next.js route handler. The `request` object is an instance of `NextRequest`, providing extended functionality like `nextUrl` for parsing the URL. It allows developers to retrieve detailed information about the incoming HTTP request.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import type { NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const url = request.nextUrl
}
```

LANGUAGE: javascript
CODE:
```
export async function GET(request) {
  const url = request.nextUrl
}
```

----------------------------------------

TITLE: Accessing Search Parameters on Results Page in Next.js
DESCRIPTION: This snippet shows how to access the `searchParams` prop on a Next.js page to retrieve the search query from the URL. The query is then used to fetch search results from an external data source (`getSearchResults`), which are subsequently rendered on the page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/form.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { getSearchResults } from '@/lib/search'

export default async function SearchPage({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const results = await getSearchResults((await searchParams).query)

  return <div>...</div>
}
```

LANGUAGE: jsx
CODE:
```
import { getSearchResults } from '@/lib/search'

export default async function SearchPage({ searchParams }) {
  const results = await getSearchResults((await searchParams).query)

  return <div>...</div>
}
```

----------------------------------------

TITLE: Handling User Not Found with Next.js notFound (JSX)
DESCRIPTION: This snippet demonstrates how to use the `notFound()` function within a Next.js `page.js` file. It fetches user data, and if the user is not found (e.g., the fetch response is not `ok`), it invokes `notFound()` to render the configured not-found UI and terminate the current rendering process for that route segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/not-found.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { notFound } from 'next/navigation'

async function fetchUser(id) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({ params }) {
  const { id } = await params
  const user = await fetchUser(id)

  if (!user) {
    notFound()
  }

  // ...
}
```

----------------------------------------

TITLE: Defining `generateMetadata` with Parent Metadata (TSX)
DESCRIPTION: Demonstrates how to access `parent` metadata within the `generateMetadata` function using `ResolvingMetadata`. This allows for inheriting or extending metadata from parent layouts, providing a hierarchical metadata structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_71

LANGUAGE: tsx
CODE:
```
import type { Metadata, ResolvingMetadata } from 'next'

export async function generateMetadata(
  { params, searchParams }: Props,
  parent: ResolvingMetadata
): Promise<Metadata> {
  return {
    title: 'Next.js',
  }
}
```

----------------------------------------

TITLE: Sending Web Vitals to External Endpoint using useReportWebVitals (JavaScript)
DESCRIPTION: This example uses the `useReportWebVitals` hook to capture metrics and send them as JSON to a specified URL. It utilizes `navigator.sendBeacon` for non-blocking requests when available, falling back to `fetch` with `keepalive`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
useReportWebVitals((metric) => {
  const body = JSON.stringify(metric)
  const url = 'https://example.com/analytics'

  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.
  if (navigator.sendBeacon) {
    navigator.sendBeacon(url, body)
  } else {
    fetch(url, { body, method: 'POST', keepalive: true })
  }
})
```

----------------------------------------

TITLE: Receiving Webhook Payloads in Next.js Route Handler (TypeScript)
DESCRIPTION: This snippet shows how to create a Next.js Route Handler to receive and process webhook payloads via a POST request. It reads the incoming request body as text using `request.text()` and includes basic error handling. Unlike API Routes in the Pages Router, `bodyParser` is not required for this functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_20

LANGUAGE: ts
CODE:
```
export async function POST(request: Request) {
  try {
    const text = await request.text()
    // Process the webhook payload
  } catch (error) {
    return new Response(`Webhook error: ${error.message}`, {
      status: 400,
    })
  }

  return new Response('Success!', {
    status: 200,
  })
}
```

----------------------------------------

TITLE: Importing Global Styles in Root Layout (App Router - TypeScript)
DESCRIPTION: Import the global CSS file (`./globals.css`) into your root layout file (`app/layout.tsx`) to apply styles across all routes in your Next.js application when using the App Router. This ensures Tailwind's styles are available throughout your project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import type { Metadata } from 'next'

// These styles apply to every route in the application
import './globals.css'

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Defining Inline Cache Profile in Page Component (JSX)
DESCRIPTION: This example illustrates how to define a custom cache profile directly inline within the `cacheLife` function call in a JSX page component. By passing an object with `stale`, `revalidate`, and `expire` properties, you can apply specific caching durations for a particular use case without defining a named profile globally.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheLife.mdx#_snippet_9

LANGUAGE: JSX
CODE:
```
'use cache'
import { unstable_cacheLife as cacheLife } from 'next/cache'

export default async function Page() {
  cacheLife({
    stale: 3600, // 1 hour
    revalidate: 900, // 15 minutes
    expire: 86400, // 1 day
  })

  return <div>Page</div>
}
```

----------------------------------------

TITLE: Creating a Page Component with Nav and Form in Next.js (JSX)
DESCRIPTION: This snippet illustrates the structure of a page component in app/page.js. It imports and renders Nav and Form components, demonstrating how to compose a page from smaller, reusable components. This setup is crucial for pages that might have interactive elements like forms, where navigation blocking could be applied.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_41

LANGUAGE: JSX
CODE:
```
import Nav from './components/nav'
import Form from './components/form'

export default function Page() {
  return (
    <div>
      <Nav />
      <main>
        <h1>Welcome to the Dashboard</h1>
        <Form />
      </main>
    </div>
  )
}
```

----------------------------------------

TITLE: Accessing Search Parameters in Dynamically Rendered Client Component (Next.js)
DESCRIPTION: This client component uses `useSearchParams` to retrieve query parameters. When the containing route is dynamically rendered, the `searchParams` are available on the server during the initial render, allowing server-side logging of the search parameter value.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function SearchBar() {
  const searchParams = useSearchParams()

  const search = searchParams.get('search')

  // This will be logged on the server during the initial render
  // and on the client on subsequent navigations.
  console.log(search)

  return <>Search: {search}</>
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function SearchBar() {
  const searchParams = useSearchParams()

  const search = searchParams.get('search')

  // This will be logged on the server during the initial render
  // and on the client on subsequent navigations.
  console.log(search)

  return <>Search: {search}</>
}
```

----------------------------------------

TITLE: Revalidating Cache Entries by Tag in Next.js (JSX)
DESCRIPTION: This snippet shows how to use the `revalidateTag` function to purge cache entries associated with a specific tag (e.g., 'a'). This function is crucial for invalidating cached data based on a defined tagging system, commonly used in Route Handlers for third-party events or Server Actions for user interactions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_9

LANGUAGE: JSX
CODE:
```
revalidateTag('a')
```

----------------------------------------

TITLE: Fetching Data Based on Draft Mode Status
DESCRIPTION: This code snippet shows a Next.js page component that uses the `draftMode` helper from `next/headers` to determine if draft mode is enabled. It then fetches data from a 'draft' URL if enabled, or a 'production' URL otherwise, and renders the fetched data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
// page that fetches data
import { draftMode } from 'next/headers'

async function getData() {
  const { isEnabled } = await draftMode()

  const url = isEnabled
    ? 'https://draft.example.com'
    : 'https://production.example.com'

  const res = await fetch(url)

  return res.json()
}

export default async function Page() {
  const { title, desc } = await getData()

  return (
    <main>
      <h1>{title}</h1>
      <p>{desc}</p>
    </main>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
// page that fetches data
import { draftMode } from 'next/headers'

async function getData() {
  const { isEnabled } = await draftMode()

  const url = isEnabled
    ? 'https://draft.example.com'
    : 'https://production.example.com'

  const res = await fetch(url)

  return res.json()
}

export default async function Page() {
  const { title, desc } = await getData()

  return (
    <main>
      <h1>{title}</h1>
      <p>{desc}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Subscribing to Ably Channel with useChannel Hook
DESCRIPTION: This React hook snippet demonstrates how to subscribe to an Ably channel named 'your-channel' using `useChannel`. It receives messages asynchronously and logs them to the console, providing a basic setup for real-time message consumption within a component.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import { useState } from "react";
import { useChannel } from "@ably-labs/react-hooks";

export default function Home() {
  const [channel] = useChannel("your-channel", async (message) => {
    console.log("Received Ably message", message);
  });
}
```

----------------------------------------

TITLE: Implementing Art Direction with Next.js getImageProps in JSX
DESCRIPTION: This example demonstrates how to achieve art direction using `getImageProps()` from Next.js. It generates different `srcSet` values for desktop and mobile viewports based on specified dimensions and quality, then renders them within a `<picture>` element to serve the most appropriate image.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#_snippet_55

LANGUAGE: JavaScript
CODE:
```
import { getImageProps } from 'next/image'

export default function Home() {
  const common = { alt: 'Art Direction Example', sizes: '100vw' }
  const {
    props: { srcSet: desktop },
  } = getImageProps({
    ...common,
    width: 1440,
    height: 875,
    quality: 80,
    src: '/desktop.jpg',
  })
  const {
    props: {
      srcSet: mobile,
      ...rest
    },
  } = getImageProps({
    ...common,
    width: 750,
    height: 1334,
    quality: 70,
    src: '/mobile.jpg',
  })

  return (
    <picture>
      <source media="(min-width: 1000px)" srcSet={desktop} />
      <source media="(min-width: 500px)" srcSet={mobile} />
      <img {...rest} style={{ width: '100%', height: 'auto' }} />
    </picture>
  )
}
```

----------------------------------------

TITLE: Intercepting Login Route for Modal Display in Next.js
DESCRIPTION: This snippet intercepts the `/login` route within the `@auth` parallel slot, rendering the `<Login />` component wrapped inside a `<Modal />` component. This allows the login content to appear as a modal when accessed via client-side navigation, providing a seamless user experience.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/parallel-routes.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
import { Modal } from '@/app/ui/modal'
import { Login } from '@/app/ui/login'

export default function Page() {
  return (
    <Modal>
      <Login />
    </Modal>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import { Modal } from '@/app/ui/modal'
import { Login } from '@/app/ui/login'

export default function Page() {
  return (
    <Modal>
      <Login />
    </Modal>
  )
}
```

----------------------------------------

TITLE: Reading and Setting Cookies in Next.js Route Handlers using next/headers
DESCRIPTION: This example shows how to read and set HTTP cookies within a Next.js Route Handler using the `cookies` function from `next/headers`. The `GET` function retrieves a 'token' cookie and then sets it back in the response headers, demonstrating server-side cookie manipulation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
import { cookies } from 'next/headers'

export async function GET(request: Request) {
  const cookieStore = await cookies()
  const token = cookieStore.get('token')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { 'Set-Cookie': `token=${token.value}` },
  })
}
```

LANGUAGE: JavaScript
CODE:
```
import { cookies } from 'next/headers'

export async function GET(request) {
  const cookieStore = await cookies()
  const token = cookieStore.get('token')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { 'Set-Cookie': `token=${token}` },
  })
}
```

----------------------------------------

TITLE: Base Metadata for Inheritance Example in Next.js Layout (JSX)
DESCRIPTION: This snippet defines the base metadata in `app/layout.js` for the inheritance example. It sets a default `title` and `openGraph` properties that will be inherited by child pages if they do not explicitly define these fields themselves.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_86

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Acme',
  openGraph: {
    title: 'Acme',
    description: 'Acme is a...', 
  },
}
```

----------------------------------------

TITLE: Server-Side Redirection with redirect Function in Next.js (TSX/JSX)
DESCRIPTION: This snippet demonstrates using the `redirect` function from `next/navigation` for server-side redirects in Next.js Server Components. It checks for the presence of an `id` and a `team` object, redirecting to `/login` or `/join` respectively if conditions are not met. This function is ideal for handling authentication or data availability checks before rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { redirect } from 'next/navigation'

async function fetchTeam(id: string) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  if (!id) {
    redirect('/login')
  }

  const team = await fetchTeam(id)
  if (!team) {
    redirect('/join')
  }

  // ...
}
```

LANGUAGE: jsx
CODE:
```
import { redirect } from 'next/navigation'

async function fetchTeam(id) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({ params }) {
  const { id } = await params
  if (!id) {
    redirect('/login')
  }

  const team = await fetchTeam(id)
  if (!team) {
    redirect('/join')
  }

  // ...
}
```

----------------------------------------

TITLE: Linking to Dynamic App Router Segments in Next.js
DESCRIPTION: This example illustrates how to create links to dynamic route segments using the Next.js `Link` component within the App Router. It leverages template literals to construct the `href` for paths like `/blog/[slug]/page.js`, enabling navigation to dynamically generated content. This is crucial for applications utilizing the App Router's file-system based routing for variable content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_16

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Run Next.js Production Server
DESCRIPTION: Starts the Next.js production server. This command is used to run the built application in a production environment after applying fixes.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sharp-version-avif.mdx#_snippet_3

LANGUAGE: Shell
CODE:
```
next start
```

----------------------------------------

TITLE: Initial Next.js Optional Catch-All Page (TypeScript)
DESCRIPTION: This TypeScript snippet defines the initial `page.tsx` for an optional catch-all route in Next.js. It uses `generateStaticParams` to ensure a single static route for the empty slug (`/`), making it an effective entry point for an SPA, and initially returns a placeholder.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_12

LANGUAGE: TypeScript
CODE:
```
export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return '...' // We'll update this
}
```

----------------------------------------

TITLE: Creating a Signup Form Component in Next.js
DESCRIPTION: This snippet defines a React component for a user signup form. It uses standard HTML form elements to capture name, email, and password, and is configured to invoke a Next.js Server Action named `signup` upon submission. This form serves as the UI for collecting user credentials.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { signup } from '@/app/actions/auth'

export function SignupForm() {
  return (
    <form action={signup}>
      <div>
        <label htmlFor="name">Name</label>
        <input id="name" name="name" placeholder="Name" />
      </div>
      <div>
        <label htmlFor="email">Email</label>
        <input id="email" name="email" type="email" placeholder="Email" />
      </div>
      <div>
        <label htmlFor="password">Password</label>
        <input id="password" name="password" type="password" />
      </div>
      <button type="submit">Sign Up</button>
    </form>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import { signup } from '@/app/actions/auth'

export function SignupForm() {
  return (
    <form action={signup}>
      <div>
        <label htmlFor="name">Name</label>
        <input id="name" name="name" placeholder="Name" />
      </div>
      <div>
        <label htmlFor="email">Email</label>
        <input id="email" name="email" type="email" placeholder="Email" />
      </div>
      <div>
        <label htmlFor="password">Password</label>
        <input id="password" name="password" type="password" />
      </div>
      <button type="submit">Sign Up</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Creating a Dynamic User Component with Cookies (JavaScript)
DESCRIPTION: This snippet defines an asynchronous React component that accesses the `cookies` API from `next/headers`. Since `cookies` requires looking at the incoming request, this component will trigger dynamic rendering, making it suitable for streaming with Suspense.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-partial-prerendering.mdx#_snippet_5

LANGUAGE: JSX
CODE:
```
import { cookies } from 'next/headers'

export async function User() {
  const session = (await cookies()).get('session')?.value
  return '...'
}
```

----------------------------------------

TITLE: Install Vitest and Dependencies Manually
DESCRIPTION: Install the necessary development dependencies for setting up Vitest with React Testing Library in a Next.js project. This includes Vitest, React plugins, JSDOM environment, and testing utilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
# Using TypeScript
npm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom vite-tsconfig-paths
```

LANGUAGE: bash
CODE:
```
# Using JavaScript
npm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom
```

----------------------------------------

TITLE: Caching Dynamic Responses with getServerSideProps (JavaScript)
DESCRIPTION: This JavaScript example shows how to apply `Cache-Control` headers within `getServerSideProps` to cache dynamic page responses. It uses `public, s-maxage=10, stale-while-revalidate=59` to define a short fresh period and a longer stale-while-revalidate period, allowing the page to be served from cache while a revalidation occurs in the background.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_12

LANGUAGE: JavaScript
CODE:
```
// This value is considered fresh for ten seconds (s-maxage=10).
// If a request is repeated within the next 10 seconds, the previously
// cached value will still be fresh. If the request is repeated before 59 seconds,
// the cached value will be stale but still render (stale-while-revalidate=59).
//
// In the background, a revalidation request will be made to populate the cache
// with a fresh value. If you refresh the page, you will see the new value.
export async function getServerSideProps({ req, res }) {
  res.setHeader(
    'Cache-Control',
    'public, s-maxage=10, stale-while-revalidate=59'
  )

  return {
    props: {},
  }
}
```

----------------------------------------

TITLE: Sending JSON Response with Error Handling in Next.js API Routes
DESCRIPTION: This snippet demonstrates how to send a JSON response from a Next.js API route, including error handling for asynchronous operations. It uses a `try...catch` block to return a 200 OK status with results on success, or a 500 Internal Server Error with an error message on failure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    const result = await someAsyncOperation()
    res.status(200).json({ result })
  } catch (err) {
    res.status(500).json({ error: 'failed to load data' })
  }
}
```

LANGUAGE: JavaScript
CODE:
```
export default async function handler(req, res) {
  try {
    const result = await someAsyncOperation()
    res.status(200).json({ result })
  } catch (err) {
    res.status(500).json({ error: 'failed to load data' })
  }
}
```

----------------------------------------

TITLE: Fetching User Data with DAL in Next.js
DESCRIPTION: This function retrieves user details from the database, first ensuring the user's session is valid via `verifySession()`. It queries the `users` table, explicitly selecting `id`, `name`, and `email` columns. The function returns the user object or `null` if the session is invalid or an error occurs during data fetching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_33

LANGUAGE: TypeScript
CODE:
```
export const getUser = cache(async () => {
  const session = await verifySession()
  if (!session) return null

  try {
    const data = await db.query.users.findMany({
      where: eq(users.id, session.userId),
      // Explicitly return the columns you need rather than the whole user object
      columns: {
        id: true,
        name: true,
        email: true,
      },
    })

    const user = data[0]

    return user
  } catch (error) {
    console.log('Failed to fetch user')
    return null
  }
})
```

LANGUAGE: JavaScript
CODE:
```
export const getUser = cache(async () => {
  const session = await verifySession()
  if (!session) return null

  try {
    const data = await db.query.users.findMany({
      where: eq(users.id, session.userId),
      // Explicitly return the columns you need rather than the whole user object
      columns: {
        id: true,
        name: true,
        email: true,
      },
    })

    const user = data[0]

    return user
  } catch (error) {
    console.log('Failed to fetch user')
    return null
  }
})
```

----------------------------------------

TITLE: Typing Next.js API Route Response Data
DESCRIPTION: Building on basic API route typing, this example demonstrates how to define a custom type for the API response data. By passing this custom `Data` type to `NextApiResponse<Data>`, you ensure that the JSON payload returned by the API route adheres to a predefined structure, enhancing type safety for API consumers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#_snippet_8

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

type Data = {
  name: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  res.status(200).json({ name: 'John Doe' })
}
```

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: This command copies the example environment variables file (`.env.local.example`) to `.env.local`. The `.env.local` file is crucial for storing sensitive configuration like Cosmos DB connection details and is ignored by Git for security.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Caching User Data with unstable_cache in Next.js (JSX)
DESCRIPTION: This snippet demonstrates the basic usage of `unstable_cache` to cache the result of an asynchronous `getUser` function. It defines a `getCachedUser` function, which is then awaited within a React component to retrieve the cached user data, improving performance for repeated requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/unstable_cache.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { getUser } from './data';
import { unstable_cache } from 'next/cache';

const getCachedUser = unstable_cache(
  async (id) => getUser(id),
  ['my-app-user']
);

export default async function Component({ userID }) {
  const user = await getCachedUser(userID);
  ...
}
```

----------------------------------------

TITLE: Importing Global Styles in Root Layout (App Router - JavaScript)
DESCRIPTION: Import the global CSS file (`./globals.css`) into your root layout file (`app/layout.js`) to apply styles across all routes in your Next.js application when using the App Router. This ensures Tailwind's styles are available throughout your project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
// These styles apply to every route in the application
import './globals.css'

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Displaying Reactive Time in Next.js Client Component (After - Client)
DESCRIPTION: This snippet defines a Client Component (`Timestamp`) that uses `useState` and `useLayoutEffect` to display a reactive current time. By reading the time only in the browser, it ensures the timestamp updates dynamically, addressing the ambiguity of server-side rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time.mdx#_snippet_5

LANGUAGE: JSX
CODE:
```
'use client'

import { useState, useLayoutEffect } from 'react'

export function Timestamp() {
  const [time, setTime] = useState(null)
  useLayoutEffect(() => {
    // You can determine when and how often to update
    // the time here. In this example we update it only once
    setTime(new Date().toString())
  }, [])
  if (time) {
    return 'current time: ' + time
  }
  return null
}
```

----------------------------------------

TITLE: Linking to Dynamic Pages Router Segments in Next.js
DESCRIPTION: This snippet demonstrates how to generate links to dynamic route segments within the Next.js Pages Router. It uses template literals to construct the `href` for the `Link` component, allowing for dynamic paths like `/blog/[slug]`. This pattern is essential for creating navigation to content with variable identifiers, such as blog posts or product pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/link.mdx#_snippet_15

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

function Posts({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

function Posts({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}

export default Posts
```

----------------------------------------

TITLE: Defining `generateMetadata` as a Regular Function (TSX)
DESCRIPTION: Demonstrates how to define the `generateMetadata` function as a standard synchronous function, returning a `Metadata` object. This function is used to dynamically generate metadata for a page or layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_68

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export function generateMetadata(): Metadata {
  return {
    title: 'Next.js',
  }
}
```

----------------------------------------

TITLE: Upgrading Next.js Link Usage with Codemod (Bash)
DESCRIPTION: This command executes the `@next/codemod new-link` utility to automatically update `<Link>` component usage in a Next.js project. It transforms deprecated patterns like `<Link><a id="link">Home</a></Link>` to the new standard `<Link id="link">Home</Link>`, ensuring compatibility with Next.js 13 and later.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-new-link-with-extra-anchor.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx @next/codemod new-link .
```

----------------------------------------

TITLE: Accessing Dynamic Search Params in a Table Component (JavaScript)
DESCRIPTION: This snippet defines a table component that receives `searchParams` as a prop. The component becomes dynamic only when the `sort` value from `searchParams` is accessed, allowing the rest of the page to be prerendered while this specific component streams its content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-partial-prerendering.mdx#_snippet_12

LANGUAGE: JSX
CODE:
```
export async function Table({ searchParams }) {
  const sort = (await searchParams).sort === 'true'
  return '...'
}
```

----------------------------------------

TITLE: Setting X-Frame-Options Header
DESCRIPTION: This snippet shows how to set the `X-Frame-Options` header to `SAMEORIGIN`. This header prevents the site from being embedded in an `iframe` from a different origin, which helps mitigate clickjacking attacks. Note that `Content-Security-Policy`'s `frame-ancestors` directive is a more modern and recommended alternative.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_16

LANGUAGE: JavaScript
CODE:
```
{
  key: 'X-Frame-Options',
  value: 'SAMEORIGIN'
}
```

----------------------------------------

TITLE: Basic Static Generation in Next.js (JSX)
DESCRIPTION: This snippet demonstrates a basic Next.js page that uses Static Generation without requiring any external data. The HTML for this page is generated once at build time and reused for all requests. It serves as a simple example of a static page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/02-static-site-generation.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
function About() {
  return <div>About</div>
}

export default About
```

----------------------------------------

TITLE: Configuring SVG Images with Security Headers in Next.js
DESCRIPTION: This `next.config.js` configuration allows SVG images while enhancing security. It sets `dangerouslyAllowSVG` to `true`, forces the browser to download the image via `contentDispositionType: 'attachment'`, and applies a strict `contentSecurityPolicy` to prevent script execution within SVGs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#_snippet_39

LANGUAGE: JavaScript
CODE:
```
module.exports = {
  images: {
    dangerouslyAllowSVG: true,
    contentDispositionType: 'attachment',
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
  },
}
```

----------------------------------------

TITLE: HTML Output for Open Graph Image Dimensions
DESCRIPTION: This snippet shows the HTML `<meta>` tags generated in the `<head>` section when the `size` object is exported from an Open Graph or Twitter image file. It sets the `og:image:width` and `og:image:height` properties, providing the image's dimensions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_16

LANGUAGE: html
CODE:
```
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
```

----------------------------------------

TITLE: Implementing User Sign-Up Form with Dynamic Error Display in JSX
DESCRIPTION: This JSX snippet defines the structure for a user sign-up form, featuring email and password input fields. It conditionally renders validation errors for each field, retrieving them from a `state.errors` object. The submit button's `disabled` attribute is controlled by a `pending` flag, preventing multiple submissions during processing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_8

LANGUAGE: JSX
CODE:
```
      <div>
        <label htmlFor="email">Email</label>
        <input id="email" name="email" placeholder="Email" />
      </div>
      {state?.errors?.email && <p>{state.errors.email}</p>}

      <div>
        <label htmlFor="password">Password</label>
        <input id="password" name="password" type="password" />
      </div>
      {state?.errors?.password && (
        <div>
          <p>Password must:</p>
          <ul>
            {state.errors.password.map((error) => (
              <li key={error}>- {error}</li>
            ))}
          </ul>
        </div>
      )}
      <button disabled={pending} type="submit">
        Sign Up
      </button>
    </form>
  )
}
```

----------------------------------------

TITLE: Direct Streaming with Web APIs in Next.js Route Handlers
DESCRIPTION: This example illustrates how to implement server-side streaming directly using native Web APIs like `ReadableStream` and `TextEncoder` in a Next.js Route Handler. It defines helper functions to convert an async iterator to a stream and simulate delays, then generates a stream of HTML paragraphs. The `GET` handler returns a `Response` object with the created stream.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_15

LANGUAGE: TypeScript
CODE:
```
// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream
function iteratorToStream(iterator: any) {
  return new ReadableStream({
    async pull(controller) {
      const { value, done } = await iterator.next()

      if (done) {
        controller.close()
      } else {
        controller.enqueue(value)
      }
    }
  })
}

function sleep(time: number) {
  return new Promise((resolve) => {
    setTimeout(resolve, time)
  })
}

const encoder = new TextEncoder()

async function* makeIterator() {
  yield encoder.encode('<p>One</p>')
  await sleep(200)
  yield encoder.encode('<p>Two</p>')
  await sleep(200)
  yield encoder.encode('<p>Three</p>')
}

export async function GET() {
  const iterator = makeIterator()
  const stream = iteratorToStream(iterator)

  return new Response(stream)
}
```

LANGUAGE: JavaScript
CODE:
```
// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream
function iteratorToStream(iterator) {
  return new ReadableStream({
    async pull(controller) {
      const { value, done } = await iterator.next()

      if (done) {
        controller.close()
      } else {
        controller.enqueue(value)
      }
    }
  })
}

function sleep(time) {
  return new Promise((resolve) => {
    setTimeout(resolve, time)
  })
}

const encoder = new TextEncoder()

async function* makeIterator() {
  yield encoder.encode('<p>One</p>')
  await sleep(200)
  yield encoder.encode('<p>Two</p>')
  await sleep(200)
  yield encoder.encode('<p>Three</p>')
}

export async function GET() {
  const iterator = makeIterator()
  const stream = iteratorToStream(iterator)

  return new Response(stream)
}
```

----------------------------------------

TITLE: Defining a static viewport object in a layout or page component (TSX)
DESCRIPTION: This code snippet demonstrates how to define a static viewport object with a themeColor in a layout or page component using TypeScript syntax. It exports a viewport object of type Viewport from 'next'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-viewport.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import type { Viewport } from 'next'

export const viewport: Viewport = {
  themeColor: 'black',
}

export default function Page() {}
```

----------------------------------------

TITLE: Defining Forbidden UI Component in Next.js (TSX)
DESCRIPTION: This snippet defines a React component named `Forbidden` for Next.js applications using TSX. It renders a simple UI indicating unauthorized access and provides a link to return home. This component is specifically used when the `forbidden` function is invoked, resulting in a `403` status code.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/forbidden.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import Link from 'next/link'

export default function Forbidden() {
  return (
    <div>
      <h2>Forbidden</h2>
      <p>You are not authorized to access this resource.</p>
      <Link href="/">Return Home</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Typing `href` in Custom Components Wrapping Next.js Link
DESCRIPTION: This snippet provides guidance on how to correctly type the `href` prop when creating a custom component that wraps the `next/link` component. It uses a generic type `T extends string` and the `Route<T> | URL` union type to ensure that the `href` passed to the custom component adheres to the expected route types.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#_snippet_5

LANGUAGE: TSX
CODE:
```
import type { Route } from 'next'
import Link from 'next/link'

function Card<T extends string>({ href }: { href: Route<T> | URL }) {
  return (
    <Link href={href}>
      <div>My Card</div>
    </Link>
  )
}
```

----------------------------------------

TITLE: Imperative Client-Side Navigation with Next.js useRouter
DESCRIPTION: This example shows how to perform imperative client-side navigations using the `useRouter` hook from `next/router`. It demonstrates programmatically pushing a new route (`/about`) when a button is clicked, offering more control over navigation flow than the `Link` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

export default function ReadMore() {
  const router = useRouter()

  return (
    <button onClick={() => router.push('/about')}>
      Click here to read more
    </button>
  )
}
```

----------------------------------------

TITLE: Displaying Reactive Time in Next.js Server Component (Before)
DESCRIPTION: This snippet shows an attempt to display a reactive current time directly within a Next.js Server Component. This approach is problematic because Server Components render once on the server, making the timestamp static and not reactive to client-side changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time.mdx#_snippet_4

LANGUAGE: JSX
CODE:
```
function Timestamp() {
  return 'current time: ' + new Date().toString()
}

export default async function Page() {
  return (
    <main>
      ...
      <Timestamp />
    </main>
  )
}
```

----------------------------------------

TITLE: Importing Global Styles in App Router Layout (Next.js)
DESCRIPTION: This snippet illustrates how to import global stylesheets, such as `globals.css`, into the `app/layout.js` file within the App Router. Unlike the Pages Router, global styles can be imported into any layout, page, or component in the `app` directory, making `app/layout.js` a common place for root-level styles.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_39

LANGUAGE: JSX
CODE:
```
import '../styles/globals.css'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Submitting Forms with Server Actions in React (JSX)
DESCRIPTION: This component demonstrates how to use a Server Function (e.g., createPost) as the 'action' prop of an HTML <form> element in a React component. When the form is submitted, the 'createPost' function will automatically receive the FormData object, allowing server-side processing of the form inputs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-updating-data.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import { createPost } from '@/app/actions'

export function Form() {
  return (
    <form action={createPost}>
      <input type="text" name="title" />
      <input type="text" name="content" />
      <button type="submit">Create</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Setting Up Client-Side Instrumentation in Next.js (JavaScript)
DESCRIPTION: This code snippet demonstrates how to implement client-side instrumentation in a Next.js application using JavaScript. It includes examples for performance monitoring, analytics initialization, and global error tracking, running before the main application code starts. This setup leverages browser APIs like `performance` and `window.addEventListener` to capture metrics and errors early.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/instrumentation-client.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
// Set up performance monitoring
performance.mark('app-init')

// Initialize analytics
console.log('Analytics initialized')

// Set up error tracking
window.addEventListener('error', (event) => {
  // Send to your error tracking service
  reportError(event.error)
})
```

----------------------------------------

TITLE: Importing Font with CSS Variable for Next.js - TSX
DESCRIPTION: This TypeScript React snippet shows how to import a Google Font using `next/font/google` and define it as a CSS variable. It also imports a CSS module, `component.module.css`, which will later consume this variable. The `variable` option in the font loader configuration assigns a CSS variable name to the loaded font.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#_snippet_43

LANGUAGE: tsx
CODE:
```
import { Inter } from 'next/font/google'
import styles from '../styles/component.module.css'

const inter = Inter({
  variable: '--font-inter',
})
```

----------------------------------------

TITLE: Defining Custom 404 UI with Next.js `not-found.js`
DESCRIPTION: This snippet illustrates the `not-found.js` file convention, which allows developers to define a custom UI for 404 'Not Found' pages. This component is rendered when the `notFound()` function is called or a route is not matched.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/11-error-handling.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
export default function NotFound() {
  return <div>404 - Page Not Found</div>
}
```

LANGUAGE: JavaScript
CODE:
```
export default function NotFound() {
  return <div>404 - Page Not Found</div>
}
```

----------------------------------------

TITLE: Accessing Non-Tainted Properties from Object with Tainted Value
DESCRIPTION: This TSX snippet illustrates that even when a unique value within an object (like `SERVICE_API_KEY`) is tainted, other non-tainted properties of the same object (like `SERVICE_API_VERSION`) can still be safely accessed and passed to client components. This allows for granular control over what data is exposed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/taint.mdx#_snippet_5

LANGUAGE: TSX
CODE:
```
export async function Dashboard() {
  const systemConfig = await getSystemConfig()

  return <ClientDashboard version={systemConfig.SERVICE_API_VERSION} />
}
```

----------------------------------------

TITLE: Starting Next.js Development Server (Bash)
DESCRIPTION: This snippet provides various command-line options to start the Next.js development server. It allows developers to run the application locally for testing and development purposes, with hot-reloading enabled for immediate feedback on code changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw-empty/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Migrating Route Handlers to Await `params` (JS)
DESCRIPTION: This example illustrates the necessary change for JavaScript Route Handlers, where `segmentData.params` now returns a Promise and must be `await`ed to access its properties. This aligns with the updated asynchronous data handling in Next.js 15.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_20

LANGUAGE: js
CODE:
```
// Before
export async function GET(request, segmentData) {
  const params = segmentData.params
  const slug = params.slug
}
```

LANGUAGE: js
CODE:
```
// After
export async function GET(request, segmentData) {
  const params = await segmentData.params
  const slug = params.slug
}
```

----------------------------------------

TITLE: Re-instantiating Script on Component Mount with onReady (App Router)
DESCRIPTION: This example illustrates using the `onReady` property with `next/script` to execute code after the script loads and on every subsequent component re-mount (e.g., after route navigation). It's demonstrated by re-instantiating a Google Maps embed, ensuring the map is correctly displayed even after re-renders. This requires a Client Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/script.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
'use client'

import { useRef } from 'react'
import Script from 'next/script'

export default function Page() {
  const mapRef = useRef()

  return (
    <>
      <div ref={mapRef}></div>
      <Script
        id="google-maps"
        src="https://maps.googleapis.com/maps/api/js"
        onReady={() => {
          new google.maps.Map(mapRef.current, {
            center: { lat: -34.397, lng: 150.644 },
            zoom: 8,
          })
        }}
      />
    </>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import { useRef } => 'react'
import Script from 'next/script'

export default function Page() {
  const mapRef = useRef()

  return (
    <>
      <div ref={mapRef}></div>
      <Script
        id="google-maps"
        src="https://maps.googleapis.com/maps/api/js"
        onReady={() => {
          new google.maps.Map(mapRef.current, {
            center: { lat: -34.397, lng: 150.644 },
            zoom: 8,
          })
        }}
      />
    </>
  )
}
```

----------------------------------------

TITLE: Implementing Fallback Pages with getStaticPaths and getStaticProps in Next.js
DESCRIPTION: This snippet illustrates how to create a dynamic page (`[id].js`) that supports fallback behavior. `getStaticPaths` specifies which paths are pre-rendered at build time and sets `fallback: true` to allow new paths to be generated on demand. `getStaticProps` fetches data for a given `id` and includes `revalidate: 1` to enable Incremental Static Regeneration (ISR), while the `Post` component uses `router.isFallback` to show a loading state for pages not yet generated.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-paths.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

function Post({ post }) {
  const router = useRouter()

  // If the page is not yet generated, this will be displayed
  // initially until getStaticProps() finishes running
  if (router.isFallback) {
    return <div>Loading...</div>
  }

  // Render post...
}

// This function gets called at build time
export async function getStaticPaths() {
  return {
    // Only `/posts/1` and `/posts/2` are generated at build time
    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],
    // Enable statically generating additional pages
    // For example: `/posts/3`
    fallback: true,
  }
}

// This also gets called at build time
export async function getStaticProps({ params }) {
  // params contains the post `id`.
  // If the route is like /posts/1, then params.id is 1
  const res = await fetch(`https://.../posts/${params.id}`)
  const post = await res.json()

  // Pass post data to the page via props
  return {
    props: { post },
    // Re-generate the post at most once per second
    // if a request comes in
    revalidate: 1,
  }
}

export default Post
```

----------------------------------------

TITLE: Running Next.js Development Server Locally
DESCRIPTION: This command starts the Next.js development server, typically accessible at `http://localhost:3000`. It enables hot-reloading and provides a development environment for building and testing the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
npm run dev\n# or\nyarn dev
```

----------------------------------------

TITLE: Setting Cookie in Next.js Server Action/Route Handler
DESCRIPTION: Illustrates how to set a cookie using the `cookies().set()` method. This operation must be performed in a Server Action or Route Handler to correctly set the `Set-Cookie` header in the response. Shows different ways to call `.set`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function create(data) {
  const cookieStore = await cookies()

  cookieStore.set('name', 'lee')
  // or
  cookieStore.set('name', 'lee', { secure: true })
  // or
  cookieStore.set({
    name: 'name',
    value: 'lee',
    httpOnly: true,
    path: '/',
  })
}
```

LANGUAGE: js
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function create(data) {
  const cookieStore = await cookies()

  cookieStore.set('name', 'lee')
  // or
  cookieStore.set('name', 'lee', { secure: true })
  // or
  cookieStore.set({
    name: 'name',
    value: 'lee',
    httpOnly: true,
    path: '/',
  })
}
```

----------------------------------------

TITLE: Updating Cookie Handling in Next.js Middleware
DESCRIPTION: This section details the changes to cookie management within Next.js Middleware. The 'Before' snippet demonstrates the older `NextResponse.cookie()` and direct `request.cookies` access, while the 'After' snippet shows the new `response.cookies.set()`, `getWithOptions()`, and `delete()` methods for more explicit and structured cookie manipulation.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // create an instance of the class to access the public methods. This uses `next()`,
  // you could use `redirect()` or `rewrite()` as well
  let response = NextResponse.next()
  // get the cookies from the request
  let cookieFromRequest = request.cookies['my-cookie']
  // set the `cookie`
  response.cookie('hello', 'world')
  // set the `cookie` with options
  const cookieWithOptions = response.cookie('hello', 'world', {
    path: '/',
    maxAge: 1000 * 60 * 60 * 24 * 7,
    httpOnly: true,
    sameSite: 'strict',
    domain: 'example.com',
  })
  // clear the `cookie`
  response.clearCookie('hello')

  return response
}
```

LANGUAGE: TypeScript
CODE:
```
export function middleware() {
  const response = new NextResponse()

  // set a cookie
  response.cookies.set('vercel', 'fast')

  // set another cookie with options
  response.cookies.set('nextjs', 'awesome', { path: '/test' })

  // get all the details of a cookie
  const { value, ...options } = response.cookies.getWithOptions('vercel')
  console.log(value) // => 'fast'
  console.log(options) // => { name: 'vercel', Path: '/test' }

  // deleting a cookie will mark it as expired
  response.cookies.delete('vercel')

  return response
}
```

----------------------------------------

TITLE: Configuring Module Transpilation in Next.js
DESCRIPTION: This configuration enables Next.js to automatically transpile and bundle specified local or external dependencies. The `transpilePackages` array in `next.config.js` replaces the `next-transpile-modules` package, simplifying monorepo setups and external module handling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/03-architecture/nextjs-compiler.mdx#_snippet_11

LANGUAGE: javascript
CODE:
```
module.exports = {
  transpilePackages: ['@acme/ui', 'lodash-es'],
}
```

----------------------------------------

TITLE: Generating Open Graph Image with Local Assets (JavaScript)
DESCRIPTION: This snippet illustrates how to generate an Open Graph image in Next.js by embedding a local image asset. It uses Node.js `fs/promises` to read the image file from the file system and converts it to an `ArrayBuffer` for use in the `src` attribute of an `<img>` tag within the `ImageResponse`. The local asset should be placed relative to the project root.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_23

LANGUAGE: JavaScript
CODE:
```
import { ImageResponse } from 'next/og'
import { join } from 'node:path'
import { readFile } from 'node:fs/promises'

export default async function Image() {
  const logoData = await readFile(join(process.cwd(), 'logo.png'))
  const logoSrc = Uint8Array.from(logoData).buffer

  return new ImageResponse(
    (
      <div
        style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        <img src={logoSrc} height="100" />
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Loading Google Analytics for a Single Route with `@next/third-parties`
DESCRIPTION: This snippet shows how to load Google Analytics 4 (GA4) for a specific route in a Next.js application. The `GoogleAnalytics` component from `@next/third-parties/google` is directly included within a page file, allowing for route-specific analytics integration. The `gaId` prop must be set to your GA4 measurement ID.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-script-for-ga.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function Page() {
  return <GoogleAnalytics gaId="G-XYZ" />
}
```

----------------------------------------

TITLE: Defining MDX Layout with Tailwind Typography (App Router, TypeScript)
DESCRIPTION: This TypeScript snippet defines a shared layout component for Next.js App Router, applying Tailwind CSS `prose` classes to style markdown content. It customizes heading styles, including margins, font weight, and colors for both light and dark modes, ensuring consistent typography across MDX pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_24

LANGUAGE: tsx
CODE:
```
export default function MdxLayout({ children }: { children: React.ReactNode }) {
  // Create any shared layout or styles here
  return (
    <div className="prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white">
      {children}
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing Suspense for Partial Static Rendering with `useSearchParams` (Next.js)
DESCRIPTION: This page component demonstrates wrapping a client component that uses `useSearchParams` within a `<Suspense>` boundary. This allows the outer page to be statically rendered while the dynamic `SearchBar` component is client-side rendered, with a fallback displayed initially.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/use-search-params.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { Suspense } from 'react'
import SearchBar from './search-bar'

// This component passed as a fallback to the Suspense boundary
// will be rendered in place of the search bar in the initial HTML.
// When the value is available during React hydration the fallback
// will be replaced with the `<SearchBar>` component.
function SearchBarFallback() {
  return <>placeholder</>
}

export default function Page() {
  return (
    <>
      <nav>
        <Suspense fallback={<SearchBarFallback />}>
          <SearchBar />
        </Suspense>
      </nav>
      <h1>Dashboard</h1>
    </>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import { Suspense } from 'react'
import SearchBar from './search-bar'

// This component passed as a fallback to the Suspense boundary
// will be rendered in place of the search bar in the initial HTML.
// When the value is available during React hydration the fallback
// will be replaced with the `<SearchBar>` component.
function SearchBarFallback() {
  return <>placeholder</>
}

export default function Page() {
  return (
    <>
      <nav>
        <Suspense fallback={<SearchBarFallback />}>
          <SearchBar />
        </Suspense>
      </nav>
      <h1>Dashboard</h1>
    </>
  )
}
```

----------------------------------------

TITLE: Creating a Next.js App via CLI (Bash)
DESCRIPTION: Shows how to use the `npx create-next-app` command in the terminal to initialize a new Next.js project, demonstrating the use of the `filename` prop for command-line examples.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_9

LANGUAGE: bash
CODE:
```
npx create-next-app
```

----------------------------------------

TITLE: Generating Dynamic Metadata with `generateMetadata` Function in Next.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to generate dynamic metadata using an asynchronous `generateMetadata` function in a `page.js` file. It receives `params` and `searchParams` to extract route-specific information and `parent` to optionally retrieve and extend metadata from parent segments. This function is crucial for SEO when metadata needs to be generated based on dynamic content or external API calls.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
export async function generateMetadata({ params, searchParams }, parent) {
  // read route params
  const { id } = await params

  // fetch data
  const product = await fetch(`https://.../${id}`).then((res) => res.json())

  // optionally access and extend (rather than replace) parent metadata
  const previousImages = (await parent).openGraph?.images || []

  return {
    title: product.title,
    openGraph: {
      images: ['/some-specific-page-image.jpg', ...previousImages],
    },
  }
}

export default function Page({ params, searchParams }) {}
```

----------------------------------------

TITLE: Initializing Next.js Project Interactively (CLI)
DESCRIPTION: This snippet demonstrates how to start a new Next.js project using `create-next-app` in interactive mode. It provides commands for `npx`, `yarn`, `pnpm`, and `bunx`, allowing the user to choose their preferred package manager. The interactive prompts guide the user through project setup, including project name and TypeScript configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest
# or
yarn create next-app
# or
pnpm create next-app
# or
bunx create-next-app
```

----------------------------------------

TITLE: Configuring Custom App for Per-Page Layouts with TypeScript in Next.js
DESCRIPTION: This TypeScript snippet (`pages/_app.tsx`) demonstrates how to configure the Custom App to support per-page layouts with type safety. It defines `NextPageWithLayout` and `AppPropsWithLayout` types to ensure that the `Component` prop correctly includes the optional `getLayout` function, allowing the application to dynamically apply layouts based on page definitions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import type { ReactElement, ReactNode } from 'react'
import type { NextPage } from 'next'
import type { AppProps } from 'next/app'

export type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {
  getLayout?: (page: ReactElement) => ReactNode
}

type AppPropsWithLayout = AppProps & {
  Component: NextPageWithLayout
}

export default function MyApp({ Component, pageProps }: AppPropsWithLayout) {
  // Use the layout defined at the page level, if available
  const getLayout = Component.getLayout ?? ((page) => page)

  return getLayout(<Component {...pageProps} />)
}
```

----------------------------------------

TITLE: Writing Playwright Tests with `next.onFetch` for Request Interception
DESCRIPTION: This example demonstrates how to write a Playwright test using `next/experimental/testmode/playwright`. It shows how to use `next.onFetch` to intercept and mock external `fetch` requests, returning a custom `Response` for specific URLs, while allowing other requests to be aborted. This is useful for isolating tests from external API dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
// Place this file in the `app` directory and name it with `.spec.ts`.
// To customize where to put tests, add `testMatch` to `playwright.config.ts`.

import { test, expect } from 'next/experimental/testmode/playwright'

test('/product/shoe', async ({ page, next }) => {
  // NOTE: `next.onFetch` only intercepts external `fetch` requests (for both client and server).
  // For example, if you `fetch` a relative URL (e.g. `/api/hello`) from the client
  // that's handled by a Next.js route handler (e.g. `app/api/hello/route.ts`),
  // it won't be intercepted.
  next.onFetch((request) => {
    if (request.url === 'http://my-db/product/shoe') {
      return new Response(
        JSON.stringify({
          title: 'A shoe',
        }),
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )
    }
    return 'abort'
  })

  await page.goto('/product/shoe')

  await expect(page.locator('body')).toHaveText(/Shoe/)
})
```

----------------------------------------

TITLE: Creating a Client Component in Next.js App Directory (TypeScript)
DESCRIPTION: Defines a Client Component using the `'use client'` directive, similar to components in the `pages` directory. It receives data as props, manages state and effects, and is prerendered on the server during initial page load. This component is designed to be imported into a Server Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
'use client'

// This is a Client Component (same as components in the `pages` directory)
// It receives data as props, has access to state and effects, and is
// prerendered on the server during the initial page load.
export default function HomePage({ recentPosts }) {
  return (
    <div>
      {recentPosts.map((post) => (
        <div key={post.id}>{post.title}</div>
      ))}
    </div>
  )
}
```

----------------------------------------

TITLE: Configuring Local Fonts with Multiple Files (JavaScript)
DESCRIPTION: This example illustrates how to configure a single local font family using multiple font files for different weights and styles. The `src` property accepts an array of objects, each specifying the `path`, `weight`, and `style` for a specific font variant. This allows for comprehensive font family definition.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/font.mdx#_snippet_34

LANGUAGE: js
CODE:
```
const roboto = localFont({
  src: [
    {
      path: './Roboto-Regular.woff2',
      weight: '400',
      style: 'normal',
    },
    {
      path: './Roboto-Italic.woff2',
      weight: '400',
      style: 'italic',
    },
    {
      path: './Roboto-Bold.woff2',
      weight: '700',
      style: 'normal',
    },
    {
      path: './Roboto-BoldItalic.woff2',
      weight: '700',
      style: 'italic',
    },
  ],
})
```

----------------------------------------

TITLE: Implementing Next.js Middleware with Redirect (JavaScript)
DESCRIPTION: This JavaScript middleware function redirects incoming requests to '/home'. It uses `NextResponse.redirect` from `next/server` to perform the redirection. The `config.matcher` property ensures this middleware only applies to paths that start with '/about/', providing targeted control over its execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { NextResponse } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request) {
  return NextResponse.redirect(new URL('/home', request.url))
}

// See "Matching Paths" below to learn more
export const config = {
  matcher: '/about/:path*',
}
```

----------------------------------------

TITLE: Memoizing Fetch Requests in Next.js with TypeScript
DESCRIPTION: This TypeScript snippet demonstrates Next.js's automatic memoization of `fetch` requests. The `getItem` function, when invoked multiple times with identical URL and options within a single React render pass, executes the network call only once, serving cached data for subsequent calls to optimize performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
async function getItem() {
  // The `fetch` function is automatically memoized and the result
  // is cached
  const res = await fetch('https://.../item/1')
  return res.json()
}

// This function is called twice, but only executed the first time
const item = await getItem() // cache MISS

// The second call could be anywhere in your route
const item = await getItem() // cache HIT
```

----------------------------------------

TITLE: Deleting Cookie by Setting maxAge to 0 with Next.js cookies().set() (TSX/JS)
DESCRIPTION: Explains how to delete a cookie by setting its `maxAge` property to 0 when using the `set()` method. Setting `maxAge` to 0 causes the browser to immediately expire and remove the cookie.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function delete(data) {
  (await cookies()).set('name', 'value', { maxAge: 0 })
}
```

LANGUAGE: js
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function delete(data) {
  (await cookies()).set('name', 'value', { maxAge: 0 })
}
```

----------------------------------------

TITLE: Handling Dynamic Route Parameters in Next.js
DESCRIPTION: This example shows how to extract dynamic route parameters using the `context` object in a Next.js route handler. The `params` property, which is a promise, resolves to an object containing the dynamic segments of the URL. This allows for creating flexible API routes that adapt to varying URL paths.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/route.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
export async function GET(
  request: Request,
  { params }: { params: Promise<{ team: string }> }
) {
  const { team } = await params
}
```

LANGUAGE: javascript
CODE:
```
export async function GET(request, { params }) {
  const { team } = await params
}
```

----------------------------------------

TITLE: Tagging Fetch Cache Entries in Next.js (JSX)
DESCRIPTION: This code snippet illustrates how to associate specific tags with a `fetch` request's cache entry using the `next.tags` option. These tags enable fine-grained control over data caching, allowing later revalidation of specific cache entries based on their assigned tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/04-deep-dive/caching.mdx#_snippet_8

LANGUAGE: JSX
CODE:
```
fetch(`https://...`, { next: { tags: ['a', 'b', 'c'] } })
```

----------------------------------------

TITLE: Responsive Image with `fill` and `objectFit` in Next.js
DESCRIPTION: This example demonstrates how to use the `fill` prop in conjunction with `objectFit: 'cover'` to make an image fill its parent container, particularly useful when the image's aspect ratio is unknown. The parent container must have `position: relative` for this to work correctly.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#_snippet_48

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'
import mountains from '../public/mountains.jpg'

export default function Fill() {
  return (
    <div
      style={{
        display: 'grid',
        gridGap: '8px',
        gridTemplateColumns: 'repeat(auto-fit, minmax(400px, auto))',
      }}
    >
      <div style={{ position: 'relative', width: '400px' }}>
        <Image
          alt="Mountains"
          src={mountains}
          fill
          sizes="(min-width: 808px) 50vw, 100vw"
          style={{
            objectFit: 'cover', // cover, contain, none
          }}
        />
      </div>
      {/* And more images in the grid... */}
    </div>
  )
}
```

----------------------------------------

TITLE: Installing Jest and testing libraries
DESCRIPTION: This command installs Jest, jsdom environment, React testing library, DOM testing library, Jest DOM library, ts-node, and Jest types as development dependencies. These packages are essential for writing and running unit tests in a Next.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node @types/jest
# or
yarn add -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node @types/jest
# or
pnpm install -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node @types/jest
```

----------------------------------------

TITLE: Configuring Edge Runtime for API Route - JavaScript
DESCRIPTION: Exports a constant variable named `runtime` with the string value `"edge"`. This special export configures the execution environment for the API route, specifically opting into the Edge Runtime. This is typically used for deploying to environments like Vercel Edge Functions, enabling lower latency and higher performance compared to traditional Node.js environments for certain workloads.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#_snippet_2

LANGUAGE: javascript
CODE:
```
export const runtime = "edge";
```

----------------------------------------

TITLE: Accessing Current Locale in Next.js Page Component (JSX)
DESCRIPTION: This JavaScript snippet for a Next.js App Router page component demonstrates how to access the current locale (`lang`) from the `params` object, which is dynamically passed based on the internationalized route structure (e.g., `app/[lang]/page.js`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/internationalization.mdx#_snippet_3

LANGUAGE: JSX
CODE:
```
// You now have access to the current locale
// e.g. /en-US/products -> `lang` is "en-US"
export default async function Page({ params }) {
  const { lang } = await params
  return ...
}
```

----------------------------------------

TITLE: Configuring Internationalization (i18n) in Next.js
DESCRIPTION: This snippet demonstrates the correct structure for the `i18n` field in `next.config.js`. It defines supported `locales`, the `defaultLocale` for non-prefixed paths, and `domains` for domain-specific internationalization routing. This configuration is crucial for enabling multi-language support in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-i18n-config.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  i18n: {
    // These are all the locales you want to support in
    // your application
    locales: ['en-US', 'es', 'fr', 'nl-NL'],
    // This is the default locale you want to be used when visiting
    // a non-locale prefixed path e.g. `/hello`
    defaultLocale: 'en-US',
    // This is a list of locale domains and the default locale they
    // should handle (these are only required when setting up domain routing)
    domains: [
      {
        domain: 'example.com',
        defaultLocale: 'en-US',
        // other locales that should be handled on this domain
        locales: ['es'],
      },
      {
        domain: 'example.nl',
        defaultLocale: 'nl-NL',
      },
      {
        domain: 'example.fr',
        defaultLocale: 'fr',
      }
    ]
  }
}
```

----------------------------------------

TITLE: Defining Client-Only Component with Dynamic Import (JavaScript)
DESCRIPTION: This snippet defines a Client Component in Next.js using the `'use client'` directive. It dynamically imports the `App` component with `ssr: false` to prevent server-side rendering, ensuring the component and its children execute only on the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_12

LANGUAGE: javascript
CODE:
```
'use client'

import React from 'react'
import dynamic from 'next/dynamic'

const App = dynamic(() => import('../../App'), { ssr: false })

export function ClientOnly() {
  return <App />
}
```

----------------------------------------

TITLE: Creating Home Page for App Router (JSX)
DESCRIPTION: Defines the root page (`/`) for a Next.js application using the App Router. This component renders a heading and a `Link` component to navigate to the `/about` page, essential for testing navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Typing Basic Next.js API Routes
DESCRIPTION: This snippet shows how to use the built-in `NextApiRequest` and `NextApiResponse` types from 'next' to provide type safety for a basic Next.js API route handler. These types ensure that the `req` (request) and `res` (response) objects have the correct properties and methods, improving code reliability.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/02-typescript.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  res.status(200).json({ name: 'John Doe' })
}
```

----------------------------------------

TITLE: Forwarding Headers in Middleware with NextResponse in TypeScript
DESCRIPTION: This snippet shows how to use `NextResponse.next()` to continue routing in Middleware while also modifying or adding new request headers. It creates a new `Headers` object from the incoming request, sets a custom header, and then passes these modified headers to the next stage of the request pipeline.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#_snippet_10

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'

// Given an incoming request...
const newHeaders = new Headers(request.headers)
// Add a new header
newHeaders.set('x-version', '123')
// And produce a response with the new headers
return NextResponse.next({
  request: {
    // New request headers
    headers: newHeaders,
  },
})
```

----------------------------------------

TITLE: Wrapping useSearchParams with Suspense in Next.js (TSX)
DESCRIPTION: This TypeScript React example demonstrates how to correctly use `useSearchParams` by wrapping the component that uses it within a `Suspense` boundary. This prevents the page from de-optimizing to client-side rendering, allowing for server-side rendering and providing a fallback (like a loading skeleton) while data is fetched.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-suspense-with-csr-bailout.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'\n\nimport { useSearchParams } from 'next/navigation'\nimport { Suspense } from 'react'\n\nfunction Search() {\n  const searchParams = useSearchParams()\n\n  return <input placeholder="Search..." />\n}\n\nexport function Searchbar() {\n  return (\n    // You could have a loading skeleton as the `fallback` too\n    <Suspense>\n      <Search />\n    </Suspense>\n  )\n}
```

----------------------------------------

TITLE: Displaying iOS PWA Install Prompt Component (TSX)
DESCRIPTION: This `InstallPrompt` React component, written in TSX, detects if the user is on an iOS device and if the PWA is already installed in standalone mode. It uses `useState` and `useEffect` to manage these states. If not in standalone mode, it displays a button and instructions for iOS users to add the app to their home screen via the share button.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
function InstallPrompt() {
  const [isIOS, setIsIOS] = useState(false)
  const [isStandalone, setIsStandalone] = useState(false)

  useEffect(() => {
    setIsIOS(
      /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream
    )

    setIsStandalone(window.matchMedia('(display-mode: standalone)').matches)
  }, [])

  if (isStandalone) {
    return null // Don't show install button if already installed
  }

  return (
    <div>
      <h3>Install App</h3>
      <button>Add to Home Screen</button>
      {isIOS && (
        <p>
          To install this app on your iOS device, tap the share button
          <span role="img" aria-label="share icon">
            {' '}
            ⎋{' '}
          </span>
          and then "Add to Home Screen"
          <span role="img" aria-label="plus icon">
            {' '}
            ➕{' '}
          </span>.
        </p>
      )}
    </div>
  )
}

export default function Page() {
  return (
    <div>
      <PushNotificationManager />
      <InstallPrompt />
    </div>
  )
}
```

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: This snippet provides commands to start the Next.js development server using various JavaScript package managers. Running one of these commands will launch the application locally, typically accessible at `http://localhost:3000`, and enable hot module reloading for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-api/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Defining Loading UI Component in JSX
DESCRIPTION: This snippet provides the equivalent basic implementation for a `loading.js` file in Next.js. Similar to the TSX version, it exports a default `Loading` component that renders a placeholder message while the route segment's content loads, utilizing React Suspense.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/loading.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
export default function Loading() {
  // Or a custom loading skeleton component
  return <p>Loading...</p>
}
```

----------------------------------------

TITLE: Running Next.js in Development Mode (Bash)
DESCRIPTION: These commands are used to set up and run the Next.js application in development mode. `npm install` installs all project dependencies, and `npm run dev` starts the development server, enabling hot-reloading and other development features.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Installing Project Dependencies with npm
DESCRIPTION: This command navigates into the cloned repository directory and installs all required Node.js packages and dependencies listed in the `package.json` file, preparing the project for local development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
cd tigris-vercel-starter
npm install
```

----------------------------------------

TITLE: Enabling dynamicIO in Next.js Configuration (TypeScript)
DESCRIPTION: This snippet demonstrates how to enable the experimental `dynamicIO` flag in your Next.js application. Setting `dynamicIO` to `true` within the `experimental` section of `next.config.ts` ensures that data fetching operations in the App Router are excluded from pre-rendering by default, promoting fresh data at runtime unless explicitly cached.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/05-config/01-next-config-js/dynamicIO.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    dynamicIO: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Installing Next.js Dependency with npm
DESCRIPTION: This command installs the latest version of Next.js as a project dependency using npm. It is the essential first step in migrating an existing Vite application to a Next.js project.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install next@latest
```

----------------------------------------

TITLE: Rendering Product JSON-LD in Next.js Page (JavaScript)
DESCRIPTION: This snippet illustrates rendering product-specific JSON-LD structured data within a Next.js `page.js` component. It retrieves product information, creates a Schema.org `Product` object, and embeds it using a `<script type="application/ld+json">` tag, including XSS prevention for `<` characters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/json-ld.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { id } = await params
  const product = await getProduct(id)

  const jsonLd = {
    '@context': 'https://schema.org',
    '@type': 'Product',
    name: product.name,
    image: product.image,
    description: product.description,
  }

  return (
    <section>
      {/* Add JSON-LD to your page */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(jsonLd).replace(/</g, '\\u003c'),
        }}
      />
      {/* ... */}
    </section>
  )
}
```

----------------------------------------

TITLE: Implementing React Context Provider as Client Component in Next.js
DESCRIPTION: This Client Component, marked with 'use client', creates a React context (ThemeContext) and provides a ThemeProvider that wraps its children. This is necessary because React context is not directly supported in Server Components, enabling global state sharing (e.g., theme) across client components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-server-and-client-components.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
'use client'

import { createContext } from 'react'

export const ThemeContext = createContext({})

export default function ThemeProvider({
  children,
}: {
  children: React.ReactNode
}) {
  return <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import { createContext } from 'react'

export const ThemeContext = createContext({})

export default function ThemeProvider({ children }) {
  return <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
}
```

----------------------------------------

TITLE: Auto-fixing Linting Errors in Next.js Project (Shell)
DESCRIPTION: This command attempts to automatically fix linting errors and format violations detected by ESLint and Prettier. While many issues can be resolved automatically, some may still require manual intervention.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md#_snippet_1

LANGUAGE: Shell
CODE:
```
pnpm lint-fix
```

----------------------------------------

TITLE: Defining Parent Component with `use cache` and 'days' `cacheLife` in Next.js TSX
DESCRIPTION: This component demonstrates an outer cache definition using `use cache` and `cacheLife('days')`. It imports and renders `ChildComponent`, illustrating how its cache duration might be influenced by nested components if the outer cache had no explicit `cacheLife` or if the inner cache's duration was shorter.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cacheLife.mdx#_snippet_10

LANGUAGE: TSX
CODE:
```
// Parent component
import { unstable_cacheLife as cacheLife } from 'next/cache'
import { ChildComponent } from './child'

export async function ParentComponent() {
  'use cache'
  cacheLife('days')

  return (
    <div>
      <ChildComponent />
    </div>
  )
}
```

----------------------------------------

TITLE: Creating Styled-JSX Style Registry for Next.js App Router
DESCRIPTION: This Client Component creates a `styled-jsx` style registry for Next.js applications using the App Router. It uses `useState` for lazy initialization of the registry and `useServerInsertedHTML` to collect and inject the generated CSS rules into the HTML during server-side rendering, ensuring styles are available before content that uses them. It accepts `children` to wrap the application content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/css-in-js.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
'use client'

import React, { useState } from 'react'
import { useServerInsertedHTML } from 'next/navigation'
import { StyleRegistry, createStyleRegistry } from 'styled-jsx'

export default function StyledJsxRegistry({
  children,
}: {
  children: React.ReactNode
}) {
  // Only create stylesheet once with lazy initial state
  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state
  const [jsxStyleRegistry] = useState(() => createStyleRegistry())

  useServerInsertedHTML(() => {
    const styles = jsxStyleRegistry.styles()
    jsxStyleRegistry.flush()
    return <>{styles}</>
  })

  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import React, { useState } from 'react'
import { useServerInsertedHTML } from 'next/navigation'
import { StyleRegistry, createStyleRegistry } from 'styled-jsx'

export default function StyledJsxRegistry({ children }) {
  // Only create stylesheet once with lazy initial state
  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state
  const [jsxStyleRegistry] = useState(() => createStyleRegistry())

  useServerInsertedHTML(() => {
    const styles = jsxStyleRegistry.styles()
    jsxStyleRegistry.flush()
    return <>{styles}</>
  })

  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>
}
```

----------------------------------------

TITLE: Implementing Global Error Handling in Next.js with TypeScript
DESCRIPTION: This snippet demonstrates how to create a `global-error.tsx` file in Next.js to catch errors in the root layout or template. It defines a Client Component that must include `<html>` and `<body>` tags, providing a basic UI with a 'Try again' button to reset the error state. This component replaces the root layout when active.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/error.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
'use client' // Error boundaries must be Client Components

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Implementing Next.js Draft Mode Route Handler
DESCRIPTION: Implements a Next.js Route Handler (/api/draft) to enable draft mode. It validates a secret token and a content slug provided in the query parameters, fetches content details from a headless CMS using the slug, and redirects the user to the content's path after successfully enabling draft mode. Includes security considerations for the redirect.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { draftMode } from 'next/headers';
import { redirect } from 'next/navigation';

export async function GET(request: Request) {
  // Parse query string parameters
  const { searchParams } = new URL(request.url);
  const secret = searchParams.get('secret');
  const slug = searchParams.get('slug');

  // Check the secret and next parameters
  // This secret should only be known to this Route Handler and the CMS
  if (secret !== 'MY_SECRET_TOKEN' || !slug) {
    return new Response('Invalid token', { status: 401 });
  }

  // Fetch the headless CMS to check if the provided `slug` exists
  // getPostBySlug would implement the required fetching logic to the headless CMS
  const post = await getPostBySlug(slug);

  // If the slug doesn't exist prevent draft mode from being enabled
  if (!post) {
    return new Response('Invalid slug', { status: 401 });
  }

  // Enable Draft Mode by setting the cookie
  const draft = await draftMode();
  draft.enable();

  // Redirect to the path from the fetched post
  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities
  redirect(post.slug);
}
```

LANGUAGE: javascript
CODE:
```
import { draftMode } from 'next/headers';
import { redirect } from 'next/navigation';

export async function GET(request) {
  // Parse query string parameters
  const { searchParams } = new URL(request.url);
  const secret = searchParams.get('secret');
  const slug = searchParams.get('slug');

  // Check the secret and next parameters
  // This secret should only be known to this Route Handler and the CMS
  if (secret !== 'MY_SECRET_TOKEN' || !slug) {
    return new Response('Invalid token', { status: 401 });
  }

  // Fetch the headless CMS to check if the provided `slug` exists
  // getPostBySlug would implement the required fetching logic to the headless CMS
  const post = await getPostBySlug(slug);

  // If the slug doesn't exist prevent draft mode from being enabled
  if (!post) {
    return new Response('Invalid slug', { status: 401 });
  }

  // Enable Draft Mode by setting the cookie
  const draft = await draftMode();
  draft.enable();

  // Redirect to the path from the fetched post
  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities
  redirect(post.slug);
}
```

----------------------------------------

TITLE: Getting All Cookies in Next.js Server Component
DESCRIPTION: Shows how to fetch all available cookies or cookies matching a specific name using the `cookies().getAll()` method in an asynchronous Next.js Server Component. The example maps over the results to display cookie names and values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/cookies.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  return cookieStore.getAll().map((cookie) => (
    <div key={cookie.name}>
      <p>Name: {cookie.name}</p>
      <p>Value: {cookie.value}</p>
    </div>
  ))
}
```

LANGUAGE: jsx
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  return cookieStore.getAll().map((cookie) => (
    <div key={cookie.name}>
      <p>Name: {cookie.name}</p>
      <p>Value: {cookie.value}</p>
    </div>
  ))
}
```

----------------------------------------

TITLE: Using `forbidden` in a Server Component for Basic Authorization
DESCRIPTION: This example shows how to use the `forbidden` function within a Next.js Server Component (`app/auth/page.tsx` or `app/auth/page.js`) to restrict access based on a user's session role. If the user's role is not 'admin', `forbidden()` is called, rendering a 403 error page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/forbidden.mdx#_snippet_1

LANGUAGE: TSX
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'

export default async function AdminPage() {
  const session = await verifySession()

  // Check if the user has the 'admin' role
  if (session.role !== 'admin') {
    forbidden()
  }

  // Render the admin page for authorized users
  return <></>
}
```

LANGUAGE: JSX
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'

export default async function AdminPage() {
  const session = await verifySession()

  // Check if the user has the 'admin' role
  if (session.role !== 'admin') {
    forbidden()
  }

  // Render the admin page for authorized users
  return <></>
}
```

----------------------------------------

TITLE: Installing Dependencies and Running Development Server with pnpm
DESCRIPTION: These commands first install all project dependencies using pnpm, then start the Next.js development server. This offers a third option for dependency management and local development, often preferred for its efficient disk space usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-userbase/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Handling Specific Web Vitals in App Router Component
DESCRIPTION: Shows how to handle specific Web Vitals metrics (like FCP, LCP) using a switch statement within the `useReportWebVitals` hook inside a client component (`web-vitals.js|ts`) for the App Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'

import { useReportWebVitals } from 'next/web-vitals'

export function WebVitals() {
  useReportWebVitals((metric) => {
    switch (metric.name) {
      case 'FCP': {
        // handle FCP results
      }
      case 'LCP': {
        // handle LCP results
      }
      // ...
    }
  })
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useReportWebVitals } from 'next/web-vitals'

export function WebVitals() {
  useReportWebVitals((metric) => {
    switch (metric.name) {
      case 'FCP': {
        // handle FCP results
      }
      case 'LCP': {
        // handle LCP results
      }
      // ...
    }
  })
}
```

----------------------------------------

TITLE: Switching Locales with replaceState in Next.js
DESCRIPTION: This component illustrates how to switch application locales using `window.history.replaceState` in a Next.js client component. It replaces the current entry in the browser's history, preventing navigation back to the previous state. The `switchLocale` function constructs a new path based on the selected locale and the current pathname, updating the URL without a full page reload and integrating with `usePathname`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/04-linking-and-navigating.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'

export function LocaleSwitcher() {
  const pathname = usePathname()

  function switchLocale(locale: string) {
    // e.g. '/en/about' or '/fr/contact'
    const newPath = `/${locale}${pathname}`
    window.history.replaceState(null, '', newPath)
  }

  return (
    <>
      <button onClick={() => switchLocale('en')}>English</button>
      <button onClick={() => switchLocale('fr')}>French</button>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'

export function LocaleSwitcher() {
  const pathname = usePathname()

  function switchLocale(locale) {
    // e.g. '/en/about' or '/fr/contact'
    const newPath = `/${locale}${pathname}`
    window.history.replaceState(null, '', newPath)
  }

  return (
    <>
      <button onClick={() => switchLocale('en')}>English</button>
      <button onClick={() => switchLocale('fr')}>French</button>
    </>
  )
}
```

----------------------------------------

TITLE: Exporting Next.js Middleware Function as Default (JS)
DESCRIPTION: This example shows an alternative way to export the middleware function in Next.js by using the `export default` syntax instead of a named export. The function signature remains the same, accepting the `request` object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/middleware.mdx#_snippet_1

LANGUAGE: js
CODE:
```
// Example of default export
export default function middleware(request) {
  // Middleware logic
}
```

----------------------------------------

TITLE: Accessing IP Address with `@vercel/functions` in Middleware (TS)
DESCRIPTION: This snippet demonstrates how to obtain the client's IP address from a `NextRequest` within a Next.js middleware using the `ipAddress` function from the `@vercel/functions` package. This replaces the removed `ip` property on `NextRequest`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_27

LANGUAGE: ts
CODE:
```
import { ipAddress } from '@vercel/functions'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  const ip = ipAddress(request)

  // ...
}
```

----------------------------------------

TITLE: Vitest Unit Test for App Router Page
DESCRIPTION: A unit test using Vitest and React Testing Library to verify that the App Router `Page` component renders correctly. It checks for the presence of an `<h1>` element with the text "Home".
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_5

LANGUAGE: TSX
CODE:
```
import { expect, test } from 'vitest'
import { render, screen } from '@testing-library/react'
import Page from '../app/page'

test('Page', () => {
  render(<Page />)
  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()
})
```

LANGUAGE: JSX
CODE:
```
import { expect, test } from 'vitest'
import { render, screen } from '@testing-library/react'
import Page from '../app/page'

test('Page', () => {
  render(<Page />)
  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()
})
```

----------------------------------------

TITLE: Setting Page Title with String in Next.js Metadata
DESCRIPTION: This snippet demonstrates how to set a static page title using a simple string value for the `title` property within the `metadata` object in Next.js. This configuration applies directly to the current route segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/generate-metadata.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Next.js',
}
```

LANGUAGE: html
CODE:
```
<title>Next.js</title>
```

----------------------------------------

TITLE: Configure next/image remotePatterns with URL (Next.js 15.3+)
DESCRIPTION: Configure the `images.remotePatterns` array in `next.config.js` using the `new URL()` constructor to specify allowed remote image hosts and paths for Next.js versions 15.3.0 and later.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-unconfigured-host.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    remotePatterns: [new URL('https://assets.example.com/account123/**')],
  },
}
```

----------------------------------------

TITLE: Returning JSON Response with NextResponse in JavaScript
DESCRIPTION: This snippet demonstrates how to create and return a JSON response using `NextResponse.json()`. It allows specifying a JSON body and an optional status code, useful for API routes to send structured data back to the client. Here, it returns an error object with a 500 status.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/04-functions/next-response.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { NextResponse } from 'next/server'

export async function GET(request) {
  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })
```

----------------------------------------

TITLE: Defining Image Dimensions with Width and Height Props (JSX)
DESCRIPTION: This snippet shows how to explicitly set the `width` and `height` properties for the `next/image` component. These values represent the intrinsic size of the image in pixels, helping browsers reserve space and prevent layout shifts during loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/02-components/image.mdx#_snippet_4

LANGUAGE: JSX
CODE:
```
<Image src="/profile.png" width={500} height={500} />
```

----------------------------------------

TITLE: Defining Page Loading UI with loading.js in Next.js
DESCRIPTION: This component defines the loading UI for a Next.js route segment. When placed as `loading.js` in a folder, it automatically wraps the corresponding `page.js` and its children in a `<Suspense>` boundary, displaying this fallback while the main page content is rendered. This improves perceived performance by showing immediate feedback to the user and requires the `dynamicIO` config option to be enabled.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-fetching-data.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
export default function Loading() {
  // Define the Loading UI here
  return <div>Loading...</div>
}
```

----------------------------------------

TITLE: Implementing Global Error Handling in Next.js with JavaScript
DESCRIPTION: This snippet provides the JavaScript equivalent of `global-error.tsx`, showing how to create a `global-error.js` file for root-level error handling in Next.js. As a Client Component, it requires `<html>` and `<body>` tags and offers a simple UI to reset the error state, replacing the root layout when an error occurs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/05-api-reference/03-file-conventions/error.mdx#_snippet_5

LANGUAGE: JavaScript
CODE:
```
'use client' // Error boundaries must be Client Components

export default function GlobalError({ error, reset }) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}
```